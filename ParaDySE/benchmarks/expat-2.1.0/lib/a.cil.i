# 1 "./a.cil.c"
# 1 "/home/hamid/Desktop/CStaticAnalysis/ParaDySE/benchmarks/expat-2.1.0/lib//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "./a.cil.c"
# 130 "./a.cil.c"
void __globinit_stdout(void) ;
extern void __CrestInit(void) __attribute__((__crest_skip__)) ;
extern void __CrestHandleReturn(int id , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestReturn(int id ) __attribute__((__crest_skip__)) ;
extern void __CrestCall(int id , unsigned int fid ) __attribute__((__crest_skip__)) ;
extern void __CrestBranch(int id , int bid , unsigned char b ) __attribute__((__crest_skip__)) ;
extern void __CrestApply2(int id , int op , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestApply1(int id , int op , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestClearStack(int id ) __attribute__((__crest_skip__)) ;
extern void __CrestStore(int id , unsigned long addr ) __attribute__((__crest_skip__)) ;
extern void __CrestLoad(int id , unsigned long addr , long long val ) __attribute__((__crest_skip__)) ;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
typedef unsigned long size_t;
# 139 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
# 75 "/usr/include/time.h"
typedef __time_t time_t;
# 94 "expat_external.h"
typedef char XML_Char;
# 95 "expat_external.h"
typedef char XML_LChar;
# 107 "expat_external.h"
typedef long XML_Index;
# 108 "expat_external.h"
typedef unsigned long XML_Size;
# 24 "expat.h"
struct XML_ParserStruct ;
# 25 "expat.h"
typedef struct XML_ParserStruct *XML_Parser;
# 28 "expat.h"
typedef unsigned char XML_Bool;
# 45 "expat.h"
enum XML_Status {
    XML_STATUS_ERROR = 0,
    XML_STATUS_OK = 1,
    XML_STATUS_SUSPENDED = 2
} ;
# 54 "expat.h"
enum XML_Error {
    XML_ERROR_NONE = 0,
    XML_ERROR_NO_MEMORY = 1,
    XML_ERROR_SYNTAX = 2,
    XML_ERROR_NO_ELEMENTS = 3,
    XML_ERROR_INVALID_TOKEN = 4,
    XML_ERROR_UNCLOSED_TOKEN = 5,
    XML_ERROR_PARTIAL_CHAR = 6,
    XML_ERROR_TAG_MISMATCH = 7,
    XML_ERROR_DUPLICATE_ATTRIBUTE = 8,
    XML_ERROR_JUNK_AFTER_DOC_ELEMENT = 9,
    XML_ERROR_PARAM_ENTITY_REF = 10,
    XML_ERROR_UNDEFINED_ENTITY = 11,
    XML_ERROR_RECURSIVE_ENTITY_REF = 12,
    XML_ERROR_ASYNC_ENTITY = 13,
    XML_ERROR_BAD_CHAR_REF = 14,
    XML_ERROR_BINARY_ENTITY_REF = 15,
    XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF = 16,
    XML_ERROR_MISPLACED_XML_PI = 17,
    XML_ERROR_UNKNOWN_ENCODING = 18,
    XML_ERROR_INCORRECT_ENCODING = 19,
    XML_ERROR_UNCLOSED_CDATA_SECTION = 20,
    XML_ERROR_EXTERNAL_ENTITY_HANDLING = 21,
    XML_ERROR_NOT_STANDALONE = 22,
    XML_ERROR_UNEXPECTED_STATE = 23,
    XML_ERROR_ENTITY_DECLARED_IN_PE = 24,
    XML_ERROR_FEATURE_REQUIRES_XML_DTD = 25,
    XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING = 26,
    XML_ERROR_UNBOUND_PREFIX = 27,
    XML_ERROR_UNDECLARING_PREFIX = 28,
    XML_ERROR_INCOMPLETE_PE = 29,
    XML_ERROR_XML_DECL = 30,
    XML_ERROR_TEXT_DECL = 31,
    XML_ERROR_PUBLICID = 32,
    XML_ERROR_SUSPENDED = 33,
    XML_ERROR_NOT_SUSPENDED = 34,
    XML_ERROR_ABORTED = 35,
    XML_ERROR_FINISHED = 36,
    XML_ERROR_SUSPEND_PE = 37,
    XML_ERROR_RESERVED_PREFIX_XML = 38,
    XML_ERROR_RESERVED_PREFIX_XMLNS = 39,
    XML_ERROR_RESERVED_NAMESPACE_URI = 40
} ;
# 101 "expat.h"
enum XML_Content_Type {
    XML_CTYPE_EMPTY = 1,
    XML_CTYPE_ANY = 2,
    XML_CTYPE_MIXED = 3,
    XML_CTYPE_NAME = 4,
    XML_CTYPE_CHOICE = 5,
    XML_CTYPE_SEQ = 6
} ;
# 110 "expat.h"
enum XML_Content_Quant {
    XML_CQUANT_NONE = 0,
    XML_CQUANT_OPT = 1,
    XML_CQUANT_REP = 2,
    XML_CQUANT_PLUS = 3
} ;
# 135 "expat.h"
struct XML_cp ;
# 135 "expat.h"
typedef struct XML_cp XML_Content;
# 137 "expat.h"
struct XML_cp {
   enum XML_Content_Type type ;
   enum XML_Content_Quant quant ;
   XML_Char *name ;
   unsigned int numchildren ;
   XML_Content *children ;
};
# 196 "expat.h"
struct __anonstruct_XML_Memory_Handling_Suite_1021999983 {
   void *(*malloc_fcn)(size_t size ) ;
   void *(*realloc_fcn)(void *ptr , size_t size ) ;
   void (*free_fcn)(void *ptr ) ;
};
# 196 "expat.h"
typedef struct __anonstruct_XML_Memory_Handling_Suite_1021999983 XML_Memory_Handling_Suite;
# 506 "expat.h"
struct __anonstruct_XML_Encoding_57076185 {
   int map[256] ;
   void *data ;
   int (*convert)(void *data , char const *s ) ;
   void (*release)(void *data ) ;
};
# 506 "expat.h"
typedef struct __anonstruct_XML_Encoding_57076185 XML_Encoding;
# 835 "expat.h"
enum XML_Parsing {
    XML_INITIALIZED = 0,
    XML_PARSING = 1,
    XML_FINISHED = 2,
    XML_SUSPENDED = 3
} ;
# 842 "expat.h"
struct __anonstruct_XML_ParsingStatus_553604920 {
   enum XML_Parsing parsing ;
   XML_Bool finalBuffer ;
};
# 842 "expat.h"
typedef struct __anonstruct_XML_ParsingStatus_553604920 XML_ParsingStatus;
# 876 "expat.h"
enum XML_ParamEntityParsing {
    XML_PARAM_ENTITY_PARSING_NEVER = 0,
    XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE = 1,
    XML_PARAM_ENTITY_PARSING_ALWAYS = 2
} ;
# 996 "expat.h"
struct __anonstruct_XML_Expat_Version_582275743 {
   int major ;
   int minor ;
   int micro ;
};
# 996 "expat.h"
typedef struct __anonstruct_XML_Expat_Version_582275743 XML_Expat_Version;
# 1009 "expat.h"
enum XML_FeatureEnum {
    XML_FEATURE_END = 0,
    XML_FEATURE_UNICODE = 1,
    XML_FEATURE_UNICODE_WCHAR_T = 2,
    XML_FEATURE_DTD = 3,
    XML_FEATURE_CONTEXT_BYTES = 4,
    XML_FEATURE_MIN_SIZE = 5,
    XML_FEATURE_SIZEOF_XML_CHAR = 6,
    XML_FEATURE_SIZEOF_XML_LCHAR = 7,
    XML_FEATURE_NS = 8,
    XML_FEATURE_LARGE_SIZE = 9,
    XML_FEATURE_ATTR_INFO = 10
} ;
# 1024 "expat.h"
struct __anonstruct_XML_Feature_106251564 {
   enum XML_FeatureEnum feature ;
   XML_LChar const *name ;
   long value ;
};
# 1024 "expat.h"
typedef struct __anonstruct_XML_Feature_106251564 XML_Feature;
# 45 "xmlparse.c"
typedef char ICHAR;
# 112 "xmltok.h"
struct position {
   XML_Size lineNumber ;
   XML_Size columnNumber ;
};
# 112 "xmltok.h"
typedef struct position POSITION;
# 118 "xmltok.h"
struct __anonstruct_ATTRIBUTE_266818929 {
   char const *name ;
   char const *valuePtr ;
   char const *valueEnd ;
   char normalized ;
};
# 118 "xmltok.h"
typedef struct __anonstruct_ATTRIBUTE_266818929 ATTRIBUTE;
# 125 "xmltok.h"
struct encoding ;
# 126 "xmltok.h"
typedef struct encoding ENCODING;
# 128 "xmltok.h"
typedef int (*SCANNER)(ENCODING const * , char const * , char const * , char const ** );
# 133 "xmltok.h"
struct encoding {
   SCANNER scanners[4] ;
   SCANNER literalScanners[2] ;
   int (*sameName)(ENCODING const * , char const * , char const * ) ;
   int (*nameMatchesAscii)(ENCODING const * , char const * , char const * ,
                           char const * ) ;
   int (*nameLength)(ENCODING const * , char const * ) ;
   char const *(*skipS)(ENCODING const * , char const * ) ;
   int (*getAtts)(ENCODING const *enc , char const *ptr , int attsMax , ATTRIBUTE *atts ) ;
   int (*charRefNumber)(ENCODING const *enc , char const *ptr ) ;
   int (*predefinedEntityName)(ENCODING const * , char const * , char const * ) ;
   void (*updatePosition)(ENCODING const * , char const *ptr , char const *end ,
                          POSITION * ) ;
   int (*isPublicId)(ENCODING const *enc , char const *ptr , char const *end ,
                     char const **badPtr ) ;
   void (*utf8Convert)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                       char **toP , char const *toLim ) ;
   void (*utf16Convert)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                        unsigned short **toP , unsigned short const *toLim ) ;
   int minBytesPerChar ;
   char isUtf8 ;
   char isUtf16 ;
};
# 261 "xmltok.h"
struct __anonstruct_INIT_ENCODING_129800875 {
   ENCODING initEnc ;
   ENCODING const **encPtr ;
};
# 261 "xmltok.h"
typedef struct __anonstruct_INIT_ENCODING_129800875 INIT_ENCODING;
# 87 "xmlrole.h"
struct prolog_state {
   int (*handler)(struct prolog_state *state , int tok , char const *ptr , char const *end ,
                  ENCODING const *enc ) ;
   unsigned int level ;
   int role_none ;
   unsigned int includeLevel ;
   int documentEntity ;
   int inEntityValue ;
};
# 87 "xmlrole.h"
typedef struct prolog_state PROLOG_STATE;
# 92 "xmlparse.c"
typedef XML_Char const *KEY;
# 94 "xmlparse.c"
struct __anonstruct_NAMED_687056029 {
   KEY name ;
};
# 94 "xmlparse.c"
typedef struct __anonstruct_NAMED_687056029 NAMED;
# 98 "xmlparse.c"
struct __anonstruct_HASH_TABLE_294152293 {
   NAMED **v ;
   unsigned char power ;
   size_t size ;
   size_t used ;
   XML_Memory_Handling_Suite const *mem ;
};
# 98 "xmlparse.c"
typedef struct __anonstruct_HASH_TABLE_294152293 HASH_TABLE;
# 131 "xmlparse.c"
struct __anonstruct_HASH_TABLE_ITER_15896500 {
   NAMED **p ;
   NAMED **end ;
};
# 131 "xmlparse.c"
typedef struct __anonstruct_HASH_TABLE_ITER_15896500 HASH_TABLE_ITER;
# 145 "xmlparse.c"
struct prefix ;
# 145 "xmlparse.c"
struct attribute_id ;
# 145 "xmlparse.c"
struct binding {
   struct prefix *prefix ;
   struct binding *nextTagBinding ;
   struct binding *prevPrefixBinding ;
   struct attribute_id const *attId ;
   XML_Char *uri ;
   int uriLen ;
   int uriAlloc ;
};
# 145 "xmlparse.c"
typedef struct binding BINDING;
# 155 "xmlparse.c"
struct prefix {
   XML_Char const *name ;
   BINDING *binding ;
};
# 155 "xmlparse.c"
typedef struct prefix PREFIX;
# 160 "xmlparse.c"
struct __anonstruct_TAG_NAME_793067044 {
   XML_Char const *str ;
   XML_Char const *localPart ;
   XML_Char const *prefix ;
   int strLen ;
   int uriLen ;
   int prefixLen ;
};
# 160 "xmlparse.c"
typedef struct __anonstruct_TAG_NAME_793067044 TAG_NAME;
# 182 "xmlparse.c"
struct tag {
   struct tag *parent ;
   char const *rawName ;
   int rawNameLength ;
   TAG_NAME name ;
   char *buf ;
   char *bufEnd ;
   BINDING *bindings ;
};
# 182 "xmlparse.c"
typedef struct tag TAG;
# 192 "xmlparse.c"
struct __anonstruct_ENTITY_594465245 {
   XML_Char const *name ;
   XML_Char const *textPtr ;
   int textLen ;
   int processed ;
   XML_Char const *systemId ;
   XML_Char const *base ;
   XML_Char const *publicId ;
   XML_Char const *notation ;
   XML_Bool open ;
   XML_Bool is_param ;
   XML_Bool is_internal ;
};
# 192 "xmlparse.c"
typedef struct __anonstruct_ENTITY_594465245 ENTITY;
# 206 "xmlparse.c"
struct __anonstruct_CONTENT_SCAFFOLD_359432673 {
   enum XML_Content_Type type ;
   enum XML_Content_Quant quant ;
   XML_Char const *name ;
   int firstchild ;
   int lastchild ;
   int childcnt ;
   int nextsib ;
};
# 206 "xmlparse.c"
typedef struct __anonstruct_CONTENT_SCAFFOLD_359432673 CONTENT_SCAFFOLD;
# 218 "xmlparse.c"
struct block {
   struct block *next ;
   int size ;
   XML_Char s[1] ;
};
# 218 "xmlparse.c"
typedef struct block BLOCK;
# 224 "xmlparse.c"
struct __anonstruct_STRING_POOL_617112616 {
   BLOCK *blocks ;
   BLOCK *freeBlocks ;
   XML_Char const *end ;
   XML_Char *ptr ;
   XML_Char *start ;
   XML_Memory_Handling_Suite const *mem ;
};
# 224 "xmlparse.c"
typedef struct __anonstruct_STRING_POOL_617112616 STRING_POOL;
# 235 "xmlparse.c"
struct attribute_id {
   XML_Char *name ;
   PREFIX *prefix ;
   XML_Bool maybeTokenized ;
   XML_Bool xmlns ;
};
# 235 "xmlparse.c"
typedef struct attribute_id ATTRIBUTE_ID;
# 242 "xmlparse.c"
struct __anonstruct_DEFAULT_ATTRIBUTE_986137207 {
   ATTRIBUTE_ID const *id ;
   XML_Bool isCdata ;
   XML_Char const *value ;
};
# 242 "xmlparse.c"
typedef struct __anonstruct_DEFAULT_ATTRIBUTE_986137207 DEFAULT_ATTRIBUTE;
# 248 "xmlparse.c"
struct __anonstruct_NS_ATT_43716280 {
   unsigned long version ;
   unsigned long hash ;
   XML_Char const *uriName ;
};
# 248 "xmlparse.c"
typedef struct __anonstruct_NS_ATT_43716280 NS_ATT;
# 254 "xmlparse.c"
struct __anonstruct_ELEMENT_TYPE_58712390 {
   XML_Char const *name ;
   PREFIX *prefix ;
   ATTRIBUTE_ID const *idAtt ;
   int nDefaultAtts ;
   int allocDefaultAtts ;
   DEFAULT_ATTRIBUTE *defaultAtts ;
};
# 254 "xmlparse.c"
typedef struct __anonstruct_ELEMENT_TYPE_58712390 ELEMENT_TYPE;
# 263 "xmlparse.c"
struct __anonstruct_DTD_394863310 {
   HASH_TABLE generalEntities ;
   HASH_TABLE elementTypes ;
   HASH_TABLE attributeIds ;
   HASH_TABLE prefixes ;
   STRING_POOL pool ;
   STRING_POOL entityValuePool ;
   XML_Bool keepProcessing ;
   XML_Bool hasParamEntityRefs ;
   XML_Bool standalone ;
   XML_Bool paramEntityRead ;
   HASH_TABLE paramEntities ;
   PREFIX defaultPrefix ;
   XML_Bool in_eldecl ;
   CONTENT_SCAFFOLD *scaffold ;
   unsigned int contentStringLen ;
   unsigned int scaffSize ;
   unsigned int scaffCount ;
   int scaffLevel ;
   int *scaffIndex ;
};
# 263 "xmlparse.c"
typedef struct __anonstruct_DTD_394863310 DTD;
# 292 "xmlparse.c"
struct open_internal_entity {
   char const *internalEventPtr ;
   char const *internalEventEndPtr ;
   struct open_internal_entity *next ;
   ENTITY *entity ;
   int startTagLevel ;
   XML_Bool betweenDecl ;
};
# 292 "xmlparse.c"
typedef struct open_internal_entity OPEN_INTERNAL_ENTITY;
# 301 "xmlparse.c"
typedef enum XML_Error Processor(XML_Parser parser , char const *start , char const *end ,
                                 char const **endPtr );
# 460 "xmlparse.c"
struct XML_ParserStruct {
   void *m_userData ;
   void *m_handlerArg ;
   char *m_buffer ;
   XML_Memory_Handling_Suite const m_mem ;
   char const *m_bufferPtr ;
   char *m_bufferEnd ;
   char const *m_bufferLim ;
   XML_Index m_parseEndByteIndex ;
   char const *m_parseEndPtr ;
   XML_Char *m_dataBuf ;
   XML_Char *m_dataBufEnd ;
   void (*m_startElementHandler)(void *userData , XML_Char const *name , XML_Char const **atts ) ;
   void (*m_endElementHandler)(void *userData , XML_Char const *name ) ;
   void (*m_characterDataHandler)(void *userData , XML_Char const *s , int len ) ;
   void (*m_processingInstructionHandler)(void *userData , XML_Char const *target ,
                                          XML_Char const *data ) ;
   void (*m_commentHandler)(void *userData , XML_Char const *data ) ;
   void (*m_startCdataSectionHandler)(void *userData ) ;
   void (*m_endCdataSectionHandler)(void *userData ) ;
   void (*m_defaultHandler)(void *userData , XML_Char const *s , int len ) ;
   void (*m_startDoctypeDeclHandler)(void *userData , XML_Char const *doctypeName ,
                                     XML_Char const *sysid , XML_Char const *pubid ,
                                     int has_internal_subset ) ;
   void (*m_endDoctypeDeclHandler)(void *userData ) ;
   void (*m_unparsedEntityDeclHandler)(void *userData , XML_Char const *entityName ,
                                       XML_Char const *base , XML_Char const *systemId ,
                                       XML_Char const *publicId , XML_Char const *notationName ) ;
   void (*m_notationDeclHandler)(void *userData , XML_Char const *notationName ,
                                 XML_Char const *base , XML_Char const *systemId ,
                                 XML_Char const *publicId ) ;
   void (*m_startNamespaceDeclHandler)(void *userData , XML_Char const *prefix ,
                                       XML_Char const *uri ) ;
   void (*m_endNamespaceDeclHandler)(void *userData , XML_Char const *prefix ) ;
   int (*m_notStandaloneHandler)(void *userData ) ;
   int (*m_externalEntityRefHandler)(XML_Parser parser , XML_Char const *context ,
                                     XML_Char const *base , XML_Char const *systemId ,
                                     XML_Char const *publicId ) ;
   XML_Parser m_externalEntityRefHandlerArg ;
   void (*m_skippedEntityHandler)(void *userData , XML_Char const *entityName ,
                                  int is_parameter_entity ) ;
   int (*m_unknownEncodingHandler)(void *encodingHandlerData , XML_Char const *name ,
                                   XML_Encoding *info ) ;
   void (*m_elementDeclHandler)(void *userData , XML_Char const *name , XML_Content *model ) ;
   void (*m_attlistDeclHandler)(void *userData , XML_Char const *elname , XML_Char const *attname ,
                                XML_Char const *att_type , XML_Char const *dflt ,
                                int isrequired ) ;
   void (*m_entityDeclHandler)(void *userData , XML_Char const *entityName , int is_parameter_entity ,
                               XML_Char const *value , int value_length , XML_Char const *base ,
                               XML_Char const *systemId , XML_Char const *publicId ,
                               XML_Char const *notationName ) ;
   void (*m_xmlDeclHandler)(void *userData , XML_Char const *version , XML_Char const *encoding ,
                            int standalone ) ;
   ENCODING const *m_encoding ;
   INIT_ENCODING m_initEncoding ;
   ENCODING const *m_internalEncoding ;
   XML_Char const *m_protocolEncodingName ;
   XML_Bool m_ns ;
   XML_Bool m_ns_triplets ;
   void *m_unknownEncodingMem ;
   void *m_unknownEncodingData ;
   void *m_unknownEncodingHandlerData ;
   void (*m_unknownEncodingRelease)(void * ) ;
   PROLOG_STATE m_prologState ;
   Processor *m_processor ;
   enum XML_Error m_errorCode ;
   char const *m_eventPtr ;
   char const *m_eventEndPtr ;
   char const *m_positionPtr ;
   OPEN_INTERNAL_ENTITY *m_openInternalEntities ;
   OPEN_INTERNAL_ENTITY *m_freeInternalEntities ;
   XML_Bool m_defaultExpandInternalEntities ;
   int m_tagLevel ;
   ENTITY *m_declEntity ;
   XML_Char const *m_doctypeName ;
   XML_Char const *m_doctypeSysid ;
   XML_Char const *m_doctypePubid ;
   XML_Char const *m_declAttributeType ;
   XML_Char const *m_declNotationName ;
   XML_Char const *m_declNotationPublicId ;
   ELEMENT_TYPE *m_declElementType ;
   ATTRIBUTE_ID *m_declAttributeId ;
   XML_Bool m_declAttributeIsCdata ;
   XML_Bool m_declAttributeIsId ;
   DTD *m_dtd ;
   XML_Char const *m_curBase ;
   TAG *m_tagStack ;
   TAG *m_freeTagList ;
   BINDING *m_inheritedBindings ;
   BINDING *m_freeBindingList ;
   int m_attsSize ;
   int m_nSpecifiedAtts ;
   int m_idAttIndex ;
   ATTRIBUTE *m_atts ;
   NS_ATT *m_nsAtts ;
   unsigned long m_nsAttsVersion ;
   unsigned char m_nsAttsPower ;
   POSITION m_position ;
   STRING_POOL m_tempPool ;
   STRING_POOL m_temp2Pool ;
   char *m_groupConnector ;
   unsigned int m_groupSize ;
   XML_Char m_namespaceSeparator ;
   XML_Parser m_parentParser ;
   XML_ParsingStatus m_parsingStatus ;
   XML_Bool m_isParamEntity ;
   XML_Bool m_useForeignDTD ;
   enum XML_ParamEntityParsing m_paramEntityParsing ;
   unsigned long m_hash_secret_salt ;
};
# 176 "xmltok.c"
struct normal_encoding {
   ENCODING enc ;
   unsigned char type[256] ;
   int (*isName2)(ENCODING const * , char const * ) ;
   int (*isName3)(ENCODING const * , char const * ) ;
   int (*isName4)(ENCODING const * , char const * ) ;
   int (*isNmstrt2)(ENCODING const * , char const * ) ;
   int (*isNmstrt3)(ENCODING const * , char const * ) ;
   int (*isNmstrt4)(ENCODING const * , char const * ) ;
   int (*isInvalid2)(ENCODING const * , char const * ) ;
   int (*isInvalid3)(ENCODING const * , char const * ) ;
   int (*isInvalid4)(ENCODING const * , char const * ) ;
};
# 1434 "xmltok_impl.c"
enum __anonenum_state_81194955 {
    other = 0,
    inName = 1,
    inValue = 2
} ;
# 1434 "xmltok_impl.c"
enum __anonenum_state_1045544529 {
    other___0 = 0,
    inName___0 = 1,
    inValue___0 = 2
} ;
# 1434 "xmltok_impl.c"
enum __anonenum_state_1045544530 {
    other___1 = 0,
    inName___1 = 1,
    inValue___1 = 2
} ;
# 1247 "xmltok.c"
struct unknown_encoding {
   struct normal_encoding normal ;
   int (*convert)(void *userData , char const *p ) ;
   void *userData ;
   unsigned short utf16[256] ;
   char utf8[256][4] ;
};
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
# 44 "/usr/include/stdio.h"
struct _IO_FILE ;
# 48 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
# 150 "/usr/include/libio.h"
typedef void _IO_lock_t;
# 156 "/usr/include/libio.h"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
# 241 "/usr/include/libio.h"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
};
# 1 "xmlparse.o"
#pragma merger("0","./xmlparse.i","-std=gnu99,-g,-O0,-Wall,-Wmissing-prototypes,-Wstrict-prototypes,-fexceptions")
# 200 "../../../include/crest.h"
extern void __CrestChar(char *x ) __attribute__((__crest_skip__)) ;
# 46 "/usr/include/string.h"
extern __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2), __leaf__)) memmove)(void *__dest ,
                                                                                                  void const *__src ,
                                                                                                  size_t __n ) ;
# 62 "/usr/include/string.h"
extern __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1), __leaf__)) memset)(void *__s ,
                                                                                               int __c ,
                                                                                               size_t __n ) ;
# 65 "/usr/include/string.h"
 __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const *Ptr1 ,
                                                                                        void const *Ptr2 ,
                                                                                        size_t Count ) __attribute__((__pure__)) ;
# 69 "/usr/include/assert.h"
extern __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) __assert_fail)(char const *__assertion ,
                                                                                                   char const *__file ,
                                                                                                   unsigned int __line ,
                                                                                                   char const *__function ) ;
# 192 "/usr/include/time.h"
extern __attribute__((__nothrow__)) time_t ( __attribute__((__leaf__)) time)(time_t *__timer ) ;
# 374 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) rand)(void) ;
# 376 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) srand)(unsigned int __seed ) ;
# 466 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size ) __attribute__((__malloc__)) ;
# 480 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void *( __attribute__((__warn_unused_result__,
__leaf__)) realloc)(void *__ptr , size_t __size ) ;
# 483 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
# 154 "expat.h"
void XML_SetElementDeclHandler(XML_Parser parser , void (*eldecl)(void *userData ,
                                                                  XML_Char const *name ,
                                                                  XML_Content *model ) ) ;
# 174 "expat.h"
void XML_SetAttlistDeclHandler(XML_Parser parser , void (*attdecl)(void *userData ,
                                                                   XML_Char const *elname ,
                                                                   XML_Char const *attname ,
                                                                   XML_Char const *att_type ,
                                                                   XML_Char const *dflt ,
                                                                   int isrequired ) ) ;
# 191 "expat.h"
void XML_SetXmlDeclHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *version ,
                                                               XML_Char const *encoding ,
                                                               int standalone ) ) ;
# 205 "expat.h"
XML_Parser XML_ParserCreate(XML_Char const *encodingName ) ;
# 219 "expat.h"
XML_Parser XML_ParserCreateNS(XML_Char const *encodingName , XML_Char nsSep ) ;
# 232 "expat.h"
XML_Parser XML_ParserCreate_MM(XML_Char const *encodingName , XML_Memory_Handling_Suite const *memsuite ,
                               XML_Char const *nameSep ) ;
# 246 "expat.h"
XML_Bool XML_ParserReset(XML_Parser parser , XML_Char const *encodingName ) ;
# 340 "expat.h"
void XML_SetEntityDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                  XML_Char const *entityName ,
                                                                  int is_parameter_entity ,
                                                                  XML_Char const *value ,
                                                                  int value_length ,
                                                                  XML_Char const *base ,
                                                                  XML_Char const *systemId ,
                                                                  XML_Char const *publicId ,
                                                                  XML_Char const *notationName ) ) ;
# 533 "expat.h"
void XML_SetElementHandler(XML_Parser parser , void (*start)(void *userData , XML_Char const *name ,
                                                             XML_Char const **atts ) ,
                           void (*end)(void *userData , XML_Char const *name ) ) ;
# 538 "expat.h"
void XML_SetStartElementHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                  XML_Char const *name ,
                                                                  XML_Char const **atts ) ) ;
# 542 "expat.h"
void XML_SetEndElementHandler(XML_Parser parser , void (*end)(void *userData , XML_Char const *name ) ) ;
# 546 "expat.h"
void XML_SetCharacterDataHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *s ,
                                                                     int len ) ) ;
# 550 "expat.h"
void XML_SetProcessingInstructionHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                             XML_Char const *target ,
                                                                             XML_Char const *data ) ) ;
# 553 "expat.h"
void XML_SetCommentHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *data ) ) ;
# 557 "expat.h"
void XML_SetCdataSectionHandler(XML_Parser parser , void (*start)(void *userData ) ,
                                void (*end)(void *userData ) ) ;
# 562 "expat.h"
void XML_SetStartCdataSectionHandler(XML_Parser parser , void (*start)(void *userData ) ) ;
# 566 "expat.h"
void XML_SetEndCdataSectionHandler(XML_Parser parser , void (*end)(void *userData ) ) ;
# 574 "expat.h"
void XML_SetDefaultHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *s ,
                                                               int len ) ) ;
# 582 "expat.h"
void XML_SetDefaultHandlerExpand(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *s ,
                                                                     int len ) ) ;
# 586 "expat.h"
void XML_SetDoctypeDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                 XML_Char const *doctypeName ,
                                                                 XML_Char const *sysid ,
                                                                 XML_Char const *pubid ,
                                                                 int has_internal_subset ) ,
                               void (*end)(void *userData ) ) ;
# 591 "expat.h"
void XML_SetStartDoctypeDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                      XML_Char const *doctypeName ,
                                                                      XML_Char const *sysid ,
                                                                      XML_Char const *pubid ,
                                                                      int has_internal_subset ) ) ;
# 595 "expat.h"
void XML_SetEndDoctypeDeclHandler(XML_Parser parser , void (*end)(void *userData ) ) ;
# 599 "expat.h"
void XML_SetUnparsedEntityDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                          XML_Char const *entityName ,
                                                                          XML_Char const *base ,
                                                                          XML_Char const *systemId ,
                                                                          XML_Char const *publicId ,
                                                                          XML_Char const *notationName ) ) ;
# 603 "expat.h"
void XML_SetNotationDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                    XML_Char const *notationName ,
                                                                    XML_Char const *base ,
                                                                    XML_Char const *systemId ,
                                                                    XML_Char const *publicId ) ) ;
# 607 "expat.h"
void XML_SetNamespaceDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                   XML_Char const *prefix ,
                                                                   XML_Char const *uri ) ,
                                 void (*end)(void *userData , XML_Char const *prefix ) ) ;
# 612 "expat.h"
void XML_SetStartNamespaceDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                        XML_Char const *prefix ,
                                                                        XML_Char const *uri ) ) ;
# 616 "expat.h"
void XML_SetEndNamespaceDeclHandler(XML_Parser parser , void (*end)(void *userData ,
                                                                    XML_Char const *prefix ) ) ;
# 620 "expat.h"
void XML_SetNotStandaloneHandler(XML_Parser parser , int (*handler)(void *userData ) ) ;
# 624 "expat.h"
void XML_SetExternalEntityRefHandler(XML_Parser parser , int (*handler)(XML_Parser parser ,
                                                                        XML_Char const *context ,
                                                                        XML_Char const *base ,
                                                                        XML_Char const *systemId ,
                                                                        XML_Char const *publicId ) ) ;
# 632 "expat.h"
void XML_SetExternalEntityRefHandlerArg(XML_Parser parser , void *arg ) ;
# 636 "expat.h"
void XML_SetSkippedEntityHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *entityName ,
                                                                     int is_parameter_entity ) ) ;
# 640 "expat.h"
void XML_SetUnknownEncodingHandler(XML_Parser parser , int (*handler)(void *encodingHandlerData ,
                                                                      XML_Char const *name ,
                                                                      XML_Encoding *info ) ,
                                   void *data ) ;
# 649 "expat.h"
void XML_DefaultCurrent(XML_Parser parser ) ;
# 666 "expat.h"
void XML_SetReturnNSTriplet(XML_Parser parser , int do_nst ) ;
# 670 "expat.h"
void XML_SetUserData(XML_Parser parser , void *p ) ;
# 682 "expat.h"
enum XML_Status XML_SetEncoding(XML_Parser parser , XML_Char const *encodingName ) ;
# 689 "expat.h"
void XML_UseParserAsHandlerArg(XML_Parser parser ) ;
# 710 "expat.h"
enum XML_Error XML_UseForeignDTD(XML_Parser parser , XML_Bool useDTD ) ;
# 722 "expat.h"
enum XML_Status XML_SetBase(XML_Parser parser , XML_Char const *p ) ;
# 725 "expat.h"
XML_Char const *XML_GetBase(XML_Parser parser ) ;
# 734 "expat.h"
int XML_GetSpecifiedAttributeCount(XML_Parser parser ) ;
# 742 "expat.h"
int XML_GetIdAttributeIndex(XML_Parser parser ) ;
# 777 "expat.h"
enum XML_Status XML_Parse(XML_Parser parser , char const *s , int len , int isFinal ) ;
# 780 "expat.h"
void *XML_GetBuffer(XML_Parser parser , int len ) ;
# 783 "expat.h"
enum XML_Status XML_ParseBuffer(XML_Parser parser , int len , int isFinal ) ;
# 817 "expat.h"
enum XML_Status XML_StopParser(XML_Parser parser , XML_Bool resumable ) ;
# 832 "expat.h"
enum XML_Status XML_ResumeParser(XML_Parser parser ) ;
# 852 "expat.h"
void XML_GetParsingStatus(XML_Parser parser , XML_ParsingStatus *status ) ;
# 871 "expat.h"
XML_Parser XML_ExternalEntityParserCreate(XML_Parser oldParser , XML_Char const *context ,
                                          XML_Char const *encodingName ) ;
# 905 "expat.h"
int XML_SetParamEntityParsing(XML_Parser parser , enum XML_ParamEntityParsing peParsing ) ;
# 914 "expat.h"
int XML_SetHashSalt(XML_Parser parser , unsigned long hash_salt ) ;
# 921 "expat.h"
enum XML_Error XML_GetErrorCode(XML_Parser parser ) ;
# 940 "expat.h"
XML_Size XML_GetCurrentLineNumber(XML_Parser parser ) ;
# 941 "expat.h"
XML_Size XML_GetCurrentColumnNumber(XML_Parser parser ) ;
# 942 "expat.h"
XML_Index XML_GetCurrentByteIndex(XML_Parser parser ) ;
# 947 "expat.h"
int XML_GetCurrentByteCount(XML_Parser parser ) ;
# 960 "expat.h"
char const *XML_GetInputContext(XML_Parser parser , int *offset , int *size ) ;
# 971 "expat.h"
void XML_FreeContentModel(XML_Parser parser , XML_Content *model ) ;
# 975 "expat.h"
void *XML_MemMalloc(XML_Parser parser , size_t size ) ;
# 978 "expat.h"
void *XML_MemRealloc(XML_Parser parser , void *ptr , size_t size ) ;
# 981 "expat.h"
void XML_MemFree(XML_Parser parser , void *ptr ) ;
# 985 "expat.h"
void XML_ParserFree(XML_Parser parser ) ;
# 989 "expat.h"
XML_LChar const *XML_ErrorString(enum XML_Error code ) ;
# 993 "expat.h"
XML_LChar const *XML_ExpatVersion(void) ;
# 1005 "expat.h"
XML_Expat_Version XML_ExpatVersionInfo(void) ;
# 1030 "expat.h"
XML_Feature const *XML_GetFeatureList(void) ;
# 266 "xmltok.h"
int XmlParseXmlDecl(int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
                    char const *end , char const **badPtr , char const **versionPtr ,
                    char const **versionEndPtr , char const **encodingName , ENCODING const **encoding ,
                    int *standalone ) ;
# 277 "xmltok.h"
int XmlInitEncoding(INIT_ENCODING *p , ENCODING const **encPtr , char const *name ) ;
# 278 "xmltok.h"
ENCODING const *XmlGetUtf8InternalEncoding(void) ;
# 280 "xmltok.h"
int XmlUtf8Encode(int c , char *buf ) ;
# 282 "xmltok.h"
int XmlSizeOfUnknownEncoding(void) ;
# 287 "xmltok.h"
ENCODING *XmlInitUnknownEncoding(void *mem , int *table , int (*convert)(void *userData ,
                                                                         char const *p ) ,
                                 void *userData ) ;
# 293 "xmltok.h"
int XmlParseXmlDeclNS(int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
                      char const *end , char const **badPtr , char const **versionPtr ,
                      char const **versionEndPtr , char const **encodingName ,
                      ENCODING const **encoding , int *standalone ) ;
# 304 "xmltok.h"
int XmlInitEncodingNS(INIT_ENCODING *p , ENCODING const **encPtr , char const *name ) ;
# 305 "xmltok.h"
ENCODING const *XmlGetUtf8InternalEncodingNS(void) ;
# 307 "xmltok.h"
ENCODING *XmlInitUnknownEncodingNS(void *mem , int *table , int (*convert)(void *userData ,
                                                                           char const *p ) ,
                                   void *userData ) ;
# 102 "xmlrole.h"
void XmlPrologStateInit(PROLOG_STATE *state ) ;
# 104 "xmlrole.h"
void XmlPrologStateInitExternalEntity(PROLOG_STATE *state ) ;
# 306 "xmlparse.c"
static enum XML_Error prologProcessor(XML_Parser parser , char const *s , char const *end ,
                                      char const **nextPtr ) ;
# 307 "xmlparse.c"
static enum XML_Error prologInitProcessor(XML_Parser parser , char const *s , char const *end ,
                                          char const **nextPtr ) ;
# 308 "xmlparse.c"
static enum XML_Error contentProcessor(XML_Parser parser , char const *start , char const *end ,
                                       char const **endPtr ) ;
# 309 "xmlparse.c"
static enum XML_Error cdataSectionProcessor(XML_Parser parser , char const *start ,
                                            char const *end , char const **endPtr ) ;
# 311 "xmlparse.c"
static enum XML_Error ignoreSectionProcessor(XML_Parser parser , char const *start ,
                                             char const *end , char const **endPtr ) ;
# 312 "xmlparse.c"
static enum XML_Error externalParEntProcessor(XML_Parser parser , char const *s ,
                                              char const *end , char const **nextPtr ) ;
# 313 "xmlparse.c"
static enum XML_Error externalParEntInitProcessor(XML_Parser parser , char const *s ,
                                                  char const *end , char const **nextPtr ) ;
# 314 "xmlparse.c"
static enum XML_Error entityValueProcessor(XML_Parser parser , char const *s , char const *end ,
                                           char const **nextPtr ) ;
# 315 "xmlparse.c"
static enum XML_Error entityValueInitProcessor(XML_Parser parser , char const *s ,
                                               char const *end , char const **nextPtr ) ;
# 317 "xmlparse.c"
static enum XML_Error epilogProcessor(XML_Parser parser , char const *s , char const *end ,
                                      char const **nextPtr ) ;
# 318 "xmlparse.c"
static enum XML_Error errorProcessor(XML_Parser parser , char const *s , char const *end ,
                                     char const **nextPtr ) ;
# 319 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor(XML_Parser parser , char const *start ,
                                                  char const *end , char const **endPtr ) ;
# 320 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor2(XML_Parser parser , char const *start ,
                                                   char const *end , char const **endPtr ) ;
# 321 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor3(XML_Parser parser , char const *start ,
                                                   char const *end , char const **endPtr ) ;
# 322 "xmlparse.c"
static enum XML_Error externalEntityContentProcessor(XML_Parser parser , char const *start ,
                                                     char const *end , char const **endPtr ) ;
# 323 "xmlparse.c"
static enum XML_Error internalEntityProcessor(XML_Parser parser , char const *s ,
                                              char const *end , char const **nextPtr ) ;
# 325 "xmlparse.c"
static enum XML_Error handleUnknownEncoding(XML_Parser parser , XML_Char const *encodingName ) ;
# 327 "xmlparse.c"
static enum XML_Error processXmlDecl(XML_Parser parser , int isGeneralTextEntity ,
                                     char const *s , char const *next ) ;
# 330 "xmlparse.c"
static enum XML_Error initializeEncoding(XML_Parser parser ) ;
# 332 "xmlparse.c"
static enum XML_Error doProlog(XML_Parser parser , ENCODING const *enc , char const *s ,
                               char const *end , int tok , char const *next ,
                               char const **nextPtr , XML_Bool haveMore ) ;
# 336 "xmlparse.c"
static enum XML_Error processInternalEntity(XML_Parser parser , ENTITY *entity , XML_Bool betweenDecl ) ;
# 339 "xmlparse.c"
static enum XML_Error doContent(XML_Parser parser , int startTagLevel , ENCODING const *enc ,
                                char const *s , char const *end , char const **nextPtr ,
                                XML_Bool haveMore ) ;
# 343 "xmlparse.c"
static enum XML_Error doCdataSection(XML_Parser parser , ENCODING const *enc , char const **startPtr ,
                                     char const *end , char const **nextPtr ,
                                     XML_Bool haveMore ) ;
# 347 "xmlparse.c"
static enum XML_Error doIgnoreSection(XML_Parser parser , ENCODING const *enc ,
                                      char const **startPtr , char const *end ,
                                      char const **nextPtr , XML_Bool haveMore ) ;
# 352 "xmlparse.c"
static enum XML_Error storeAtts(XML_Parser parser , ENCODING const *enc , char const *attStr ,
                                TAG_NAME *tagNamePtr , BINDING **bindingsPtr ) ;
# 355 "xmlparse.c"
static enum XML_Error addBinding(XML_Parser parser , PREFIX *prefix , ATTRIBUTE_ID const *attId ,
                                 XML_Char const *uri , BINDING **bindingsPtr ) ;
# 358 "xmlparse.c"
static int defineAttribute(ELEMENT_TYPE *type , ATTRIBUTE_ID *attId , XML_Bool isCdata ,
                           XML_Bool isId , XML_Char const *value , XML_Parser parser ) ;
# 361 "xmlparse.c"
static enum XML_Error storeAttributeValue(XML_Parser parser , ENCODING const *enc ,
                                          XML_Bool isCdata , char const *ptr , char const *end ,
                                          STRING_POOL *pool ) ;
# 364 "xmlparse.c"
static enum XML_Error appendAttributeValue(XML_Parser parser , ENCODING const *enc ,
                                           XML_Bool isCdata , char const *ptr ,
                                           char const *end , STRING_POOL *pool ) ;
# 367 "xmlparse.c"
static ATTRIBUTE_ID *getAttributeId(XML_Parser parser , ENCODING const *enc , char const *start ,
                                    char const *end ) ;
# 370 "xmlparse.c"
static int setElementTypePrefix(XML_Parser parser , ELEMENT_TYPE *elementType ) ;
# 372 "xmlparse.c"
static enum XML_Error storeEntityValue(XML_Parser parser , ENCODING const *enc ,
                                       char const *entityTextPtr , char const *entityTextEnd ) ;
# 375 "xmlparse.c"
static int reportProcessingInstruction(XML_Parser parser , ENCODING const *enc ,
                                       char const *start , char const *end ) ;
# 378 "xmlparse.c"
static int reportComment(XML_Parser parser , ENCODING const *enc , char const *start ,
                         char const *end ) ;
# 381 "xmlparse.c"
static void reportDefault(XML_Parser parser , ENCODING const *enc , char const *s ,
                          char const *end ) ;
# 385 "xmlparse.c"
static XML_Char const *getContext(XML_Parser parser ) ;
# 386 "xmlparse.c"
static XML_Bool setContext(XML_Parser parser , XML_Char const *context ) ;
# 389 "xmlparse.c"
static void normalizePublicId(XML_Char *publicId ) ;
# 391 "xmlparse.c"
static DTD *dtdCreate(XML_Memory_Handling_Suite const *ms ) ;
# 393 "xmlparse.c"
static void dtdReset(DTD *p , XML_Memory_Handling_Suite const *ms ) ;
# 394 "xmlparse.c"
static void dtdDestroy(DTD *p , XML_Bool isDocEntity , XML_Memory_Handling_Suite const *ms ) ;
# 396 "xmlparse.c"
static int dtdCopy(XML_Parser oldParser , DTD *newDtd , DTD const *oldDtd , XML_Memory_Handling_Suite const *ms ) ;
# 399 "xmlparse.c"
static int copyEntityTable(XML_Parser oldParser , HASH_TABLE *newTable , STRING_POOL *newPool ,
                           HASH_TABLE const *oldTable ) ;
# 402 "xmlparse.c"
static NAMED *lookup(XML_Parser parser , HASH_TABLE *table , KEY name , size_t createSize ) ;
# 404 "xmlparse.c"
static void hashTableInit(HASH_TABLE *p , XML_Memory_Handling_Suite const *ms ) ;
# 406 "xmlparse.c"
static void hashTableClear(HASH_TABLE *table ) ;
# 407 "xmlparse.c"
static void hashTableDestroy(HASH_TABLE *table ) ;
# 408 "xmlparse.c"
static void hashTableIterInit(HASH_TABLE_ITER *iter , HASH_TABLE const *table ) ;
# 410 "xmlparse.c"
static NAMED *hashTableIterNext(HASH_TABLE_ITER *iter ) ;
# 412 "xmlparse.c"
static void poolInit(STRING_POOL *pool , XML_Memory_Handling_Suite const *ms ) ;
# 414 "xmlparse.c"
static void poolClear(STRING_POOL *pool ) ;
# 415 "xmlparse.c"
static void poolDestroy(STRING_POOL *pool ) ;
# 416 "xmlparse.c"
static XML_Char *poolAppend(STRING_POOL *pool , ENCODING const *enc , char const *ptr ,
                            char const *end ) ;
# 419 "xmlparse.c"
static XML_Char *poolStoreString(STRING_POOL *pool , ENCODING const *enc , char const *ptr ,
                                 char const *end ) ;
# 422 "xmlparse.c"
static XML_Bool poolGrow(STRING_POOL *pool ) ;
# 423 "xmlparse.c"
static XML_Char const *poolCopyString(STRING_POOL *pool , XML_Char const *s ) ;
# 425 "xmlparse.c"
static XML_Char const *poolCopyStringN(STRING_POOL *pool , XML_Char const *s ,
                                         int n ) ;
# 427 "xmlparse.c"
static XML_Char const *poolAppendString(STRING_POOL *pool , XML_Char const *s ) ;
# 430 "xmlparse.c"
static int nextScaffoldPart(XML_Parser parser ) ;
# 431 "xmlparse.c"
static XML_Content *build_model(XML_Parser parser ) ;
# 432 "xmlparse.c"
static ELEMENT_TYPE *getElementType(XML_Parser parser , ENCODING const *enc , char const *ptr ,
                                    char const *end ) ;
# 436 "xmlparse.c"
static unsigned long generate_hash_secret_salt(void) ;
# 437 "xmlparse.c"
static XML_Bool startParsing(XML_Parser parser ) ;
# 439 "xmlparse.c"
static XML_Parser parserCreate(XML_Char const *encodingName , XML_Memory_Handling_Suite const *memsuite ,
                               XML_Char const *nameSep , DTD *dtd ) ;
# 445 "xmlparse.c"
static void parserInit(XML_Parser parser , XML_Char const *encodingName ) ;
# 671 "xmlparse.c"
XML_Parser XML_ParserCreate(XML_Char const *encodingName )
{
  XML_Parser tmp ;

  {
  __CrestCall(66183, 687);
# 674 "xmlparse.c"
  tmp = XML_ParserCreate_MM(encodingName, (XML_Memory_Handling_Suite const *)((void *)0),
                            (XML_Char const *)((void *)0));
  __CrestClearStack(66184);
  {
  __CrestReturn(66185);
# 674 "xmlparse.c"
  return (tmp);
  }
}
}
# 677 "xmlparse.c"
XML_Parser XML_ParserCreateNS(XML_Char const *encodingName , XML_Char nsSep )
{
  XML_Char tmp[2] ;
  XML_Parser tmp___0 ;

  {
  __CrestCall(66187, 688);
  __CrestStore(66186, (unsigned long )(& nsSep));
  __CrestLoad(66188, (unsigned long )(& nsSep), (long long )nsSep);
  __CrestStore(66189, (unsigned long )(& tmp[0]));
# 681 "xmlparse.c"
  tmp[0] = nsSep;
# 682 "xmlparse.c"
  tmp___0 = XML_ParserCreate_MM(encodingName, (XML_Memory_Handling_Suite const *)((void *)0),
                                (XML_Char const *)(tmp));
  __CrestClearStack(66190);
  {
  __CrestReturn(66191);
# 682 "xmlparse.c"
  return (tmp___0);
  }
}
}
# 685 "xmlparse.c"
static XML_Char const implicitContext[41] =
# 685 "xmlparse.c"
  { (XML_Char const )120, (XML_Char const )109, (XML_Char const )108, (XML_Char const )61,
        (XML_Char const )104, (XML_Char const )116, (XML_Char const )116, (XML_Char const )112,
        (XML_Char const )58, (XML_Char const )47, (XML_Char const )47, (XML_Char const )119,
        (XML_Char const )119, (XML_Char const )119, (XML_Char const )46, (XML_Char const )119,
        (XML_Char const )51, (XML_Char const )46, (XML_Char const )111, (XML_Char const )114,
        (XML_Char const )103, (XML_Char const )47, (XML_Char const )88, (XML_Char const )77,
        (XML_Char const )76, (XML_Char const )47, (XML_Char const )49, (XML_Char const )57,
        (XML_Char const )57, (XML_Char const )56, (XML_Char const )47, (XML_Char const )110,
        (XML_Char const )97, (XML_Char const )109, (XML_Char const )101, (XML_Char const )115,
        (XML_Char const )112, (XML_Char const )97, (XML_Char const )99, (XML_Char const )101,
        (XML_Char const )'\000'};
# 694 "xmlparse.c"
static unsigned long generate_hash_secret_salt(void)
{
  unsigned int seed ;
  time_t tmp ;
  int tmp___0 ;
  unsigned long __retres4 ;

  {
  __CrestCall(66192, 689);
# 697 "xmlparse.c"
  tmp = time((time_t *)((void *)0));
  __CrestHandleReturn(66194, (long long )tmp);
  __CrestStore(66193, (unsigned long )(& tmp));
  __CrestLoad(66197, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(66196, (unsigned long )0, (long long )4294967295L);
  __CrestApply2(66195, 4, (long long )(tmp % 4294967295L));
  __CrestStore(66198, (unsigned long )(& seed));
# 697 "xmlparse.c"
  seed = (unsigned int )(tmp % 4294967295L);
  __CrestLoad(66199, (unsigned long )(& seed), (long long )seed);
# 698 "xmlparse.c"
  srand(seed);
  __CrestClearStack(66200);
# 699 "xmlparse.c"
  tmp___0 = rand();
  __CrestHandleReturn(66202, (long long )tmp___0);
  __CrestStore(66201, (unsigned long )(& tmp___0));
  __CrestLoad(66203, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(66204, (unsigned long )(& __retres4));
# 699 "xmlparse.c"
  __retres4 = (unsigned long )tmp___0;
  {
  __CrestLoad(66205, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(66206);
# 694 "xmlparse.c"
  return (__retres4);
  }
}
}
# 702 "xmlparse.c"
static XML_Bool startParsing(XML_Parser parser )
{
  XML_Bool tmp ;
  XML_Bool __retres3 ;

  {
  __CrestCall(66207, 690);

  {
  __CrestLoad(66210, (unsigned long )(& parser->m_hash_secret_salt), (long long )parser->m_hash_secret_salt);
  __CrestLoad(66209, (unsigned long )0, (long long )0UL);
  __CrestApply2(66208, 12, (long long )(parser->m_hash_secret_salt == 0UL));
# 706 "xmlparse.c"
  if (parser->m_hash_secret_salt == 0UL) {
    __CrestBranch(66211, 42977, 1);
# 707 "xmlparse.c"
    parser->m_hash_secret_salt = generate_hash_secret_salt();
    __CrestHandleReturn(66214, (long long )parser->m_hash_secret_salt);
    __CrestStore(66213, (unsigned long )(& parser->m_hash_secret_salt));
  } else {
    __CrestBranch(66212, 42978, 0);

  }
  }
  {
  __CrestLoad(66217, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
  __CrestLoad(66216, (unsigned long )0, (long long )0);
  __CrestApply2(66215, 13, (long long )(parser->m_ns != 0));
# 708 "xmlparse.c"
  if (parser->m_ns != 0) {
    __CrestBranch(66218, 42980, 1);
# 712 "xmlparse.c"
    tmp = setContext(parser, implicitContext);
    __CrestHandleReturn(66221, (long long )tmp);
    __CrestStore(66220, (unsigned long )(& tmp));
    __CrestLoad(66222, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(66223, (unsigned long )(& __retres3));
# 712 "xmlparse.c"
    __retres3 = tmp;
# 712 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66219, 42983, 0);

  }
  }
  __CrestLoad(66224, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(66225, (unsigned long )(& __retres3));
# 714 "xmlparse.c"
  __retres3 = (XML_Bool )1;
  return_label:
  {
  __CrestLoad(66226, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(66227);
# 702 "xmlparse.c"
  return (__retres3);
  }
}
}
# 717 "xmlparse.c"
XML_Parser XML_ParserCreate_MM(XML_Char const *encodingName , XML_Memory_Handling_Suite const *memsuite ,
                               XML_Char const *nameSep )
{
  XML_Parser tmp ;

  {
  __CrestCall(66228, 691);
# 722 "xmlparse.c"
  tmp = parserCreate(encodingName, memsuite, nameSep, (DTD *)((void *)0));
  __CrestClearStack(66229);
  {
  __CrestReturn(66230);
# 722 "xmlparse.c"
  return (tmp);
  }
}
}
# 725 "xmlparse.c"
static XML_Parser parserCreate(XML_Char const *encodingName , XML_Memory_Handling_Suite const *memsuite ,
                               XML_Char const *nameSep , DTD *dtd )
{
  XML_Parser parser ;
  XML_Memory_Handling_Suite *mtemp ;
  void *tmp ;
  XML_Memory_Handling_Suite *mtemp___0 ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  void *(*mem_12)(size_t size ) ;
  void *(*mem_13)(size_t size ) ;
  void (*mem_14)(void *ptr ) ;
  void *(*mem_15)(size_t size ) ;
  void (*mem_16)(void *ptr ) ;
  void (*mem_17)(void *ptr ) ;
  void (*mem_18)(void *ptr ) ;
  void (*mem_19)(void *ptr ) ;
  void (*mem_20)(void *ptr ) ;
  XML_Parser __retres21 ;

  {
  __CrestCall(66231, 692);

  {
  __CrestLoad(66234, (unsigned long )(& memsuite), (long long )((unsigned long )memsuite));
  __CrestLoad(66233, (unsigned long )0, (long long )0);
  __CrestApply2(66232, 13, (long long )(memsuite != 0));
# 733 "xmlparse.c"
  if (memsuite != 0) {
    __CrestBranch(66235, 42989, 1);
# 735 "xmlparse.c"
    mem_12 = memsuite->malloc_fcn;
    __CrestLoad(66237, (unsigned long )0, (long long )sizeof(struct XML_ParserStruct ));
# 735 "xmlparse.c"
    tmp = (*mem_12)(sizeof(struct XML_ParserStruct ));
    __CrestClearStack(66238);
# 735 "xmlparse.c"
    parser = (XML_Parser )tmp;
    {
    __CrestLoad(66241, (unsigned long )(& parser), (long long )((unsigned long )parser));
    __CrestLoad(66240, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66239, 13, (long long )((unsigned long )parser != (unsigned long )((void *)0)));
# 737 "xmlparse.c"
    if ((unsigned long )parser != (unsigned long )((void *)0)) {
      __CrestBranch(66242, 42991, 1);
# 738 "xmlparse.c"
      mtemp = (XML_Memory_Handling_Suite *)(& parser->m_mem);
# 739 "xmlparse.c"
      mtemp->malloc_fcn = (void *(*)(size_t size ))memsuite->malloc_fcn;
# 740 "xmlparse.c"
      mtemp->realloc_fcn = (void *(*)(void *ptr , size_t size ))memsuite->realloc_fcn;
# 741 "xmlparse.c"
      mtemp->free_fcn = (void (*)(void *ptr ))memsuite->free_fcn;
    } else {
      __CrestBranch(66243, 42992, 0);

    }
    }
  } else {
    __CrestBranch(66236, 42993, 0);
    __CrestLoad(66244, (unsigned long )0, (long long )sizeof(struct XML_ParserStruct ));
# 746 "xmlparse.c"
    tmp___0 = malloc(sizeof(struct XML_ParserStruct ));
    __CrestClearStack(66245);
# 746 "xmlparse.c"
    parser = (XML_Parser )tmp___0;
    {
    __CrestLoad(66248, (unsigned long )(& parser), (long long )((unsigned long )parser));
    __CrestLoad(66247, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66246, 13, (long long )((unsigned long )parser != (unsigned long )((void *)0)));
# 747 "xmlparse.c"
    if ((unsigned long )parser != (unsigned long )((void *)0)) {
      __CrestBranch(66249, 42995, 1);
# 748 "xmlparse.c"
      mtemp___0 = (XML_Memory_Handling_Suite *)(& parser->m_mem);
# 749 "xmlparse.c"
      mtemp___0->malloc_fcn = (void *(*)(size_t size ))(& malloc);
# 750 "xmlparse.c"
      mtemp___0->realloc_fcn = (void *(*)(void *ptr , size_t size ))(& realloc);
# 751 "xmlparse.c"
      mtemp___0->free_fcn = (void (*)(void *ptr ))(& free);
    } else {
      __CrestBranch(66250, 42996, 0);

    }
    }
  }
  }
  {
  __CrestLoad(66253, (unsigned long )(& parser), (long long )((unsigned long )parser));
  __CrestLoad(66252, (unsigned long )0, (long long )0);
  __CrestApply2(66251, 12, (long long )(parser == 0));
# 755 "xmlparse.c"
  if (parser == 0) {
    __CrestBranch(66254, 42998, 1);
# 756 "xmlparse.c"
    __retres21 = parser;
# 756 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66255, 43000, 0);

  }
  }
# 758 "xmlparse.c"
  parser->m_buffer = (char *)((void *)0);
# 759 "xmlparse.c"
  parser->m_bufferLim = (char const *)((void *)0);
  __CrestLoad(66256, (unsigned long )0, (long long )16);
  __CrestStore(66257, (unsigned long )(& parser->m_attsSize));
# 761 "xmlparse.c"
  parser->m_attsSize = 16;
# 762 "xmlparse.c"
  mem_13 = parser->m_mem.malloc_fcn;
  __CrestLoad(66260, (unsigned long )(& parser->m_attsSize), (long long )parser->m_attsSize);
  __CrestLoad(66259, (unsigned long )0, (long long )sizeof(ATTRIBUTE ));
  __CrestApply2(66258, 2, (long long )((unsigned long )parser->m_attsSize * sizeof(ATTRIBUTE )));
# 762 "xmlparse.c"
  tmp___1 = (*mem_13)((unsigned long )parser->m_attsSize * sizeof(ATTRIBUTE ));
  __CrestClearStack(66261);
# 762 "xmlparse.c"
  parser->m_atts = (ATTRIBUTE *)tmp___1;
  {
  __CrestLoad(66264, (unsigned long )(& parser->m_atts), (long long )((unsigned long )parser->m_atts));
  __CrestLoad(66263, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66262, 12, (long long )((unsigned long )parser->m_atts == (unsigned long )((void *)0)));
# 763 "xmlparse.c"
  if ((unsigned long )parser->m_atts == (unsigned long )((void *)0)) {
    __CrestBranch(66265, 43003, 1);
# 764 "xmlparse.c"
    mem_14 = parser->m_mem.free_fcn;
# 764 "xmlparse.c"
    (*mem_14)((void *)parser);
    __CrestClearStack(66267);
# 765 "xmlparse.c"
    __retres21 = (XML_Parser )((void *)0);
# 765 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66266, 43006, 0);

  }
  }
# 775 "xmlparse.c"
  mem_15 = parser->m_mem.malloc_fcn;
  __CrestLoad(66268, (unsigned long )0, (long long )(1024UL * sizeof(XML_Char )));
# 775 "xmlparse.c"
  tmp___2 = (*mem_15)(1024UL * sizeof(XML_Char ));
  __CrestClearStack(66269);
# 775 "xmlparse.c"
  parser->m_dataBuf = (XML_Char *)tmp___2;
  {
  __CrestLoad(66272, (unsigned long )(& parser->m_dataBuf), (long long )((unsigned long )parser->m_dataBuf));
  __CrestLoad(66271, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66270, 12, (long long )((unsigned long )parser->m_dataBuf == (unsigned long )((void *)0)));
# 776 "xmlparse.c"
  if ((unsigned long )parser->m_dataBuf == (unsigned long )((void *)0)) {
    __CrestBranch(66273, 43009, 1);
# 777 "xmlparse.c"
    mem_16 = parser->m_mem.free_fcn;
# 777 "xmlparse.c"
    (*mem_16)((void *)parser->m_atts);
    __CrestClearStack(66275);
# 781 "xmlparse.c"
    mem_17 = parser->m_mem.free_fcn;
# 781 "xmlparse.c"
    (*mem_17)((void *)parser);
    __CrestClearStack(66276);
# 782 "xmlparse.c"
    __retres21 = (XML_Parser )((void *)0);
# 782 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66274, 43012, 0);

  }
  }
# 784 "xmlparse.c"
  parser->m_dataBufEnd = parser->m_dataBuf + 1024;
  {
  __CrestLoad(66279, (unsigned long )(& dtd), (long long )((unsigned long )dtd));
  __CrestLoad(66278, (unsigned long )0, (long long )0);
  __CrestApply2(66277, 13, (long long )(dtd != 0));
# 786 "xmlparse.c"
  if (dtd != 0) {
    __CrestBranch(66280, 43015, 1);
# 787 "xmlparse.c"
    parser->m_dtd = dtd;
  } else {
    __CrestBranch(66281, 43016, 0);
# 789 "xmlparse.c"
    parser->m_dtd = dtdCreate(& parser->m_mem);
    __CrestClearStack(66282);
    {
    __CrestLoad(66285, (unsigned long )(& parser->m_dtd), (long long )((unsigned long )parser->m_dtd));
    __CrestLoad(66284, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66283, 12, (long long )((unsigned long )parser->m_dtd == (unsigned long )((void *)0)));
# 790 "xmlparse.c"
    if ((unsigned long )parser->m_dtd == (unsigned long )((void *)0)) {
      __CrestBranch(66286, 43018, 1);
# 791 "xmlparse.c"
      mem_18 = parser->m_mem.free_fcn;
# 791 "xmlparse.c"
      (*mem_18)((void *)parser->m_dataBuf);
      __CrestClearStack(66288);
# 792 "xmlparse.c"
      mem_19 = parser->m_mem.free_fcn;
# 792 "xmlparse.c"
      (*mem_19)((void *)parser->m_atts);
      __CrestClearStack(66289);
# 796 "xmlparse.c"
      mem_20 = parser->m_mem.free_fcn;
# 796 "xmlparse.c"
      (*mem_20)((void *)parser);
      __CrestClearStack(66290);
# 797 "xmlparse.c"
      __retres21 = (XML_Parser )((void *)0);
# 797 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66287, 43021, 0);

    }
    }
  }
  }
# 801 "xmlparse.c"
  parser->m_freeBindingList = (BINDING *)((void *)0);
# 802 "xmlparse.c"
  parser->m_freeTagList = (TAG *)((void *)0);
# 803 "xmlparse.c"
  parser->m_freeInternalEntities = (OPEN_INTERNAL_ENTITY *)((void *)0);
  __CrestLoad(66291, (unsigned long )0, (long long )0U);
  __CrestStore(66292, (unsigned long )(& parser->m_groupSize));
# 805 "xmlparse.c"
  parser->m_groupSize = 0U;
# 806 "xmlparse.c"
  parser->m_groupConnector = (char *)((void *)0);
# 808 "xmlparse.c"
  parser->m_unknownEncodingHandler = (int (*)(void *encodingHandlerData , XML_Char const *name ,
                                              XML_Encoding *info ))((void *)0);
# 809 "xmlparse.c"
  parser->m_unknownEncodingHandlerData = (void *)0;
  __CrestLoad(66293, (unsigned long )0, (long long )((XML_Char )33));
  __CrestStore(66294, (unsigned long )(& parser->m_namespaceSeparator));
# 811 "xmlparse.c"
  parser->m_namespaceSeparator = (XML_Char )33;
  __CrestLoad(66295, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66296, (unsigned long )(& parser->m_ns));
# 812 "xmlparse.c"
  parser->m_ns = (XML_Bool )0;
  __CrestLoad(66297, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66298, (unsigned long )(& parser->m_ns_triplets));
# 813 "xmlparse.c"
  parser->m_ns_triplets = (XML_Bool )0;
# 815 "xmlparse.c"
  parser->m_nsAtts = (NS_ATT *)((void *)0);
  __CrestLoad(66299, (unsigned long )0, (long long )0UL);
  __CrestStore(66300, (unsigned long )(& parser->m_nsAttsVersion));
# 816 "xmlparse.c"
  parser->m_nsAttsVersion = 0UL;
  __CrestLoad(66301, (unsigned long )0, (long long )(unsigned char)0);
  __CrestStore(66302, (unsigned long )(& parser->m_nsAttsPower));
# 817 "xmlparse.c"
  parser->m_nsAttsPower = (unsigned char)0;
# 819 "xmlparse.c"
  poolInit(& parser->m_tempPool, & parser->m_mem);
  __CrestClearStack(66303);
# 820 "xmlparse.c"
  poolInit(& parser->m_temp2Pool, & parser->m_mem);
  __CrestClearStack(66304);
# 821 "xmlparse.c"
  parserInit(parser, encodingName);
  __CrestClearStack(66305);
  {
  __CrestLoad(66308, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
  __CrestLoad(66307, (unsigned long )0, (long long )0);
  __CrestApply2(66306, 13, (long long )(encodingName != 0));
# 823 "xmlparse.c"
  if (encodingName != 0) {
    __CrestBranch(66309, 43024, 1);
    {
    __CrestLoad(66313, (unsigned long )(& parser->m_protocolEncodingName), (long long )((unsigned long )parser->m_protocolEncodingName));
    __CrestLoad(66312, (unsigned long )0, (long long )0);
    __CrestApply2(66311, 12, (long long )(parser->m_protocolEncodingName == 0));
# 823 "xmlparse.c"
    if (parser->m_protocolEncodingName == 0) {
      __CrestBranch(66314, 43025, 1);
# 824 "xmlparse.c"
      XML_ParserFree(parser);
      __CrestClearStack(66316);
# 825 "xmlparse.c"
      __retres21 = (XML_Parser )((void *)0);
# 825 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66315, 43028, 0);

    }
    }
  } else {
    __CrestBranch(66310, 43029, 0);

  }
  }
  {
  __CrestLoad(66319, (unsigned long )(& nameSep), (long long )((unsigned long )nameSep));
  __CrestLoad(66318, (unsigned long )0, (long long )0);
  __CrestApply2(66317, 13, (long long )(nameSep != 0));
# 828 "xmlparse.c"
  if (nameSep != 0) {
    __CrestBranch(66320, 43031, 1);
    __CrestLoad(66322, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(66323, (unsigned long )(& parser->m_ns));
# 829 "xmlparse.c"
    parser->m_ns = (XML_Bool )1;
# 830 "xmlparse.c"
    parser->m_internalEncoding = XmlGetUtf8InternalEncodingNS();
    __CrestClearStack(66324);
    __CrestLoad(66325, (unsigned long )nameSep, (long long )*nameSep);
    __CrestStore(66326, (unsigned long )(& parser->m_namespaceSeparator));
# 831 "xmlparse.c"
    parser->m_namespaceSeparator = (XML_Char )*nameSep;
  } else {
    __CrestBranch(66321, 43032, 0);
# 834 "xmlparse.c"
    parser->m_internalEncoding = XmlGetUtf8InternalEncoding();
    __CrestClearStack(66327);
  }
  }
# 837 "xmlparse.c"
  __retres21 = parser;
  return_label:
  {
  __CrestReturn(66328);
# 725 "xmlparse.c"
  return (__retres21);
  }
}
}
# 840 "xmlparse.c"
static void parserInit(XML_Parser parser , XML_Char const *encodingName )
{
  XML_Char const *tmp ;

  {
  __CrestCall(66329, 693);
# 843 "xmlparse.c"
  parser->m_processor = & prologInitProcessor;
# 844 "xmlparse.c"
  XmlPrologStateInit(& parser->m_prologState);
  __CrestClearStack(66330);
  {
  __CrestLoad(66333, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
  __CrestLoad(66332, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66331, 13, (long long )((unsigned long )encodingName != (unsigned long )((void *)0)));
# 845 "xmlparse.c"
  if ((unsigned long )encodingName != (unsigned long )((void *)0)) {
    __CrestBranch(66334, 43037, 1);
# 845 "xmlparse.c"
    tmp = poolCopyString(& parser->m_tempPool, encodingName);
    __CrestClearStack(66336);
# 845 "xmlparse.c"
    parser->m_protocolEncodingName = tmp;
  } else {
    __CrestBranch(66335, 43038, 0);
# 845 "xmlparse.c"
    parser->m_protocolEncodingName = (XML_Char const *)((void *)0);
  }
  }
# 848 "xmlparse.c"
  parser->m_curBase = (XML_Char const *)((void *)0);
# 849 "xmlparse.c"
  XmlInitEncoding(& parser->m_initEncoding, & parser->m_encoding, (char const *)0);
  __CrestClearStack(66337);
# 850 "xmlparse.c"
  parser->m_userData = (void *)0;
# 851 "xmlparse.c"
  parser->m_handlerArg = (void *)0;
# 852 "xmlparse.c"
  parser->m_startElementHandler = (void (*)(void *userData , XML_Char const *name ,
                                            XML_Char const **atts ))((void *)0);
# 853 "xmlparse.c"
  parser->m_endElementHandler = (void (*)(void *userData , XML_Char const *name ))((void *)0);
# 854 "xmlparse.c"
  parser->m_characterDataHandler = (void (*)(void *userData , XML_Char const *s ,
                                             int len ))((void *)0);
# 855 "xmlparse.c"
  parser->m_processingInstructionHandler = (void (*)(void *userData , XML_Char const *target ,
                                                     XML_Char const *data ))((void *)0);
# 856 "xmlparse.c"
  parser->m_commentHandler = (void (*)(void *userData , XML_Char const *data ))((void *)0);
# 857 "xmlparse.c"
  parser->m_startCdataSectionHandler = (void (*)(void *userData ))((void *)0);
# 858 "xmlparse.c"
  parser->m_endCdataSectionHandler = (void (*)(void *userData ))((void *)0);
# 859 "xmlparse.c"
  parser->m_defaultHandler = (void (*)(void *userData , XML_Char const *s , int len ))((void *)0);
# 860 "xmlparse.c"
  parser->m_startDoctypeDeclHandler = (void (*)(void *userData , XML_Char const *doctypeName ,
                                                XML_Char const *sysid , XML_Char const *pubid ,
                                                int has_internal_subset ))((void *)0);
# 861 "xmlparse.c"
  parser->m_endDoctypeDeclHandler = (void (*)(void *userData ))((void *)0);
# 862 "xmlparse.c"
  parser->m_unparsedEntityDeclHandler = (void (*)(void *userData , XML_Char const *entityName ,
                                                  XML_Char const *base , XML_Char const *systemId ,
                                                  XML_Char const *publicId , XML_Char const *notationName ))((void *)0);
# 863 "xmlparse.c"
  parser->m_notationDeclHandler = (void (*)(void *userData , XML_Char const *notationName ,
                                            XML_Char const *base , XML_Char const *systemId ,
                                            XML_Char const *publicId ))((void *)0);
# 864 "xmlparse.c"
  parser->m_startNamespaceDeclHandler = (void (*)(void *userData , XML_Char const *prefix ,
                                                  XML_Char const *uri ))((void *)0);
# 865 "xmlparse.c"
  parser->m_endNamespaceDeclHandler = (void (*)(void *userData , XML_Char const *prefix ))((void *)0);
# 866 "xmlparse.c"
  parser->m_notStandaloneHandler = (int (*)(void *userData ))((void *)0);
# 867 "xmlparse.c"
  parser->m_externalEntityRefHandler = (int (*)(XML_Parser parser , XML_Char const *context ,
                                                XML_Char const *base , XML_Char const *systemId ,
                                                XML_Char const *publicId ))((void *)0);
# 868 "xmlparse.c"
  parser->m_externalEntityRefHandlerArg = parser;
# 869 "xmlparse.c"
  parser->m_skippedEntityHandler = (void (*)(void *userData , XML_Char const *entityName ,
                                             int is_parameter_entity ))((void *)0);
# 870 "xmlparse.c"
  parser->m_elementDeclHandler = (void (*)(void *userData , XML_Char const *name ,
                                           XML_Content *model ))((void *)0);
# 871 "xmlparse.c"
  parser->m_attlistDeclHandler = (void (*)(void *userData , XML_Char const *elname ,
                                           XML_Char const *attname , XML_Char const *att_type ,
                                           XML_Char const *dflt , int isrequired ))((void *)0);
# 872 "xmlparse.c"
  parser->m_entityDeclHandler = (void (*)(void *userData , XML_Char const *entityName ,
                                          int is_parameter_entity , XML_Char const *value ,
                                          int value_length , XML_Char const *base ,
                                          XML_Char const *systemId , XML_Char const *publicId ,
                                          XML_Char const *notationName ))((void *)0);
# 873 "xmlparse.c"
  parser->m_xmlDeclHandler = (void (*)(void *userData , XML_Char const *version ,
                                       XML_Char const *encoding , int standalone ))((void *)0);
# 874 "xmlparse.c"
  parser->m_bufferPtr = (char const *)parser->m_buffer;
# 875 "xmlparse.c"
  parser->m_bufferEnd = parser->m_buffer;
  __CrestLoad(66338, (unsigned long )0, (long long )((XML_Index )0));
  __CrestStore(66339, (unsigned long )(& parser->m_parseEndByteIndex));
# 876 "xmlparse.c"
  parser->m_parseEndByteIndex = (XML_Index )0;
# 877 "xmlparse.c"
  parser->m_parseEndPtr = (char const *)((void *)0);
# 878 "xmlparse.c"
  parser->m_declElementType = (ELEMENT_TYPE *)((void *)0);
# 879 "xmlparse.c"
  parser->m_declAttributeId = (ATTRIBUTE_ID *)((void *)0);
# 880 "xmlparse.c"
  parser->m_declEntity = (ENTITY *)((void *)0);
# 881 "xmlparse.c"
  parser->m_doctypeName = (XML_Char const *)((void *)0);
# 882 "xmlparse.c"
  parser->m_doctypeSysid = (XML_Char const *)((void *)0);
# 883 "xmlparse.c"
  parser->m_doctypePubid = (XML_Char const *)((void *)0);
# 884 "xmlparse.c"
  parser->m_declAttributeType = (XML_Char const *)((void *)0);
# 885 "xmlparse.c"
  parser->m_declNotationName = (XML_Char const *)((void *)0);
# 886 "xmlparse.c"
  parser->m_declNotationPublicId = (XML_Char const *)((void *)0);
  __CrestLoad(66340, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66341, (unsigned long )(& parser->m_declAttributeIsCdata));
# 887 "xmlparse.c"
  parser->m_declAttributeIsCdata = (XML_Bool )0;
  __CrestLoad(66342, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66343, (unsigned long )(& parser->m_declAttributeIsId));
# 888 "xmlparse.c"
  parser->m_declAttributeIsId = (XML_Bool )0;
  __CrestLoad(66344, (unsigned long )0, (long long )0);
  __CrestLoad(66345, (unsigned long )0, (long long )sizeof(POSITION ));
# 889 "xmlparse.c"
  memset((void *)(& parser->m_position), 0, sizeof(POSITION ));
  __CrestClearStack(66346);
  __CrestLoad(66347, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(66348, (unsigned long )(& parser->m_errorCode));
# 890 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )0;
# 891 "xmlparse.c"
  parser->m_eventPtr = (char const *)((void *)0);
# 892 "xmlparse.c"
  parser->m_eventEndPtr = (char const *)((void *)0);
# 893 "xmlparse.c"
  parser->m_positionPtr = (char const *)((void *)0);
# 894 "xmlparse.c"
  parser->m_openInternalEntities = (OPEN_INTERNAL_ENTITY *)((void *)0);
  __CrestLoad(66349, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(66350, (unsigned long )(& parser->m_defaultExpandInternalEntities));
# 895 "xmlparse.c"
  parser->m_defaultExpandInternalEntities = (XML_Bool )1;
  __CrestLoad(66351, (unsigned long )0, (long long )0);
  __CrestStore(66352, (unsigned long )(& parser->m_tagLevel));
# 896 "xmlparse.c"
  parser->m_tagLevel = 0;
# 897 "xmlparse.c"
  parser->m_tagStack = (TAG *)((void *)0);
# 898 "xmlparse.c"
  parser->m_inheritedBindings = (BINDING *)((void *)0);
  __CrestLoad(66353, (unsigned long )0, (long long )0);
  __CrestStore(66354, (unsigned long )(& parser->m_nSpecifiedAtts));
# 899 "xmlparse.c"
  parser->m_nSpecifiedAtts = 0;
# 900 "xmlparse.c"
  parser->m_unknownEncodingMem = (void *)0;
# 901 "xmlparse.c"
  parser->m_unknownEncodingRelease = (void (*)(void * ))((void *)0);
# 902 "xmlparse.c"
  parser->m_unknownEncodingData = (void *)0;
# 903 "xmlparse.c"
  parser->m_parentParser = (XML_Parser )((void *)0);
  __CrestLoad(66355, (unsigned long )0, (long long )((enum XML_Parsing )0));
  __CrestStore(66356, (unsigned long )(& parser->m_parsingStatus.parsing));
# 904 "xmlparse.c"
  parser->m_parsingStatus.parsing = (enum XML_Parsing )0;
  __CrestLoad(66357, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66358, (unsigned long )(& parser->m_isParamEntity));
# 906 "xmlparse.c"
  parser->m_isParamEntity = (XML_Bool )0;
  __CrestLoad(66359, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66360, (unsigned long )(& parser->m_useForeignDTD));
# 907 "xmlparse.c"
  parser->m_useForeignDTD = (XML_Bool )0;
  __CrestLoad(66361, (unsigned long )0, (long long )((enum XML_ParamEntityParsing )0));
  __CrestStore(66362, (unsigned long )(& parser->m_paramEntityParsing));
# 908 "xmlparse.c"
  parser->m_paramEntityParsing = (enum XML_ParamEntityParsing )0;
  __CrestLoad(66363, (unsigned long )0, (long long )0UL);
  __CrestStore(66364, (unsigned long )(& parser->m_hash_secret_salt));
# 910 "xmlparse.c"
  parser->m_hash_secret_salt = 0UL;

  {
  __CrestReturn(66365);
# 840 "xmlparse.c"
  return;
  }
}
}
# 914 "xmlparse.c"
static void moveToFreeBindingList(XML_Parser parser , BINDING *bindings )
{
  BINDING *b ;

  {
  __CrestCall(66366, 694);

  {
# 917 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(66369, (unsigned long )(& bindings), (long long )((unsigned long )bindings));
    __CrestLoad(66368, (unsigned long )0, (long long )0);
    __CrestApply2(66367, 13, (long long )(bindings != 0));
# 917 "xmlparse.c"
    if (bindings != 0) {
      __CrestBranch(66370, 43046, 1);

    } else {
      __CrestBranch(66371, 43047, 0);
# 917 "xmlparse.c"
      goto while_break;
    }
    }
# 918 "xmlparse.c"
    b = bindings;
# 919 "xmlparse.c"
    bindings = bindings->nextTagBinding;
# 920 "xmlparse.c"
    b->nextTagBinding = parser->m_freeBindingList;
# 921 "xmlparse.c"
    parser->m_freeBindingList = b;
  }
  while_break: ;
  }

  {
  __CrestReturn(66372);
# 914 "xmlparse.c"
  return;
  }
}
}
# 925 "xmlparse.c"
XML_Bool XML_ParserReset(XML_Parser parser , XML_Char const *encodingName )
{
  TAG *tStk ;
  OPEN_INTERNAL_ENTITY *openEntityList ;
  TAG *tag ;
  OPEN_INTERNAL_ENTITY *openEntity ;
  void (*mem_7)(void *ptr ) ;
  void (*mem_8)(void * ) ;
  XML_Bool __retres9 ;

  {
  __CrestCall(66373, 695);

  {
  __CrestLoad(66376, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
  __CrestLoad(66375, (unsigned long )0, (long long )0);
  __CrestApply2(66374, 13, (long long )(parser->m_parentParser != 0));
# 930 "xmlparse.c"
  if (parser->m_parentParser != 0) {
    __CrestBranch(66377, 43053, 1);
    __CrestLoad(66379, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(66380, (unsigned long )(& __retres9));
# 931 "xmlparse.c"
    __retres9 = (XML_Bool )0;
# 931 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66378, 43055, 0);

  }
  }
# 933 "xmlparse.c"
  tStk = parser->m_tagStack;
  {
# 934 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(66383, (unsigned long )(& tStk), (long long )((unsigned long )tStk));
    __CrestLoad(66382, (unsigned long )0, (long long )0);
    __CrestApply2(66381, 13, (long long )(tStk != 0));
# 934 "xmlparse.c"
    if (tStk != 0) {
      __CrestBranch(66384, 43061, 1);

    } else {
      __CrestBranch(66385, 43062, 0);
# 934 "xmlparse.c"
      goto while_break;
    }
    }
# 935 "xmlparse.c"
    tag = tStk;
# 936 "xmlparse.c"
    tStk = tStk->parent;
# 937 "xmlparse.c"
    tag->parent = parser->m_freeTagList;
# 938 "xmlparse.c"
    moveToFreeBindingList(parser, tag->bindings);
    __CrestClearStack(66386);
# 939 "xmlparse.c"
    tag->bindings = (BINDING *)((void *)0);
# 940 "xmlparse.c"
    parser->m_freeTagList = tag;
  }
  while_break: ;
  }
# 943 "xmlparse.c"
  openEntityList = parser->m_openInternalEntities;
  {
# 944 "xmlparse.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(66389, (unsigned long )(& openEntityList), (long long )((unsigned long )openEntityList));
    __CrestLoad(66388, (unsigned long )0, (long long )0);
    __CrestApply2(66387, 13, (long long )(openEntityList != 0));
# 944 "xmlparse.c"
    if (openEntityList != 0) {
      __CrestBranch(66390, 43070, 1);

    } else {
      __CrestBranch(66391, 43071, 0);
# 944 "xmlparse.c"
      goto while_break___0;
    }
    }
# 945 "xmlparse.c"
    openEntity = openEntityList;
# 946 "xmlparse.c"
    openEntityList = openEntity->next;
# 947 "xmlparse.c"
    openEntity->next = parser->m_freeInternalEntities;
# 948 "xmlparse.c"
    parser->m_freeInternalEntities = openEntity;
  }
  while_break___0: ;
  }
# 950 "xmlparse.c"
  moveToFreeBindingList(parser, parser->m_inheritedBindings);
  __CrestClearStack(66392);
# 951 "xmlparse.c"
  mem_7 = parser->m_mem.free_fcn;
# 951 "xmlparse.c"
  (*mem_7)(parser->m_unknownEncodingMem);
  __CrestClearStack(66393);
  {
  __CrestLoad(66396, (unsigned long )(& parser->m_unknownEncodingRelease), (long long )((unsigned long )parser->m_unknownEncodingRelease));
  __CrestLoad(66395, (unsigned long )0, (long long )0);
  __CrestApply2(66394, 13, (long long )(parser->m_unknownEncodingRelease != 0));
# 952 "xmlparse.c"
  if (parser->m_unknownEncodingRelease != 0) {
    __CrestBranch(66397, 43076, 1);
# 953 "xmlparse.c"
    mem_8 = parser->m_unknownEncodingRelease;
# 953 "xmlparse.c"
    (*mem_8)(parser->m_unknownEncodingData);
    __CrestClearStack(66399);
  } else {
    __CrestBranch(66398, 43077, 0);

  }
  }
# 954 "xmlparse.c"
  poolClear(& parser->m_tempPool);
  __CrestClearStack(66400);
# 955 "xmlparse.c"
  poolClear(& parser->m_temp2Pool);
  __CrestClearStack(66401);
# 956 "xmlparse.c"
  parserInit(parser, encodingName);
  __CrestClearStack(66402);
# 957 "xmlparse.c"
  dtdReset(parser->m_dtd, & parser->m_mem);
  __CrestClearStack(66403);
  __CrestLoad(66404, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(66405, (unsigned long )(& __retres9));
# 958 "xmlparse.c"
  __retres9 = (XML_Bool )1;
  return_label:
  {
  __CrestLoad(66406, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(66407);
# 925 "xmlparse.c"
  return (__retres9);
  }
}
}
# 961 "xmlparse.c"
enum XML_Status XML_SetEncoding(XML_Parser parser , XML_Char const *encodingName )
{
  enum XML_Status __retres3 ;

  {
  __CrestCall(66408, 696);

  {
  __CrestLoad(66411, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66410, (unsigned long )0, (long long )1U);
  __CrestApply2(66409, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 968 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
    __CrestBranch(66412, 43082, 1);
    __CrestLoad(66414, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(66415, (unsigned long )(& __retres3));
# 969 "xmlparse.c"
    __retres3 = (enum XML_Status )0;
# 969 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66413, 43084, 0);
    {
    __CrestLoad(66418, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66417, (unsigned long )0, (long long )3U);
    __CrestApply2(66416, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 968 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66419, 43085, 1);
      __CrestLoad(66421, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66422, (unsigned long )(& __retres3));
# 969 "xmlparse.c"
      __retres3 = (enum XML_Status )0;
# 969 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66420, 43087, 0);

    }
    }
  }
  }
  {
  __CrestLoad(66425, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
  __CrestLoad(66424, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66423, 12, (long long )((unsigned long )encodingName == (unsigned long )((void *)0)));
# 970 "xmlparse.c"
  if ((unsigned long )encodingName == (unsigned long )((void *)0)) {
    __CrestBranch(66426, 43089, 1);
# 971 "xmlparse.c"
    parser->m_protocolEncodingName = (XML_Char const *)((void *)0);
  } else {
    __CrestBranch(66427, 43090, 0);
# 973 "xmlparse.c"
    parser->m_protocolEncodingName = poolCopyString(& parser->m_tempPool, encodingName);
    __CrestClearStack(66428);
    {
    __CrestLoad(66431, (unsigned long )(& parser->m_protocolEncodingName), (long long )((unsigned long )parser->m_protocolEncodingName));
    __CrestLoad(66430, (unsigned long )0, (long long )0);
    __CrestApply2(66429, 12, (long long )(parser->m_protocolEncodingName == 0));
# 974 "xmlparse.c"
    if (parser->m_protocolEncodingName == 0) {
      __CrestBranch(66432, 43092, 1);
      __CrestLoad(66434, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66435, (unsigned long )(& __retres3));
# 975 "xmlparse.c"
      __retres3 = (enum XML_Status )0;
# 975 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66433, 43094, 0);

    }
    }
  }
  }
  __CrestLoad(66436, (unsigned long )0, (long long )((enum XML_Status )1));
  __CrestStore(66437, (unsigned long )(& __retres3));
# 977 "xmlparse.c"
  __retres3 = (enum XML_Status )1;
  return_label:
  {
  __CrestLoad(66438, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(66439);
# 961 "xmlparse.c"
  return (__retres3);
  }
}
}
# 980 "xmlparse.c"
XML_Parser XML_ExternalEntityParserCreate(XML_Parser oldParser , XML_Char const *context ,
                                          XML_Char const *encodingName )
{
  XML_Parser parser ;
  DTD *newDtd ;
  DTD *oldDtd ;
  void (*oldStartElementHandler)(void *userData , XML_Char const *name , XML_Char const **atts ) ;
  void (*oldEndElementHandler)(void *userData , XML_Char const *name ) ;
  void (*oldCharacterDataHandler)(void *userData , XML_Char const *s , int len ) ;
  void (*oldProcessingInstructionHandler)(void *userData , XML_Char const *target ,
                                          XML_Char const *data ) ;
  void (*oldCommentHandler)(void *userData , XML_Char const *data ) ;
  void (*oldStartCdataSectionHandler)(void *userData ) ;
  void (*oldEndCdataSectionHandler)(void *userData ) ;
  void (*oldDefaultHandler)(void *userData , XML_Char const *s , int len ) ;
  void (*oldUnparsedEntityDeclHandler)(void *userData , XML_Char const *entityName ,
                                       XML_Char const *base , XML_Char const *systemId ,
                                       XML_Char const *publicId , XML_Char const *notationName ) ;
  void (*oldNotationDeclHandler)(void *userData , XML_Char const *notationName ,
                                 XML_Char const *base , XML_Char const *systemId ,
                                 XML_Char const *publicId ) ;
  void (*oldStartNamespaceDeclHandler)(void *userData , XML_Char const *prefix ,
                                       XML_Char const *uri ) ;
  void (*oldEndNamespaceDeclHandler)(void *userData , XML_Char const *prefix ) ;
  int (*oldNotStandaloneHandler)(void *userData ) ;
  int (*oldExternalEntityRefHandler)(XML_Parser parser , XML_Char const *context ,
                                     XML_Char const *base , XML_Char const *systemId ,
                                     XML_Char const *publicId ) ;
  void (*oldSkippedEntityHandler)(void *userData , XML_Char const *entityName ,
                                  int is_parameter_entity ) ;
  int (*oldUnknownEncodingHandler)(void *encodingHandlerData , XML_Char const *name ,
                                   XML_Encoding *info ) ;
  void (*oldElementDeclHandler)(void *userData , XML_Char const *name , XML_Content *model ) ;
  void (*oldAttlistDeclHandler)(void *userData , XML_Char const *elname , XML_Char const *attname ,
                                XML_Char const *att_type , XML_Char const *dflt ,
                                int isrequired ) ;
  void (*oldEntityDeclHandler)(void *userData , XML_Char const *entityName , int is_parameter_entity ,
                               XML_Char const *value , int value_length , XML_Char const *base ,
                               XML_Char const *systemId , XML_Char const *publicId ,
                               XML_Char const *notationName ) ;
  void (*oldXmlDeclHandler)(void *userData , XML_Char const *version , XML_Char const *encoding ,
                            int standalone ) ;
  ELEMENT_TYPE *oldDeclElementType ;
  void *oldUserData ;
  void *oldHandlerArg ;
  XML_Bool oldDefaultExpandInternalEntities ;
  XML_Parser oldExternalEntityRefHandlerArg ;
  enum XML_ParamEntityParsing oldParamEntityParsing ;
  int oldInEntityValue ;
  XML_Bool oldns_triplets ;
  unsigned long oldhash_secret_salt ;
  XML_Char tmp[2] ;
  int tmp___0 ;
  XML_Bool tmp___1 ;
  XML_Parser __retres39 ;

  {
  __CrestCall(66440, 697);
# 985 "xmlparse.c"
  parser = oldParser;
# 986 "xmlparse.c"
  newDtd = (DTD *)((void *)0);
# 987 "xmlparse.c"
  oldDtd = parser->m_dtd;
# 988 "xmlparse.c"
  oldStartElementHandler = parser->m_startElementHandler;
# 989 "xmlparse.c"
  oldEndElementHandler = parser->m_endElementHandler;
# 990 "xmlparse.c"
  oldCharacterDataHandler = parser->m_characterDataHandler;
# 991 "xmlparse.c"
  oldProcessingInstructionHandler = parser->m_processingInstructionHandler;
# 993 "xmlparse.c"
  oldCommentHandler = parser->m_commentHandler;
# 994 "xmlparse.c"
  oldStartCdataSectionHandler = parser->m_startCdataSectionHandler;
# 996 "xmlparse.c"
  oldEndCdataSectionHandler = parser->m_endCdataSectionHandler;
# 998 "xmlparse.c"
  oldDefaultHandler = parser->m_defaultHandler;
# 999 "xmlparse.c"
  oldUnparsedEntityDeclHandler = parser->m_unparsedEntityDeclHandler;
# 1001 "xmlparse.c"
  oldNotationDeclHandler = parser->m_notationDeclHandler;
# 1002 "xmlparse.c"
  oldStartNamespaceDeclHandler = parser->m_startNamespaceDeclHandler;
# 1004 "xmlparse.c"
  oldEndNamespaceDeclHandler = parser->m_endNamespaceDeclHandler;
# 1006 "xmlparse.c"
  oldNotStandaloneHandler = parser->m_notStandaloneHandler;
# 1007 "xmlparse.c"
  oldExternalEntityRefHandler = parser->m_externalEntityRefHandler;
# 1009 "xmlparse.c"
  oldSkippedEntityHandler = parser->m_skippedEntityHandler;
# 1010 "xmlparse.c"
  oldUnknownEncodingHandler = parser->m_unknownEncodingHandler;
# 1012 "xmlparse.c"
  oldElementDeclHandler = parser->m_elementDeclHandler;
# 1013 "xmlparse.c"
  oldAttlistDeclHandler = parser->m_attlistDeclHandler;
# 1014 "xmlparse.c"
  oldEntityDeclHandler = parser->m_entityDeclHandler;
# 1015 "xmlparse.c"
  oldXmlDeclHandler = parser->m_xmlDeclHandler;
# 1016 "xmlparse.c"
  oldDeclElementType = parser->m_declElementType;
# 1018 "xmlparse.c"
  oldUserData = parser->m_userData;
# 1019 "xmlparse.c"
  oldHandlerArg = parser->m_handlerArg;
  __CrestLoad(66441, (unsigned long )(& parser->m_defaultExpandInternalEntities),
              (long long )parser->m_defaultExpandInternalEntities);
  __CrestStore(66442, (unsigned long )(& oldDefaultExpandInternalEntities));
# 1020 "xmlparse.c"
  oldDefaultExpandInternalEntities = parser->m_defaultExpandInternalEntities;
# 1021 "xmlparse.c"
  oldExternalEntityRefHandlerArg = parser->m_externalEntityRefHandlerArg;
  __CrestLoad(66443, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
  __CrestStore(66444, (unsigned long )(& oldParamEntityParsing));
# 1023 "xmlparse.c"
  oldParamEntityParsing = parser->m_paramEntityParsing;
  __CrestLoad(66445, (unsigned long )(& parser->m_prologState.inEntityValue), (long long )parser->m_prologState.inEntityValue);
  __CrestStore(66446, (unsigned long )(& oldInEntityValue));
# 1024 "xmlparse.c"
  oldInEntityValue = parser->m_prologState.inEntityValue;
  __CrestLoad(66447, (unsigned long )(& parser->m_ns_triplets), (long long )parser->m_ns_triplets);
  __CrestStore(66448, (unsigned long )(& oldns_triplets));
# 1026 "xmlparse.c"
  oldns_triplets = parser->m_ns_triplets;
  __CrestLoad(66449, (unsigned long )(& parser->m_hash_secret_salt), (long long )parser->m_hash_secret_salt);
  __CrestStore(66450, (unsigned long )(& oldhash_secret_salt));
# 1032 "xmlparse.c"
  oldhash_secret_salt = parser->m_hash_secret_salt;
  {
  __CrestLoad(66453, (unsigned long )(& context), (long long )((unsigned long )context));
  __CrestLoad(66452, (unsigned long )0, (long long )0);
  __CrestApply2(66451, 12, (long long )(context == 0));
# 1035 "xmlparse.c"
  if (context == 0) {
    __CrestBranch(66454, 43099, 1);
# 1036 "xmlparse.c"
    newDtd = oldDtd;
  } else {
    __CrestBranch(66455, 43100, 0);

  }
  }
  {
  __CrestLoad(66458, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
  __CrestLoad(66457, (unsigned long )0, (long long )0);
  __CrestApply2(66456, 13, (long long )(parser->m_ns != 0));
# 1044 "xmlparse.c"
  if (parser->m_ns != 0) {
    __CrestBranch(66459, 43102, 1);
    __CrestLoad(66461, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
    __CrestStore(66462, (unsigned long )(& tmp[0]));
# 1046 "xmlparse.c"
    tmp[0] = parser->m_namespaceSeparator;
# 1047 "xmlparse.c"
    parser = parserCreate(encodingName, & parser->m_mem, (XML_Char const *)(tmp),
                          newDtd);
    __CrestClearStack(66463);
  } else {
    __CrestBranch(66460, 43103, 0);
# 1050 "xmlparse.c"
    parser = parserCreate(encodingName, & parser->m_mem, (XML_Char const *)((void *)0),
                          newDtd);
    __CrestClearStack(66464);
  }
  }
  {
  __CrestLoad(66467, (unsigned long )(& parser), (long long )((unsigned long )parser));
  __CrestLoad(66466, (unsigned long )0, (long long )0);
  __CrestApply2(66465, 12, (long long )(parser == 0));
# 1053 "xmlparse.c"
  if (parser == 0) {
    __CrestBranch(66468, 43105, 1);
# 1054 "xmlparse.c"
    __retres39 = (XML_Parser )((void *)0);
# 1054 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66469, 43107, 0);

  }
  }
# 1056 "xmlparse.c"
  parser->m_startElementHandler = oldStartElementHandler;
# 1057 "xmlparse.c"
  parser->m_endElementHandler = oldEndElementHandler;
# 1058 "xmlparse.c"
  parser->m_characterDataHandler = oldCharacterDataHandler;
# 1059 "xmlparse.c"
  parser->m_processingInstructionHandler = oldProcessingInstructionHandler;
# 1060 "xmlparse.c"
  parser->m_commentHandler = oldCommentHandler;
# 1061 "xmlparse.c"
  parser->m_startCdataSectionHandler = oldStartCdataSectionHandler;
# 1062 "xmlparse.c"
  parser->m_endCdataSectionHandler = oldEndCdataSectionHandler;
# 1063 "xmlparse.c"
  parser->m_defaultHandler = oldDefaultHandler;
# 1064 "xmlparse.c"
  parser->m_unparsedEntityDeclHandler = oldUnparsedEntityDeclHandler;
# 1065 "xmlparse.c"
  parser->m_notationDeclHandler = oldNotationDeclHandler;
# 1066 "xmlparse.c"
  parser->m_startNamespaceDeclHandler = oldStartNamespaceDeclHandler;
# 1067 "xmlparse.c"
  parser->m_endNamespaceDeclHandler = oldEndNamespaceDeclHandler;
# 1068 "xmlparse.c"
  parser->m_notStandaloneHandler = oldNotStandaloneHandler;
# 1069 "xmlparse.c"
  parser->m_externalEntityRefHandler = oldExternalEntityRefHandler;
# 1070 "xmlparse.c"
  parser->m_skippedEntityHandler = oldSkippedEntityHandler;
# 1071 "xmlparse.c"
  parser->m_unknownEncodingHandler = oldUnknownEncodingHandler;
# 1072 "xmlparse.c"
  parser->m_elementDeclHandler = oldElementDeclHandler;
# 1073 "xmlparse.c"
  parser->m_attlistDeclHandler = oldAttlistDeclHandler;
# 1074 "xmlparse.c"
  parser->m_entityDeclHandler = oldEntityDeclHandler;
# 1075 "xmlparse.c"
  parser->m_xmlDeclHandler = oldXmlDeclHandler;
# 1076 "xmlparse.c"
  parser->m_declElementType = oldDeclElementType;
# 1077 "xmlparse.c"
  parser->m_userData = oldUserData;
  {
  __CrestLoad(66472, (unsigned long )(& oldUserData), (long long )((unsigned long )oldUserData));
  __CrestLoad(66471, (unsigned long )(& oldHandlerArg), (long long )((unsigned long )oldHandlerArg));
  __CrestApply2(66470, 12, (long long )((unsigned long )oldUserData == (unsigned long )oldHandlerArg));
# 1078 "xmlparse.c"
  if ((unsigned long )oldUserData == (unsigned long )oldHandlerArg) {
    __CrestBranch(66473, 43110, 1);
# 1079 "xmlparse.c"
    parser->m_handlerArg = parser->m_userData;
  } else {
    __CrestBranch(66474, 43111, 0);
# 1081 "xmlparse.c"
    parser->m_handlerArg = (void *)parser;
  }
  }
  {
  __CrestLoad(66477, (unsigned long )(& oldExternalEntityRefHandlerArg), (long long )((unsigned long )oldExternalEntityRefHandlerArg));
  __CrestLoad(66476, (unsigned long )(& oldParser), (long long )((unsigned long )oldParser));
  __CrestApply2(66475, 13, (long long )((unsigned long )oldExternalEntityRefHandlerArg != (unsigned long )oldParser));
# 1082 "xmlparse.c"
  if ((unsigned long )oldExternalEntityRefHandlerArg != (unsigned long )oldParser) {
    __CrestBranch(66478, 43113, 1);
# 1083 "xmlparse.c"
    parser->m_externalEntityRefHandlerArg = oldExternalEntityRefHandlerArg;
  } else {
    __CrestBranch(66479, 43114, 0);

  }
  }
  __CrestLoad(66480, (unsigned long )(& oldDefaultExpandInternalEntities), (long long )oldDefaultExpandInternalEntities);
  __CrestStore(66481, (unsigned long )(& parser->m_defaultExpandInternalEntities));
# 1084 "xmlparse.c"
  parser->m_defaultExpandInternalEntities = oldDefaultExpandInternalEntities;
  __CrestLoad(66482, (unsigned long )(& oldns_triplets), (long long )oldns_triplets);
  __CrestStore(66483, (unsigned long )(& parser->m_ns_triplets));
# 1085 "xmlparse.c"
  parser->m_ns_triplets = oldns_triplets;
  __CrestLoad(66484, (unsigned long )(& oldhash_secret_salt), (long long )oldhash_secret_salt);
  __CrestStore(66485, (unsigned long )(& parser->m_hash_secret_salt));
# 1086 "xmlparse.c"
  parser->m_hash_secret_salt = oldhash_secret_salt;
# 1087 "xmlparse.c"
  parser->m_parentParser = oldParser;
  __CrestLoad(66486, (unsigned long )(& oldParamEntityParsing), (long long )oldParamEntityParsing);
  __CrestStore(66487, (unsigned long )(& parser->m_paramEntityParsing));
# 1089 "xmlparse.c"
  parser->m_paramEntityParsing = oldParamEntityParsing;
  __CrestLoad(66488, (unsigned long )(& oldInEntityValue), (long long )oldInEntityValue);
  __CrestStore(66489, (unsigned long )(& parser->m_prologState.inEntityValue));
# 1090 "xmlparse.c"
  parser->m_prologState.inEntityValue = oldInEntityValue;
  {
  __CrestLoad(66492, (unsigned long )(& context), (long long )((unsigned long )context));
  __CrestLoad(66491, (unsigned long )0, (long long )0);
  __CrestApply2(66490, 13, (long long )(context != 0));
# 1091 "xmlparse.c"
  if (context != 0) {
    __CrestBranch(66493, 43117, 1);
# 1093 "xmlparse.c"
    tmp___0 = dtdCopy(oldParser, parser->m_dtd, (DTD const *)oldDtd, & parser->m_mem);
    __CrestHandleReturn(66496, (long long )tmp___0);
    __CrestStore(66495, (unsigned long )(& tmp___0));
    {
    __CrestLoad(66499, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(66498, (unsigned long )0, (long long )0);
    __CrestApply2(66497, 13, (long long )(tmp___0 != 0));
# 1093 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(66500, 43119, 1);
# 1093 "xmlparse.c"
      tmp___1 = setContext(parser, context);
      __CrestHandleReturn(66503, (long long )tmp___1);
      __CrestStore(66502, (unsigned long )(& tmp___1));
      {
      __CrestLoad(66506, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestLoad(66505, (unsigned long )0, (long long )0);
      __CrestApply2(66504, 13, (long long )(tmp___1 != 0));
# 1093 "xmlparse.c"
      if (tmp___1 != 0) {
        __CrestBranch(66507, 43121, 1);

      } else {
        __CrestBranch(66508, 43122, 0);
# 1095 "xmlparse.c"
        XML_ParserFree(parser);
        __CrestClearStack(66509);
# 1096 "xmlparse.c"
        __retres39 = (XML_Parser )((void *)0);
# 1096 "xmlparse.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(66501, 43125, 0);
# 1095 "xmlparse.c"
      XML_ParserFree(parser);
      __CrestClearStack(66510);
# 1096 "xmlparse.c"
      __retres39 = (XML_Parser )((void *)0);
# 1096 "xmlparse.c"
      goto return_label;
    }
    }
# 1098 "xmlparse.c"
    parser->m_processor = & externalEntityInitProcessor;
  } else {
    __CrestBranch(66494, 43129, 0);
    __CrestLoad(66511, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(66512, (unsigned long )(& parser->m_isParamEntity));
# 1109 "xmlparse.c"
    parser->m_isParamEntity = (XML_Bool )1;
# 1110 "xmlparse.c"
    XmlPrologStateInitExternalEntity(& parser->m_prologState);
    __CrestClearStack(66513);
# 1111 "xmlparse.c"
    parser->m_processor = & externalParEntInitProcessor;
  }
  }
# 1114 "xmlparse.c"
  __retres39 = parser;
  return_label:
  {
  __CrestReturn(66514);
# 980 "xmlparse.c"
  return (__retres39);
  }
}
}
# 1117 "xmlparse.c"
static void destroyBindings(BINDING *bindings , XML_Parser parser )
{
  BINDING *b ;
  void (*mem_4)(void *ptr ) ;
  void (*mem_5)(void *ptr ) ;

  {
  __CrestCall(66515, 698);

  {
# 1120 "xmlparse.c"
  while (1) {
    while_continue: ;
# 1121 "xmlparse.c"
    b = bindings;
    {
    __CrestLoad(66518, (unsigned long )(& b), (long long )((unsigned long )b));
    __CrestLoad(66517, (unsigned long )0, (long long )0);
    __CrestApply2(66516, 12, (long long )(b == 0));
# 1122 "xmlparse.c"
    if (b == 0) {
      __CrestBranch(66519, 43137, 1);
# 1123 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(66520, 43138, 0);

    }
    }
# 1124 "xmlparse.c"
    bindings = b->nextTagBinding;
# 1125 "xmlparse.c"
    mem_4 = parser->m_mem.free_fcn;
# 1125 "xmlparse.c"
    (*mem_4)((void *)b->uri);
    __CrestClearStack(66521);
# 1126 "xmlparse.c"
    mem_5 = parser->m_mem.free_fcn;
# 1126 "xmlparse.c"
    (*mem_5)((void *)b);
    __CrestClearStack(66522);
  }
  while_break: ;
  }

  {
  __CrestReturn(66523);
# 1117 "xmlparse.c"
  return;
  }
}
}
# 1130 "xmlparse.c"
void XML_ParserFree(XML_Parser parser )
{
  TAG *tagList ;
  OPEN_INTERNAL_ENTITY *entityList ;
  TAG *p ;
  OPEN_INTERNAL_ENTITY *openEntity ;
  void (*mem_6)(void *ptr ) ;
  void (*mem_7)(void *ptr ) ;
  void (*mem_8)(void *ptr ) ;
  void (*mem_9)(void *ptr ) ;
  void (*mem_10)(void *ptr ) ;
  void (*mem_11)(void *ptr ) ;
  void (*mem_12)(void *ptr ) ;
  void (*mem_13)(void *ptr ) ;
  void (*mem_14)(void *ptr ) ;
  void (*mem_15)(void * ) ;
  void (*mem_16)(void *ptr ) ;

  {
  __CrestCall(66524, 699);

  {
  __CrestLoad(66527, (unsigned long )(& parser), (long long )((unsigned long )parser));
  __CrestLoad(66526, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66525, 12, (long long )((unsigned long )parser == (unsigned long )((void *)0)));
# 1135 "xmlparse.c"
  if ((unsigned long )parser == (unsigned long )((void *)0)) {
    __CrestBranch(66528, 43144, 1);
# 1136 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66529, 43146, 0);

  }
  }
# 1138 "xmlparse.c"
  tagList = parser->m_tagStack;
  {
# 1139 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(66532, (unsigned long )(& tagList), (long long )((unsigned long )tagList));
    __CrestLoad(66531, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66530, 12, (long long )((unsigned long )tagList == (unsigned long )((void *)0)));
# 1141 "xmlparse.c"
    if ((unsigned long )tagList == (unsigned long )((void *)0)) {
      __CrestBranch(66533, 43152, 1);
      {
      __CrestLoad(66537, (unsigned long )(& parser->m_freeTagList), (long long )((unsigned long )parser->m_freeTagList));
      __CrestLoad(66536, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(66535, 12, (long long )((unsigned long )parser->m_freeTagList == (unsigned long )((void *)0)));
# 1142 "xmlparse.c"
      if ((unsigned long )parser->m_freeTagList == (unsigned long )((void *)0)) {
        __CrestBranch(66538, 43153, 1);
# 1143 "xmlparse.c"
        goto while_break;
      } else {
        __CrestBranch(66539, 43154, 0);

      }
      }
# 1144 "xmlparse.c"
      tagList = parser->m_freeTagList;
# 1145 "xmlparse.c"
      parser->m_freeTagList = (TAG *)((void *)0);
    } else {
      __CrestBranch(66534, 43156, 0);

    }
    }
# 1147 "xmlparse.c"
    p = tagList;
# 1148 "xmlparse.c"
    tagList = tagList->parent;
# 1149 "xmlparse.c"
    mem_6 = parser->m_mem.free_fcn;
# 1149 "xmlparse.c"
    (*mem_6)((void *)p->buf);
    __CrestClearStack(66540);
# 1150 "xmlparse.c"
    destroyBindings(p->bindings, parser);
    __CrestClearStack(66541);
# 1151 "xmlparse.c"
    mem_7 = parser->m_mem.free_fcn;
# 1151 "xmlparse.c"
    (*mem_7)((void *)p);
    __CrestClearStack(66542);
  }
  while_break: ;
  }
# 1154 "xmlparse.c"
  entityList = parser->m_openInternalEntities;
  {
# 1155 "xmlparse.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(66545, (unsigned long )(& entityList), (long long )((unsigned long )entityList));
    __CrestLoad(66544, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66543, 12, (long long )((unsigned long )entityList == (unsigned long )((void *)0)));
# 1157 "xmlparse.c"
    if ((unsigned long )entityList == (unsigned long )((void *)0)) {
      __CrestBranch(66546, 43164, 1);
      {
      __CrestLoad(66550, (unsigned long )(& parser->m_freeInternalEntities), (long long )((unsigned long )parser->m_freeInternalEntities));
      __CrestLoad(66549, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(66548, 12, (long long )((unsigned long )parser->m_freeInternalEntities == (unsigned long )((void *)0)));
# 1158 "xmlparse.c"
      if ((unsigned long )parser->m_freeInternalEntities == (unsigned long )((void *)0)) {
        __CrestBranch(66551, 43165, 1);
# 1159 "xmlparse.c"
        goto while_break___0;
      } else {
        __CrestBranch(66552, 43166, 0);

      }
      }
# 1160 "xmlparse.c"
      entityList = parser->m_freeInternalEntities;
# 1161 "xmlparse.c"
      parser->m_freeInternalEntities = (OPEN_INTERNAL_ENTITY *)((void *)0);
    } else {
      __CrestBranch(66547, 43168, 0);

    }
    }
# 1163 "xmlparse.c"
    openEntity = entityList;
# 1164 "xmlparse.c"
    entityList = entityList->next;
# 1165 "xmlparse.c"
    mem_8 = parser->m_mem.free_fcn;
# 1165 "xmlparse.c"
    (*mem_8)((void *)openEntity);
    __CrestClearStack(66553);
  }
  while_break___0: ;
  }
# 1168 "xmlparse.c"
  destroyBindings(parser->m_freeBindingList, parser);
  __CrestClearStack(66554);
# 1169 "xmlparse.c"
  destroyBindings(parser->m_inheritedBindings, parser);
  __CrestClearStack(66555);
# 1170 "xmlparse.c"
  poolDestroy(& parser->m_tempPool);
  __CrestClearStack(66556);
# 1171 "xmlparse.c"
  poolDestroy(& parser->m_temp2Pool);
  __CrestClearStack(66557);
  {
  __CrestLoad(66560, (unsigned long )(& parser->m_isParamEntity), (long long )parser->m_isParamEntity);
  __CrestLoad(66559, (unsigned long )0, (long long )0);
  __CrestApply2(66558, 12, (long long )(parser->m_isParamEntity == 0));
# 1176 "xmlparse.c"
  if (parser->m_isParamEntity == 0) {
    __CrestBranch(66561, 43173, 1);
    {
    __CrestLoad(66565, (unsigned long )(& parser->m_dtd), (long long )((unsigned long )parser->m_dtd));
    __CrestLoad(66564, (unsigned long )0, (long long )0);
    __CrestApply2(66563, 13, (long long )(parser->m_dtd != 0));
# 1176 "xmlparse.c"
    if (parser->m_dtd != 0) {
      __CrestBranch(66566, 43174, 1);
      __CrestLoad(66569, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
      __CrestApply1(66568, 21, (long long )(! parser->m_parentParser));
# 1180 "xmlparse.c"
      dtdDestroy(parser->m_dtd, (XML_Bool )(! parser->m_parentParser), & parser->m_mem);
      __CrestClearStack(66570);
    } else {
      __CrestBranch(66567, 43175, 0);

    }
    }
  } else {
    __CrestBranch(66562, 43176, 0);

  }
  }
# 1181 "xmlparse.c"
  mem_9 = parser->m_mem.free_fcn;
# 1181 "xmlparse.c"
  (*mem_9)((void *)parser->m_atts);
  __CrestClearStack(66571);
# 1185 "xmlparse.c"
  mem_10 = parser->m_mem.free_fcn;
# 1185 "xmlparse.c"
  (*mem_10)((void *)parser->m_groupConnector);
  __CrestClearStack(66572);
# 1186 "xmlparse.c"
  mem_11 = parser->m_mem.free_fcn;
# 1186 "xmlparse.c"
  (*mem_11)((void *)parser->m_buffer);
  __CrestClearStack(66573);
# 1187 "xmlparse.c"
  mem_12 = parser->m_mem.free_fcn;
# 1187 "xmlparse.c"
  (*mem_12)((void *)parser->m_dataBuf);
  __CrestClearStack(66574);
# 1188 "xmlparse.c"
  mem_13 = parser->m_mem.free_fcn;
# 1188 "xmlparse.c"
  (*mem_13)((void *)parser->m_nsAtts);
  __CrestClearStack(66575);
# 1189 "xmlparse.c"
  mem_14 = parser->m_mem.free_fcn;
# 1189 "xmlparse.c"
  (*mem_14)(parser->m_unknownEncodingMem);
  __CrestClearStack(66576);
  {
  __CrestLoad(66579, (unsigned long )(& parser->m_unknownEncodingRelease), (long long )((unsigned long )parser->m_unknownEncodingRelease));
  __CrestLoad(66578, (unsigned long )0, (long long )0);
  __CrestApply2(66577, 13, (long long )(parser->m_unknownEncodingRelease != 0));
# 1190 "xmlparse.c"
  if (parser->m_unknownEncodingRelease != 0) {
    __CrestBranch(66580, 43179, 1);
# 1191 "xmlparse.c"
    mem_15 = parser->m_unknownEncodingRelease;
# 1191 "xmlparse.c"
    (*mem_15)(parser->m_unknownEncodingData);
    __CrestClearStack(66582);
  } else {
    __CrestBranch(66581, 43180, 0);

  }
  }
# 1192 "xmlparse.c"
  mem_16 = parser->m_mem.free_fcn;
# 1192 "xmlparse.c"
  (*mem_16)((void *)parser);
  __CrestClearStack(66583);

  return_label:
  {
  __CrestReturn(66584);
# 1130 "xmlparse.c"
  return;
  }
}
}
# 1195 "xmlparse.c"
void XML_UseParserAsHandlerArg(XML_Parser parser )
{


  {
  __CrestCall(66585, 700);
# 1198 "xmlparse.c"
  parser->m_handlerArg = (void *)parser;

  {
  __CrestReturn(66586);
# 1195 "xmlparse.c"
  return;
  }
}
}
# 1201 "xmlparse.c"
enum XML_Error XML_UseForeignDTD(XML_Parser parser , XML_Bool useDTD )
{
  enum XML_Error __retres3 ;

  {
  __CrestCall(66588, 701);
  __CrestStore(66587, (unsigned long )(& useDTD));
  {
  __CrestLoad(66591, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66590, (unsigned long )0, (long long )1U);
  __CrestApply2(66589, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1206 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
    __CrestBranch(66592, 43188, 1);
    __CrestLoad(66594, (unsigned long )0, (long long )((enum XML_Error )26));
    __CrestStore(66595, (unsigned long )(& __retres3));
# 1207 "xmlparse.c"
    __retres3 = (enum XML_Error )26;
# 1207 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66593, 43190, 0);
    {
    __CrestLoad(66598, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66597, (unsigned long )0, (long long )3U);
    __CrestApply2(66596, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1206 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66599, 43191, 1);
      __CrestLoad(66601, (unsigned long )0, (long long )((enum XML_Error )26));
      __CrestStore(66602, (unsigned long )(& __retres3));
# 1207 "xmlparse.c"
      __retres3 = (enum XML_Error )26;
# 1207 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66600, 43193, 0);

    }
    }
  }
  }
  __CrestLoad(66603, (unsigned long )(& useDTD), (long long )useDTD);
  __CrestStore(66604, (unsigned long )(& parser->m_useForeignDTD));
# 1208 "xmlparse.c"
  parser->m_useForeignDTD = useDTD;
  __CrestLoad(66605, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(66606, (unsigned long )(& __retres3));
# 1209 "xmlparse.c"
  __retres3 = (enum XML_Error )0;
  return_label:
  {
  __CrestLoad(66607, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(66608);
# 1201 "xmlparse.c"
  return (__retres3);
  }
}
}
# 1215 "xmlparse.c"
void XML_SetReturnNSTriplet(XML_Parser parser , int do_nst )
{


  {
  __CrestCall(66610, 702);
  __CrestStore(66609, (unsigned long )(& do_nst));
  {
  __CrestLoad(66613, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66612, (unsigned long )0, (long long )1U);
  __CrestApply2(66611, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1219 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
    __CrestBranch(66614, 43198, 1);
# 1220 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66615, 43200, 0);
    {
    __CrestLoad(66618, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66617, (unsigned long )0, (long long )3U);
    __CrestApply2(66616, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1219 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66619, 43201, 1);
# 1220 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66620, 43203, 0);

    }
    }
  }
  }
  {
  __CrestLoad(66623, (unsigned long )(& do_nst), (long long )do_nst);
  __CrestLoad(66622, (unsigned long )0, (long long )0);
  __CrestApply2(66621, 13, (long long )(do_nst != 0));
# 1221 "xmlparse.c"
  if (do_nst != 0) {
    __CrestBranch(66624, 43205, 1);
    __CrestLoad(66626, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(66627, (unsigned long )(& parser->m_ns_triplets));
# 1221 "xmlparse.c"
    parser->m_ns_triplets = (XML_Bool )1;
  } else {
    __CrestBranch(66625, 43206, 0);
    __CrestLoad(66628, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(66629, (unsigned long )(& parser->m_ns_triplets));
# 1221 "xmlparse.c"
    parser->m_ns_triplets = (XML_Bool )0;
  }
  }

  return_label:
  {
  __CrestReturn(66630);
# 1215 "xmlparse.c"
  return;
  }
}
}
# 1224 "xmlparse.c"
void XML_SetUserData(XML_Parser parser , void *p )
{
  void *tmp ;

  {
  __CrestCall(66631, 703);

  {
  __CrestLoad(66634, (unsigned long )(& parser->m_handlerArg), (long long )((unsigned long )parser->m_handlerArg));
  __CrestLoad(66633, (unsigned long )(& parser->m_userData), (long long )((unsigned long )parser->m_userData));
  __CrestApply2(66632, 12, (long long )((unsigned long )parser->m_handlerArg == (unsigned long )parser->m_userData));
# 1227 "xmlparse.c"
  if ((unsigned long )parser->m_handlerArg == (unsigned long )parser->m_userData) {
    __CrestBranch(66635, 43210, 1);
# 1228 "xmlparse.c"
    tmp = p;
# 1228 "xmlparse.c"
    parser->m_userData = tmp;
# 1228 "xmlparse.c"
    parser->m_handlerArg = tmp;
  } else {
    __CrestBranch(66636, 43211, 0);
# 1230 "xmlparse.c"
    parser->m_userData = p;
  }
  }

  {
  __CrestReturn(66637);
# 1224 "xmlparse.c"
  return;
  }
}
}
# 1233 "xmlparse.c"
enum XML_Status XML_SetBase(XML_Parser parser , XML_Char const *p )
{
  DTD *mem_3 ;
  enum XML_Status __retres4 ;

  {
  __CrestCall(66638, 704);

  {
  __CrestLoad(66641, (unsigned long )(& p), (long long )((unsigned long )p));
  __CrestLoad(66640, (unsigned long )0, (long long )0);
  __CrestApply2(66639, 13, (long long )(p != 0));
# 1236 "xmlparse.c"
  if (p != 0) {
    __CrestBranch(66642, 43215, 1);
# 1237 "xmlparse.c"
    mem_3 = parser->m_dtd;
# 1237 "xmlparse.c"
    p = poolCopyString(& mem_3->pool, p);
    __CrestClearStack(66644);
    {
    __CrestLoad(66647, (unsigned long )(& p), (long long )((unsigned long )p));
    __CrestLoad(66646, (unsigned long )0, (long long )0);
    __CrestApply2(66645, 12, (long long )(p == 0));
# 1238 "xmlparse.c"
    if (p == 0) {
      __CrestBranch(66648, 43217, 1);
      __CrestLoad(66650, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66651, (unsigned long )(& __retres4));
# 1239 "xmlparse.c"
      __retres4 = (enum XML_Status )0;
# 1239 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66649, 43219, 0);

    }
    }
# 1240 "xmlparse.c"
    parser->m_curBase = p;
  } else {
    __CrestBranch(66643, 43221, 0);
# 1243 "xmlparse.c"
    parser->m_curBase = (XML_Char const *)((void *)0);
  }
  }
  __CrestLoad(66652, (unsigned long )0, (long long )((enum XML_Status )1));
  __CrestStore(66653, (unsigned long )(& __retres4));
# 1244 "xmlparse.c"
  __retres4 = (enum XML_Status )1;
  return_label:
  {
  __CrestLoad(66654, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(66655);
# 1233 "xmlparse.c"
  return (__retres4);
  }
}
}
# 1247 "xmlparse.c"
XML_Char const *XML_GetBase(XML_Parser parser )
{
  XML_Char const *__retres2 ;

  {
  __CrestCall(66656, 705);
# 1250 "xmlparse.c"
  __retres2 = parser->m_curBase;
  {
  __CrestReturn(66657);
# 1247 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1253 "xmlparse.c"
int XML_GetSpecifiedAttributeCount(XML_Parser parser )
{
  int __retres2 ;

  {
  __CrestCall(66658, 706);

  __CrestLoad(66659, (unsigned long )(& parser->m_nSpecifiedAtts), (long long )parser->m_nSpecifiedAtts);
  __CrestStore(66660, (unsigned long )(& __retres2));
# 1256 "xmlparse.c"
  __retres2 = parser->m_nSpecifiedAtts;
  {
  __CrestLoad(66661, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(66662);
# 1253 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1259 "xmlparse.c"
int XML_GetIdAttributeIndex(XML_Parser parser )
{
  int __retres2 ;

  {
  __CrestCall(66663, 707);

  __CrestLoad(66664, (unsigned long )(& parser->m_idAttIndex), (long long )parser->m_idAttIndex);
  __CrestStore(66665, (unsigned long )(& __retres2));
# 1262 "xmlparse.c"
  __retres2 = parser->m_idAttIndex;
  {
  __CrestLoad(66666, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(66667);
# 1259 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1273 "xmlparse.c"
void XML_SetElementHandler(XML_Parser parser , void (*start)(void *userData , XML_Char const *name ,
                                                             XML_Char const **atts ) ,
                           void (*end)(void *userData , XML_Char const *name ) )
{


  {
  __CrestCall(66668, 708);
# 1278 "xmlparse.c"
  parser->m_startElementHandler = start;
# 1279 "xmlparse.c"
  parser->m_endElementHandler = end;

  {
  __CrestReturn(66669);
# 1273 "xmlparse.c"
  return;
  }
}
}
# 1282 "xmlparse.c"
void XML_SetStartElementHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                  XML_Char const *name ,
                                                                  XML_Char const **atts ) )
{


  {
  __CrestCall(66670, 709);
# 1285 "xmlparse.c"
  parser->m_startElementHandler = start;

  {
  __CrestReturn(66671);
# 1282 "xmlparse.c"
  return;
  }
}
}
# 1288 "xmlparse.c"
void XML_SetEndElementHandler(XML_Parser parser , void (*end)(void *userData , XML_Char const *name ) )
{


  {
  __CrestCall(66672, 710);
# 1291 "xmlparse.c"
  parser->m_endElementHandler = end;

  {
  __CrestReturn(66673);
# 1288 "xmlparse.c"
  return;
  }
}
}
# 1294 "xmlparse.c"
void XML_SetCharacterDataHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *s ,
                                                                     int len ) )
{


  {
  __CrestCall(66674, 711);
# 1298 "xmlparse.c"
  parser->m_characterDataHandler = handler;

  {
  __CrestReturn(66675);
# 1294 "xmlparse.c"
  return;
  }
}
}
# 1301 "xmlparse.c"
void XML_SetProcessingInstructionHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                             XML_Char const *target ,
                                                                             XML_Char const *data ) )
{


  {
  __CrestCall(66676, 712);
# 1305 "xmlparse.c"
  parser->m_processingInstructionHandler = handler;

  {
  __CrestReturn(66677);
# 1301 "xmlparse.c"
  return;
  }
}
}
# 1308 "xmlparse.c"
void XML_SetCommentHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *data ) )
{


  {
  __CrestCall(66678, 713);
# 1312 "xmlparse.c"
  parser->m_commentHandler = handler;

  {
  __CrestReturn(66679);
# 1308 "xmlparse.c"
  return;
  }
}
}
# 1315 "xmlparse.c"
void XML_SetCdataSectionHandler(XML_Parser parser , void (*start)(void *userData ) ,
                                void (*end)(void *userData ) )
{


  {
  __CrestCall(66680, 714);
# 1320 "xmlparse.c"
  parser->m_startCdataSectionHandler = start;
# 1321 "xmlparse.c"
  parser->m_endCdataSectionHandler = end;

  {
  __CrestReturn(66681);
# 1315 "xmlparse.c"
  return;
  }
}
}
# 1324 "xmlparse.c"
void XML_SetStartCdataSectionHandler(XML_Parser parser , void (*start)(void *userData ) )
{


  {
  __CrestCall(66682, 715);
# 1327 "xmlparse.c"
  parser->m_startCdataSectionHandler = start;

  {
  __CrestReturn(66683);
# 1324 "xmlparse.c"
  return;
  }
}
}
# 1330 "xmlparse.c"
void XML_SetEndCdataSectionHandler(XML_Parser parser , void (*end)(void *userData ) )
{


  {
  __CrestCall(66684, 716);
# 1333 "xmlparse.c"
  parser->m_endCdataSectionHandler = end;

  {
  __CrestReturn(66685);
# 1330 "xmlparse.c"
  return;
  }
}
}
# 1336 "xmlparse.c"
void XML_SetDefaultHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *s ,
                                                               int len ) )
{


  {
  __CrestCall(66686, 717);
# 1340 "xmlparse.c"
  parser->m_defaultHandler = handler;
  __CrestLoad(66687, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(66688, (unsigned long )(& parser->m_defaultExpandInternalEntities));
# 1341 "xmlparse.c"
  parser->m_defaultExpandInternalEntities = (XML_Bool )0;

  {
  __CrestReturn(66689);
# 1336 "xmlparse.c"
  return;
  }
}
}
# 1344 "xmlparse.c"
void XML_SetDefaultHandlerExpand(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *s ,
                                                                     int len ) )
{


  {
  __CrestCall(66690, 718);
# 1348 "xmlparse.c"
  parser->m_defaultHandler = handler;
  __CrestLoad(66691, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(66692, (unsigned long )(& parser->m_defaultExpandInternalEntities));
# 1349 "xmlparse.c"
  parser->m_defaultExpandInternalEntities = (XML_Bool )1;

  {
  __CrestReturn(66693);
# 1344 "xmlparse.c"
  return;
  }
}
}
# 1352 "xmlparse.c"
void XML_SetDoctypeDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                 XML_Char const *doctypeName ,
                                                                 XML_Char const *sysid ,
                                                                 XML_Char const *pubid ,
                                                                 int has_internal_subset ) ,
                               void (*end)(void *userData ) )
{


  {
  __CrestCall(66694, 719);
# 1357 "xmlparse.c"
  parser->m_startDoctypeDeclHandler = start;
# 1358 "xmlparse.c"
  parser->m_endDoctypeDeclHandler = end;

  {
  __CrestReturn(66695);
# 1352 "xmlparse.c"
  return;
  }
}
}
# 1361 "xmlparse.c"
void XML_SetStartDoctypeDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                      XML_Char const *doctypeName ,
                                                                      XML_Char const *sysid ,
                                                                      XML_Char const *pubid ,
                                                                      int has_internal_subset ) )
{


  {
  __CrestCall(66696, 720);
# 1364 "xmlparse.c"
  parser->m_startDoctypeDeclHandler = start;

  {
  __CrestReturn(66697);
# 1361 "xmlparse.c"
  return;
  }
}
}
# 1367 "xmlparse.c"
void XML_SetEndDoctypeDeclHandler(XML_Parser parser , void (*end)(void *userData ) )
{


  {
  __CrestCall(66698, 721);
# 1370 "xmlparse.c"
  parser->m_endDoctypeDeclHandler = end;

  {
  __CrestReturn(66699);
# 1367 "xmlparse.c"
  return;
  }
}
}
# 1373 "xmlparse.c"
void XML_SetUnparsedEntityDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                          XML_Char const *entityName ,
                                                                          XML_Char const *base ,
                                                                          XML_Char const *systemId ,
                                                                          XML_Char const *publicId ,
                                                                          XML_Char const *notationName ) )
{


  {
  __CrestCall(66700, 722);
# 1377 "xmlparse.c"
  parser->m_unparsedEntityDeclHandler = handler;

  {
  __CrestReturn(66701);
# 1373 "xmlparse.c"
  return;
  }
}
}
# 1380 "xmlparse.c"
void XML_SetNotationDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                    XML_Char const *notationName ,
                                                                    XML_Char const *base ,
                                                                    XML_Char const *systemId ,
                                                                    XML_Char const *publicId ) )
{


  {
  __CrestCall(66702, 723);
# 1384 "xmlparse.c"
  parser->m_notationDeclHandler = handler;

  {
  __CrestReturn(66703);
# 1380 "xmlparse.c"
  return;
  }
}
}
# 1387 "xmlparse.c"
void XML_SetNamespaceDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                   XML_Char const *prefix ,
                                                                   XML_Char const *uri ) ,
                                 void (*end)(void *userData , XML_Char const *prefix ) )
{


  {
  __CrestCall(66704, 724);
# 1392 "xmlparse.c"
  parser->m_startNamespaceDeclHandler = start;
# 1393 "xmlparse.c"
  parser->m_endNamespaceDeclHandler = end;

  {
  __CrestReturn(66705);
# 1387 "xmlparse.c"
  return;
  }
}
}
# 1396 "xmlparse.c"
void XML_SetStartNamespaceDeclHandler(XML_Parser parser , void (*start)(void *userData ,
                                                                        XML_Char const *prefix ,
                                                                        XML_Char const *uri ) )
{


  {
  __CrestCall(66706, 725);
# 1399 "xmlparse.c"
  parser->m_startNamespaceDeclHandler = start;

  {
  __CrestReturn(66707);
# 1396 "xmlparse.c"
  return;
  }
}
}
# 1402 "xmlparse.c"
void XML_SetEndNamespaceDeclHandler(XML_Parser parser , void (*end)(void *userData ,
                                                                    XML_Char const *prefix ) )
{


  {
  __CrestCall(66708, 726);
# 1405 "xmlparse.c"
  parser->m_endNamespaceDeclHandler = end;

  {
  __CrestReturn(66709);
# 1402 "xmlparse.c"
  return;
  }
}
}
# 1408 "xmlparse.c"
void XML_SetNotStandaloneHandler(XML_Parser parser , int (*handler)(void *userData ) )
{


  {
  __CrestCall(66710, 727);
# 1412 "xmlparse.c"
  parser->m_notStandaloneHandler = handler;

  {
  __CrestReturn(66711);
# 1408 "xmlparse.c"
  return;
  }
}
}
# 1415 "xmlparse.c"
void XML_SetExternalEntityRefHandler(XML_Parser parser , int (*handler)(XML_Parser parser ,
                                                                        XML_Char const *context ,
                                                                        XML_Char const *base ,
                                                                        XML_Char const *systemId ,
                                                                        XML_Char const *publicId ) )
{


  {
  __CrestCall(66712, 728);
# 1419 "xmlparse.c"
  parser->m_externalEntityRefHandler = handler;

  {
  __CrestReturn(66713);
# 1415 "xmlparse.c"
  return;
  }
}
}
# 1422 "xmlparse.c"
void XML_SetExternalEntityRefHandlerArg(XML_Parser parser , void *arg )
{


  {
  __CrestCall(66714, 729);

  {
  __CrestLoad(66717, (unsigned long )(& arg), (long long )((unsigned long )arg));
  __CrestLoad(66716, (unsigned long )0, (long long )0);
  __CrestApply2(66715, 13, (long long )(arg != 0));
# 1425 "xmlparse.c"
  if (arg != 0) {
    __CrestBranch(66718, 43294, 1);
# 1426 "xmlparse.c"
    parser->m_externalEntityRefHandlerArg = (XML_Parser )arg;
  } else {
    __CrestBranch(66719, 43295, 0);
# 1428 "xmlparse.c"
    parser->m_externalEntityRefHandlerArg = parser;
  }
  }

  {
  __CrestReturn(66720);
# 1422 "xmlparse.c"
  return;
  }
}
}
# 1431 "xmlparse.c"
void XML_SetSkippedEntityHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                     XML_Char const *entityName ,
                                                                     int is_parameter_entity ) )
{


  {
  __CrestCall(66721, 730);
# 1435 "xmlparse.c"
  parser->m_skippedEntityHandler = handler;

  {
  __CrestReturn(66722);
# 1431 "xmlparse.c"
  return;
  }
}
}
# 1438 "xmlparse.c"
void XML_SetUnknownEncodingHandler(XML_Parser parser , int (*handler)(void *encodingHandlerData ,
                                                                      XML_Char const *name ,
                                                                      XML_Encoding *info ) ,
                                   void *data )
{


  {
  __CrestCall(66723, 731);
# 1443 "xmlparse.c"
  parser->m_unknownEncodingHandler = handler;
# 1444 "xmlparse.c"
  parser->m_unknownEncodingHandlerData = data;

  {
  __CrestReturn(66724);
# 1438 "xmlparse.c"
  return;
  }
}
}
# 1447 "xmlparse.c"
void XML_SetElementDeclHandler(XML_Parser parser , void (*eldecl)(void *userData ,
                                                                  XML_Char const *name ,
                                                                  XML_Content *model ) )
{


  {
  __CrestCall(66725, 732);
# 1451 "xmlparse.c"
  parser->m_elementDeclHandler = eldecl;

  {
  __CrestReturn(66726);
# 1447 "xmlparse.c"
  return;
  }
}
}
# 1454 "xmlparse.c"
void XML_SetAttlistDeclHandler(XML_Parser parser , void (*attdecl)(void *userData ,
                                                                   XML_Char const *elname ,
                                                                   XML_Char const *attname ,
                                                                   XML_Char const *att_type ,
                                                                   XML_Char const *dflt ,
                                                                   int isrequired ) )
{


  {
  __CrestCall(66727, 733);
# 1458 "xmlparse.c"
  parser->m_attlistDeclHandler = attdecl;

  {
  __CrestReturn(66728);
# 1454 "xmlparse.c"
  return;
  }
}
}
# 1461 "xmlparse.c"
void XML_SetEntityDeclHandler(XML_Parser parser , void (*handler)(void *userData ,
                                                                  XML_Char const *entityName ,
                                                                  int is_parameter_entity ,
                                                                  XML_Char const *value ,
                                                                  int value_length ,
                                                                  XML_Char const *base ,
                                                                  XML_Char const *systemId ,
                                                                  XML_Char const *publicId ,
                                                                  XML_Char const *notationName ) )
{


  {
  __CrestCall(66729, 734);
# 1465 "xmlparse.c"
  parser->m_entityDeclHandler = handler;

  {
  __CrestReturn(66730);
# 1461 "xmlparse.c"
  return;
  }
}
}
# 1468 "xmlparse.c"
void XML_SetXmlDeclHandler(XML_Parser parser , void (*handler)(void *userData , XML_Char const *version ,
                                                               XML_Char const *encoding ,
                                                               int standalone ) )
{


  {
  __CrestCall(66731, 735);
# 1471 "xmlparse.c"
  parser->m_xmlDeclHandler = handler;

  {
  __CrestReturn(66732);
# 1468 "xmlparse.c"
  return;
  }
}
}
# 1474 "xmlparse.c"
int XML_SetParamEntityParsing(XML_Parser parser , enum XML_ParamEntityParsing peParsing )
{
  int __retres3 ;

  {
  __CrestCall(66734, 736);
  __CrestStore(66733, (unsigned long )(& peParsing));
  {
  __CrestLoad(66737, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66736, (unsigned long )0, (long long )1U);
  __CrestApply2(66735, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1479 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
    __CrestBranch(66738, 43317, 1);
    __CrestLoad(66740, (unsigned long )0, (long long )0);
    __CrestStore(66741, (unsigned long )(& __retres3));
# 1480 "xmlparse.c"
    __retres3 = 0;
# 1480 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66739, 43319, 0);
    {
    __CrestLoad(66744, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66743, (unsigned long )0, (long long )3U);
    __CrestApply2(66742, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1479 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66745, 43320, 1);
      __CrestLoad(66747, (unsigned long )0, (long long )0);
      __CrestStore(66748, (unsigned long )(& __retres3));
# 1480 "xmlparse.c"
      __retres3 = 0;
# 1480 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66746, 43322, 0);

    }
    }
  }
  }
  __CrestLoad(66749, (unsigned long )(& peParsing), (long long )peParsing);
  __CrestStore(66750, (unsigned long )(& parser->m_paramEntityParsing));
# 1482 "xmlparse.c"
  parser->m_paramEntityParsing = peParsing;
  __CrestLoad(66751, (unsigned long )0, (long long )1);
  __CrestStore(66752, (unsigned long )(& __retres3));
# 1483 "xmlparse.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(66753, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(66754);
# 1474 "xmlparse.c"
  return (__retres3);
  }
}
}
# 1489 "xmlparse.c"
int XML_SetHashSalt(XML_Parser parser , unsigned long hash_salt )
{
  int __retres3 ;

  {
  __CrestCall(66756, 737);
  __CrestStore(66755, (unsigned long )(& hash_salt));
  {
  __CrestLoad(66759, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66758, (unsigned long )0, (long long )1U);
  __CrestApply2(66757, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1494 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
    __CrestBranch(66760, 43327, 1);
    __CrestLoad(66762, (unsigned long )0, (long long )0);
    __CrestStore(66763, (unsigned long )(& __retres3));
# 1495 "xmlparse.c"
    __retres3 = 0;
# 1495 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66761, 43329, 0);
    {
    __CrestLoad(66766, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66765, (unsigned long )0, (long long )3U);
    __CrestApply2(66764, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1494 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66767, 43330, 1);
      __CrestLoad(66769, (unsigned long )0, (long long )0);
      __CrestStore(66770, (unsigned long )(& __retres3));
# 1495 "xmlparse.c"
      __retres3 = 0;
# 1495 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66768, 43332, 0);

    }
    }
  }
  }
  __CrestLoad(66771, (unsigned long )(& hash_salt), (long long )hash_salt);
  __CrestStore(66772, (unsigned long )(& parser->m_hash_secret_salt));
# 1496 "xmlparse.c"
  parser->m_hash_secret_salt = hash_salt;
  __CrestLoad(66773, (unsigned long )0, (long long )1);
  __CrestStore(66774, (unsigned long )(& __retres3));
# 1497 "xmlparse.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(66775, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(66776);
# 1489 "xmlparse.c"
  return (__retres3);
  }
}
}
# 1500 "xmlparse.c"
enum XML_Status XML_Parse(XML_Parser parser , char const *s , int len , int isFinal )
{
  XML_Bool tmp ;
  void *buff ;
  void *tmp___0 ;
  char *tmp___1 ;
  int i ;
  enum XML_Status tmp___2 ;
  Processor *mem_11 ;
  ENCODING const *mem_12 ;
  void (*mem_13)(ENCODING const * , char const *ptr , char const *end , POSITION * ) ;
  enum XML_Status __retres14 ;

  {
  __CrestCall(66779, 738);
  __CrestStore(66778, (unsigned long )(& isFinal));
  __CrestStore(66777, (unsigned long )(& len));
  {
  {
  __CrestLoad(66782, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66781, (unsigned long )0, (long long )3U);
  __CrestApply2(66780, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1504 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
    __CrestBranch(66783, 43338, 1);
# 1504 "xmlparse.c"
    goto case_3;
  } else {
    __CrestBranch(66784, 43339, 0);

  }
  }
  {
  __CrestLoad(66787, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66786, (unsigned long )0, (long long )2U);
  __CrestApply2(66785, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 1507 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(66788, 43341, 1);
# 1507 "xmlparse.c"
    goto case_2;
  } else {
    __CrestBranch(66789, 43342, 0);

  }
  }
  {
  __CrestLoad(66792, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66791, (unsigned long )0, (long long )0U);
  __CrestApply2(66790, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 0U));
# 1510 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 0U) {
    __CrestBranch(66793, 43344, 1);
# 1510 "xmlparse.c"
    goto case_0;
  } else {
    __CrestBranch(66794, 43345, 0);

  }
  }
# 1515 "xmlparse.c"
  goto switch_default;
  case_3:
  __CrestLoad(66795, (unsigned long )0, (long long )((enum XML_Error )33));
  __CrestStore(66796, (unsigned long )(& parser->m_errorCode));
# 1505 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )33;
  __CrestLoad(66797, (unsigned long )0, (long long )((enum XML_Status )0));
  __CrestStore(66798, (unsigned long )(& __retres14));
# 1506 "xmlparse.c"
  __retres14 = (enum XML_Status )0;
# 1506 "xmlparse.c"
  goto return_label;
  case_2:
  __CrestLoad(66799, (unsigned long )0, (long long )((enum XML_Error )36));
  __CrestStore(66800, (unsigned long )(& parser->m_errorCode));
# 1508 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )36;
  __CrestLoad(66801, (unsigned long )0, (long long )((enum XML_Status )0));
  __CrestStore(66802, (unsigned long )(& __retres14));
# 1509 "xmlparse.c"
  __retres14 = (enum XML_Status )0;
# 1509 "xmlparse.c"
  goto return_label;
  case_0:
  {
  __CrestLoad(66805, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
  __CrestLoad(66804, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66803, 12, (long long )((unsigned long )parser->m_parentParser == (unsigned long )((void *)0)));
# 1511 "xmlparse.c"
  if ((unsigned long )parser->m_parentParser == (unsigned long )((void *)0)) {
    __CrestBranch(66806, 43354, 1);
# 1511 "xmlparse.c"
    tmp = startParsing(parser);
    __CrestHandleReturn(66809, (long long )tmp);
    __CrestStore(66808, (unsigned long )(& tmp));
    {
    __CrestLoad(66812, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(66811, (unsigned long )0, (long long )0);
    __CrestApply2(66810, 13, (long long )(tmp != 0));
# 1511 "xmlparse.c"
    if (tmp != 0) {
      __CrestBranch(66813, 43356, 1);

    } else {
      __CrestBranch(66814, 43357, 0);
      __CrestLoad(66815, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(66816, (unsigned long )(& parser->m_errorCode));
# 1512 "xmlparse.c"
      parser->m_errorCode = (enum XML_Error )1;
      __CrestLoad(66817, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66818, (unsigned long )(& __retres14));
# 1513 "xmlparse.c"
      __retres14 = (enum XML_Status )0;
# 1513 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(66807, 43360, 0);

  }
  }
  switch_default:
  __CrestLoad(66819, (unsigned long )0, (long long )((enum XML_Parsing )1));
  __CrestStore(66820, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1516 "xmlparse.c"
  parser->m_parsingStatus.parsing = (enum XML_Parsing )1;
  switch_break: ;
  }
  {
  __CrestLoad(66823, (unsigned long )(& len), (long long )len);
  __CrestLoad(66822, (unsigned long )0, (long long )0);
  __CrestApply2(66821, 12, (long long )(len == 0));
# 1519 "xmlparse.c"
  if (len == 0) {
    __CrestBranch(66824, 43364, 1);
    __CrestLoad(66826, (unsigned long )(& isFinal), (long long )isFinal);
    __CrestStore(66827, (unsigned long )(& parser->m_parsingStatus.finalBuffer));
# 1520 "xmlparse.c"
    parser->m_parsingStatus.finalBuffer = (XML_Bool )isFinal;
    {
    __CrestLoad(66830, (unsigned long )(& isFinal), (long long )isFinal);
    __CrestLoad(66829, (unsigned long )0, (long long )0);
    __CrestApply2(66828, 12, (long long )(isFinal == 0));
# 1521 "xmlparse.c"
    if (isFinal == 0) {
      __CrestBranch(66831, 43366, 1);
      __CrestLoad(66833, (unsigned long )0, (long long )((enum XML_Status )1));
      __CrestStore(66834, (unsigned long )(& __retres14));
# 1522 "xmlparse.c"
      __retres14 = (enum XML_Status )1;
# 1522 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66832, 43368, 0);

    }
    }
# 1523 "xmlparse.c"
    parser->m_positionPtr = parser->m_bufferPtr;
# 1524 "xmlparse.c"
    parser->m_parseEndPtr = (char const *)parser->m_bufferEnd;
# 1530 "xmlparse.c"
    mem_11 = parser->m_processor;
# 1530 "xmlparse.c"
    parser->m_errorCode = (*mem_11)(parser, parser->m_bufferPtr, parser->m_parseEndPtr,
                                    & parser->m_bufferPtr);
    __CrestHandleReturn(66836, (long long )parser->m_errorCode);
    __CrestStore(66835, (unsigned long )(& parser->m_errorCode));
    {
    __CrestLoad(66839, (unsigned long )(& parser->m_errorCode), (long long )parser->m_errorCode);
    __CrestLoad(66838, (unsigned long )0, (long long )0U);
    __CrestApply2(66837, 12, (long long )((unsigned int )parser->m_errorCode == 0U));
# 1532 "xmlparse.c"
    if ((unsigned int )parser->m_errorCode == 0U) {
      __CrestBranch(66840, 43371, 1);
      {
      {
      __CrestLoad(66844, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(66843, (unsigned long )0, (long long )3U);
      __CrestApply2(66842, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1534 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
        __CrestBranch(66845, 43373, 1);
# 1534 "xmlparse.c"
        goto case_3___0;
      } else {
        __CrestBranch(66846, 43374, 0);

      }
      }
      {
      __CrestLoad(66849, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(66848, (unsigned long )0, (long long )1U);
      __CrestApply2(66847, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1539 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
        __CrestBranch(66850, 43376, 1);
# 1539 "xmlparse.c"
        goto case_1;
      } else {
        __CrestBranch(66851, 43377, 0);

      }
      }
      {
      __CrestLoad(66854, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(66853, (unsigned long )0, (long long )0U);
      __CrestApply2(66852, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 0U));
# 1539 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 0U) {
        __CrestBranch(66855, 43379, 1);
# 1539 "xmlparse.c"
        goto case_1;
      } else {
        __CrestBranch(66856, 43380, 0);

      }
      }
# 1542 "xmlparse.c"
      goto switch_default___0;
      case_3___0:
# 1535 "xmlparse.c"
      mem_12 = parser->m_encoding;
# 1535 "xmlparse.c"
      mem_13 = mem_12->updatePosition;
# 1535 "xmlparse.c"
      (*mem_13)(parser->m_encoding, parser->m_positionPtr, parser->m_bufferPtr, & parser->m_position);
      __CrestClearStack(66857);
# 1536 "xmlparse.c"
      parser->m_positionPtr = parser->m_bufferPtr;
      __CrestLoad(66858, (unsigned long )0, (long long )((enum XML_Status )2));
      __CrestStore(66859, (unsigned long )(& __retres14));
# 1537 "xmlparse.c"
      __retres14 = (enum XML_Status )2;
# 1537 "xmlparse.c"
      goto return_label;
      case_1:
      case_0___0:
      __CrestLoad(66860, (unsigned long )0, (long long )((enum XML_Parsing )2));
      __CrestStore(66861, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1540 "xmlparse.c"
      parser->m_parsingStatus.parsing = (enum XML_Parsing )2;
      switch_default___0:
      __CrestLoad(66862, (unsigned long )0, (long long )((enum XML_Status )1));
      __CrestStore(66863, (unsigned long )(& __retres14));
# 1543 "xmlparse.c"
      __retres14 = (enum XML_Status )1;
# 1543 "xmlparse.c"
      goto return_label;
      switch_break___0: ;
      }
    } else {
      __CrestBranch(66841, 43389, 0);

    }
    }
# 1546 "xmlparse.c"
    parser->m_eventEndPtr = parser->m_eventPtr;
# 1547 "xmlparse.c"
    parser->m_processor = & errorProcessor;
    __CrestLoad(66864, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(66865, (unsigned long )(& __retres14));
# 1548 "xmlparse.c"
    __retres14 = (enum XML_Status )0;
# 1548 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66825, 43393, 0);
    __CrestLoad(66866, (unsigned long )(& len), (long long )len);
# 1613 "xmlparse.c"
    tmp___0 = XML_GetBuffer(parser, len);
    __CrestClearStack(66867);
# 1613 "xmlparse.c"
    buff = tmp___0;
    {
    __CrestLoad(66870, (unsigned long )(& buff), (long long )((unsigned long )buff));
    __CrestLoad(66869, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(66868, 12, (long long )((unsigned long )buff == (unsigned long )((void *)0)));
# 1615 "xmlparse.c"
    if ((unsigned long )buff == (unsigned long )((void *)0)) {
      __CrestBranch(66871, 43395, 1);
      __CrestLoad(66873, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66874, (unsigned long )(& __retres14));
# 1616 "xmlparse.c"
      __retres14 = (enum XML_Status )0;
# 1616 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66872, 43397, 0);
# 1620 "xmlparse.c"
      tmp___1 = (char *)buff;
      __CrestLoad(66875, (unsigned long )0, (long long )0);
      __CrestStore(66876, (unsigned long )(& i));
# 1621 "xmlparse.c"
      i = 0;
      {
# 1621 "xmlparse.c"
      while (1) {
        while_continue: ;
        {
        __CrestLoad(66879, (unsigned long )(& i), (long long )i);
        __CrestLoad(66878, (unsigned long )(& len), (long long )len);
        __CrestApply2(66877, 16, (long long )(i < len));
# 1621 "xmlparse.c"
        if (i < len) {
          __CrestBranch(66880, 43402, 1);

        } else {
          __CrestBranch(66881, 43403, 0);
# 1621 "xmlparse.c"
          goto while_break;
        }
        }
# 1622 "xmlparse.c"
        __CrestChar(tmp___1 + i);
        __CrestLoad(66884, (unsigned long )(& i), (long long )i);
        __CrestLoad(66883, (unsigned long )0, (long long )1);
        __CrestApply2(66882, 0, (long long )(i + 1));
        __CrestStore(66885, (unsigned long )(& i));
# 1621 "xmlparse.c"
        i ++;
      }
      while_break: ;
      }
      __CrestLoad(66886, (unsigned long )(& len), (long long )len);
      __CrestLoad(66887, (unsigned long )(& isFinal), (long long )isFinal);
# 1624 "xmlparse.c"
      tmp___2 = XML_ParseBuffer(parser, len, isFinal);
      __CrestHandleReturn(66889, (long long )tmp___2);
      __CrestStore(66888, (unsigned long )(& tmp___2));
      __CrestLoad(66890, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(66891, (unsigned long )(& __retres14));
# 1624 "xmlparse.c"
      __retres14 = tmp___2;
# 1624 "xmlparse.c"
      goto return_label;
    }
    }
  }
  }
  return_label:
  {
  __CrestLoad(66892, (unsigned long )(& __retres14), (long long )__retres14);
  __CrestReturn(66893);
# 1500 "xmlparse.c"
  return (__retres14);
  }
}
}
# 1629 "xmlparse.c"
enum XML_Status XML_ParseBuffer(XML_Parser parser , int len , int isFinal )
{
  char const *start ;
  enum XML_Status result ;
  XML_Bool tmp ;
  Processor *mem_7 ;
  ENCODING const *mem_8 ;
  void (*mem_9)(ENCODING const * , char const *ptr , char const *end , POSITION * ) ;
  enum XML_Status __retres10 ;

  {
  __CrestCall(66896, 739);
  __CrestStore(66895, (unsigned long )(& isFinal));
  __CrestStore(66894, (unsigned long )(& len));
  __CrestLoad(66897, (unsigned long )0, (long long )((enum XML_Status )1));
  __CrestStore(66898, (unsigned long )(& result));
# 1633 "xmlparse.c"
  result = (enum XML_Status )1;
  {
  {
  __CrestLoad(66901, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66900, (unsigned long )0, (long long )3U);
  __CrestApply2(66899, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1636 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
    __CrestBranch(66902, 43413, 1);
# 1636 "xmlparse.c"
    goto case_3;
  } else {
    __CrestBranch(66903, 43414, 0);

  }
  }
  {
  __CrestLoad(66906, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66905, (unsigned long )0, (long long )2U);
  __CrestApply2(66904, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 1639 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(66907, 43416, 1);
# 1639 "xmlparse.c"
    goto case_2;
  } else {
    __CrestBranch(66908, 43417, 0);

  }
  }
  {
  __CrestLoad(66911, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66910, (unsigned long )0, (long long )0U);
  __CrestApply2(66909, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 0U));
# 1642 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 0U) {
    __CrestBranch(66912, 43419, 1);
# 1642 "xmlparse.c"
    goto case_0;
  } else {
    __CrestBranch(66913, 43420, 0);

  }
  }
# 1647 "xmlparse.c"
  goto switch_default;
  case_3:
  __CrestLoad(66914, (unsigned long )0, (long long )((enum XML_Error )33));
  __CrestStore(66915, (unsigned long )(& parser->m_errorCode));
# 1637 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )33;
  __CrestLoad(66916, (unsigned long )0, (long long )((enum XML_Status )0));
  __CrestStore(66917, (unsigned long )(& __retres10));
# 1638 "xmlparse.c"
  __retres10 = (enum XML_Status )0;
# 1638 "xmlparse.c"
  goto return_label;
  case_2:
  __CrestLoad(66918, (unsigned long )0, (long long )((enum XML_Error )36));
  __CrestStore(66919, (unsigned long )(& parser->m_errorCode));
# 1640 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )36;
  __CrestLoad(66920, (unsigned long )0, (long long )((enum XML_Status )0));
  __CrestStore(66921, (unsigned long )(& __retres10));
# 1641 "xmlparse.c"
  __retres10 = (enum XML_Status )0;
# 1641 "xmlparse.c"
  goto return_label;
  case_0:
  {
  __CrestLoad(66924, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
  __CrestLoad(66923, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(66922, 12, (long long )((unsigned long )parser->m_parentParser == (unsigned long )((void *)0)));
# 1643 "xmlparse.c"
  if ((unsigned long )parser->m_parentParser == (unsigned long )((void *)0)) {
    __CrestBranch(66925, 43429, 1);
# 1643 "xmlparse.c"
    tmp = startParsing(parser);
    __CrestHandleReturn(66928, (long long )tmp);
    __CrestStore(66927, (unsigned long )(& tmp));
    {
    __CrestLoad(66931, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(66930, (unsigned long )0, (long long )0);
    __CrestApply2(66929, 13, (long long )(tmp != 0));
# 1643 "xmlparse.c"
    if (tmp != 0) {
      __CrestBranch(66932, 43431, 1);

    } else {
      __CrestBranch(66933, 43432, 0);
      __CrestLoad(66934, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(66935, (unsigned long )(& parser->m_errorCode));
# 1644 "xmlparse.c"
      parser->m_errorCode = (enum XML_Error )1;
      __CrestLoad(66936, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(66937, (unsigned long )(& __retres10));
# 1645 "xmlparse.c"
      __retres10 = (enum XML_Status )0;
# 1645 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(66926, 43435, 0);

  }
  }
  switch_default:
  __CrestLoad(66938, (unsigned long )0, (long long )((enum XML_Parsing )1));
  __CrestStore(66939, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1648 "xmlparse.c"
  parser->m_parsingStatus.parsing = (enum XML_Parsing )1;
  switch_break: ;
  }
# 1651 "xmlparse.c"
  start = parser->m_bufferPtr;
# 1652 "xmlparse.c"
  parser->m_positionPtr = start;
# 1653 "xmlparse.c"
  parser->m_bufferEnd += len;
# 1654 "xmlparse.c"
  parser->m_parseEndPtr = (char const *)parser->m_bufferEnd;
  __CrestLoad(66942, (unsigned long )(& parser->m_parseEndByteIndex), (long long )parser->m_parseEndByteIndex);
  __CrestLoad(66941, (unsigned long )(& len), (long long )len);
  __CrestApply2(66940, 0, (long long )(parser->m_parseEndByteIndex + (XML_Index )len));
  __CrestStore(66943, (unsigned long )(& parser->m_parseEndByteIndex));
# 1655 "xmlparse.c"
  parser->m_parseEndByteIndex += (XML_Index )len;
  __CrestLoad(66944, (unsigned long )(& isFinal), (long long )isFinal);
  __CrestStore(66945, (unsigned long )(& parser->m_parsingStatus.finalBuffer));
# 1656 "xmlparse.c"
  parser->m_parsingStatus.finalBuffer = (XML_Bool )isFinal;
# 1658 "xmlparse.c"
  mem_7 = parser->m_processor;
# 1658 "xmlparse.c"
  parser->m_errorCode = (*mem_7)(parser, start, parser->m_parseEndPtr, & parser->m_bufferPtr);
  __CrestHandleReturn(66947, (long long )parser->m_errorCode);
  __CrestStore(66946, (unsigned long )(& parser->m_errorCode));
  {
  __CrestLoad(66950, (unsigned long )(& parser->m_errorCode), (long long )parser->m_errorCode);
  __CrestLoad(66949, (unsigned long )0, (long long )0U);
  __CrestApply2(66948, 13, (long long )((unsigned int )parser->m_errorCode != 0U));
# 1660 "xmlparse.c"
  if ((unsigned int )parser->m_errorCode != 0U) {
    __CrestBranch(66951, 43440, 1);
# 1661 "xmlparse.c"
    parser->m_eventEndPtr = parser->m_eventPtr;
# 1662 "xmlparse.c"
    parser->m_processor = & errorProcessor;
    __CrestLoad(66953, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(66954, (unsigned long )(& __retres10));
# 1663 "xmlparse.c"
    __retres10 = (enum XML_Status )0;
# 1663 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(66952, 43443, 0);
    {
    {
    __CrestLoad(66957, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66956, (unsigned long )0, (long long )3U);
    __CrestApply2(66955, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1667 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(66958, 43445, 1);
# 1667 "xmlparse.c"
      goto case_3___0;
    } else {
      __CrestBranch(66959, 43446, 0);

    }
    }
    {
    __CrestLoad(66962, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66961, (unsigned long )0, (long long )1U);
    __CrestApply2(66960, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1671 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
      __CrestBranch(66963, 43448, 1);
# 1671 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(66964, 43449, 0);

    }
    }
    {
    __CrestLoad(66967, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(66966, (unsigned long )0, (long long )0U);
    __CrestApply2(66965, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 0U));
# 1671 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 0U) {
      __CrestBranch(66968, 43451, 1);
# 1671 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(66969, 43452, 0);

    }
    }
# 1676 "xmlparse.c"
    goto switch_default___0;
    case_3___0:
    __CrestLoad(66970, (unsigned long )0, (long long )((enum XML_Status )2));
    __CrestStore(66971, (unsigned long )(& result));
# 1668 "xmlparse.c"
    result = (enum XML_Status )2;
# 1669 "xmlparse.c"
    goto switch_break___0;
    case_1:
    case_0___0:
    {
    __CrestLoad(66974, (unsigned long )(& isFinal), (long long )isFinal);
    __CrestLoad(66973, (unsigned long )0, (long long )0);
    __CrestApply2(66972, 13, (long long )(isFinal != 0));
# 1672 "xmlparse.c"
    if (isFinal != 0) {
      __CrestBranch(66975, 43457, 1);
      __CrestLoad(66977, (unsigned long )0, (long long )((enum XML_Parsing )2));
      __CrestStore(66978, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1673 "xmlparse.c"
      parser->m_parsingStatus.parsing = (enum XML_Parsing )2;
      __CrestLoad(66979, (unsigned long )(& result), (long long )result);
      __CrestStore(66980, (unsigned long )(& __retres10));
# 1674 "xmlparse.c"
      __retres10 = result;
# 1674 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(66976, 43460, 0);

    }
    }
    switch_default___0: ;
    switch_break___0: ;
    }
  }
  }
# 1680 "xmlparse.c"
  mem_8 = parser->m_encoding;
# 1680 "xmlparse.c"
  mem_9 = mem_8->updatePosition;
# 1680 "xmlparse.c"
  (*mem_9)(parser->m_encoding, parser->m_positionPtr, parser->m_bufferPtr, & parser->m_position);
  __CrestClearStack(66981);
# 1681 "xmlparse.c"
  parser->m_positionPtr = parser->m_bufferPtr;
  __CrestLoad(66982, (unsigned long )(& result), (long long )result);
  __CrestStore(66983, (unsigned long )(& __retres10));
# 1682 "xmlparse.c"
  __retres10 = result;
  return_label:
  {
  __CrestLoad(66984, (unsigned long )(& __retres10), (long long )__retres10);
  __CrestReturn(66985);
# 1629 "xmlparse.c"
  return (__retres10);
  }
}
}
# 1741 "xmlparse.c"
void *sym_memcpy(void *dst , void const *src , size_t len ) ;
# 1685 "xmlparse.c"
void *XML_GetBuffer(XML_Parser parser , int len )
{
  int neededSize ;
  int keep ;
  int offset ;
  char *newBuf ;
  int bufferSize ;
  void *tmp ;
  int keep___0 ;
  char *tmp___0 ;
  char const *tmp___1 ;
  void *(*mem_12)(size_t size ) ;
  void (*mem_13)(void *ptr ) ;
  void *__retres14 ;

  {
  __CrestCall(66987, 740);
  __CrestStore(66986, (unsigned long )(& len));
  {
  {
  __CrestLoad(66990, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66989, (unsigned long )0, (long long )3U);
  __CrestApply2(66988, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1689 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
    __CrestBranch(66991, 43468, 1);
# 1689 "xmlparse.c"
    goto case_3;
  } else {
    __CrestBranch(66992, 43469, 0);

  }
  }
  {
  __CrestLoad(66995, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(66994, (unsigned long )0, (long long )2U);
  __CrestApply2(66993, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 1692 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(66996, 43471, 1);
# 1692 "xmlparse.c"
    goto case_2;
  } else {
    __CrestBranch(66997, 43472, 0);

  }
  }
# 1695 "xmlparse.c"
  goto switch_default;
  case_3:
  __CrestLoad(66998, (unsigned long )0, (long long )((enum XML_Error )33));
  __CrestStore(66999, (unsigned long )(& parser->m_errorCode));
# 1690 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )33;
# 1691 "xmlparse.c"
  __retres14 = (void *)0;
# 1691 "xmlparse.c"
  goto return_label;
  case_2:
  __CrestLoad(67000, (unsigned long )0, (long long )((enum XML_Error )36));
  __CrestStore(67001, (unsigned long )(& parser->m_errorCode));
# 1693 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )36;
# 1694 "xmlparse.c"
  __retres14 = (void *)0;
# 1694 "xmlparse.c"
  goto return_label;
  switch_default: ;
  switch_break: ;
  }
  {
  __CrestLoad(67006, (unsigned long )(& len), (long long )len);
  __CrestLoad(67005, (unsigned long )(& parser->m_bufferLim), (long long )((unsigned long )parser->m_bufferLim));
  __CrestLoad(67004, (unsigned long )(& parser->m_bufferEnd), (long long )((unsigned long )parser->m_bufferEnd));
  __CrestApply2(67003, 18, (long long )(parser->m_bufferLim - (char const *)parser->m_bufferEnd));
  __CrestApply2(67002, 14, (long long )((long )len > parser->m_bufferLim - (char const *)parser->m_bufferEnd));
# 1698 "xmlparse.c"
  if ((long )len > parser->m_bufferLim - (char const *)parser->m_bufferEnd) {
    __CrestBranch(67007, 43483, 1);
    __CrestLoad(67013, (unsigned long )(& len), (long long )len);
    __CrestLoad(67012, (unsigned long )(& parser->m_bufferEnd), (long long )((unsigned long )parser->m_bufferEnd));
    __CrestLoad(67011, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
    __CrestApply2(67010, 18, (long long )(parser->m_bufferEnd - (char *)parser->m_bufferPtr));
    __CrestApply2(67009, 0, (long long )(len + (int )(parser->m_bufferEnd - (char *)parser->m_bufferPtr)));
    __CrestStore(67014, (unsigned long )(& neededSize));
# 1700 "xmlparse.c"
    neededSize = len + (int )(parser->m_bufferEnd - (char *)parser->m_bufferPtr);
    __CrestLoad(67017, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
    __CrestLoad(67016, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
    __CrestApply2(67015, 18, (long long )(parser->m_bufferPtr - (char const *)parser->m_buffer));
    __CrestStore(67018, (unsigned long )(& keep));
# 1702 "xmlparse.c"
    keep = (int )(parser->m_bufferPtr - (char const *)parser->m_buffer);
    {
    __CrestLoad(67021, (unsigned long )(& keep), (long long )keep);
    __CrestLoad(67020, (unsigned long )0, (long long )1024);
    __CrestApply2(67019, 14, (long long )(keep > 1024));
# 1704 "xmlparse.c"
    if (keep > 1024) {
      __CrestBranch(67022, 43485, 1);
      __CrestLoad(67024, (unsigned long )0, (long long )1024);
      __CrestStore(67025, (unsigned long )(& keep));
# 1705 "xmlparse.c"
      keep = 1024;
    } else {
      __CrestBranch(67023, 43486, 0);

    }
    }
    __CrestLoad(67028, (unsigned long )(& neededSize), (long long )neededSize);
    __CrestLoad(67027, (unsigned long )(& keep), (long long )keep);
    __CrestApply2(67026, 0, (long long )(neededSize + keep));
    __CrestStore(67029, (unsigned long )(& neededSize));
# 1706 "xmlparse.c"
    neededSize += keep;
    {
    __CrestLoad(67034, (unsigned long )(& neededSize), (long long )neededSize);
    __CrestLoad(67033, (unsigned long )(& parser->m_bufferLim), (long long )((unsigned long )parser->m_bufferLim));
    __CrestLoad(67032, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
    __CrestApply2(67031, 18, (long long )(parser->m_bufferLim - (char const *)parser->m_buffer));
    __CrestApply2(67030, 15, (long long )((long )neededSize <= parser->m_bufferLim - (char const *)parser->m_buffer));
# 1708 "xmlparse.c"
    if ((long )neededSize <= parser->m_bufferLim - (char const *)parser->m_buffer) {
      __CrestBranch(67035, 43489, 1);
      {
      __CrestLoad(67041, (unsigned long )(& keep), (long long )keep);
      __CrestLoad(67040, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
      __CrestLoad(67039, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
      __CrestApply2(67038, 18, (long long )(parser->m_bufferPtr - (char const *)parser->m_buffer));
      __CrestApply2(67037, 16, (long long )((long )keep < parser->m_bufferPtr - (char const *)parser->m_buffer));
# 1710 "xmlparse.c"
      if ((long )keep < parser->m_bufferPtr - (char const *)parser->m_buffer) {
        __CrestBranch(67042, 43490, 1);
        __CrestLoad(67048, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
        __CrestLoad(67047, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
        __CrestApply2(67046, 18, (long long )(parser->m_bufferPtr - (char const *)parser->m_buffer));
        __CrestLoad(67045, (unsigned long )(& keep), (long long )keep);
        __CrestApply2(67044, 1, (long long )((int )(parser->m_bufferPtr - (char const *)parser->m_buffer) - keep));
        __CrestStore(67049, (unsigned long )(& offset));
# 1711 "xmlparse.c"
        offset = (int )(parser->m_bufferPtr - (char const *)parser->m_buffer) - keep;
        __CrestLoad(67054, (unsigned long )(& parser->m_bufferEnd), (long long )((unsigned long )parser->m_bufferEnd));
        __CrestLoad(67053, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
        __CrestApply2(67052, 18, (long long )(parser->m_bufferEnd - (char *)parser->m_bufferPtr));
        __CrestLoad(67051, (unsigned long )(& keep), (long long )keep);
        __CrestApply2(67050, 0, (long long )((parser->m_bufferEnd - (char *)parser->m_bufferPtr) + (long )keep));
# 1712 "xmlparse.c"
        memmove((void *)parser->m_buffer, (void const *)(parser->m_buffer + offset),
                (size_t )((parser->m_bufferEnd - (char *)parser->m_bufferPtr) + (long )keep));
        __CrestClearStack(67055);
# 1713 "xmlparse.c"
        parser->m_bufferEnd -= offset;
# 1714 "xmlparse.c"
        parser->m_bufferPtr -= offset;
      } else {
        __CrestBranch(67043, 43491, 0);

      }
      }
    } else {
      __CrestBranch(67036, 43492, 0);
      __CrestLoad(67058, (unsigned long )(& parser->m_bufferLim), (long long )((unsigned long )parser->m_bufferLim));
      __CrestLoad(67057, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
      __CrestApply2(67056, 18, (long long )(parser->m_bufferLim - parser->m_bufferPtr));
      __CrestStore(67059, (unsigned long )(& bufferSize));
# 1724 "xmlparse.c"
      bufferSize = (int )(parser->m_bufferLim - parser->m_bufferPtr);
      {
      __CrestLoad(67062, (unsigned long )(& bufferSize), (long long )bufferSize);
      __CrestLoad(67061, (unsigned long )0, (long long )0);
      __CrestApply2(67060, 12, (long long )(bufferSize == 0));
# 1725 "xmlparse.c"
      if (bufferSize == 0) {
        __CrestBranch(67063, 43494, 1);
        __CrestLoad(67065, (unsigned long )0, (long long )1024);
        __CrestStore(67066, (unsigned long )(& bufferSize));
# 1726 "xmlparse.c"
        bufferSize = 1024;
      } else {
        __CrestBranch(67064, 43495, 0);

      }
      }
      {
# 1727 "xmlparse.c"
      while (1) {
        while_continue: ;
        __CrestLoad(67069, (unsigned long )(& bufferSize), (long long )bufferSize);
        __CrestLoad(67068, (unsigned long )0, (long long )2);
        __CrestApply2(67067, 2, (long long )(bufferSize * 2));
        __CrestStore(67070, (unsigned long )(& bufferSize));
# 1728 "xmlparse.c"
        bufferSize *= 2;
        {
        __CrestLoad(67073, (unsigned long )(& bufferSize), (long long )bufferSize);
        __CrestLoad(67072, (unsigned long )(& neededSize), (long long )neededSize);
        __CrestApply2(67071, 16, (long long )(bufferSize < neededSize));
# 1727 "xmlparse.c"
        if (bufferSize < neededSize) {
          __CrestBranch(67074, 43501, 1);

        } else {
          __CrestBranch(67075, 43502, 0);
# 1727 "xmlparse.c"
          goto while_break;
        }
        }
      }
      while_break: ;
      }
# 1730 "xmlparse.c"
      mem_12 = parser->m_mem.malloc_fcn;
      __CrestLoad(67076, (unsigned long )(& bufferSize), (long long )bufferSize);
# 1730 "xmlparse.c"
      tmp = (*mem_12)((size_t )bufferSize);
      __CrestClearStack(67077);
# 1730 "xmlparse.c"
      newBuf = (char *)tmp;
      {
      __CrestLoad(67080, (unsigned long )(& newBuf), (long long )((unsigned long )newBuf));
      __CrestLoad(67079, (unsigned long )0, (long long )((unsigned long )((char *)0)));
      __CrestApply2(67078, 12, (long long )((unsigned long )newBuf == (unsigned long )((char *)0)));
# 1731 "xmlparse.c"
      if ((unsigned long )newBuf == (unsigned long )((char *)0)) {
        __CrestBranch(67081, 43506, 1);
        __CrestLoad(67083, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(67084, (unsigned long )(& parser->m_errorCode));
# 1732 "xmlparse.c"
        parser->m_errorCode = (enum XML_Error )1;
# 1733 "xmlparse.c"
        __retres14 = (void *)0;
# 1733 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67082, 43509, 0);

      }
      }
# 1735 "xmlparse.c"
      parser->m_bufferLim = (char const *)(newBuf + bufferSize);
      {
      __CrestLoad(67087, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
      __CrestLoad(67086, (unsigned long )0, (long long )0);
      __CrestApply2(67085, 13, (long long )(parser->m_bufferPtr != 0));
# 1737 "xmlparse.c"
      if (parser->m_bufferPtr != 0) {
        __CrestBranch(67088, 43512, 1);
        __CrestLoad(67092, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
        __CrestLoad(67091, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
        __CrestApply2(67090, 18, (long long )(parser->m_bufferPtr - (char const *)parser->m_buffer));
        __CrestStore(67093, (unsigned long )(& keep___0));
# 1738 "xmlparse.c"
        keep___0 = (int )(parser->m_bufferPtr - (char const *)parser->m_buffer);
        {
        __CrestLoad(67096, (unsigned long )(& keep___0), (long long )keep___0);
        __CrestLoad(67095, (unsigned long )0, (long long )1024);
        __CrestApply2(67094, 14, (long long )(keep___0 > 1024));
# 1739 "xmlparse.c"
        if (keep___0 > 1024) {
          __CrestBranch(67097, 43514, 1);
          __CrestLoad(67099, (unsigned long )0, (long long )1024);
          __CrestStore(67100, (unsigned long )(& keep___0));
# 1740 "xmlparse.c"
          keep___0 = 1024;
        } else {
          __CrestBranch(67098, 43515, 0);

        }
        }
        __CrestLoad(67105, (unsigned long )(& parser->m_bufferEnd), (long long )((unsigned long )parser->m_bufferEnd));
        __CrestLoad(67104, (unsigned long )(& parser->m_bufferPtr), (long long )((unsigned long )parser->m_bufferPtr));
        __CrestApply2(67103, 18, (long long )(parser->m_bufferEnd - (char *)parser->m_bufferPtr));
        __CrestLoad(67102, (unsigned long )(& keep___0), (long long )keep___0);
        __CrestApply2(67101, 0, (long long )((parser->m_bufferEnd - (char *)parser->m_bufferPtr) + (long )keep___0));
# 1741 "xmlparse.c"
        sym_memcpy(newBuf, parser->m_bufferPtr + - keep___0, (parser->m_bufferEnd - (char *)parser->m_bufferPtr) + (long )keep___0);
        __CrestClearStack(67106);
# 1742 "xmlparse.c"
        mem_13 = parser->m_mem.free_fcn;
# 1742 "xmlparse.c"
        (*mem_13)((void *)parser->m_buffer);
        __CrestClearStack(67107);
# 1743 "xmlparse.c"
        parser->m_buffer = newBuf;
# 1744 "xmlparse.c"
        parser->m_bufferEnd = (parser->m_buffer + (parser->m_bufferEnd - (char *)parser->m_bufferPtr)) + keep___0;
# 1745 "xmlparse.c"
        parser->m_bufferPtr = (char const *)(parser->m_buffer + keep___0);
      } else {
        __CrestBranch(67089, 43517, 0);
# 1748 "xmlparse.c"
        parser->m_bufferEnd = newBuf + (parser->m_bufferEnd - (char *)parser->m_bufferPtr);
# 1749 "xmlparse.c"
        tmp___0 = newBuf;
# 1749 "xmlparse.c"
        parser->m_buffer = tmp___0;
# 1749 "xmlparse.c"
        parser->m_bufferPtr = (char const *)tmp___0;
      }
      }
    }
    }
# 1760 "xmlparse.c"
    tmp___1 = (char const *)((void *)0);
# 1760 "xmlparse.c"
    parser->m_eventEndPtr = tmp___1;
# 1760 "xmlparse.c"
    parser->m_eventPtr = tmp___1;
# 1761 "xmlparse.c"
    parser->m_positionPtr = (char const *)((void *)0);
  } else {
    __CrestBranch(67008, 43519, 0);

  }
  }
# 1763 "xmlparse.c"
  __retres14 = (void *)parser->m_bufferEnd;
  return_label:
  {
  __CrestReturn(67108);
# 1685 "xmlparse.c"
  return (__retres14);
  }
}
}
# 1766 "xmlparse.c"
enum XML_Status XML_StopParser(XML_Parser parser , XML_Bool resumable )
{
  enum XML_Status __retres3 ;

  {
  __CrestCall(67110, 741);
  __CrestStore(67109, (unsigned long )(& resumable));
  {
  {
  __CrestLoad(67113, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(67112, (unsigned long )0, (long long )3U);
  __CrestApply2(67111, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1770 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
    __CrestBranch(67114, 43524, 1);
# 1770 "xmlparse.c"
    goto case_3;
  } else {
    __CrestBranch(67115, 43525, 0);

  }
  }
  {
  __CrestLoad(67118, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(67117, (unsigned long )0, (long long )2U);
  __CrestApply2(67116, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 1777 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(67119, 43527, 1);
# 1777 "xmlparse.c"
    goto case_2;
  } else {
    __CrestBranch(67120, 43528, 0);

  }
  }
# 1780 "xmlparse.c"
  goto switch_default;
  case_3:
  {
  __CrestLoad(67123, (unsigned long )(& resumable), (long long )resumable);
  __CrestLoad(67122, (unsigned long )0, (long long )0);
  __CrestApply2(67121, 13, (long long )(resumable != 0));
# 1771 "xmlparse.c"
  if (resumable != 0) {
    __CrestBranch(67124, 43531, 1);
    __CrestLoad(67126, (unsigned long )0, (long long )((enum XML_Error )33));
    __CrestStore(67127, (unsigned long )(& parser->m_errorCode));
# 1772 "xmlparse.c"
    parser->m_errorCode = (enum XML_Error )33;
    __CrestLoad(67128, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(67129, (unsigned long )(& __retres3));
# 1773 "xmlparse.c"
    __retres3 = (enum XML_Status )0;
# 1773 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67125, 43534, 0);

  }
  }
  __CrestLoad(67130, (unsigned long )0, (long long )((enum XML_Parsing )2));
  __CrestStore(67131, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1775 "xmlparse.c"
  parser->m_parsingStatus.parsing = (enum XML_Parsing )2;
# 1776 "xmlparse.c"
  goto switch_break;
  case_2:
  __CrestLoad(67132, (unsigned long )0, (long long )((enum XML_Error )36));
  __CrestStore(67133, (unsigned long )(& parser->m_errorCode));
# 1778 "xmlparse.c"
  parser->m_errorCode = (enum XML_Error )36;
  __CrestLoad(67134, (unsigned long )0, (long long )((enum XML_Status )0));
  __CrestStore(67135, (unsigned long )(& __retres3));
# 1779 "xmlparse.c"
  __retres3 = (enum XML_Status )0;
# 1779 "xmlparse.c"
  goto return_label;
  switch_default:
  {
  __CrestLoad(67138, (unsigned long )(& resumable), (long long )resumable);
  __CrestLoad(67137, (unsigned long )0, (long long )0);
  __CrestApply2(67136, 13, (long long )(resumable != 0));
# 1781 "xmlparse.c"
  if (resumable != 0) {
    __CrestBranch(67139, 43541, 1);
    {
    __CrestLoad(67143, (unsigned long )(& parser->m_isParamEntity), (long long )parser->m_isParamEntity);
    __CrestLoad(67142, (unsigned long )0, (long long )0);
    __CrestApply2(67141, 13, (long long )(parser->m_isParamEntity != 0));
# 1783 "xmlparse.c"
    if (parser->m_isParamEntity != 0) {
      __CrestBranch(67144, 43542, 1);
      __CrestLoad(67146, (unsigned long )0, (long long )((enum XML_Error )37));
      __CrestStore(67147, (unsigned long )(& parser->m_errorCode));
# 1784 "xmlparse.c"
      parser->m_errorCode = (enum XML_Error )37;
      __CrestLoad(67148, (unsigned long )0, (long long )((enum XML_Status )0));
      __CrestStore(67149, (unsigned long )(& __retres3));
# 1785 "xmlparse.c"
      __retres3 = (enum XML_Status )0;
# 1785 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67145, 43545, 0);

    }
    }
    __CrestLoad(67150, (unsigned long )0, (long long )((enum XML_Parsing )3));
    __CrestStore(67151, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1788 "xmlparse.c"
    parser->m_parsingStatus.parsing = (enum XML_Parsing )3;
  } else {
    __CrestBranch(67140, 43547, 0);
    __CrestLoad(67152, (unsigned long )0, (long long )((enum XML_Parsing )2));
    __CrestStore(67153, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1791 "xmlparse.c"
    parser->m_parsingStatus.parsing = (enum XML_Parsing )2;
  }
  }
  switch_break: ;
  }
  __CrestLoad(67154, (unsigned long )0, (long long )((enum XML_Status )1));
  __CrestStore(67155, (unsigned long )(& __retres3));
# 1793 "xmlparse.c"
  __retres3 = (enum XML_Status )1;
  return_label:
  {
  __CrestLoad(67156, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(67157);
# 1766 "xmlparse.c"
  return (__retres3);
  }
}
}
# 1796 "xmlparse.c"
enum XML_Status XML_ResumeParser(XML_Parser parser )
{
  enum XML_Status result ;
  Processor *mem_3 ;
  ENCODING const *mem_4 ;
  void (*mem_5)(ENCODING const * , char const *ptr , char const *end , POSITION * ) ;
  enum XML_Status __retres6 ;

  {
  __CrestCall(67158, 742);

  __CrestLoad(67159, (unsigned long )0, (long long )((enum XML_Status )1));
  __CrestStore(67160, (unsigned long )(& result));
# 1799 "xmlparse.c"
  result = (enum XML_Status )1;
  {
  __CrestLoad(67163, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(67162, (unsigned long )0, (long long )3U);
  __CrestApply2(67161, 13, (long long )((unsigned int )parser->m_parsingStatus.parsing != 3U));
# 1801 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing != 3U) {
    __CrestBranch(67164, 43553, 1);
    __CrestLoad(67166, (unsigned long )0, (long long )((enum XML_Error )34));
    __CrestStore(67167, (unsigned long )(& parser->m_errorCode));
# 1802 "xmlparse.c"
    parser->m_errorCode = (enum XML_Error )34;
    __CrestLoad(67168, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(67169, (unsigned long )(& __retres6));
# 1803 "xmlparse.c"
    __retres6 = (enum XML_Status )0;
# 1803 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67165, 43556, 0);

  }
  }
  __CrestLoad(67170, (unsigned long )0, (long long )((enum XML_Parsing )1));
  __CrestStore(67171, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1805 "xmlparse.c"
  parser->m_parsingStatus.parsing = (enum XML_Parsing )1;
# 1807 "xmlparse.c"
  mem_3 = parser->m_processor;
# 1807 "xmlparse.c"
  parser->m_errorCode = (*mem_3)(parser, parser->m_bufferPtr, parser->m_parseEndPtr,
                                 & parser->m_bufferPtr);
  __CrestHandleReturn(67173, (long long )parser->m_errorCode);
  __CrestStore(67172, (unsigned long )(& parser->m_errorCode));
  {
  __CrestLoad(67176, (unsigned long )(& parser->m_errorCode), (long long )parser->m_errorCode);
  __CrestLoad(67175, (unsigned long )0, (long long )0U);
  __CrestApply2(67174, 13, (long long )((unsigned int )parser->m_errorCode != 0U));
# 1809 "xmlparse.c"
  if ((unsigned int )parser->m_errorCode != 0U) {
    __CrestBranch(67177, 43559, 1);
# 1810 "xmlparse.c"
    parser->m_eventEndPtr = parser->m_eventPtr;
# 1811 "xmlparse.c"
    parser->m_processor = & errorProcessor;
    __CrestLoad(67179, (unsigned long )0, (long long )((enum XML_Status )0));
    __CrestStore(67180, (unsigned long )(& __retres6));
# 1812 "xmlparse.c"
    __retres6 = (enum XML_Status )0;
# 1812 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67178, 43562, 0);
    {
    {
    __CrestLoad(67183, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(67182, (unsigned long )0, (long long )3U);
    __CrestApply2(67181, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 1816 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(67184, 43564, 1);
# 1816 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(67185, 43565, 0);

    }
    }
    {
    __CrestLoad(67188, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(67187, (unsigned long )0, (long long )1U);
    __CrestApply2(67186, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 1U));
# 1820 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 1U) {
      __CrestBranch(67189, 43567, 1);
# 1820 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(67190, 43568, 0);

    }
    }
    {
    __CrestLoad(67193, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(67192, (unsigned long )0, (long long )0U);
    __CrestApply2(67191, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 0U));
# 1820 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 0U) {
      __CrestBranch(67194, 43570, 1);
# 1820 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(67195, 43571, 0);

    }
    }
# 1825 "xmlparse.c"
    goto switch_default;
    case_3:
    __CrestLoad(67196, (unsigned long )0, (long long )((enum XML_Status )2));
    __CrestStore(67197, (unsigned long )(& result));
# 1817 "xmlparse.c"
    result = (enum XML_Status )2;
# 1818 "xmlparse.c"
    goto switch_break;
    case_1:
    case_0:
    {
    __CrestLoad(67200, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestLoad(67199, (unsigned long )0, (long long )0);
    __CrestApply2(67198, 13, (long long )(parser->m_parsingStatus.finalBuffer != 0));
# 1821 "xmlparse.c"
    if (parser->m_parsingStatus.finalBuffer != 0) {
      __CrestBranch(67201, 43576, 1);
      __CrestLoad(67203, (unsigned long )0, (long long )((enum XML_Parsing )2));
      __CrestStore(67204, (unsigned long )(& parser->m_parsingStatus.parsing));
# 1822 "xmlparse.c"
      parser->m_parsingStatus.parsing = (enum XML_Parsing )2;
      __CrestLoad(67205, (unsigned long )(& result), (long long )result);
      __CrestStore(67206, (unsigned long )(& __retres6));
# 1823 "xmlparse.c"
      __retres6 = result;
# 1823 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67202, 43579, 0);

    }
    }
    switch_default: ;
    switch_break: ;
    }
  }
  }
# 1829 "xmlparse.c"
  mem_4 = parser->m_encoding;
# 1829 "xmlparse.c"
  mem_5 = mem_4->updatePosition;
# 1829 "xmlparse.c"
  (*mem_5)(parser->m_encoding, parser->m_positionPtr, parser->m_bufferPtr, & parser->m_position);
  __CrestClearStack(67207);
# 1830 "xmlparse.c"
  parser->m_positionPtr = parser->m_bufferPtr;
  __CrestLoad(67208, (unsigned long )(& result), (long long )result);
  __CrestStore(67209, (unsigned long )(& __retres6));
# 1831 "xmlparse.c"
  __retres6 = result;
  return_label:
  {
  __CrestLoad(67210, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(67211);
# 1796 "xmlparse.c"
  return (__retres6);
  }
}
}
# 1834 "xmlparse.c"
void XML_GetParsingStatus(XML_Parser parser , XML_ParsingStatus *status )
{


  {
  __CrestCall(67212, 743);

  {
  __CrestLoad(67215, (unsigned long )(& status), (long long )((unsigned long )status));
  __CrestLoad(67214, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(67213, 13, (long long )((unsigned long )status != (unsigned long )((void *)0)));
# 1837 "xmlparse.c"
  if ((unsigned long )status != (unsigned long )((void *)0)) {
    __CrestBranch(67216, 43586, 1);

  } else {
    __CrestBranch(67217, 43587, 0);
    __CrestLoad(67218, (unsigned long )0, (long long )1837U);
# 1837 "xmlparse.c"
    __assert_fail("status != NULL", "xmlparse.c", 1837U, "XML_GetParsingStatus");
    __CrestClearStack(67219);
  }
  }
# 1838 "xmlparse.c"
  *status = parser->m_parsingStatus;

  {
  __CrestReturn(67220);
# 1834 "xmlparse.c"
  return;
  }
}
}
# 1841 "xmlparse.c"
enum XML_Error XML_GetErrorCode(XML_Parser parser )
{
  enum XML_Error __retres2 ;

  {
  __CrestCall(67221, 744);

  __CrestLoad(67222, (unsigned long )(& parser->m_errorCode), (long long )parser->m_errorCode);
  __CrestStore(67223, (unsigned long )(& __retres2));
# 1844 "xmlparse.c"
  __retres2 = parser->m_errorCode;
  {
  __CrestLoad(67224, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(67225);
# 1841 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1847 "xmlparse.c"
XML_Index XML_GetCurrentByteIndex(XML_Parser parser )
{
  XML_Index __retres2 ;

  {
  __CrestCall(67226, 745);

  {
  __CrestLoad(67229, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
  __CrestLoad(67228, (unsigned long )0, (long long )0);
  __CrestApply2(67227, 13, (long long )(parser->m_eventPtr != 0));
# 1850 "xmlparse.c"
  if (parser->m_eventPtr != 0) {
    __CrestBranch(67230, 43594, 1);
    __CrestLoad(67236, (unsigned long )(& parser->m_parseEndByteIndex), (long long )parser->m_parseEndByteIndex);
    __CrestLoad(67235, (unsigned long )(& parser->m_parseEndPtr), (long long )((unsigned long )parser->m_parseEndPtr));
    __CrestLoad(67234, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
    __CrestApply2(67233, 18, (long long )(parser->m_parseEndPtr - parser->m_eventPtr));
    __CrestApply2(67232, 1, (long long )(parser->m_parseEndByteIndex - (parser->m_parseEndPtr - parser->m_eventPtr)));
    __CrestStore(67237, (unsigned long )(& __retres2));
# 1851 "xmlparse.c"
    __retres2 = parser->m_parseEndByteIndex - (parser->m_parseEndPtr - parser->m_eventPtr);
# 1851 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67231, 43596, 0);

  }
  }
  __CrestLoad(67238, (unsigned long )0, (long long )((XML_Index )-1));
  __CrestStore(67239, (unsigned long )(& __retres2));
# 1852 "xmlparse.c"
  __retres2 = (XML_Index )-1;
  return_label:
  {
  __CrestLoad(67240, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(67241);
# 1847 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1855 "xmlparse.c"
int XML_GetCurrentByteCount(XML_Parser parser )
{
  int __retres2 ;

  {
  __CrestCall(67242, 746);

  {
  __CrestLoad(67245, (unsigned long )(& parser->m_eventEndPtr), (long long )((unsigned long )parser->m_eventEndPtr));
  __CrestLoad(67244, (unsigned long )0, (long long )0);
  __CrestApply2(67243, 13, (long long )(parser->m_eventEndPtr != 0));
# 1858 "xmlparse.c"
  if (parser->m_eventEndPtr != 0) {
    __CrestBranch(67246, 43600, 1);
    {
    __CrestLoad(67250, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
    __CrestLoad(67249, (unsigned long )0, (long long )0);
    __CrestApply2(67248, 13, (long long )(parser->m_eventPtr != 0));
# 1858 "xmlparse.c"
    if (parser->m_eventPtr != 0) {
      __CrestBranch(67251, 43601, 1);
      __CrestLoad(67255, (unsigned long )(& parser->m_eventEndPtr), (long long )((unsigned long )parser->m_eventEndPtr));
      __CrestLoad(67254, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
      __CrestApply2(67253, 18, (long long )(parser->m_eventEndPtr - parser->m_eventPtr));
      __CrestStore(67256, (unsigned long )(& __retres2));
# 1859 "xmlparse.c"
      __retres2 = (int )(parser->m_eventEndPtr - parser->m_eventPtr);
# 1859 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67252, 43603, 0);

    }
    }
  } else {
    __CrestBranch(67247, 43604, 0);

  }
  }
  __CrestLoad(67257, (unsigned long )0, (long long )0);
  __CrestStore(67258, (unsigned long )(& __retres2));
# 1860 "xmlparse.c"
  __retres2 = 0;
  return_label:
  {
  __CrestLoad(67259, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(67260);
# 1855 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1863 "xmlparse.c"
char const *XML_GetInputContext(XML_Parser parser , int *offset , int *size )
{
  char const *__retres4 ;

  {
  __CrestCall(67261, 747);

  {
  __CrestLoad(67264, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
  __CrestLoad(67263, (unsigned long )0, (long long )0);
  __CrestApply2(67262, 13, (long long )(parser->m_eventPtr != 0));
# 1867 "xmlparse.c"
  if (parser->m_eventPtr != 0) {
    __CrestBranch(67265, 43608, 1);
    {
    __CrestLoad(67269, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
    __CrestLoad(67268, (unsigned long )0, (long long )0);
    __CrestApply2(67267, 13, (long long )(parser->m_buffer != 0));
# 1867 "xmlparse.c"
    if (parser->m_buffer != 0) {
      __CrestBranch(67270, 43609, 1);
      __CrestLoad(67274, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
      __CrestLoad(67273, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
      __CrestApply2(67272, 18, (long long )(parser->m_eventPtr - (char const *)parser->m_buffer));
      __CrestStore(67275, (unsigned long )offset);
# 1868 "xmlparse.c"
      *offset = (int )(parser->m_eventPtr - (char const *)parser->m_buffer);
      __CrestLoad(67278, (unsigned long )(& parser->m_bufferEnd), (long long )((unsigned long )parser->m_bufferEnd));
      __CrestLoad(67277, (unsigned long )(& parser->m_buffer), (long long )((unsigned long )parser->m_buffer));
      __CrestApply2(67276, 18, (long long )(parser->m_bufferEnd - parser->m_buffer));
      __CrestStore(67279, (unsigned long )size);
# 1869 "xmlparse.c"
      *size = (int )(parser->m_bufferEnd - parser->m_buffer);
# 1870 "xmlparse.c"
      __retres4 = (char const *)parser->m_buffer;
# 1870 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67271, 43612, 0);

    }
    }
  } else {
    __CrestBranch(67266, 43613, 0);

  }
  }
# 1873 "xmlparse.c"
  __retres4 = (char const *)((char *)0);
  return_label:
  {
  __CrestReturn(67280);
# 1863 "xmlparse.c"
  return (__retres4);
  }
}
}
# 1876 "xmlparse.c"
XML_Size XML_GetCurrentLineNumber(XML_Parser parser )
{
  ENCODING const *mem_2 ;
  void (*mem_3)(ENCODING const * , char const *ptr , char const *end , POSITION * ) ;
  XML_Size __retres4 ;

  {
  __CrestCall(67281, 748);

  {
  __CrestLoad(67284, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
  __CrestLoad(67283, (unsigned long )0, (long long )0);
  __CrestApply2(67282, 13, (long long )(parser->m_eventPtr != 0));
# 1879 "xmlparse.c"
  if (parser->m_eventPtr != 0) {
    __CrestBranch(67285, 43617, 1);
    {
    __CrestLoad(67289, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
    __CrestLoad(67288, (unsigned long )(& parser->m_positionPtr), (long long )((unsigned long )parser->m_positionPtr));
    __CrestApply2(67287, 17, (long long )((unsigned long )parser->m_eventPtr >= (unsigned long )parser->m_positionPtr));
# 1879 "xmlparse.c"
    if ((unsigned long )parser->m_eventPtr >= (unsigned long )parser->m_positionPtr) {
      __CrestBranch(67290, 43618, 1);
# 1880 "xmlparse.c"
      mem_2 = parser->m_encoding;
# 1880 "xmlparse.c"
      mem_3 = mem_2->updatePosition;
# 1880 "xmlparse.c"
      (*mem_3)(parser->m_encoding, parser->m_positionPtr, parser->m_eventPtr, & parser->m_position);
      __CrestClearStack(67292);
# 1881 "xmlparse.c"
      parser->m_positionPtr = parser->m_eventPtr;
    } else {
      __CrestBranch(67291, 43619, 0);

    }
    }
  } else {
    __CrestBranch(67286, 43620, 0);

  }
  }
  __CrestLoad(67295, (unsigned long )(& parser->m_position.lineNumber), (long long )parser->m_position.lineNumber);
  __CrestLoad(67294, (unsigned long )0, (long long )1UL);
  __CrestApply2(67293, 0, (long long )(parser->m_position.lineNumber + 1UL));
  __CrestStore(67296, (unsigned long )(& __retres4));
# 1883 "xmlparse.c"
  __retres4 = parser->m_position.lineNumber + 1UL;
  {
  __CrestLoad(67297, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(67298);
# 1876 "xmlparse.c"
  return (__retres4);
  }
}
}
# 1886 "xmlparse.c"
XML_Size XML_GetCurrentColumnNumber(XML_Parser parser )
{
  ENCODING const *mem_2 ;
  void (*mem_3)(ENCODING const * , char const *ptr , char const *end , POSITION * ) ;
  XML_Size __retres4 ;

  {
  __CrestCall(67299, 749);

  {
  __CrestLoad(67302, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
  __CrestLoad(67301, (unsigned long )0, (long long )0);
  __CrestApply2(67300, 13, (long long )(parser->m_eventPtr != 0));
# 1889 "xmlparse.c"
  if (parser->m_eventPtr != 0) {
    __CrestBranch(67303, 43624, 1);
    {
    __CrestLoad(67307, (unsigned long )(& parser->m_eventPtr), (long long )((unsigned long )parser->m_eventPtr));
    __CrestLoad(67306, (unsigned long )(& parser->m_positionPtr), (long long )((unsigned long )parser->m_positionPtr));
    __CrestApply2(67305, 17, (long long )((unsigned long )parser->m_eventPtr >= (unsigned long )parser->m_positionPtr));
# 1889 "xmlparse.c"
    if ((unsigned long )parser->m_eventPtr >= (unsigned long )parser->m_positionPtr) {
      __CrestBranch(67308, 43625, 1);
# 1890 "xmlparse.c"
      mem_2 = parser->m_encoding;
# 1890 "xmlparse.c"
      mem_3 = mem_2->updatePosition;
# 1890 "xmlparse.c"
      (*mem_3)(parser->m_encoding, parser->m_positionPtr, parser->m_eventPtr, & parser->m_position);
      __CrestClearStack(67310);
# 1891 "xmlparse.c"
      parser->m_positionPtr = parser->m_eventPtr;
    } else {
      __CrestBranch(67309, 43626, 0);

    }
    }
  } else {
    __CrestBranch(67304, 43627, 0);

  }
  }
  __CrestLoad(67311, (unsigned long )(& parser->m_position.columnNumber), (long long )parser->m_position.columnNumber);
  __CrestStore(67312, (unsigned long )(& __retres4));
# 1893 "xmlparse.c"
  __retres4 = parser->m_position.columnNumber;
  {
  __CrestLoad(67313, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(67314);
# 1886 "xmlparse.c"
  return (__retres4);
  }
}
}
# 1896 "xmlparse.c"
void XML_FreeContentModel(XML_Parser parser , XML_Content *model )
{
  void (*mem_3)(void *ptr ) ;

  {
  __CrestCall(67315, 750);
# 1899 "xmlparse.c"
  mem_3 = parser->m_mem.free_fcn;
# 1899 "xmlparse.c"
  (*mem_3)((void *)model);
  __CrestClearStack(67316);

  {
  __CrestReturn(67317);
# 1896 "xmlparse.c"
  return;
  }
}
}
# 1902 "xmlparse.c"
void *XML_MemMalloc(XML_Parser parser , size_t size )
{
  void *tmp ;
  void *(*mem_4)(size_t size ) ;

  {
  __CrestCall(67319, 751);
  __CrestStore(67318, (unsigned long )(& size));
# 1905 "xmlparse.c"
  mem_4 = parser->m_mem.malloc_fcn;
  __CrestLoad(67320, (unsigned long )(& size), (long long )size);
# 1905 "xmlparse.c"
  tmp = (*mem_4)(size);
  __CrestClearStack(67321);
  {
  __CrestReturn(67322);
# 1905 "xmlparse.c"
  return (tmp);
  }
}
}
# 1908 "xmlparse.c"
void *XML_MemRealloc(XML_Parser parser , void *ptr , size_t size )
{
  void *tmp ;
  void *(*mem_5)(void *ptr , size_t size ) ;

  {
  __CrestCall(67324, 752);
  __CrestStore(67323, (unsigned long )(& size));
# 1911 "xmlparse.c"
  mem_5 = parser->m_mem.realloc_fcn;
  __CrestLoad(67325, (unsigned long )(& size), (long long )size);
# 1911 "xmlparse.c"
  tmp = (*mem_5)(ptr, size);
  __CrestClearStack(67326);
  {
  __CrestReturn(67327);
# 1911 "xmlparse.c"
  return (tmp);
  }
}
}
# 1914 "xmlparse.c"
void XML_MemFree(XML_Parser parser , void *ptr )
{
  void (*mem_3)(void *ptr ) ;

  {
  __CrestCall(67328, 753);
# 1917 "xmlparse.c"
  mem_3 = parser->m_mem.free_fcn;
# 1917 "xmlparse.c"
  (*mem_3)(ptr);
  __CrestClearStack(67329);

  {
  __CrestReturn(67330);
# 1914 "xmlparse.c"
  return;
  }
}
}
# 1920 "xmlparse.c"
void XML_DefaultCurrent(XML_Parser parser )
{
  OPEN_INTERNAL_ENTITY *mem_2 ;
  OPEN_INTERNAL_ENTITY *mem_3 ;

  {
  __CrestCall(67331, 754);

  {
  __CrestLoad(67334, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
  __CrestLoad(67333, (unsigned long )0, (long long )0);
  __CrestApply2(67332, 13, (long long )(parser->m_defaultHandler != 0));
# 1923 "xmlparse.c"
  if (parser->m_defaultHandler != 0) {
    __CrestBranch(67335, 43641, 1);
    {
    __CrestLoad(67339, (unsigned long )(& parser->m_openInternalEntities), (long long )((unsigned long )parser->m_openInternalEntities));
    __CrestLoad(67338, (unsigned long )0, (long long )0);
    __CrestApply2(67337, 13, (long long )(parser->m_openInternalEntities != 0));
# 1924 "xmlparse.c"
    if (parser->m_openInternalEntities != 0) {
      __CrestBranch(67340, 43642, 1);
# 1925 "xmlparse.c"
      mem_2 = parser->m_openInternalEntities;
# 1925 "xmlparse.c"
      mem_3 = parser->m_openInternalEntities;
# 1925 "xmlparse.c"
      reportDefault(parser, parser->m_internalEncoding, mem_2->internalEventPtr, mem_3->internalEventEndPtr);
      __CrestClearStack(67342);
    } else {
      __CrestBranch(67341, 43643, 0);
# 1930 "xmlparse.c"
      reportDefault(parser, parser->m_encoding, parser->m_eventPtr, parser->m_eventEndPtr);
      __CrestClearStack(67343);
    }
    }
  } else {
    __CrestBranch(67336, 43644, 0);

  }
  }

  {
  __CrestReturn(67344);
# 1920 "xmlparse.c"
  return;
  }
}
}
# 1937 "xmlparse.c"
static XML_LChar const * const message[41] =
# 1937 "xmlparse.c"
  { (XML_LChar const * const )0, (XML_LChar const * const )"out of memory", (XML_LChar const * const )"syntax error", (XML_LChar const * const )"no element found",
        (XML_LChar const * const )"not well-formed (invalid token)", (XML_LChar const * const )"unclosed token", (XML_LChar const * const )"partial character", (XML_LChar const * const )"mismatched tag",
        (XML_LChar const * const )"duplicate attribute", (XML_LChar const * const )"junk after document element", (XML_LChar const * const )"illegal parameter entity reference", (XML_LChar const * const )"undefined entity",
        (XML_LChar const * const )"recursive entity reference", (XML_LChar const * const )"asynchronous entity", (XML_LChar const * const )"reference to invalid character number", (XML_LChar const * const )"reference to binary entity",
        (XML_LChar const * const )"reference to external entity in attribute", (XML_LChar const * const )"XML or text declaration not at start of entity", (XML_LChar const * const )"unknown encoding", (XML_LChar const * const )"encoding specified in XML declaration is incorrect",
        (XML_LChar const * const )"unclosed CDATA section", (XML_LChar const * const )"error in processing external entity reference", (XML_LChar const * const )"document is not standalone", (XML_LChar const * const )"unexpected parser state - please send a bug report",
        (XML_LChar const * const )"entity declared in parameter entity", (XML_LChar const * const )"requested feature requires XML_DTD support in Expat", (XML_LChar const * const )"cannot change setting once parsing has begun", (XML_LChar const * const )"unbound prefix",
        (XML_LChar const * const )"must not undeclare prefix", (XML_LChar const * const )"incomplete markup in parameter entity", (XML_LChar const * const )"XML declaration not well-formed", (XML_LChar const * const )"text declaration not well-formed",
        (XML_LChar const * const )"illegal character(s) in public id", (XML_LChar const * const )"parser suspended", (XML_LChar const * const )"parser not suspended", (XML_LChar const * const )"parsing aborted",
        (XML_LChar const * const )"parsing finished", (XML_LChar const * const )"cannot suspend in external parameter entity", (XML_LChar const * const )"reserved prefix (xml) must not be undeclared or bound to another namespace name", (XML_LChar const * const )"reserved prefix (xmlns) must not be declared or undeclared",
        (XML_LChar const * const )"prefix must not be bound to one of the reserved namespace names"};
# 1934 "xmlparse.c"
XML_LChar const *XML_ErrorString(enum XML_Error code )
{
  XML_LChar const *__retres2 ;

  {
  __CrestCall(67346, 755);
  __CrestStore(67345, (unsigned long )(& code));
  {
  __CrestLoad(67349, (unsigned long )(& code), (long long )code);
  __CrestLoad(67348, (unsigned long )0, (long long )0U);
  __CrestApply2(67347, 14, (long long )((unsigned int )code > 0U));
# 1980 "xmlparse.c"
  if ((unsigned int )code > 0U) {
    __CrestBranch(67350, 43648, 1);
    {
    __CrestLoad(67354, (unsigned long )(& code), (long long )code);
    __CrestLoad(67353, (unsigned long )0, (long long )(sizeof(message) / sizeof(message[0])));
    __CrestApply2(67352, 16, (long long )((unsigned long )code < sizeof(message) / sizeof(message[0])));
# 1980 "xmlparse.c"
    if ((unsigned long )code < sizeof(message) / sizeof(message[0])) {
      __CrestBranch(67355, 43649, 1);
# 1981 "xmlparse.c"
      __retres2 = (XML_LChar const *)message[code];
# 1981 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67356, 43651, 0);

    }
    }
  } else {
    __CrestBranch(67351, 43652, 0);

  }
  }
# 1982 "xmlparse.c"
  __retres2 = (XML_LChar const *)((void *)0);
  return_label:
  {
  __CrestReturn(67357);
# 1934 "xmlparse.c"
  return (__retres2);
  }
}
}
# 1985 "xmlparse.c"
XML_LChar const *XML_ExpatVersion(void)
{
  XML_LChar const *__retres1 ;

  {
  __CrestCall(67358, 756);
# 1999 "xmlparse.c"
  __retres1 = "expat_2.1.0";
  {
  __CrestReturn(67359);
# 1985 "xmlparse.c"
  return (__retres1);
  }
}
}
# 2005 "xmlparse.c"
XML_Expat_Version XML_ExpatVersionInfo(void)
{
  XML_Expat_Version version ;

  {
  __CrestCall(67360, 757);

  __CrestLoad(67361, (unsigned long )0, (long long )2);
  __CrestStore(67362, (unsigned long )(& version.major));
# 2010 "xmlparse.c"
  version.major = 2;
  __CrestLoad(67363, (unsigned long )0, (long long )1);
  __CrestStore(67364, (unsigned long )(& version.minor));
# 2011 "xmlparse.c"
  version.minor = 1;
  __CrestLoad(67365, (unsigned long )0, (long long )0);
  __CrestStore(67366, (unsigned long )(& version.micro));
# 2012 "xmlparse.c"
  version.micro = 0;
  {
  __CrestReturn(67367);
# 2014 "xmlparse.c"
  return (version);
  }
}
}
# 2020 "xmlparse.c"
static XML_Feature const features[6] = { {(enum XML_FeatureEnum )6, "sizeof(XML_Char)", (long )sizeof(XML_Char )},
        {(enum XML_FeatureEnum )7, "sizeof(XML_LChar)", (long )sizeof(XML_LChar )},
        {(enum XML_FeatureEnum )3, "XML_DTD", 0L},
        {(enum XML_FeatureEnum )4, "XML_CONTEXT_BYTES", 1024L},
        {(enum XML_FeatureEnum )8, "XML_NS", 0L},
        {(enum XML_FeatureEnum )0, (XML_LChar const *)((void *)0), 0L}};
# 2017 "xmlparse.c"
XML_Feature const *XML_GetFeatureList(void)
{
  XML_Feature const *__retres1 ;

  {
  __CrestCall(67368, 758);
# 2053 "xmlparse.c"
  __retres1 = features;
  {
  __CrestReturn(67369);
# 2017 "xmlparse.c"
  return (__retres1);
  }
}
}
# 2061 "xmlparse.c"
static XML_Bool storeRawNames(XML_Parser parser )
{
  TAG *tag ;
  int bufSize ;
  int nameLen ;
  char *rawNameBuf ;
  char *temp ;
  void *tmp ;
  void *(*mem_8)(void *ptr , size_t size ) ;
  XML_Bool __retres9 ;

  {
  __CrestCall(67370, 759);
# 2064 "xmlparse.c"
  tag = parser->m_tagStack;
  {
# 2065 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(67373, (unsigned long )(& tag), (long long )((unsigned long )tag));
    __CrestLoad(67372, (unsigned long )0, (long long )0);
    __CrestApply2(67371, 13, (long long )(tag != 0));
# 2065 "xmlparse.c"
    if (tag != 0) {
      __CrestBranch(67374, 43666, 1);

    } else {
      __CrestBranch(67375, 43667, 0);
# 2065 "xmlparse.c"
      goto while_break;
    }
    }
    __CrestLoad(67380, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestLoad(67379, (unsigned long )(& tag->name.strLen), (long long )tag->name.strLen);
    __CrestLoad(67378, (unsigned long )0, (long long )1);
    __CrestApply2(67377, 0, (long long )(tag->name.strLen + 1));
    __CrestApply2(67376, 2, (long long )(sizeof(XML_Char ) * (unsigned long )(tag->name.strLen + 1)));
    __CrestStore(67381, (unsigned long )(& nameLen));
# 2067 "xmlparse.c"
    nameLen = (int )(sizeof(XML_Char ) * (unsigned long )(tag->name.strLen + 1));
# 2068 "xmlparse.c"
    rawNameBuf = tag->buf + nameLen;
    {
    __CrestLoad(67384, (unsigned long )(& tag->rawName), (long long )((unsigned long )tag->rawName));
    __CrestLoad(67383, (unsigned long )(& rawNameBuf), (long long )((unsigned long )rawNameBuf));
    __CrestApply2(67382, 12, (long long )((unsigned long )tag->rawName == (unsigned long )rawNameBuf));
# 2074 "xmlparse.c"
    if ((unsigned long )tag->rawName == (unsigned long )rawNameBuf) {
      __CrestBranch(67385, 43670, 1);
# 2075 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(67386, 43671, 0);

    }
    }
    __CrestLoad(67393, (unsigned long )(& nameLen), (long long )nameLen);
    __CrestLoad(67392, (unsigned long )(& tag->rawNameLength), (long long )tag->rawNameLength);
    __CrestLoad(67391, (unsigned long )0, (long long )(sizeof(XML_Char ) - 1UL));
    __CrestApply2(67390, 0, (long long )((unsigned long )tag->rawNameLength + (sizeof(XML_Char ) - 1UL)));
    __CrestLoad(67389, (unsigned long )0, (long long )(~ (sizeof(XML_Char ) - 1UL)));
    __CrestApply2(67388, 5, (long long )(((unsigned long )tag->rawNameLength + (sizeof(XML_Char ) - 1UL)) & ~ (sizeof(XML_Char ) - 1UL)));
    __CrestApply2(67387, 0, (long long )((unsigned long )nameLen + (((unsigned long )tag->rawNameLength + (sizeof(XML_Char ) - 1UL)) & ~ (sizeof(XML_Char ) - 1UL))));
    __CrestStore(67394, (unsigned long )(& bufSize));
# 2079 "xmlparse.c"
    bufSize = (int )((unsigned long )nameLen + (((unsigned long )tag->rawNameLength + (sizeof(XML_Char ) - 1UL)) & ~ (sizeof(XML_Char ) - 1UL)));
    {
    __CrestLoad(67399, (unsigned long )(& bufSize), (long long )bufSize);
    __CrestLoad(67398, (unsigned long )(& tag->bufEnd), (long long )((unsigned long )tag->bufEnd));
    __CrestLoad(67397, (unsigned long )(& tag->buf), (long long )((unsigned long )tag->buf));
    __CrestApply2(67396, 18, (long long )(tag->bufEnd - tag->buf));
    __CrestApply2(67395, 14, (long long )((long )bufSize > tag->bufEnd - tag->buf));
# 2080 "xmlparse.c"
    if ((long )bufSize > tag->bufEnd - tag->buf) {
      __CrestBranch(67400, 43674, 1);
# 2081 "xmlparse.c"
      mem_8 = parser->m_mem.realloc_fcn;
      __CrestLoad(67402, (unsigned long )(& bufSize), (long long )bufSize);
# 2081 "xmlparse.c"
      tmp = (*mem_8)((void *)tag->buf, (size_t )bufSize);
      __CrestClearStack(67403);
# 2081 "xmlparse.c"
      temp = (char *)tmp;
      {
      __CrestLoad(67406, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(67405, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(67404, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 2082 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(67407, 43676, 1);
        __CrestLoad(67409, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(67410, (unsigned long )(& __retres9));
# 2083 "xmlparse.c"
        __retres9 = (XML_Bool )0;
# 2083 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67408, 43678, 0);

      }
      }
      {
      __CrestLoad(67413, (unsigned long )(& tag->name.str), (long long )((unsigned long )tag->name.str));
      __CrestLoad(67412, (unsigned long )(& tag->buf), (long long )((unsigned long )tag->buf));
      __CrestApply2(67411, 12, (long long )((unsigned long )tag->name.str == (unsigned long )tag->buf));
# 2087 "xmlparse.c"
      if ((unsigned long )tag->name.str == (unsigned long )tag->buf) {
        __CrestBranch(67414, 43680, 1);
# 2088 "xmlparse.c"
        tag->name.str = (XML_Char const *)temp;
      } else {
        __CrestBranch(67415, 43681, 0);

      }
      }
      {
      __CrestLoad(67418, (unsigned long )(& tag->name.localPart), (long long )((unsigned long )tag->name.localPart));
      __CrestLoad(67417, (unsigned long )0, (long long )0);
      __CrestApply2(67416, 13, (long long )(tag->name.localPart != 0));
# 2092 "xmlparse.c"
      if (tag->name.localPart != 0) {
        __CrestBranch(67419, 43683, 1);
# 2093 "xmlparse.c"
        tag->name.localPart = (XML_Char const *)(temp + (tag->name.localPart - (XML_Char const *)tag->buf));
      } else {
        __CrestBranch(67420, 43684, 0);

      }
      }
# 2095 "xmlparse.c"
      tag->buf = temp;
# 2096 "xmlparse.c"
      tag->bufEnd = temp + bufSize;
# 2097 "xmlparse.c"
      rawNameBuf = temp + nameLen;
    } else {
      __CrestBranch(67401, 43686, 0);

    }
    }
    __CrestLoad(67421, (unsigned long )(& tag->rawNameLength), (long long )tag->rawNameLength);
# 2099 "xmlparse.c"
    sym_memcpy(rawNameBuf, tag->rawName, tag->rawNameLength);
    __CrestClearStack(67422);
# 2100 "xmlparse.c"
    tag->rawName = (char const *)rawNameBuf;
# 2101 "xmlparse.c"
    tag = tag->parent;
  }
  while_break: ;
  }
  __CrestLoad(67423, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(67424, (unsigned long )(& __retres9));
# 2103 "xmlparse.c"
  __retres9 = (XML_Bool )1;
  return_label:
  {
  __CrestLoad(67425, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(67426);
# 2061 "xmlparse.c"
  return (__retres9);
  }
}
}
# 2106 "xmlparse.c"
static enum XML_Error contentProcessor(XML_Parser parser , char const *start , char const *end ,
                                       char const **endPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  XML_Bool tmp___0 ;
  enum XML_Error __retres8 ;

  {
  __CrestCall(67427, 760);

  __CrestLoad(67428, (unsigned long )0, (long long )0);
  __CrestLoad(67430, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(67429, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 2112 "xmlparse.c"
  tmp = doContent(parser, 0, parser->m_encoding, start, end, endPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(67432, (long long )tmp);
  __CrestStore(67431, (unsigned long )(& tmp));
  __CrestLoad(67433, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(67434, (unsigned long )(& result));
# 2112 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(67437, (unsigned long )(& result), (long long )result);
  __CrestLoad(67436, (unsigned long )0, (long long )0U);
  __CrestApply2(67435, 12, (long long )((unsigned int )result == 0U));
# 2114 "xmlparse.c"
  if ((unsigned int )result == 0U) {
    __CrestBranch(67438, 43693, 1);
# 2115 "xmlparse.c"
    tmp___0 = storeRawNames(parser);
    __CrestHandleReturn(67441, (long long )tmp___0);
    __CrestStore(67440, (unsigned long )(& tmp___0));
    {
    __CrestLoad(67444, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(67443, (unsigned long )0, (long long )0);
    __CrestApply2(67442, 13, (long long )(tmp___0 != 0));
# 2115 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(67445, 43695, 1);

    } else {
      __CrestBranch(67446, 43696, 0);
      __CrestLoad(67447, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(67448, (unsigned long )(& __retres8));
# 2116 "xmlparse.c"
      __retres8 = (enum XML_Error )1;
# 2116 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(67439, 43698, 0);

  }
  }
  __CrestLoad(67449, (unsigned long )(& result), (long long )result);
  __CrestStore(67450, (unsigned long )(& __retres8));
# 2118 "xmlparse.c"
  __retres8 = result;
  return_label:
  {
  __CrestLoad(67451, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(67452);
# 2106 "xmlparse.c"
  return (__retres8);
  }
}
}
# 2121 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor(XML_Parser parser , char const *start ,
                                                  char const *end , char const **endPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  enum XML_Error tmp___0 ;
  enum XML_Error __retres8 ;

  {
  __CrestCall(67453, 761);
# 2127 "xmlparse.c"
  tmp = initializeEncoding(parser);
  __CrestHandleReturn(67455, (long long )tmp);
  __CrestStore(67454, (unsigned long )(& tmp));
  __CrestLoad(67456, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(67457, (unsigned long )(& result));
# 2127 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(67460, (unsigned long )(& result), (long long )result);
  __CrestLoad(67459, (unsigned long )0, (long long )0U);
  __CrestApply2(67458, 13, (long long )((unsigned int )result != 0U));
# 2128 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(67461, 43703, 1);
    __CrestLoad(67463, (unsigned long )(& result), (long long )result);
    __CrestStore(67464, (unsigned long )(& __retres8));
# 2129 "xmlparse.c"
    __retres8 = result;
# 2129 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67462, 43705, 0);

  }
  }
# 2130 "xmlparse.c"
  parser->m_processor = & externalEntityInitProcessor2;
# 2131 "xmlparse.c"
  tmp___0 = externalEntityInitProcessor2(parser, start, end, endPtr);
  __CrestHandleReturn(67466, (long long )tmp___0);
  __CrestStore(67465, (unsigned long )(& tmp___0));
  __CrestLoad(67467, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(67468, (unsigned long )(& __retres8));
# 2131 "xmlparse.c"
  __retres8 = tmp___0;
  return_label:
  {
  __CrestLoad(67469, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(67470);
# 2121 "xmlparse.c"
  return (__retres8);
  }
}
}
# 2134 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor2(XML_Parser parser , char const *start ,
                                                   char const *end , char const **endPtr )
{
  char const *next ;
  int tok ;
  int tmp ;
  enum XML_Error tmp___0 ;
  ENCODING const *mem_9 ;
  SCANNER mem_10 ;
  enum XML_Error __retres11 ;

  {
  __CrestCall(67471, 762);
# 2140 "xmlparse.c"
  next = start;
# 2141 "xmlparse.c"
  mem_9 = parser->m_encoding;
# 2141 "xmlparse.c"
  mem_10 = mem_9->scanners[1];
# 2141 "xmlparse.c"
  tmp = (*mem_10)(parser->m_encoding, start, end, & next);
  __CrestHandleReturn(67473, (long long )tmp);
  __CrestStore(67472, (unsigned long )(& tmp));
  __CrestLoad(67474, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(67475, (unsigned long )(& tok));
# 2141 "xmlparse.c"
  tok = tmp;
  {
  {
  __CrestLoad(67478, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67477, (unsigned long )0, (long long )14);
  __CrestApply2(67476, 12, (long long )(tok == 14));
# 2143 "xmlparse.c"
  if (tok == 14) {
    __CrestBranch(67479, 43712, 1);
# 2143 "xmlparse.c"
    goto case_14;
  } else {
    __CrestBranch(67480, 43713, 0);

  }
  }
  {
  __CrestLoad(67483, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67482, (unsigned long )0, (long long )-1);
  __CrestApply2(67481, 12, (long long )(tok == -1));
# 2155 "xmlparse.c"
  if (tok == -1) {
    __CrestBranch(67484, 43715, 1);
# 2155 "xmlparse.c"
    goto case_neg_1;
  } else {
    __CrestBranch(67485, 43716, 0);

  }
  }
  {
  __CrestLoad(67488, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67487, (unsigned long )0, (long long )-2);
  __CrestApply2(67486, 12, (long long )(tok == -2));
# 2162 "xmlparse.c"
  if (tok == -2) {
    __CrestBranch(67489, 43718, 1);
# 2162 "xmlparse.c"
    goto case_neg_2;
  } else {
    __CrestBranch(67490, 43719, 0);

  }
  }
# 2142 "xmlparse.c"
  goto switch_break;
  case_14:
  {
  __CrestLoad(67493, (unsigned long )(& next), (long long )((unsigned long )next));
  __CrestLoad(67492, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(67491, 12, (long long )((unsigned long )next == (unsigned long )end));
# 2149 "xmlparse.c"
  if ((unsigned long )next == (unsigned long )end) {
    __CrestBranch(67494, 43722, 1);
    {
    __CrestLoad(67498, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestLoad(67497, (unsigned long )0, (long long )0);
    __CrestApply2(67496, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 2149 "xmlparse.c"
    if (parser->m_parsingStatus.finalBuffer == 0) {
      __CrestBranch(67499, 43723, 1);
# 2150 "xmlparse.c"
      *endPtr = next;
      __CrestLoad(67501, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67502, (unsigned long )(& __retres11));
# 2151 "xmlparse.c"
      __retres11 = (enum XML_Error )0;
# 2151 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67500, 43726, 0);

    }
    }
  } else {
    __CrestBranch(67495, 43727, 0);

  }
  }
# 2153 "xmlparse.c"
  start = next;
# 2154 "xmlparse.c"
  goto switch_break;
  case_neg_1:
  {
  __CrestLoad(67505, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestLoad(67504, (unsigned long )0, (long long )0);
  __CrestApply2(67503, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 2156 "xmlparse.c"
  if (parser->m_parsingStatus.finalBuffer == 0) {
    __CrestBranch(67506, 43731, 1);
# 2157 "xmlparse.c"
    *endPtr = start;
    __CrestLoad(67508, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(67509, (unsigned long )(& __retres11));
# 2158 "xmlparse.c"
    __retres11 = (enum XML_Error )0;
# 2158 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67507, 43734, 0);

  }
  }
# 2160 "xmlparse.c"
  parser->m_eventPtr = start;
  __CrestLoad(67510, (unsigned long )0, (long long )((enum XML_Error )5));
  __CrestStore(67511, (unsigned long )(& __retres11));
# 2161 "xmlparse.c"
  __retres11 = (enum XML_Error )5;
# 2161 "xmlparse.c"
  goto return_label;
  case_neg_2:
  {
  __CrestLoad(67514, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestLoad(67513, (unsigned long )0, (long long )0);
  __CrestApply2(67512, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 2163 "xmlparse.c"
  if (parser->m_parsingStatus.finalBuffer == 0) {
    __CrestBranch(67515, 43739, 1);
# 2164 "xmlparse.c"
    *endPtr = start;
    __CrestLoad(67517, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(67518, (unsigned long )(& __retres11));
# 2165 "xmlparse.c"
    __retres11 = (enum XML_Error )0;
# 2165 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67516, 43742, 0);

  }
  }
# 2167 "xmlparse.c"
  parser->m_eventPtr = start;
  __CrestLoad(67519, (unsigned long )0, (long long )((enum XML_Error )6));
  __CrestStore(67520, (unsigned long )(& __retres11));
# 2168 "xmlparse.c"
  __retres11 = (enum XML_Error )6;
# 2168 "xmlparse.c"
  goto return_label;
  switch_break: ;
  }
# 2170 "xmlparse.c"
  parser->m_processor = & externalEntityInitProcessor3;
# 2171 "xmlparse.c"
  tmp___0 = externalEntityInitProcessor3(parser, start, end, endPtr);
  __CrestHandleReturn(67522, (long long )tmp___0);
  __CrestStore(67521, (unsigned long )(& tmp___0));
  __CrestLoad(67523, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(67524, (unsigned long )(& __retres11));
# 2171 "xmlparse.c"
  __retres11 = tmp___0;
  return_label:
  {
  __CrestLoad(67525, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(67526);
# 2134 "xmlparse.c"
  return (__retres11);
  }
}
}
# 2174 "xmlparse.c"
static enum XML_Error externalEntityInitProcessor3(XML_Parser parser , char const *start ,
                                                   char const *end , char const **endPtr )
{
  int tok ;
  char const *next ;
  enum XML_Error result ;
  enum XML_Error tmp ;
  ENCODING const *mem_9 ;
  SCANNER mem_10 ;
  enum XML_Error __retres11 ;

  {
  __CrestCall(67527, 763);
# 2181 "xmlparse.c"
  next = start;
# 2182 "xmlparse.c"
  parser->m_eventPtr = start;
# 2183 "xmlparse.c"
  mem_9 = parser->m_encoding;
# 2183 "xmlparse.c"
  mem_10 = mem_9->scanners[1];
# 2183 "xmlparse.c"
  tok = (*mem_10)(parser->m_encoding, start, end, & next);
  __CrestHandleReturn(67529, (long long )tok);
  __CrestStore(67528, (unsigned long )(& tok));
# 2184 "xmlparse.c"
  parser->m_eventEndPtr = next;
  {
  {
  __CrestLoad(67532, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67531, (unsigned long )0, (long long )12);
  __CrestApply2(67530, 12, (long long )(tok == 12));
# 2187 "xmlparse.c"
  if (tok == 12) {
    __CrestBranch(67533, 43753, 1);
# 2187 "xmlparse.c"
    goto case_12;
  } else {
    __CrestBranch(67534, 43754, 0);

  }
  }
  {
  __CrestLoad(67537, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67536, (unsigned long )0, (long long )-1);
  __CrestApply2(67535, 12, (long long )(tok == -1));
# 2204 "xmlparse.c"
  if (tok == -1) {
    __CrestBranch(67538, 43756, 1);
# 2204 "xmlparse.c"
    goto case_neg_1;
  } else {
    __CrestBranch(67539, 43757, 0);

  }
  }
  {
  __CrestLoad(67542, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(67541, (unsigned long )0, (long long )-2);
  __CrestApply2(67540, 12, (long long )(tok == -2));
# 2210 "xmlparse.c"
  if (tok == -2) {
    __CrestBranch(67543, 43759, 1);
# 2210 "xmlparse.c"
    goto case_neg_2;
  } else {
    __CrestBranch(67544, 43760, 0);

  }
  }
# 2186 "xmlparse.c"
  goto switch_break;
  case_12:
  __CrestLoad(67545, (unsigned long )0, (long long )1);
# 2190 "xmlparse.c"
  result = processXmlDecl(parser, 1, start, next);
  __CrestHandleReturn(67547, (long long )result);
  __CrestStore(67546, (unsigned long )(& result));
  {
  __CrestLoad(67550, (unsigned long )(& result), (long long )result);
  __CrestLoad(67549, (unsigned long )0, (long long )0U);
  __CrestApply2(67548, 13, (long long )((unsigned int )result != 0U));
# 2191 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(67551, 43764, 1);
    __CrestLoad(67553, (unsigned long )(& result), (long long )result);
    __CrestStore(67554, (unsigned long )(& __retres11));
# 2192 "xmlparse.c"
    __retres11 = result;
# 2192 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67552, 43766, 0);

  }
  }
  {
  {
  __CrestLoad(67557, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(67556, (unsigned long )0, (long long )3U);
  __CrestApply2(67555, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 2194 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
    __CrestBranch(67558, 43769, 1);
# 2194 "xmlparse.c"
    goto case_3;
  } else {
    __CrestBranch(67559, 43770, 0);

  }
  }
  {
  __CrestLoad(67562, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(67561, (unsigned long )0, (long long )2U);
  __CrestApply2(67560, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 2197 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(67563, 43772, 1);
# 2197 "xmlparse.c"
    goto case_2;
  } else {
    __CrestBranch(67564, 43773, 0);

  }
  }
# 2199 "xmlparse.c"
  goto switch_default;
  case_3:
# 2195 "xmlparse.c"
  *endPtr = next;
  __CrestLoad(67565, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(67566, (unsigned long )(& __retres11));
# 2196 "xmlparse.c"
  __retres11 = (enum XML_Error )0;
# 2196 "xmlparse.c"
  goto return_label;
  case_2:
  __CrestLoad(67567, (unsigned long )0, (long long )((enum XML_Error )35));
  __CrestStore(67568, (unsigned long )(& __retres11));
# 2198 "xmlparse.c"
  __retres11 = (enum XML_Error )35;
# 2198 "xmlparse.c"
  goto return_label;
  switch_default:
# 2200 "xmlparse.c"
  start = next;
  switch_break___0: ;
  }
# 2203 "xmlparse.c"
  goto switch_break;
  case_neg_1:
  {
  __CrestLoad(67571, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestLoad(67570, (unsigned long )0, (long long )0);
  __CrestApply2(67569, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 2205 "xmlparse.c"
  if (parser->m_parsingStatus.finalBuffer == 0) {
    __CrestBranch(67572, 43784, 1);
# 2206 "xmlparse.c"
    *endPtr = start;
    __CrestLoad(67574, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(67575, (unsigned long )(& __retres11));
# 2207 "xmlparse.c"
    __retres11 = (enum XML_Error )0;
# 2207 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67573, 43787, 0);

  }
  }
  __CrestLoad(67576, (unsigned long )0, (long long )((enum XML_Error )5));
  __CrestStore(67577, (unsigned long )(& __retres11));
# 2209 "xmlparse.c"
  __retres11 = (enum XML_Error )5;
# 2209 "xmlparse.c"
  goto return_label;
  case_neg_2:
  {
  __CrestLoad(67580, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestLoad(67579, (unsigned long )0, (long long )0);
  __CrestApply2(67578, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 2211 "xmlparse.c"
  if (parser->m_parsingStatus.finalBuffer == 0) {
    __CrestBranch(67581, 43791, 1);
# 2212 "xmlparse.c"
    *endPtr = start;
    __CrestLoad(67583, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(67584, (unsigned long )(& __retres11));
# 2213 "xmlparse.c"
    __retres11 = (enum XML_Error )0;
# 2213 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(67582, 43794, 0);

  }
  }
  __CrestLoad(67585, (unsigned long )0, (long long )((enum XML_Error )6));
  __CrestStore(67586, (unsigned long )(& __retres11));
# 2215 "xmlparse.c"
  __retres11 = (enum XML_Error )6;
# 2215 "xmlparse.c"
  goto return_label;
  switch_break: ;
  }
# 2217 "xmlparse.c"
  parser->m_processor = & externalEntityContentProcessor;
  __CrestLoad(67587, (unsigned long )0, (long long )1);
  __CrestStore(67588, (unsigned long )(& parser->m_tagLevel));
# 2218 "xmlparse.c"
  parser->m_tagLevel = 1;
# 2219 "xmlparse.c"
  tmp = externalEntityContentProcessor(parser, start, end, endPtr);
  __CrestHandleReturn(67590, (long long )tmp);
  __CrestStore(67589, (unsigned long )(& tmp));
  __CrestLoad(67591, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(67592, (unsigned long )(& __retres11));
# 2219 "xmlparse.c"
  __retres11 = tmp;
  return_label:
  {
  __CrestLoad(67593, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(67594);
# 2174 "xmlparse.c"
  return (__retres11);
  }
}
}
# 2222 "xmlparse.c"
static enum XML_Error externalEntityContentProcessor(XML_Parser parser , char const *start ,
                                                     char const *end , char const **endPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  XML_Bool tmp___0 ;
  enum XML_Error __retres8 ;

  {
  __CrestCall(67595, 764);

  __CrestLoad(67596, (unsigned long )0, (long long )1);
  __CrestLoad(67598, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(67597, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 2228 "xmlparse.c"
  tmp = doContent(parser, 1, parser->m_encoding, start, end, endPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(67600, (long long )tmp);
  __CrestStore(67599, (unsigned long )(& tmp));
  __CrestLoad(67601, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(67602, (unsigned long )(& result));
# 2228 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(67605, (unsigned long )(& result), (long long )result);
  __CrestLoad(67604, (unsigned long )0, (long long )0U);
  __CrestApply2(67603, 12, (long long )((unsigned int )result == 0U));
# 2230 "xmlparse.c"
  if ((unsigned int )result == 0U) {
    __CrestBranch(67606, 43803, 1);
# 2231 "xmlparse.c"
    tmp___0 = storeRawNames(parser);
    __CrestHandleReturn(67609, (long long )tmp___0);
    __CrestStore(67608, (unsigned long )(& tmp___0));
    {
    __CrestLoad(67612, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(67611, (unsigned long )0, (long long )0);
    __CrestApply2(67610, 13, (long long )(tmp___0 != 0));
# 2231 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(67613, 43805, 1);

    } else {
      __CrestBranch(67614, 43806, 0);
      __CrestLoad(67615, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(67616, (unsigned long )(& __retres8));
# 2232 "xmlparse.c"
      __retres8 = (enum XML_Error )1;
# 2232 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(67607, 43808, 0);

  }
  }
  __CrestLoad(67617, (unsigned long )(& result), (long long )result);
  __CrestStore(67618, (unsigned long )(& __retres8));
# 2234 "xmlparse.c"
  __retres8 = result;
  return_label:
  {
  __CrestLoad(67619, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(67620);
# 2222 "xmlparse.c"
  return (__retres8);
  }
}
}
# 2237 "xmlparse.c"
static enum XML_Error doContent(XML_Parser parser , int startTagLevel , ENCODING const *enc ,
                                char const *s , char const *end , char const **nextPtr ,
                                XML_Bool haveMore )
{
  DTD *dtd ;
  char const **eventPP ;
  char const **eventEndPP ;
  char const *next ;
  int tok ;
  int tmp ;
  XML_Char c ;
  XML_Char const *name ;
  ENTITY *entity ;
  XML_Char ch ;
  int tmp___0 ;
  XML_Char *tmp___1 ;
  NAMED *tmp___2 ;
  enum XML_Error result ;
  XML_Char const *context ;
  int tmp___3 ;
  TAG *tag ;
  enum XML_Error result___0 ;
  XML_Char *toPtr ;
  void *tmp___4 ;
  void *tmp___5 ;
  char const *rawNameEnd ;
  char const *fromPtr ;
  int bufSize ;
  int convLen ;
  char *temp ;
  void *tmp___6 ;
  char const *rawName ;
  enum XML_Error result___1 ;
  BINDING *bindings ;
  XML_Bool noElmHandlers ;
  TAG_NAME name___0 ;
  int tmp___7 ;
  XML_Char *tmp___8 ;
  BINDING *b ;
  enum XML_Error tmp___9 ;
  int len ;
  char const *rawName___0 ;
  TAG *tag___0 ;
  int tmp___10 ;
  XML_Char const *localPart ;
  XML_Char const *prefix ;
  XML_Char *uri ;
  XML_Char *tmp___11 ;
  XML_Char const *tmp___12 ;
  XML_Char *tmp___13 ;
  XML_Char *tmp___14 ;
  XML_Char const *tmp___15 ;
  BINDING *b___0 ;
  enum XML_Error tmp___16 ;
  int n ;
  int tmp___17 ;
  XML_Char buf[4] ;
  int tmp___18 ;
  XML_Char c___0 ;
  enum XML_Error result___2 ;
  ICHAR *dataPtr ;
  void (*charDataHandler)(void *userData , XML_Char const *s , int len ) ;
  ICHAR *dataPtr___0 ;
  int tmp___19 ;
  int tmp___20 ;
  OPEN_INTERNAL_ENTITY *mem_69 ;
  OPEN_INTERNAL_ENTITY *mem_70 ;
  SCANNER mem_71 ;
  void (*mem_72)(void *userData , XML_Char const *s , int len ) ;
  int (*mem_73)(ENCODING const * , char const * , char const * ) ;
  void (*mem_74)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_75)(void *userData , XML_Char const *entityName , int is_parameter_entity ) ;
  void (*mem_76)(void *userData , XML_Char const *entityName , int is_parameter_entity ) ;
  int (*mem_77)(XML_Parser parser , XML_Char const *context , XML_Char const *base ,
                XML_Char const *systemId , XML_Char const *publicId ) ;
  TAG *mem_78 ;
  void *(*mem_79)(size_t size ) ;
  void *(*mem_80)(size_t size ) ;
  void (*mem_81)(void *ptr ) ;
  int (*mem_82)(ENCODING const * , char const * ) ;
  void (*mem_83)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                 char **toP , char const *toLim ) ;
  void *(*mem_84)(void *ptr , size_t size ) ;
  void (*mem_85)(void *userData , XML_Char const *name , XML_Char const **atts ) ;
  int (*mem_86)(ENCODING const * , char const * ) ;
  void (*mem_87)(void *userData , XML_Char const *name , XML_Char const **atts ) ;
  void (*mem_88)(void *userData , XML_Char const *name ) ;
  void (*mem_89)(void *userData , XML_Char const *prefix ) ;
  struct prefix *mem_90 ;
  struct prefix *mem_91 ;
  int (*mem_92)(ENCODING const * , char const * ) ;
  void (*mem_93)(void *userData , XML_Char const *name ) ;
  void (*mem_94)(void *userData , XML_Char const *prefix ) ;
  struct prefix *mem_95 ;
  BINDING *mem_96 ;
  struct prefix *mem_97 ;
  int (*mem_98)(ENCODING const *enc , char const *ptr ) ;
  void (*mem_99)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_100)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_101)(void *userData ) ;
  void (*mem_102)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                  char **toP , char const *toLim ) ;
  void (*mem_103)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_104)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_105)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                  char **toP , char const *toLim ) ;
  enum XML_Error __retres106 ;

  {
  __CrestCall(67623, 765);
  __CrestStore(67622, (unsigned long )(& haveMore));
  __CrestStore(67621, (unsigned long )(& startTagLevel));
# 2247 "xmlparse.c"
  dtd = parser->m_dtd;
  {
  __CrestLoad(67626, (unsigned long )(& enc), (long long )((unsigned long )enc));
  __CrestLoad(67625, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
  __CrestApply2(67624, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 2251 "xmlparse.c"
  if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
    __CrestBranch(67627, 43813, 1);
# 2252 "xmlparse.c"
    eventPP = & parser->m_eventPtr;
# 2253 "xmlparse.c"
    eventEndPP = & parser->m_eventEndPtr;
  } else {
    __CrestBranch(67628, 43814, 0);
# 2256 "xmlparse.c"
    mem_69 = parser->m_openInternalEntities;
# 2256 "xmlparse.c"
    eventPP = & mem_69->internalEventPtr;
# 2257 "xmlparse.c"
    mem_70 = parser->m_openInternalEntities;
# 2257 "xmlparse.c"
    eventEndPP = & mem_70->internalEventEndPtr;
  }
  }
# 2259 "xmlparse.c"
  *eventPP = s;
  {
# 2261 "xmlparse.c"
  while (1) {
    while_continue: ;
# 2262 "xmlparse.c"
    next = s;
# 2263 "xmlparse.c"
    mem_71 = enc->scanners[1];
# 2263 "xmlparse.c"
    tmp = (*mem_71)(enc, s, end, & next);
    __CrestHandleReturn(67630, (long long )tmp);
    __CrestStore(67629, (unsigned long )(& tmp));
    __CrestLoad(67631, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(67632, (unsigned long )(& tok));
# 2263 "xmlparse.c"
    tok = tmp;
# 2264 "xmlparse.c"
    *eventEndPP = next;
    {
    {
    __CrestLoad(67635, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67634, (unsigned long )0, (long long )-3);
    __CrestApply2(67633, 12, (long long )(tok == -3));
# 2266 "xmlparse.c"
    if (tok == -3) {
      __CrestBranch(67636, 43822, 1);
# 2266 "xmlparse.c"
      goto case_neg_3;
    } else {
      __CrestBranch(67637, 43823, 0);

    }
    }
    {
    __CrestLoad(67640, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67639, (unsigned long )0, (long long )-4);
    __CrestApply2(67638, 12, (long long )(tok == -4));
# 2287 "xmlparse.c"
    if (tok == -4) {
      __CrestBranch(67641, 43825, 1);
# 2287 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(67642, 43826, 0);

    }
    }
    {
    __CrestLoad(67645, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67644, (unsigned long )0, (long long )0);
    __CrestApply2(67643, 12, (long long )(tok == 0));
# 2299 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(67646, 43828, 1);
# 2299 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(67647, 43829, 0);

    }
    }
    {
    __CrestLoad(67650, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67649, (unsigned long )0, (long long )-1);
    __CrestApply2(67648, 12, (long long )(tok == -1));
# 2302 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(67651, 43831, 1);
# 2302 "xmlparse.c"
      goto case_neg_1;
    } else {
      __CrestBranch(67652, 43832, 0);

    }
    }
    {
    __CrestLoad(67655, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67654, (unsigned long )0, (long long )-2);
    __CrestApply2(67653, 12, (long long )(tok == -2));
# 2308 "xmlparse.c"
    if (tok == -2) {
      __CrestBranch(67656, 43834, 1);
# 2308 "xmlparse.c"
      goto case_neg_2;
    } else {
      __CrestBranch(67657, 43835, 0);

    }
    }
    {
    __CrestLoad(67660, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67659, (unsigned long )0, (long long )9);
    __CrestApply2(67658, 12, (long long )(tok == 9));
# 2314 "xmlparse.c"
    if (tok == 9) {
      __CrestBranch(67661, 43837, 1);
# 2314 "xmlparse.c"
      goto case_9;
    } else {
      __CrestBranch(67662, 43838, 0);

    }
    }
    {
    __CrestLoad(67665, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67664, (unsigned long )0, (long long )1);
    __CrestApply2(67663, 12, (long long )(tok == 1));
# 2390 "xmlparse.c"
    if (tok == 1) {
      __CrestBranch(67666, 43840, 1);
# 2390 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(67667, 43841, 0);

    }
    }
    {
    __CrestLoad(67670, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67669, (unsigned long )0, (long long )2);
    __CrestApply2(67668, 12, (long long )(tok == 2));
# 2390 "xmlparse.c"
    if (tok == 2) {
      __CrestBranch(67671, 43843, 1);
# 2390 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(67672, 43844, 0);

    }
    }
    {
    __CrestLoad(67675, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67674, (unsigned long )0, (long long )3);
    __CrestApply2(67673, 12, (long long )(tok == 3));
# 2459 "xmlparse.c"
    if (tok == 3) {
      __CrestBranch(67676, 43846, 1);
# 2459 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(67677, 43847, 0);

    }
    }
    {
    __CrestLoad(67680, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67679, (unsigned long )0, (long long )4);
    __CrestApply2(67678, 12, (long long )(tok == 4));
# 2459 "xmlparse.c"
    if (tok == 4) {
      __CrestBranch(67681, 43849, 1);
# 2459 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(67682, 43850, 0);

    }
    }
    {
    __CrestLoad(67685, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67684, (unsigned long )0, (long long )5);
    __CrestApply2(67683, 12, (long long )(tok == 5));
# 2501 "xmlparse.c"
    if (tok == 5) {
      __CrestBranch(67686, 43852, 1);
# 2501 "xmlparse.c"
      goto case_5;
    } else {
      __CrestBranch(67687, 43853, 0);

    }
    }
    {
    __CrestLoad(67690, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67689, (unsigned long )0, (long long )10);
    __CrestApply2(67688, 12, (long long )(tok == 10));
# 2556 "xmlparse.c"
    if (tok == 10) {
      __CrestBranch(67691, 43855, 1);
# 2556 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(67692, 43856, 0);

    }
    }
    {
    __CrestLoad(67695, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67694, (unsigned long )0, (long long )12);
    __CrestApply2(67693, 12, (long long )(tok == 12));
# 2569 "xmlparse.c"
    if (tok == 12) {
      __CrestBranch(67696, 43858, 1);
# 2569 "xmlparse.c"
      goto case_12;
    } else {
      __CrestBranch(67697, 43859, 0);

    }
    }
    {
    __CrestLoad(67700, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67699, (unsigned long )0, (long long )7);
    __CrestApply2(67698, 12, (long long )(tok == 7));
# 2571 "xmlparse.c"
    if (tok == 7) {
      __CrestBranch(67701, 43861, 1);
# 2571 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(67702, 43862, 0);

    }
    }
    {
    __CrestLoad(67705, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67704, (unsigned long )0, (long long )8);
    __CrestApply2(67703, 12, (long long )(tok == 8));
# 2579 "xmlparse.c"
    if (tok == 8) {
      __CrestBranch(67706, 43864, 1);
# 2579 "xmlparse.c"
      goto case_8;
    } else {
      __CrestBranch(67707, 43865, 0);

    }
    }
    {
    __CrestLoad(67710, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67709, (unsigned long )0, (long long )-5);
    __CrestApply2(67708, 12, (long long )(tok == -5));
# 2611 "xmlparse.c"
    if (tok == -5) {
      __CrestBranch(67711, 43867, 1);
# 2611 "xmlparse.c"
      goto case_neg_5;
    } else {
      __CrestBranch(67712, 43868, 0);

    }
    }
    {
    __CrestLoad(67715, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67714, (unsigned long )0, (long long )6);
    __CrestApply2(67713, 12, (long long )(tok == 6));
# 2643 "xmlparse.c"
    if (tok == 6) {
      __CrestBranch(67716, 43870, 1);
# 2643 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(67717, 43871, 0);

    }
    }
    {
    __CrestLoad(67720, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67719, (unsigned long )0, (long long )11);
    __CrestApply2(67718, 12, (long long )(tok == 11));
# 2668 "xmlparse.c"
    if (tok == 11) {
      __CrestBranch(67721, 43873, 1);
# 2668 "xmlparse.c"
      goto case_11;
    } else {
      __CrestBranch(67722, 43874, 0);

    }
    }
    {
    __CrestLoad(67725, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(67724, (unsigned long )0, (long long )13);
    __CrestApply2(67723, 12, (long long )(tok == 13));
# 2672 "xmlparse.c"
    if (tok == 13) {
      __CrestBranch(67726, 43876, 1);
# 2672 "xmlparse.c"
      goto case_13;
    } else {
      __CrestBranch(67727, 43877, 0);

    }
    }
# 2676 "xmlparse.c"
    goto switch_default;
    case_neg_3:
    {
    __CrestLoad(67730, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(67729, (unsigned long )0, (long long )0);
    __CrestApply2(67728, 13, (long long )(haveMore != 0));
# 2267 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(67731, 43880, 1);
# 2268 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(67733, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67734, (unsigned long )(& __retres106));
# 2269 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2269 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67732, 43883, 0);

    }
    }
# 2271 "xmlparse.c"
    *eventEndPP = end;
    {
    __CrestLoad(67737, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
    __CrestLoad(67736, (unsigned long )0, (long long )0);
    __CrestApply2(67735, 13, (long long )(parser->m_characterDataHandler != 0));
# 2272 "xmlparse.c"
    if (parser->m_characterDataHandler != 0) {
      __CrestBranch(67738, 43886, 1);
      __CrestLoad(67740, (unsigned long )0, (long long )((XML_Char )10));
      __CrestStore(67741, (unsigned long )(& c));
# 2273 "xmlparse.c"
      c = (XML_Char )10;
# 2274 "xmlparse.c"
      mem_72 = parser->m_characterDataHandler;
      __CrestLoad(67742, (unsigned long )0, (long long )1);
# 2274 "xmlparse.c"
      (*mem_72)(parser->m_handlerArg, (XML_Char const *)(& c), 1);
      __CrestClearStack(67743);
    } else {
      __CrestBranch(67739, 43887, 0);
      {
      __CrestLoad(67746, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(67745, (unsigned long )0, (long long )0);
      __CrestApply2(67744, 13, (long long )(parser->m_defaultHandler != 0));
# 2276 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(67747, 43888, 1);
# 2277 "xmlparse.c"
        reportDefault(parser, enc, s, end);
        __CrestClearStack(67749);
      } else {
        __CrestBranch(67748, 43889, 0);

      }
      }
    }
    }
    {
    __CrestLoad(67752, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestLoad(67751, (unsigned long )0, (long long )0);
    __CrestApply2(67750, 12, (long long )(startTagLevel == 0));
# 2281 "xmlparse.c"
    if (startTagLevel == 0) {
      __CrestBranch(67753, 43891, 1);
      __CrestLoad(67755, (unsigned long )0, (long long )((enum XML_Error )3));
      __CrestStore(67756, (unsigned long )(& __retres106));
# 2282 "xmlparse.c"
      __retres106 = (enum XML_Error )3;
# 2282 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67754, 43893, 0);

    }
    }
    {
    __CrestLoad(67759, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(67758, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestApply2(67757, 13, (long long )(parser->m_tagLevel != startTagLevel));
# 2283 "xmlparse.c"
    if (parser->m_tagLevel != startTagLevel) {
      __CrestBranch(67760, 43895, 1);
      __CrestLoad(67762, (unsigned long )0, (long long )((enum XML_Error )13));
      __CrestStore(67763, (unsigned long )(& __retres106));
# 2284 "xmlparse.c"
      __retres106 = (enum XML_Error )13;
# 2284 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67761, 43897, 0);

    }
    }
# 2285 "xmlparse.c"
    *nextPtr = end;
    __CrestLoad(67764, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(67765, (unsigned long )(& __retres106));
# 2286 "xmlparse.c"
    __retres106 = (enum XML_Error )0;
# 2286 "xmlparse.c"
    goto return_label;
    case_neg_4:
    {
    __CrestLoad(67768, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(67767, (unsigned long )0, (long long )0);
    __CrestApply2(67766, 13, (long long )(haveMore != 0));
# 2288 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(67769, 43902, 1);
# 2289 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(67771, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67772, (unsigned long )(& __retres106));
# 2290 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2290 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67770, 43905, 0);

    }
    }
    {
    __CrestLoad(67775, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestLoad(67774, (unsigned long )0, (long long )0);
    __CrestApply2(67773, 14, (long long )(startTagLevel > 0));
# 2292 "xmlparse.c"
    if (startTagLevel > 0) {
      __CrestBranch(67776, 43907, 1);
      {
      __CrestLoad(67780, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
      __CrestLoad(67779, (unsigned long )(& startTagLevel), (long long )startTagLevel);
      __CrestApply2(67778, 13, (long long )(parser->m_tagLevel != startTagLevel));
# 2293 "xmlparse.c"
      if (parser->m_tagLevel != startTagLevel) {
        __CrestBranch(67781, 43908, 1);
        __CrestLoad(67783, (unsigned long )0, (long long )((enum XML_Error )13));
        __CrestStore(67784, (unsigned long )(& __retres106));
# 2294 "xmlparse.c"
        __retres106 = (enum XML_Error )13;
# 2294 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67782, 43910, 0);

      }
      }
# 2295 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(67785, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67786, (unsigned long )(& __retres106));
# 2296 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2296 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67777, 43914, 0);

    }
    }
    __CrestLoad(67787, (unsigned long )0, (long long )((enum XML_Error )3));
    __CrestStore(67788, (unsigned long )(& __retres106));
# 2298 "xmlparse.c"
    __retres106 = (enum XML_Error )3;
# 2298 "xmlparse.c"
    goto return_label;
    case_0:
# 2300 "xmlparse.c"
    *eventPP = next;
    __CrestLoad(67789, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(67790, (unsigned long )(& __retres106));
# 2301 "xmlparse.c"
    __retres106 = (enum XML_Error )4;
# 2301 "xmlparse.c"
    goto return_label;
    case_neg_1:
    {
    __CrestLoad(67793, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(67792, (unsigned long )0, (long long )0);
    __CrestApply2(67791, 13, (long long )(haveMore != 0));
# 2303 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(67794, 43921, 1);
# 2304 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(67796, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67797, (unsigned long )(& __retres106));
# 2305 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2305 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67795, 43924, 0);

    }
    }
    __CrestLoad(67798, (unsigned long )0, (long long )((enum XML_Error )5));
    __CrestStore(67799, (unsigned long )(& __retres106));
# 2307 "xmlparse.c"
    __retres106 = (enum XML_Error )5;
# 2307 "xmlparse.c"
    goto return_label;
    case_neg_2:
    {
    __CrestLoad(67802, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(67801, (unsigned long )0, (long long )0);
    __CrestApply2(67800, 13, (long long )(haveMore != 0));
# 2309 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(67803, 43928, 1);
# 2310 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(67805, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(67806, (unsigned long )(& __retres106));
# 2311 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2311 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67804, 43931, 0);

    }
    }
    __CrestLoad(67807, (unsigned long )0, (long long )((enum XML_Error )6));
    __CrestStore(67808, (unsigned long )(& __retres106));
# 2313 "xmlparse.c"
    __retres106 = (enum XML_Error )6;
# 2313 "xmlparse.c"
    goto return_label;
    case_9:
# 2318 "xmlparse.c"
    mem_73 = enc->predefinedEntityName;
# 2318 "xmlparse.c"
    tmp___0 = (*mem_73)(enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
    __CrestHandleReturn(67810, (long long )tmp___0);
    __CrestStore(67809, (unsigned long )(& tmp___0));
    __CrestLoad(67811, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(67812, (unsigned long )(& ch));
# 2318 "xmlparse.c"
    ch = (XML_Char )tmp___0;
    {
    __CrestLoad(67815, (unsigned long )(& ch), (long long )ch);
    __CrestLoad(67814, (unsigned long )0, (long long )0);
    __CrestApply2(67813, 13, (long long )(ch != 0));
# 2321 "xmlparse.c"
    if (ch != 0) {
      __CrestBranch(67816, 43936, 1);
      {
      __CrestLoad(67820, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
      __CrestLoad(67819, (unsigned long )0, (long long )0);
      __CrestApply2(67818, 13, (long long )(parser->m_characterDataHandler != 0));
# 2322 "xmlparse.c"
      if (parser->m_characterDataHandler != 0) {
        __CrestBranch(67821, 43937, 1);
# 2323 "xmlparse.c"
        mem_74 = parser->m_characterDataHandler;
        __CrestLoad(67823, (unsigned long )0, (long long )1);
# 2323 "xmlparse.c"
        (*mem_74)(parser->m_handlerArg, (XML_Char const *)(& ch), 1);
        __CrestClearStack(67824);
      } else {
        __CrestBranch(67822, 43938, 0);
        {
        __CrestLoad(67827, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
        __CrestLoad(67826, (unsigned long )0, (long long )0);
        __CrestApply2(67825, 13, (long long )(parser->m_defaultHandler != 0));
# 2324 "xmlparse.c"
        if (parser->m_defaultHandler != 0) {
          __CrestBranch(67828, 43939, 1);
# 2325 "xmlparse.c"
          reportDefault(parser, enc, s, next);
          __CrestClearStack(67830);
        } else {
          __CrestBranch(67829, 43940, 0);

        }
        }
      }
      }
# 2326 "xmlparse.c"
      goto switch_break;
    } else {
      __CrestBranch(67817, 43942, 0);

    }
    }
# 2328 "xmlparse.c"
    tmp___1 = poolStoreString(& dtd->pool, enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
    __CrestClearStack(67831);
# 2328 "xmlparse.c"
    name = (XML_Char const *)tmp___1;
    {
    __CrestLoad(67834, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(67833, (unsigned long )0, (long long )0);
    __CrestApply2(67832, 12, (long long )(name == 0));
# 2331 "xmlparse.c"
    if (name == 0) {
      __CrestBranch(67835, 43945, 1);
      __CrestLoad(67837, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(67838, (unsigned long )(& __retres106));
# 2332 "xmlparse.c"
      __retres106 = (enum XML_Error )1;
# 2332 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67836, 43947, 0);

    }
    }
    __CrestLoad(67839, (unsigned long )0, (long long )((size_t )0));
# 2333 "xmlparse.c"
    tmp___2 = lookup(parser, & dtd->generalEntities, name, (size_t )0);
    __CrestClearStack(67840);
# 2333 "xmlparse.c"
    entity = (ENTITY *)tmp___2;
# 2334 "xmlparse.c"
    dtd->pool.ptr = dtd->pool.start;
    {
    __CrestLoad(67843, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
    __CrestLoad(67842, (unsigned long )0, (long long )0);
    __CrestApply2(67841, 12, (long long )(dtd->hasParamEntityRefs == 0));
# 2339 "xmlparse.c"
    if (dtd->hasParamEntityRefs == 0) {
      __CrestBranch(67844, 43950, 1);
# 2339 "xmlparse.c"
      goto _L;
    } else {
      __CrestBranch(67845, 43951, 0);
      {
      __CrestLoad(67848, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
      __CrestLoad(67847, (unsigned long )0, (long long )0);
      __CrestApply2(67846, 13, (long long )(dtd->standalone != 0));
# 2339 "xmlparse.c"
      if (dtd->standalone != 0) {
        __CrestBranch(67849, 43952, 1);
        _L:
        {
        __CrestLoad(67853, (unsigned long )(& entity), (long long )((unsigned long )entity));
        __CrestLoad(67852, (unsigned long )0, (long long )0);
        __CrestApply2(67851, 12, (long long )(entity == 0));
# 2340 "xmlparse.c"
        if (entity == 0) {
          __CrestBranch(67854, 43953, 1);
          __CrestLoad(67856, (unsigned long )0, (long long )((enum XML_Error )11));
          __CrestStore(67857, (unsigned long )(& __retres106));
# 2341 "xmlparse.c"
          __retres106 = (enum XML_Error )11;
# 2341 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(67855, 43955, 0);
          {
          __CrestLoad(67860, (unsigned long )(& entity->is_internal), (long long )entity->is_internal);
          __CrestLoad(67859, (unsigned long )0, (long long )0);
          __CrestApply2(67858, 12, (long long )(entity->is_internal == 0));
# 2342 "xmlparse.c"
          if (entity->is_internal == 0) {
            __CrestBranch(67861, 43956, 1);
            __CrestLoad(67863, (unsigned long )0, (long long )((enum XML_Error )24));
            __CrestStore(67864, (unsigned long )(& __retres106));
# 2343 "xmlparse.c"
            __retres106 = (enum XML_Error )24;
# 2343 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(67862, 43958, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(67850, 43959, 0);
        {
        __CrestLoad(67867, (unsigned long )(& entity), (long long )((unsigned long )entity));
        __CrestLoad(67866, (unsigned long )0, (long long )0);
        __CrestApply2(67865, 12, (long long )(entity == 0));
# 2345 "xmlparse.c"
        if (entity == 0) {
          __CrestBranch(67868, 43960, 1);
          {
          __CrestLoad(67872, (unsigned long )(& parser->m_skippedEntityHandler), (long long )((unsigned long )parser->m_skippedEntityHandler));
          __CrestLoad(67871, (unsigned long )0, (long long )0);
          __CrestApply2(67870, 13, (long long )(parser->m_skippedEntityHandler != 0));
# 2346 "xmlparse.c"
          if (parser->m_skippedEntityHandler != 0) {
            __CrestBranch(67873, 43961, 1);
# 2347 "xmlparse.c"
            mem_75 = parser->m_skippedEntityHandler;
            __CrestLoad(67875, (unsigned long )0, (long long )0);
# 2347 "xmlparse.c"
            (*mem_75)(parser->m_handlerArg, name, 0);
            __CrestClearStack(67876);
          } else {
            __CrestBranch(67874, 43962, 0);
            {
            __CrestLoad(67879, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
            __CrestLoad(67878, (unsigned long )0, (long long )0);
            __CrestApply2(67877, 13, (long long )(parser->m_defaultHandler != 0));
# 2348 "xmlparse.c"
            if (parser->m_defaultHandler != 0) {
              __CrestBranch(67880, 43963, 1);
# 2349 "xmlparse.c"
              reportDefault(parser, enc, s, next);
              __CrestClearStack(67882);
            } else {
              __CrestBranch(67881, 43964, 0);

            }
            }
          }
          }
# 2350 "xmlparse.c"
          goto switch_break;
        } else {
          __CrestBranch(67869, 43966, 0);

        }
        }
      }
      }
    }
    }
    {
    __CrestLoad(67885, (unsigned long )(& entity->open), (long long )entity->open);
    __CrestLoad(67884, (unsigned long )0, (long long )0);
    __CrestApply2(67883, 13, (long long )(entity->open != 0));
# 2352 "xmlparse.c"
    if (entity->open != 0) {
      __CrestBranch(67886, 43968, 1);
      __CrestLoad(67888, (unsigned long )0, (long long )((enum XML_Error )12));
      __CrestStore(67889, (unsigned long )(& __retres106));
# 2353 "xmlparse.c"
      __retres106 = (enum XML_Error )12;
# 2353 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67887, 43970, 0);

    }
    }
    {
    __CrestLoad(67892, (unsigned long )(& entity->notation), (long long )((unsigned long )entity->notation));
    __CrestLoad(67891, (unsigned long )0, (long long )0);
    __CrestApply2(67890, 13, (long long )(entity->notation != 0));
# 2354 "xmlparse.c"
    if (entity->notation != 0) {
      __CrestBranch(67893, 43972, 1);
      __CrestLoad(67895, (unsigned long )0, (long long )((enum XML_Error )15));
      __CrestStore(67896, (unsigned long )(& __retres106));
# 2355 "xmlparse.c"
      __retres106 = (enum XML_Error )15;
# 2355 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(67894, 43974, 0);

    }
    }
    {
    __CrestLoad(67899, (unsigned long )(& entity->textPtr), (long long )((unsigned long )entity->textPtr));
    __CrestLoad(67898, (unsigned long )0, (long long )0);
    __CrestApply2(67897, 13, (long long )(entity->textPtr != 0));
# 2356 "xmlparse.c"
    if (entity->textPtr != 0) {
      __CrestBranch(67900, 43976, 1);
      {
      __CrestLoad(67904, (unsigned long )(& parser->m_defaultExpandInternalEntities),
                  (long long )parser->m_defaultExpandInternalEntities);
      __CrestLoad(67903, (unsigned long )0, (long long )0);
      __CrestApply2(67902, 12, (long long )(parser->m_defaultExpandInternalEntities == 0));
# 2358 "xmlparse.c"
      if (parser->m_defaultExpandInternalEntities == 0) {
        __CrestBranch(67905, 43977, 1);
        {
        __CrestLoad(67909, (unsigned long )(& parser->m_skippedEntityHandler), (long long )((unsigned long )parser->m_skippedEntityHandler));
        __CrestLoad(67908, (unsigned long )0, (long long )0);
        __CrestApply2(67907, 13, (long long )(parser->m_skippedEntityHandler != 0));
# 2359 "xmlparse.c"
        if (parser->m_skippedEntityHandler != 0) {
          __CrestBranch(67910, 43978, 1);
# 2360 "xmlparse.c"
          mem_76 = parser->m_skippedEntityHandler;
          __CrestLoad(67912, (unsigned long )0, (long long )0);
# 2360 "xmlparse.c"
          (*mem_76)(parser->m_handlerArg, entity->name, 0);
          __CrestClearStack(67913);
        } else {
          __CrestBranch(67911, 43979, 0);
          {
          __CrestLoad(67916, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
          __CrestLoad(67915, (unsigned long )0, (long long )0);
          __CrestApply2(67914, 13, (long long )(parser->m_defaultHandler != 0));
# 2361 "xmlparse.c"
          if (parser->m_defaultHandler != 0) {
            __CrestBranch(67917, 43980, 1);
# 2362 "xmlparse.c"
            reportDefault(parser, enc, s, next);
            __CrestClearStack(67919);
          } else {
            __CrestBranch(67918, 43981, 0);

          }
          }
        }
        }
# 2363 "xmlparse.c"
        goto switch_break;
      } else {
        __CrestBranch(67906, 43983, 0);

      }
      }
      __CrestLoad(67920, (unsigned long )0, (long long )((XML_Bool )0));
# 2365 "xmlparse.c"
      result = processInternalEntity(parser, entity, (XML_Bool )0);
      __CrestHandleReturn(67922, (long long )result);
      __CrestStore(67921, (unsigned long )(& result));
      {
      __CrestLoad(67925, (unsigned long )(& result), (long long )result);
      __CrestLoad(67924, (unsigned long )0, (long long )0U);
      __CrestApply2(67923, 13, (long long )((unsigned int )result != 0U));
# 2366 "xmlparse.c"
      if ((unsigned int )result != 0U) {
        __CrestBranch(67926, 43986, 1);
        __CrestLoad(67928, (unsigned long )(& result), (long long )result);
        __CrestStore(67929, (unsigned long )(& __retres106));
# 2367 "xmlparse.c"
        __retres106 = result;
# 2367 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67927, 43988, 0);

      }
      }
    } else {
      __CrestBranch(67901, 43989, 0);
      {
      __CrestLoad(67932, (unsigned long )(& parser->m_externalEntityRefHandler), (long long )((unsigned long )parser->m_externalEntityRefHandler));
      __CrestLoad(67931, (unsigned long )0, (long long )0);
      __CrestApply2(67930, 13, (long long )(parser->m_externalEntityRefHandler != 0));
# 2369 "xmlparse.c"
      if (parser->m_externalEntityRefHandler != 0) {
        __CrestBranch(67933, 43990, 1);
        __CrestLoad(67935, (unsigned long )0, (long long )((XML_Bool )1));
        __CrestStore(67936, (unsigned long )(& entity->open));
# 2371 "xmlparse.c"
        entity->open = (XML_Bool )1;
# 2372 "xmlparse.c"
        context = getContext(parser);
        __CrestClearStack(67937);
        __CrestLoad(67938, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(67939, (unsigned long )(& entity->open));
# 2373 "xmlparse.c"
        entity->open = (XML_Bool )0;
        {
        __CrestLoad(67942, (unsigned long )(& context), (long long )((unsigned long )context));
        __CrestLoad(67941, (unsigned long )0, (long long )0);
        __CrestApply2(67940, 12, (long long )(context == 0));
# 2374 "xmlparse.c"
        if (context == 0) {
          __CrestBranch(67943, 43992, 1);
          __CrestLoad(67945, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(67946, (unsigned long )(& __retres106));
# 2375 "xmlparse.c"
          __retres106 = (enum XML_Error )1;
# 2375 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(67944, 43994, 0);

        }
        }
# 2376 "xmlparse.c"
        mem_77 = parser->m_externalEntityRefHandler;
# 2376 "xmlparse.c"
        tmp___3 = (*mem_77)(parser->m_externalEntityRefHandlerArg, context, entity->base,
                            entity->systemId, entity->publicId);
        __CrestHandleReturn(67948, (long long )tmp___3);
        __CrestStore(67947, (unsigned long )(& tmp___3));
        {
        __CrestLoad(67951, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestLoad(67950, (unsigned long )0, (long long )0);
        __CrestApply2(67949, 13, (long long )(tmp___3 != 0));
# 2376 "xmlparse.c"
        if (tmp___3 != 0) {
          __CrestBranch(67952, 43997, 1);

        } else {
          __CrestBranch(67953, 43998, 0);
          __CrestLoad(67954, (unsigned long )0, (long long )((enum XML_Error )21));
          __CrestStore(67955, (unsigned long )(& __retres106));
# 2381 "xmlparse.c"
          __retres106 = (enum XML_Error )21;
# 2381 "xmlparse.c"
          goto return_label;
        }
        }
# 2382 "xmlparse.c"
        parser->m_tempPool.ptr = parser->m_tempPool.start;
      } else {
        __CrestBranch(67934, 44001, 0);
        {
        __CrestLoad(67958, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
        __CrestLoad(67957, (unsigned long )0, (long long )0);
        __CrestApply2(67956, 13, (long long )(parser->m_defaultHandler != 0));
# 2384 "xmlparse.c"
        if (parser->m_defaultHandler != 0) {
          __CrestBranch(67959, 44002, 1);
# 2385 "xmlparse.c"
          reportDefault(parser, enc, s, next);
          __CrestClearStack(67961);
        } else {
          __CrestBranch(67960, 44003, 0);

        }
        }
      }
      }
    }
    }
# 2386 "xmlparse.c"
    goto switch_break;
    case_1:
    case_2:
    {
    __CrestLoad(67964, (unsigned long )(& parser->m_freeTagList), (long long )((unsigned long )parser->m_freeTagList));
    __CrestLoad(67963, (unsigned long )0, (long long )0);
    __CrestApply2(67962, 13, (long long )(parser->m_freeTagList != 0));
# 2395 "xmlparse.c"
    if (parser->m_freeTagList != 0) {
      __CrestBranch(67965, 44006, 1);
# 2396 "xmlparse.c"
      tag = parser->m_freeTagList;
# 2397 "xmlparse.c"
      mem_78 = parser->m_freeTagList;
# 2397 "xmlparse.c"
      parser->m_freeTagList = mem_78->parent;
    } else {
      __CrestBranch(67966, 44007, 0);
# 2400 "xmlparse.c"
      mem_79 = parser->m_mem.malloc_fcn;
      __CrestLoad(67967, (unsigned long )0, (long long )sizeof(TAG ));
# 2400 "xmlparse.c"
      tmp___4 = (*mem_79)(sizeof(TAG ));
      __CrestClearStack(67968);
# 2400 "xmlparse.c"
      tag = (TAG *)tmp___4;
      {
      __CrestLoad(67971, (unsigned long )(& tag), (long long )((unsigned long )tag));
      __CrestLoad(67970, (unsigned long )0, (long long )0);
      __CrestApply2(67969, 12, (long long )(tag == 0));
# 2401 "xmlparse.c"
      if (tag == 0) {
        __CrestBranch(67972, 44009, 1);
        __CrestLoad(67974, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(67975, (unsigned long )(& __retres106));
# 2402 "xmlparse.c"
        __retres106 = (enum XML_Error )1;
# 2402 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67973, 44011, 0);

      }
      }
# 2403 "xmlparse.c"
      mem_80 = parser->m_mem.malloc_fcn;
      __CrestLoad(67976, (unsigned long )0, (long long )((size_t )32));
# 2403 "xmlparse.c"
      tmp___5 = (*mem_80)((size_t )32);
      __CrestClearStack(67977);
# 2403 "xmlparse.c"
      tag->buf = (char *)tmp___5;
      {
      __CrestLoad(67980, (unsigned long )(& tag->buf), (long long )((unsigned long )tag->buf));
      __CrestLoad(67979, (unsigned long )0, (long long )0);
      __CrestApply2(67978, 12, (long long )(tag->buf == 0));
# 2404 "xmlparse.c"
      if (tag->buf == 0) {
        __CrestBranch(67981, 44014, 1);
# 2405 "xmlparse.c"
        mem_81 = parser->m_mem.free_fcn;
# 2405 "xmlparse.c"
        (*mem_81)((void *)tag);
        __CrestClearStack(67983);
        __CrestLoad(67984, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(67985, (unsigned long )(& __retres106));
# 2406 "xmlparse.c"
        __retres106 = (enum XML_Error )1;
# 2406 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(67982, 44017, 0);

      }
      }
# 2408 "xmlparse.c"
      tag->bufEnd = tag->buf + 32;
    }
    }
# 2410 "xmlparse.c"
    tag->bindings = (BINDING *)((void *)0);
# 2411 "xmlparse.c"
    tag->parent = parser->m_tagStack;
# 2412 "xmlparse.c"
    parser->m_tagStack = tag;
# 2413 "xmlparse.c"
    tag->name.localPart = (XML_Char const *)((void *)0);
# 2414 "xmlparse.c"
    tag->name.prefix = (XML_Char const *)((void *)0);
# 2415 "xmlparse.c"
    tag->rawName = s + enc->minBytesPerChar;
# 2416 "xmlparse.c"
    mem_82 = enc->nameLength;
# 2416 "xmlparse.c"
    tag->rawNameLength = (*mem_82)(enc, tag->rawName);
    __CrestHandleReturn(67987, (long long )tag->rawNameLength);
    __CrestStore(67986, (unsigned long )(& tag->rawNameLength));
    __CrestLoad(67990, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(67989, (unsigned long )0, (long long )1);
    __CrestApply2(67988, 0, (long long )(parser->m_tagLevel + 1));
    __CrestStore(67991, (unsigned long )(& parser->m_tagLevel));
# 2417 "xmlparse.c"
    (parser->m_tagLevel) ++;
# 2419 "xmlparse.c"
    rawNameEnd = tag->rawName + tag->rawNameLength;
# 2420 "xmlparse.c"
    fromPtr = tag->rawName;
# 2421 "xmlparse.c"
    toPtr = tag->buf;
    {
# 2422 "xmlparse.c"
    while (1) {
      while_continue___0: ;
# 2425 "xmlparse.c"
      mem_83 = enc->utf8Convert;
# 2425 "xmlparse.c"
      (*mem_83)(enc, & fromPtr, rawNameEnd, & toPtr, (char const *)(tag->bufEnd - 1));
      __CrestClearStack(67992);
      __CrestLoad(67995, (unsigned long )(& toPtr), (long long )((unsigned long )toPtr));
      __CrestLoad(67994, (unsigned long )(& tag->buf), (long long )((unsigned long )tag->buf));
      __CrestApply2(67993, 18, (long long )(toPtr - tag->buf));
      __CrestStore(67996, (unsigned long )(& convLen));
# 2428 "xmlparse.c"
      convLen = (int )(toPtr - tag->buf);
      {
      __CrestLoad(67999, (unsigned long )(& fromPtr), (long long )((unsigned long )fromPtr));
      __CrestLoad(67998, (unsigned long )(& rawNameEnd), (long long )((unsigned long )rawNameEnd));
      __CrestApply2(67997, 12, (long long )((unsigned long )fromPtr == (unsigned long )rawNameEnd));
# 2429 "xmlparse.c"
      if ((unsigned long )fromPtr == (unsigned long )rawNameEnd) {
        __CrestBranch(68000, 44025, 1);
        __CrestLoad(68002, (unsigned long )(& convLen), (long long )convLen);
        __CrestStore(68003, (unsigned long )(& tag->name.strLen));
# 2430 "xmlparse.c"
        tag->name.strLen = convLen;
# 2431 "xmlparse.c"
        goto while_break___0;
      } else {
        __CrestBranch(68001, 44027, 0);

      }
      }
      __CrestLoad(68008, (unsigned long )(& tag->bufEnd), (long long )((unsigned long )tag->bufEnd));
      __CrestLoad(68007, (unsigned long )(& tag->buf), (long long )((unsigned long )tag->buf));
      __CrestApply2(68006, 18, (long long )(tag->bufEnd - tag->buf));
      __CrestLoad(68005, (unsigned long )0, (long long )1);
      __CrestApply2(68004, 8, (long long )((int )(tag->bufEnd - tag->buf) << 1));
      __CrestStore(68009, (unsigned long )(& bufSize));
# 2433 "xmlparse.c"
      bufSize = (int )(tag->bufEnd - tag->buf) << 1;
# 2435 "xmlparse.c"
      mem_84 = parser->m_mem.realloc_fcn;
      __CrestLoad(68010, (unsigned long )(& bufSize), (long long )bufSize);
# 2435 "xmlparse.c"
      tmp___6 = (*mem_84)((void *)tag->buf, (size_t )bufSize);
      __CrestClearStack(68011);
# 2435 "xmlparse.c"
      temp = (char *)tmp___6;
      {
      __CrestLoad(68014, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(68013, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(68012, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 2436 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(68015, 44030, 1);
        __CrestLoad(68017, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(68018, (unsigned long )(& __retres106));
# 2437 "xmlparse.c"
        __retres106 = (enum XML_Error )1;
# 2437 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68016, 44032, 0);

      }
      }
# 2438 "xmlparse.c"
      tag->buf = temp;
# 2439 "xmlparse.c"
      tag->bufEnd = temp + bufSize;
# 2440 "xmlparse.c"
      toPtr = temp + convLen;
    }
    while_break___0: ;
    }
# 2444 "xmlparse.c"
    tag->name.str = (XML_Char const *)tag->buf;
    __CrestLoad(68019, (unsigned long )0, (long long )((XML_Char )'\000'));
    __CrestStore(68020, (unsigned long )toPtr);
# 2445 "xmlparse.c"
    *toPtr = (XML_Char )'\000';
# 2446 "xmlparse.c"
    result___0 = storeAtts(parser, enc, s, & tag->name, & tag->bindings);
    __CrestHandleReturn(68022, (long long )result___0);
    __CrestStore(68021, (unsigned long )(& result___0));
    {
    __CrestLoad(68025, (unsigned long )(& result___0), (long long )result___0);
    __CrestLoad(68024, (unsigned long )0, (long long )0);
    __CrestApply2(68023, 13, (long long )(result___0 != 0));
# 2447 "xmlparse.c"
    if (result___0 != 0) {
      __CrestBranch(68026, 44037, 1);
      __CrestLoad(68028, (unsigned long )(& result___0), (long long )result___0);
      __CrestStore(68029, (unsigned long )(& __retres106));
# 2448 "xmlparse.c"
      __retres106 = result___0;
# 2448 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68027, 44039, 0);

    }
    }
    {
    __CrestLoad(68032, (unsigned long )(& parser->m_startElementHandler), (long long )((unsigned long )parser->m_startElementHandler));
    __CrestLoad(68031, (unsigned long )0, (long long )0);
    __CrestApply2(68030, 13, (long long )(parser->m_startElementHandler != 0));
# 2449 "xmlparse.c"
    if (parser->m_startElementHandler != 0) {
      __CrestBranch(68033, 44041, 1);
# 2450 "xmlparse.c"
      mem_85 = parser->m_startElementHandler;
# 2450 "xmlparse.c"
      (*mem_85)(parser->m_handlerArg, tag->name.str, (XML_Char const **)parser->m_atts);
      __CrestClearStack(68035);
    } else {
      __CrestBranch(68034, 44042, 0);
      {
      __CrestLoad(68038, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68037, (unsigned long )0, (long long )0);
      __CrestApply2(68036, 13, (long long )(parser->m_defaultHandler != 0));
# 2452 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68039, 44043, 1);
# 2453 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68041);
      } else {
        __CrestBranch(68040, 44044, 0);

      }
      }
    }
    }
# 2454 "xmlparse.c"
    poolClear(& parser->m_tempPool);
    __CrestClearStack(68042);
# 2455 "xmlparse.c"
    goto switch_break;
    case_3:
    case_4:
# 2461 "xmlparse.c"
    rawName = s + enc->minBytesPerChar;
# 2463 "xmlparse.c"
    bindings = (BINDING *)((void *)0);
    __CrestLoad(68043, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(68044, (unsigned long )(& noElmHandlers));
# 2464 "xmlparse.c"
    noElmHandlers = (XML_Bool )1;
# 2466 "xmlparse.c"
    mem_86 = enc->nameLength;
# 2466 "xmlparse.c"
    tmp___7 = (*mem_86)(enc, rawName);
    __CrestHandleReturn(68046, (long long )tmp___7);
    __CrestStore(68045, (unsigned long )(& tmp___7));
# 2466 "xmlparse.c"
    tmp___8 = poolStoreString(& parser->m_tempPool, enc, rawName, rawName + tmp___7);
    __CrestClearStack(68047);
# 2466 "xmlparse.c"
    name___0.str = (XML_Char const *)tmp___8;
    {
    __CrestLoad(68050, (unsigned long )(& name___0.str), (long long )((unsigned long )name___0.str));
    __CrestLoad(68049, (unsigned long )0, (long long )0);
    __CrestApply2(68048, 12, (long long )(name___0.str == 0));
# 2468 "xmlparse.c"
    if (name___0.str == 0) {
      __CrestBranch(68051, 44049, 1);
      __CrestLoad(68053, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68054, (unsigned long )(& __retres106));
# 2469 "xmlparse.c"
      __retres106 = (enum XML_Error )1;
# 2469 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68052, 44051, 0);

    }
    }
# 2470 "xmlparse.c"
    parser->m_tempPool.start = parser->m_tempPool.ptr;
# 2471 "xmlparse.c"
    result___1 = storeAtts(parser, enc, s, & name___0, & bindings);
    __CrestHandleReturn(68056, (long long )result___1);
    __CrestStore(68055, (unsigned long )(& result___1));
    {
    __CrestLoad(68059, (unsigned long )(& result___1), (long long )result___1);
    __CrestLoad(68058, (unsigned long )0, (long long )0);
    __CrestApply2(68057, 13, (long long )(result___1 != 0));
# 2472 "xmlparse.c"
    if (result___1 != 0) {
      __CrestBranch(68060, 44054, 1);
      __CrestLoad(68062, (unsigned long )(& result___1), (long long )result___1);
      __CrestStore(68063, (unsigned long )(& __retres106));
# 2473 "xmlparse.c"
      __retres106 = result___1;
# 2473 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68061, 44056, 0);

    }
    }
# 2474 "xmlparse.c"
    parser->m_tempPool.start = parser->m_tempPool.ptr;
    {
    __CrestLoad(68066, (unsigned long )(& parser->m_startElementHandler), (long long )((unsigned long )parser->m_startElementHandler));
    __CrestLoad(68065, (unsigned long )0, (long long )0);
    __CrestApply2(68064, 13, (long long )(parser->m_startElementHandler != 0));
# 2475 "xmlparse.c"
    if (parser->m_startElementHandler != 0) {
      __CrestBranch(68067, 44059, 1);
# 2476 "xmlparse.c"
      mem_87 = parser->m_startElementHandler;
# 2476 "xmlparse.c"
      (*mem_87)(parser->m_handlerArg, name___0.str, (XML_Char const **)parser->m_atts);
      __CrestClearStack(68069);
      __CrestLoad(68070, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(68071, (unsigned long )(& noElmHandlers));
# 2477 "xmlparse.c"
      noElmHandlers = (XML_Bool )0;
    } else {
      __CrestBranch(68068, 44060, 0);

    }
    }
    {
    __CrestLoad(68074, (unsigned long )(& parser->m_endElementHandler), (long long )((unsigned long )parser->m_endElementHandler));
    __CrestLoad(68073, (unsigned long )0, (long long )0);
    __CrestApply2(68072, 13, (long long )(parser->m_endElementHandler != 0));
# 2479 "xmlparse.c"
    if (parser->m_endElementHandler != 0) {
      __CrestBranch(68075, 44062, 1);
      {
      __CrestLoad(68079, (unsigned long )(& parser->m_startElementHandler), (long long )((unsigned long )parser->m_startElementHandler));
      __CrestLoad(68078, (unsigned long )0, (long long )0);
      __CrestApply2(68077, 13, (long long )(parser->m_startElementHandler != 0));
# 2480 "xmlparse.c"
      if (parser->m_startElementHandler != 0) {
        __CrestBranch(68080, 44063, 1);
# 2481 "xmlparse.c"
        *eventPP = *eventEndPP;
      } else {
        __CrestBranch(68081, 44064, 0);

      }
      }
# 2482 "xmlparse.c"
      mem_88 = parser->m_endElementHandler;
# 2482 "xmlparse.c"
      (*mem_88)(parser->m_handlerArg, name___0.str);
      __CrestClearStack(68082);
      __CrestLoad(68083, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(68084, (unsigned long )(& noElmHandlers));
# 2483 "xmlparse.c"
      noElmHandlers = (XML_Bool )0;
    } else {
      __CrestBranch(68076, 44066, 0);

    }
    }
    {
    __CrestLoad(68087, (unsigned long )(& noElmHandlers), (long long )noElmHandlers);
    __CrestLoad(68086, (unsigned long )0, (long long )0);
    __CrestApply2(68085, 13, (long long )(noElmHandlers != 0));
# 2485 "xmlparse.c"
    if (noElmHandlers != 0) {
      __CrestBranch(68088, 44068, 1);
      {
      __CrestLoad(68092, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68091, (unsigned long )0, (long long )0);
      __CrestApply2(68090, 13, (long long )(parser->m_defaultHandler != 0));
# 2485 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68093, 44069, 1);
# 2486 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68095);
      } else {
        __CrestBranch(68094, 44070, 0);

      }
      }
    } else {
      __CrestBranch(68089, 44071, 0);

    }
    }
# 2487 "xmlparse.c"
    poolClear(& parser->m_tempPool);
    __CrestClearStack(68096);
    {
# 2488 "xmlparse.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(68099, (unsigned long )(& bindings), (long long )((unsigned long )bindings));
      __CrestLoad(68098, (unsigned long )0, (long long )0);
      __CrestApply2(68097, 13, (long long )(bindings != 0));
# 2488 "xmlparse.c"
      if (bindings != 0) {
        __CrestBranch(68100, 44077, 1);

      } else {
        __CrestBranch(68101, 44078, 0);
# 2488 "xmlparse.c"
        goto while_break___1;
      }
      }
# 2489 "xmlparse.c"
      b = bindings;
      {
      __CrestLoad(68104, (unsigned long )(& parser->m_endNamespaceDeclHandler), (long long )((unsigned long )parser->m_endNamespaceDeclHandler));
      __CrestLoad(68103, (unsigned long )0, (long long )0);
      __CrestApply2(68102, 13, (long long )(parser->m_endNamespaceDeclHandler != 0));
# 2490 "xmlparse.c"
      if (parser->m_endNamespaceDeclHandler != 0) {
        __CrestBranch(68105, 44081, 1);
# 2491 "xmlparse.c"
        mem_89 = parser->m_endNamespaceDeclHandler;
# 2491 "xmlparse.c"
        mem_90 = b->prefix;
# 2491 "xmlparse.c"
        (*mem_89)(parser->m_handlerArg, mem_90->name);
        __CrestClearStack(68107);
      } else {
        __CrestBranch(68106, 44082, 0);

      }
      }
# 2492 "xmlparse.c"
      bindings = bindings->nextTagBinding;
# 2493 "xmlparse.c"
      b->nextTagBinding = parser->m_freeBindingList;
# 2494 "xmlparse.c"
      parser->m_freeBindingList = b;
# 2495 "xmlparse.c"
      mem_91 = b->prefix;
# 2495 "xmlparse.c"
      mem_91->binding = b->prevPrefixBinding;
    }
    while_break___1: ;
    }
    {
    __CrestLoad(68110, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(68109, (unsigned long )0, (long long )0);
    __CrestApply2(68108, 12, (long long )(parser->m_tagLevel == 0));
# 2498 "xmlparse.c"
    if (parser->m_tagLevel == 0) {
      __CrestBranch(68111, 44086, 1);
# 2499 "xmlparse.c"
      tmp___9 = epilogProcessor(parser, next, end, nextPtr);
      __CrestHandleReturn(68114, (long long )tmp___9);
      __CrestStore(68113, (unsigned long )(& tmp___9));
      __CrestLoad(68115, (unsigned long )(& tmp___9), (long long )tmp___9);
      __CrestStore(68116, (unsigned long )(& __retres106));
# 2499 "xmlparse.c"
      __retres106 = tmp___9;
# 2499 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68112, 44089, 0);

    }
    }
# 2500 "xmlparse.c"
    goto switch_break;
    case_5:
    {
    __CrestLoad(68119, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(68118, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestApply2(68117, 12, (long long )(parser->m_tagLevel == startTagLevel));
# 2502 "xmlparse.c"
    if (parser->m_tagLevel == startTagLevel) {
      __CrestBranch(68120, 44092, 1);
      __CrestLoad(68122, (unsigned long )0, (long long )((enum XML_Error )13));
      __CrestStore(68123, (unsigned long )(& __retres106));
# 2503 "xmlparse.c"
      __retres106 = (enum XML_Error )13;
# 2503 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68121, 44094, 0);
# 2507 "xmlparse.c"
      tag___0 = parser->m_tagStack;
# 2508 "xmlparse.c"
      parser->m_tagStack = tag___0->parent;
# 2509 "xmlparse.c"
      tag___0->parent = parser->m_freeTagList;
# 2510 "xmlparse.c"
      parser->m_freeTagList = tag___0;
# 2511 "xmlparse.c"
      rawName___0 = s + enc->minBytesPerChar * 2;
# 2512 "xmlparse.c"
      mem_92 = enc->nameLength;
# 2512 "xmlparse.c"
      len = (*mem_92)(enc, rawName___0);
      __CrestHandleReturn(68125, (long long )len);
      __CrestStore(68124, (unsigned long )(& len));
      {
      __CrestLoad(68128, (unsigned long )(& len), (long long )len);
      __CrestLoad(68127, (unsigned long )(& tag___0->rawNameLength), (long long )tag___0->rawNameLength);
      __CrestApply2(68126, 13, (long long )(len != tag___0->rawNameLength));
# 2513 "xmlparse.c"
      if (len != tag___0->rawNameLength) {
        __CrestBranch(68129, 44096, 1);
# 2515 "xmlparse.c"
        *eventPP = rawName___0;
        __CrestLoad(68131, (unsigned long )0, (long long )((enum XML_Error )7));
        __CrestStore(68132, (unsigned long )(& __retres106));
# 2516 "xmlparse.c"
        __retres106 = (enum XML_Error )7;
# 2516 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68130, 44099, 0);
        __CrestLoad(68133, (unsigned long )(& len), (long long )len);
# 2513 "xmlparse.c"
        tmp___10 = memcmp((void const *)tag___0->rawName, (void const *)rawName___0,
                          (size_t )len);
        __CrestHandleReturn(68135, (long long )tmp___10);
        __CrestStore(68134, (unsigned long )(& tmp___10));
        {
        __CrestLoad(68138, (unsigned long )(& tmp___10), (long long )tmp___10);
        __CrestLoad(68137, (unsigned long )0, (long long )0);
        __CrestApply2(68136, 13, (long long )(tmp___10 != 0));
# 2513 "xmlparse.c"
        if (tmp___10 != 0) {
          __CrestBranch(68139, 44101, 1);
# 2515 "xmlparse.c"
          *eventPP = rawName___0;
          __CrestLoad(68141, (unsigned long )0, (long long )((enum XML_Error )7));
          __CrestStore(68142, (unsigned long )(& __retres106));
# 2516 "xmlparse.c"
          __retres106 = (enum XML_Error )7;
# 2516 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(68140, 44104, 0);

        }
        }
      }
      }
      __CrestLoad(68145, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
      __CrestLoad(68144, (unsigned long )0, (long long )1);
      __CrestApply2(68143, 1, (long long )(parser->m_tagLevel - 1));
      __CrestStore(68146, (unsigned long )(& parser->m_tagLevel));
# 2518 "xmlparse.c"
      (parser->m_tagLevel) --;
      {
      __CrestLoad(68149, (unsigned long )(& parser->m_endElementHandler), (long long )((unsigned long )parser->m_endElementHandler));
      __CrestLoad(68148, (unsigned long )0, (long long )0);
      __CrestApply2(68147, 13, (long long )(parser->m_endElementHandler != 0));
# 2519 "xmlparse.c"
      if (parser->m_endElementHandler != 0) {
        __CrestBranch(68150, 44107, 1);
# 2523 "xmlparse.c"
        localPart = tag___0->name.localPart;
        {
        __CrestLoad(68154, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
        __CrestLoad(68153, (unsigned long )0, (long long )0);
        __CrestApply2(68152, 13, (long long )(parser->m_ns != 0));
# 2524 "xmlparse.c"
        if (parser->m_ns != 0) {
          __CrestBranch(68155, 44109, 1);
          {
          __CrestLoad(68159, (unsigned long )(& localPart), (long long )((unsigned long )localPart));
          __CrestLoad(68158, (unsigned long )0, (long long )0);
          __CrestApply2(68157, 13, (long long )(localPart != 0));
# 2524 "xmlparse.c"
          if (localPart != 0) {
            __CrestBranch(68160, 44110, 1);
# 2529 "xmlparse.c"
            uri = (XML_Char *)tag___0->name.str + tag___0->name.uriLen;
            {
# 2531 "xmlparse.c"
            while (1) {
              while_continue___2: ;
              {
              __CrestLoad(68164, (unsigned long )localPart, (long long )*localPart);
              __CrestLoad(68163, (unsigned long )0, (long long )0);
              __CrestApply2(68162, 13, (long long )(*localPart != 0));
# 2531 "xmlparse.c"
              if (*localPart != 0) {
                __CrestBranch(68165, 44115, 1);

              } else {
                __CrestBranch(68166, 44116, 0);
# 2531 "xmlparse.c"
                goto while_break___2;
              }
              }
# 2531 "xmlparse.c"
              tmp___11 = uri;
# 2531 "xmlparse.c"
              uri ++;
# 2531 "xmlparse.c"
              tmp___12 = localPart;
# 2531 "xmlparse.c"
              localPart ++;
              __CrestLoad(68167, (unsigned long )tmp___12, (long long )*tmp___12);
              __CrestStore(68168, (unsigned long )tmp___11);
# 2531 "xmlparse.c"
              *tmp___11 = (XML_Char )*tmp___12;
            }
            while_break___2: ;
            }
# 2532 "xmlparse.c"
            prefix = (XML_Char const *)((XML_Char *)tag___0->name.prefix);
            {
            __CrestLoad(68171, (unsigned long )(& parser->m_ns_triplets), (long long )parser->m_ns_triplets);
            __CrestLoad(68170, (unsigned long )0, (long long )0);
            __CrestApply2(68169, 13, (long long )(parser->m_ns_triplets != 0));
# 2533 "xmlparse.c"
            if (parser->m_ns_triplets != 0) {
              __CrestBranch(68172, 44121, 1);
              {
              __CrestLoad(68176, (unsigned long )(& prefix), (long long )((unsigned long )prefix));
              __CrestLoad(68175, (unsigned long )0, (long long )0);
              __CrestApply2(68174, 13, (long long )(prefix != 0));
# 2533 "xmlparse.c"
              if (prefix != 0) {
                __CrestBranch(68177, 44122, 1);
# 2534 "xmlparse.c"
                tmp___13 = uri;
# 2534 "xmlparse.c"
                uri ++;
                __CrestLoad(68179, (unsigned long )(& parser->m_namespaceSeparator),
                            (long long )parser->m_namespaceSeparator);
                __CrestStore(68180, (unsigned long )tmp___13);
# 2534 "xmlparse.c"
                *tmp___13 = parser->m_namespaceSeparator;
                {
# 2535 "xmlparse.c"
                while (1) {
                  while_continue___3: ;
                  {
                  __CrestLoad(68183, (unsigned long )prefix, (long long )*prefix);
                  __CrestLoad(68182, (unsigned long )0, (long long )0);
                  __CrestApply2(68181, 13, (long long )(*prefix != 0));
# 2535 "xmlparse.c"
                  if (*prefix != 0) {
                    __CrestBranch(68184, 44127, 1);

                  } else {
                    __CrestBranch(68185, 44128, 0);
# 2535 "xmlparse.c"
                    goto while_break___3;
                  }
                  }
# 2535 "xmlparse.c"
                  tmp___14 = uri;
# 2535 "xmlparse.c"
                  uri ++;
# 2535 "xmlparse.c"
                  tmp___15 = prefix;
# 2535 "xmlparse.c"
                  prefix ++;
                  __CrestLoad(68186, (unsigned long )tmp___15, (long long )*tmp___15);
                  __CrestStore(68187, (unsigned long )tmp___14);
# 2535 "xmlparse.c"
                  *tmp___14 = (XML_Char )*tmp___15;
                }
                while_break___3: ;
                }
              } else {
                __CrestBranch(68178, 44131, 0);

              }
              }
            } else {
              __CrestBranch(68173, 44132, 0);

            }
            }
            __CrestLoad(68188, (unsigned long )0, (long long )((XML_Char )'\000'));
            __CrestStore(68189, (unsigned long )uri);
# 2537 "xmlparse.c"
            *uri = (XML_Char )'\000';
          } else {
            __CrestBranch(68161, 44134, 0);

          }
          }
        } else {
          __CrestBranch(68156, 44135, 0);

        }
        }
# 2539 "xmlparse.c"
        mem_93 = parser->m_endElementHandler;
# 2539 "xmlparse.c"
        (*mem_93)(parser->m_handlerArg, tag___0->name.str);
        __CrestClearStack(68190);
      } else {
        __CrestBranch(68151, 44137, 0);
        {
        __CrestLoad(68193, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
        __CrestLoad(68192, (unsigned long )0, (long long )0);
        __CrestApply2(68191, 13, (long long )(parser->m_defaultHandler != 0));
# 2541 "xmlparse.c"
        if (parser->m_defaultHandler != 0) {
          __CrestBranch(68194, 44138, 1);
# 2542 "xmlparse.c"
          reportDefault(parser, enc, s, next);
          __CrestClearStack(68196);
        } else {
          __CrestBranch(68195, 44139, 0);

        }
        }
      }
      }
      {
# 2543 "xmlparse.c"
      while (1) {
        while_continue___4: ;
        {
        __CrestLoad(68199, (unsigned long )(& tag___0->bindings), (long long )((unsigned long )tag___0->bindings));
        __CrestLoad(68198, (unsigned long )0, (long long )0);
        __CrestApply2(68197, 13, (long long )(tag___0->bindings != 0));
# 2543 "xmlparse.c"
        if (tag___0->bindings != 0) {
          __CrestBranch(68200, 44144, 1);

        } else {
          __CrestBranch(68201, 44145, 0);
# 2543 "xmlparse.c"
          goto while_break___4;
        }
        }
# 2544 "xmlparse.c"
        b___0 = tag___0->bindings;
        {
        __CrestLoad(68204, (unsigned long )(& parser->m_endNamespaceDeclHandler),
                    (long long )((unsigned long )parser->m_endNamespaceDeclHandler));
        __CrestLoad(68203, (unsigned long )0, (long long )0);
        __CrestApply2(68202, 13, (long long )(parser->m_endNamespaceDeclHandler != 0));
# 2545 "xmlparse.c"
        if (parser->m_endNamespaceDeclHandler != 0) {
          __CrestBranch(68205, 44148, 1);
# 2546 "xmlparse.c"
          mem_94 = parser->m_endNamespaceDeclHandler;
# 2546 "xmlparse.c"
          mem_95 = b___0->prefix;
# 2546 "xmlparse.c"
          (*mem_94)(parser->m_handlerArg, mem_95->name);
          __CrestClearStack(68207);
        } else {
          __CrestBranch(68206, 44149, 0);

        }
        }
# 2547 "xmlparse.c"
        mem_96 = tag___0->bindings;
# 2547 "xmlparse.c"
        tag___0->bindings = mem_96->nextTagBinding;
# 2548 "xmlparse.c"
        b___0->nextTagBinding = parser->m_freeBindingList;
# 2549 "xmlparse.c"
        parser->m_freeBindingList = b___0;
# 2550 "xmlparse.c"
        mem_97 = b___0->prefix;
# 2550 "xmlparse.c"
        mem_97->binding = b___0->prevPrefixBinding;
      }
      while_break___4: ;
      }
      {
      __CrestLoad(68210, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
      __CrestLoad(68209, (unsigned long )0, (long long )0);
      __CrestApply2(68208, 12, (long long )(parser->m_tagLevel == 0));
# 2552 "xmlparse.c"
      if (parser->m_tagLevel == 0) {
        __CrestBranch(68211, 44153, 1);
# 2553 "xmlparse.c"
        tmp___16 = epilogProcessor(parser, next, end, nextPtr);
        __CrestHandleReturn(68214, (long long )tmp___16);
        __CrestStore(68213, (unsigned long )(& tmp___16));
        __CrestLoad(68215, (unsigned long )(& tmp___16), (long long )tmp___16);
        __CrestStore(68216, (unsigned long )(& __retres106));
# 2553 "xmlparse.c"
        __retres106 = tmp___16;
# 2553 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68212, 44156, 0);

      }
      }
    }
    }
# 2555 "xmlparse.c"
    goto switch_break;
    case_10:
# 2558 "xmlparse.c"
    mem_98 = enc->charRefNumber;
# 2558 "xmlparse.c"
    tmp___17 = (*mem_98)(enc, s);
    __CrestHandleReturn(68218, (long long )tmp___17);
    __CrestStore(68217, (unsigned long )(& tmp___17));
    __CrestLoad(68219, (unsigned long )(& tmp___17), (long long )tmp___17);
    __CrestStore(68220, (unsigned long )(& n));
# 2558 "xmlparse.c"
    n = tmp___17;
    {
    __CrestLoad(68223, (unsigned long )(& n), (long long )n);
    __CrestLoad(68222, (unsigned long )0, (long long )0);
    __CrestApply2(68221, 16, (long long )(n < 0));
# 2559 "xmlparse.c"
    if (n < 0) {
      __CrestBranch(68224, 44160, 1);
      __CrestLoad(68226, (unsigned long )0, (long long )((enum XML_Error )14));
      __CrestStore(68227, (unsigned long )(& __retres106));
# 2560 "xmlparse.c"
      __retres106 = (enum XML_Error )14;
# 2560 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68225, 44162, 0);

    }
    }
    {
    __CrestLoad(68230, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
    __CrestLoad(68229, (unsigned long )0, (long long )0);
    __CrestApply2(68228, 13, (long long )(parser->m_characterDataHandler != 0));
# 2561 "xmlparse.c"
    if (parser->m_characterDataHandler != 0) {
      __CrestBranch(68231, 44164, 1);
      __CrestLoad(68233, (unsigned long )(& n), (long long )n);
# 2563 "xmlparse.c"
      tmp___18 = XmlUtf8Encode(n, buf);
      __CrestHandleReturn(68235, (long long )tmp___18);
      __CrestStore(68234, (unsigned long )(& tmp___18));
# 2563 "xmlparse.c"
      mem_99 = parser->m_characterDataHandler;
      __CrestLoad(68236, (unsigned long )(& tmp___18), (long long )tmp___18);
# 2563 "xmlparse.c"
      (*mem_99)(parser->m_handlerArg, (XML_Char const *)(buf), tmp___18);
      __CrestClearStack(68237);
    } else {
      __CrestBranch(68232, 44165, 0);
      {
      __CrestLoad(68240, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68239, (unsigned long )0, (long long )0);
      __CrestApply2(68238, 13, (long long )(parser->m_defaultHandler != 0));
# 2565 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68241, 44166, 1);
# 2566 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68243);
      } else {
        __CrestBranch(68242, 44167, 0);

      }
      }
    }
    }
# 2568 "xmlparse.c"
    goto switch_break;
    case_12:
    __CrestLoad(68244, (unsigned long )0, (long long )((enum XML_Error )17));
    __CrestStore(68245, (unsigned long )(& __retres106));
# 2570 "xmlparse.c"
    __retres106 = (enum XML_Error )17;
# 2570 "xmlparse.c"
    goto return_label;
    case_7:
    {
    __CrestLoad(68248, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
    __CrestLoad(68247, (unsigned long )0, (long long )0);
    __CrestApply2(68246, 13, (long long )(parser->m_characterDataHandler != 0));
# 2572 "xmlparse.c"
    if (parser->m_characterDataHandler != 0) {
      __CrestBranch(68249, 44172, 1);
      __CrestLoad(68251, (unsigned long )0, (long long )((XML_Char )10));
      __CrestStore(68252, (unsigned long )(& c___0));
# 2573 "xmlparse.c"
      c___0 = (XML_Char )10;
# 2574 "xmlparse.c"
      mem_100 = parser->m_characterDataHandler;
      __CrestLoad(68253, (unsigned long )0, (long long )1);
# 2574 "xmlparse.c"
      (*mem_100)(parser->m_handlerArg, (XML_Char const *)(& c___0), 1);
      __CrestClearStack(68254);
    } else {
      __CrestBranch(68250, 44173, 0);
      {
      __CrestLoad(68257, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68256, (unsigned long )0, (long long )0);
      __CrestApply2(68255, 13, (long long )(parser->m_defaultHandler != 0));
# 2576 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68258, 44174, 1);
# 2577 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68260);
      } else {
        __CrestBranch(68259, 44175, 0);

      }
      }
    }
    }
# 2578 "xmlparse.c"
    goto switch_break;
    case_8:
    {
    __CrestLoad(68263, (unsigned long )(& parser->m_startCdataSectionHandler), (long long )((unsigned long )parser->m_startCdataSectionHandler));
    __CrestLoad(68262, (unsigned long )0, (long long )0);
    __CrestApply2(68261, 13, (long long )(parser->m_startCdataSectionHandler != 0));
# 2582 "xmlparse.c"
    if (parser->m_startCdataSectionHandler != 0) {
      __CrestBranch(68264, 44178, 1);
# 2583 "xmlparse.c"
      mem_101 = parser->m_startCdataSectionHandler;
# 2583 "xmlparse.c"
      (*mem_101)(parser->m_handlerArg);
      __CrestClearStack(68266);
    } else {
      __CrestBranch(68265, 44179, 0);
      {
      __CrestLoad(68269, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68268, (unsigned long )0, (long long )0);
      __CrestApply2(68267, 13, (long long )(parser->m_defaultHandler != 0));
# 2600 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68270, 44180, 1);
# 2601 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68272);
      } else {
        __CrestBranch(68271, 44181, 0);

      }
      }
    }
    }
    __CrestLoad(68273, (unsigned long )(& haveMore), (long long )haveMore);
# 2602 "xmlparse.c"
    result___2 = doCdataSection(parser, enc, & next, end, nextPtr, haveMore);
    __CrestHandleReturn(68275, (long long )result___2);
    __CrestStore(68274, (unsigned long )(& result___2));
    {
    __CrestLoad(68278, (unsigned long )(& result___2), (long long )result___2);
    __CrestLoad(68277, (unsigned long )0, (long long )0U);
    __CrestApply2(68276, 13, (long long )((unsigned int )result___2 != 0U));
# 2603 "xmlparse.c"
    if ((unsigned int )result___2 != 0U) {
      __CrestBranch(68279, 44184, 1);
      __CrestLoad(68281, (unsigned long )(& result___2), (long long )result___2);
      __CrestStore(68282, (unsigned long )(& __retres106));
# 2604 "xmlparse.c"
      __retres106 = result___2;
# 2604 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68280, 44186, 0);
      {
      __CrestLoad(68285, (unsigned long )(& next), (long long )((unsigned long )next));
      __CrestLoad(68284, (unsigned long )0, (long long )0);
      __CrestApply2(68283, 12, (long long )(next == 0));
# 2605 "xmlparse.c"
      if (next == 0) {
        __CrestBranch(68286, 44187, 1);
# 2606 "xmlparse.c"
        parser->m_processor = & cdataSectionProcessor;
        __CrestLoad(68288, (unsigned long )(& result___2), (long long )result___2);
        __CrestStore(68289, (unsigned long )(& __retres106));
# 2607 "xmlparse.c"
        __retres106 = result___2;
# 2607 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68287, 44190, 0);

      }
      }
    }
    }
# 2610 "xmlparse.c"
    goto switch_break;
    case_neg_5:
    {
    __CrestLoad(68292, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(68291, (unsigned long )0, (long long )0);
    __CrestApply2(68290, 13, (long long )(haveMore != 0));
# 2612 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(68293, 44193, 1);
# 2613 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(68295, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(68296, (unsigned long )(& __retres106));
# 2614 "xmlparse.c"
      __retres106 = (enum XML_Error )0;
# 2614 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68294, 44196, 0);

    }
    }
    {
    __CrestLoad(68299, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
    __CrestLoad(68298, (unsigned long )0, (long long )0);
    __CrestApply2(68297, 13, (long long )(parser->m_characterDataHandler != 0));
# 2616 "xmlparse.c"
    if (parser->m_characterDataHandler != 0) {
      __CrestBranch(68300, 44198, 1);
      {
      __CrestLoad(68304, (unsigned long )(& enc->isUtf8), (long long )enc->isUtf8);
      __CrestLoad(68303, (unsigned long )0, (long long )0);
      __CrestApply2(68302, 12, (long long )(enc->isUtf8 == 0));
# 2617 "xmlparse.c"
      if (enc->isUtf8 == 0) {
        __CrestBranch(68305, 44199, 1);
# 2618 "xmlparse.c"
        dataPtr = parser->m_dataBuf;
# 2619 "xmlparse.c"
        mem_102 = enc->utf8Convert;
# 2619 "xmlparse.c"
        (*mem_102)(enc, & s, end, & dataPtr, (char const *)parser->m_dataBufEnd);
        __CrestClearStack(68307);
# 2620 "xmlparse.c"
        mem_103 = parser->m_characterDataHandler;
        __CrestLoad(68310, (unsigned long )(& dataPtr), (long long )((unsigned long )dataPtr));
        __CrestLoad(68309, (unsigned long )(& parser->m_dataBuf), (long long )((unsigned long )parser->m_dataBuf));
        __CrestApply2(68308, 18, (long long )(dataPtr - parser->m_dataBuf));
# 2620 "xmlparse.c"
        (*mem_103)(parser->m_handlerArg, (XML_Char const *)parser->m_dataBuf, (int )(dataPtr - parser->m_dataBuf));
        __CrestClearStack(68311);
      } else {
        __CrestBranch(68306, 44200, 0);
# 2624 "xmlparse.c"
        mem_104 = parser->m_characterDataHandler;
        __CrestLoad(68314, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestLoad(68313, (unsigned long )(& s), (long long )((unsigned long )s));
        __CrestApply2(68312, 18, (long long )((XML_Char *)end - (XML_Char *)s));
# 2624 "xmlparse.c"
        (*mem_104)(parser->m_handlerArg, (XML_Char const *)((XML_Char *)s), (int )((XML_Char *)end - (XML_Char *)s));
        __CrestClearStack(68315);
      }
      }
    } else {
      __CrestBranch(68301, 44201, 0);
      {
      __CrestLoad(68318, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68317, (unsigned long )0, (long long )0);
      __CrestApply2(68316, 13, (long long )(parser->m_defaultHandler != 0));
# 2628 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68319, 44202, 1);
# 2629 "xmlparse.c"
        reportDefault(parser, enc, s, end);
        __CrestClearStack(68321);
      } else {
        __CrestBranch(68320, 44203, 0);

      }
      }
    }
    }
    {
    __CrestLoad(68324, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestLoad(68323, (unsigned long )0, (long long )0);
    __CrestApply2(68322, 12, (long long )(startTagLevel == 0));
# 2633 "xmlparse.c"
    if (startTagLevel == 0) {
      __CrestBranch(68325, 44205, 1);
# 2634 "xmlparse.c"
      *eventPP = end;
      __CrestLoad(68327, (unsigned long )0, (long long )((enum XML_Error )3));
      __CrestStore(68328, (unsigned long )(& __retres106));
# 2635 "xmlparse.c"
      __retres106 = (enum XML_Error )3;
# 2635 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68326, 44208, 0);

    }
    }
    {
    __CrestLoad(68331, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(68330, (unsigned long )(& startTagLevel), (long long )startTagLevel);
    __CrestApply2(68329, 13, (long long )(parser->m_tagLevel != startTagLevel));
# 2637 "xmlparse.c"
    if (parser->m_tagLevel != startTagLevel) {
      __CrestBranch(68332, 44210, 1);
# 2638 "xmlparse.c"
      *eventPP = end;
      __CrestLoad(68334, (unsigned long )0, (long long )((enum XML_Error )13));
      __CrestStore(68335, (unsigned long )(& __retres106));
# 2639 "xmlparse.c"
      __retres106 = (enum XML_Error )13;
# 2639 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68333, 44213, 0);

    }
    }
# 2641 "xmlparse.c"
    *nextPtr = end;
    __CrestLoad(68336, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(68337, (unsigned long )(& __retres106));
# 2642 "xmlparse.c"
    __retres106 = (enum XML_Error )0;
# 2642 "xmlparse.c"
    goto return_label;
    case_6:
# 2645 "xmlparse.c"
    charDataHandler = parser->m_characterDataHandler;
    {
    __CrestLoad(68340, (unsigned long )(& charDataHandler), (long long )((unsigned long )charDataHandler));
    __CrestLoad(68339, (unsigned long )0, (long long )0);
    __CrestApply2(68338, 13, (long long )(charDataHandler != 0));
# 2646 "xmlparse.c"
    if (charDataHandler != 0) {
      __CrestBranch(68341, 44219, 1);
      {
      __CrestLoad(68345, (unsigned long )(& enc->isUtf8), (long long )enc->isUtf8);
      __CrestLoad(68344, (unsigned long )0, (long long )0);
      __CrestApply2(68343, 12, (long long )(enc->isUtf8 == 0));
# 2647 "xmlparse.c"
      if (enc->isUtf8 == 0) {
        __CrestBranch(68346, 44220, 1);
        {
# 2648 "xmlparse.c"
        while (1) {
          while_continue___5: ;
# 2649 "xmlparse.c"
          dataPtr___0 = parser->m_dataBuf;
# 2650 "xmlparse.c"
          mem_105 = enc->utf8Convert;
# 2650 "xmlparse.c"
          (*mem_105)(enc, & s, next, & dataPtr___0, (char const *)parser->m_dataBufEnd);
          __CrestClearStack(68348);
# 2651 "xmlparse.c"
          *eventEndPP = s;
          __CrestLoad(68351, (unsigned long )(& dataPtr___0), (long long )((unsigned long )dataPtr___0));
          __CrestLoad(68350, (unsigned long )(& parser->m_dataBuf), (long long )((unsigned long )parser->m_dataBuf));
          __CrestApply2(68349, 18, (long long )(dataPtr___0 - parser->m_dataBuf));
# 2652 "xmlparse.c"
          (*charDataHandler)(parser->m_handlerArg, (XML_Char const *)parser->m_dataBuf,
                             (int )(dataPtr___0 - parser->m_dataBuf));
          __CrestClearStack(68352);
          {
          __CrestLoad(68355, (unsigned long )(& s), (long long )((unsigned long )s));
          __CrestLoad(68354, (unsigned long )(& next), (long long )((unsigned long )next));
          __CrestApply2(68353, 12, (long long )((unsigned long )s == (unsigned long )next));
# 2654 "xmlparse.c"
          if ((unsigned long )s == (unsigned long )next) {
            __CrestBranch(68356, 44225, 1);
# 2655 "xmlparse.c"
            goto while_break___5;
          } else {
            __CrestBranch(68357, 44226, 0);

          }
          }
# 2656 "xmlparse.c"
          *eventPP = s;
        }
        while_break___5: ;
        }
      } else {
        __CrestBranch(68347, 44229, 0);
        __CrestLoad(68360, (unsigned long )(& next), (long long )((unsigned long )next));
        __CrestLoad(68359, (unsigned long )(& s), (long long )((unsigned long )s));
        __CrestApply2(68358, 18, (long long )((XML_Char *)next - (XML_Char *)s));
# 2660 "xmlparse.c"
        (*charDataHandler)(parser->m_handlerArg, (XML_Char const *)((XML_Char *)s),
                           (int )((XML_Char *)next - (XML_Char *)s));
        __CrestClearStack(68361);
      }
      }
    } else {
      __CrestBranch(68342, 44230, 0);
      {
      __CrestLoad(68364, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(68363, (unsigned long )0, (long long )0);
      __CrestApply2(68362, 13, (long long )(parser->m_defaultHandler != 0));
# 2664 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(68365, 44231, 1);
# 2665 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(68367);
      } else {
        __CrestBranch(68366, 44232, 0);

      }
      }
    }
    }
# 2667 "xmlparse.c"
    goto switch_break;
    case_11:
# 2669 "xmlparse.c"
    tmp___19 = reportProcessingInstruction(parser, enc, s, next);
    __CrestHandleReturn(68369, (long long )tmp___19);
    __CrestStore(68368, (unsigned long )(& tmp___19));
    {
    __CrestLoad(68372, (unsigned long )(& tmp___19), (long long )tmp___19);
    __CrestLoad(68371, (unsigned long )0, (long long )0);
    __CrestApply2(68370, 13, (long long )(tmp___19 != 0));
# 2669 "xmlparse.c"
    if (tmp___19 != 0) {
      __CrestBranch(68373, 44236, 1);

    } else {
      __CrestBranch(68374, 44237, 0);
      __CrestLoad(68375, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68376, (unsigned long )(& __retres106));
# 2670 "xmlparse.c"
      __retres106 = (enum XML_Error )1;
# 2670 "xmlparse.c"
      goto return_label;
    }
    }
# 2671 "xmlparse.c"
    goto switch_break;
    case_13:
# 2673 "xmlparse.c"
    tmp___20 = reportComment(parser, enc, s, next);
    __CrestHandleReturn(68378, (long long )tmp___20);
    __CrestStore(68377, (unsigned long )(& tmp___20));
    {
    __CrestLoad(68381, (unsigned long )(& tmp___20), (long long )tmp___20);
    __CrestLoad(68380, (unsigned long )0, (long long )0);
    __CrestApply2(68379, 13, (long long )(tmp___20 != 0));
# 2673 "xmlparse.c"
    if (tmp___20 != 0) {
      __CrestBranch(68382, 44242, 1);

    } else {
      __CrestBranch(68383, 44243, 0);
      __CrestLoad(68384, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68385, (unsigned long )(& __retres106));
# 2674 "xmlparse.c"
      __retres106 = (enum XML_Error )1;
# 2674 "xmlparse.c"
      goto return_label;
    }
    }
# 2675 "xmlparse.c"
    goto switch_break;
    switch_default:
    {
    __CrestLoad(68388, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(68387, (unsigned long )0, (long long )0);
    __CrestApply2(68386, 13, (long long )(parser->m_defaultHandler != 0));
# 2677 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(68389, 44247, 1);
# 2678 "xmlparse.c"
      reportDefault(parser, enc, s, next);
      __CrestClearStack(68391);
    } else {
      __CrestBranch(68390, 44248, 0);

    }
    }
# 2679 "xmlparse.c"
    goto switch_break;
    switch_break: ;
    }
# 2681 "xmlparse.c"
    s = next;
# 2681 "xmlparse.c"
    *eventPP = s;
    {
    {
    __CrestLoad(68394, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(68393, (unsigned long )0, (long long )3U);
    __CrestApply2(68392, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 2683 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(68395, 44254, 1);
# 2683 "xmlparse.c"
      goto case_3___0;
    } else {
      __CrestBranch(68396, 44255, 0);

    }
    }
    {
    __CrestLoad(68399, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(68398, (unsigned long )0, (long long )2U);
    __CrestApply2(68397, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 2686 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
      __CrestBranch(68400, 44257, 1);
# 2686 "xmlparse.c"
      goto case_2___0;
    } else {
      __CrestBranch(68401, 44258, 0);

    }
    }
# 2688 "xmlparse.c"
    goto switch_default___0;
    case_3___0:
# 2684 "xmlparse.c"
    *nextPtr = next;
    __CrestLoad(68402, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(68403, (unsigned long )(& __retres106));
# 2685 "xmlparse.c"
    __retres106 = (enum XML_Error )0;
# 2685 "xmlparse.c"
    goto return_label;
    case_2___0:
    __CrestLoad(68404, (unsigned long )0, (long long )((enum XML_Error )35));
    __CrestStore(68405, (unsigned long )(& __retres106));
# 2687 "xmlparse.c"
    __retres106 = (enum XML_Error )35;
# 2687 "xmlparse.c"
    goto return_label;
    switch_default___0: ;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(68406, (unsigned long )(& __retres106), (long long )__retres106);
  __CrestReturn(68407);
# 2237 "xmlparse.c"
  return (__retres106);
  }
}
}
# 2704 "xmlparse.c"
static enum XML_Error storeAtts(XML_Parser parser , ENCODING const *enc , char const *attStr ,
                                TAG_NAME *tagNamePtr , BINDING **bindingsPtr )
{
  DTD *dtd ;
  ELEMENT_TYPE *elementType ;
  int nDefaultAtts ;
  XML_Char const **appAtts ;
  int attIndex ;
  int prefixLen ;
  int i ;
  int n ;
  XML_Char *uri ;
  int nPrefixes ;
  BINDING *binding ;
  XML_Char const *localPart ;
  NAMED *tmp ;
  XML_Char const *name ;
  XML_Char const *tmp___0 ;
  NAMED *tmp___1 ;
  int tmp___2 ;
  int oldAttsSize ;
  ATTRIBUTE *temp ;
  void *tmp___3 ;
  ATTRIBUTE *currAtt ;
  ATTRIBUTE_ID *attId ;
  int tmp___4 ;
  ATTRIBUTE_ID *tmp___5 ;
  int tmp___6 ;
  enum XML_Error result ;
  XML_Bool isCdata ;
  int j ;
  XML_Char *tmp___7 ;
  enum XML_Error result___0 ;
  enum XML_Error tmp___8 ;
  DEFAULT_ATTRIBUTE const *da ;
  enum XML_Error result___1 ;
  enum XML_Error tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int j___0 ;
  unsigned long version ;
  int nsAttsSize ;
  NS_ATT *temp___0 ;
  unsigned char tmp___14 ;
  void *tmp___15 ;
  XML_Char const *s ;
  ATTRIBUTE_ID *id ;
  BINDING const *b ;
  unsigned long uriHash ;
  NAMED *tmp___16 ;
  XML_Char c ;
  XML_Char *tmp___18 ;
  int tmp___19 ;
  XML_Bool tmp___20 ;
  XML_Char const *tmp___21 ;
  XML_Char c___0 ;
  XML_Char *tmp___23 ;
  int tmp___24 ;
  XML_Bool tmp___25 ;
  XML_Char const *tmp___26 ;
  unsigned char step ;
  unsigned long mask ;
  XML_Char const *s1 ;
  XML_Char const *s2 ;
  XML_Char *tmp___28 ;
  int tmp___29 ;
  XML_Bool tmp___30 ;
  XML_Char const *tmp___31 ;
  XML_Char const *tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  TAG *p ;
  void *tmp___35 ;
  int (*mem_81)(ENCODING const *enc , char const *ptr , int attsMax , ATTRIBUTE *atts ) ;
  void *(*mem_82)(void *ptr , size_t size ) ;
  int (*mem_83)(ENCODING const *enc , char const *ptr , int attsMax , ATTRIBUTE *atts ) ;
  int (*mem_84)(ENCODING const * , char const * ) ;
  XML_Char *mem_85 ;
  ATTRIBUTE *mem_86 ;
  XML_Char *mem_87 ;
  XML_Char const **mem_88 ;
  ATTRIBUTE *mem_89 ;
  DEFAULT_ATTRIBUTE *mem_90 ;
  DEFAULT_ATTRIBUTE *mem_91 ;
  ATTRIBUTE *mem_92 ;
  ATTRIBUTE *mem_93 ;
  XML_Char const **mem_94 ;
  ATTRIBUTE *mem_95 ;
  ATTRIBUTE *mem_96 ;
  XML_Char const **mem_97 ;
  XML_Char const **mem_98 ;
  XML_Char const **mem_99 ;
  XML_Char *mem_100 ;
  ATTRIBUTE_ID const *mem_101 ;
  XML_Char *mem_102 ;
  XML_Char const **mem_103 ;
  ATTRIBUTE_ID const *mem_104 ;
  ATTRIBUTE_ID const *mem_105 ;
  XML_Char *mem_106 ;
  ATTRIBUTE_ID const *mem_107 ;
  ATTRIBUTE_ID const *mem_108 ;
  ATTRIBUTE_ID const *mem_109 ;
  ATTRIBUTE_ID const *mem_110 ;
  XML_Char *mem_111 ;
  XML_Char const **mem_112 ;
  ATTRIBUTE_ID const *mem_113 ;
  XML_Char const **mem_114 ;
  ATTRIBUTE_ID const *mem_115 ;
  XML_Char *mem_116 ;
  XML_Char const **mem_117 ;
  ATTRIBUTE_ID const *mem_118 ;
  XML_Char const **mem_119 ;
  XML_Char const **mem_120 ;
  void *(*mem_121)(void *ptr , size_t size ) ;
  NS_ATT *mem_122 ;
  XML_Char const **mem_123 ;
  XML_Char const *mem_124 ;
  XML_Char *mem_125 ;
  PREFIX *mem_126 ;
  XML_Char *mem_127 ;
  NS_ATT *mem_128 ;
  NS_ATT *mem_129 ;
  NS_ATT *mem_130 ;
  XML_Char *mem_131 ;
  struct prefix *mem_132 ;
  XML_Char const **mem_133 ;
  NS_ATT *mem_134 ;
  NS_ATT *mem_135 ;
  NS_ATT *mem_136 ;
  XML_Char *mem_137 ;
  XML_Char const **mem_138 ;
  XML_Char *mem_139 ;
  struct attribute_id const *mem_140 ;
  XML_Char *mem_141 ;
  PREFIX *mem_142 ;
  struct prefix *mem_143 ;
  struct prefix *mem_144 ;
  XML_Char const *mem_145 ;
  struct prefix *mem_146 ;
  XML_Char const *mem_147 ;
  void *(*mem_148)(size_t size ) ;
  void (*mem_149)(void *ptr ) ;
  struct prefix *mem_150 ;
  enum XML_Error __retres151 ;

  {
  __CrestCall(68408, 766);
# 2709 "xmlparse.c"
  dtd = parser->m_dtd;
  __CrestLoad(68409, (unsigned long )0, (long long )0);
  __CrestStore(68410, (unsigned long )(& attIndex));
# 2713 "xmlparse.c"
  attIndex = 0;
  __CrestLoad(68411, (unsigned long )0, (long long )0);
  __CrestStore(68412, (unsigned long )(& nPrefixes));
# 2718 "xmlparse.c"
  nPrefixes = 0;
  __CrestLoad(68413, (unsigned long )0, (long long )((size_t )0));
# 2723 "xmlparse.c"
  tmp = lookup(parser, & dtd->elementTypes, tagNamePtr->str, (size_t )0);
  __CrestClearStack(68414);
# 2723 "xmlparse.c"
  elementType = (ELEMENT_TYPE *)tmp;
  {
  __CrestLoad(68417, (unsigned long )(& elementType), (long long )((unsigned long )elementType));
  __CrestLoad(68416, (unsigned long )0, (long long )0);
  __CrestApply2(68415, 12, (long long )(elementType == 0));
# 2724 "xmlparse.c"
  if (elementType == 0) {
    __CrestBranch(68418, 44271, 1);
# 2725 "xmlparse.c"
    tmp___0 = poolCopyString(& dtd->pool, tagNamePtr->str);
    __CrestClearStack(68420);
# 2725 "xmlparse.c"
    name = tmp___0;
    {
    __CrestLoad(68423, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(68422, (unsigned long )0, (long long )0);
    __CrestApply2(68421, 12, (long long )(name == 0));
# 2726 "xmlparse.c"
    if (name == 0) {
      __CrestBranch(68424, 44273, 1);
      __CrestLoad(68426, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68427, (unsigned long )(& __retres151));
# 2727 "xmlparse.c"
      __retres151 = (enum XML_Error )1;
# 2727 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68425, 44275, 0);

    }
    }
    __CrestLoad(68428, (unsigned long )0, (long long )sizeof(ELEMENT_TYPE ));
# 2728 "xmlparse.c"
    tmp___1 = lookup(parser, & dtd->elementTypes, name, sizeof(ELEMENT_TYPE ));
    __CrestClearStack(68429);
# 2728 "xmlparse.c"
    elementType = (ELEMENT_TYPE *)tmp___1;
    {
    __CrestLoad(68432, (unsigned long )(& elementType), (long long )((unsigned long )elementType));
    __CrestLoad(68431, (unsigned long )0, (long long )0);
    __CrestApply2(68430, 12, (long long )(elementType == 0));
# 2730 "xmlparse.c"
    if (elementType == 0) {
      __CrestBranch(68433, 44278, 1);
      __CrestLoad(68435, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68436, (unsigned long )(& __retres151));
# 2731 "xmlparse.c"
      __retres151 = (enum XML_Error )1;
# 2731 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68434, 44280, 0);

    }
    }
    {
    __CrestLoad(68439, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
    __CrestLoad(68438, (unsigned long )0, (long long )0);
    __CrestApply2(68437, 13, (long long )(parser->m_ns != 0));
# 2732 "xmlparse.c"
    if (parser->m_ns != 0) {
      __CrestBranch(68440, 44282, 1);
# 2732 "xmlparse.c"
      tmp___2 = setElementTypePrefix(parser, elementType);
      __CrestHandleReturn(68443, (long long )tmp___2);
      __CrestStore(68442, (unsigned long )(& tmp___2));
      {
      __CrestLoad(68446, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(68445, (unsigned long )0, (long long )0);
      __CrestApply2(68444, 13, (long long )(tmp___2 != 0));
# 2732 "xmlparse.c"
      if (tmp___2 != 0) {
        __CrestBranch(68447, 44284, 1);

      } else {
        __CrestBranch(68448, 44285, 0);
        __CrestLoad(68449, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(68450, (unsigned long )(& __retres151));
# 2733 "xmlparse.c"
        __retres151 = (enum XML_Error )1;
# 2733 "xmlparse.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(68441, 44287, 0);

    }
    }
  } else {
    __CrestBranch(68419, 44288, 0);

  }
  }
  __CrestLoad(68451, (unsigned long )(& elementType->nDefaultAtts), (long long )elementType->nDefaultAtts);
  __CrestStore(68452, (unsigned long )(& nDefaultAtts));
# 2735 "xmlparse.c"
  nDefaultAtts = elementType->nDefaultAtts;
# 2738 "xmlparse.c"
  mem_81 = enc->getAtts;
  __CrestLoad(68453, (unsigned long )(& parser->m_attsSize), (long long )parser->m_attsSize);
# 2738 "xmlparse.c"
  n = (*mem_81)(enc, attStr, parser->m_attsSize, parser->m_atts);
  __CrestHandleReturn(68455, (long long )n);
  __CrestStore(68454, (unsigned long )(& n));
  {
  __CrestLoad(68460, (unsigned long )(& n), (long long )n);
  __CrestLoad(68459, (unsigned long )(& nDefaultAtts), (long long )nDefaultAtts);
  __CrestApply2(68458, 0, (long long )(n + nDefaultAtts));
  __CrestLoad(68457, (unsigned long )(& parser->m_attsSize), (long long )parser->m_attsSize);
  __CrestApply2(68456, 14, (long long )(n + nDefaultAtts > parser->m_attsSize));
# 2739 "xmlparse.c"
  if (n + nDefaultAtts > parser->m_attsSize) {
    __CrestBranch(68461, 44291, 1);
    __CrestLoad(68463, (unsigned long )(& parser->m_attsSize), (long long )parser->m_attsSize);
    __CrestStore(68464, (unsigned long )(& oldAttsSize));
# 2740 "xmlparse.c"
    oldAttsSize = parser->m_attsSize;
    __CrestLoad(68469, (unsigned long )(& n), (long long )n);
    __CrestLoad(68468, (unsigned long )(& nDefaultAtts), (long long )nDefaultAtts);
    __CrestApply2(68467, 0, (long long )(n + nDefaultAtts));
    __CrestLoad(68466, (unsigned long )0, (long long )16);
    __CrestApply2(68465, 0, (long long )((n + nDefaultAtts) + 16));
    __CrestStore(68470, (unsigned long )(& parser->m_attsSize));
# 2745 "xmlparse.c"
    parser->m_attsSize = (n + nDefaultAtts) + 16;
# 2746 "xmlparse.c"
    mem_82 = parser->m_mem.realloc_fcn;
    __CrestLoad(68473, (unsigned long )(& parser->m_attsSize), (long long )parser->m_attsSize);
    __CrestLoad(68472, (unsigned long )0, (long long )sizeof(ATTRIBUTE ));
    __CrestApply2(68471, 2, (long long )((unsigned long )parser->m_attsSize * sizeof(ATTRIBUTE )));
# 2746 "xmlparse.c"
    tmp___3 = (*mem_82)((void *)parser->m_atts, (unsigned long )parser->m_attsSize * sizeof(ATTRIBUTE ));
    __CrestClearStack(68474);
# 2746 "xmlparse.c"
    temp = (ATTRIBUTE *)tmp___3;
    {
    __CrestLoad(68477, (unsigned long )(& temp), (long long )((unsigned long )temp));
    __CrestLoad(68476, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(68475, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 2747 "xmlparse.c"
    if ((unsigned long )temp == (unsigned long )((void *)0)) {
      __CrestBranch(68478, 44293, 1);
      __CrestLoad(68480, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68481, (unsigned long )(& __retres151));
# 2748 "xmlparse.c"
      __retres151 = (enum XML_Error )1;
# 2748 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68479, 44295, 0);

    }
    }
# 2749 "xmlparse.c"
    parser->m_atts = temp;
    {
    __CrestLoad(68484, (unsigned long )(& n), (long long )n);
    __CrestLoad(68483, (unsigned long )(& oldAttsSize), (long long )oldAttsSize);
    __CrestApply2(68482, 14, (long long )(n > oldAttsSize));
# 2756 "xmlparse.c"
    if (n > oldAttsSize) {
      __CrestBranch(68485, 44298, 1);
# 2757 "xmlparse.c"
      mem_83 = enc->getAtts;
      __CrestLoad(68487, (unsigned long )(& n), (long long )n);
# 2757 "xmlparse.c"
      (*mem_83)(enc, attStr, n, parser->m_atts);
      __CrestClearStack(68488);
    } else {
      __CrestBranch(68486, 44299, 0);

    }
    }
  } else {
    __CrestBranch(68462, 44300, 0);

  }
  }
# 2760 "xmlparse.c"
  appAtts = (XML_Char const **)parser->m_atts;
  __CrestLoad(68489, (unsigned long )0, (long long )0);
  __CrestStore(68490, (unsigned long )(& i));
# 2761 "xmlparse.c"
  i = 0;
  {
# 2761 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(68493, (unsigned long )(& i), (long long )i);
    __CrestLoad(68492, (unsigned long )(& n), (long long )n);
    __CrestApply2(68491, 16, (long long )(i < n));
# 2761 "xmlparse.c"
    if (i < n) {
      __CrestBranch(68494, 44306, 1);

    } else {
      __CrestBranch(68495, 44307, 0);
# 2761 "xmlparse.c"
      goto while_break;
    }
    }
# 2762 "xmlparse.c"
    currAtt = parser->m_atts + i;
# 2767 "xmlparse.c"
    mem_84 = enc->nameLength;
# 2767 "xmlparse.c"
    tmp___4 = (*mem_84)(enc, currAtt->name);
    __CrestHandleReturn(68497, (long long )tmp___4);
    __CrestStore(68496, (unsigned long )(& tmp___4));
# 2767 "xmlparse.c"
    tmp___5 = getAttributeId(parser, enc, currAtt->name, currAtt->name + tmp___4);
    __CrestClearStack(68498);
# 2767 "xmlparse.c"
    attId = tmp___5;
    {
    __CrestLoad(68501, (unsigned long )(& attId), (long long )((unsigned long )attId));
    __CrestLoad(68500, (unsigned long )0, (long long )0);
    __CrestApply2(68499, 12, (long long )(attId == 0));
# 2770 "xmlparse.c"
    if (attId == 0) {
      __CrestBranch(68502, 44310, 1);
      __CrestLoad(68504, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(68505, (unsigned long )(& __retres151));
# 2771 "xmlparse.c"
      __retres151 = (enum XML_Error )1;
# 2771 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68503, 44312, 0);

    }
    }
    {
# 2784 "xmlparse.c"
    mem_85 = attId->name + -1;
    {
    __CrestLoad(68508, (unsigned long )mem_85, (long long )*mem_85);
    __CrestLoad(68507, (unsigned long )0, (long long )0);
    __CrestApply2(68506, 13, (long long )(*mem_85 != 0));
# 2784 "xmlparse.c"
    if (*mem_85 != 0) {
      __CrestBranch(68509, 44316, 1);
      {
      __CrestLoad(68513, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(68512, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(68511, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 2785 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(68514, 44317, 1);
# 2786 "xmlparse.c"
        mem_86 = parser->m_atts + i;
# 2786 "xmlparse.c"
        parser->m_eventPtr = mem_86->name;
      } else {
        __CrestBranch(68515, 44318, 0);

      }
      }
      __CrestLoad(68516, (unsigned long )0, (long long )((enum XML_Error )8));
      __CrestStore(68517, (unsigned long )(& __retres151));
# 2787 "xmlparse.c"
      __retres151 = (enum XML_Error )8;
# 2787 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(68510, 44321, 0);

    }
    }
    }
# 2789 "xmlparse.c"
    mem_87 = attId->name + -1;
    __CrestLoad(68518, (unsigned long )0, (long long )((XML_Char )1));
    __CrestStore(68519, (unsigned long )mem_87);
# 2789 "xmlparse.c"
    *mem_87 = (XML_Char )1;
    __CrestLoad(68520, (unsigned long )(& attIndex), (long long )attIndex);
    __CrestStore(68521, (unsigned long )(& tmp___6));
# 2790 "xmlparse.c"
    tmp___6 = attIndex;
    __CrestLoad(68524, (unsigned long )(& attIndex), (long long )attIndex);
    __CrestLoad(68523, (unsigned long )0, (long long )1);
    __CrestApply2(68522, 0, (long long )(attIndex + 1));
    __CrestStore(68525, (unsigned long )(& attIndex));
# 2790 "xmlparse.c"
    attIndex ++;
# 2790 "xmlparse.c"
    mem_88 = appAtts + tmp___6;
# 2790 "xmlparse.c"
    *mem_88 = (XML_Char const *)attId->name;
    {
# 2791 "xmlparse.c"
    mem_89 = parser->m_atts + i;
    {
    __CrestLoad(68528, (unsigned long )(& mem_89->normalized), (long long )mem_89->normalized);
    __CrestLoad(68527, (unsigned long )0, (long long )0);
    __CrestApply2(68526, 12, (long long )(mem_89->normalized == 0));
# 2791 "xmlparse.c"
    if (mem_89->normalized == 0) {
      __CrestBranch(68529, 44326, 1);
      __CrestLoad(68531, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(68532, (unsigned long )(& isCdata));
# 2793 "xmlparse.c"
      isCdata = (XML_Bool )1;
      {
      __CrestLoad(68535, (unsigned long )(& attId->maybeTokenized), (long long )attId->maybeTokenized);
      __CrestLoad(68534, (unsigned long )0, (long long )0);
      __CrestApply2(68533, 13, (long long )(attId->maybeTokenized != 0));
# 2796 "xmlparse.c"
      if (attId->maybeTokenized != 0) {
        __CrestBranch(68536, 44328, 1);
        __CrestLoad(68538, (unsigned long )0, (long long )0);
        __CrestStore(68539, (unsigned long )(& j));
# 2798 "xmlparse.c"
        j = 0;
        {
# 2798 "xmlparse.c"
        while (1) {
          while_continue___0: ;
          {
          __CrestLoad(68542, (unsigned long )(& j), (long long )j);
          __CrestLoad(68541, (unsigned long )(& nDefaultAtts), (long long )nDefaultAtts);
          __CrestApply2(68540, 16, (long long )(j < nDefaultAtts));
# 2798 "xmlparse.c"
          if (j < nDefaultAtts) {
            __CrestBranch(68543, 44333, 1);

          } else {
            __CrestBranch(68544, 44334, 0);
# 2798 "xmlparse.c"
            goto while_break___0;
          }
          }
          {
# 2799 "xmlparse.c"
          mem_90 = elementType->defaultAtts + j;
          {
          __CrestLoad(68547, (unsigned long )(& attId), (long long )((unsigned long )attId));
          __CrestLoad(68546, (unsigned long )(& mem_90->id), (long long )((unsigned long )mem_90->id));
          __CrestApply2(68545, 12, (long long )((unsigned long )attId == (unsigned long )mem_90->id));
# 2799 "xmlparse.c"
          if ((unsigned long )attId == (unsigned long )mem_90->id) {
            __CrestBranch(68548, 44338, 1);
# 2800 "xmlparse.c"
            mem_91 = elementType->defaultAtts + j;
            __CrestLoad(68550, (unsigned long )(& mem_91->isCdata), (long long )mem_91->isCdata);
            __CrestStore(68551, (unsigned long )(& isCdata));
# 2800 "xmlparse.c"
            isCdata = mem_91->isCdata;
# 2801 "xmlparse.c"
            goto while_break___0;
          } else {
            __CrestBranch(68549, 44340, 0);

          }
          }
          }
          __CrestLoad(68554, (unsigned long )(& j), (long long )j);
          __CrestLoad(68553, (unsigned long )0, (long long )1);
          __CrestApply2(68552, 0, (long long )(j + 1));
          __CrestStore(68555, (unsigned long )(& j));
# 2798 "xmlparse.c"
          j ++;
        }
        while_break___0: ;
        }
      } else {
        __CrestBranch(68537, 44343, 0);

      }
      }
# 2807 "xmlparse.c"
      mem_92 = parser->m_atts + i;
# 2807 "xmlparse.c"
      mem_93 = parser->m_atts + i;
      __CrestLoad(68556, (unsigned long )(& isCdata), (long long )isCdata);
# 2807 "xmlparse.c"
      result = storeAttributeValue(parser, enc, isCdata, mem_92->valuePtr, mem_93->valueEnd,
                                   & parser->m_tempPool);
      __CrestHandleReturn(68558, (long long )result);
      __CrestStore(68557, (unsigned long )(& result));
      {
      __CrestLoad(68561, (unsigned long )(& result), (long long )result);
      __CrestLoad(68560, (unsigned long )0, (long long )0);
      __CrestApply2(68559, 13, (long long )(result != 0));
# 2810 "xmlparse.c"
      if (result != 0) {
        __CrestBranch(68562, 44346, 1);
        __CrestLoad(68564, (unsigned long )(& result), (long long )result);
        __CrestStore(68565, (unsigned long )(& __retres151));
# 2811 "xmlparse.c"
        __retres151 = result;
# 2811 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68563, 44348, 0);

      }
      }
# 2812 "xmlparse.c"
      mem_94 = appAtts + attIndex;
# 2812 "xmlparse.c"
      *mem_94 = (XML_Char const *)parser->m_tempPool.start;
# 2813 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
    } else {
      __CrestBranch(68530, 44350, 0);
# 2817 "xmlparse.c"
      mem_95 = parser->m_atts + i;
# 2817 "xmlparse.c"
      mem_96 = parser->m_atts + i;
# 2817 "xmlparse.c"
      tmp___7 = poolStoreString(& parser->m_tempPool, enc, mem_95->valuePtr, mem_96->valueEnd);
      __CrestClearStack(68566);
# 2817 "xmlparse.c"
      mem_97 = appAtts + attIndex;
# 2817 "xmlparse.c"
      *mem_97 = (XML_Char const *)tmp___7;
      {
# 2819 "xmlparse.c"
      mem_98 = appAtts + attIndex;
      {
      __CrestLoad(68569, (unsigned long )mem_98, (long long )((unsigned long )*mem_98));
      __CrestLoad(68568, (unsigned long )0, (long long )((unsigned long )((XML_Char const *)0)));
      __CrestApply2(68567, 12, (long long )((unsigned long )*mem_98 == (unsigned long )((XML_Char const *)0)));
# 2819 "xmlparse.c"
      if ((unsigned long )*mem_98 == (unsigned long )((XML_Char const *)0)) {
        __CrestBranch(68570, 44354, 1);
        __CrestLoad(68572, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(68573, (unsigned long )(& __retres151));
# 2820 "xmlparse.c"
        __retres151 = (enum XML_Error )1;
# 2820 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68571, 44356, 0);

      }
      }
      }
# 2821 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
    }
    }
    }
    {
    __CrestLoad(68576, (unsigned long )(& attId->prefix), (long long )((unsigned long )attId->prefix));
    __CrestLoad(68575, (unsigned long )0, (long long )0);
    __CrestApply2(68574, 13, (long long )(attId->prefix != 0));
# 2824 "xmlparse.c"
    if (attId->prefix != 0) {
      __CrestBranch(68577, 44359, 1);
      {
      __CrestLoad(68581, (unsigned long )(& attId->xmlns), (long long )attId->xmlns);
      __CrestLoad(68580, (unsigned long )0, (long long )0);
      __CrestApply2(68579, 13, (long long )(attId->xmlns != 0));
# 2825 "xmlparse.c"
      if (attId->xmlns != 0) {
        __CrestBranch(68582, 44360, 1);
# 2827 "xmlparse.c"
        mem_99 = appAtts + attIndex;
# 2827 "xmlparse.c"
        tmp___8 = addBinding(parser, attId->prefix, (ATTRIBUTE_ID const *)attId,
                             *mem_99, bindingsPtr);
        __CrestHandleReturn(68585, (long long )tmp___8);
        __CrestStore(68584, (unsigned long )(& tmp___8));
        __CrestLoad(68586, (unsigned long )(& tmp___8), (long long )tmp___8);
        __CrestStore(68587, (unsigned long )(& result___0));
# 2827 "xmlparse.c"
        result___0 = tmp___8;
        {
        __CrestLoad(68590, (unsigned long )(& result___0), (long long )result___0);
        __CrestLoad(68589, (unsigned long )0, (long long )0);
        __CrestApply2(68588, 13, (long long )(result___0 != 0));
# 2829 "xmlparse.c"
        if (result___0 != 0) {
          __CrestBranch(68591, 44362, 1);
          __CrestLoad(68593, (unsigned long )(& result___0), (long long )result___0);
          __CrestStore(68594, (unsigned long )(& __retres151));
# 2830 "xmlparse.c"
          __retres151 = result___0;
# 2830 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(68592, 44364, 0);

        }
        }
        __CrestLoad(68597, (unsigned long )(& attIndex), (long long )attIndex);
        __CrestLoad(68596, (unsigned long )0, (long long )1);
        __CrestApply2(68595, 1, (long long )(attIndex - 1));
        __CrestStore(68598, (unsigned long )(& attIndex));
# 2831 "xmlparse.c"
        attIndex --;
      } else {
        __CrestBranch(68583, 44366, 0);
        __CrestLoad(68601, (unsigned long )(& attIndex), (long long )attIndex);
        __CrestLoad(68600, (unsigned long )0, (long long )1);
        __CrestApply2(68599, 0, (long long )(attIndex + 1));
        __CrestStore(68602, (unsigned long )(& attIndex));
# 2835 "xmlparse.c"
        attIndex ++;
        __CrestLoad(68605, (unsigned long )(& nPrefixes), (long long )nPrefixes);
        __CrestLoad(68604, (unsigned long )0, (long long )1);
        __CrestApply2(68603, 0, (long long )(nPrefixes + 1));
        __CrestStore(68606, (unsigned long )(& nPrefixes));
# 2836 "xmlparse.c"
        nPrefixes ++;
# 2837 "xmlparse.c"
        mem_100 = attId->name + -1;
        __CrestLoad(68607, (unsigned long )0, (long long )((XML_Char )2));
        __CrestStore(68608, (unsigned long )mem_100);
# 2837 "xmlparse.c"
        *mem_100 = (XML_Char )2;
      }
      }
    } else {
      __CrestBranch(68578, 44367, 0);
      __CrestLoad(68611, (unsigned long )(& attIndex), (long long )attIndex);
      __CrestLoad(68610, (unsigned long )0, (long long )1);
      __CrestApply2(68609, 0, (long long )(attIndex + 1));
      __CrestStore(68612, (unsigned long )(& attIndex));
# 2841 "xmlparse.c"
      attIndex ++;
    }
    }
    __CrestLoad(68615, (unsigned long )(& i), (long long )i);
    __CrestLoad(68614, (unsigned long )0, (long long )1);
    __CrestApply2(68613, 0, (long long )(i + 1));
    __CrestStore(68616, (unsigned long )(& i));
# 2761 "xmlparse.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(68617, (unsigned long )(& attIndex), (long long )attIndex);
  __CrestStore(68618, (unsigned long )(& parser->m_nSpecifiedAtts));
# 2845 "xmlparse.c"
  parser->m_nSpecifiedAtts = attIndex;
  {
  __CrestLoad(68621, (unsigned long )(& elementType->idAtt), (long long )((unsigned long )elementType->idAtt));
  __CrestLoad(68620, (unsigned long )0, (long long )0);
  __CrestApply2(68619, 13, (long long )(elementType->idAtt != 0));
# 2846 "xmlparse.c"
  if (elementType->idAtt != 0) {
    __CrestBranch(68622, 44372, 1);
    {
# 2846 "xmlparse.c"
    mem_101 = elementType->idAtt;
# 2846 "xmlparse.c"
    mem_102 = mem_101->name + -1;
    {
    __CrestLoad(68626, (unsigned long )mem_102, (long long )*mem_102);
    __CrestLoad(68625, (unsigned long )0, (long long )0);
    __CrestApply2(68624, 13, (long long )(*mem_102 != 0));
# 2846 "xmlparse.c"
    if (*mem_102 != 0) {
      __CrestBranch(68627, 44375, 1);
      __CrestLoad(68629, (unsigned long )0, (long long )0);
      __CrestStore(68630, (unsigned long )(& i));
# 2847 "xmlparse.c"
      i = 0;
      {
# 2847 "xmlparse.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(68633, (unsigned long )(& i), (long long )i);
        __CrestLoad(68632, (unsigned long )(& attIndex), (long long )attIndex);
        __CrestApply2(68631, 16, (long long )(i < attIndex));
# 2847 "xmlparse.c"
        if (i < attIndex) {
          __CrestBranch(68634, 44380, 1);

        } else {
          __CrestBranch(68635, 44381, 0);
# 2847 "xmlparse.c"
          goto while_break___1;
        }
        }
        {
# 2848 "xmlparse.c"
        mem_103 = appAtts + i;
# 2848 "xmlparse.c"
        mem_104 = elementType->idAtt;
        {
        __CrestLoad(68638, (unsigned long )mem_103, (long long )((unsigned long )*mem_103));
        __CrestLoad(68637, (unsigned long )(& mem_104->name), (long long )((unsigned long )mem_104->name));
        __CrestApply2(68636, 12, (long long )((unsigned long )*mem_103 == (unsigned long )mem_104->name));
# 2848 "xmlparse.c"
        if ((unsigned long )*mem_103 == (unsigned long )mem_104->name) {
          __CrestBranch(68639, 44385, 1);
          __CrestLoad(68641, (unsigned long )(& i), (long long )i);
          __CrestStore(68642, (unsigned long )(& parser->m_idAttIndex));
# 2849 "xmlparse.c"
          parser->m_idAttIndex = i;
# 2850 "xmlparse.c"
          goto while_break___1;
        } else {
          __CrestBranch(68640, 44387, 0);

        }
        }
        }
        __CrestLoad(68645, (unsigned long )(& i), (long long )i);
        __CrestLoad(68644, (unsigned long )0, (long long )2);
        __CrestApply2(68643, 0, (long long )(i + 2));
        __CrestStore(68646, (unsigned long )(& i));
# 2847 "xmlparse.c"
        i += 2;
      }
      while_break___1: ;
      }
    } else {
      __CrestBranch(68628, 44390, 0);
      __CrestLoad(68647, (unsigned long )0, (long long )-1);
      __CrestStore(68648, (unsigned long )(& parser->m_idAttIndex));
# 2854 "xmlparse.c"
      parser->m_idAttIndex = -1;
    }
    }
    }
  } else {
    __CrestBranch(68623, 44391, 0);
    __CrestLoad(68649, (unsigned long )0, (long long )-1);
    __CrestStore(68650, (unsigned long )(& parser->m_idAttIndex));
# 2854 "xmlparse.c"
    parser->m_idAttIndex = -1;
  }
  }
  __CrestLoad(68651, (unsigned long )0, (long long )0);
  __CrestStore(68652, (unsigned long )(& i));
# 2857 "xmlparse.c"
  i = 0;
  {
# 2857 "xmlparse.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(68655, (unsigned long )(& i), (long long )i);
    __CrestLoad(68654, (unsigned long )(& nDefaultAtts), (long long )nDefaultAtts);
    __CrestApply2(68653, 16, (long long )(i < nDefaultAtts));
# 2857 "xmlparse.c"
    if (i < nDefaultAtts) {
      __CrestBranch(68656, 44397, 1);

    } else {
      __CrestBranch(68657, 44398, 0);
# 2857 "xmlparse.c"
      goto while_break___2;
    }
    }
# 2858 "xmlparse.c"
    da = (DEFAULT_ATTRIBUTE const *)(elementType->defaultAtts + i);
    {
# 2859 "xmlparse.c"
    mem_105 = da->id;
# 2859 "xmlparse.c"
    mem_106 = mem_105->name + -1;
    {
    __CrestLoad(68660, (unsigned long )mem_106, (long long )*mem_106);
    __CrestLoad(68659, (unsigned long )0, (long long )0);
    __CrestApply2(68658, 12, (long long )(*mem_106 == 0));
# 2859 "xmlparse.c"
    if (*mem_106 == 0) {
      __CrestBranch(68661, 44403, 1);
      {
      __CrestLoad(68665, (unsigned long )(& da->value), (long long )((unsigned long )da->value));
      __CrestLoad(68664, (unsigned long )0, (long long )0);
      __CrestApply2(68663, 13, (long long )(da->value != 0));
# 2859 "xmlparse.c"
      if (da->value != 0) {
        __CrestBranch(68666, 44404, 1);
        {
# 2860 "xmlparse.c"
        mem_107 = da->id;
        {
        __CrestLoad(68670, (unsigned long )(& mem_107->prefix), (long long )((unsigned long )mem_107->prefix));
        __CrestLoad(68669, (unsigned long )0, (long long )0);
        __CrestApply2(68668, 13, (long long )(mem_107->prefix != 0));
# 2860 "xmlparse.c"
        if (mem_107->prefix != 0) {
          __CrestBranch(68671, 44407, 1);
          {
# 2861 "xmlparse.c"
          mem_108 = da->id;
          {
          __CrestLoad(68675, (unsigned long )(& mem_108->xmlns), (long long )mem_108->xmlns);
          __CrestLoad(68674, (unsigned long )0, (long long )0);
          __CrestApply2(68673, 13, (long long )(mem_108->xmlns != 0));
# 2861 "xmlparse.c"
          if (mem_108->xmlns != 0) {
            __CrestBranch(68676, 44410, 1);
# 2862 "xmlparse.c"
            mem_109 = da->id;
# 2862 "xmlparse.c"
            tmp___9 = addBinding(parser, (PREFIX *)mem_109->prefix, (ATTRIBUTE_ID const *)da->id,
                                 (XML_Char const *)da->value, bindingsPtr);
            __CrestHandleReturn(68679, (long long )tmp___9);
            __CrestStore(68678, (unsigned long )(& tmp___9));
            __CrestLoad(68680, (unsigned long )(& tmp___9), (long long )tmp___9);
            __CrestStore(68681, (unsigned long )(& result___1));
# 2862 "xmlparse.c"
            result___1 = tmp___9;
            {
            __CrestLoad(68684, (unsigned long )(& result___1), (long long )result___1);
            __CrestLoad(68683, (unsigned long )0, (long long )0);
            __CrestApply2(68682, 13, (long long )(result___1 != 0));
# 2864 "xmlparse.c"
            if (result___1 != 0) {
              __CrestBranch(68685, 44412, 1);
              __CrestLoad(68687, (unsigned long )(& result___1), (long long )result___1);
              __CrestStore(68688, (unsigned long )(& __retres151));
# 2865 "xmlparse.c"
              __retres151 = result___1;
# 2865 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(68686, 44414, 0);

            }
            }
          } else {
            __CrestBranch(68677, 44415, 0);
# 2868 "xmlparse.c"
            mem_110 = da->id;
# 2868 "xmlparse.c"
            mem_111 = mem_110->name + -1;
            __CrestLoad(68689, (unsigned long )0, (long long )((XML_Char )2));
            __CrestStore(68690, (unsigned long )mem_111);
# 2868 "xmlparse.c"
            *mem_111 = (XML_Char )2;
            __CrestLoad(68693, (unsigned long )(& nPrefixes), (long long )nPrefixes);
            __CrestLoad(68692, (unsigned long )0, (long long )1);
            __CrestApply2(68691, 0, (long long )(nPrefixes + 1));
            __CrestStore(68694, (unsigned long )(& nPrefixes));
# 2869 "xmlparse.c"
            nPrefixes ++;
            __CrestLoad(68695, (unsigned long )(& attIndex), (long long )attIndex);
            __CrestStore(68696, (unsigned long )(& tmp___10));
# 2870 "xmlparse.c"
            tmp___10 = attIndex;
            __CrestLoad(68699, (unsigned long )(& attIndex), (long long )attIndex);
            __CrestLoad(68698, (unsigned long )0, (long long )1);
            __CrestApply2(68697, 0, (long long )(attIndex + 1));
            __CrestStore(68700, (unsigned long )(& attIndex));
# 2870 "xmlparse.c"
            attIndex ++;
# 2870 "xmlparse.c"
            mem_112 = appAtts + tmp___10;
# 2870 "xmlparse.c"
            mem_113 = da->id;
# 2870 "xmlparse.c"
            *mem_112 = (XML_Char const *)mem_113->name;
            __CrestLoad(68701, (unsigned long )(& attIndex), (long long )attIndex);
            __CrestStore(68702, (unsigned long )(& tmp___11));
# 2871 "xmlparse.c"
            tmp___11 = attIndex;
            __CrestLoad(68705, (unsigned long )(& attIndex), (long long )attIndex);
            __CrestLoad(68704, (unsigned long )0, (long long )1);
            __CrestApply2(68703, 0, (long long )(attIndex + 1));
            __CrestStore(68706, (unsigned long )(& attIndex));
# 2871 "xmlparse.c"
            attIndex ++;
# 2871 "xmlparse.c"
            mem_114 = appAtts + tmp___11;
# 2871 "xmlparse.c"
            *mem_114 = (XML_Char const *)da->value;
          }
          }
          }
        } else {
          __CrestBranch(68672, 44416, 0);
# 2875 "xmlparse.c"
          mem_115 = da->id;
# 2875 "xmlparse.c"
          mem_116 = mem_115->name + -1;
          __CrestLoad(68707, (unsigned long )0, (long long )((XML_Char )1));
          __CrestStore(68708, (unsigned long )mem_116);
# 2875 "xmlparse.c"
          *mem_116 = (XML_Char )1;
          __CrestLoad(68709, (unsigned long )(& attIndex), (long long )attIndex);
          __CrestStore(68710, (unsigned long )(& tmp___12));
# 2876 "xmlparse.c"
          tmp___12 = attIndex;
          __CrestLoad(68713, (unsigned long )(& attIndex), (long long )attIndex);
          __CrestLoad(68712, (unsigned long )0, (long long )1);
          __CrestApply2(68711, 0, (long long )(attIndex + 1));
          __CrestStore(68714, (unsigned long )(& attIndex));
# 2876 "xmlparse.c"
          attIndex ++;
# 2876 "xmlparse.c"
          mem_117 = appAtts + tmp___12;
# 2876 "xmlparse.c"
          mem_118 = da->id;
# 2876 "xmlparse.c"
          *mem_117 = (XML_Char const *)mem_118->name;
          __CrestLoad(68715, (unsigned long )(& attIndex), (long long )attIndex);
          __CrestStore(68716, (unsigned long )(& tmp___13));
# 2877 "xmlparse.c"
          tmp___13 = attIndex;
          __CrestLoad(68719, (unsigned long )(& attIndex), (long long )attIndex);
          __CrestLoad(68718, (unsigned long )0, (long long )1);
          __CrestApply2(68717, 0, (long long )(attIndex + 1));
          __CrestStore(68720, (unsigned long )(& attIndex));
# 2877 "xmlparse.c"
          attIndex ++;
# 2877 "xmlparse.c"
          mem_119 = appAtts + tmp___13;
# 2877 "xmlparse.c"
          *mem_119 = (XML_Char const *)da->value;
        }
        }
        }
      } else {
        __CrestBranch(68667, 44417, 0);

      }
      }
    } else {
      __CrestBranch(68662, 44418, 0);

    }
    }
    }
    __CrestLoad(68723, (unsigned long )(& i), (long long )i);
    __CrestLoad(68722, (unsigned long )0, (long long )1);
    __CrestApply2(68721, 0, (long long )(i + 1));
    __CrestStore(68724, (unsigned long )(& i));
# 2857 "xmlparse.c"
    i ++;
  }
  while_break___2: ;
  }
# 2881 "xmlparse.c"
  mem_120 = appAtts + attIndex;
# 2881 "xmlparse.c"
  *mem_120 = (XML_Char const *)0;
  __CrestLoad(68725, (unsigned long )0, (long long )0);
  __CrestStore(68726, (unsigned long )(& i));
# 2885 "xmlparse.c"
  i = 0;
  {
  __CrestLoad(68729, (unsigned long )(& nPrefixes), (long long )nPrefixes);
  __CrestLoad(68728, (unsigned long )0, (long long )0);
  __CrestApply2(68727, 13, (long long )(nPrefixes != 0));
# 2886 "xmlparse.c"
  if (nPrefixes != 0) {
    __CrestBranch(68730, 44423, 1);
    __CrestLoad(68732, (unsigned long )(& parser->m_nsAttsVersion), (long long )parser->m_nsAttsVersion);
    __CrestStore(68733, (unsigned long )(& version));
# 2888 "xmlparse.c"
    version = parser->m_nsAttsVersion;
    __CrestLoad(68736, (unsigned long )0, (long long )1);
    __CrestLoad(68735, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
    __CrestApply2(68734, 8, (long long )(1 << (int )parser->m_nsAttsPower));
    __CrestStore(68737, (unsigned long )(& nsAttsSize));
# 2889 "xmlparse.c"
    nsAttsSize = 1 << (int )parser->m_nsAttsPower;
    {
    __CrestLoad(68744, (unsigned long )(& nPrefixes), (long long )nPrefixes);
    __CrestLoad(68743, (unsigned long )0, (long long )1);
    __CrestApply2(68742, 8, (long long )(nPrefixes << 1));
    __CrestLoad(68741, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
    __CrestApply2(68740, 9, (long long )((nPrefixes << 1) >> (int )parser->m_nsAttsPower));
    __CrestLoad(68739, (unsigned long )0, (long long )0);
    __CrestApply2(68738, 13, (long long )((nPrefixes << 1) >> (int )parser->m_nsAttsPower != 0));
# 2891 "xmlparse.c"
    if ((nPrefixes << 1) >> (int )parser->m_nsAttsPower != 0) {
      __CrestBranch(68745, 44425, 1);
      {
# 2894 "xmlparse.c"
      while (1) {
        while_continue___3: ;
        __CrestLoad(68747, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
        __CrestStore(68748, (unsigned long )(& tmp___14));
# 2894 "xmlparse.c"
        tmp___14 = parser->m_nsAttsPower;
        __CrestLoad(68751, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
        __CrestLoad(68750, (unsigned long )0, (long long )1);
        __CrestApply2(68749, 0, (long long )((int )parser->m_nsAttsPower + 1));
        __CrestStore(68752, (unsigned long )(& parser->m_nsAttsPower));
# 2894 "xmlparse.c"
        parser->m_nsAttsPower = (unsigned char )((int )parser->m_nsAttsPower + 1);
        {
        __CrestLoad(68757, (unsigned long )(& nPrefixes), (long long )nPrefixes);
        __CrestLoad(68756, (unsigned long )(& tmp___14), (long long )tmp___14);
        __CrestApply2(68755, 9, (long long )(nPrefixes >> (int )tmp___14));
        __CrestLoad(68754, (unsigned long )0, (long long )0);
        __CrestApply2(68753, 13, (long long )(nPrefixes >> (int )tmp___14 != 0));
# 2894 "xmlparse.c"
        if (nPrefixes >> (int )tmp___14 != 0) {
          __CrestBranch(68758, 44430, 1);

        } else {
          __CrestBranch(68759, 44431, 0);
# 2894 "xmlparse.c"
          goto while_break___3;
        }
        }
      }
      while_break___3: ;
      }
      {
      __CrestLoad(68762, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
      __CrestLoad(68761, (unsigned long )0, (long long )3);
      __CrestApply2(68760, 16, (long long )((int )parser->m_nsAttsPower < 3));
# 2895 "xmlparse.c"
      if ((int )parser->m_nsAttsPower < 3) {
        __CrestBranch(68763, 44434, 1);
        __CrestLoad(68765, (unsigned long )0, (long long )(unsigned char)3);
        __CrestStore(68766, (unsigned long )(& parser->m_nsAttsPower));
# 2896 "xmlparse.c"
        parser->m_nsAttsPower = (unsigned char)3;
      } else {
        __CrestBranch(68764, 44435, 0);

      }
      }
      __CrestLoad(68769, (unsigned long )0, (long long )1);
      __CrestLoad(68768, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
      __CrestApply2(68767, 8, (long long )(1 << (int )parser->m_nsAttsPower));
      __CrestStore(68770, (unsigned long )(& nsAttsSize));
# 2897 "xmlparse.c"
      nsAttsSize = 1 << (int )parser->m_nsAttsPower;
# 2898 "xmlparse.c"
      mem_121 = parser->m_mem.realloc_fcn;
      __CrestLoad(68773, (unsigned long )(& nsAttsSize), (long long )nsAttsSize);
      __CrestLoad(68772, (unsigned long )0, (long long )sizeof(NS_ATT ));
      __CrestApply2(68771, 2, (long long )((unsigned long )nsAttsSize * sizeof(NS_ATT )));
# 2898 "xmlparse.c"
      tmp___15 = (*mem_121)((void *)parser->m_nsAtts, (unsigned long )nsAttsSize * sizeof(NS_ATT ));
      __CrestClearStack(68774);
# 2898 "xmlparse.c"
      temp___0 = (NS_ATT *)tmp___15;
      {
      __CrestLoad(68777, (unsigned long )(& temp___0), (long long )((unsigned long )temp___0));
      __CrestLoad(68776, (unsigned long )0, (long long )0);
      __CrestApply2(68775, 12, (long long )(temp___0 == 0));
# 2899 "xmlparse.c"
      if (temp___0 == 0) {
        __CrestBranch(68778, 44438, 1);
        __CrestLoad(68780, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(68781, (unsigned long )(& __retres151));
# 2900 "xmlparse.c"
        __retres151 = (enum XML_Error )1;
# 2900 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(68779, 44440, 0);

      }
      }
# 2901 "xmlparse.c"
      parser->m_nsAtts = temp___0;
      __CrestLoad(68782, (unsigned long )0, (long long )0UL);
      __CrestStore(68783, (unsigned long )(& version));
# 2902 "xmlparse.c"
      version = 0UL;
    } else {
      __CrestBranch(68746, 44442, 0);

    }
    }
    {
    __CrestLoad(68786, (unsigned long )(& version), (long long )version);
    __CrestLoad(68785, (unsigned long )0, (long long )0);
    __CrestApply2(68784, 12, (long long )(version == 0));
# 2905 "xmlparse.c"
    if (version == 0) {
      __CrestBranch(68787, 44444, 1);
      __CrestLoad(68789, (unsigned long )0, (long long )4294967295UL);
      __CrestStore(68790, (unsigned long )(& version));
# 2906 "xmlparse.c"
      version = 4294967295UL;
      __CrestLoad(68791, (unsigned long )(& nsAttsSize), (long long )nsAttsSize);
      __CrestStore(68792, (unsigned long )(& j___0));
# 2907 "xmlparse.c"
      j___0 = nsAttsSize;
      {
# 2907 "xmlparse.c"
      while (1) {
        while_continue___4: ;
        {
        __CrestLoad(68795, (unsigned long )(& j___0), (long long )j___0);
        __CrestLoad(68794, (unsigned long )0, (long long )0);
        __CrestApply2(68793, 13, (long long )(j___0 != 0));
# 2907 "xmlparse.c"
        if (j___0 != 0) {
          __CrestBranch(68796, 44449, 1);

        } else {
          __CrestBranch(68797, 44450, 0);
# 2907 "xmlparse.c"
          goto while_break___4;
        }
        }
        __CrestLoad(68800, (unsigned long )(& j___0), (long long )j___0);
        __CrestLoad(68799, (unsigned long )0, (long long )1);
        __CrestApply2(68798, 1, (long long )(j___0 - 1));
        __CrestStore(68801, (unsigned long )(& j___0));
# 2908 "xmlparse.c"
        j___0 --;
# 2908 "xmlparse.c"
        mem_122 = parser->m_nsAtts + j___0;
        __CrestLoad(68802, (unsigned long )(& version), (long long )version);
        __CrestStore(68803, (unsigned long )(& mem_122->version));
# 2908 "xmlparse.c"
        mem_122->version = version;
      }
      while_break___4: ;
      }
    } else {
      __CrestBranch(68788, 44453, 0);

    }
    }
    __CrestLoad(68806, (unsigned long )(& version), (long long )version);
    __CrestLoad(68805, (unsigned long )0, (long long )1UL);
    __CrestApply2(68804, 1, (long long )(version - 1UL));
    __CrestStore(68807, (unsigned long )(& version));
# 2910 "xmlparse.c"
    version --;
    __CrestLoad(68808, (unsigned long )(& version), (long long )version);
    __CrestStore(68809, (unsigned long )(& parser->m_nsAttsVersion));
# 2910 "xmlparse.c"
    parser->m_nsAttsVersion = version;
    {
# 2913 "xmlparse.c"
    while (1) {
      while_continue___5: ;
      {
      __CrestLoad(68812, (unsigned long )(& i), (long long )i);
      __CrestLoad(68811, (unsigned long )(& attIndex), (long long )attIndex);
      __CrestApply2(68810, 16, (long long )(i < attIndex));
# 2913 "xmlparse.c"
      if (i < attIndex) {
        __CrestBranch(68813, 44459, 1);

      } else {
        __CrestBranch(68814, 44460, 0);
# 2913 "xmlparse.c"
        goto while_break___5;
      }
      }
# 2914 "xmlparse.c"
      mem_123 = appAtts + i;
# 2914 "xmlparse.c"
      s = *mem_123;
      {
# 2915 "xmlparse.c"
      mem_124 = s + -1;
      {
      __CrestLoad(68817, (unsigned long )mem_124, (long long )*mem_124);
      __CrestLoad(68816, (unsigned long )0, (long long )2);
      __CrestApply2(68815, 12, (long long )((int const )*mem_124 == 2));
# 2915 "xmlparse.c"
      if ((int const )*mem_124 == 2) {
        __CrestBranch(68818, 44465, 1);
        __CrestLoad(68820, (unsigned long )(& parser->m_hash_secret_salt), (long long )parser->m_hash_secret_salt);
        __CrestStore(68821, (unsigned long )(& uriHash));
# 2918 "xmlparse.c"
        uriHash = parser->m_hash_secret_salt;
# 2919 "xmlparse.c"
        mem_125 = (XML_Char *)s + -1;
        __CrestLoad(68822, (unsigned long )0, (long long )((XML_Char )0));
        __CrestStore(68823, (unsigned long )mem_125);
# 2919 "xmlparse.c"
        *mem_125 = (XML_Char )0;
        __CrestLoad(68824, (unsigned long )0, (long long )((size_t )0));
# 2920 "xmlparse.c"
        tmp___16 = lookup(parser, & dtd->attributeIds, s, (size_t )0);
        __CrestClearStack(68825);
# 2920 "xmlparse.c"
        id = (ATTRIBUTE_ID *)tmp___16;
# 2921 "xmlparse.c"
        mem_126 = id->prefix;
# 2921 "xmlparse.c"
        b = (BINDING const *)mem_126->binding;
        {
        __CrestLoad(68828, (unsigned long )(& b), (long long )((unsigned long )b));
        __CrestLoad(68827, (unsigned long )0, (long long )0);
        __CrestApply2(68826, 12, (long long )(b == 0));
# 2922 "xmlparse.c"
        if (b == 0) {
          __CrestBranch(68829, 44467, 1);
          __CrestLoad(68831, (unsigned long )0, (long long )((enum XML_Error )27));
          __CrestStore(68832, (unsigned long )(& __retres151));
# 2923 "xmlparse.c"
          __retres151 = (enum XML_Error )27;
# 2923 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(68830, 44469, 0);

        }
        }
        __CrestLoad(68833, (unsigned long )0, (long long )0);
        __CrestStore(68834, (unsigned long )(& j___0));
# 2926 "xmlparse.c"
        j___0 = 0;
        {
# 2926 "xmlparse.c"
        while (1) {
          while_continue___6: ;
          {
          __CrestLoad(68837, (unsigned long )(& j___0), (long long )j___0);
          __CrestLoad(68836, (unsigned long )(& b->uriLen), (long long )b->uriLen);
          __CrestApply2(68835, 16, (long long )(j___0 < (int )b->uriLen));
# 2926 "xmlparse.c"
          if (j___0 < (int )b->uriLen) {
            __CrestBranch(68838, 44475, 1);

          } else {
            __CrestBranch(68839, 44476, 0);
# 2926 "xmlparse.c"
            goto while_break___6;
          }
          }
# 2927 "xmlparse.c"
          mem_127 = b->uri + j___0;
          __CrestLoad(68840, (unsigned long )mem_127, (long long )*mem_127);
          __CrestStore(68841, (unsigned long )(& c));
# 2927 "xmlparse.c"
          c = *mem_127;
          {
          __CrestLoad(68844, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
          __CrestLoad(68843, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
          __CrestApply2(68842, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 2928 "xmlparse.c"
          if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
            __CrestBranch(68845, 44479, 1);
# 2928 "xmlparse.c"
            tmp___20 = poolGrow(& parser->m_tempPool);
            __CrestHandleReturn(68848, (long long )tmp___20);
            __CrestStore(68847, (unsigned long )(& tmp___20));
            {
            __CrestLoad(68851, (unsigned long )(& tmp___20), (long long )tmp___20);
            __CrestLoad(68850, (unsigned long )0, (long long )0);
            __CrestApply2(68849, 13, (long long )(tmp___20 != 0));
# 2928 "xmlparse.c"
            if (tmp___20 != 0) {
              __CrestBranch(68852, 44481, 1);
# 2928 "xmlparse.c"
              tmp___18 = parser->m_tempPool.ptr;
# 2928 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(68854, (unsigned long )(& c), (long long )c);
              __CrestStore(68855, (unsigned long )tmp___18);
# 2928 "xmlparse.c"
              *tmp___18 = c;
              __CrestLoad(68856, (unsigned long )0, (long long )1);
              __CrestStore(68857, (unsigned long )(& tmp___19));
# 2928 "xmlparse.c"
              tmp___19 = 1;
            } else {
              __CrestBranch(68853, 44482, 0);
              __CrestLoad(68858, (unsigned long )0, (long long )0);
              __CrestStore(68859, (unsigned long )(& tmp___19));
# 2928 "xmlparse.c"
              tmp___19 = 0;
            }
            }
          } else {
            __CrestBranch(68846, 44483, 0);
# 2928 "xmlparse.c"
            tmp___18 = parser->m_tempPool.ptr;
# 2928 "xmlparse.c"
            (parser->m_tempPool.ptr) ++;
            __CrestLoad(68860, (unsigned long )(& c), (long long )c);
            __CrestStore(68861, (unsigned long )tmp___18);
# 2928 "xmlparse.c"
            *tmp___18 = c;
            __CrestLoad(68862, (unsigned long )0, (long long )1);
            __CrestStore(68863, (unsigned long )(& tmp___19));
# 2928 "xmlparse.c"
            tmp___19 = 1;
          }
          }
          {
          __CrestLoad(68866, (unsigned long )(& tmp___19), (long long )tmp___19);
          __CrestLoad(68865, (unsigned long )0, (long long )0);
          __CrestApply2(68864, 13, (long long )(tmp___19 != 0));
# 2928 "xmlparse.c"
          if (tmp___19 != 0) {
            __CrestBranch(68867, 44485, 1);

          } else {
            __CrestBranch(68868, 44486, 0);
            __CrestLoad(68869, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(68870, (unsigned long )(& __retres151));
# 2929 "xmlparse.c"
            __retres151 = (enum XML_Error )1;
# 2929 "xmlparse.c"
            goto return_label;
          }
          }
          __CrestLoad(68875, (unsigned long )(& uriHash), (long long )uriHash);
          __CrestLoad(68874, (unsigned long )0, (long long )1000003UL);
          __CrestApply2(68873, 2, (long long )(uriHash * 1000003UL));
          __CrestLoad(68872, (unsigned long )(& c), (long long )c);
          __CrestApply2(68871, 7, (long long )(uriHash * 1000003UL ^ (unsigned long )((unsigned char )c)));
          __CrestStore(68876, (unsigned long )(& uriHash));
# 2930 "xmlparse.c"
          uriHash = uriHash * 1000003UL ^ (unsigned long )((unsigned char )c);
          __CrestLoad(68879, (unsigned long )(& j___0), (long long )j___0);
          __CrestLoad(68878, (unsigned long )0, (long long )1);
          __CrestApply2(68877, 0, (long long )(j___0 + 1));
          __CrestStore(68880, (unsigned long )(& j___0));
# 2926 "xmlparse.c"
          j___0 ++;
        }
        while_break___6: ;
        }
        {
# 2932 "xmlparse.c"
        while (1) {
          while_continue___7: ;
# 2932 "xmlparse.c"
          tmp___21 = s;
# 2932 "xmlparse.c"
          s ++;
          {
          __CrestLoad(68883, (unsigned long )tmp___21, (long long )*tmp___21);
          __CrestLoad(68882, (unsigned long )0, (long long )58);
          __CrestApply2(68881, 13, (long long )((int const )*tmp___21 != 58));
# 2932 "xmlparse.c"
          if ((int const )*tmp___21 != 58) {
            __CrestBranch(68884, 44495, 1);

          } else {
            __CrestBranch(68885, 44496, 0);
# 2932 "xmlparse.c"
            goto while_break___7;
          }
          }
        }
        while_break___7: ;
        }
        {
# 2934 "xmlparse.c"
        while (1) {
          while_continue___8: ;
          __CrestLoad(68886, (unsigned long )s, (long long )*s);
          __CrestStore(68887, (unsigned long )(& c___0));
# 2935 "xmlparse.c"
          c___0 = (XML_Char )*s;
          {
          __CrestLoad(68890, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
          __CrestLoad(68889, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
          __CrestApply2(68888, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 2936 "xmlparse.c"
          if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
            __CrestBranch(68891, 44503, 1);
# 2936 "xmlparse.c"
            tmp___25 = poolGrow(& parser->m_tempPool);
            __CrestHandleReturn(68894, (long long )tmp___25);
            __CrestStore(68893, (unsigned long )(& tmp___25));
            {
            __CrestLoad(68897, (unsigned long )(& tmp___25), (long long )tmp___25);
            __CrestLoad(68896, (unsigned long )0, (long long )0);
            __CrestApply2(68895, 13, (long long )(tmp___25 != 0));
# 2936 "xmlparse.c"
            if (tmp___25 != 0) {
              __CrestBranch(68898, 44505, 1);
# 2936 "xmlparse.c"
              tmp___23 = parser->m_tempPool.ptr;
# 2936 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(68900, (unsigned long )s, (long long )*s);
              __CrestStore(68901, (unsigned long )tmp___23);
# 2936 "xmlparse.c"
              *tmp___23 = (XML_Char )*s;
              __CrestLoad(68902, (unsigned long )0, (long long )1);
              __CrestStore(68903, (unsigned long )(& tmp___24));
# 2936 "xmlparse.c"
              tmp___24 = 1;
            } else {
              __CrestBranch(68899, 44506, 0);
              __CrestLoad(68904, (unsigned long )0, (long long )0);
              __CrestStore(68905, (unsigned long )(& tmp___24));
# 2936 "xmlparse.c"
              tmp___24 = 0;
            }
            }
          } else {
            __CrestBranch(68892, 44507, 0);
# 2936 "xmlparse.c"
            tmp___23 = parser->m_tempPool.ptr;
# 2936 "xmlparse.c"
            (parser->m_tempPool.ptr) ++;
            __CrestLoad(68906, (unsigned long )s, (long long )*s);
            __CrestStore(68907, (unsigned long )tmp___23);
# 2936 "xmlparse.c"
            *tmp___23 = (XML_Char )*s;
            __CrestLoad(68908, (unsigned long )0, (long long )1);
            __CrestStore(68909, (unsigned long )(& tmp___24));
# 2936 "xmlparse.c"
            tmp___24 = 1;
          }
          }
          {
          __CrestLoad(68912, (unsigned long )(& tmp___24), (long long )tmp___24);
          __CrestLoad(68911, (unsigned long )0, (long long )0);
          __CrestApply2(68910, 13, (long long )(tmp___24 != 0));
# 2936 "xmlparse.c"
          if (tmp___24 != 0) {
            __CrestBranch(68913, 44509, 1);

          } else {
            __CrestBranch(68914, 44510, 0);
            __CrestLoad(68915, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(68916, (unsigned long )(& __retres151));
# 2937 "xmlparse.c"
            __retres151 = (enum XML_Error )1;
# 2937 "xmlparse.c"
            goto return_label;
          }
          }
          __CrestLoad(68921, (unsigned long )(& uriHash), (long long )uriHash);
          __CrestLoad(68920, (unsigned long )0, (long long )1000003UL);
          __CrestApply2(68919, 2, (long long )(uriHash * 1000003UL));
          __CrestLoad(68918, (unsigned long )(& c___0), (long long )c___0);
          __CrestApply2(68917, 7, (long long )(uriHash * 1000003UL ^ (unsigned long )((unsigned char )c___0)));
          __CrestStore(68922, (unsigned long )(& uriHash));
# 2938 "xmlparse.c"
          uriHash = uriHash * 1000003UL ^ (unsigned long )((unsigned char )c___0);
# 2934 "xmlparse.c"
          tmp___26 = s;
# 2934 "xmlparse.c"
          s ++;
          {
          __CrestLoad(68925, (unsigned long )tmp___26, (long long )*tmp___26);
          __CrestLoad(68924, (unsigned long )0, (long long )0);
          __CrestApply2(68923, 13, (long long )(*tmp___26 != 0));
# 2934 "xmlparse.c"
          if (*tmp___26 != 0) {
            __CrestBranch(68926, 44514, 1);

          } else {
            __CrestBranch(68927, 44515, 0);
# 2934 "xmlparse.c"
            goto while_break___8;
          }
          }
        }
        while_break___8: ;
        }
        __CrestLoad(68928, (unsigned long )0, (long long )(unsigned char)0);
        __CrestStore(68929, (unsigned long )(& step));
# 2944 "xmlparse.c"
        step = (unsigned char)0;
        __CrestLoad(68932, (unsigned long )(& nsAttsSize), (long long )nsAttsSize);
        __CrestLoad(68931, (unsigned long )0, (long long )1);
        __CrestApply2(68930, 1, (long long )(nsAttsSize - 1));
        __CrestStore(68933, (unsigned long )(& mask));
# 2945 "xmlparse.c"
        mask = (unsigned long )(nsAttsSize - 1);
        __CrestLoad(68936, (unsigned long )(& uriHash), (long long )uriHash);
        __CrestLoad(68935, (unsigned long )(& mask), (long long )mask);
        __CrestApply2(68934, 5, (long long )(uriHash & mask));
        __CrestStore(68937, (unsigned long )(& j___0));
# 2946 "xmlparse.c"
        j___0 = (int )(uriHash & mask);
        {
# 2947 "xmlparse.c"
        while (1) {
          while_continue___9: ;
          {
# 2947 "xmlparse.c"
          mem_128 = parser->m_nsAtts + j___0;
          {
          __CrestLoad(68940, (unsigned long )(& mem_128->version), (long long )mem_128->version);
          __CrestLoad(68939, (unsigned long )(& version), (long long )version);
          __CrestApply2(68938, 12, (long long )(mem_128->version == version));
# 2947 "xmlparse.c"
          if (mem_128->version == version) {
            __CrestBranch(68941, 44524, 1);

          } else {
            __CrestBranch(68942, 44525, 0);
# 2947 "xmlparse.c"
            goto while_break___9;
          }
          }
          }
          {
# 2949 "xmlparse.c"
          mem_129 = parser->m_nsAtts + j___0;
          {
          __CrestLoad(68945, (unsigned long )(& uriHash), (long long )uriHash);
          __CrestLoad(68944, (unsigned long )(& mem_129->hash), (long long )mem_129->hash);
          __CrestApply2(68943, 12, (long long )(uriHash == mem_129->hash));
# 2949 "xmlparse.c"
          if (uriHash == mem_129->hash) {
            __CrestBranch(68946, 44529, 1);
# 2950 "xmlparse.c"
            s1 = (XML_Char const *)parser->m_tempPool.start;
# 2951 "xmlparse.c"
            mem_130 = parser->m_nsAtts + j___0;
# 2951 "xmlparse.c"
            s2 = mem_130->uriName;
            {
# 2953 "xmlparse.c"
            while (1) {
              while_continue___10: ;
              {
              __CrestLoad(68950, (unsigned long )s1, (long long )*s1);
              __CrestLoad(68949, (unsigned long )s2, (long long )*s2);
              __CrestApply2(68948, 12, (long long )((int const )*s1 == (int const )*s2));
# 2953 "xmlparse.c"
              if ((int const )*s1 == (int const )*s2) {
                __CrestBranch(68951, 44534, 1);
                {
                __CrestLoad(68955, (unsigned long )s1, (long long )*s1);
                __CrestLoad(68954, (unsigned long )0, (long long )0);
                __CrestApply2(68953, 13, (long long )((int const )*s1 != 0));
# 2953 "xmlparse.c"
                if ((int const )*s1 != 0) {
                  __CrestBranch(68956, 44535, 1);

                } else {
                  __CrestBranch(68957, 44536, 0);
# 2953 "xmlparse.c"
                  goto while_break___10;
                }
                }
              } else {
                __CrestBranch(68952, 44537, 0);
# 2953 "xmlparse.c"
                goto while_break___10;
              }
              }
# 2953 "xmlparse.c"
              s1 ++;
# 2953 "xmlparse.c"
              s2 ++;
            }
            while_break___10: ;
            }
            {
            __CrestLoad(68960, (unsigned long )s1, (long long )*s1);
            __CrestLoad(68959, (unsigned long )0, (long long )0);
            __CrestApply2(68958, 12, (long long )((int const )*s1 == 0));
# 2954 "xmlparse.c"
            if ((int const )*s1 == 0) {
              __CrestBranch(68961, 44541, 1);
              __CrestLoad(68963, (unsigned long )0, (long long )((enum XML_Error )8));
              __CrestStore(68964, (unsigned long )(& __retres151));
# 2955 "xmlparse.c"
              __retres151 = (enum XML_Error )8;
# 2955 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(68962, 44543, 0);

            }
            }
          } else {
            __CrestBranch(68947, 44544, 0);

          }
          }
          }
          {
          __CrestLoad(68967, (unsigned long )(& step), (long long )step);
          __CrestLoad(68966, (unsigned long )0, (long long )0);
          __CrestApply2(68965, 12, (long long )(step == 0));
# 2957 "xmlparse.c"
          if (step == 0) {
            __CrestBranch(68968, 44546, 1);
            __CrestLoad(68983, (unsigned long )(& uriHash), (long long )uriHash);
            __CrestLoad(68982, (unsigned long )(& mask), (long long )mask);
            __CrestApply1(68981, 20, (long long )(~ mask));
            __CrestApply2(68980, 5, (long long )(uriHash & ~ mask));
            __CrestLoad(68979, (unsigned long )(& parser->m_nsAttsPower), (long long )parser->m_nsAttsPower);
            __CrestLoad(68978, (unsigned long )0, (long long )1);
            __CrestApply2(68977, 1, (long long )((int )parser->m_nsAttsPower - 1));
            __CrestApply2(68976, 9, (long long )((uriHash & ~ mask) >> ((int )parser->m_nsAttsPower - 1)));
            __CrestLoad(68975, (unsigned long )(& mask), (long long )mask);
            __CrestLoad(68974, (unsigned long )0, (long long )2);
            __CrestApply2(68973, 9, (long long )(mask >> 2));
            __CrestApply2(68972, 5, (long long )(((uriHash & ~ mask) >> ((int )parser->m_nsAttsPower - 1)) & (mask >> 2)));
            __CrestLoad(68971, (unsigned long )0, (long long )1UL);
            __CrestApply2(68970, 6, (long long )((((uriHash & ~ mask) >> ((int )parser->m_nsAttsPower - 1)) & (mask >> 2)) | 1UL));
            __CrestStore(68984, (unsigned long )(& step));
# 2958 "xmlparse.c"
            step = (unsigned char )((((uriHash & ~ mask) >> ((int )parser->m_nsAttsPower - 1)) & (mask >> 2)) | 1UL);
          } else {
            __CrestBranch(68969, 44547, 0);

          }
          }
          {
          __CrestLoad(68987, (unsigned long )(& j___0), (long long )j___0);
          __CrestLoad(68986, (unsigned long )(& step), (long long )step);
          __CrestApply2(68985, 16, (long long )(j___0 < (int )step));
# 2959 "xmlparse.c"
          if (j___0 < (int )step) {
            __CrestBranch(68988, 44549, 1);
            __CrestLoad(68994, (unsigned long )(& j___0), (long long )j___0);
            __CrestLoad(68993, (unsigned long )(& nsAttsSize), (long long )nsAttsSize);
            __CrestLoad(68992, (unsigned long )(& step), (long long )step);
            __CrestApply2(68991, 1, (long long )(nsAttsSize - (int )step));
            __CrestApply2(68990, 0, (long long )(j___0 + (nsAttsSize - (int )step)));
            __CrestStore(68995, (unsigned long )(& j___0));
# 2959 "xmlparse.c"
            j___0 += nsAttsSize - (int )step;
          } else {
            __CrestBranch(68989, 44550, 0);
            __CrestLoad(68998, (unsigned long )(& j___0), (long long )j___0);
            __CrestLoad(68997, (unsigned long )(& step), (long long )step);
            __CrestApply2(68996, 1, (long long )(j___0 - (int )step));
            __CrestStore(68999, (unsigned long )(& j___0));
# 2959 "xmlparse.c"
            j___0 -= (int )step;
          }
          }
        }
        while_break___9: ;
        }
        {
        __CrestLoad(69002, (unsigned long )(& parser->m_ns_triplets), (long long )parser->m_ns_triplets);
        __CrestLoad(69001, (unsigned long )0, (long long )0);
        __CrestApply2(69000, 13, (long long )(parser->m_ns_triplets != 0));
# 2963 "xmlparse.c"
        if (parser->m_ns_triplets != 0) {
          __CrestBranch(69003, 44553, 1);
# 2964 "xmlparse.c"
          mem_131 = parser->m_tempPool.ptr + -1;
          __CrestLoad(69005, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
          __CrestStore(69006, (unsigned long )mem_131);
# 2964 "xmlparse.c"
          *mem_131 = parser->m_namespaceSeparator;
# 2965 "xmlparse.c"
          mem_132 = b->prefix;
# 2965 "xmlparse.c"
          s = mem_132->name;
          {
# 2966 "xmlparse.c"
          while (1) {
            while_continue___11: ;
            {
            __CrestLoad(69009, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
            __CrestLoad(69008, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
            __CrestApply2(69007, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 2967 "xmlparse.c"
            if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
              __CrestBranch(69010, 44558, 1);
# 2967 "xmlparse.c"
              tmp___30 = poolGrow(& parser->m_tempPool);
              __CrestHandleReturn(69013, (long long )tmp___30);
              __CrestStore(69012, (unsigned long )(& tmp___30));
              {
              __CrestLoad(69016, (unsigned long )(& tmp___30), (long long )tmp___30);
              __CrestLoad(69015, (unsigned long )0, (long long )0);
              __CrestApply2(69014, 13, (long long )(tmp___30 != 0));
# 2967 "xmlparse.c"
              if (tmp___30 != 0) {
                __CrestBranch(69017, 44560, 1);
# 2967 "xmlparse.c"
                tmp___28 = parser->m_tempPool.ptr;
# 2967 "xmlparse.c"
                (parser->m_tempPool.ptr) ++;
                __CrestLoad(69019, (unsigned long )s, (long long )*s);
                __CrestStore(69020, (unsigned long )tmp___28);
# 2967 "xmlparse.c"
                *tmp___28 = (XML_Char )*s;
                __CrestLoad(69021, (unsigned long )0, (long long )1);
                __CrestStore(69022, (unsigned long )(& tmp___29));
# 2967 "xmlparse.c"
                tmp___29 = 1;
              } else {
                __CrestBranch(69018, 44561, 0);
                __CrestLoad(69023, (unsigned long )0, (long long )0);
                __CrestStore(69024, (unsigned long )(& tmp___29));
# 2967 "xmlparse.c"
                tmp___29 = 0;
              }
              }
            } else {
              __CrestBranch(69011, 44562, 0);
# 2967 "xmlparse.c"
              tmp___28 = parser->m_tempPool.ptr;
# 2967 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(69025, (unsigned long )s, (long long )*s);
              __CrestStore(69026, (unsigned long )tmp___28);
# 2967 "xmlparse.c"
              *tmp___28 = (XML_Char )*s;
              __CrestLoad(69027, (unsigned long )0, (long long )1);
              __CrestStore(69028, (unsigned long )(& tmp___29));
# 2967 "xmlparse.c"
              tmp___29 = 1;
            }
            }
            {
            __CrestLoad(69031, (unsigned long )(& tmp___29), (long long )tmp___29);
            __CrestLoad(69030, (unsigned long )0, (long long )0);
            __CrestApply2(69029, 13, (long long )(tmp___29 != 0));
# 2967 "xmlparse.c"
            if (tmp___29 != 0) {
              __CrestBranch(69032, 44564, 1);

            } else {
              __CrestBranch(69033, 44565, 0);
              __CrestLoad(69034, (unsigned long )0, (long long )((enum XML_Error )1));
              __CrestStore(69035, (unsigned long )(& __retres151));
# 2968 "xmlparse.c"
              __retres151 = (enum XML_Error )1;
# 2968 "xmlparse.c"
              goto return_label;
            }
            }
# 2966 "xmlparse.c"
            tmp___31 = s;
# 2966 "xmlparse.c"
            s ++;
            {
            __CrestLoad(69038, (unsigned long )tmp___31, (long long )*tmp___31);
            __CrestLoad(69037, (unsigned long )0, (long long )0);
            __CrestApply2(69036, 13, (long long )(*tmp___31 != 0));
# 2966 "xmlparse.c"
            if (*tmp___31 != 0) {
              __CrestBranch(69039, 44569, 1);

            } else {
              __CrestBranch(69040, 44570, 0);
# 2966 "xmlparse.c"
              goto while_break___11;
            }
            }
          }
          while_break___11: ;
          }
        } else {
          __CrestBranch(69004, 44572, 0);

        }
        }
# 2973 "xmlparse.c"
        s = (XML_Char const *)parser->m_tempPool.start;
# 2974 "xmlparse.c"
        parser->m_tempPool.start = parser->m_tempPool.ptr;
# 2975 "xmlparse.c"
        mem_133 = appAtts + i;
# 2975 "xmlparse.c"
        *mem_133 = s;
# 2978 "xmlparse.c"
        mem_134 = parser->m_nsAtts + j___0;
        __CrestLoad(69041, (unsigned long )(& version), (long long )version);
        __CrestStore(69042, (unsigned long )(& mem_134->version));
# 2978 "xmlparse.c"
        mem_134->version = version;
# 2979 "xmlparse.c"
        mem_135 = parser->m_nsAtts + j___0;
        __CrestLoad(69043, (unsigned long )(& uriHash), (long long )uriHash);
        __CrestStore(69044, (unsigned long )(& mem_135->hash));
# 2979 "xmlparse.c"
        mem_135->hash = uriHash;
# 2980 "xmlparse.c"
        mem_136 = parser->m_nsAtts + j___0;
# 2980 "xmlparse.c"
        mem_136->uriName = s;
        __CrestLoad(69047, (unsigned long )(& nPrefixes), (long long )nPrefixes);
        __CrestLoad(69046, (unsigned long )0, (long long )1);
        __CrestApply2(69045, 1, (long long )(nPrefixes - 1));
        __CrestStore(69048, (unsigned long )(& nPrefixes));
# 2982 "xmlparse.c"
        nPrefixes --;
        {
        __CrestLoad(69051, (unsigned long )(& nPrefixes), (long long )nPrefixes);
        __CrestLoad(69050, (unsigned long )0, (long long )0);
        __CrestApply2(69049, 13, (long long )(nPrefixes != 0));
# 2982 "xmlparse.c"
        if (nPrefixes != 0) {
          __CrestBranch(69052, 44575, 1);

        } else {
          __CrestBranch(69053, 44576, 0);
          __CrestLoad(69056, (unsigned long )(& i), (long long )i);
          __CrestLoad(69055, (unsigned long )0, (long long )2);
          __CrestApply2(69054, 0, (long long )(i + 2));
          __CrestStore(69057, (unsigned long )(& i));
# 2983 "xmlparse.c"
          i += 2;
# 2984 "xmlparse.c"
          goto while_break___5;
        }
        }
      } else {
        __CrestBranch(68819, 44578, 0);
# 2988 "xmlparse.c"
        mem_137 = (XML_Char *)s + -1;
        __CrestLoad(69058, (unsigned long )0, (long long )((XML_Char )0));
        __CrestStore(69059, (unsigned long )mem_137);
# 2988 "xmlparse.c"
        *mem_137 = (XML_Char )0;
      }
      }
      }
      __CrestLoad(69062, (unsigned long )(& i), (long long )i);
      __CrestLoad(69061, (unsigned long )0, (long long )2);
      __CrestApply2(69060, 0, (long long )(i + 2));
      __CrestStore(69063, (unsigned long )(& i));
# 2913 "xmlparse.c"
      i += 2;
    }
    while_break___5: ;
    }
  } else {
    __CrestBranch(68731, 44581, 0);

  }
  }
  {
# 2992 "xmlparse.c"
  while (1) {
    while_continue___12: ;
    {
    __CrestLoad(69066, (unsigned long )(& i), (long long )i);
    __CrestLoad(69065, (unsigned long )(& attIndex), (long long )attIndex);
    __CrestApply2(69064, 16, (long long )(i < attIndex));
# 2992 "xmlparse.c"
    if (i < attIndex) {
      __CrestBranch(69067, 44586, 1);

    } else {
      __CrestBranch(69068, 44587, 0);
# 2992 "xmlparse.c"
      goto while_break___12;
    }
    }
# 2993 "xmlparse.c"
    mem_138 = appAtts + i;
# 2993 "xmlparse.c"
    mem_139 = (XML_Char *)*mem_138 + -1;
    __CrestLoad(69069, (unsigned long )0, (long long )((XML_Char )0));
    __CrestStore(69070, (unsigned long )mem_139);
# 2993 "xmlparse.c"
    *mem_139 = (XML_Char )0;
    __CrestLoad(69073, (unsigned long )(& i), (long long )i);
    __CrestLoad(69072, (unsigned long )0, (long long )2);
    __CrestApply2(69071, 0, (long long )(i + 2));
    __CrestStore(69074, (unsigned long )(& i));
# 2992 "xmlparse.c"
    i += 2;
  }
  while_break___12: ;
  }
# 2994 "xmlparse.c"
  binding = *bindingsPtr;
  {
# 2994 "xmlparse.c"
  while (1) {
    while_continue___13: ;
    {
    __CrestLoad(69077, (unsigned long )(& binding), (long long )((unsigned long )binding));
    __CrestLoad(69076, (unsigned long )0, (long long )0);
    __CrestApply2(69075, 13, (long long )(binding != 0));
# 2994 "xmlparse.c"
    if (binding != 0) {
      __CrestBranch(69078, 44595, 1);

    } else {
      __CrestBranch(69079, 44596, 0);
# 2994 "xmlparse.c"
      goto while_break___13;
    }
    }
# 2995 "xmlparse.c"
    mem_140 = binding->attId;
# 2995 "xmlparse.c"
    mem_141 = mem_140->name + -1;
    __CrestLoad(69080, (unsigned long )0, (long long )((XML_Char )0));
    __CrestStore(69081, (unsigned long )mem_141);
# 2995 "xmlparse.c"
    *mem_141 = (XML_Char )0;
# 2994 "xmlparse.c"
    binding = binding->nextTagBinding;
  }
  while_break___13: ;
  }
  {
  __CrestLoad(69084, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
  __CrestLoad(69083, (unsigned long )0, (long long )0);
  __CrestApply2(69082, 12, (long long )(parser->m_ns == 0));
# 2997 "xmlparse.c"
  if (parser->m_ns == 0) {
    __CrestBranch(69085, 44600, 1);
    __CrestLoad(69087, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69088, (unsigned long )(& __retres151));
# 2998 "xmlparse.c"
    __retres151 = (enum XML_Error )0;
# 2998 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69086, 44602, 0);

  }
  }
  {
  __CrestLoad(69091, (unsigned long )(& elementType->prefix), (long long )((unsigned long )elementType->prefix));
  __CrestLoad(69090, (unsigned long )0, (long long )0);
  __CrestApply2(69089, 13, (long long )(elementType->prefix != 0));
# 3001 "xmlparse.c"
  if (elementType->prefix != 0) {
    __CrestBranch(69092, 44604, 1);
# 3002 "xmlparse.c"
    mem_142 = elementType->prefix;
# 3002 "xmlparse.c"
    binding = mem_142->binding;
    {
    __CrestLoad(69096, (unsigned long )(& binding), (long long )((unsigned long )binding));
    __CrestLoad(69095, (unsigned long )0, (long long )0);
    __CrestApply2(69094, 12, (long long )(binding == 0));
# 3003 "xmlparse.c"
    if (binding == 0) {
      __CrestBranch(69097, 44606, 1);
      __CrestLoad(69099, (unsigned long )0, (long long )((enum XML_Error )27));
      __CrestStore(69100, (unsigned long )(& __retres151));
# 3004 "xmlparse.c"
      __retres151 = (enum XML_Error )27;
# 3004 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69098, 44608, 0);

    }
    }
# 3005 "xmlparse.c"
    localPart = tagNamePtr->str;
    {
# 3006 "xmlparse.c"
    while (1) {
      while_continue___14: ;
# 3006 "xmlparse.c"
      tmp___32 = localPart;
# 3006 "xmlparse.c"
      localPart ++;
      {
      __CrestLoad(69103, (unsigned long )tmp___32, (long long )*tmp___32);
      __CrestLoad(69102, (unsigned long )0, (long long )58);
      __CrestApply2(69101, 13, (long long )((int const )*tmp___32 != 58));
# 3006 "xmlparse.c"
      if ((int const )*tmp___32 != 58) {
        __CrestBranch(69104, 44615, 1);

      } else {
        __CrestBranch(69105, 44616, 0);
# 3006 "xmlparse.c"
        goto while_break___14;
      }
      }
    }
    while_break___14: ;
    }
  } else {
    __CrestBranch(69093, 44618, 0);
    {
    __CrestLoad(69108, (unsigned long )(& dtd->defaultPrefix.binding), (long long )((unsigned long )dtd->defaultPrefix.binding));
    __CrestLoad(69107, (unsigned long )0, (long long )0);
    __CrestApply2(69106, 13, (long long )(dtd->defaultPrefix.binding != 0));
# 3009 "xmlparse.c"
    if (dtd->defaultPrefix.binding != 0) {
      __CrestBranch(69109, 44619, 1);
# 3010 "xmlparse.c"
      binding = dtd->defaultPrefix.binding;
# 3011 "xmlparse.c"
      localPart = tagNamePtr->str;
    } else {
      __CrestBranch(69110, 44620, 0);
      __CrestLoad(69111, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(69112, (unsigned long )(& __retres151));
# 3014 "xmlparse.c"
      __retres151 = (enum XML_Error )0;
# 3014 "xmlparse.c"
      goto return_label;
    }
    }
  }
  }
  __CrestLoad(69113, (unsigned long )0, (long long )0);
  __CrestStore(69114, (unsigned long )(& prefixLen));
# 3015 "xmlparse.c"
  prefixLen = 0;
  {
  __CrestLoad(69117, (unsigned long )(& parser->m_ns_triplets), (long long )parser->m_ns_triplets);
  __CrestLoad(69116, (unsigned long )0, (long long )0);
  __CrestApply2(69115, 13, (long long )(parser->m_ns_triplets != 0));
# 3016 "xmlparse.c"
  if (parser->m_ns_triplets != 0) {
    __CrestBranch(69118, 44624, 1);
    {
# 3016 "xmlparse.c"
    mem_143 = binding->prefix;
    {
    __CrestLoad(69122, (unsigned long )(& mem_143->name), (long long )((unsigned long )mem_143->name));
    __CrestLoad(69121, (unsigned long )0, (long long )0);
    __CrestApply2(69120, 13, (long long )(mem_143->name != 0));
# 3016 "xmlparse.c"
    if (mem_143->name != 0) {
      __CrestBranch(69123, 44627, 1);
      {
# 3017 "xmlparse.c"
      while (1) {
        while_continue___15: ;
        __CrestLoad(69125, (unsigned long )(& prefixLen), (long long )prefixLen);
        __CrestStore(69126, (unsigned long )(& tmp___33));
# 3017 "xmlparse.c"
        tmp___33 = prefixLen;
        __CrestLoad(69129, (unsigned long )(& prefixLen), (long long )prefixLen);
        __CrestLoad(69128, (unsigned long )0, (long long )1);
        __CrestApply2(69127, 0, (long long )(prefixLen + 1));
        __CrestStore(69130, (unsigned long )(& prefixLen));
# 3017 "xmlparse.c"
        prefixLen ++;
        {
# 3017 "xmlparse.c"
        mem_144 = binding->prefix;
# 3017 "xmlparse.c"
        mem_145 = mem_144->name + tmp___33;
        {
        __CrestLoad(69133, (unsigned long )mem_145, (long long )*mem_145);
        __CrestLoad(69132, (unsigned long )0, (long long )0);
        __CrestApply2(69131, 13, (long long )(*mem_145 != 0));
# 3017 "xmlparse.c"
        if (*mem_145 != 0) {
          __CrestBranch(69134, 44634, 1);

        } else {
          __CrestBranch(69135, 44635, 0);
# 3017 "xmlparse.c"
          goto while_break___15;
        }
        }
        }
      }
      while_break___15: ;
      }
    } else {
      __CrestBranch(69124, 44637, 0);

    }
    }
    }
  } else {
    __CrestBranch(69119, 44638, 0);

  }
  }
# 3020 "xmlparse.c"
  tagNamePtr->localPart = localPart;
  __CrestLoad(69136, (unsigned long )(& binding->uriLen), (long long )binding->uriLen);
  __CrestStore(69137, (unsigned long )(& tagNamePtr->uriLen));
# 3021 "xmlparse.c"
  tagNamePtr->uriLen = binding->uriLen;
# 3022 "xmlparse.c"
  mem_146 = binding->prefix;
# 3022 "xmlparse.c"
  tagNamePtr->prefix = mem_146->name;
  __CrestLoad(69138, (unsigned long )(& prefixLen), (long long )prefixLen);
  __CrestStore(69139, (unsigned long )(& tagNamePtr->prefixLen));
# 3023 "xmlparse.c"
  tagNamePtr->prefixLen = prefixLen;
  __CrestLoad(69140, (unsigned long )0, (long long )0);
  __CrestStore(69141, (unsigned long )(& i));
# 3024 "xmlparse.c"
  i = 0;
  {
# 3024 "xmlparse.c"
  while (1) {
    while_continue___16: ;
    __CrestLoad(69142, (unsigned long )(& i), (long long )i);
    __CrestStore(69143, (unsigned long )(& tmp___34));
# 3024 "xmlparse.c"
    tmp___34 = i;
    __CrestLoad(69146, (unsigned long )(& i), (long long )i);
    __CrestLoad(69145, (unsigned long )0, (long long )1);
    __CrestApply2(69144, 0, (long long )(i + 1));
    __CrestStore(69147, (unsigned long )(& i));
# 3024 "xmlparse.c"
    i ++;
    {
# 3024 "xmlparse.c"
    mem_147 = localPart + tmp___34;
    {
    __CrestLoad(69150, (unsigned long )mem_147, (long long )*mem_147);
    __CrestLoad(69149, (unsigned long )0, (long long )0);
    __CrestApply2(69148, 13, (long long )(*mem_147 != 0));
# 3024 "xmlparse.c"
    if (*mem_147 != 0) {
      __CrestBranch(69151, 44647, 1);

    } else {
      __CrestBranch(69152, 44648, 0);
# 3024 "xmlparse.c"
      goto while_break___16;
    }
    }
    }
  }
  while_break___16: ;
  }
  __CrestLoad(69157, (unsigned long )(& i), (long long )i);
  __CrestLoad(69156, (unsigned long )(& binding->uriLen), (long long )binding->uriLen);
  __CrestApply2(69155, 0, (long long )(i + binding->uriLen));
  __CrestLoad(69154, (unsigned long )(& prefixLen), (long long )prefixLen);
  __CrestApply2(69153, 0, (long long )((i + binding->uriLen) + prefixLen));
  __CrestStore(69158, (unsigned long )(& n));
# 3026 "xmlparse.c"
  n = (i + binding->uriLen) + prefixLen;
  {
  __CrestLoad(69161, (unsigned long )(& n), (long long )n);
  __CrestLoad(69160, (unsigned long )(& binding->uriAlloc), (long long )binding->uriAlloc);
  __CrestApply2(69159, 14, (long long )(n > binding->uriAlloc));
# 3027 "xmlparse.c"
  if (n > binding->uriAlloc) {
    __CrestBranch(69162, 44652, 1);
# 3029 "xmlparse.c"
    mem_148 = parser->m_mem.malloc_fcn;
    __CrestLoad(69168, (unsigned long )(& n), (long long )n);
    __CrestLoad(69167, (unsigned long )0, (long long )24);
    __CrestApply2(69166, 0, (long long )(n + 24));
    __CrestLoad(69165, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestApply2(69164, 2, (long long )((unsigned long )(n + 24) * sizeof(XML_Char )));
# 3029 "xmlparse.c"
    tmp___35 = (*mem_148)((unsigned long )(n + 24) * sizeof(XML_Char ));
    __CrestClearStack(69169);
# 3029 "xmlparse.c"
    uri = (XML_Char *)tmp___35;
    {
    __CrestLoad(69172, (unsigned long )(& uri), (long long )((unsigned long )uri));
    __CrestLoad(69171, (unsigned long )0, (long long )0);
    __CrestApply2(69170, 12, (long long )(uri == 0));
# 3030 "xmlparse.c"
    if (uri == 0) {
      __CrestBranch(69173, 44654, 1);
      __CrestLoad(69175, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(69176, (unsigned long )(& __retres151));
# 3031 "xmlparse.c"
      __retres151 = (enum XML_Error )1;
# 3031 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69174, 44656, 0);

    }
    }
    __CrestLoad(69179, (unsigned long )(& n), (long long )n);
    __CrestLoad(69178, (unsigned long )0, (long long )24);
    __CrestApply2(69177, 0, (long long )(n + 24));
    __CrestStore(69180, (unsigned long )(& binding->uriAlloc));
# 3032 "xmlparse.c"
    binding->uriAlloc = n + 24;
    __CrestLoad(69183, (unsigned long )(& binding->uriLen), (long long )binding->uriLen);
    __CrestLoad(69182, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestApply2(69181, 2, (long long )((unsigned long )binding->uriLen * sizeof(XML_Char )));
# 3033 "xmlparse.c"
    sym_memcpy(uri, binding->uri, (unsigned long )binding->uriLen * sizeof(XML_Char ));
    __CrestClearStack(69184);
# 3034 "xmlparse.c"
    p = parser->m_tagStack;
    {
# 3034 "xmlparse.c"
    while (1) {
      while_continue___17: ;
      {
      __CrestLoad(69187, (unsigned long )(& p), (long long )((unsigned long )p));
      __CrestLoad(69186, (unsigned long )0, (long long )0);
      __CrestApply2(69185, 13, (long long )(p != 0));
# 3034 "xmlparse.c"
      if (p != 0) {
        __CrestBranch(69188, 44662, 1);

      } else {
        __CrestBranch(69189, 44663, 0);
# 3034 "xmlparse.c"
        goto while_break___17;
      }
      }
      {
      __CrestLoad(69192, (unsigned long )(& p->name.str), (long long )((unsigned long )p->name.str));
      __CrestLoad(69191, (unsigned long )(& binding->uri), (long long )((unsigned long )binding->uri));
      __CrestApply2(69190, 12, (long long )((unsigned long )p->name.str == (unsigned long )binding->uri));
# 3035 "xmlparse.c"
      if ((unsigned long )p->name.str == (unsigned long )binding->uri) {
        __CrestBranch(69193, 44665, 1);
# 3036 "xmlparse.c"
        p->name.str = (XML_Char const *)uri;
      } else {
        __CrestBranch(69194, 44666, 0);

      }
      }
# 3034 "xmlparse.c"
      p = p->parent;
    }
    while_break___17: ;
    }
# 3037 "xmlparse.c"
    mem_149 = parser->m_mem.free_fcn;
# 3037 "xmlparse.c"
    (*mem_149)((void *)binding->uri);
    __CrestClearStack(69195);
# 3038 "xmlparse.c"
    binding->uri = uri;
  } else {
    __CrestBranch(69163, 44670, 0);

  }
  }
# 3041 "xmlparse.c"
  uri = binding->uri + binding->uriLen;
  __CrestLoad(69198, (unsigned long )(& i), (long long )i);
  __CrestLoad(69197, (unsigned long )0, (long long )sizeof(XML_Char ));
  __CrestApply2(69196, 2, (long long )((unsigned long )i * sizeof(XML_Char )));
# 3042 "xmlparse.c"
  sym_memcpy(uri, localPart, (unsigned long )i * sizeof(XML_Char ));
  __CrestClearStack(69199);
  {
  __CrestLoad(69202, (unsigned long )(& prefixLen), (long long )prefixLen);
  __CrestLoad(69201, (unsigned long )0, (long long )0);
  __CrestApply2(69200, 13, (long long )(prefixLen != 0));
# 3044 "xmlparse.c"
  if (prefixLen != 0) {
    __CrestBranch(69203, 44673, 1);
# 3045 "xmlparse.c"
    uri += i - 1;
    __CrestLoad(69205, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
    __CrestStore(69206, (unsigned long )uri);
# 3046 "xmlparse.c"
    *uri = parser->m_namespaceSeparator;
# 3047 "xmlparse.c"
    mem_150 = binding->prefix;
    __CrestLoad(69209, (unsigned long )(& prefixLen), (long long )prefixLen);
    __CrestLoad(69208, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestApply2(69207, 2, (long long )((unsigned long )prefixLen * sizeof(XML_Char )));
# 3047 "xmlparse.c"
    sym_memcpy(uri + 1, mem_150->name, (unsigned long )prefixLen * sizeof(XML_Char ));
    __CrestClearStack(69210);
  } else {
    __CrestBranch(69204, 44674, 0);

  }
  }
# 3049 "xmlparse.c"
  tagNamePtr->str = (XML_Char const *)binding->uri;
  __CrestLoad(69211, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(69212, (unsigned long )(& __retres151));
# 3050 "xmlparse.c"
  __retres151 = (enum XML_Error )0;
  return_label:
  {
  __CrestLoad(69213, (unsigned long )(& __retres151), (long long )__retres151);
  __CrestReturn(69214);
# 2704 "xmlparse.c"
  return (__retres151);
  }
}
}
# 3060 "xmlparse.c"
static XML_Char const xmlNamespace[37] =
# 3060 "xmlparse.c"
  { (XML_Char const )104, (XML_Char const )116, (XML_Char const )116, (XML_Char const )112,
        (XML_Char const )58, (XML_Char const )47, (XML_Char const )47, (XML_Char const )119,
        (XML_Char const )119, (XML_Char const )119, (XML_Char const )46, (XML_Char const )119,
        (XML_Char const )51, (XML_Char const )46, (XML_Char const )111, (XML_Char const )114,
        (XML_Char const )103, (XML_Char const )47, (XML_Char const )88, (XML_Char const )77,
        (XML_Char const )76, (XML_Char const )47, (XML_Char const )49, (XML_Char const )57,
        (XML_Char const )57, (XML_Char const )56, (XML_Char const )47, (XML_Char const )110,
        (XML_Char const )97, (XML_Char const )109, (XML_Char const )101, (XML_Char const )115,
        (XML_Char const )112, (XML_Char const )97, (XML_Char const )99, (XML_Char const )101,
        (XML_Char const )'\000'};
# 3068 "xmlparse.c"
static int const xmlLen = (int const )((unsigned long )((int )sizeof(xmlNamespace)) / sizeof(XML_Char ) - 1UL);
# 3070 "xmlparse.c"
static XML_Char const xmlnsNamespace[30] =
# 3070 "xmlparse.c"
  { (XML_Char const )104, (XML_Char const )116, (XML_Char const )116, (XML_Char const )112,
        (XML_Char const )58, (XML_Char const )47, (XML_Char const )47, (XML_Char const )119,
        (XML_Char const )119, (XML_Char const )119, (XML_Char const )46, (XML_Char const )119,
        (XML_Char const )51, (XML_Char const )46, (XML_Char const )111, (XML_Char const )114,
        (XML_Char const )103, (XML_Char const )47, (XML_Char const )50, (XML_Char const )48,
        (XML_Char const )48, (XML_Char const )48, (XML_Char const )47, (XML_Char const )120,
        (XML_Char const )109, (XML_Char const )108, (XML_Char const )110, (XML_Char const )115,
        (XML_Char const )47, (XML_Char const )'\000'};
# 3077 "xmlparse.c"
static int const xmlnsLen = (int const )((unsigned long )((int )sizeof(xmlnsNamespace)) / sizeof(XML_Char ) - 1UL);
# 3056 "xmlparse.c"
static enum XML_Error addBinding(XML_Parser parser , PREFIX *prefix , ATTRIBUTE_ID const *attId ,
                                 XML_Char const *uri , BINDING **bindingsPtr )
{
  XML_Bool mustBeXML ;
  XML_Bool isXML ;
  XML_Bool isXMLNS ;
  BINDING *b ;
  int len ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  XML_Char *temp ;
  void *tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;
  XML_Char const *tmp___5 ;
  XML_Char const *mem_19 ;
  XML_Char const *mem_20 ;
  XML_Char const *mem_21 ;
  XML_Char const *mem_22 ;
  XML_Char const *mem_23 ;
  XML_Char const *mem_24 ;
  XML_Char const *mem_25 ;
  XML_Char const *mem_26 ;
  XML_Char const *mem_27 ;
  XML_Char const *mem_28 ;
  void *(*mem_29)(void *ptr , size_t size ) ;
  void *(*mem_30)(size_t size ) ;
  void *(*mem_31)(size_t size ) ;
  void (*mem_32)(void *ptr ) ;
  XML_Char *mem_33 ;
  DTD *mem_34 ;
  void (*mem_35)(void *userData , XML_Char const *prefix , XML_Char const *uri ) ;
  enum XML_Error __retres36 ;

  {
  __CrestCall(69215, 767);

  __CrestLoad(69216, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(69217, (unsigned long )(& mustBeXML));
# 3080 "xmlparse.c"
  mustBeXML = (XML_Bool )0;
  __CrestLoad(69218, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(69219, (unsigned long )(& isXML));
# 3081 "xmlparse.c"
  isXML = (XML_Bool )1;
  __CrestLoad(69220, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(69221, (unsigned long )(& isXMLNS));
# 3082 "xmlparse.c"
  isXMLNS = (XML_Bool )1;
  {
  __CrestLoad(69224, (unsigned long )uri, (long long )*uri);
  __CrestLoad(69223, (unsigned long )0, (long long )0);
  __CrestApply2(69222, 12, (long long )((int const )*uri == 0));
# 3088 "xmlparse.c"
  if ((int const )*uri == 0) {
    __CrestBranch(69225, 44680, 1);
    {
    __CrestLoad(69229, (unsigned long )(& prefix->name), (long long )((unsigned long )prefix->name));
    __CrestLoad(69228, (unsigned long )0, (long long )0);
    __CrestApply2(69227, 13, (long long )(prefix->name != 0));
# 3088 "xmlparse.c"
    if (prefix->name != 0) {
      __CrestBranch(69230, 44681, 1);
      __CrestLoad(69232, (unsigned long )0, (long long )((enum XML_Error )28));
      __CrestStore(69233, (unsigned long )(& __retres36));
# 3089 "xmlparse.c"
      __retres36 = (enum XML_Error )28;
# 3089 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69231, 44683, 0);

    }
    }
  } else {
    __CrestBranch(69226, 44684, 0);

  }
  }
  {
  __CrestLoad(69236, (unsigned long )(& prefix->name), (long long )((unsigned long )prefix->name));
  __CrestLoad(69235, (unsigned long )0, (long long )0);
  __CrestApply2(69234, 13, (long long )(prefix->name != 0));
# 3091 "xmlparse.c"
  if (prefix->name != 0) {
    __CrestBranch(69237, 44686, 1);
    {
# 3091 "xmlparse.c"
    mem_19 = prefix->name + 0;
    {
    __CrestLoad(69241, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(69240, (unsigned long )0, (long long )120);
    __CrestApply2(69239, 12, (long long )((int const )*mem_19 == 120));
# 3091 "xmlparse.c"
    if ((int const )*mem_19 == 120) {
      __CrestBranch(69242, 44689, 1);
      {
# 3091 "xmlparse.c"
      mem_20 = prefix->name + 1;
      {
      __CrestLoad(69246, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(69245, (unsigned long )0, (long long )109);
      __CrestApply2(69244, 12, (long long )((int const )*mem_20 == 109));
# 3091 "xmlparse.c"
      if ((int const )*mem_20 == 109) {
        __CrestBranch(69247, 44692, 1);
        {
# 3091 "xmlparse.c"
        mem_21 = prefix->name + 2;
        {
        __CrestLoad(69251, (unsigned long )mem_21, (long long )*mem_21);
        __CrestLoad(69250, (unsigned long )0, (long long )108);
        __CrestApply2(69249, 12, (long long )((int const )*mem_21 == 108));
# 3091 "xmlparse.c"
        if ((int const )*mem_21 == 108) {
          __CrestBranch(69252, 44695, 1);
          {
# 3097 "xmlparse.c"
          mem_22 = prefix->name + 3;
          {
          __CrestLoad(69256, (unsigned long )mem_22, (long long )*mem_22);
          __CrestLoad(69255, (unsigned long )0, (long long )110);
          __CrestApply2(69254, 12, (long long )((int const )*mem_22 == 110));
# 3097 "xmlparse.c"
          if ((int const )*mem_22 == 110) {
            __CrestBranch(69257, 44698, 1);
            {
# 3097 "xmlparse.c"
            mem_23 = prefix->name + 4;
            {
            __CrestLoad(69261, (unsigned long )mem_23, (long long )*mem_23);
            __CrestLoad(69260, (unsigned long )0, (long long )115);
            __CrestApply2(69259, 12, (long long )((int const )*mem_23 == 115));
# 3097 "xmlparse.c"
            if ((int const )*mem_23 == 115) {
              __CrestBranch(69262, 44701, 1);
              {
# 3097 "xmlparse.c"
              mem_24 = prefix->name + 5;
              {
              __CrestLoad(69266, (unsigned long )mem_24, (long long )*mem_24);
              __CrestLoad(69265, (unsigned long )0, (long long )0);
              __CrestApply2(69264, 12, (long long )((int const )*mem_24 == 0));
# 3097 "xmlparse.c"
              if ((int const )*mem_24 == 0) {
                __CrestBranch(69267, 44704, 1);
                __CrestLoad(69269, (unsigned long )0, (long long )((enum XML_Error )39));
                __CrestStore(69270, (unsigned long )(& __retres36));
# 3100 "xmlparse.c"
                __retres36 = (enum XML_Error )39;
# 3100 "xmlparse.c"
                goto return_label;
              } else {
                __CrestBranch(69268, 44706, 0);

              }
              }
              }
            } else {
              __CrestBranch(69263, 44707, 0);

            }
            }
            }
          } else {
            __CrestBranch(69258, 44708, 0);

          }
          }
          }
          {
# 3102 "xmlparse.c"
          mem_25 = prefix->name + 3;
          {
          __CrestLoad(69273, (unsigned long )mem_25, (long long )*mem_25);
          __CrestLoad(69272, (unsigned long )0, (long long )0);
          __CrestApply2(69271, 12, (long long )((int const )*mem_25 == 0));
# 3102 "xmlparse.c"
          if ((int const )*mem_25 == 0) {
            __CrestBranch(69274, 44712, 1);
            __CrestLoad(69276, (unsigned long )0, (long long )((XML_Bool )1));
            __CrestStore(69277, (unsigned long )(& mustBeXML));
# 3103 "xmlparse.c"
            mustBeXML = (XML_Bool )1;
          } else {
            __CrestBranch(69275, 44713, 0);

          }
          }
          }
        } else {
          __CrestBranch(69253, 44714, 0);

        }
        }
        }
      } else {
        __CrestBranch(69248, 44715, 0);

      }
      }
      }
    } else {
      __CrestBranch(69243, 44716, 0);

    }
    }
    }
  } else {
    __CrestBranch(69238, 44717, 0);

  }
  }
  __CrestLoad(69278, (unsigned long )0, (long long )0);
  __CrestStore(69279, (unsigned long )(& len));
# 3106 "xmlparse.c"
  len = 0;
  {
# 3106 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
# 3106 "xmlparse.c"
    mem_26 = uri + len;
    {
    __CrestLoad(69282, (unsigned long )mem_26, (long long )*mem_26);
    __CrestLoad(69281, (unsigned long )0, (long long )0);
    __CrestApply2(69280, 13, (long long )(*mem_26 != 0));
# 3106 "xmlparse.c"
    if (*mem_26 != 0) {
      __CrestBranch(69283, 44725, 1);

    } else {
      __CrestBranch(69284, 44726, 0);
# 3106 "xmlparse.c"
      goto while_break;
    }
    }
    }
    {
    __CrestLoad(69287, (unsigned long )(& isXML), (long long )isXML);
    __CrestLoad(69286, (unsigned long )0, (long long )0);
    __CrestApply2(69285, 13, (long long )(isXML != 0));
# 3107 "xmlparse.c"
    if (isXML != 0) {
      __CrestBranch(69288, 44728, 1);
      {
      __CrestLoad(69292, (unsigned long )(& len), (long long )len);
      __CrestLoad(69291, (unsigned long )(& xmlLen), (long long )xmlLen);
      __CrestApply2(69290, 14, (long long )(len > (int )xmlLen));
# 3107 "xmlparse.c"
      if (len > (int )xmlLen) {
        __CrestBranch(69293, 44729, 1);
        __CrestLoad(69295, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(69296, (unsigned long )(& isXML));
# 3108 "xmlparse.c"
        isXML = (XML_Bool )0;
      } else {
        __CrestBranch(69294, 44730, 0);
        {
# 3107 "xmlparse.c"
        mem_27 = uri + len;
        {
        __CrestLoad(69299, (unsigned long )mem_27, (long long )*mem_27);
        __CrestLoad(69298, (unsigned long )(& xmlNamespace[len]), (long long )xmlNamespace[len]);
        __CrestApply2(69297, 13, (long long )((int const )*mem_27 != (int const )xmlNamespace[len]));
# 3107 "xmlparse.c"
        if ((int const )*mem_27 != (int const )xmlNamespace[len]) {
          __CrestBranch(69300, 44733, 1);
          __CrestLoad(69302, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(69303, (unsigned long )(& isXML));
# 3108 "xmlparse.c"
          isXML = (XML_Bool )0;
        } else {
          __CrestBranch(69301, 44734, 0);

        }
        }
        }
      }
      }
    } else {
      __CrestBranch(69289, 44735, 0);

    }
    }
    {
    __CrestLoad(69306, (unsigned long )(& mustBeXML), (long long )mustBeXML);
    __CrestLoad(69305, (unsigned long )0, (long long )0);
    __CrestApply2(69304, 12, (long long )(mustBeXML == 0));
# 3110 "xmlparse.c"
    if (mustBeXML == 0) {
      __CrestBranch(69307, 44737, 1);
      {
      __CrestLoad(69311, (unsigned long )(& isXMLNS), (long long )isXMLNS);
      __CrestLoad(69310, (unsigned long )0, (long long )0);
      __CrestApply2(69309, 13, (long long )(isXMLNS != 0));
# 3110 "xmlparse.c"
      if (isXMLNS != 0) {
        __CrestBranch(69312, 44738, 1);
        {
        __CrestLoad(69316, (unsigned long )(& len), (long long )len);
        __CrestLoad(69315, (unsigned long )(& xmlnsLen), (long long )xmlnsLen);
        __CrestApply2(69314, 14, (long long )(len > (int )xmlnsLen));
# 3110 "xmlparse.c"
        if (len > (int )xmlnsLen) {
          __CrestBranch(69317, 44739, 1);
          __CrestLoad(69319, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(69320, (unsigned long )(& isXMLNS));
# 3112 "xmlparse.c"
          isXMLNS = (XML_Bool )0;
        } else {
          __CrestBranch(69318, 44740, 0);
          {
# 3110 "xmlparse.c"
          mem_28 = uri + len;
          {
          __CrestLoad(69323, (unsigned long )mem_28, (long long )*mem_28);
          __CrestLoad(69322, (unsigned long )(& xmlnsNamespace[len]), (long long )xmlnsNamespace[len]);
          __CrestApply2(69321, 13, (long long )((int const )*mem_28 != (int const )xmlnsNamespace[len]));
# 3110 "xmlparse.c"
          if ((int const )*mem_28 != (int const )xmlnsNamespace[len]) {
            __CrestBranch(69324, 44743, 1);
            __CrestLoad(69326, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(69327, (unsigned long )(& isXMLNS));
# 3112 "xmlparse.c"
            isXMLNS = (XML_Bool )0;
          } else {
            __CrestBranch(69325, 44744, 0);

          }
          }
          }
        }
        }
      } else {
        __CrestBranch(69313, 44745, 0);

      }
      }
    } else {
      __CrestBranch(69308, 44746, 0);

    }
    }
    __CrestLoad(69330, (unsigned long )(& len), (long long )len);
    __CrestLoad(69329, (unsigned long )0, (long long )1);
    __CrestApply2(69328, 0, (long long )(len + 1));
    __CrestStore(69331, (unsigned long )(& len));
# 3106 "xmlparse.c"
    len ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(69334, (unsigned long )(& isXML), (long long )isXML);
  __CrestLoad(69333, (unsigned long )0, (long long )0);
  __CrestApply2(69332, 13, (long long )(isXML != 0));
# 3114 "xmlparse.c"
  if (isXML != 0) {
    __CrestBranch(69335, 44750, 1);
    {
    __CrestLoad(69339, (unsigned long )(& len), (long long )len);
    __CrestLoad(69338, (unsigned long )(& xmlLen), (long long )xmlLen);
    __CrestApply2(69337, 12, (long long )(len == (int )xmlLen));
# 3114 "xmlparse.c"
    if (len == (int )xmlLen) {
      __CrestBranch(69340, 44751, 1);
      __CrestLoad(69342, (unsigned long )0, (long long )1);
      __CrestStore(69343, (unsigned long )(& tmp));
# 3114 "xmlparse.c"
      tmp = 1;
    } else {
      __CrestBranch(69341, 44752, 0);
      __CrestLoad(69344, (unsigned long )0, (long long )0);
      __CrestStore(69345, (unsigned long )(& tmp));
# 3114 "xmlparse.c"
      tmp = 0;
    }
    }
  } else {
    __CrestBranch(69336, 44753, 0);
    __CrestLoad(69346, (unsigned long )0, (long long )0);
    __CrestStore(69347, (unsigned long )(& tmp));
# 3114 "xmlparse.c"
    tmp = 0;
  }
  }
  __CrestLoad(69348, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(69349, (unsigned long )(& isXML));
# 3114 "xmlparse.c"
  isXML = (XML_Bool )tmp;
  {
  __CrestLoad(69352, (unsigned long )(& isXMLNS), (long long )isXMLNS);
  __CrestLoad(69351, (unsigned long )0, (long long )0);
  __CrestApply2(69350, 13, (long long )(isXMLNS != 0));
# 3115 "xmlparse.c"
  if (isXMLNS != 0) {
    __CrestBranch(69353, 44756, 1);
    {
    __CrestLoad(69357, (unsigned long )(& len), (long long )len);
    __CrestLoad(69356, (unsigned long )(& xmlnsLen), (long long )xmlnsLen);
    __CrestApply2(69355, 12, (long long )(len == (int )xmlnsLen));
# 3115 "xmlparse.c"
    if (len == (int )xmlnsLen) {
      __CrestBranch(69358, 44757, 1);
      __CrestLoad(69360, (unsigned long )0, (long long )1);
      __CrestStore(69361, (unsigned long )(& tmp___0));
# 3115 "xmlparse.c"
      tmp___0 = 1;
    } else {
      __CrestBranch(69359, 44758, 0);
      __CrestLoad(69362, (unsigned long )0, (long long )0);
      __CrestStore(69363, (unsigned long )(& tmp___0));
# 3115 "xmlparse.c"
      tmp___0 = 0;
    }
    }
  } else {
    __CrestBranch(69354, 44759, 0);
    __CrestLoad(69364, (unsigned long )0, (long long )0);
    __CrestStore(69365, (unsigned long )(& tmp___0));
# 3115 "xmlparse.c"
    tmp___0 = 0;
  }
  }
  __CrestLoad(69366, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(69367, (unsigned long )(& isXMLNS));
# 3115 "xmlparse.c"
  isXMLNS = (XML_Bool )tmp___0;
  {
  __CrestLoad(69370, (unsigned long )(& mustBeXML), (long long )mustBeXML);
  __CrestLoad(69369, (unsigned long )(& isXML), (long long )isXML);
  __CrestApply2(69368, 13, (long long )((int )mustBeXML != (int )isXML));
# 3117 "xmlparse.c"
  if ((int )mustBeXML != (int )isXML) {
    __CrestBranch(69371, 44762, 1);
    {
    __CrestLoad(69375, (unsigned long )(& mustBeXML), (long long )mustBeXML);
    __CrestLoad(69374, (unsigned long )0, (long long )0);
    __CrestApply2(69373, 13, (long long )(mustBeXML != 0));
# 3118 "xmlparse.c"
    if (mustBeXML != 0) {
      __CrestBranch(69376, 44763, 1);
      __CrestLoad(69378, (unsigned long )0, (long long )38);
      __CrestStore(69379, (unsigned long )(& tmp___1));
# 3118 "xmlparse.c"
      tmp___1 = 38;
    } else {
      __CrestBranch(69377, 44764, 0);
      __CrestLoad(69380, (unsigned long )0, (long long )40);
      __CrestStore(69381, (unsigned long )(& tmp___1));
# 3118 "xmlparse.c"
      tmp___1 = 40;
    }
    }
    __CrestLoad(69382, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(69383, (unsigned long )(& __retres36));
# 3118 "xmlparse.c"
    __retres36 = (enum XML_Error )tmp___1;
# 3118 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69372, 44767, 0);

  }
  }
  {
  __CrestLoad(69386, (unsigned long )(& isXMLNS), (long long )isXMLNS);
  __CrestLoad(69385, (unsigned long )0, (long long )0);
  __CrestApply2(69384, 13, (long long )(isXMLNS != 0));
# 3121 "xmlparse.c"
  if (isXMLNS != 0) {
    __CrestBranch(69387, 44769, 1);
    __CrestLoad(69389, (unsigned long )0, (long long )((enum XML_Error )40));
    __CrestStore(69390, (unsigned long )(& __retres36));
# 3122 "xmlparse.c"
    __retres36 = (enum XML_Error )40;
# 3122 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69388, 44771, 0);

  }
  }
  {
  __CrestLoad(69393, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
  __CrestLoad(69392, (unsigned long )0, (long long )0);
  __CrestApply2(69391, 13, (long long )(parser->m_namespaceSeparator != 0));
# 3124 "xmlparse.c"
  if (parser->m_namespaceSeparator != 0) {
    __CrestBranch(69394, 44773, 1);
    __CrestLoad(69398, (unsigned long )(& len), (long long )len);
    __CrestLoad(69397, (unsigned long )0, (long long )1);
    __CrestApply2(69396, 0, (long long )(len + 1));
    __CrestStore(69399, (unsigned long )(& len));
# 3125 "xmlparse.c"
    len ++;
  } else {
    __CrestBranch(69395, 44774, 0);

  }
  }
  {
  __CrestLoad(69402, (unsigned long )(& parser->m_freeBindingList), (long long )((unsigned long )parser->m_freeBindingList));
  __CrestLoad(69401, (unsigned long )0, (long long )0);
  __CrestApply2(69400, 13, (long long )(parser->m_freeBindingList != 0));
# 3126 "xmlparse.c"
  if (parser->m_freeBindingList != 0) {
    __CrestBranch(69403, 44776, 1);
# 3127 "xmlparse.c"
    b = parser->m_freeBindingList;
    {
    __CrestLoad(69407, (unsigned long )(& len), (long long )len);
    __CrestLoad(69406, (unsigned long )(& b->uriAlloc), (long long )b->uriAlloc);
    __CrestApply2(69405, 14, (long long )(len > b->uriAlloc));
# 3128 "xmlparse.c"
    if (len > b->uriAlloc) {
      __CrestBranch(69408, 44778, 1);
# 3129 "xmlparse.c"
      mem_29 = parser->m_mem.realloc_fcn;
      __CrestLoad(69414, (unsigned long )0, (long long )sizeof(XML_Char ));
      __CrestLoad(69413, (unsigned long )(& len), (long long )len);
      __CrestLoad(69412, (unsigned long )0, (long long )24);
      __CrestApply2(69411, 0, (long long )(len + 24));
      __CrestApply2(69410, 2, (long long )(sizeof(XML_Char ) * (unsigned long )(len + 24)));
# 3129 "xmlparse.c"
      tmp___2 = (*mem_29)((void *)b->uri, sizeof(XML_Char ) * (unsigned long )(len + 24));
      __CrestClearStack(69415);
# 3129 "xmlparse.c"
      temp = (XML_Char *)tmp___2;
      {
      __CrestLoad(69418, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(69417, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(69416, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 3131 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(69419, 44780, 1);
        __CrestLoad(69421, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(69422, (unsigned long )(& __retres36));
# 3132 "xmlparse.c"
        __retres36 = (enum XML_Error )1;
# 3132 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69420, 44782, 0);

      }
      }
# 3133 "xmlparse.c"
      b->uri = temp;
      __CrestLoad(69425, (unsigned long )(& len), (long long )len);
      __CrestLoad(69424, (unsigned long )0, (long long )24);
      __CrestApply2(69423, 0, (long long )(len + 24));
      __CrestStore(69426, (unsigned long )(& b->uriAlloc));
# 3134 "xmlparse.c"
      b->uriAlloc = len + 24;
    } else {
      __CrestBranch(69409, 44784, 0);

    }
    }
# 3136 "xmlparse.c"
    parser->m_freeBindingList = b->nextTagBinding;
  } else {
    __CrestBranch(69404, 44786, 0);
# 3139 "xmlparse.c"
    mem_30 = parser->m_mem.malloc_fcn;
    __CrestLoad(69427, (unsigned long )0, (long long )sizeof(BINDING ));
# 3139 "xmlparse.c"
    tmp___3 = (*mem_30)(sizeof(BINDING ));
    __CrestClearStack(69428);
# 3139 "xmlparse.c"
    b = (BINDING *)tmp___3;
    {
    __CrestLoad(69431, (unsigned long )(& b), (long long )((unsigned long )b));
    __CrestLoad(69430, (unsigned long )0, (long long )0);
    __CrestApply2(69429, 12, (long long )(b == 0));
# 3140 "xmlparse.c"
    if (b == 0) {
      __CrestBranch(69432, 44788, 1);
      __CrestLoad(69434, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(69435, (unsigned long )(& __retres36));
# 3141 "xmlparse.c"
      __retres36 = (enum XML_Error )1;
# 3141 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69433, 44790, 0);

    }
    }
# 3142 "xmlparse.c"
    mem_31 = parser->m_mem.malloc_fcn;
    __CrestLoad(69440, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestLoad(69439, (unsigned long )(& len), (long long )len);
    __CrestLoad(69438, (unsigned long )0, (long long )24);
    __CrestApply2(69437, 0, (long long )(len + 24));
    __CrestApply2(69436, 2, (long long )(sizeof(XML_Char ) * (unsigned long )(len + 24)));
# 3142 "xmlparse.c"
    tmp___4 = (*mem_31)(sizeof(XML_Char ) * (unsigned long )(len + 24));
    __CrestClearStack(69441);
# 3142 "xmlparse.c"
    b->uri = (XML_Char *)tmp___4;
    {
    __CrestLoad(69444, (unsigned long )(& b->uri), (long long )((unsigned long )b->uri));
    __CrestLoad(69443, (unsigned long )0, (long long )0);
    __CrestApply2(69442, 12, (long long )(b->uri == 0));
# 3143 "xmlparse.c"
    if (b->uri == 0) {
      __CrestBranch(69445, 44793, 1);
# 3144 "xmlparse.c"
      mem_32 = parser->m_mem.free_fcn;
# 3144 "xmlparse.c"
      (*mem_32)((void *)b);
      __CrestClearStack(69447);
      __CrestLoad(69448, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(69449, (unsigned long )(& __retres36));
# 3145 "xmlparse.c"
      __retres36 = (enum XML_Error )1;
# 3145 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69446, 44796, 0);

    }
    }
    __CrestLoad(69452, (unsigned long )(& len), (long long )len);
    __CrestLoad(69451, (unsigned long )0, (long long )24);
    __CrestApply2(69450, 0, (long long )(len + 24));
    __CrestStore(69453, (unsigned long )(& b->uriAlloc));
# 3147 "xmlparse.c"
    b->uriAlloc = len + 24;
  }
  }
  __CrestLoad(69454, (unsigned long )(& len), (long long )len);
  __CrestStore(69455, (unsigned long )(& b->uriLen));
# 3149 "xmlparse.c"
  b->uriLen = len;
  __CrestLoad(69458, (unsigned long )(& len), (long long )len);
  __CrestLoad(69457, (unsigned long )0, (long long )sizeof(XML_Char ));
  __CrestApply2(69456, 2, (long long )((unsigned long )len * sizeof(XML_Char )));
# 3150 "xmlparse.c"
  sym_memcpy(b->uri, uri, (unsigned long )len * sizeof(XML_Char ));
  __CrestClearStack(69459);
  {
  __CrestLoad(69462, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
  __CrestLoad(69461, (unsigned long )0, (long long )0);
  __CrestApply2(69460, 13, (long long )(parser->m_namespaceSeparator != 0));
# 3151 "xmlparse.c"
  if (parser->m_namespaceSeparator != 0) {
    __CrestBranch(69463, 44800, 1);
# 3152 "xmlparse.c"
    mem_33 = b->uri + (len - 1);
    __CrestLoad(69465, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
    __CrestStore(69466, (unsigned long )mem_33);
# 3152 "xmlparse.c"
    *mem_33 = parser->m_namespaceSeparator;
  } else {
    __CrestBranch(69464, 44801, 0);

  }
  }
# 3153 "xmlparse.c"
  b->prefix = prefix;
# 3154 "xmlparse.c"
  b->attId = attId;
# 3155 "xmlparse.c"
  b->prevPrefixBinding = prefix->binding;
  {
  __CrestLoad(69469, (unsigned long )uri, (long long )*uri);
  __CrestLoad(69468, (unsigned long )0, (long long )0);
  __CrestApply2(69467, 12, (long long )((int const )*uri == 0));
# 3157 "xmlparse.c"
  if ((int const )*uri == 0) {
    __CrestBranch(69470, 44804, 1);
    {
# 3157 "xmlparse.c"
    mem_34 = parser->m_dtd;
    {
    __CrestLoad(69474, (unsigned long )(& prefix), (long long )((unsigned long )prefix));
    __CrestLoad(69473, (unsigned long )0, (long long )((unsigned long )(& mem_34->defaultPrefix)));
    __CrestApply2(69472, 12, (long long )((unsigned long )prefix == (unsigned long )(& mem_34->defaultPrefix)));
# 3157 "xmlparse.c"
    if ((unsigned long )prefix == (unsigned long )(& mem_34->defaultPrefix)) {
      __CrestBranch(69475, 44807, 1);
# 3158 "xmlparse.c"
      prefix->binding = (BINDING *)((void *)0);
    } else {
      __CrestBranch(69476, 44808, 0);
# 3160 "xmlparse.c"
      prefix->binding = b;
    }
    }
    }
  } else {
    __CrestBranch(69471, 44809, 0);
# 3160 "xmlparse.c"
    prefix->binding = b;
  }
  }
# 3161 "xmlparse.c"
  b->nextTagBinding = *bindingsPtr;
# 3162 "xmlparse.c"
  *bindingsPtr = b;
  {
  __CrestLoad(69479, (unsigned long )(& attId), (long long )((unsigned long )attId));
  __CrestLoad(69478, (unsigned long )0, (long long )0);
  __CrestApply2(69477, 13, (long long )(attId != 0));
# 3164 "xmlparse.c"
  if (attId != 0) {
    __CrestBranch(69480, 44812, 1);
    {
    __CrestLoad(69484, (unsigned long )(& parser->m_startNamespaceDeclHandler), (long long )((unsigned long )parser->m_startNamespaceDeclHandler));
    __CrestLoad(69483, (unsigned long )0, (long long )0);
    __CrestApply2(69482, 13, (long long )(parser->m_startNamespaceDeclHandler != 0));
# 3164 "xmlparse.c"
    if (parser->m_startNamespaceDeclHandler != 0) {
      __CrestBranch(69485, 44813, 1);
      {
      __CrestLoad(69489, (unsigned long )(& prefix->binding), (long long )((unsigned long )prefix->binding));
      __CrestLoad(69488, (unsigned long )0, (long long )0);
      __CrestApply2(69487, 13, (long long )(prefix->binding != 0));
# 3165 "xmlparse.c"
      if (prefix->binding != 0) {
        __CrestBranch(69490, 44814, 1);
# 3165 "xmlparse.c"
        tmp___5 = uri;
      } else {
        __CrestBranch(69491, 44815, 0);
# 3165 "xmlparse.c"
        tmp___5 = (XML_Char const *)0;
      }
      }
# 3165 "xmlparse.c"
      mem_35 = parser->m_startNamespaceDeclHandler;
# 3165 "xmlparse.c"
      (*mem_35)(parser->m_handlerArg, prefix->name, tmp___5);
      __CrestClearStack(69492);
    } else {
      __CrestBranch(69486, 44817, 0);

    }
    }
  } else {
    __CrestBranch(69481, 44818, 0);

  }
  }
  __CrestLoad(69493, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(69494, (unsigned long )(& __retres36));
# 3167 "xmlparse.c"
  __retres36 = (enum XML_Error )0;
  return_label:
  {
  __CrestLoad(69495, (unsigned long )(& __retres36), (long long )__retres36);
  __CrestReturn(69496);
# 3056 "xmlparse.c"
  return (__retres36);
  }
}
}
# 3173 "xmlparse.c"
static enum XML_Error cdataSectionProcessor(XML_Parser parser , char const *start ,
                                            char const *end , char const **endPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  enum XML_Error tmp___0 ;
  enum XML_Error tmp___1 ;
  enum XML_Error __retres9 ;

  {
  __CrestCall(69497, 768);

  __CrestLoad(69499, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(69498, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 3179 "xmlparse.c"
  tmp = doCdataSection(parser, parser->m_encoding, & start, end, endPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(69501, (long long )tmp);
  __CrestStore(69500, (unsigned long )(& tmp));
  __CrestLoad(69502, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(69503, (unsigned long )(& result));
# 3179 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(69506, (unsigned long )(& result), (long long )result);
  __CrestLoad(69505, (unsigned long )0, (long long )0U);
  __CrestApply2(69504, 13, (long long )((unsigned int )result != 0U));
# 3181 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(69507, 44823, 1);
    __CrestLoad(69509, (unsigned long )(& result), (long long )result);
    __CrestStore(69510, (unsigned long )(& __retres9));
# 3182 "xmlparse.c"
    __retres9 = result;
# 3182 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69508, 44825, 0);

  }
  }
  {
  __CrestLoad(69513, (unsigned long )(& start), (long long )((unsigned long )start));
  __CrestLoad(69512, (unsigned long )0, (long long )0);
  __CrestApply2(69511, 13, (long long )(start != 0));
# 3183 "xmlparse.c"
  if (start != 0) {
    __CrestBranch(69514, 44827, 1);
    {
    __CrestLoad(69518, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
    __CrestLoad(69517, (unsigned long )0, (long long )0);
    __CrestApply2(69516, 13, (long long )(parser->m_parentParser != 0));
# 3184 "xmlparse.c"
    if (parser->m_parentParser != 0) {
      __CrestBranch(69519, 44828, 1);
# 3185 "xmlparse.c"
      parser->m_processor = & externalEntityContentProcessor;
# 3186 "xmlparse.c"
      tmp___0 = externalEntityContentProcessor(parser, start, end, endPtr);
      __CrestHandleReturn(69522, (long long )tmp___0);
      __CrestStore(69521, (unsigned long )(& tmp___0));
      __CrestLoad(69523, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(69524, (unsigned long )(& __retres9));
# 3186 "xmlparse.c"
      __retres9 = tmp___0;
# 3186 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69520, 44831, 0);
# 3189 "xmlparse.c"
      parser->m_processor = & contentProcessor;
# 3190 "xmlparse.c"
      tmp___1 = contentProcessor(parser, start, end, endPtr);
      __CrestHandleReturn(69526, (long long )tmp___1);
      __CrestStore(69525, (unsigned long )(& tmp___1));
      __CrestLoad(69527, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(69528, (unsigned long )(& __retres9));
# 3190 "xmlparse.c"
      __retres9 = tmp___1;
# 3190 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(69515, 44834, 0);

  }
  }
  __CrestLoad(69529, (unsigned long )(& result), (long long )result);
  __CrestStore(69530, (unsigned long )(& __retres9));
# 3193 "xmlparse.c"
  __retres9 = result;
  return_label:
  {
  __CrestLoad(69531, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(69532);
# 3173 "xmlparse.c"
  return (__retres9);
  }
}
}
# 3199 "xmlparse.c"
static enum XML_Error doCdataSection(XML_Parser parser , ENCODING const *enc , char const **startPtr ,
                                     char const *end , char const **nextPtr ,
                                     XML_Bool haveMore )
{
  char const *s ;
  char const **eventPP ;
  char const **eventEndPP ;
  char const *next ;
  int tok ;
  int tmp ;
  XML_Char c ;
  void (*charDataHandler)(void *userData , XML_Char const *s , int len ) ;
  ICHAR *dataPtr ;
  OPEN_INTERNAL_ENTITY *mem_16 ;
  OPEN_INTERNAL_ENTITY *mem_17 ;
  SCANNER mem_18 ;
  void (*mem_19)(void *userData ) ;
  void (*mem_20)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_21)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                 char **toP , char const *toLim ) ;
  enum XML_Error __retres22 ;

  {
  __CrestCall(69534, 769);
  __CrestStore(69533, (unsigned long )(& haveMore));
# 3207 "xmlparse.c"
  s = *startPtr;
  {
  __CrestLoad(69537, (unsigned long )(& enc), (long long )((unsigned long )enc));
  __CrestLoad(69536, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
  __CrestApply2(69535, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 3210 "xmlparse.c"
  if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
    __CrestBranch(69538, 44839, 1);
# 3211 "xmlparse.c"
    eventPP = & parser->m_eventPtr;
# 3212 "xmlparse.c"
    *eventPP = s;
# 3213 "xmlparse.c"
    eventEndPP = & parser->m_eventEndPtr;
  } else {
    __CrestBranch(69539, 44840, 0);
# 3216 "xmlparse.c"
    mem_16 = parser->m_openInternalEntities;
# 3216 "xmlparse.c"
    eventPP = & mem_16->internalEventPtr;
# 3217 "xmlparse.c"
    mem_17 = parser->m_openInternalEntities;
# 3217 "xmlparse.c"
    eventEndPP = & mem_17->internalEventEndPtr;
  }
  }
# 3219 "xmlparse.c"
  *eventPP = s;
# 3220 "xmlparse.c"
  *startPtr = (char const *)((void *)0);
  {
# 3222 "xmlparse.c"
  while (1) {
    while_continue: ;
# 3224 "xmlparse.c"
    mem_18 = enc->scanners[2];
# 3224 "xmlparse.c"
    tmp = (*mem_18)(enc, s, end, & next);
    __CrestHandleReturn(69541, (long long )tmp);
    __CrestStore(69540, (unsigned long )(& tmp));
    __CrestLoad(69542, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(69543, (unsigned long )(& tok));
# 3224 "xmlparse.c"
    tok = tmp;
# 3225 "xmlparse.c"
    *eventEndPP = next;
    {
    {
    __CrestLoad(69546, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69545, (unsigned long )0, (long long )40);
    __CrestApply2(69544, 12, (long long )(tok == 40));
# 3227 "xmlparse.c"
    if (tok == 40) {
      __CrestBranch(69547, 44848, 1);
# 3227 "xmlparse.c"
      goto case_40;
    } else {
      __CrestBranch(69548, 44849, 0);

    }
    }
    {
    __CrestLoad(69551, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69550, (unsigned long )0, (long long )7);
    __CrestApply2(69549, 12, (long long )(tok == 7));
# 3243 "xmlparse.c"
    if (tok == 7) {
      __CrestBranch(69552, 44851, 1);
# 3243 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(69553, 44852, 0);

    }
    }
    {
    __CrestLoad(69556, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69555, (unsigned long )0, (long long )6);
    __CrestApply2(69554, 12, (long long )(tok == 6));
# 3251 "xmlparse.c"
    if (tok == 6) {
      __CrestBranch(69557, 44854, 1);
# 3251 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(69558, 44855, 0);

    }
    }
    {
    __CrestLoad(69561, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69560, (unsigned long )0, (long long )0);
    __CrestApply2(69559, 12, (long long )(tok == 0));
# 3276 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(69562, 44857, 1);
# 3276 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(69563, 44858, 0);

    }
    }
    {
    __CrestLoad(69566, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69565, (unsigned long )0, (long long )-2);
    __CrestApply2(69564, 12, (long long )(tok == -2));
# 3279 "xmlparse.c"
    if (tok == -2) {
      __CrestBranch(69567, 44860, 1);
# 3279 "xmlparse.c"
      goto case_neg_2;
    } else {
      __CrestBranch(69568, 44861, 0);

    }
    }
    {
    __CrestLoad(69571, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69570, (unsigned long )0, (long long )-4);
    __CrestApply2(69569, 12, (long long )(tok == -4));
# 3286 "xmlparse.c"
    if (tok == -4) {
      __CrestBranch(69572, 44863, 1);
# 3286 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(69573, 44864, 0);

    }
    }
    {
    __CrestLoad(69576, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(69575, (unsigned long )0, (long long )-1);
    __CrestApply2(69574, 12, (long long )(tok == -1));
# 3286 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(69577, 44866, 1);
# 3286 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(69578, 44867, 0);

    }
    }
# 3292 "xmlparse.c"
    goto switch_default;
    case_40:
    {
    __CrestLoad(69581, (unsigned long )(& parser->m_endCdataSectionHandler), (long long )((unsigned long )parser->m_endCdataSectionHandler));
    __CrestLoad(69580, (unsigned long )0, (long long )0);
    __CrestApply2(69579, 13, (long long )(parser->m_endCdataSectionHandler != 0));
# 3228 "xmlparse.c"
    if (parser->m_endCdataSectionHandler != 0) {
      __CrestBranch(69582, 44870, 1);
# 3229 "xmlparse.c"
      mem_19 = parser->m_endCdataSectionHandler;
# 3229 "xmlparse.c"
      (*mem_19)(parser->m_handlerArg);
      __CrestClearStack(69584);
    } else {
      __CrestBranch(69583, 44871, 0);
      {
      __CrestLoad(69587, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(69586, (unsigned long )0, (long long )0);
      __CrestApply2(69585, 13, (long long )(parser->m_defaultHandler != 0));
# 3235 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(69588, 44872, 1);
# 3236 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(69590);
      } else {
        __CrestBranch(69589, 44873, 0);

      }
      }
    }
    }
# 3237 "xmlparse.c"
    *startPtr = next;
# 3238 "xmlparse.c"
    *nextPtr = next;
    {
    __CrestLoad(69593, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(69592, (unsigned long )0, (long long )2U);
    __CrestApply2(69591, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 3239 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
      __CrestBranch(69594, 44876, 1);
      __CrestLoad(69596, (unsigned long )0, (long long )((enum XML_Error )35));
      __CrestStore(69597, (unsigned long )(& __retres22));
# 3240 "xmlparse.c"
      __retres22 = (enum XML_Error )35;
# 3240 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69595, 44878, 0);
      __CrestLoad(69598, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(69599, (unsigned long )(& __retres22));
# 3242 "xmlparse.c"
      __retres22 = (enum XML_Error )0;
# 3242 "xmlparse.c"
      goto return_label;
    }
    }
    case_7:
    {
    __CrestLoad(69602, (unsigned long )(& parser->m_characterDataHandler), (long long )((unsigned long )parser->m_characterDataHandler));
    __CrestLoad(69601, (unsigned long )0, (long long )0);
    __CrestApply2(69600, 13, (long long )(parser->m_characterDataHandler != 0));
# 3244 "xmlparse.c"
    if (parser->m_characterDataHandler != 0) {
      __CrestBranch(69603, 44881, 1);
      __CrestLoad(69605, (unsigned long )0, (long long )((XML_Char )10));
      __CrestStore(69606, (unsigned long )(& c));
# 3245 "xmlparse.c"
      c = (XML_Char )10;
# 3246 "xmlparse.c"
      mem_20 = parser->m_characterDataHandler;
      __CrestLoad(69607, (unsigned long )0, (long long )1);
# 3246 "xmlparse.c"
      (*mem_20)(parser->m_handlerArg, (XML_Char const *)(& c), 1);
      __CrestClearStack(69608);
    } else {
      __CrestBranch(69604, 44882, 0);
      {
      __CrestLoad(69611, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(69610, (unsigned long )0, (long long )0);
      __CrestApply2(69609, 13, (long long )(parser->m_defaultHandler != 0));
# 3248 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(69612, 44883, 1);
# 3249 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(69614);
      } else {
        __CrestBranch(69613, 44884, 0);

      }
      }
    }
    }
# 3250 "xmlparse.c"
    goto switch_break;
    case_6:
# 3253 "xmlparse.c"
    charDataHandler = parser->m_characterDataHandler;
    {
    __CrestLoad(69617, (unsigned long )(& charDataHandler), (long long )((unsigned long )charDataHandler));
    __CrestLoad(69616, (unsigned long )0, (long long )0);
    __CrestApply2(69615, 13, (long long )(charDataHandler != 0));
# 3254 "xmlparse.c"
    if (charDataHandler != 0) {
      __CrestBranch(69618, 44888, 1);
      {
      __CrestLoad(69622, (unsigned long )(& enc->isUtf8), (long long )enc->isUtf8);
      __CrestLoad(69621, (unsigned long )0, (long long )0);
      __CrestApply2(69620, 12, (long long )(enc->isUtf8 == 0));
# 3255 "xmlparse.c"
      if (enc->isUtf8 == 0) {
        __CrestBranch(69623, 44889, 1);
        {
# 3256 "xmlparse.c"
        while (1) {
          while_continue___0: ;
# 3257 "xmlparse.c"
          dataPtr = parser->m_dataBuf;
# 3258 "xmlparse.c"
          mem_21 = enc->utf8Convert;
# 3258 "xmlparse.c"
          (*mem_21)(enc, & s, next, & dataPtr, (char const *)parser->m_dataBufEnd);
          __CrestClearStack(69625);
# 3259 "xmlparse.c"
          *eventEndPP = next;
          __CrestLoad(69628, (unsigned long )(& dataPtr), (long long )((unsigned long )dataPtr));
          __CrestLoad(69627, (unsigned long )(& parser->m_dataBuf), (long long )((unsigned long )parser->m_dataBuf));
          __CrestApply2(69626, 18, (long long )(dataPtr - parser->m_dataBuf));
# 3260 "xmlparse.c"
          (*charDataHandler)(parser->m_handlerArg, (XML_Char const *)parser->m_dataBuf,
                             (int )(dataPtr - parser->m_dataBuf));
          __CrestClearStack(69629);
          {
          __CrestLoad(69632, (unsigned long )(& s), (long long )((unsigned long )s));
          __CrestLoad(69631, (unsigned long )(& next), (long long )((unsigned long )next));
          __CrestApply2(69630, 12, (long long )((unsigned long )s == (unsigned long )next));
# 3262 "xmlparse.c"
          if ((unsigned long )s == (unsigned long )next) {
            __CrestBranch(69633, 44894, 1);
# 3263 "xmlparse.c"
            goto while_break___0;
          } else {
            __CrestBranch(69634, 44895, 0);

          }
          }
# 3264 "xmlparse.c"
          *eventPP = s;
        }
        while_break___0: ;
        }
      } else {
        __CrestBranch(69624, 44898, 0);
        __CrestLoad(69637, (unsigned long )(& next), (long long )((unsigned long )next));
        __CrestLoad(69636, (unsigned long )(& s), (long long )((unsigned long )s));
        __CrestApply2(69635, 18, (long long )((XML_Char *)next - (XML_Char *)s));
# 3268 "xmlparse.c"
        (*charDataHandler)(parser->m_handlerArg, (XML_Char const *)((XML_Char *)s),
                           (int )((XML_Char *)next - (XML_Char *)s));
        __CrestClearStack(69638);
      }
      }
    } else {
      __CrestBranch(69619, 44899, 0);
      {
      __CrestLoad(69641, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(69640, (unsigned long )0, (long long )0);
      __CrestApply2(69639, 13, (long long )(parser->m_defaultHandler != 0));
# 3272 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(69642, 44900, 1);
# 3273 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(69644);
      } else {
        __CrestBranch(69643, 44901, 0);

      }
      }
    }
    }
# 3275 "xmlparse.c"
    goto switch_break;
    case_0:
# 3277 "xmlparse.c"
    *eventPP = next;
    __CrestLoad(69645, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(69646, (unsigned long )(& __retres22));
# 3278 "xmlparse.c"
    __retres22 = (enum XML_Error )4;
# 3278 "xmlparse.c"
    goto return_label;
    case_neg_2:
    {
    __CrestLoad(69649, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(69648, (unsigned long )0, (long long )0);
    __CrestApply2(69647, 13, (long long )(haveMore != 0));
# 3280 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(69650, 44907, 1);
# 3281 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(69652, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(69653, (unsigned long )(& __retres22));
# 3282 "xmlparse.c"
      __retres22 = (enum XML_Error )0;
# 3282 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69651, 44910, 0);

    }
    }
    __CrestLoad(69654, (unsigned long )0, (long long )((enum XML_Error )6));
    __CrestStore(69655, (unsigned long )(& __retres22));
# 3284 "xmlparse.c"
    __retres22 = (enum XML_Error )6;
# 3284 "xmlparse.c"
    goto return_label;
    case_neg_4:
    case_neg_1:
    {
    __CrestLoad(69658, (unsigned long )(& haveMore), (long long )haveMore);
    __CrestLoad(69657, (unsigned long )0, (long long )0);
    __CrestApply2(69656, 13, (long long )(haveMore != 0));
# 3287 "xmlparse.c"
    if (haveMore != 0) {
      __CrestBranch(69659, 44914, 1);
# 3288 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(69661, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(69662, (unsigned long )(& __retres22));
# 3289 "xmlparse.c"
      __retres22 = (enum XML_Error )0;
# 3289 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69660, 44917, 0);

    }
    }
    __CrestLoad(69663, (unsigned long )0, (long long )((enum XML_Error )20));
    __CrestStore(69664, (unsigned long )(& __retres22));
# 3291 "xmlparse.c"
    __retres22 = (enum XML_Error )20;
# 3291 "xmlparse.c"
    goto return_label;
    switch_default:
# 3293 "xmlparse.c"
    *eventPP = next;
    __CrestLoad(69665, (unsigned long )0, (long long )((enum XML_Error )23));
    __CrestStore(69666, (unsigned long )(& __retres22));
# 3294 "xmlparse.c"
    __retres22 = (enum XML_Error )23;
# 3294 "xmlparse.c"
    goto return_label;
    switch_break: ;
    }
# 3297 "xmlparse.c"
    s = next;
# 3297 "xmlparse.c"
    *eventPP = s;
    {
    {
    __CrestLoad(69669, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(69668, (unsigned long )0, (long long )3U);
    __CrestApply2(69667, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 3299 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(69670, 44927, 1);
# 3299 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(69671, 44928, 0);

    }
    }
    {
    __CrestLoad(69674, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(69673, (unsigned long )0, (long long )2U);
    __CrestApply2(69672, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 3302 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
      __CrestBranch(69675, 44930, 1);
# 3302 "xmlparse.c"
      goto case_2;
    } else {
      __CrestBranch(69676, 44931, 0);

    }
    }
# 3304 "xmlparse.c"
    goto switch_default___0;
    case_3:
# 3300 "xmlparse.c"
    *nextPtr = next;
    __CrestLoad(69677, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69678, (unsigned long )(& __retres22));
# 3301 "xmlparse.c"
    __retres22 = (enum XML_Error )0;
# 3301 "xmlparse.c"
    goto return_label;
    case_2:
    __CrestLoad(69679, (unsigned long )0, (long long )((enum XML_Error )35));
    __CrestStore(69680, (unsigned long )(& __retres22));
# 3303 "xmlparse.c"
    __retres22 = (enum XML_Error )35;
# 3303 "xmlparse.c"
    goto return_label;
    switch_default___0: ;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(69681, (unsigned long )(& __retres22), (long long )__retres22);
  __CrestReturn(69682);
# 3199 "xmlparse.c"
  return (__retres22);
  }
}
}
# 3315 "xmlparse.c"
static enum XML_Error ignoreSectionProcessor(XML_Parser parser , char const *start ,
                                             char const *end , char const **endPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  enum XML_Error tmp___0 ;
  enum XML_Error __retres8 ;

  {
  __CrestCall(69683, 770);

  __CrestLoad(69685, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(69684, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 3321 "xmlparse.c"
  tmp = doIgnoreSection(parser, parser->m_encoding, & start, end, endPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(69687, (long long )tmp);
  __CrestStore(69686, (unsigned long )(& tmp));
  __CrestLoad(69688, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(69689, (unsigned long )(& result));
# 3321 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(69692, (unsigned long )(& result), (long long )result);
  __CrestLoad(69691, (unsigned long )0, (long long )0U);
  __CrestApply2(69690, 13, (long long )((unsigned int )result != 0U));
# 3323 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(69693, 44944, 1);
    __CrestLoad(69695, (unsigned long )(& result), (long long )result);
    __CrestStore(69696, (unsigned long )(& __retres8));
# 3324 "xmlparse.c"
    __retres8 = result;
# 3324 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69694, 44946, 0);

  }
  }
  {
  __CrestLoad(69699, (unsigned long )(& start), (long long )((unsigned long )start));
  __CrestLoad(69698, (unsigned long )0, (long long )0);
  __CrestApply2(69697, 13, (long long )(start != 0));
# 3325 "xmlparse.c"
  if (start != 0) {
    __CrestBranch(69700, 44948, 1);
# 3326 "xmlparse.c"
    parser->m_processor = & prologProcessor;
# 3327 "xmlparse.c"
    tmp___0 = prologProcessor(parser, start, end, endPtr);
    __CrestHandleReturn(69703, (long long )tmp___0);
    __CrestStore(69702, (unsigned long )(& tmp___0));
    __CrestLoad(69704, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(69705, (unsigned long )(& __retres8));
# 3327 "xmlparse.c"
    __retres8 = tmp___0;
# 3327 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69701, 44951, 0);

  }
  }
  __CrestLoad(69706, (unsigned long )(& result), (long long )result);
  __CrestStore(69707, (unsigned long )(& __retres8));
# 3329 "xmlparse.c"
  __retres8 = result;
  return_label:
  {
  __CrestLoad(69708, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(69709);
# 3315 "xmlparse.c"
  return (__retres8);
  }
}
}
# 3335 "xmlparse.c"
static enum XML_Error doIgnoreSection(XML_Parser parser , ENCODING const *enc ,
                                      char const **startPtr , char const *end ,
                                      char const **nextPtr , XML_Bool haveMore )
{
  char const *next ;
  int tok ;
  char const *s ;
  char const **eventPP ;
  char const **eventEndPP ;
  OPEN_INTERNAL_ENTITY *mem_12 ;
  OPEN_INTERNAL_ENTITY *mem_13 ;
  SCANNER mem_14 ;
  enum XML_Error __retres15 ;

  {
  __CrestCall(69711, 771);
  __CrestStore(69710, (unsigned long )(& haveMore));
# 3345 "xmlparse.c"
  s = *startPtr;
  {
  __CrestLoad(69714, (unsigned long )(& enc), (long long )((unsigned long )enc));
  __CrestLoad(69713, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
  __CrestApply2(69712, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 3348 "xmlparse.c"
  if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
    __CrestBranch(69715, 44956, 1);
# 3349 "xmlparse.c"
    eventPP = & parser->m_eventPtr;
# 3350 "xmlparse.c"
    *eventPP = s;
# 3351 "xmlparse.c"
    eventEndPP = & parser->m_eventEndPtr;
  } else {
    __CrestBranch(69716, 44957, 0);
# 3354 "xmlparse.c"
    mem_12 = parser->m_openInternalEntities;
# 3354 "xmlparse.c"
    eventPP = & mem_12->internalEventPtr;
# 3355 "xmlparse.c"
    mem_13 = parser->m_openInternalEntities;
# 3355 "xmlparse.c"
    eventEndPP = & mem_13->internalEventEndPtr;
  }
  }
# 3357 "xmlparse.c"
  *eventPP = s;
# 3358 "xmlparse.c"
  *startPtr = (char const *)((void *)0);
# 3359 "xmlparse.c"
  mem_14 = enc->scanners[3];
# 3359 "xmlparse.c"
  tok = (*mem_14)(enc, s, end, & next);
  __CrestHandleReturn(69718, (long long )tok);
  __CrestStore(69717, (unsigned long )(& tok));
# 3360 "xmlparse.c"
  *eventEndPP = next;
  {
  {
  __CrestLoad(69721, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(69720, (unsigned long )0, (long long )42);
  __CrestApply2(69719, 12, (long long )(tok == 42));
# 3362 "xmlparse.c"
  if (tok == 42) {
    __CrestBranch(69722, 44961, 1);
# 3362 "xmlparse.c"
    goto case_42;
  } else {
    __CrestBranch(69723, 44962, 0);

  }
  }
  {
  __CrestLoad(69726, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(69725, (unsigned long )0, (long long )0);
  __CrestApply2(69724, 12, (long long )(tok == 0));
# 3371 "xmlparse.c"
  if (tok == 0) {
    __CrestBranch(69727, 44964, 1);
# 3371 "xmlparse.c"
    goto case_0;
  } else {
    __CrestBranch(69728, 44965, 0);

  }
  }
  {
  __CrestLoad(69731, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(69730, (unsigned long )0, (long long )-2);
  __CrestApply2(69729, 12, (long long )(tok == -2));
# 3374 "xmlparse.c"
  if (tok == -2) {
    __CrestBranch(69732, 44967, 1);
# 3374 "xmlparse.c"
    goto case_neg_2;
  } else {
    __CrestBranch(69733, 44968, 0);

  }
  }
  {
  __CrestLoad(69736, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(69735, (unsigned long )0, (long long )-4);
  __CrestApply2(69734, 12, (long long )(tok == -4));
# 3381 "xmlparse.c"
  if (tok == -4) {
    __CrestBranch(69737, 44970, 1);
# 3381 "xmlparse.c"
    goto case_neg_4;
  } else {
    __CrestBranch(69738, 44971, 0);

  }
  }
  {
  __CrestLoad(69741, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(69740, (unsigned long )0, (long long )-1);
  __CrestApply2(69739, 12, (long long )(tok == -1));
# 3381 "xmlparse.c"
  if (tok == -1) {
    __CrestBranch(69742, 44973, 1);
# 3381 "xmlparse.c"
    goto case_neg_4;
  } else {
    __CrestBranch(69743, 44974, 0);

  }
  }
# 3387 "xmlparse.c"
  goto switch_default;
  case_42:
  {
  __CrestLoad(69746, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
  __CrestLoad(69745, (unsigned long )0, (long long )0);
  __CrestApply2(69744, 13, (long long )(parser->m_defaultHandler != 0));
# 3363 "xmlparse.c"
  if (parser->m_defaultHandler != 0) {
    __CrestBranch(69747, 44977, 1);
# 3364 "xmlparse.c"
    reportDefault(parser, enc, s, next);
    __CrestClearStack(69749);
  } else {
    __CrestBranch(69748, 44978, 0);

  }
  }
# 3365 "xmlparse.c"
  *startPtr = next;
# 3366 "xmlparse.c"
  *nextPtr = next;
  {
  __CrestLoad(69752, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
  __CrestLoad(69751, (unsigned long )0, (long long )2U);
  __CrestApply2(69750, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 3367 "xmlparse.c"
  if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
    __CrestBranch(69753, 44981, 1);
    __CrestLoad(69755, (unsigned long )0, (long long )((enum XML_Error )35));
    __CrestStore(69756, (unsigned long )(& __retres15));
# 3368 "xmlparse.c"
    __retres15 = (enum XML_Error )35;
# 3368 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69754, 44983, 0);
    __CrestLoad(69757, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69758, (unsigned long )(& __retres15));
# 3370 "xmlparse.c"
    __retres15 = (enum XML_Error )0;
# 3370 "xmlparse.c"
    goto return_label;
  }
  }
  case_0:
# 3372 "xmlparse.c"
  *eventPP = next;
  __CrestLoad(69759, (unsigned long )0, (long long )((enum XML_Error )4));
  __CrestStore(69760, (unsigned long )(& __retres15));
# 3373 "xmlparse.c"
  __retres15 = (enum XML_Error )4;
# 3373 "xmlparse.c"
  goto return_label;
  case_neg_2:
  {
  __CrestLoad(69763, (unsigned long )(& haveMore), (long long )haveMore);
  __CrestLoad(69762, (unsigned long )0, (long long )0);
  __CrestApply2(69761, 13, (long long )(haveMore != 0));
# 3375 "xmlparse.c"
  if (haveMore != 0) {
    __CrestBranch(69764, 44989, 1);
# 3376 "xmlparse.c"
    *nextPtr = s;
    __CrestLoad(69766, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69767, (unsigned long )(& __retres15));
# 3377 "xmlparse.c"
    __retres15 = (enum XML_Error )0;
# 3377 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69765, 44992, 0);

  }
  }
  __CrestLoad(69768, (unsigned long )0, (long long )((enum XML_Error )6));
  __CrestStore(69769, (unsigned long )(& __retres15));
# 3379 "xmlparse.c"
  __retres15 = (enum XML_Error )6;
# 3379 "xmlparse.c"
  goto return_label;
  case_neg_4:
  case_neg_1:
  {
  __CrestLoad(69772, (unsigned long )(& haveMore), (long long )haveMore);
  __CrestLoad(69771, (unsigned long )0, (long long )0);
  __CrestApply2(69770, 13, (long long )(haveMore != 0));
# 3382 "xmlparse.c"
  if (haveMore != 0) {
    __CrestBranch(69773, 44996, 1);
# 3383 "xmlparse.c"
    *nextPtr = s;
    __CrestLoad(69775, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69776, (unsigned long )(& __retres15));
# 3384 "xmlparse.c"
    __retres15 = (enum XML_Error )0;
# 3384 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69774, 44999, 0);

  }
  }
  __CrestLoad(69777, (unsigned long )0, (long long )((enum XML_Error )2));
  __CrestStore(69778, (unsigned long )(& __retres15));
# 3386 "xmlparse.c"
  __retres15 = (enum XML_Error )2;
# 3386 "xmlparse.c"
  goto return_label;
  switch_default:
# 3388 "xmlparse.c"
  *eventPP = next;
  __CrestLoad(69779, (unsigned long )0, (long long )((enum XML_Error )23));
  __CrestStore(69780, (unsigned long )(& __retres15));
# 3389 "xmlparse.c"
  __retres15 = (enum XML_Error )23;
# 3389 "xmlparse.c"
  goto return_label;
  switch_break: ;
  }
  return_label:
  {
  __CrestLoad(69781, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(69782);
# 3335 "xmlparse.c"
  return (__retres15);
  }
}
}
# 3396 "xmlparse.c"
static enum XML_Error initializeEncoding(XML_Parser parser )
{
  char const *s ;
  int (*tmp)(INIT_ENCODING * , ENCODING const ** , char const *name ) ;
  int tmp___0 ;
  enum XML_Error tmp___1 ;
  enum XML_Error __retres6 ;

  {
  __CrestCall(69783, 772);
# 3418 "xmlparse.c"
  s = parser->m_protocolEncodingName;
  {
  __CrestLoad(69786, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
  __CrestLoad(69785, (unsigned long )0, (long long )0);
  __CrestApply2(69784, 13, (long long )(parser->m_ns != 0));
# 3420 "xmlparse.c"
  if (parser->m_ns != 0) {
    __CrestBranch(69787, 45009, 1);
# 3420 "xmlparse.c"
    tmp = & XmlInitEncodingNS;
  } else {
    __CrestBranch(69788, 45010, 0);
# 3420 "xmlparse.c"
    tmp = & XmlInitEncoding;
  }
  }
# 3420 "xmlparse.c"
  tmp___0 = (*tmp)(& parser->m_initEncoding, & parser->m_encoding, s);
  __CrestHandleReturn(69790, (long long )tmp___0);
  __CrestStore(69789, (unsigned long )(& tmp___0));
  {
  __CrestLoad(69793, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(69792, (unsigned long )0, (long long )0);
  __CrestApply2(69791, 13, (long long )(tmp___0 != 0));
# 3420 "xmlparse.c"
  if (tmp___0 != 0) {
    __CrestBranch(69794, 45013, 1);
    __CrestLoad(69796, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(69797, (unsigned long )(& __retres6));
# 3421 "xmlparse.c"
    __retres6 = (enum XML_Error )0;
# 3421 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(69795, 45015, 0);

  }
  }
# 3422 "xmlparse.c"
  tmp___1 = handleUnknownEncoding(parser, parser->m_protocolEncodingName);
  __CrestHandleReturn(69799, (long long )tmp___1);
  __CrestStore(69798, (unsigned long )(& tmp___1));
  __CrestLoad(69800, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(69801, (unsigned long )(& __retres6));
# 3422 "xmlparse.c"
  __retres6 = tmp___1;
  return_label:
  {
  __CrestLoad(69802, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(69803);
# 3396 "xmlparse.c"
  return (__retres6);
  }
}
}
# 3425 "xmlparse.c"
static enum XML_Error processXmlDecl(XML_Parser parser , int isGeneralTextEntity ,
                                     char const *s , char const *next )
{
  char const *encodingName ;
  XML_Char const *storedEncName ;
  ENCODING const *newEncoding ;
  char const *version ;
  char const *versionend ;
  XML_Char const *storedversion ;
  int standalone ;
  int (*tmp)(int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
             char const *end , char const **badPtr , char const **versionPtr ,
             char const **versionEndPtr , char const **encodingNamePtr , ENCODING const **namedEncodingPtr ,
             int *standalonePtr ) ;
  int tmp___0 ;
  int tmp___1 ;
  XML_Char *tmp___2 ;
  XML_Char *tmp___3 ;
  enum XML_Error result ;
  int tmp___4 ;
  XML_Char *tmp___5 ;
  DTD *mem_20 ;
  ENCODING const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  ENCODING const *mem_23 ;
  void (*mem_24)(void *userData , XML_Char const *version , XML_Char const *encoding ,
                 int standalone ) ;
  ENCODING const *mem_25 ;
  ENCODING const *mem_26 ;
  int (*mem_27)(ENCODING const * , char const * ) ;
  enum XML_Error __retres28 ;

  {
  __CrestCall(69805, 773);
  __CrestStore(69804, (unsigned long )(& isGeneralTextEntity));
# 3429 "xmlparse.c"
  encodingName = (char const *)((void *)0);
# 3430 "xmlparse.c"
  storedEncName = (XML_Char const *)((void *)0);
# 3431 "xmlparse.c"
  newEncoding = (ENCODING const *)((void *)0);
# 3432 "xmlparse.c"
  version = (char const *)((void *)0);
# 3434 "xmlparse.c"
  storedversion = (XML_Char const *)((void *)0);
  __CrestLoad(69806, (unsigned long )0, (long long )-1);
  __CrestStore(69807, (unsigned long )(& standalone));
# 3435 "xmlparse.c"
  standalone = -1;
  {
  __CrestLoad(69810, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
  __CrestLoad(69809, (unsigned long )0, (long long )0);
  __CrestApply2(69808, 13, (long long )(parser->m_ns != 0));
# 3436 "xmlparse.c"
  if (parser->m_ns != 0) {
    __CrestBranch(69811, 45021, 1);
# 3436 "xmlparse.c"
    tmp = & XmlParseXmlDeclNS;
  } else {
    __CrestBranch(69812, 45022, 0);
# 3436 "xmlparse.c"
    tmp = & XmlParseXmlDecl;
  }
  }
  __CrestLoad(69813, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
# 3436 "xmlparse.c"
  tmp___0 = (*tmp)(isGeneralTextEntity, parser->m_encoding, s, next, & parser->m_eventPtr,
                   & version, & versionend, & encodingName, & newEncoding, & standalone);
  __CrestHandleReturn(69815, (long long )tmp___0);
  __CrestStore(69814, (unsigned long )(& tmp___0));
  {
  __CrestLoad(69818, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(69817, (unsigned long )0, (long long )0);
  __CrestApply2(69816, 13, (long long )(tmp___0 != 0));
# 3436 "xmlparse.c"
  if (tmp___0 != 0) {
    __CrestBranch(69819, 45025, 1);

  } else {
    __CrestBranch(69820, 45026, 0);
    {
    __CrestLoad(69823, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
    __CrestLoad(69822, (unsigned long )0, (long long )0);
    __CrestApply2(69821, 13, (long long )(isGeneralTextEntity != 0));
# 3448 "xmlparse.c"
    if (isGeneralTextEntity != 0) {
      __CrestBranch(69824, 45027, 1);
      __CrestLoad(69826, (unsigned long )0, (long long )((enum XML_Error )31));
      __CrestStore(69827, (unsigned long )(& __retres28));
# 3449 "xmlparse.c"
      __retres28 = (enum XML_Error )31;
# 3449 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(69825, 45029, 0);
      __CrestLoad(69828, (unsigned long )0, (long long )((enum XML_Error )30));
      __CrestStore(69829, (unsigned long )(& __retres28));
# 3451 "xmlparse.c"
      __retres28 = (enum XML_Error )30;
# 3451 "xmlparse.c"
      goto return_label;
    }
    }
  }
  }
  {
  __CrestLoad(69832, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
  __CrestLoad(69831, (unsigned long )0, (long long )0);
  __CrestApply2(69830, 12, (long long )(isGeneralTextEntity == 0));
# 3453 "xmlparse.c"
  if (isGeneralTextEntity == 0) {
    __CrestBranch(69833, 45032, 1);
    {
    __CrestLoad(69837, (unsigned long )(& standalone), (long long )standalone);
    __CrestLoad(69836, (unsigned long )0, (long long )1);
    __CrestApply2(69835, 12, (long long )(standalone == 1));
# 3453 "xmlparse.c"
    if (standalone == 1) {
      __CrestBranch(69838, 45033, 1);
# 3454 "xmlparse.c"
      mem_20 = parser->m_dtd;
      __CrestLoad(69840, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(69841, (unsigned long )(& mem_20->standalone));
# 3454 "xmlparse.c"
      mem_20->standalone = (XML_Bool )1;
      {
      __CrestLoad(69844, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
      __CrestLoad(69843, (unsigned long )0, (long long )1U);
      __CrestApply2(69842, 12, (long long )((unsigned int )parser->m_paramEntityParsing == 1U));
# 3456 "xmlparse.c"
      if ((unsigned int )parser->m_paramEntityParsing == 1U) {
        __CrestBranch(69845, 45035, 1);
        __CrestLoad(69847, (unsigned long )0, (long long )((enum XML_ParamEntityParsing )0));
        __CrestStore(69848, (unsigned long )(& parser->m_paramEntityParsing));
# 3457 "xmlparse.c"
        parser->m_paramEntityParsing = (enum XML_ParamEntityParsing )0;
      } else {
        __CrestBranch(69846, 45036, 0);

      }
      }
    } else {
      __CrestBranch(69839, 45037, 0);

    }
    }
  } else {
    __CrestBranch(69834, 45038, 0);

  }
  }
  {
  __CrestLoad(69851, (unsigned long )(& parser->m_xmlDeclHandler), (long long )((unsigned long )parser->m_xmlDeclHandler));
  __CrestLoad(69850, (unsigned long )0, (long long )0);
  __CrestApply2(69849, 13, (long long )(parser->m_xmlDeclHandler != 0));
# 3460 "xmlparse.c"
  if (parser->m_xmlDeclHandler != 0) {
    __CrestBranch(69852, 45040, 1);
    {
    __CrestLoad(69856, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
    __CrestLoad(69855, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(69854, 13, (long long )((unsigned long )encodingName != (unsigned long )((void *)0)));
# 3461 "xmlparse.c"
    if ((unsigned long )encodingName != (unsigned long )((void *)0)) {
      __CrestBranch(69857, 45041, 1);
# 3462 "xmlparse.c"
      mem_21 = parser->m_encoding;
# 3462 "xmlparse.c"
      mem_22 = mem_21->nameLength;
# 3462 "xmlparse.c"
      tmp___1 = (*mem_22)(parser->m_encoding, encodingName);
      __CrestHandleReturn(69860, (long long )tmp___1);
      __CrestStore(69859, (unsigned long )(& tmp___1));
# 3462 "xmlparse.c"
      tmp___2 = poolStoreString(& parser->m_temp2Pool, parser->m_encoding, encodingName,
                                encodingName + tmp___1);
      __CrestClearStack(69861);
# 3462 "xmlparse.c"
      storedEncName = (XML_Char const *)tmp___2;
      {
      __CrestLoad(69864, (unsigned long )(& storedEncName), (long long )((unsigned long )storedEncName));
      __CrestLoad(69863, (unsigned long )0, (long long )0);
      __CrestApply2(69862, 12, (long long )(storedEncName == 0));
# 3467 "xmlparse.c"
      if (storedEncName == 0) {
        __CrestBranch(69865, 45043, 1);
        __CrestLoad(69867, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(69868, (unsigned long )(& __retres28));
# 3468 "xmlparse.c"
        __retres28 = (enum XML_Error )1;
# 3468 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69866, 45045, 0);

      }
      }
# 3469 "xmlparse.c"
      parser->m_temp2Pool.start = parser->m_temp2Pool.ptr;
    } else {
      __CrestBranch(69858, 45047, 0);

    }
    }
    {
    __CrestLoad(69871, (unsigned long )(& version), (long long )((unsigned long )version));
    __CrestLoad(69870, (unsigned long )0, (long long )0);
    __CrestApply2(69869, 13, (long long )(version != 0));
# 3471 "xmlparse.c"
    if (version != 0) {
      __CrestBranch(69872, 45049, 1);
# 3472 "xmlparse.c"
      mem_23 = parser->m_encoding;
# 3472 "xmlparse.c"
      tmp___3 = poolStoreString(& parser->m_temp2Pool, parser->m_encoding, version,
                                versionend - mem_23->minBytesPerChar);
      __CrestClearStack(69874);
# 3472 "xmlparse.c"
      storedversion = (XML_Char const *)tmp___3;
      {
      __CrestLoad(69877, (unsigned long )(& storedversion), (long long )((unsigned long )storedversion));
      __CrestLoad(69876, (unsigned long )0, (long long )0);
      __CrestApply2(69875, 12, (long long )(storedversion == 0));
# 3476 "xmlparse.c"
      if (storedversion == 0) {
        __CrestBranch(69878, 45051, 1);
        __CrestLoad(69880, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(69881, (unsigned long )(& __retres28));
# 3477 "xmlparse.c"
        __retres28 = (enum XML_Error )1;
# 3477 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69879, 45053, 0);

      }
      }
    } else {
      __CrestBranch(69873, 45054, 0);

    }
    }
# 3479 "xmlparse.c"
    mem_24 = parser->m_xmlDeclHandler;
    __CrestLoad(69882, (unsigned long )(& standalone), (long long )standalone);
# 3479 "xmlparse.c"
    (*mem_24)(parser->m_handlerArg, storedversion, storedEncName, standalone);
    __CrestClearStack(69883);
  } else {
    __CrestBranch(69853, 45056, 0);
    {
    __CrestLoad(69886, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(69885, (unsigned long )0, (long long )0);
    __CrestApply2(69884, 13, (long long )(parser->m_defaultHandler != 0));
# 3481 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(69887, 45057, 1);
# 3482 "xmlparse.c"
      reportDefault(parser, parser->m_encoding, s, next);
      __CrestClearStack(69889);
    } else {
      __CrestBranch(69888, 45058, 0);

    }
    }
  }
  }
  {
  __CrestLoad(69892, (unsigned long )(& parser->m_protocolEncodingName), (long long )((unsigned long )parser->m_protocolEncodingName));
  __CrestLoad(69891, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(69890, 12, (long long )((unsigned long )parser->m_protocolEncodingName == (unsigned long )((void *)0)));
# 3483 "xmlparse.c"
  if ((unsigned long )parser->m_protocolEncodingName == (unsigned long )((void *)0)) {
    __CrestBranch(69893, 45060, 1);
    {
    __CrestLoad(69897, (unsigned long )(& newEncoding), (long long )((unsigned long )newEncoding));
    __CrestLoad(69896, (unsigned long )0, (long long )0);
    __CrestApply2(69895, 13, (long long )(newEncoding != 0));
# 3484 "xmlparse.c"
    if (newEncoding != 0) {
      __CrestBranch(69898, 45061, 1);
      {
# 3485 "xmlparse.c"
      mem_25 = parser->m_encoding;
      {
      __CrestLoad(69902, (unsigned long )(& newEncoding->minBytesPerChar), (long long )newEncoding->minBytesPerChar);
      __CrestLoad(69901, (unsigned long )(& mem_25->minBytesPerChar), (long long )mem_25->minBytesPerChar);
      __CrestApply2(69900, 13, (long long )(newEncoding->minBytesPerChar != mem_25->minBytesPerChar));
# 3485 "xmlparse.c"
      if (newEncoding->minBytesPerChar != mem_25->minBytesPerChar) {
        __CrestBranch(69903, 45064, 1);
# 3486 "xmlparse.c"
        parser->m_eventPtr = encodingName;
        __CrestLoad(69905, (unsigned long )0, (long long )((enum XML_Error )19));
        __CrestStore(69906, (unsigned long )(& __retres28));
# 3487 "xmlparse.c"
        __retres28 = (enum XML_Error )19;
# 3487 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69904, 45067, 0);

      }
      }
      }
# 3489 "xmlparse.c"
      parser->m_encoding = newEncoding;
    } else {
      __CrestBranch(69899, 45069, 0);
      {
      __CrestLoad(69909, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
      __CrestLoad(69908, (unsigned long )0, (long long )0);
      __CrestApply2(69907, 13, (long long )(encodingName != 0));
# 3491 "xmlparse.c"
      if (encodingName != 0) {
        __CrestBranch(69910, 45070, 1);
        {
        __CrestLoad(69914, (unsigned long )(& storedEncName), (long long )((unsigned long )storedEncName));
        __CrestLoad(69913, (unsigned long )0, (long long )0);
        __CrestApply2(69912, 12, (long long )(storedEncName == 0));
# 3493 "xmlparse.c"
        if (storedEncName == 0) {
          __CrestBranch(69915, 45071, 1);
# 3494 "xmlparse.c"
          mem_26 = parser->m_encoding;
# 3494 "xmlparse.c"
          mem_27 = mem_26->nameLength;
# 3494 "xmlparse.c"
          tmp___4 = (*mem_27)(parser->m_encoding, encodingName);
          __CrestHandleReturn(69918, (long long )tmp___4);
          __CrestStore(69917, (unsigned long )(& tmp___4));
# 3494 "xmlparse.c"
          tmp___5 = poolStoreString(& parser->m_temp2Pool, parser->m_encoding, encodingName,
                                    encodingName + tmp___4);
          __CrestClearStack(69919);
# 3494 "xmlparse.c"
          storedEncName = (XML_Char const *)tmp___5;
          {
          __CrestLoad(69922, (unsigned long )(& storedEncName), (long long )((unsigned long )storedEncName));
          __CrestLoad(69921, (unsigned long )0, (long long )0);
          __CrestApply2(69920, 12, (long long )(storedEncName == 0));
# 3497 "xmlparse.c"
          if (storedEncName == 0) {
            __CrestBranch(69923, 45073, 1);
            __CrestLoad(69925, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(69926, (unsigned long )(& __retres28));
# 3498 "xmlparse.c"
            __retres28 = (enum XML_Error )1;
# 3498 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(69924, 45075, 0);

          }
          }
        } else {
          __CrestBranch(69916, 45076, 0);

        }
        }
# 3500 "xmlparse.c"
        result = handleUnknownEncoding(parser, storedEncName);
        __CrestHandleReturn(69928, (long long )result);
        __CrestStore(69927, (unsigned long )(& result));
# 3501 "xmlparse.c"
        poolClear(& parser->m_temp2Pool);
        __CrestClearStack(69929);
        {
        __CrestLoad(69932, (unsigned long )(& result), (long long )result);
        __CrestLoad(69931, (unsigned long )0, (long long )18U);
        __CrestApply2(69930, 12, (long long )((unsigned int )result == 18U));
# 3502 "xmlparse.c"
        if ((unsigned int )result == 18U) {
          __CrestBranch(69933, 45079, 1);
# 3503 "xmlparse.c"
          parser->m_eventPtr = encodingName;
        } else {
          __CrestBranch(69934, 45080, 0);

        }
        }
        __CrestLoad(69935, (unsigned long )(& result), (long long )result);
        __CrestStore(69936, (unsigned long )(& __retres28));
# 3504 "xmlparse.c"
        __retres28 = result;
# 3504 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69911, 45083, 0);

      }
      }
    }
    }
  } else {
    __CrestBranch(69894, 45084, 0);

  }
  }
  {
  __CrestLoad(69939, (unsigned long )(& storedEncName), (long long )((unsigned long )storedEncName));
  __CrestLoad(69938, (unsigned long )0, (long long )0);
  __CrestApply2(69937, 13, (long long )(storedEncName != 0));
# 3508 "xmlparse.c"
  if (storedEncName != 0) {
    __CrestBranch(69940, 45086, 1);
# 3509 "xmlparse.c"
    poolClear(& parser->m_temp2Pool);
    __CrestClearStack(69942);
  } else {
    __CrestBranch(69941, 45087, 0);
    {
    __CrestLoad(69945, (unsigned long )(& storedversion), (long long )((unsigned long )storedversion));
    __CrestLoad(69944, (unsigned long )0, (long long )0);
    __CrestApply2(69943, 13, (long long )(storedversion != 0));
# 3508 "xmlparse.c"
    if (storedversion != 0) {
      __CrestBranch(69946, 45088, 1);
# 3509 "xmlparse.c"
      poolClear(& parser->m_temp2Pool);
      __CrestClearStack(69948);
    } else {
      __CrestBranch(69947, 45089, 0);

    }
    }
  }
  }
  __CrestLoad(69949, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(69950, (unsigned long )(& __retres28));
# 3511 "xmlparse.c"
  __retres28 = (enum XML_Error )0;
  return_label:
  {
  __CrestLoad(69951, (unsigned long )(& __retres28), (long long )__retres28);
  __CrestReturn(69952);
# 3425 "xmlparse.c"
  return (__retres28);
  }
}
}
# 3514 "xmlparse.c"
static enum XML_Error handleUnknownEncoding(XML_Parser parser , XML_Char const *encodingName )
{
  XML_Encoding info ;
  int i ;
  ENCODING *enc ;
  int tmp ;
  ENCODING *(*tmp___0)(void *mem , int *table , int (*convert)(void *userData , char const *p ) ,
                       void *userData ) ;
  int tmp___1 ;
  int (*mem_9)(void *encodingHandlerData , XML_Char const *name , XML_Encoding *info ) ;
  void *(*mem_10)(size_t size ) ;
  void (*mem_11)(void *data ) ;
  void (*mem_12)(void *data ) ;
  enum XML_Error __retres13 ;

  {
  __CrestCall(69953, 774);

  {
  __CrestLoad(69956, (unsigned long )(& parser->m_unknownEncodingHandler), (long long )((unsigned long )parser->m_unknownEncodingHandler));
  __CrestLoad(69955, (unsigned long )0, (long long )0);
  __CrestApply2(69954, 13, (long long )(parser->m_unknownEncodingHandler != 0));
# 3517 "xmlparse.c"
  if (parser->m_unknownEncodingHandler != 0) {
    __CrestBranch(69957, 45093, 1);
    __CrestLoad(69959, (unsigned long )0, (long long )0);
    __CrestStore(69960, (unsigned long )(& i));
# 3520 "xmlparse.c"
    i = 0;
    {
# 3520 "xmlparse.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(69963, (unsigned long )(& i), (long long )i);
      __CrestLoad(69962, (unsigned long )0, (long long )256);
      __CrestApply2(69961, 16, (long long )(i < 256));
# 3520 "xmlparse.c"
      if (i < 256) {
        __CrestBranch(69964, 45098, 1);

      } else {
        __CrestBranch(69965, 45099, 0);
# 3520 "xmlparse.c"
        goto while_break;
      }
      }
      __CrestLoad(69966, (unsigned long )0, (long long )-1);
      __CrestStore(69967, (unsigned long )(& info.map[i]));
# 3521 "xmlparse.c"
      info.map[i] = -1;
      __CrestLoad(69970, (unsigned long )(& i), (long long )i);
      __CrestLoad(69969, (unsigned long )0, (long long )1);
      __CrestApply2(69968, 0, (long long )(i + 1));
      __CrestStore(69971, (unsigned long )(& i));
# 3520 "xmlparse.c"
      i ++;
    }
    while_break: ;
    }
# 3522 "xmlparse.c"
    info.convert = (int (*)(void *data , char const *s ))((void *)0);
# 3523 "xmlparse.c"
    info.data = (void *)0;
# 3524 "xmlparse.c"
    info.release = (void (*)(void *data ))((void *)0);
# 3525 "xmlparse.c"
    mem_9 = parser->m_unknownEncodingHandler;
# 3525 "xmlparse.c"
    tmp___1 = (*mem_9)(parser->m_unknownEncodingHandlerData, encodingName, & info);
    __CrestHandleReturn(69973, (long long )tmp___1);
    __CrestStore(69972, (unsigned long )(& tmp___1));
    {
    __CrestLoad(69976, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(69975, (unsigned long )0, (long long )0);
    __CrestApply2(69974, 13, (long long )(tmp___1 != 0));
# 3525 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(69977, 45104, 1);
# 3528 "xmlparse.c"
      tmp = XmlSizeOfUnknownEncoding();
      __CrestHandleReturn(69980, (long long )tmp);
      __CrestStore(69979, (unsigned long )(& tmp));
# 3528 "xmlparse.c"
      mem_10 = parser->m_mem.malloc_fcn;
      __CrestLoad(69981, (unsigned long )(& tmp), (long long )tmp);
# 3528 "xmlparse.c"
      parser->m_unknownEncodingMem = (*mem_10)((size_t )tmp);
      __CrestClearStack(69982);
      {
      __CrestLoad(69985, (unsigned long )(& parser->m_unknownEncodingMem), (long long )((unsigned long )parser->m_unknownEncodingMem));
      __CrestLoad(69984, (unsigned long )0, (long long )0);
      __CrestApply2(69983, 12, (long long )(parser->m_unknownEncodingMem == 0));
# 3529 "xmlparse.c"
      if (parser->m_unknownEncodingMem == 0) {
        __CrestBranch(69986, 45106, 1);
        {
        __CrestLoad(69990, (unsigned long )(& info.release), (long long )((unsigned long )info.release));
        __CrestLoad(69989, (unsigned long )0, (long long )0);
        __CrestApply2(69988, 13, (long long )(info.release != 0));
# 3530 "xmlparse.c"
        if (info.release != 0) {
          __CrestBranch(69991, 45107, 1);
# 3531 "xmlparse.c"
          mem_11 = info.release;
# 3531 "xmlparse.c"
          (*mem_11)(info.data);
          __CrestClearStack(69993);
        } else {
          __CrestBranch(69992, 45108, 0);

        }
        }
        __CrestLoad(69994, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(69995, (unsigned long )(& __retres13));
# 3532 "xmlparse.c"
        __retres13 = (enum XML_Error )1;
# 3532 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(69987, 45111, 0);

      }
      }
      {
      __CrestLoad(69998, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
      __CrestLoad(69997, (unsigned long )0, (long long )0);
      __CrestApply2(69996, 13, (long long )(parser->m_ns != 0));
# 3534 "xmlparse.c"
      if (parser->m_ns != 0) {
        __CrestBranch(69999, 45113, 1);
# 3534 "xmlparse.c"
        tmp___0 = & XmlInitUnknownEncodingNS;
      } else {
        __CrestBranch(70000, 45114, 0);
# 3534 "xmlparse.c"
        tmp___0 = & XmlInitUnknownEncoding;
      }
      }
# 3534 "xmlparse.c"
      enc = (*tmp___0)(parser->m_unknownEncodingMem, info.map, info.convert, info.data);
      __CrestClearStack(70001);
      {
      __CrestLoad(70004, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(70003, (unsigned long )0, (long long )0);
      __CrestApply2(70002, 13, (long long )(enc != 0));
# 3540 "xmlparse.c"
      if (enc != 0) {
        __CrestBranch(70005, 45117, 1);
# 3541 "xmlparse.c"
        parser->m_unknownEncodingData = info.data;
# 3542 "xmlparse.c"
        parser->m_unknownEncodingRelease = info.release;
# 3543 "xmlparse.c"
        parser->m_encoding = (ENCODING const *)enc;
        __CrestLoad(70007, (unsigned long )0, (long long )((enum XML_Error )0));
        __CrestStore(70008, (unsigned long )(& __retres13));
# 3544 "xmlparse.c"
        __retres13 = (enum XML_Error )0;
# 3544 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(70006, 45120, 0);

      }
      }
    } else {
      __CrestBranch(69978, 45121, 0);

    }
    }
    {
    __CrestLoad(70011, (unsigned long )(& info.release), (long long )((unsigned long )info.release));
    __CrestLoad(70010, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(70009, 13, (long long )((unsigned long )info.release != (unsigned long )((void *)0)));
# 3547 "xmlparse.c"
    if ((unsigned long )info.release != (unsigned long )((void *)0)) {
      __CrestBranch(70012, 45123, 1);
# 3548 "xmlparse.c"
      mem_12 = info.release;
# 3548 "xmlparse.c"
      (*mem_12)(info.data);
      __CrestClearStack(70014);
    } else {
      __CrestBranch(70013, 45124, 0);

    }
    }
  } else {
    __CrestBranch(69958, 45125, 0);

  }
  }
  __CrestLoad(70015, (unsigned long )0, (long long )((enum XML_Error )18));
  __CrestStore(70016, (unsigned long )(& __retres13));
# 3550 "xmlparse.c"
  __retres13 = (enum XML_Error )18;
  return_label:
  {
  __CrestLoad(70017, (unsigned long )(& __retres13), (long long )__retres13);
  __CrestReturn(70018);
# 3514 "xmlparse.c"
  return (__retres13);
  }
}
}
# 3553 "xmlparse.c"
static enum XML_Error prologInitProcessor(XML_Parser parser , char const *s , char const *end ,
                                          char const **nextPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  enum XML_Error tmp___0 ;
  enum XML_Error __retres8 ;

  {
  __CrestCall(70019, 775);
# 3559 "xmlparse.c"
  tmp = initializeEncoding(parser);
  __CrestHandleReturn(70021, (long long )tmp);
  __CrestStore(70020, (unsigned long )(& tmp));
  __CrestLoad(70022, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(70023, (unsigned long )(& result));
# 3559 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(70026, (unsigned long )(& result), (long long )result);
  __CrestLoad(70025, (unsigned long )0, (long long )0U);
  __CrestApply2(70024, 13, (long long )((unsigned int )result != 0U));
# 3560 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(70027, 45130, 1);
    __CrestLoad(70029, (unsigned long )(& result), (long long )result);
    __CrestStore(70030, (unsigned long )(& __retres8));
# 3561 "xmlparse.c"
    __retres8 = result;
# 3561 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(70028, 45132, 0);

  }
  }
# 3562 "xmlparse.c"
  parser->m_processor = & prologProcessor;
# 3563 "xmlparse.c"
  tmp___0 = prologProcessor(parser, s, end, nextPtr);
  __CrestHandleReturn(70032, (long long )tmp___0);
  __CrestStore(70031, (unsigned long )(& tmp___0));
  __CrestLoad(70033, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(70034, (unsigned long )(& __retres8));
# 3563 "xmlparse.c"
  __retres8 = tmp___0;
  return_label:
  {
  __CrestLoad(70035, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(70036);
# 3553 "xmlparse.c"
  return (__retres8);
  }
}
}
# 3568 "xmlparse.c"
static enum XML_Error externalParEntInitProcessor(XML_Parser parser , char const *s ,
                                                  char const *end , char const **nextPtr )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  enum XML_Error tmp___0 ;
  enum XML_Error tmp___1 ;
  DTD *mem_9 ;
  enum XML_Error __retres10 ;

  {
  __CrestCall(70037, 776);
# 3574 "xmlparse.c"
  tmp = initializeEncoding(parser);
  __CrestHandleReturn(70039, (long long )tmp);
  __CrestStore(70038, (unsigned long )(& tmp));
  __CrestLoad(70040, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(70041, (unsigned long )(& result));
# 3574 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(70044, (unsigned long )(& result), (long long )result);
  __CrestLoad(70043, (unsigned long )0, (long long )0U);
  __CrestApply2(70042, 13, (long long )((unsigned int )result != 0U));
# 3575 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(70045, 45138, 1);
    __CrestLoad(70047, (unsigned long )(& result), (long long )result);
    __CrestStore(70048, (unsigned long )(& __retres10));
# 3576 "xmlparse.c"
    __retres10 = result;
# 3576 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(70046, 45140, 0);

  }
  }
# 3580 "xmlparse.c"
  mem_9 = parser->m_dtd;
  __CrestLoad(70049, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(70050, (unsigned long )(& mem_9->paramEntityRead));
# 3580 "xmlparse.c"
  mem_9->paramEntityRead = (XML_Bool )1;
  {
  __CrestLoad(70053, (unsigned long )(& parser->m_prologState.inEntityValue), (long long )parser->m_prologState.inEntityValue);
  __CrestLoad(70052, (unsigned long )0, (long long )0);
  __CrestApply2(70051, 13, (long long )(parser->m_prologState.inEntityValue != 0));
# 3582 "xmlparse.c"
  if (parser->m_prologState.inEntityValue != 0) {
    __CrestBranch(70054, 45143, 1);
# 3583 "xmlparse.c"
    parser->m_processor = & entityValueInitProcessor;
# 3584 "xmlparse.c"
    tmp___0 = entityValueInitProcessor(parser, s, end, nextPtr);
    __CrestHandleReturn(70057, (long long )tmp___0);
    __CrestStore(70056, (unsigned long )(& tmp___0));
    __CrestLoad(70058, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(70059, (unsigned long )(& __retres10));
# 3584 "xmlparse.c"
    __retres10 = tmp___0;
# 3584 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(70055, 45146, 0);
# 3587 "xmlparse.c"
    parser->m_processor = & externalParEntProcessor;
# 3588 "xmlparse.c"
    tmp___1 = externalParEntProcessor(parser, s, end, nextPtr);
    __CrestHandleReturn(70061, (long long )tmp___1);
    __CrestStore(70060, (unsigned long )(& tmp___1));
    __CrestLoad(70062, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(70063, (unsigned long )(& __retres10));
# 3588 "xmlparse.c"
    __retres10 = tmp___1;
# 3588 "xmlparse.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(70064, (unsigned long )(& __retres10), (long long )__retres10);
  __CrestReturn(70065);
# 3568 "xmlparse.c"
  return (__retres10);
  }
}
}
# 3592 "xmlparse.c"
static enum XML_Error entityValueInitProcessor(XML_Parser parser , char const *s ,
                                               char const *end , char const **nextPtr )
{
  int tok ;
  char const *start ;
  char const *next ;
  enum XML_Error tmp ;
  enum XML_Error result ;
  enum XML_Error tmp___0 ;
  ENCODING const *mem_11 ;
  SCANNER mem_12 ;
  enum XML_Error __retres13 ;

  {
  __CrestCall(70066, 777);
# 3599 "xmlparse.c"
  start = s;
# 3600 "xmlparse.c"
  next = start;
# 3601 "xmlparse.c"
  parser->m_eventPtr = start;
  {
# 3603 "xmlparse.c"
  while (1) {
    while_continue: ;
# 3604 "xmlparse.c"
    mem_11 = parser->m_encoding;
# 3604 "xmlparse.c"
    mem_12 = mem_11->scanners[0];
# 3604 "xmlparse.c"
    tok = (*mem_12)(parser->m_encoding, start, end, & next);
    __CrestHandleReturn(70068, (long long )tok);
    __CrestStore(70067, (unsigned long )(& tok));
# 3605 "xmlparse.c"
    parser->m_eventEndPtr = next;
    {
    __CrestLoad(70071, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70070, (unsigned long )0, (long long )0);
    __CrestApply2(70069, 15, (long long )(tok <= 0));
# 3606 "xmlparse.c"
    if (tok <= 0) {
      __CrestBranch(70072, 45156, 1);
      {
      __CrestLoad(70076, (unsigned long )(& parser->m_parsingStatus.finalBuffer),
                  (long long )parser->m_parsingStatus.finalBuffer);
      __CrestLoad(70075, (unsigned long )0, (long long )0);
      __CrestApply2(70074, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 3607 "xmlparse.c"
      if (parser->m_parsingStatus.finalBuffer == 0) {
        __CrestBranch(70077, 45157, 1);
        {
        __CrestLoad(70081, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(70080, (unsigned long )0, (long long )0);
        __CrestApply2(70079, 13, (long long )(tok != 0));
# 3607 "xmlparse.c"
        if (tok != 0) {
          __CrestBranch(70082, 45158, 1);
# 3608 "xmlparse.c"
          *nextPtr = s;
          __CrestLoad(70084, (unsigned long )0, (long long )((enum XML_Error )0));
          __CrestStore(70085, (unsigned long )(& __retres13));
# 3609 "xmlparse.c"
          __retres13 = (enum XML_Error )0;
# 3609 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70083, 45161, 0);

        }
        }
      } else {
        __CrestBranch(70078, 45162, 0);

      }
      }
      {
      {
      __CrestLoad(70088, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70087, (unsigned long )0, (long long )0);
      __CrestApply2(70086, 12, (long long )(tok == 0));
# 3612 "xmlparse.c"
      if (tok == 0) {
        __CrestBranch(70089, 45165, 1);
# 3612 "xmlparse.c"
        goto case_0;
      } else {
        __CrestBranch(70090, 45166, 0);

      }
      }
      {
      __CrestLoad(70093, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70092, (unsigned long )0, (long long )-1);
      __CrestApply2(70091, 12, (long long )(tok == -1));
# 3614 "xmlparse.c"
      if (tok == -1) {
        __CrestBranch(70094, 45168, 1);
# 3614 "xmlparse.c"
        goto case_neg_1;
      } else {
        __CrestBranch(70095, 45169, 0);

      }
      }
      {
      __CrestLoad(70098, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70097, (unsigned long )0, (long long )-2);
      __CrestApply2(70096, 12, (long long )(tok == -2));
# 3616 "xmlparse.c"
      if (tok == -2) {
        __CrestBranch(70099, 45171, 1);
# 3616 "xmlparse.c"
        goto case_neg_2;
      } else {
        __CrestBranch(70100, 45172, 0);

      }
      }
# 3619 "xmlparse.c"
      goto switch_default;
      case_0:
      __CrestLoad(70101, (unsigned long )0, (long long )((enum XML_Error )4));
      __CrestStore(70102, (unsigned long )(& __retres13));
# 3613 "xmlparse.c"
      __retres13 = (enum XML_Error )4;
# 3613 "xmlparse.c"
      goto return_label;
      case_neg_1:
      __CrestLoad(70103, (unsigned long )0, (long long )((enum XML_Error )5));
      __CrestStore(70104, (unsigned long )(& __retres13));
# 3615 "xmlparse.c"
      __retres13 = (enum XML_Error )5;
# 3615 "xmlparse.c"
      goto return_label;
      case_neg_2:
      __CrestLoad(70105, (unsigned long )0, (long long )((enum XML_Error )6));
      __CrestStore(70106, (unsigned long )(& __retres13));
# 3617 "xmlparse.c"
      __retres13 = (enum XML_Error )6;
# 3617 "xmlparse.c"
      goto return_label;
      switch_default:
# 3620 "xmlparse.c"
      goto switch_break;
      switch_break: ;
      }
# 3623 "xmlparse.c"
      tmp = storeEntityValue(parser, parser->m_encoding, s, end);
      __CrestHandleReturn(70108, (long long )tmp);
      __CrestStore(70107, (unsigned long )(& tmp));
      __CrestLoad(70109, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(70110, (unsigned long )(& __retres13));
# 3623 "xmlparse.c"
      __retres13 = tmp;
# 3623 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70073, 45185, 0);
      {
      __CrestLoad(70113, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70112, (unsigned long )0, (long long )12);
      __CrestApply2(70111, 12, (long long )(tok == 12));
# 3625 "xmlparse.c"
      if (tok == 12) {
        __CrestBranch(70114, 45186, 1);
        __CrestLoad(70116, (unsigned long )0, (long long )0);
# 3627 "xmlparse.c"
        result = processXmlDecl(parser, 0, start, next);
        __CrestHandleReturn(70118, (long long )result);
        __CrestStore(70117, (unsigned long )(& result));
        {
        __CrestLoad(70121, (unsigned long )(& result), (long long )result);
        __CrestLoad(70120, (unsigned long )0, (long long )0U);
        __CrestApply2(70119, 13, (long long )((unsigned int )result != 0U));
# 3628 "xmlparse.c"
        if ((unsigned int )result != 0U) {
          __CrestBranch(70122, 45188, 1);
          __CrestLoad(70124, (unsigned long )(& result), (long long )result);
          __CrestStore(70125, (unsigned long )(& __retres13));
# 3629 "xmlparse.c"
          __retres13 = result;
# 3629 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70123, 45190, 0);

        }
        }
        {
        {
        __CrestLoad(70128, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
        __CrestLoad(70127, (unsigned long )0, (long long )3U);
        __CrestApply2(70126, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 3631 "xmlparse.c"
        if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
          __CrestBranch(70129, 45193, 1);
# 3631 "xmlparse.c"
          goto case_3;
        } else {
          __CrestBranch(70130, 45194, 0);

        }
        }
        {
        __CrestLoad(70133, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
        __CrestLoad(70132, (unsigned long )0, (long long )2U);
        __CrestApply2(70131, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 3634 "xmlparse.c"
        if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
          __CrestBranch(70134, 45196, 1);
# 3634 "xmlparse.c"
          goto case_2;
        } else {
          __CrestBranch(70135, 45197, 0);

        }
        }
# 3636 "xmlparse.c"
        goto switch_default___0;
        case_3:
# 3632 "xmlparse.c"
        *nextPtr = next;
        __CrestLoad(70136, (unsigned long )0, (long long )((enum XML_Error )0));
        __CrestStore(70137, (unsigned long )(& __retres13));
# 3633 "xmlparse.c"
        __retres13 = (enum XML_Error )0;
# 3633 "xmlparse.c"
        goto return_label;
        case_2:
        __CrestLoad(70138, (unsigned long )0, (long long )((enum XML_Error )35));
        __CrestStore(70139, (unsigned long )(& __retres13));
# 3635 "xmlparse.c"
        __retres13 = (enum XML_Error )35;
# 3635 "xmlparse.c"
        goto return_label;
        switch_default___0:
# 3637 "xmlparse.c"
        *nextPtr = next;
        switch_break___0: ;
        }
# 3640 "xmlparse.c"
        parser->m_processor = & entityValueProcessor;
# 3641 "xmlparse.c"
        tmp___0 = entityValueProcessor(parser, next, end, nextPtr);
        __CrestHandleReturn(70141, (long long )tmp___0);
        __CrestStore(70140, (unsigned long )(& tmp___0));
        __CrestLoad(70142, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestStore(70143, (unsigned long )(& __retres13));
# 3641 "xmlparse.c"
        __retres13 = tmp___0;
# 3641 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(70115, 45209, 0);
        {
        __CrestLoad(70146, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(70145, (unsigned long )0, (long long )14);
        __CrestApply2(70144, 12, (long long )(tok == 14));
# 3650 "xmlparse.c"
        if (tok == 14) {
          __CrestBranch(70147, 45210, 1);
          {
          __CrestLoad(70151, (unsigned long )(& next), (long long )((unsigned long )next));
          __CrestLoad(70150, (unsigned long )(& end), (long long )((unsigned long )end));
          __CrestApply2(70149, 12, (long long )((unsigned long )next == (unsigned long )end));
# 3650 "xmlparse.c"
          if ((unsigned long )next == (unsigned long )end) {
            __CrestBranch(70152, 45211, 1);
            {
            __CrestLoad(70156, (unsigned long )(& parser->m_parsingStatus.finalBuffer),
                        (long long )parser->m_parsingStatus.finalBuffer);
            __CrestLoad(70155, (unsigned long )0, (long long )0);
            __CrestApply2(70154, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 3650 "xmlparse.c"
            if (parser->m_parsingStatus.finalBuffer == 0) {
              __CrestBranch(70157, 45212, 1);
# 3651 "xmlparse.c"
              *nextPtr = next;
              __CrestLoad(70159, (unsigned long )0, (long long )((enum XML_Error )0));
              __CrestStore(70160, (unsigned long )(& __retres13));
# 3652 "xmlparse.c"
              __retres13 = (enum XML_Error )0;
# 3652 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(70158, 45215, 0);

            }
            }
          } else {
            __CrestBranch(70153, 45216, 0);

          }
          }
        } else {
          __CrestBranch(70148, 45217, 0);

        }
        }
      }
      }
    }
    }
# 3654 "xmlparse.c"
    start = next;
# 3655 "xmlparse.c"
    parser->m_eventPtr = start;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(70161, (unsigned long )(& __retres13), (long long )__retres13);
  __CrestReturn(70162);
# 3592 "xmlparse.c"
  return (__retres13);
  }
}
}
# 3659 "xmlparse.c"
static enum XML_Error externalParEntProcessor(XML_Parser parser , char const *s ,
                                              char const *end , char const **nextPtr )
{
  char const *next ;
  int tok ;
  enum XML_Error tmp ;
  ENCODING const *mem_8 ;
  SCANNER mem_9 ;
  ENCODING const *mem_10 ;
  SCANNER mem_11 ;
  enum XML_Error __retres12 ;

  {
  __CrestCall(70163, 778);
# 3665 "xmlparse.c"
  next = s;
# 3668 "xmlparse.c"
  mem_8 = parser->m_encoding;
# 3668 "xmlparse.c"
  mem_9 = mem_8->scanners[0];
# 3668 "xmlparse.c"
  tok = (*mem_9)(parser->m_encoding, s, end, & next);
  __CrestHandleReturn(70165, (long long )tok);
  __CrestStore(70164, (unsigned long )(& tok));
  {
  __CrestLoad(70168, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(70167, (unsigned long )0, (long long )0);
  __CrestApply2(70166, 15, (long long )(tok <= 0));
# 3669 "xmlparse.c"
  if (tok <= 0) {
    __CrestBranch(70169, 45223, 1);
    {
    __CrestLoad(70173, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestLoad(70172, (unsigned long )0, (long long )0);
    __CrestApply2(70171, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 3670 "xmlparse.c"
    if (parser->m_parsingStatus.finalBuffer == 0) {
      __CrestBranch(70174, 45224, 1);
      {
      __CrestLoad(70178, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70177, (unsigned long )0, (long long )0);
      __CrestApply2(70176, 13, (long long )(tok != 0));
# 3670 "xmlparse.c"
      if (tok != 0) {
        __CrestBranch(70179, 45225, 1);
# 3671 "xmlparse.c"
        *nextPtr = s;
        __CrestLoad(70181, (unsigned long )0, (long long )((enum XML_Error )0));
        __CrestStore(70182, (unsigned long )(& __retres12));
# 3672 "xmlparse.c"
        __retres12 = (enum XML_Error )0;
# 3672 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(70180, 45228, 0);

      }
      }
    } else {
      __CrestBranch(70175, 45229, 0);

    }
    }
    {
    {
    __CrestLoad(70185, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70184, (unsigned long )0, (long long )0);
    __CrestApply2(70183, 12, (long long )(tok == 0));
# 3675 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(70186, 45232, 1);
# 3675 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(70187, 45233, 0);

    }
    }
    {
    __CrestLoad(70190, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70189, (unsigned long )0, (long long )-1);
    __CrestApply2(70188, 12, (long long )(tok == -1));
# 3677 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(70191, 45235, 1);
# 3677 "xmlparse.c"
      goto case_neg_1;
    } else {
      __CrestBranch(70192, 45236, 0);

    }
    }
    {
    __CrestLoad(70195, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70194, (unsigned long )0, (long long )-2);
    __CrestApply2(70193, 12, (long long )(tok == -2));
# 3679 "xmlparse.c"
    if (tok == -2) {
      __CrestBranch(70196, 45238, 1);
# 3679 "xmlparse.c"
      goto case_neg_2;
    } else {
      __CrestBranch(70197, 45239, 0);

    }
    }
# 3682 "xmlparse.c"
    goto switch_default;
    case_0:
    __CrestLoad(70198, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(70199, (unsigned long )(& __retres12));
# 3676 "xmlparse.c"
    __retres12 = (enum XML_Error )4;
# 3676 "xmlparse.c"
    goto return_label;
    case_neg_1:
    __CrestLoad(70200, (unsigned long )0, (long long )((enum XML_Error )5));
    __CrestStore(70201, (unsigned long )(& __retres12));
# 3678 "xmlparse.c"
    __retres12 = (enum XML_Error )5;
# 3678 "xmlparse.c"
    goto return_label;
    case_neg_2:
    __CrestLoad(70202, (unsigned long )0, (long long )((enum XML_Error )6));
    __CrestStore(70203, (unsigned long )(& __retres12));
# 3680 "xmlparse.c"
    __retres12 = (enum XML_Error )6;
# 3680 "xmlparse.c"
    goto return_label;
    switch_default:
# 3683 "xmlparse.c"
    goto switch_break;
    switch_break: ;
    }
  } else {
    __CrestBranch(70170, 45249, 0);
    {
    __CrestLoad(70206, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70205, (unsigned long )0, (long long )14);
    __CrestApply2(70204, 12, (long long )(tok == 14));
# 3690 "xmlparse.c"
    if (tok == 14) {
      __CrestBranch(70207, 45250, 1);
# 3691 "xmlparse.c"
      s = next;
# 3692 "xmlparse.c"
      mem_10 = parser->m_encoding;
# 3692 "xmlparse.c"
      mem_11 = mem_10->scanners[0];
# 3692 "xmlparse.c"
      tok = (*mem_11)(parser->m_encoding, s, end, & next);
      __CrestHandleReturn(70210, (long long )tok);
      __CrestStore(70209, (unsigned long )(& tok));
    } else {
      __CrestBranch(70208, 45251, 0);

    }
    }
  }
  }
# 3695 "xmlparse.c"
  parser->m_processor = & prologProcessor;
  __CrestLoad(70211, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(70213, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(70212, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 3696 "xmlparse.c"
  tmp = doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(70215, (long long )tmp);
  __CrestStore(70214, (unsigned long )(& tmp));
  __CrestLoad(70216, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(70217, (unsigned long )(& __retres12));
# 3696 "xmlparse.c"
  __retres12 = tmp;
  return_label:
  {
  __CrestLoad(70218, (unsigned long )(& __retres12), (long long )__retres12);
  __CrestReturn(70219);
# 3659 "xmlparse.c"
  return (__retres12);
  }
}
}
# 3700 "xmlparse.c"
static enum XML_Error entityValueProcessor(XML_Parser parser , char const *s , char const *end ,
                                           char const **nextPtr )
{
  char const *start ;
  char const *next ;
  ENCODING const *enc ;
  int tok ;
  enum XML_Error tmp ;
  SCANNER mem_10 ;
  enum XML_Error __retres11 ;

  {
  __CrestCall(70220, 779);
# 3706 "xmlparse.c"
  start = s;
# 3707 "xmlparse.c"
  next = s;
# 3708 "xmlparse.c"
  enc = parser->m_encoding;
  {
# 3711 "xmlparse.c"
  while (1) {
    while_continue: ;
# 3712 "xmlparse.c"
    mem_10 = enc->scanners[0];
# 3712 "xmlparse.c"
    tok = (*mem_10)(enc, start, end, & next);
    __CrestHandleReturn(70222, (long long )tok);
    __CrestStore(70221, (unsigned long )(& tok));
    {
    __CrestLoad(70225, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70224, (unsigned long )0, (long long )0);
    __CrestApply2(70223, 15, (long long )(tok <= 0));
# 3713 "xmlparse.c"
    if (tok <= 0) {
      __CrestBranch(70226, 45261, 1);
      {
      __CrestLoad(70230, (unsigned long )(& parser->m_parsingStatus.finalBuffer),
                  (long long )parser->m_parsingStatus.finalBuffer);
      __CrestLoad(70229, (unsigned long )0, (long long )0);
      __CrestApply2(70228, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 3714 "xmlparse.c"
      if (parser->m_parsingStatus.finalBuffer == 0) {
        __CrestBranch(70231, 45262, 1);
        {
        __CrestLoad(70235, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(70234, (unsigned long )0, (long long )0);
        __CrestApply2(70233, 13, (long long )(tok != 0));
# 3714 "xmlparse.c"
        if (tok != 0) {
          __CrestBranch(70236, 45263, 1);
# 3715 "xmlparse.c"
          *nextPtr = s;
          __CrestLoad(70238, (unsigned long )0, (long long )((enum XML_Error )0));
          __CrestStore(70239, (unsigned long )(& __retres11));
# 3716 "xmlparse.c"
          __retres11 = (enum XML_Error )0;
# 3716 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70237, 45266, 0);

        }
        }
      } else {
        __CrestBranch(70232, 45267, 0);

      }
      }
      {
      {
      __CrestLoad(70242, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70241, (unsigned long )0, (long long )0);
      __CrestApply2(70240, 12, (long long )(tok == 0));
# 3719 "xmlparse.c"
      if (tok == 0) {
        __CrestBranch(70243, 45270, 1);
# 3719 "xmlparse.c"
        goto case_0;
      } else {
        __CrestBranch(70244, 45271, 0);

      }
      }
      {
      __CrestLoad(70247, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70246, (unsigned long )0, (long long )-1);
      __CrestApply2(70245, 12, (long long )(tok == -1));
# 3721 "xmlparse.c"
      if (tok == -1) {
        __CrestBranch(70248, 45273, 1);
# 3721 "xmlparse.c"
        goto case_neg_1;
      } else {
        __CrestBranch(70249, 45274, 0);

      }
      }
      {
      __CrestLoad(70252, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70251, (unsigned long )0, (long long )-2);
      __CrestApply2(70250, 12, (long long )(tok == -2));
# 3723 "xmlparse.c"
      if (tok == -2) {
        __CrestBranch(70253, 45276, 1);
# 3723 "xmlparse.c"
        goto case_neg_2;
      } else {
        __CrestBranch(70254, 45277, 0);

      }
      }
# 3726 "xmlparse.c"
      goto switch_default;
      case_0:
      __CrestLoad(70255, (unsigned long )0, (long long )((enum XML_Error )4));
      __CrestStore(70256, (unsigned long )(& __retres11));
# 3720 "xmlparse.c"
      __retres11 = (enum XML_Error )4;
# 3720 "xmlparse.c"
      goto return_label;
      case_neg_1:
      __CrestLoad(70257, (unsigned long )0, (long long )((enum XML_Error )5));
      __CrestStore(70258, (unsigned long )(& __retres11));
# 3722 "xmlparse.c"
      __retres11 = (enum XML_Error )5;
# 3722 "xmlparse.c"
      goto return_label;
      case_neg_2:
      __CrestLoad(70259, (unsigned long )0, (long long )((enum XML_Error )6));
      __CrestStore(70260, (unsigned long )(& __retres11));
# 3724 "xmlparse.c"
      __retres11 = (enum XML_Error )6;
# 3724 "xmlparse.c"
      goto return_label;
      switch_default:
# 3727 "xmlparse.c"
      goto switch_break;
      switch_break: ;
      }
# 3730 "xmlparse.c"
      tmp = storeEntityValue(parser, enc, s, end);
      __CrestHandleReturn(70262, (long long )tmp);
      __CrestStore(70261, (unsigned long )(& tmp));
      __CrestLoad(70263, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(70264, (unsigned long )(& __retres11));
# 3730 "xmlparse.c"
      __retres11 = tmp;
# 3730 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70227, 45290, 0);

    }
    }
# 3732 "xmlparse.c"
    start = next;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(70265, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(70266);
# 3700 "xmlparse.c"
  return (__retres11);
  }
}
}
# 3738 "xmlparse.c"
static enum XML_Error prologProcessor(XML_Parser parser , char const *s , char const *end ,
                                      char const **nextPtr )
{
  char const *next ;
  int tok ;
  int tmp ;
  enum XML_Error tmp___0 ;
  ENCODING const *mem_9 ;
  SCANNER mem_10 ;

  {
  __CrestCall(70267, 780);
# 3744 "xmlparse.c"
  next = s;
# 3745 "xmlparse.c"
  mem_9 = parser->m_encoding;
# 3745 "xmlparse.c"
  mem_10 = mem_9->scanners[0];
# 3745 "xmlparse.c"
  tmp = (*mem_10)(parser->m_encoding, s, end, & next);
  __CrestHandleReturn(70269, (long long )tmp);
  __CrestStore(70268, (unsigned long )(& tmp));
  __CrestLoad(70270, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(70271, (unsigned long )(& tok));
# 3745 "xmlparse.c"
  tok = tmp;
  __CrestLoad(70272, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(70274, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
  __CrestApply1(70273, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 3746 "xmlparse.c"
  tmp___0 = doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
  __CrestHandleReturn(70276, (long long )tmp___0);
  __CrestStore(70275, (unsigned long )(& tmp___0));
  {
  __CrestLoad(70277, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestReturn(70278);
# 3746 "xmlparse.c"
  return (tmp___0);
  }
}
}
# 3761 "xmlparse.c"
static XML_Char const externalSubsetName[2] = { (XML_Char const )35, (XML_Char const )'\000'};
# 3763 "xmlparse.c"
static XML_Char const atypeCDATA[6] = { (XML_Char const )67, (XML_Char const )68, (XML_Char const )65, (XML_Char const )84,
        (XML_Char const )65, (XML_Char const )'\000'};
# 3765 "xmlparse.c"
static XML_Char const atypeID[3] = { (XML_Char const )73, (XML_Char const )68, (XML_Char const )'\000'};
# 3766 "xmlparse.c"
static XML_Char const atypeIDREF[6] = { (XML_Char const )73, (XML_Char const )68, (XML_Char const )82, (XML_Char const )69,
        (XML_Char const )70, (XML_Char const )'\000'};
# 3768 "xmlparse.c"
static XML_Char const atypeIDREFS[7] = { (XML_Char const )73, (XML_Char const )68, (XML_Char const )82, (XML_Char const )69,
        (XML_Char const )70, (XML_Char const )83, (XML_Char const )'\000'};
# 3770 "xmlparse.c"
static XML_Char const atypeENTITY[7] = { (XML_Char const )69, (XML_Char const )78, (XML_Char const )84, (XML_Char const )73,
        (XML_Char const )84, (XML_Char const )89, (XML_Char const )'\000'};
# 3772 "xmlparse.c"
static XML_Char const atypeENTITIES[9] =
# 3772 "xmlparse.c"
  { (XML_Char const )69, (XML_Char const )78, (XML_Char const )84, (XML_Char const )73,
        (XML_Char const )84, (XML_Char const )73, (XML_Char const )69, (XML_Char const )83,
        (XML_Char const )'\000'};
# 3774 "xmlparse.c"
static XML_Char const atypeNMTOKEN[8] =
# 3774 "xmlparse.c"
  { (XML_Char const )78, (XML_Char const )77, (XML_Char const )84, (XML_Char const )79,
        (XML_Char const )75, (XML_Char const )69, (XML_Char const )78, (XML_Char const )'\000'};
# 3776 "xmlparse.c"
static XML_Char const atypeNMTOKENS[9] =
# 3776 "xmlparse.c"
  { (XML_Char const )78, (XML_Char const )77, (XML_Char const )84, (XML_Char const )79,
        (XML_Char const )75, (XML_Char const )69, (XML_Char const )78, (XML_Char const )83,
        (XML_Char const )'\000'};
# 3778 "xmlparse.c"
static XML_Char const notationPrefix[10] =
# 3778 "xmlparse.c"
  { (XML_Char const )78, (XML_Char const )79, (XML_Char const )84, (XML_Char const )65,
        (XML_Char const )84, (XML_Char const )73, (XML_Char const )79, (XML_Char const )78,
        (XML_Char const )40, (XML_Char const )'\000'};
# 3780 "xmlparse.c"
static XML_Char const enumValueSep[2] = { (XML_Char const )124, (XML_Char const )'\000'};
# 3781 "xmlparse.c"
static XML_Char const enumValueStart[2] = { (XML_Char const )40, (XML_Char const )'\000'};
# 3750 "xmlparse.c"
static enum XML_Error doProlog(XML_Parser parser , ENCODING const *enc , char const *s ,
                               char const *end , int tok , char const *next ,
                               char const **nextPtr , XML_Bool haveMore )
{
  DTD *dtd ;
  char const **eventPP ;
  char const **eventEndPP ;
  enum XML_Content_Quant quant ;
  int role ;
  XML_Bool handleDefault ;
  int tmp ;
  enum XML_Error result ;
  enum XML_Error tmp___0 ;
  XML_Char *tmp___1 ;
  enum XML_Error result___0 ;
  enum XML_Error tmp___2 ;
  NAMED *tmp___3 ;
  XML_Char *pubId ;
  int tmp___4 ;
  int tmp___5 ;
  XML_Char *tem ;
  XML_Char *tmp___6 ;
  XML_Bool hadParamEntityRefs ;
  ENTITY *entity ;
  NAMED *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  XML_Bool hadParamEntityRefs___0 ;
  ENTITY *entity___0 ;
  NAMED *tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  enum XML_Error tmp___13 ;
  XML_Char const *prefix ;
  XML_Char const *tmp___14 ;
  XML_Char *tmp___15 ;
  int tmp___16 ;
  XML_Char *tmp___18 ;
  int tmp___19 ;
  XML_Bool tmp___20 ;
  XML_Char *tmp___22 ;
  int tmp___23 ;
  XML_Bool tmp___24 ;
  XML_Char const *attVal ;
  enum XML_Error result___1 ;
  enum XML_Error tmp___25 ;
  int tmp___26 ;
  XML_Char *tmp___28 ;
  int tmp___29 ;
  XML_Bool tmp___30 ;
  XML_Char *tmp___32 ;
  int tmp___33 ;
  XML_Bool tmp___34 ;
  enum XML_Error result___2 ;
  enum XML_Error tmp___35 ;
  XML_Char *tmp___36 ;
  int tmp___37 ;
  NAMED *tmp___38 ;
  XML_Char *tmp___39 ;
  XML_Char *tmp___40 ;
  int tmp___41 ;
  XML_Char const *name ;
  XML_Char *tmp___42 ;
  NAMED *tmp___43 ;
  int tmp___44 ;
  XML_Char const *name___0 ;
  XML_Char *tmp___45 ;
  NAMED *tmp___46 ;
  int tmp___47 ;
  XML_Char *tmp___48 ;
  int tmp___49 ;
  XML_Char *tem___0 ;
  XML_Char *tmp___50 ;
  XML_Char const *systemId ;
  XML_Char *tmp___51 ;
  enum XML_Error result___3 ;
  char *temp ;
  unsigned int tmp___52 ;
  void *tmp___53 ;
  int *temp___0 ;
  void *tmp___54 ;
  unsigned int tmp___55 ;
  void *tmp___56 ;
  int myindex ;
  int tmp___57 ;
  XML_Char const *name___1 ;
  ENTITY *entity___1 ;
  XML_Char *tmp___58 ;
  NAMED *tmp___59 ;
  int tmp___60 ;
  enum XML_Error result___4 ;
  XML_Bool betweenDecl ;
  int tmp___61 ;
  int tmp___62 ;
  int tmp___63 ;
  XML_Content *content ;
  void *tmp___64 ;
  ELEMENT_TYPE *el ;
  XML_Char const *name___2 ;
  int nameLen ;
  char const *nxt ;
  char const *tmp___65 ;
  int myindex___0 ;
  int tmp___66 ;
  int tmp___67 ;
  XML_Content *model ;
  XML_Content *tmp___68 ;
  int tmp___69 ;
  int tmp___70 ;
  OPEN_INTERNAL_ENTITY *mem_118 ;
  OPEN_INTERNAL_ENTITY *mem_119 ;
  OPEN_INTERNAL_ENTITY *mem_120 ;
  int (*mem_121)(struct prolog_state *state , int tok , char const *ptr , char const *end ,
                 ENCODING const *enc ) ;
  int (*mem_122)(struct prolog_state *state , int tok , char const *ptr , char const *end ,
                 ENCODING const *enc ) ;
  void (*mem_123)(void *userData , XML_Char const *doctypeName , XML_Char const *sysid ,
                  XML_Char const *pubid , int has_internal_subset ) ;
  int (*mem_124)(ENCODING const *enc , char const *ptr , char const *end , char const **badPtr ) ;
  int (*mem_125)(ENCODING const *enc , char const *ptr , char const *end , char const **badPtr ) ;
  ENTITY *mem_126 ;
  void (*mem_127)(void *userData , XML_Char const *doctypeName , XML_Char const *sysid ,
                  XML_Char const *pubid , int has_internal_subset ) ;
  int (*mem_128)(XML_Parser parser , XML_Char const *context , XML_Char const *base ,
                 XML_Char const *systemId , XML_Char const *publicId ) ;
  int (*mem_129)(void *userData ) ;
  void (*mem_130)(void *userData ) ;
  int (*mem_131)(XML_Parser parser , XML_Char const *context , XML_Char const *base ,
                 XML_Char const *systemId , XML_Char const *publicId ) ;
  int (*mem_132)(void *userData ) ;
  XML_Char const *mem_133 ;
  XML_Char const *mem_134 ;
  XML_Char const *mem_135 ;
  void (*mem_136)(void *userData , XML_Char const *elname , XML_Char const *attname ,
                  XML_Char const *att_type , XML_Char const *dflt , int isrequired ) ;
  ELEMENT_TYPE *mem_137 ;
  ATTRIBUTE_ID *mem_138 ;
  XML_Char const *mem_139 ;
  XML_Char const *mem_140 ;
  XML_Char const *mem_141 ;
  void (*mem_142)(void *userData , XML_Char const *elname , XML_Char const *attname ,
                  XML_Char const *att_type , XML_Char const *dflt , int isrequired ) ;
  ELEMENT_TYPE *mem_143 ;
  ATTRIBUTE_ID *mem_144 ;
  ENTITY *mem_145 ;
  ENTITY *mem_146 ;
  void (*mem_147)(void *userData , XML_Char const *entityName , int is_parameter_entity ,
                  XML_Char const *value , int value_length , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId , XML_Char const *notationName ) ;
  ENTITY *mem_148 ;
  ENTITY *mem_149 ;
  ENTITY *mem_150 ;
  ENTITY *mem_151 ;
  int (*mem_152)(void *userData ) ;
  ENTITY *mem_153 ;
  ENTITY *mem_154 ;
  ENTITY *mem_155 ;
  ENTITY *mem_156 ;
  void (*mem_157)(void *userData , XML_Char const *entityName , int is_parameter_entity ,
                  XML_Char const *value , int value_length , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId , XML_Char const *notationName ) ;
  ENTITY *mem_158 ;
  ENTITY *mem_159 ;
  ENTITY *mem_160 ;
  ENTITY *mem_161 ;
  ENTITY *mem_162 ;
  ENTITY *mem_163 ;
  ENTITY *mem_164 ;
  void (*mem_165)(void *userData , XML_Char const *entityName , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId , XML_Char const *notationName ) ;
  ENTITY *mem_166 ;
  ENTITY *mem_167 ;
  ENTITY *mem_168 ;
  ENTITY *mem_169 ;
  ENTITY *mem_170 ;
  void (*mem_171)(void *userData , XML_Char const *entityName , int is_parameter_entity ,
                  XML_Char const *value , int value_length , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId , XML_Char const *notationName ) ;
  ENTITY *mem_172 ;
  ENTITY *mem_173 ;
  ENTITY *mem_174 ;
  ENTITY *mem_175 ;
  ENTITY *mem_176 ;
  int (*mem_177)(ENCODING const * , char const * , char const * ) ;
  ENTITY *mem_178 ;
  ENTITY *mem_179 ;
  ENTITY *mem_180 ;
  ENTITY *mem_181 ;
  ENTITY *mem_182 ;
  ENTITY *mem_183 ;
  ENTITY *mem_184 ;
  ENTITY *mem_185 ;
  int (*mem_186)(ENCODING const *enc , char const *ptr , char const *end , char const **badPtr ) ;
  void (*mem_187)(void *userData , XML_Char const *notationName , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId ) ;
  void (*mem_188)(void *userData , XML_Char const *notationName , XML_Char const *base ,
                  XML_Char const *systemId , XML_Char const *publicId ) ;
  void *(*mem_189)(void *ptr , size_t size ) ;
  void *(*mem_190)(void *ptr , size_t size ) ;
  void *(*mem_191)(size_t size ) ;
  char *mem_192 ;
  int *mem_193 ;
  CONTENT_SCAFFOLD *mem_194 ;
  char *mem_195 ;
  char *mem_196 ;
  char *mem_197 ;
  char *mem_198 ;
  int *mem_199 ;
  CONTENT_SCAFFOLD *mem_200 ;
  int *mem_201 ;
  CONTENT_SCAFFOLD *mem_202 ;
  char *mem_203 ;
  void (*mem_204)(void *userData , XML_Char const *entityName , int is_parameter_entity ) ;
  int (*mem_205)(XML_Parser parser , XML_Char const *context , XML_Char const *base ,
                 XML_Char const *systemId , XML_Char const *publicId ) ;
  int (*mem_206)(void *userData ) ;
  void *(*mem_207)(size_t size ) ;
  void (*mem_208)(void *userData , XML_Char const *name , XML_Content *model ) ;
  ELEMENT_TYPE *mem_209 ;
  int *mem_210 ;
  CONTENT_SCAFFOLD *mem_211 ;
  CONTENT_SCAFFOLD *mem_212 ;
  CONTENT_SCAFFOLD *mem_213 ;
  CONTENT_SCAFFOLD *mem_214 ;
  XML_Char const *mem_215 ;
  int *mem_216 ;
  CONTENT_SCAFFOLD *mem_217 ;
  void (*mem_218)(void *userData , XML_Char const *name , XML_Content *model ) ;
  ELEMENT_TYPE *mem_219 ;
  SCANNER mem_220 ;
  enum XML_Error __retres221 ;

  {
  __CrestCall(70281, 781);
  __CrestStore(70280, (unsigned long )(& haveMore));
  __CrestStore(70279, (unsigned long )(& tok));
# 3784 "xmlparse.c"
  dtd = parser->m_dtd;
  {
  __CrestLoad(70284, (unsigned long )(& enc), (long long )((unsigned long )enc));
  __CrestLoad(70283, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
  __CrestApply2(70282, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 3790 "xmlparse.c"
  if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
    __CrestBranch(70285, 45298, 1);
# 3791 "xmlparse.c"
    eventPP = & parser->m_eventPtr;
# 3792 "xmlparse.c"
    eventEndPP = & parser->m_eventEndPtr;
  } else {
    __CrestBranch(70286, 45299, 0);
# 3795 "xmlparse.c"
    mem_118 = parser->m_openInternalEntities;
# 3795 "xmlparse.c"
    eventPP = & mem_118->internalEventPtr;
# 3796 "xmlparse.c"
    mem_119 = parser->m_openInternalEntities;
# 3796 "xmlparse.c"
    eventEndPP = & mem_119->internalEventEndPtr;
  }
  }
  {
# 3799 "xmlparse.c"
  while (1) {
    while_continue: ;
    __CrestLoad(70287, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(70288, (unsigned long )(& handleDefault));
# 3801 "xmlparse.c"
    handleDefault = (XML_Bool )1;
# 3802 "xmlparse.c"
    *eventPP = s;
# 3803 "xmlparse.c"
    *eventEndPP = next;
    {
    __CrestLoad(70291, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(70290, (unsigned long )0, (long long )0);
    __CrestApply2(70289, 15, (long long )(tok <= 0));
# 3804 "xmlparse.c"
    if (tok <= 0) {
      __CrestBranch(70292, 45305, 1);
      {
      __CrestLoad(70296, (unsigned long )(& haveMore), (long long )haveMore);
      __CrestLoad(70295, (unsigned long )0, (long long )0);
      __CrestApply2(70294, 13, (long long )(haveMore != 0));
# 3805 "xmlparse.c"
      if (haveMore != 0) {
        __CrestBranch(70297, 45306, 1);
        {
        __CrestLoad(70301, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(70300, (unsigned long )0, (long long )0);
        __CrestApply2(70299, 13, (long long )(tok != 0));
# 3805 "xmlparse.c"
        if (tok != 0) {
          __CrestBranch(70302, 45307, 1);
# 3806 "xmlparse.c"
          *nextPtr = s;
          __CrestLoad(70304, (unsigned long )0, (long long )((enum XML_Error )0));
          __CrestStore(70305, (unsigned long )(& __retres221));
# 3807 "xmlparse.c"
          __retres221 = (enum XML_Error )0;
# 3807 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70303, 45310, 0);

        }
        }
      } else {
        __CrestBranch(70298, 45311, 0);

      }
      }
      {
      {
      __CrestLoad(70308, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70307, (unsigned long )0, (long long )0);
      __CrestApply2(70306, 12, (long long )(tok == 0));
# 3810 "xmlparse.c"
      if (tok == 0) {
        __CrestBranch(70309, 45314, 1);
# 3810 "xmlparse.c"
        goto case_0;
      } else {
        __CrestBranch(70310, 45315, 0);

      }
      }
      {
      __CrestLoad(70313, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70312, (unsigned long )0, (long long )-1);
      __CrestApply2(70311, 12, (long long )(tok == -1));
# 3813 "xmlparse.c"
      if (tok == -1) {
        __CrestBranch(70314, 45317, 1);
# 3813 "xmlparse.c"
        goto case_neg_1;
      } else {
        __CrestBranch(70315, 45318, 0);

      }
      }
      {
      __CrestLoad(70318, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70317, (unsigned long )0, (long long )-2);
      __CrestApply2(70316, 12, (long long )(tok == -2));
# 3815 "xmlparse.c"
      if (tok == -2) {
        __CrestBranch(70319, 45320, 1);
# 3815 "xmlparse.c"
        goto case_neg_2;
      } else {
        __CrestBranch(70320, 45321, 0);

      }
      }
      {
      __CrestLoad(70323, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70322, (unsigned long )0, (long long )-15);
      __CrestApply2(70321, 12, (long long )(tok == -15));
# 3817 "xmlparse.c"
      if (tok == -15) {
        __CrestBranch(70324, 45323, 1);
# 3817 "xmlparse.c"
        goto case_neg_15;
      } else {
        __CrestBranch(70325, 45324, 0);

      }
      }
      {
      __CrestLoad(70328, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(70327, (unsigned long )0, (long long )-4);
      __CrestApply2(70326, 12, (long long )(tok == -4));
# 3820 "xmlparse.c"
      if (tok == -4) {
        __CrestBranch(70329, 45326, 1);
# 3820 "xmlparse.c"
        goto case_neg_4;
      } else {
        __CrestBranch(70330, 45327, 0);

      }
      }
# 3840 "xmlparse.c"
      goto switch_default;
      case_0:
# 3811 "xmlparse.c"
      *eventPP = next;
      __CrestLoad(70331, (unsigned long )0, (long long )((enum XML_Error )4));
      __CrestStore(70332, (unsigned long )(& __retres221));
# 3812 "xmlparse.c"
      __retres221 = (enum XML_Error )4;
# 3812 "xmlparse.c"
      goto return_label;
      case_neg_1:
      __CrestLoad(70333, (unsigned long )0, (long long )((enum XML_Error )5));
      __CrestStore(70334, (unsigned long )(& __retres221));
# 3814 "xmlparse.c"
      __retres221 = (enum XML_Error )5;
# 3814 "xmlparse.c"
      goto return_label;
      case_neg_2:
      __CrestLoad(70335, (unsigned long )0, (long long )((enum XML_Error )6));
      __CrestStore(70336, (unsigned long )(& __retres221));
# 3816 "xmlparse.c"
      __retres221 = (enum XML_Error )6;
# 3816 "xmlparse.c"
      goto return_label;
      case_neg_15:
      __CrestLoad(70338, (unsigned long )(& tok), (long long )tok);
      __CrestApply1(70337, 19, (long long )(- tok));
      __CrestStore(70339, (unsigned long )(& tok));
# 3818 "xmlparse.c"
      tok = - tok;
# 3819 "xmlparse.c"
      goto switch_break;
      case_neg_4:
      {
      __CrestLoad(70342, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(70341, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(70340, 13, (long long )((unsigned long )enc != (unsigned long )parser->m_encoding));
# 3823 "xmlparse.c"
      if ((unsigned long )enc != (unsigned long )parser->m_encoding) {
        __CrestBranch(70343, 45339, 1);
        {
# 3823 "xmlparse.c"
        mem_120 = parser->m_openInternalEntities;
        {
        __CrestLoad(70347, (unsigned long )(& mem_120->betweenDecl), (long long )mem_120->betweenDecl);
        __CrestLoad(70346, (unsigned long )0, (long long )0);
        __CrestApply2(70345, 12, (long long )(mem_120->betweenDecl == 0));
# 3823 "xmlparse.c"
        if (mem_120->betweenDecl == 0) {
          __CrestBranch(70348, 45342, 1);
# 3824 "xmlparse.c"
          *nextPtr = s;
          __CrestLoad(70350, (unsigned long )0, (long long )((enum XML_Error )0));
          __CrestStore(70351, (unsigned long )(& __retres221));
# 3825 "xmlparse.c"
          __retres221 = (enum XML_Error )0;
# 3825 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70349, 45345, 0);

        }
        }
        }
      } else {
        __CrestBranch(70344, 45346, 0);

      }
      }
      {
      __CrestLoad(70354, (unsigned long )(& parser->m_isParamEntity), (long long )parser->m_isParamEntity);
      __CrestLoad(70353, (unsigned long )0, (long long )0);
      __CrestApply2(70352, 13, (long long )(parser->m_isParamEntity != 0));
# 3831 "xmlparse.c"
      if (parser->m_isParamEntity != 0) {
        __CrestBranch(70355, 45348, 1);
# 3831 "xmlparse.c"
        goto _L;
      } else {
        __CrestBranch(70356, 45349, 0);
        {
        __CrestLoad(70359, (unsigned long )(& enc), (long long )((unsigned long )enc));
        __CrestLoad(70358, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
        __CrestApply2(70357, 13, (long long )((unsigned long )enc != (unsigned long )parser->m_encoding));
# 3831 "xmlparse.c"
        if ((unsigned long )enc != (unsigned long )parser->m_encoding) {
          __CrestBranch(70360, 45350, 1);
          _L:
# 3832 "xmlparse.c"
          mem_121 = parser->m_prologState.handler;
          __CrestLoad(70362, (unsigned long )0, (long long )-4);
# 3832 "xmlparse.c"
          tmp = (*mem_121)(& parser->m_prologState, -4, end, end, enc);
          __CrestHandleReturn(70364, (long long )tmp);
          __CrestStore(70363, (unsigned long )(& tmp));
          {
          __CrestLoad(70367, (unsigned long )(& tmp), (long long )tmp);
          __CrestLoad(70366, (unsigned long )0, (long long )-1);
          __CrestApply2(70365, 12, (long long )(tmp == -1));
# 3832 "xmlparse.c"
          if (tmp == -1) {
            __CrestBranch(70368, 45352, 1);
            __CrestLoad(70370, (unsigned long )0, (long long )((enum XML_Error )29));
            __CrestStore(70371, (unsigned long )(& __retres221));
# 3834 "xmlparse.c"
            __retres221 = (enum XML_Error )29;
# 3834 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(70369, 45354, 0);

          }
          }
# 3835 "xmlparse.c"
          *nextPtr = s;
          __CrestLoad(70372, (unsigned long )0, (long long )((enum XML_Error )0));
          __CrestStore(70373, (unsigned long )(& __retres221));
# 3836 "xmlparse.c"
          __retres221 = (enum XML_Error )0;
# 3836 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70361, 45358, 0);

        }
        }
      }
      }
      __CrestLoad(70374, (unsigned long )0, (long long )((enum XML_Error )3));
      __CrestStore(70375, (unsigned long )(& __retres221));
# 3839 "xmlparse.c"
      __retres221 = (enum XML_Error )3;
# 3839 "xmlparse.c"
      goto return_label;
      switch_default:
      __CrestLoad(70377, (unsigned long )(& tok), (long long )tok);
      __CrestApply1(70376, 19, (long long )(- tok));
      __CrestStore(70378, (unsigned long )(& tok));
# 3841 "xmlparse.c"
      tok = - tok;
# 3842 "xmlparse.c"
      next = end;
# 3843 "xmlparse.c"
      goto switch_break;
      switch_break: ;
      }
    } else {
      __CrestBranch(70293, 45364, 0);

    }
    }
# 3846 "xmlparse.c"
    mem_122 = parser->m_prologState.handler;
    __CrestLoad(70379, (unsigned long )(& tok), (long long )tok);
# 3846 "xmlparse.c"
    role = (*mem_122)(& parser->m_prologState, tok, s, next, enc);
    __CrestHandleReturn(70381, (long long )role);
    __CrestStore(70380, (unsigned long )(& role));
    {
    {
    __CrestLoad(70384, (unsigned long )(& role), (long long )role);
    __CrestLoad(70383, (unsigned long )0, (long long )1);
    __CrestApply2(70382, 12, (long long )(role == 1));
# 3848 "xmlparse.c"
    if (role == 1) {
      __CrestBranch(70385, 45368, 1);
# 3848 "xmlparse.c"
      goto case_1;
    } else {
      __CrestBranch(70386, 45369, 0);

    }
    }
    {
    __CrestLoad(70389, (unsigned long )(& role), (long long )role);
    __CrestLoad(70388, (unsigned long )0, (long long )4);
    __CrestApply2(70387, 12, (long long )(role == 4));
# 3857 "xmlparse.c"
    if (role == 4) {
      __CrestBranch(70390, 45371, 1);
# 3857 "xmlparse.c"
      goto case_4;
    } else {
      __CrestBranch(70391, 45372, 0);

    }
    }
    {
    __CrestLoad(70394, (unsigned long )(& role), (long long )role);
    __CrestLoad(70393, (unsigned long )0, (long long )7);
    __CrestApply2(70392, 12, (long long )(role == 7));
# 3868 "xmlparse.c"
    if (role == 7) {
      __CrestBranch(70395, 45374, 1);
# 3868 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(70396, 45375, 0);

    }
    }
    {
    __CrestLoad(70399, (unsigned long )(& role), (long long )role);
    __CrestLoad(70398, (unsigned long )0, (long long )57);
    __CrestApply2(70397, 12, (long long )(role == 57));
# 3878 "xmlparse.c"
    if (role == 57) {
      __CrestBranch(70400, 45377, 1);
# 3878 "xmlparse.c"
      goto case_57;
    } else {
      __CrestBranch(70401, 45378, 0);

    }
    }
    {
    __CrestLoad(70404, (unsigned long )(& role), (long long )role);
    __CrestLoad(70403, (unsigned long )0, (long long )6);
    __CrestApply2(70402, 12, (long long )(role == 6));
# 3888 "xmlparse.c"
    if (role == 6) {
      __CrestBranch(70405, 45380, 1);
# 3888 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(70406, 45381, 0);

    }
    }
    {
    __CrestLoad(70409, (unsigned long )(& role), (long long )role);
    __CrestLoad(70408, (unsigned long )0, (long long )14);
    __CrestApply2(70407, 12, (long long )(role == 14));
# 3915 "xmlparse.c"
    if (role == 14) {
      __CrestBranch(70410, 45383, 1);
# 3915 "xmlparse.c"
      goto case_14;
    } else {
      __CrestBranch(70411, 45384, 0);

    }
    }
    {
    __CrestLoad(70414, (unsigned long )(& role), (long long )role);
    __CrestLoad(70413, (unsigned long )0, (long long )8);
    __CrestApply2(70412, 12, (long long )(role == 8));
# 3933 "xmlparse.c"
    if (role == 8) {
      __CrestBranch(70415, 45386, 1);
# 3933 "xmlparse.c"
      goto case_8;
    } else {
      __CrestBranch(70416, 45387, 0);

    }
    }
    {
    __CrestLoad(70419, (unsigned long )(& role), (long long )role);
    __CrestLoad(70418, (unsigned long )0, (long long )2);
    __CrestApply2(70417, 12, (long long )(role == 2));
# 3985 "xmlparse.c"
    if (role == 2) {
      __CrestBranch(70420, 45389, 1);
# 3985 "xmlparse.c"
      goto case_2;
    } else {
      __CrestBranch(70421, 45390, 0);

    }
    }
    {
    __CrestLoad(70424, (unsigned long )(& role), (long long )role);
    __CrestLoad(70423, (unsigned long )0, (long long )34);
    __CrestApply2(70422, 12, (long long )(role == 34));
# 4024 "xmlparse.c"
    if (role == 34) {
      __CrestBranch(70425, 45392, 1);
# 4024 "xmlparse.c"
      goto case_34;
    } else {
      __CrestBranch(70426, 45393, 0);

    }
    }
    {
    __CrestLoad(70429, (unsigned long )(& role), (long long )role);
    __CrestLoad(70428, (unsigned long )0, (long long )22);
    __CrestApply2(70427, 12, (long long )(role == 22));
# 4029 "xmlparse.c"
    if (role == 22) {
      __CrestBranch(70430, 45395, 1);
# 4029 "xmlparse.c"
      goto case_22;
    } else {
      __CrestBranch(70431, 45396, 0);

    }
    }
    {
    __CrestLoad(70434, (unsigned long )(& role), (long long )role);
    __CrestLoad(70433, (unsigned long )0, (long long )23);
    __CrestApply2(70432, 12, (long long )(role == 23));
# 4037 "xmlparse.c"
    if (role == 23) {
      __CrestBranch(70435, 45398, 1);
# 4037 "xmlparse.c"
      goto case_23;
    } else {
      __CrestBranch(70436, 45399, 0);

    }
    }
    {
    __CrestLoad(70439, (unsigned long )(& role), (long long )role);
    __CrestLoad(70438, (unsigned long )0, (long long )24);
    __CrestApply2(70437, 12, (long long )(role == 24));
# 4041 "xmlparse.c"
    if (role == 24) {
      __CrestBranch(70440, 45401, 1);
# 4041 "xmlparse.c"
      goto case_24;
    } else {
      __CrestBranch(70441, 45402, 0);

    }
    }
    {
    __CrestLoad(70444, (unsigned long )(& role), (long long )role);
    __CrestLoad(70443, (unsigned long )0, (long long )25);
    __CrestApply2(70442, 12, (long long )(role == 25));
# 4045 "xmlparse.c"
    if (role == 25) {
      __CrestBranch(70445, 45404, 1);
# 4045 "xmlparse.c"
      goto case_25;
    } else {
      __CrestBranch(70446, 45405, 0);

    }
    }
    {
    __CrestLoad(70449, (unsigned long )(& role), (long long )role);
    __CrestLoad(70448, (unsigned long )0, (long long )26);
    __CrestApply2(70447, 12, (long long )(role == 26));
# 4048 "xmlparse.c"
    if (role == 26) {
      __CrestBranch(70450, 45407, 1);
# 4048 "xmlparse.c"
      goto case_26;
    } else {
      __CrestBranch(70451, 45408, 0);

    }
    }
    {
    __CrestLoad(70454, (unsigned long )(& role), (long long )role);
    __CrestLoad(70453, (unsigned long )0, (long long )27);
    __CrestApply2(70452, 12, (long long )(role == 27));
# 4051 "xmlparse.c"
    if (role == 27) {
      __CrestBranch(70455, 45410, 1);
# 4051 "xmlparse.c"
      goto case_27;
    } else {
      __CrestBranch(70456, 45411, 0);

    }
    }
    {
    __CrestLoad(70459, (unsigned long )(& role), (long long )role);
    __CrestLoad(70458, (unsigned long )0, (long long )28);
    __CrestApply2(70457, 12, (long long )(role == 28));
# 4054 "xmlparse.c"
    if (role == 28) {
      __CrestBranch(70460, 45413, 1);
# 4054 "xmlparse.c"
      goto case_28;
    } else {
      __CrestBranch(70461, 45414, 0);

    }
    }
    {
    __CrestLoad(70464, (unsigned long )(& role), (long long )role);
    __CrestLoad(70463, (unsigned long )0, (long long )29);
    __CrestApply2(70462, 12, (long long )(role == 29));
# 4057 "xmlparse.c"
    if (role == 29) {
      __CrestBranch(70465, 45416, 1);
# 4057 "xmlparse.c"
      goto case_29;
    } else {
      __CrestBranch(70466, 45417, 0);

    }
    }
    {
    __CrestLoad(70469, (unsigned long )(& role), (long long )role);
    __CrestLoad(70468, (unsigned long )0, (long long )30);
    __CrestApply2(70467, 12, (long long )(role == 30));
# 4060 "xmlparse.c"
    if (role == 30) {
      __CrestBranch(70470, 45419, 1);
# 4060 "xmlparse.c"
      goto case_30;
    } else {
      __CrestBranch(70471, 45420, 0);

    }
    }
    {
    __CrestLoad(70474, (unsigned long )(& role), (long long )role);
    __CrestLoad(70473, (unsigned long )0, (long long )32);
    __CrestApply2(70472, 12, (long long )(role == 32));
# 4067 "xmlparse.c"
    if (role == 32) {
      __CrestBranch(70475, 45422, 1);
# 4067 "xmlparse.c"
      goto case_32;
    } else {
      __CrestBranch(70476, 45423, 0);

    }
    }
    {
    __CrestLoad(70479, (unsigned long )(& role), (long long )role);
    __CrestLoad(70478, (unsigned long )0, (long long )31);
    __CrestApply2(70477, 12, (long long )(role == 31));
# 4067 "xmlparse.c"
    if (role == 31) {
      __CrestBranch(70480, 45425, 1);
# 4067 "xmlparse.c"
      goto case_32;
    } else {
      __CrestBranch(70481, 45426, 0);

    }
    }
    {
    __CrestLoad(70484, (unsigned long )(& role), (long long )role);
    __CrestLoad(70483, (unsigned long )0, (long long )36);
    __CrestApply2(70482, 12, (long long )(role == 36));
# 4087 "xmlparse.c"
    if (role == 36) {
      __CrestBranch(70485, 45428, 1);
# 4087 "xmlparse.c"
      goto case_36;
    } else {
      __CrestBranch(70486, 45429, 0);

    }
    }
    {
    __CrestLoad(70489, (unsigned long )(& role), (long long )role);
    __CrestLoad(70488, (unsigned long )0, (long long )35);
    __CrestApply2(70487, 12, (long long )(role == 35));
# 4087 "xmlparse.c"
    if (role == 35) {
      __CrestBranch(70490, 45431, 1);
# 4087 "xmlparse.c"
      goto case_36;
    } else {
      __CrestBranch(70491, 45432, 0);

    }
    }
    {
    __CrestLoad(70494, (unsigned long )(& role), (long long )role);
    __CrestLoad(70493, (unsigned long )0, (long long )38);
    __CrestApply2(70492, 12, (long long )(role == 38));
# 4114 "xmlparse.c"
    if (role == 38) {
      __CrestBranch(70495, 45434, 1);
# 4114 "xmlparse.c"
      goto case_38;
    } else {
      __CrestBranch(70496, 45435, 0);

    }
    }
    {
    __CrestLoad(70499, (unsigned long )(& role), (long long )role);
    __CrestLoad(70498, (unsigned long )0, (long long )37);
    __CrestApply2(70497, 12, (long long )(role == 37));
# 4114 "xmlparse.c"
    if (role == 37) {
      __CrestBranch(70500, 45437, 1);
# 4114 "xmlparse.c"
      goto case_38;
    } else {
      __CrestBranch(70501, 45438, 0);

    }
    }
    {
    __CrestLoad(70504, (unsigned long )(& role), (long long )role);
    __CrestLoad(70503, (unsigned long )0, (long long )12);
    __CrestApply2(70502, 12, (long long )(role == 12));
# 4151 "xmlparse.c"
    if (role == 12) {
      __CrestBranch(70505, 45440, 1);
# 4151 "xmlparse.c"
      goto case_12;
    } else {
      __CrestBranch(70506, 45441, 0);

    }
    }
    {
    __CrestLoad(70509, (unsigned long )(& role), (long long )role);
    __CrestLoad(70508, (unsigned long )0, (long long )5);
    __CrestApply2(70507, 12, (long long )(role == 5));
# 4177 "xmlparse.c"
    if (role == 5) {
      __CrestBranch(70510, 45443, 1);
# 4177 "xmlparse.c"
      goto case_5;
    } else {
      __CrestBranch(70511, 45444, 0);

    }
    }
    {
    __CrestLoad(70514, (unsigned long )(& role), (long long )role);
    __CrestLoad(70513, (unsigned long )0, (long long )13);
    __CrestApply2(70512, 12, (long long )(role == 13));
# 4218 "xmlparse.c"
    if (role == 13) {
      __CrestBranch(70515, 45446, 1);
# 4218 "xmlparse.c"
      goto case_13;
    } else {
      __CrestBranch(70516, 45447, 0);

    }
    }
    {
    __CrestLoad(70519, (unsigned long )(& role), (long long )role);
    __CrestLoad(70518, (unsigned long )0, (long long )15);
    __CrestApply2(70517, 12, (long long )(role == 15));
# 4231 "xmlparse.c"
    if (role == 15) {
      __CrestBranch(70520, 45449, 1);
# 4231 "xmlparse.c"
      goto case_15;
    } else {
      __CrestBranch(70521, 45450, 0);

    }
    }
    {
    __CrestLoad(70524, (unsigned long )(& role), (long long )role);
    __CrestLoad(70523, (unsigned long )0, (long long )16);
    __CrestApply2(70522, 12, (long long )(role == 16));
# 4245 "xmlparse.c"
    if (role == 16) {
      __CrestBranch(70525, 45452, 1);
# 4245 "xmlparse.c"
      goto case_16;
    } else {
      __CrestBranch(70526, 45453, 0);

    }
    }
    {
    __CrestLoad(70529, (unsigned long )(& role), (long long )role);
    __CrestLoad(70528, (unsigned long )0, (long long )9);
    __CrestApply2(70527, 12, (long long )(role == 9));
# 4274 "xmlparse.c"
    if (role == 9) {
      __CrestBranch(70530, 45455, 1);
# 4274 "xmlparse.c"
      goto case_9;
    } else {
      __CrestBranch(70531, 45456, 0);

    }
    }
    {
    __CrestLoad(70534, (unsigned long )(& role), (long long )role);
    __CrestLoad(70533, (unsigned long )0, (long long )10);
    __CrestApply2(70532, 12, (long long )(role == 10));
# 4310 "xmlparse.c"
    if (role == 10) {
      __CrestBranch(70535, 45458, 1);
# 4310 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(70536, 45459, 0);

    }
    }
    {
    __CrestLoad(70539, (unsigned long )(& role), (long long )role);
    __CrestLoad(70538, (unsigned long )0, (long long )18);
    __CrestApply2(70537, 12, (long long )(role == 18));
# 4344 "xmlparse.c"
    if (role == 18) {
      __CrestBranch(70540, 45461, 1);
# 4344 "xmlparse.c"
      goto case_18;
    } else {
      __CrestBranch(70541, 45462, 0);

    }
    }
    {
    __CrestLoad(70544, (unsigned long )(& role), (long long )role);
    __CrestLoad(70543, (unsigned long )0, (long long )21);
    __CrestApply2(70542, 12, (long long )(role == 21));
# 4355 "xmlparse.c"
    if (role == 21) {
      __CrestBranch(70545, 45464, 1);
# 4355 "xmlparse.c"
      goto case_21;
    } else {
      __CrestBranch(70546, 45465, 0);

    }
    }
    {
    __CrestLoad(70549, (unsigned long )(& role), (long long )role);
    __CrestLoad(70548, (unsigned long )0, (long long )19);
    __CrestApply2(70547, 12, (long long )(role == 19));
# 4371 "xmlparse.c"
    if (role == 19) {
      __CrestBranch(70550, 45467, 1);
# 4371 "xmlparse.c"
      goto case_19;
    } else {
      __CrestBranch(70551, 45468, 0);

    }
    }
    {
    __CrestLoad(70554, (unsigned long )(& role), (long long )role);
    __CrestLoad(70553, (unsigned long )0, (long long )20);
    __CrestApply2(70552, 12, (long long )(role == 20));
# 4389 "xmlparse.c"
    if (role == 20) {
      __CrestBranch(70555, 45470, 1);
# 4389 "xmlparse.c"
      goto case_20;
    } else {
      __CrestBranch(70556, 45471, 0);

    }
    }
    {
    __CrestLoad(70559, (unsigned long )(& role), (long long )role);
    __CrestLoad(70558, (unsigned long )0, (long long )-1);
    __CrestApply2(70557, 12, (long long )(role == -1));
# 4401 "xmlparse.c"
    if (role == -1) {
      __CrestBranch(70560, 45473, 1);
# 4401 "xmlparse.c"
      goto case_neg_1___0;
    } else {
      __CrestBranch(70561, 45474, 0);

    }
    }
    {
    __CrestLoad(70564, (unsigned long )(& role), (long long )role);
    __CrestLoad(70563, (unsigned long )0, (long long )58);
    __CrestApply2(70562, 12, (long long )(role == 58));
# 4413 "xmlparse.c"
    if (role == 58) {
      __CrestBranch(70565, 45476, 1);
# 4413 "xmlparse.c"
      goto case_58;
    } else {
      __CrestBranch(70566, 45477, 0);

    }
    }
    {
    __CrestLoad(70569, (unsigned long )(& role), (long long )role);
    __CrestLoad(70568, (unsigned long )0, (long long )44);
    __CrestApply2(70567, 12, (long long )(role == 44));
# 4429 "xmlparse.c"
    if (role == 44) {
      __CrestBranch(70570, 45479, 1);
# 4429 "xmlparse.c"
      goto case_44;
    } else {
      __CrestBranch(70571, 45480, 0);

    }
    }
    {
    __CrestLoad(70574, (unsigned long )(& role), (long long )role);
    __CrestLoad(70573, (unsigned long )0, (long long )50);
    __CrestApply2(70572, 12, (long long )(role == 50));
# 4462 "xmlparse.c"
    if (role == 50) {
      __CrestBranch(70575, 45482, 1);
# 4462 "xmlparse.c"
      goto case_50;
    } else {
      __CrestBranch(70576, 45483, 0);

    }
    }
    {
    __CrestLoad(70579, (unsigned long )(& role), (long long )role);
    __CrestLoad(70578, (unsigned long )0, (long long )49);
    __CrestApply2(70577, 12, (long long )(role == 49));
# 4469 "xmlparse.c"
    if (role == 49) {
      __CrestBranch(70580, 45485, 1);
# 4469 "xmlparse.c"
      goto case_49;
    } else {
      __CrestBranch(70581, 45486, 0);

    }
    }
    {
    __CrestLoad(70584, (unsigned long )(& role), (long long )role);
    __CrestLoad(70583, (unsigned long )0, (long long )59);
    __CrestApply2(70582, 12, (long long )(role == 59));
# 4486 "xmlparse.c"
    if (role == 59) {
      __CrestBranch(70585, 45488, 1);
# 4486 "xmlparse.c"
      goto case_59;
    } else {
      __CrestBranch(70586, 45489, 0);

    }
    }
    {
    __CrestLoad(70589, (unsigned long )(& role), (long long )role);
    __CrestLoad(70588, (unsigned long )0, (long long )60);
    __CrestApply2(70587, 12, (long long )(role == 60));
# 4486 "xmlparse.c"
    if (role == 60) {
      __CrestBranch(70590, 45491, 1);
# 4486 "xmlparse.c"
      goto case_59;
    } else {
      __CrestBranch(70591, 45492, 0);

    }
    }
    {
    __CrestLoad(70594, (unsigned long )(& role), (long long )role);
    __CrestLoad(70593, (unsigned long )0, (long long )40);
    __CrestApply2(70592, 12, (long long )(role == 40));
# 4566 "xmlparse.c"
    if (role == 40) {
      __CrestBranch(70595, 45494, 1);
# 4566 "xmlparse.c"
      goto case_40;
    } else {
      __CrestBranch(70596, 45495, 0);

    }
    }
    {
    __CrestLoad(70599, (unsigned long )(& role), (long long )role);
    __CrestLoad(70598, (unsigned long )0, (long long )42);
    __CrestApply2(70597, 12, (long long )(role == 42));
# 4579 "xmlparse.c"
    if (role == 42) {
      __CrestBranch(70600, 45497, 1);
# 4579 "xmlparse.c"
      goto case_42;
    } else {
      __CrestBranch(70601, 45498, 0);

    }
    }
    {
    __CrestLoad(70604, (unsigned long )(& role), (long long )role);
    __CrestLoad(70603, (unsigned long )0, (long long )41);
    __CrestApply2(70602, 12, (long long )(role == 41));
# 4579 "xmlparse.c"
    if (role == 41) {
      __CrestBranch(70605, 45500, 1);
# 4579 "xmlparse.c"
      goto case_42;
    } else {
      __CrestBranch(70606, 45501, 0);

    }
    }
    {
    __CrestLoad(70609, (unsigned long )(& role), (long long )role);
    __CrestLoad(70608, (unsigned long )0, (long long )43);
    __CrestApply2(70607, 12, (long long )(role == 43));
# 4600 "xmlparse.c"
    if (role == 43) {
      __CrestBranch(70610, 45503, 1);
# 4600 "xmlparse.c"
      goto case_43;
    } else {
      __CrestBranch(70611, 45504, 0);

    }
    }
    {
    __CrestLoad(70614, (unsigned long )(& role), (long long )role);
    __CrestLoad(70613, (unsigned long )0, (long long )51);
    __CrestApply2(70612, 12, (long long )(role == 51));
# 4609 "xmlparse.c"
    if (role == 51) {
      __CrestBranch(70615, 45506, 1);
# 4609 "xmlparse.c"
      goto case_51;
    } else {
      __CrestBranch(70616, 45507, 0);

    }
    }
    {
    __CrestLoad(70619, (unsigned long )(& role), (long long )role);
    __CrestLoad(70618, (unsigned long )0, (long long )53);
    __CrestApply2(70617, 12, (long long )(role == 53));
# 4612 "xmlparse.c"
    if (role == 53) {
      __CrestBranch(70620, 45509, 1);
# 4612 "xmlparse.c"
      goto case_53;
    } else {
      __CrestBranch(70621, 45510, 0);

    }
    }
    {
    __CrestLoad(70624, (unsigned long )(& role), (long long )role);
    __CrestLoad(70623, (unsigned long )0, (long long )52);
    __CrestApply2(70622, 12, (long long )(role == 52));
# 4615 "xmlparse.c"
    if (role == 52) {
      __CrestBranch(70625, 45512, 1);
# 4615 "xmlparse.c"
      goto case_52;
    } else {
      __CrestBranch(70626, 45513, 0);

    }
    }
    {
    __CrestLoad(70629, (unsigned long )(& role), (long long )role);
    __CrestLoad(70628, (unsigned long )0, (long long )54);
    __CrestApply2(70627, 12, (long long )(role == 54));
# 4618 "xmlparse.c"
    if (role == 54) {
      __CrestBranch(70630, 45515, 1);
# 4618 "xmlparse.c"
      goto case_54;
    } else {
      __CrestBranch(70631, 45516, 0);

    }
    }
    {
    __CrestLoad(70634, (unsigned long )(& role), (long long )role);
    __CrestLoad(70633, (unsigned long )0, (long long )45);
    __CrestApply2(70632, 12, (long long )(role == 45));
# 4646 "xmlparse.c"
    if (role == 45) {
      __CrestBranch(70635, 45518, 1);
# 4646 "xmlparse.c"
      goto case_45;
    } else {
      __CrestBranch(70636, 45519, 0);

    }
    }
    {
    __CrestLoad(70639, (unsigned long )(& role), (long long )role);
    __CrestLoad(70638, (unsigned long )0, (long long )47);
    __CrestApply2(70637, 12, (long long )(role == 47));
# 4649 "xmlparse.c"
    if (role == 47) {
      __CrestBranch(70640, 45521, 1);
# 4649 "xmlparse.c"
      goto case_47;
    } else {
      __CrestBranch(70641, 45522, 0);

    }
    }
    {
    __CrestLoad(70644, (unsigned long )(& role), (long long )role);
    __CrestLoad(70643, (unsigned long )0, (long long )46);
    __CrestApply2(70642, 12, (long long )(role == 46));
# 4652 "xmlparse.c"
    if (role == 46) {
      __CrestBranch(70645, 45524, 1);
# 4652 "xmlparse.c"
      goto case_46;
    } else {
      __CrestBranch(70646, 45525, 0);

    }
    }
    {
    __CrestLoad(70649, (unsigned long )(& role), (long long )role);
    __CrestLoad(70648, (unsigned long )0, (long long )48);
    __CrestApply2(70647, 12, (long long )(role == 48));
# 4655 "xmlparse.c"
    if (role == 48) {
      __CrestBranch(70650, 45527, 1);
# 4655 "xmlparse.c"
      goto case_48;
    } else {
      __CrestBranch(70651, 45528, 0);

    }
    }
    {
    __CrestLoad(70654, (unsigned long )(& role), (long long )role);
    __CrestLoad(70653, (unsigned long )0, (long long )55);
    __CrestApply2(70652, 12, (long long )(role == 55));
# 4678 "xmlparse.c"
    if (role == 55) {
      __CrestBranch(70655, 45530, 1);
# 4678 "xmlparse.c"
      goto case_55;
    } else {
      __CrestBranch(70656, 45531, 0);

    }
    }
    {
    __CrestLoad(70659, (unsigned long )(& role), (long long )role);
    __CrestLoad(70658, (unsigned long )0, (long long )56);
    __CrestApply2(70657, 12, (long long )(role == 56));
# 4683 "xmlparse.c"
    if (role == 56) {
      __CrestBranch(70660, 45533, 1);
# 4683 "xmlparse.c"
      goto case_56;
    } else {
      __CrestBranch(70661, 45534, 0);

    }
    }
    {
    __CrestLoad(70664, (unsigned long )(& role), (long long )role);
    __CrestLoad(70663, (unsigned long )0, (long long )0);
    __CrestApply2(70662, 12, (long long )(role == 0));
# 4688 "xmlparse.c"
    if (role == 0) {
      __CrestBranch(70665, 45536, 1);
# 4688 "xmlparse.c"
      goto case_0___0;
    } else {
      __CrestBranch(70666, 45537, 0);

    }
    }
    {
    __CrestLoad(70669, (unsigned long )(& role), (long long )role);
    __CrestLoad(70668, (unsigned long )0, (long long )3);
    __CrestApply2(70667, 12, (long long )(role == 3));
# 4695 "xmlparse.c"
    if (role == 3) {
      __CrestBranch(70670, 45539, 1);
# 4695 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(70671, 45540, 0);

    }
    }
    {
    __CrestLoad(70674, (unsigned long )(& role), (long long )role);
    __CrestLoad(70673, (unsigned long )0, (long long )11);
    __CrestApply2(70672, 12, (long long )(role == 11));
# 4699 "xmlparse.c"
    if (role == 11) {
      __CrestBranch(70675, 45542, 1);
# 4699 "xmlparse.c"
      goto case_11;
    } else {
      __CrestBranch(70676, 45543, 0);

    }
    }
    {
    __CrestLoad(70679, (unsigned long )(& role), (long long )role);
    __CrestLoad(70678, (unsigned long )0, (long long )17);
    __CrestApply2(70677, 12, (long long )(role == 17));
# 4703 "xmlparse.c"
    if (role == 17) {
      __CrestBranch(70680, 45545, 1);
# 4703 "xmlparse.c"
      goto case_17;
    } else {
      __CrestBranch(70681, 45546, 0);

    }
    }
    {
    __CrestLoad(70684, (unsigned long )(& role), (long long )role);
    __CrestLoad(70683, (unsigned long )0, (long long )33);
    __CrestApply2(70682, 12, (long long )(role == 33));
# 4707 "xmlparse.c"
    if (role == 33) {
      __CrestBranch(70685, 45548, 1);
# 4707 "xmlparse.c"
      goto case_33;
    } else {
      __CrestBranch(70686, 45549, 0);

    }
    }
    {
    __CrestLoad(70689, (unsigned long )(& role), (long long )role);
    __CrestLoad(70688, (unsigned long )0, (long long )39);
    __CrestApply2(70687, 12, (long long )(role == 39));
# 4711 "xmlparse.c"
    if (role == 39) {
      __CrestBranch(70690, 45551, 1);
# 4711 "xmlparse.c"
      goto case_39;
    } else {
      __CrestBranch(70691, 45552, 0);

    }
    }
# 3847 "xmlparse.c"
    goto switch_break___0;
    case_1:
    __CrestLoad(70692, (unsigned long )0, (long long )0);
# 3850 "xmlparse.c"
    tmp___0 = processXmlDecl(parser, 0, s, next);
    __CrestHandleReturn(70694, (long long )tmp___0);
    __CrestStore(70693, (unsigned long )(& tmp___0));
    __CrestLoad(70695, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(70696, (unsigned long )(& result));
# 3850 "xmlparse.c"
    result = tmp___0;
    {
    __CrestLoad(70699, (unsigned long )(& result), (long long )result);
    __CrestLoad(70698, (unsigned long )0, (long long )0U);
    __CrestApply2(70697, 13, (long long )((unsigned int )result != 0U));
# 3851 "xmlparse.c"
    if ((unsigned int )result != 0U) {
      __CrestBranch(70700, 45556, 1);
      __CrestLoad(70702, (unsigned long )(& result), (long long )result);
      __CrestStore(70703, (unsigned long )(& __retres221));
# 3852 "xmlparse.c"
      __retres221 = result;
# 3852 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70701, 45558, 0);

    }
    }
# 3853 "xmlparse.c"
    enc = parser->m_encoding;
    __CrestLoad(70704, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(70705, (unsigned long )(& handleDefault));
# 3854 "xmlparse.c"
    handleDefault = (XML_Bool )0;
# 3856 "xmlparse.c"
    goto switch_break___0;
    case_4:
    {
    __CrestLoad(70708, (unsigned long )(& parser->m_startDoctypeDeclHandler), (long long )((unsigned long )parser->m_startDoctypeDeclHandler));
    __CrestLoad(70707, (unsigned long )0, (long long )0);
    __CrestApply2(70706, 13, (long long )(parser->m_startDoctypeDeclHandler != 0));
# 3858 "xmlparse.c"
    if (parser->m_startDoctypeDeclHandler != 0) {
      __CrestBranch(70709, 45562, 1);
# 3859 "xmlparse.c"
      tmp___1 = poolStoreString(& parser->m_tempPool, enc, s, next);
      __CrestClearStack(70711);
# 3859 "xmlparse.c"
      parser->m_doctypeName = (XML_Char const *)tmp___1;
      {
      __CrestLoad(70714, (unsigned long )(& parser->m_doctypeName), (long long )((unsigned long )parser->m_doctypeName));
      __CrestLoad(70713, (unsigned long )0, (long long )0);
      __CrestApply2(70712, 12, (long long )(parser->m_doctypeName == 0));
# 3860 "xmlparse.c"
      if (parser->m_doctypeName == 0) {
        __CrestBranch(70715, 45564, 1);
        __CrestLoad(70717, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(70718, (unsigned long )(& __retres221));
# 3861 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 3861 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(70716, 45566, 0);

      }
      }
# 3862 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
# 3863 "xmlparse.c"
      parser->m_doctypePubid = (XML_Char const *)((void *)0);
      __CrestLoad(70719, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(70720, (unsigned long )(& handleDefault));
# 3864 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(70710, 45568, 0);

    }
    }
# 3866 "xmlparse.c"
    parser->m_doctypeSysid = (XML_Char const *)((void *)0);
# 3867 "xmlparse.c"
    goto switch_break___0;
    case_7:
    {
    __CrestLoad(70723, (unsigned long )(& parser->m_startDoctypeDeclHandler), (long long )((unsigned long )parser->m_startDoctypeDeclHandler));
    __CrestLoad(70722, (unsigned long )0, (long long )0);
    __CrestApply2(70721, 13, (long long )(parser->m_startDoctypeDeclHandler != 0));
# 3869 "xmlparse.c"
    if (parser->m_startDoctypeDeclHandler != 0) {
      __CrestBranch(70724, 45572, 1);
# 3870 "xmlparse.c"
      mem_123 = parser->m_startDoctypeDeclHandler;
      __CrestLoad(70726, (unsigned long )0, (long long )1);
# 3870 "xmlparse.c"
      (*mem_123)(parser->m_handlerArg, parser->m_doctypeName, parser->m_doctypeSysid,
                 parser->m_doctypePubid, 1);
      __CrestClearStack(70727);
# 3872 "xmlparse.c"
      parser->m_doctypeName = (XML_Char const *)((void *)0);
# 3873 "xmlparse.c"
      poolClear(& parser->m_tempPool);
      __CrestClearStack(70728);
      __CrestLoad(70729, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(70730, (unsigned long )(& handleDefault));
# 3874 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(70725, 45573, 0);

    }
    }
# 3876 "xmlparse.c"
    goto switch_break___0;
    case_57:
    __CrestLoad(70731, (unsigned long )0, (long long )1);
# 3880 "xmlparse.c"
    tmp___2 = processXmlDecl(parser, 1, s, next);
    __CrestHandleReturn(70733, (long long )tmp___2);
    __CrestStore(70732, (unsigned long )(& tmp___2));
    __CrestLoad(70734, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestStore(70735, (unsigned long )(& result___0));
# 3880 "xmlparse.c"
    result___0 = tmp___2;
    {
    __CrestLoad(70738, (unsigned long )(& result___0), (long long )result___0);
    __CrestLoad(70737, (unsigned long )0, (long long )0U);
    __CrestApply2(70736, 13, (long long )((unsigned int )result___0 != 0U));
# 3881 "xmlparse.c"
    if ((unsigned int )result___0 != 0U) {
      __CrestBranch(70739, 45577, 1);
      __CrestLoad(70741, (unsigned long )(& result___0), (long long )result___0);
      __CrestStore(70742, (unsigned long )(& __retres221));
# 3882 "xmlparse.c"
      __retres221 = result___0;
# 3882 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70740, 45579, 0);

    }
    }
# 3883 "xmlparse.c"
    enc = parser->m_encoding;
    __CrestLoad(70743, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(70744, (unsigned long )(& handleDefault));
# 3884 "xmlparse.c"
    handleDefault = (XML_Bool )0;
# 3886 "xmlparse.c"
    goto switch_break___0;
    case_6:
    __CrestLoad(70745, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(70746, (unsigned long )(& parser->m_useForeignDTD));
# 3890 "xmlparse.c"
    parser->m_useForeignDTD = (XML_Bool )0;
    __CrestLoad(70747, (unsigned long )0, (long long )sizeof(ENTITY ));
# 3891 "xmlparse.c"
    tmp___3 = lookup(parser, & dtd->paramEntities, externalSubsetName, sizeof(ENTITY ));
    __CrestClearStack(70748);
# 3891 "xmlparse.c"
    parser->m_declEntity = (ENTITY *)tmp___3;
    {
    __CrestLoad(70751, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
    __CrestLoad(70750, (unsigned long )0, (long long )0);
    __CrestApply2(70749, 12, (long long )(parser->m_declEntity == 0));
# 3895 "xmlparse.c"
    if (parser->m_declEntity == 0) {
      __CrestBranch(70752, 45584, 1);
      __CrestLoad(70754, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(70755, (unsigned long )(& __retres221));
# 3896 "xmlparse.c"
      __retres221 = (enum XML_Error )1;
# 3896 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70753, 45586, 0);

    }
    }
    __CrestLoad(70756, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(70757, (unsigned long )(& dtd->hasParamEntityRefs));
# 3898 "xmlparse.c"
    dtd->hasParamEntityRefs = (XML_Bool )1;
    {
    __CrestLoad(70760, (unsigned long )(& parser->m_startDoctypeDeclHandler), (long long )((unsigned long )parser->m_startDoctypeDeclHandler));
    __CrestLoad(70759, (unsigned long )0, (long long )0);
    __CrestApply2(70758, 13, (long long )(parser->m_startDoctypeDeclHandler != 0));
# 3899 "xmlparse.c"
    if (parser->m_startDoctypeDeclHandler != 0) {
      __CrestBranch(70761, 45589, 1);
# 3901 "xmlparse.c"
      mem_124 = enc->isPublicId;
# 3901 "xmlparse.c"
      tmp___4 = (*mem_124)(enc, s, next, eventPP);
      __CrestHandleReturn(70764, (long long )tmp___4);
      __CrestStore(70763, (unsigned long )(& tmp___4));
      {
      __CrestLoad(70767, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(70766, (unsigned long )0, (long long )0);
      __CrestApply2(70765, 13, (long long )(tmp___4 != 0));
# 3901 "xmlparse.c"
      if (tmp___4 != 0) {
        __CrestBranch(70768, 45591, 1);

      } else {
        __CrestBranch(70769, 45592, 0);
        __CrestLoad(70770, (unsigned long )0, (long long )((enum XML_Error )32));
        __CrestStore(70771, (unsigned long )(& __retres221));
# 3902 "xmlparse.c"
        __retres221 = (enum XML_Error )32;
# 3902 "xmlparse.c"
        goto return_label;
      }
      }
# 3903 "xmlparse.c"
      pubId = poolStoreString(& parser->m_tempPool, enc, s + enc->minBytesPerChar,
                              next - enc->minBytesPerChar);
      __CrestClearStack(70772);
      {
      __CrestLoad(70775, (unsigned long )(& pubId), (long long )((unsigned long )pubId));
      __CrestLoad(70774, (unsigned long )0, (long long )0);
      __CrestApply2(70773, 12, (long long )(pubId == 0));
# 3906 "xmlparse.c"
      if (pubId == 0) {
        __CrestBranch(70776, 45596, 1);
        __CrestLoad(70778, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(70779, (unsigned long )(& __retres221));
# 3907 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 3907 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(70777, 45598, 0);

      }
      }
# 3908 "xmlparse.c"
      normalizePublicId(pubId);
      __CrestClearStack(70780);
# 3909 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
# 3910 "xmlparse.c"
      parser->m_doctypePubid = (XML_Char const *)pubId;
      __CrestLoad(70781, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(70782, (unsigned long )(& handleDefault));
# 3911 "xmlparse.c"
      handleDefault = (XML_Bool )0;
# 3912 "xmlparse.c"
      goto alreadyChecked;
    } else {
      __CrestBranch(70762, 45601, 0);

    }
    }
    case_14:
# 3916 "xmlparse.c"
    mem_125 = enc->isPublicId;
# 3916 "xmlparse.c"
    tmp___5 = (*mem_125)(enc, s, next, eventPP);
    __CrestHandleReturn(70784, (long long )tmp___5);
    __CrestStore(70783, (unsigned long )(& tmp___5));
    {
    __CrestLoad(70787, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(70786, (unsigned long )0, (long long )0);
    __CrestApply2(70785, 13, (long long )(tmp___5 != 0));
# 3916 "xmlparse.c"
    if (tmp___5 != 0) {
      __CrestBranch(70788, 45604, 1);

    } else {
      __CrestBranch(70789, 45605, 0);
      __CrestLoad(70790, (unsigned long )0, (long long )((enum XML_Error )32));
      __CrestStore(70791, (unsigned long )(& __retres221));
# 3917 "xmlparse.c"
      __retres221 = (enum XML_Error )32;
# 3917 "xmlparse.c"
      goto return_label;
    }
    }
    alreadyChecked:
    {
    __CrestLoad(70794, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(70793, (unsigned long )0, (long long )0);
    __CrestApply2(70792, 13, (long long )(dtd->keepProcessing != 0));
# 3919 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(70795, 45608, 1);
      {
      __CrestLoad(70799, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(70798, (unsigned long )0, (long long )0);
      __CrestApply2(70797, 13, (long long )(parser->m_declEntity != 0));
# 3919 "xmlparse.c"
      if (parser->m_declEntity != 0) {
        __CrestBranch(70800, 45609, 1);
# 3920 "xmlparse.c"
        tmp___6 = poolStoreString(& dtd->pool, enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
        __CrestClearStack(70802);
# 3920 "xmlparse.c"
        tem = tmp___6;
        {
        __CrestLoad(70805, (unsigned long )(& tem), (long long )((unsigned long )tem));
        __CrestLoad(70804, (unsigned long )0, (long long )0);
        __CrestApply2(70803, 12, (long long )(tem == 0));
# 3924 "xmlparse.c"
        if (tem == 0) {
          __CrestBranch(70806, 45611, 1);
          __CrestLoad(70808, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(70809, (unsigned long )(& __retres221));
# 3925 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 3925 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(70807, 45613, 0);

        }
        }
# 3926 "xmlparse.c"
        normalizePublicId(tem);
        __CrestClearStack(70810);
# 3927 "xmlparse.c"
        mem_126 = parser->m_declEntity;
# 3927 "xmlparse.c"
        mem_126->publicId = (XML_Char const *)tem;
# 3928 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
        {
        __CrestLoad(70813, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(70812, (unsigned long )0, (long long )0);
        __CrestApply2(70811, 13, (long long )(parser->m_entityDeclHandler != 0));
# 3929 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(70814, 45616, 1);
          __CrestLoad(70816, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(70817, (unsigned long )(& handleDefault));
# 3930 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(70815, 45617, 0);

        }
        }
      } else {
        __CrestBranch(70801, 45618, 0);

      }
      }
    } else {
      __CrestBranch(70796, 45619, 0);

    }
    }
# 3932 "xmlparse.c"
    goto switch_break___0;
    case_8:
    {
    __CrestLoad(70820, (unsigned long )(& parser->m_doctypeName), (long long )((unsigned long )parser->m_doctypeName));
    __CrestLoad(70819, (unsigned long )0, (long long )0);
    __CrestApply2(70818, 13, (long long )(parser->m_doctypeName != 0));
# 3934 "xmlparse.c"
    if (parser->m_doctypeName != 0) {
      __CrestBranch(70821, 45622, 1);
# 3935 "xmlparse.c"
      mem_127 = parser->m_startDoctypeDeclHandler;
      __CrestLoad(70823, (unsigned long )0, (long long )0);
# 3935 "xmlparse.c"
      (*mem_127)(parser->m_handlerArg, parser->m_doctypeName, parser->m_doctypeSysid,
                 parser->m_doctypePubid, 0);
      __CrestClearStack(70824);
# 3937 "xmlparse.c"
      poolClear(& parser->m_tempPool);
      __CrestClearStack(70825);
      __CrestLoad(70826, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(70827, (unsigned long )(& handleDefault));
# 3938 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(70822, 45623, 0);

    }
    }
    {
    __CrestLoad(70830, (unsigned long )(& parser->m_doctypeSysid), (long long )((unsigned long )parser->m_doctypeSysid));
    __CrestLoad(70829, (unsigned long )0, (long long )0);
    __CrestApply2(70828, 13, (long long )(parser->m_doctypeSysid != 0));
# 3945 "xmlparse.c"
    if (parser->m_doctypeSysid != 0) {
      __CrestBranch(70831, 45625, 1);
# 3945 "xmlparse.c"
      goto _L___0;
    } else {
      __CrestBranch(70832, 45626, 0);
      {
      __CrestLoad(70835, (unsigned long )(& parser->m_useForeignDTD), (long long )parser->m_useForeignDTD);
      __CrestLoad(70834, (unsigned long )0, (long long )0);
      __CrestApply2(70833, 13, (long long )(parser->m_useForeignDTD != 0));
# 3945 "xmlparse.c"
      if (parser->m_useForeignDTD != 0) {
        __CrestBranch(70836, 45627, 1);
        _L___0:
        __CrestLoad(70838, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
        __CrestStore(70839, (unsigned long )(& hadParamEntityRefs));
# 3946 "xmlparse.c"
        hadParamEntityRefs = dtd->hasParamEntityRefs;
        __CrestLoad(70840, (unsigned long )0, (long long )((XML_Bool )1));
        __CrestStore(70841, (unsigned long )(& dtd->hasParamEntityRefs));
# 3947 "xmlparse.c"
        dtd->hasParamEntityRefs = (XML_Bool )1;
        {
        __CrestLoad(70844, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
        __CrestLoad(70843, (unsigned long )0, (long long )0);
        __CrestApply2(70842, 13, (long long )(parser->m_paramEntityParsing != 0));
# 3948 "xmlparse.c"
        if (parser->m_paramEntityParsing != 0) {
          __CrestBranch(70845, 45629, 1);
          {
          __CrestLoad(70849, (unsigned long )(& parser->m_externalEntityRefHandler),
                      (long long )((unsigned long )parser->m_externalEntityRefHandler));
          __CrestLoad(70848, (unsigned long )0, (long long )0);
          __CrestApply2(70847, 13, (long long )(parser->m_externalEntityRefHandler != 0));
# 3948 "xmlparse.c"
          if (parser->m_externalEntityRefHandler != 0) {
            __CrestBranch(70850, 45630, 1);
            __CrestLoad(70852, (unsigned long )0, (long long )sizeof(ENTITY ));
# 3949 "xmlparse.c"
            tmp___7 = lookup(parser, & dtd->paramEntities, externalSubsetName, sizeof(ENTITY ));
            __CrestClearStack(70853);
# 3949 "xmlparse.c"
            entity = (ENTITY *)tmp___7;
            {
            __CrestLoad(70856, (unsigned long )(& entity), (long long )((unsigned long )entity));
            __CrestLoad(70855, (unsigned long )0, (long long )0);
            __CrestApply2(70854, 12, (long long )(entity == 0));
# 3953 "xmlparse.c"
            if (entity == 0) {
              __CrestBranch(70857, 45632, 1);
              __CrestLoad(70859, (unsigned long )0, (long long )((enum XML_Error )1));
              __CrestStore(70860, (unsigned long )(& __retres221));
# 3954 "xmlparse.c"
              __retres221 = (enum XML_Error )1;
# 3954 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(70858, 45634, 0);

            }
            }
            {
            __CrestLoad(70863, (unsigned long )(& parser->m_useForeignDTD), (long long )parser->m_useForeignDTD);
            __CrestLoad(70862, (unsigned long )0, (long long )0);
            __CrestApply2(70861, 13, (long long )(parser->m_useForeignDTD != 0));
# 3955 "xmlparse.c"
            if (parser->m_useForeignDTD != 0) {
              __CrestBranch(70864, 45636, 1);
# 3956 "xmlparse.c"
              entity->base = parser->m_curBase;
            } else {
              __CrestBranch(70865, 45637, 0);

            }
            }
            __CrestLoad(70866, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(70867, (unsigned long )(& dtd->paramEntityRead));
# 3957 "xmlparse.c"
            dtd->paramEntityRead = (XML_Bool )0;
# 3958 "xmlparse.c"
            mem_128 = parser->m_externalEntityRefHandler;
# 3958 "xmlparse.c"
            tmp___8 = (*mem_128)(parser->m_externalEntityRefHandlerArg, (XML_Char const *)0,
                                 entity->base, entity->systemId, entity->publicId);
            __CrestHandleReturn(70869, (long long )tmp___8);
            __CrestStore(70868, (unsigned long )(& tmp___8));
            {
            __CrestLoad(70872, (unsigned long )(& tmp___8), (long long )tmp___8);
            __CrestLoad(70871, (unsigned long )0, (long long )0);
            __CrestApply2(70870, 13, (long long )(tmp___8 != 0));
# 3958 "xmlparse.c"
            if (tmp___8 != 0) {
              __CrestBranch(70873, 45640, 1);

            } else {
              __CrestBranch(70874, 45641, 0);
              __CrestLoad(70875, (unsigned long )0, (long long )((enum XML_Error )21));
              __CrestStore(70876, (unsigned long )(& __retres221));
# 3963 "xmlparse.c"
              __retres221 = (enum XML_Error )21;
# 3963 "xmlparse.c"
              goto return_label;
            }
            }
            {
            __CrestLoad(70879, (unsigned long )(& dtd->paramEntityRead), (long long )dtd->paramEntityRead);
            __CrestLoad(70878, (unsigned long )0, (long long )0);
            __CrestApply2(70877, 13, (long long )(dtd->paramEntityRead != 0));
# 3964 "xmlparse.c"
            if (dtd->paramEntityRead != 0) {
              __CrestBranch(70880, 45644, 1);
              {
              __CrestLoad(70884, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
              __CrestLoad(70883, (unsigned long )0, (long long )0);
              __CrestApply2(70882, 12, (long long )(dtd->standalone == 0));
# 3965 "xmlparse.c"
              if (dtd->standalone == 0) {
                __CrestBranch(70885, 45645, 1);
                {
                __CrestLoad(70889, (unsigned long )(& parser->m_notStandaloneHandler),
                            (long long )((unsigned long )parser->m_notStandaloneHandler));
                __CrestLoad(70888, (unsigned long )0, (long long )0);
                __CrestApply2(70887, 13, (long long )(parser->m_notStandaloneHandler != 0));
# 3965 "xmlparse.c"
                if (parser->m_notStandaloneHandler != 0) {
                  __CrestBranch(70890, 45646, 1);
# 3965 "xmlparse.c"
                  mem_129 = parser->m_notStandaloneHandler;
# 3965 "xmlparse.c"
                  tmp___9 = (*mem_129)(parser->m_handlerArg);
                  __CrestHandleReturn(70893, (long long )tmp___9);
                  __CrestStore(70892, (unsigned long )(& tmp___9));
                  {
                  __CrestLoad(70896, (unsigned long )(& tmp___9), (long long )tmp___9);
                  __CrestLoad(70895, (unsigned long )0, (long long )0);
                  __CrestApply2(70894, 13, (long long )(tmp___9 != 0));
# 3965 "xmlparse.c"
                  if (tmp___9 != 0) {
                    __CrestBranch(70897, 45648, 1);

                  } else {
                    __CrestBranch(70898, 45649, 0);
                    __CrestLoad(70899, (unsigned long )0, (long long )((enum XML_Error )22));
                    __CrestStore(70900, (unsigned long )(& __retres221));
# 3968 "xmlparse.c"
                    __retres221 = (enum XML_Error )22;
# 3968 "xmlparse.c"
                    goto return_label;
                  }
                  }
                } else {
                  __CrestBranch(70891, 45651, 0);

                }
                }
              } else {
                __CrestBranch(70886, 45652, 0);

              }
              }
            } else {
              __CrestBranch(70881, 45653, 0);
              {
              __CrestLoad(70903, (unsigned long )(& parser->m_doctypeSysid), (long long )((unsigned long )parser->m_doctypeSysid));
              __CrestLoad(70902, (unsigned long )0, (long long )0);
              __CrestApply2(70901, 12, (long long )(parser->m_doctypeSysid == 0));
# 3973 "xmlparse.c"
              if (parser->m_doctypeSysid == 0) {
                __CrestBranch(70904, 45654, 1);
                __CrestLoad(70906, (unsigned long )(& hadParamEntityRefs), (long long )hadParamEntityRefs);
                __CrestStore(70907, (unsigned long )(& dtd->hasParamEntityRefs));
# 3974 "xmlparse.c"
                dtd->hasParamEntityRefs = hadParamEntityRefs;
              } else {
                __CrestBranch(70905, 45655, 0);

              }
              }
            }
            }
          } else {
            __CrestBranch(70851, 45656, 0);

          }
          }
        } else {
          __CrestBranch(70846, 45657, 0);

        }
        }
        __CrestLoad(70908, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(70909, (unsigned long )(& parser->m_useForeignDTD));
# 3977 "xmlparse.c"
        parser->m_useForeignDTD = (XML_Bool )0;
      } else {
        __CrestBranch(70837, 45659, 0);

      }
      }
    }
    }
    {
    __CrestLoad(70912, (unsigned long )(& parser->m_endDoctypeDeclHandler), (long long )((unsigned long )parser->m_endDoctypeDeclHandler));
    __CrestLoad(70911, (unsigned long )0, (long long )0);
    __CrestApply2(70910, 13, (long long )(parser->m_endDoctypeDeclHandler != 0));
# 3980 "xmlparse.c"
    if (parser->m_endDoctypeDeclHandler != 0) {
      __CrestBranch(70913, 45661, 1);
# 3981 "xmlparse.c"
      mem_130 = parser->m_endDoctypeDeclHandler;
# 3981 "xmlparse.c"
      (*mem_130)(parser->m_handlerArg);
      __CrestClearStack(70915);
      __CrestLoad(70916, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(70917, (unsigned long )(& handleDefault));
# 3982 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(70914, 45662, 0);

    }
    }
# 3984 "xmlparse.c"
    goto switch_break___0;
    case_2:
    {
    __CrestLoad(70920, (unsigned long )(& parser->m_useForeignDTD), (long long )parser->m_useForeignDTD);
    __CrestLoad(70919, (unsigned long )0, (long long )0);
    __CrestApply2(70918, 13, (long long )(parser->m_useForeignDTD != 0));
# 3990 "xmlparse.c"
    if (parser->m_useForeignDTD != 0) {
      __CrestBranch(70921, 45665, 1);
      __CrestLoad(70923, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
      __CrestStore(70924, (unsigned long )(& hadParamEntityRefs___0));
# 3991 "xmlparse.c"
      hadParamEntityRefs___0 = dtd->hasParamEntityRefs;
      __CrestLoad(70925, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(70926, (unsigned long )(& dtd->hasParamEntityRefs));
# 3992 "xmlparse.c"
      dtd->hasParamEntityRefs = (XML_Bool )1;
      {
      __CrestLoad(70929, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
      __CrestLoad(70928, (unsigned long )0, (long long )0);
      __CrestApply2(70927, 13, (long long )(parser->m_paramEntityParsing != 0));
# 3993 "xmlparse.c"
      if (parser->m_paramEntityParsing != 0) {
        __CrestBranch(70930, 45667, 1);
        {
        __CrestLoad(70934, (unsigned long )(& parser->m_externalEntityRefHandler),
                    (long long )((unsigned long )parser->m_externalEntityRefHandler));
        __CrestLoad(70933, (unsigned long )0, (long long )0);
        __CrestApply2(70932, 13, (long long )(parser->m_externalEntityRefHandler != 0));
# 3993 "xmlparse.c"
        if (parser->m_externalEntityRefHandler != 0) {
          __CrestBranch(70935, 45668, 1);
          __CrestLoad(70937, (unsigned long )0, (long long )sizeof(ENTITY ));
# 3994 "xmlparse.c"
          tmp___10 = lookup(parser, & dtd->paramEntities, externalSubsetName, sizeof(ENTITY ));
          __CrestClearStack(70938);
# 3994 "xmlparse.c"
          entity___0 = (ENTITY *)tmp___10;
          {
          __CrestLoad(70941, (unsigned long )(& entity___0), (long long )((unsigned long )entity___0));
          __CrestLoad(70940, (unsigned long )0, (long long )0);
          __CrestApply2(70939, 12, (long long )(entity___0 == 0));
# 3997 "xmlparse.c"
          if (entity___0 == 0) {
            __CrestBranch(70942, 45670, 1);
            __CrestLoad(70944, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(70945, (unsigned long )(& __retres221));
# 3998 "xmlparse.c"
            __retres221 = (enum XML_Error )1;
# 3998 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(70943, 45672, 0);

          }
          }
# 3999 "xmlparse.c"
          entity___0->base = parser->m_curBase;
          __CrestLoad(70946, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(70947, (unsigned long )(& dtd->paramEntityRead));
# 4000 "xmlparse.c"
          dtd->paramEntityRead = (XML_Bool )0;
# 4001 "xmlparse.c"
          mem_131 = parser->m_externalEntityRefHandler;
# 4001 "xmlparse.c"
          tmp___11 = (*mem_131)(parser->m_externalEntityRefHandlerArg, (XML_Char const *)0,
                                entity___0->base, entity___0->systemId, entity___0->publicId);
          __CrestHandleReturn(70949, (long long )tmp___11);
          __CrestStore(70948, (unsigned long )(& tmp___11));
          {
          __CrestLoad(70952, (unsigned long )(& tmp___11), (long long )tmp___11);
          __CrestLoad(70951, (unsigned long )0, (long long )0);
          __CrestApply2(70950, 13, (long long )(tmp___11 != 0));
# 4001 "xmlparse.c"
          if (tmp___11 != 0) {
            __CrestBranch(70953, 45675, 1);

          } else {
            __CrestBranch(70954, 45676, 0);
            __CrestLoad(70955, (unsigned long )0, (long long )((enum XML_Error )21));
            __CrestStore(70956, (unsigned long )(& __retres221));
# 4006 "xmlparse.c"
            __retres221 = (enum XML_Error )21;
# 4006 "xmlparse.c"
            goto return_label;
          }
          }
          {
          __CrestLoad(70959, (unsigned long )(& dtd->paramEntityRead), (long long )dtd->paramEntityRead);
          __CrestLoad(70958, (unsigned long )0, (long long )0);
          __CrestApply2(70957, 13, (long long )(dtd->paramEntityRead != 0));
# 4007 "xmlparse.c"
          if (dtd->paramEntityRead != 0) {
            __CrestBranch(70960, 45679, 1);
            {
            __CrestLoad(70964, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
            __CrestLoad(70963, (unsigned long )0, (long long )0);
            __CrestApply2(70962, 12, (long long )(dtd->standalone == 0));
# 4008 "xmlparse.c"
            if (dtd->standalone == 0) {
              __CrestBranch(70965, 45680, 1);
              {
              __CrestLoad(70969, (unsigned long )(& parser->m_notStandaloneHandler),
                          (long long )((unsigned long )parser->m_notStandaloneHandler));
              __CrestLoad(70968, (unsigned long )0, (long long )0);
              __CrestApply2(70967, 13, (long long )(parser->m_notStandaloneHandler != 0));
# 4008 "xmlparse.c"
              if (parser->m_notStandaloneHandler != 0) {
                __CrestBranch(70970, 45681, 1);
# 4008 "xmlparse.c"
                mem_132 = parser->m_notStandaloneHandler;
# 4008 "xmlparse.c"
                tmp___12 = (*mem_132)(parser->m_handlerArg);
                __CrestHandleReturn(70973, (long long )tmp___12);
                __CrestStore(70972, (unsigned long )(& tmp___12));
                {
                __CrestLoad(70976, (unsigned long )(& tmp___12), (long long )tmp___12);
                __CrestLoad(70975, (unsigned long )0, (long long )0);
                __CrestApply2(70974, 13, (long long )(tmp___12 != 0));
# 4008 "xmlparse.c"
                if (tmp___12 != 0) {
                  __CrestBranch(70977, 45683, 1);

                } else {
                  __CrestBranch(70978, 45684, 0);
                  __CrestLoad(70979, (unsigned long )0, (long long )((enum XML_Error )22));
                  __CrestStore(70980, (unsigned long )(& __retres221));
# 4011 "xmlparse.c"
                  __retres221 = (enum XML_Error )22;
# 4011 "xmlparse.c"
                  goto return_label;
                }
                }
              } else {
                __CrestBranch(70971, 45686, 0);

              }
              }
            } else {
              __CrestBranch(70966, 45687, 0);

            }
            }
          } else {
            __CrestBranch(70961, 45688, 0);
            __CrestLoad(70981, (unsigned long )(& hadParamEntityRefs___0), (long long )hadParamEntityRefs___0);
            __CrestStore(70982, (unsigned long )(& dtd->hasParamEntityRefs));
# 4017 "xmlparse.c"
            dtd->hasParamEntityRefs = hadParamEntityRefs___0;
          }
          }
        } else {
          __CrestBranch(70936, 45689, 0);

        }
        }
      } else {
        __CrestBranch(70931, 45690, 0);

      }
      }
    } else {
      __CrestBranch(70922, 45691, 0);

    }
    }
# 4022 "xmlparse.c"
    parser->m_processor = & contentProcessor;
# 4023 "xmlparse.c"
    tmp___13 = contentProcessor(parser, s, end, nextPtr);
    __CrestHandleReturn(70984, (long long )tmp___13);
    __CrestStore(70983, (unsigned long )(& tmp___13));
    __CrestLoad(70985, (unsigned long )(& tmp___13), (long long )tmp___13);
    __CrestStore(70986, (unsigned long )(& __retres221));
# 4023 "xmlparse.c"
    __retres221 = tmp___13;
# 4023 "xmlparse.c"
    goto return_label;
    case_34:
# 4025 "xmlparse.c"
    parser->m_declElementType = getElementType(parser, enc, s, next);
    __CrestClearStack(70987);
    {
    __CrestLoad(70990, (unsigned long )(& parser->m_declElementType), (long long )((unsigned long )parser->m_declElementType));
    __CrestLoad(70989, (unsigned long )0, (long long )0);
    __CrestApply2(70988, 12, (long long )(parser->m_declElementType == 0));
# 4026 "xmlparse.c"
    if (parser->m_declElementType == 0) {
      __CrestBranch(70991, 45697, 1);
      __CrestLoad(70993, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(70994, (unsigned long )(& __retres221));
# 4027 "xmlparse.c"
      __retres221 = (enum XML_Error )1;
# 4027 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(70992, 45699, 0);

    }
    }
# 4028 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_22:
# 4030 "xmlparse.c"
    parser->m_declAttributeId = getAttributeId(parser, enc, s, next);
    __CrestClearStack(70995);
    {
    __CrestLoad(70998, (unsigned long )(& parser->m_declAttributeId), (long long )((unsigned long )parser->m_declAttributeId));
    __CrestLoad(70997, (unsigned long )0, (long long )0);
    __CrestApply2(70996, 12, (long long )(parser->m_declAttributeId == 0));
# 4031 "xmlparse.c"
    if (parser->m_declAttributeId == 0) {
      __CrestBranch(70999, 45703, 1);
      __CrestLoad(71001, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(71002, (unsigned long )(& __retres221));
# 4032 "xmlparse.c"
      __retres221 = (enum XML_Error )1;
# 4032 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(71000, 45705, 0);

    }
    }
    __CrestLoad(71003, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(71004, (unsigned long )(& parser->m_declAttributeIsCdata));
# 4033 "xmlparse.c"
    parser->m_declAttributeIsCdata = (XML_Bool )0;
# 4034 "xmlparse.c"
    parser->m_declAttributeType = (XML_Char const *)((void *)0);
    __CrestLoad(71005, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(71006, (unsigned long )(& parser->m_declAttributeIsId));
# 4035 "xmlparse.c"
    parser->m_declAttributeIsId = (XML_Bool )0;
# 4036 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_23:
    __CrestLoad(71007, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(71008, (unsigned long )(& parser->m_declAttributeIsCdata));
# 4038 "xmlparse.c"
    parser->m_declAttributeIsCdata = (XML_Bool )1;
# 4039 "xmlparse.c"
    parser->m_declAttributeType = atypeCDATA;
# 4040 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_24:
    __CrestLoad(71009, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(71010, (unsigned long )(& parser->m_declAttributeIsId));
# 4042 "xmlparse.c"
    parser->m_declAttributeIsId = (XML_Bool )1;
# 4043 "xmlparse.c"
    parser->m_declAttributeType = atypeID;
# 4044 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_25:
# 4046 "xmlparse.c"
    parser->m_declAttributeType = atypeIDREF;
# 4047 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_26:
# 4049 "xmlparse.c"
    parser->m_declAttributeType = atypeIDREFS;
# 4050 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_27:
# 4052 "xmlparse.c"
    parser->m_declAttributeType = atypeENTITY;
# 4053 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_28:
# 4055 "xmlparse.c"
    parser->m_declAttributeType = atypeENTITIES;
# 4056 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_29:
# 4058 "xmlparse.c"
    parser->m_declAttributeType = atypeNMTOKEN;
# 4059 "xmlparse.c"
    goto checkAttListDeclHandler;
    case_30:
# 4061 "xmlparse.c"
    parser->m_declAttributeType = atypeNMTOKENS;
    checkAttListDeclHandler:
    {
    __CrestLoad(71013, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71012, (unsigned long )0, (long long )0);
    __CrestApply2(71011, 13, (long long )(dtd->keepProcessing != 0));
# 4063 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71014, 45724, 1);
      {
      __CrestLoad(71018, (unsigned long )(& parser->m_attlistDeclHandler), (long long )((unsigned long )parser->m_attlistDeclHandler));
      __CrestLoad(71017, (unsigned long )0, (long long )0);
      __CrestApply2(71016, 13, (long long )(parser->m_attlistDeclHandler != 0));
# 4063 "xmlparse.c"
      if (parser->m_attlistDeclHandler != 0) {
        __CrestBranch(71019, 45725, 1);
        __CrestLoad(71021, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71022, (unsigned long )(& handleDefault));
# 4064 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71020, 45726, 0);

      }
      }
    } else {
      __CrestBranch(71015, 45727, 0);

    }
    }
# 4065 "xmlparse.c"
    goto switch_break___0;
    case_32:
    case_31:
    {
    __CrestLoad(71025, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71024, (unsigned long )0, (long long )0);
    __CrestApply2(71023, 13, (long long )(dtd->keepProcessing != 0));
# 4068 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71026, 45730, 1);
      {
      __CrestLoad(71030, (unsigned long )(& parser->m_attlistDeclHandler), (long long )((unsigned long )parser->m_attlistDeclHandler));
      __CrestLoad(71029, (unsigned long )0, (long long )0);
      __CrestApply2(71028, 13, (long long )(parser->m_attlistDeclHandler != 0));
# 4068 "xmlparse.c"
      if (parser->m_attlistDeclHandler != 0) {
        __CrestBranch(71031, 45731, 1);
        {
        __CrestLoad(71035, (unsigned long )(& parser->m_declAttributeType), (long long )((unsigned long )parser->m_declAttributeType));
        __CrestLoad(71034, (unsigned long )0, (long long )0);
        __CrestApply2(71033, 13, (long long )(parser->m_declAttributeType != 0));
# 4070 "xmlparse.c"
        if (parser->m_declAttributeType != 0) {
          __CrestBranch(71036, 45732, 1);
# 4071 "xmlparse.c"
          prefix = enumValueSep;
        } else {
          __CrestBranch(71037, 45733, 0);
          {
          __CrestLoad(71040, (unsigned long )(& role), (long long )role);
          __CrestLoad(71039, (unsigned long )0, (long long )32);
          __CrestApply2(71038, 12, (long long )(role == 32));
# 4074 "xmlparse.c"
          if (role == 32) {
            __CrestBranch(71041, 45734, 1);
# 4074 "xmlparse.c"
            prefix = notationPrefix;
          } else {
            __CrestBranch(71042, 45735, 0);
# 4074 "xmlparse.c"
            prefix = enumValueStart;
          }
          }
        }
        }
# 4078 "xmlparse.c"
        tmp___14 = poolAppendString(& parser->m_tempPool, prefix);
        __CrestClearStack(71043);
        {
        __CrestLoad(71046, (unsigned long )(& tmp___14), (long long )((unsigned long )tmp___14));
        __CrestLoad(71045, (unsigned long )0, (long long )0);
        __CrestApply2(71044, 13, (long long )(tmp___14 != 0));
# 4078 "xmlparse.c"
        if (tmp___14 != 0) {
          __CrestBranch(71047, 45738, 1);

        } else {
          __CrestBranch(71048, 45739, 0);
          __CrestLoad(71049, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71050, (unsigned long )(& __retres221));
# 4079 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4079 "xmlparse.c"
          goto return_label;
        }
        }
# 4080 "xmlparse.c"
        tmp___15 = poolAppend(& parser->m_tempPool, enc, s, next);
        __CrestClearStack(71051);
        {
        __CrestLoad(71054, (unsigned long )(& tmp___15), (long long )((unsigned long )tmp___15));
        __CrestLoad(71053, (unsigned long )0, (long long )0);
        __CrestApply2(71052, 13, (long long )(tmp___15 != 0));
# 4080 "xmlparse.c"
        if (tmp___15 != 0) {
          __CrestBranch(71055, 45743, 1);

        } else {
          __CrestBranch(71056, 45744, 0);
          __CrestLoad(71057, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71058, (unsigned long )(& __retres221));
# 4081 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4081 "xmlparse.c"
          goto return_label;
        }
        }
# 4082 "xmlparse.c"
        parser->m_declAttributeType = (XML_Char const *)parser->m_tempPool.start;
        __CrestLoad(71059, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71060, (unsigned long )(& handleDefault));
# 4083 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71032, 45747, 0);

      }
      }
    } else {
      __CrestBranch(71027, 45748, 0);

    }
    }
# 4085 "xmlparse.c"
    goto switch_break___0;
    case_36:
    case_35:
    {
    __CrestLoad(71063, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71062, (unsigned long )0, (long long )0);
    __CrestApply2(71061, 13, (long long )(dtd->keepProcessing != 0));
# 4088 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71064, 45751, 1);
      __CrestLoad(71066, (unsigned long )(& parser->m_declAttributeIsCdata), (long long )parser->m_declAttributeIsCdata);
      __CrestLoad(71067, (unsigned long )(& parser->m_declAttributeIsId), (long long )parser->m_declAttributeIsId);
# 4089 "xmlparse.c"
      tmp___16 = defineAttribute(parser->m_declElementType, parser->m_declAttributeId,
                                 parser->m_declAttributeIsCdata, parser->m_declAttributeIsId,
                                 (XML_Char const *)0, parser);
      __CrestHandleReturn(71069, (long long )tmp___16);
      __CrestStore(71068, (unsigned long )(& tmp___16));
      {
      __CrestLoad(71072, (unsigned long )(& tmp___16), (long long )tmp___16);
      __CrestLoad(71071, (unsigned long )0, (long long )0);
      __CrestApply2(71070, 13, (long long )(tmp___16 != 0));
# 4089 "xmlparse.c"
      if (tmp___16 != 0) {
        __CrestBranch(71073, 45753, 1);

      } else {
        __CrestBranch(71074, 45754, 0);
        __CrestLoad(71075, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71076, (unsigned long )(& __retres221));
# 4092 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4092 "xmlparse.c"
        goto return_label;
      }
      }
      {
      __CrestLoad(71079, (unsigned long )(& parser->m_attlistDeclHandler), (long long )((unsigned long )parser->m_attlistDeclHandler));
      __CrestLoad(71078, (unsigned long )0, (long long )0);
      __CrestApply2(71077, 13, (long long )(parser->m_attlistDeclHandler != 0));
# 4093 "xmlparse.c"
      if (parser->m_attlistDeclHandler != 0) {
        __CrestBranch(71080, 45757, 1);
        {
        __CrestLoad(71084, (unsigned long )(& parser->m_declAttributeType), (long long )((unsigned long )parser->m_declAttributeType));
        __CrestLoad(71083, (unsigned long )0, (long long )0);
        __CrestApply2(71082, 13, (long long )(parser->m_declAttributeType != 0));
# 4093 "xmlparse.c"
        if (parser->m_declAttributeType != 0) {
          __CrestBranch(71085, 45758, 1);
          {
# 4094 "xmlparse.c"
          mem_133 = parser->m_declAttributeType;
          {
          __CrestLoad(71089, (unsigned long )mem_133, (long long )*mem_133);
          __CrestLoad(71088, (unsigned long )0, (long long )40);
          __CrestApply2(71087, 12, (long long )((int const )*mem_133 == 40));
# 4094 "xmlparse.c"
          if ((int const )*mem_133 == 40) {
            __CrestBranch(71090, 45761, 1);
# 4094 "xmlparse.c"
            goto _L___1;
          } else {
            __CrestBranch(71091, 45762, 0);
            {
# 4094 "xmlparse.c"
            mem_134 = parser->m_declAttributeType;
            {
            __CrestLoad(71094, (unsigned long )mem_134, (long long )*mem_134);
            __CrestLoad(71093, (unsigned long )0, (long long )78);
            __CrestApply2(71092, 12, (long long )((int const )*mem_134 == 78));
# 4094 "xmlparse.c"
            if ((int const )*mem_134 == 78) {
              __CrestBranch(71095, 45765, 1);
              {
# 4094 "xmlparse.c"
              mem_135 = parser->m_declAttributeType + 1;
              {
              __CrestLoad(71099, (unsigned long )mem_135, (long long )*mem_135);
              __CrestLoad(71098, (unsigned long )0, (long long )79);
              __CrestApply2(71097, 12, (long long )((int const )*mem_135 == 79));
# 4094 "xmlparse.c"
              if ((int const )*mem_135 == 79) {
                __CrestBranch(71100, 45768, 1);
                _L___1:
                {
                __CrestLoad(71104, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
                __CrestLoad(71103, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
                __CrestApply2(71102, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 4098 "xmlparse.c"
                if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
                  __CrestBranch(71105, 45769, 1);
# 4098 "xmlparse.c"
                  tmp___20 = poolGrow(& parser->m_tempPool);
                  __CrestHandleReturn(71108, (long long )tmp___20);
                  __CrestStore(71107, (unsigned long )(& tmp___20));
                  {
                  __CrestLoad(71111, (unsigned long )(& tmp___20), (long long )tmp___20);
                  __CrestLoad(71110, (unsigned long )0, (long long )0);
                  __CrestApply2(71109, 13, (long long )(tmp___20 != 0));
# 4098 "xmlparse.c"
                  if (tmp___20 != 0) {
                    __CrestBranch(71112, 45771, 1);
# 4098 "xmlparse.c"
                    tmp___18 = parser->m_tempPool.ptr;
# 4098 "xmlparse.c"
                    (parser->m_tempPool.ptr) ++;
                    __CrestLoad(71114, (unsigned long )0, (long long )((XML_Char )41));
                    __CrestStore(71115, (unsigned long )tmp___18);
# 4098 "xmlparse.c"
                    *tmp___18 = (XML_Char )41;
                    __CrestLoad(71116, (unsigned long )0, (long long )1);
                    __CrestStore(71117, (unsigned long )(& tmp___19));
# 4098 "xmlparse.c"
                    tmp___19 = 1;
                  } else {
                    __CrestBranch(71113, 45772, 0);
                    __CrestLoad(71118, (unsigned long )0, (long long )0);
                    __CrestStore(71119, (unsigned long )(& tmp___19));
# 4098 "xmlparse.c"
                    tmp___19 = 0;
                  }
                  }
                } else {
                  __CrestBranch(71106, 45773, 0);
# 4098 "xmlparse.c"
                  tmp___18 = parser->m_tempPool.ptr;
# 4098 "xmlparse.c"
                  (parser->m_tempPool.ptr) ++;
                  __CrestLoad(71120, (unsigned long )0, (long long )((XML_Char )41));
                  __CrestStore(71121, (unsigned long )tmp___18);
# 4098 "xmlparse.c"
                  *tmp___18 = (XML_Char )41;
                  __CrestLoad(71122, (unsigned long )0, (long long )1);
                  __CrestStore(71123, (unsigned long )(& tmp___19));
# 4098 "xmlparse.c"
                  tmp___19 = 1;
                }
                }
                {
                __CrestLoad(71126, (unsigned long )(& tmp___19), (long long )tmp___19);
                __CrestLoad(71125, (unsigned long )0, (long long )0);
                __CrestApply2(71124, 13, (long long )(tmp___19 != 0));
# 4098 "xmlparse.c"
                if (tmp___19 != 0) {
                  __CrestBranch(71127, 45775, 1);
                  {
                  __CrestLoad(71131, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
                  __CrestLoad(71130, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
                  __CrestApply2(71129, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 4098 "xmlparse.c"
                  if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
                    __CrestBranch(71132, 45776, 1);
# 4098 "xmlparse.c"
                    tmp___24 = poolGrow(& parser->m_tempPool);
                    __CrestHandleReturn(71135, (long long )tmp___24);
                    __CrestStore(71134, (unsigned long )(& tmp___24));
                    {
                    __CrestLoad(71138, (unsigned long )(& tmp___24), (long long )tmp___24);
                    __CrestLoad(71137, (unsigned long )0, (long long )0);
                    __CrestApply2(71136, 13, (long long )(tmp___24 != 0));
# 4098 "xmlparse.c"
                    if (tmp___24 != 0) {
                      __CrestBranch(71139, 45778, 1);
# 4098 "xmlparse.c"
                      tmp___22 = parser->m_tempPool.ptr;
# 4098 "xmlparse.c"
                      (parser->m_tempPool.ptr) ++;
                      __CrestLoad(71141, (unsigned long )0, (long long )((XML_Char )'\000'));
                      __CrestStore(71142, (unsigned long )tmp___22);
# 4098 "xmlparse.c"
                      *tmp___22 = (XML_Char )'\000';
                      __CrestLoad(71143, (unsigned long )0, (long long )1);
                      __CrestStore(71144, (unsigned long )(& tmp___23));
# 4098 "xmlparse.c"
                      tmp___23 = 1;
                    } else {
                      __CrestBranch(71140, 45779, 0);
                      __CrestLoad(71145, (unsigned long )0, (long long )0);
                      __CrestStore(71146, (unsigned long )(& tmp___23));
# 4098 "xmlparse.c"
                      tmp___23 = 0;
                    }
                    }
                  } else {
                    __CrestBranch(71133, 45780, 0);
# 4098 "xmlparse.c"
                    tmp___22 = parser->m_tempPool.ptr;
# 4098 "xmlparse.c"
                    (parser->m_tempPool.ptr) ++;
                    __CrestLoad(71147, (unsigned long )0, (long long )((XML_Char )'\000'));
                    __CrestStore(71148, (unsigned long )tmp___22);
# 4098 "xmlparse.c"
                    *tmp___22 = (XML_Char )'\000';
                    __CrestLoad(71149, (unsigned long )0, (long long )1);
                    __CrestStore(71150, (unsigned long )(& tmp___23));
# 4098 "xmlparse.c"
                    tmp___23 = 1;
                  }
                  }
                  {
                  __CrestLoad(71153, (unsigned long )(& tmp___23), (long long )tmp___23);
                  __CrestLoad(71152, (unsigned long )0, (long long )0);
                  __CrestApply2(71151, 13, (long long )(tmp___23 != 0));
# 4098 "xmlparse.c"
                  if (tmp___23 != 0) {
                    __CrestBranch(71154, 45782, 1);

                  } else {
                    __CrestBranch(71155, 45783, 0);
                    __CrestLoad(71156, (unsigned long )0, (long long )((enum XML_Error )1));
                    __CrestStore(71157, (unsigned long )(& __retres221));
# 4100 "xmlparse.c"
                    __retres221 = (enum XML_Error )1;
# 4100 "xmlparse.c"
                    goto return_label;
                  }
                  }
                } else {
                  __CrestBranch(71128, 45785, 0);
                  __CrestLoad(71158, (unsigned long )0, (long long )((enum XML_Error )1));
                  __CrestStore(71159, (unsigned long )(& __retres221));
# 4100 "xmlparse.c"
                  __retres221 = (enum XML_Error )1;
# 4100 "xmlparse.c"
                  goto return_label;
                }
                }
# 4101 "xmlparse.c"
                parser->m_declAttributeType = (XML_Char const *)parser->m_tempPool.start;
# 4102 "xmlparse.c"
                parser->m_tempPool.start = parser->m_tempPool.ptr;
              } else {
                __CrestBranch(71101, 45788, 0);

              }
              }
              }
            } else {
              __CrestBranch(71096, 45789, 0);

            }
            }
            }
          }
          }
          }
# 4104 "xmlparse.c"
          *eventEndPP = s;
# 4105 "xmlparse.c"
          mem_136 = parser->m_attlistDeclHandler;
# 4105 "xmlparse.c"
          mem_137 = parser->m_declElementType;
# 4105 "xmlparse.c"
          mem_138 = parser->m_declAttributeId;
          __CrestLoad(71162, (unsigned long )(& role), (long long )role);
          __CrestLoad(71161, (unsigned long )0, (long long )36);
          __CrestApply2(71160, 12, (long long )(role == 36));
# 4105 "xmlparse.c"
          (*mem_136)(parser->m_handlerArg, mem_137->name, (XML_Char const *)mem_138->name,
                     parser->m_declAttributeType, (XML_Char const *)0, role == 36);
          __CrestClearStack(71163);
# 4108 "xmlparse.c"
          poolClear(& parser->m_tempPool);
          __CrestClearStack(71164);
          __CrestLoad(71165, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71166, (unsigned long )(& handleDefault));
# 4109 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71086, 45791, 0);

        }
        }
      } else {
        __CrestBranch(71081, 45792, 0);

      }
      }
    } else {
      __CrestBranch(71065, 45793, 0);

    }
    }
# 4112 "xmlparse.c"
    goto switch_break___0;
    case_38:
    case_37:
    {
    __CrestLoad(71169, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71168, (unsigned long )0, (long long )0);
    __CrestApply2(71167, 13, (long long )(dtd->keepProcessing != 0));
# 4115 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71170, 45796, 1);
      __CrestLoad(71172, (unsigned long )(& parser->m_declAttributeIsCdata), (long long )parser->m_declAttributeIsCdata);
# 4117 "xmlparse.c"
      tmp___25 = storeAttributeValue(parser, enc, parser->m_declAttributeIsCdata,
                                     s + enc->minBytesPerChar, next - enc->minBytesPerChar,
                                     & dtd->pool);
      __CrestHandleReturn(71174, (long long )tmp___25);
      __CrestStore(71173, (unsigned long )(& tmp___25));
      __CrestLoad(71175, (unsigned long )(& tmp___25), (long long )tmp___25);
      __CrestStore(71176, (unsigned long )(& result___1));
# 4117 "xmlparse.c"
      result___1 = tmp___25;
      {
      __CrestLoad(71179, (unsigned long )(& result___1), (long long )result___1);
      __CrestLoad(71178, (unsigned long )0, (long long )0);
      __CrestApply2(71177, 13, (long long )(result___1 != 0));
# 4122 "xmlparse.c"
      if (result___1 != 0) {
        __CrestBranch(71180, 45798, 1);
        __CrestLoad(71182, (unsigned long )(& result___1), (long long )result___1);
        __CrestStore(71183, (unsigned long )(& __retres221));
# 4123 "xmlparse.c"
        __retres221 = result___1;
# 4123 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71181, 45800, 0);

      }
      }
# 4124 "xmlparse.c"
      attVal = (XML_Char const *)dtd->pool.start;
# 4125 "xmlparse.c"
      dtd->pool.start = dtd->pool.ptr;
      __CrestLoad(71184, (unsigned long )(& parser->m_declAttributeIsCdata), (long long )parser->m_declAttributeIsCdata);
      __CrestLoad(71185, (unsigned long )0, (long long )((XML_Bool )0));
# 4127 "xmlparse.c"
      tmp___26 = defineAttribute(parser->m_declElementType, parser->m_declAttributeId,
                                 parser->m_declAttributeIsCdata, (XML_Bool )0, attVal,
                                 parser);
      __CrestHandleReturn(71187, (long long )tmp___26);
      __CrestStore(71186, (unsigned long )(& tmp___26));
      {
      __CrestLoad(71190, (unsigned long )(& tmp___26), (long long )tmp___26);
      __CrestLoad(71189, (unsigned long )0, (long long )0);
      __CrestApply2(71188, 13, (long long )(tmp___26 != 0));
# 4127 "xmlparse.c"
      if (tmp___26 != 0) {
        __CrestBranch(71191, 45803, 1);

      } else {
        __CrestBranch(71192, 45804, 0);
        __CrestLoad(71193, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71194, (unsigned long )(& __retres221));
# 4129 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4129 "xmlparse.c"
        goto return_label;
      }
      }
      {
      __CrestLoad(71197, (unsigned long )(& parser->m_attlistDeclHandler), (long long )((unsigned long )parser->m_attlistDeclHandler));
      __CrestLoad(71196, (unsigned long )0, (long long )0);
      __CrestApply2(71195, 13, (long long )(parser->m_attlistDeclHandler != 0));
# 4130 "xmlparse.c"
      if (parser->m_attlistDeclHandler != 0) {
        __CrestBranch(71198, 45807, 1);
        {
        __CrestLoad(71202, (unsigned long )(& parser->m_declAttributeType), (long long )((unsigned long )parser->m_declAttributeType));
        __CrestLoad(71201, (unsigned long )0, (long long )0);
        __CrestApply2(71200, 13, (long long )(parser->m_declAttributeType != 0));
# 4130 "xmlparse.c"
        if (parser->m_declAttributeType != 0) {
          __CrestBranch(71203, 45808, 1);
          {
# 4131 "xmlparse.c"
          mem_139 = parser->m_declAttributeType;
          {
          __CrestLoad(71207, (unsigned long )mem_139, (long long )*mem_139);
          __CrestLoad(71206, (unsigned long )0, (long long )40);
          __CrestApply2(71205, 12, (long long )((int const )*mem_139 == 40));
# 4131 "xmlparse.c"
          if ((int const )*mem_139 == 40) {
            __CrestBranch(71208, 45811, 1);
# 4131 "xmlparse.c"
            goto _L___2;
          } else {
            __CrestBranch(71209, 45812, 0);
            {
# 4131 "xmlparse.c"
            mem_140 = parser->m_declAttributeType;
            {
            __CrestLoad(71212, (unsigned long )mem_140, (long long )*mem_140);
            __CrestLoad(71211, (unsigned long )0, (long long )78);
            __CrestApply2(71210, 12, (long long )((int const )*mem_140 == 78));
# 4131 "xmlparse.c"
            if ((int const )*mem_140 == 78) {
              __CrestBranch(71213, 45815, 1);
              {
# 4131 "xmlparse.c"
              mem_141 = parser->m_declAttributeType + 1;
              {
              __CrestLoad(71217, (unsigned long )mem_141, (long long )*mem_141);
              __CrestLoad(71216, (unsigned long )0, (long long )79);
              __CrestApply2(71215, 12, (long long )((int const )*mem_141 == 79));
# 4131 "xmlparse.c"
              if ((int const )*mem_141 == 79) {
                __CrestBranch(71218, 45818, 1);
                _L___2:
                {
                __CrestLoad(71222, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
                __CrestLoad(71221, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
                __CrestApply2(71220, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 4135 "xmlparse.c"
                if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
                  __CrestBranch(71223, 45819, 1);
# 4135 "xmlparse.c"
                  tmp___30 = poolGrow(& parser->m_tempPool);
                  __CrestHandleReturn(71226, (long long )tmp___30);
                  __CrestStore(71225, (unsigned long )(& tmp___30));
                  {
                  __CrestLoad(71229, (unsigned long )(& tmp___30), (long long )tmp___30);
                  __CrestLoad(71228, (unsigned long )0, (long long )0);
                  __CrestApply2(71227, 13, (long long )(tmp___30 != 0));
# 4135 "xmlparse.c"
                  if (tmp___30 != 0) {
                    __CrestBranch(71230, 45821, 1);
# 4135 "xmlparse.c"
                    tmp___28 = parser->m_tempPool.ptr;
# 4135 "xmlparse.c"
                    (parser->m_tempPool.ptr) ++;
                    __CrestLoad(71232, (unsigned long )0, (long long )((XML_Char )41));
                    __CrestStore(71233, (unsigned long )tmp___28);
# 4135 "xmlparse.c"
                    *tmp___28 = (XML_Char )41;
                    __CrestLoad(71234, (unsigned long )0, (long long )1);
                    __CrestStore(71235, (unsigned long )(& tmp___29));
# 4135 "xmlparse.c"
                    tmp___29 = 1;
                  } else {
                    __CrestBranch(71231, 45822, 0);
                    __CrestLoad(71236, (unsigned long )0, (long long )0);
                    __CrestStore(71237, (unsigned long )(& tmp___29));
# 4135 "xmlparse.c"
                    tmp___29 = 0;
                  }
                  }
                } else {
                  __CrestBranch(71224, 45823, 0);
# 4135 "xmlparse.c"
                  tmp___28 = parser->m_tempPool.ptr;
# 4135 "xmlparse.c"
                  (parser->m_tempPool.ptr) ++;
                  __CrestLoad(71238, (unsigned long )0, (long long )((XML_Char )41));
                  __CrestStore(71239, (unsigned long )tmp___28);
# 4135 "xmlparse.c"
                  *tmp___28 = (XML_Char )41;
                  __CrestLoad(71240, (unsigned long )0, (long long )1);
                  __CrestStore(71241, (unsigned long )(& tmp___29));
# 4135 "xmlparse.c"
                  tmp___29 = 1;
                }
                }
                {
                __CrestLoad(71244, (unsigned long )(& tmp___29), (long long )tmp___29);
                __CrestLoad(71243, (unsigned long )0, (long long )0);
                __CrestApply2(71242, 13, (long long )(tmp___29 != 0));
# 4135 "xmlparse.c"
                if (tmp___29 != 0) {
                  __CrestBranch(71245, 45825, 1);
                  {
                  __CrestLoad(71249, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
                  __CrestLoad(71248, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
                  __CrestApply2(71247, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 4135 "xmlparse.c"
                  if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
                    __CrestBranch(71250, 45826, 1);
# 4135 "xmlparse.c"
                    tmp___34 = poolGrow(& parser->m_tempPool);
                    __CrestHandleReturn(71253, (long long )tmp___34);
                    __CrestStore(71252, (unsigned long )(& tmp___34));
                    {
                    __CrestLoad(71256, (unsigned long )(& tmp___34), (long long )tmp___34);
                    __CrestLoad(71255, (unsigned long )0, (long long )0);
                    __CrestApply2(71254, 13, (long long )(tmp___34 != 0));
# 4135 "xmlparse.c"
                    if (tmp___34 != 0) {
                      __CrestBranch(71257, 45828, 1);
# 4135 "xmlparse.c"
                      tmp___32 = parser->m_tempPool.ptr;
# 4135 "xmlparse.c"
                      (parser->m_tempPool.ptr) ++;
                      __CrestLoad(71259, (unsigned long )0, (long long )((XML_Char )'\000'));
                      __CrestStore(71260, (unsigned long )tmp___32);
# 4135 "xmlparse.c"
                      *tmp___32 = (XML_Char )'\000';
                      __CrestLoad(71261, (unsigned long )0, (long long )1);
                      __CrestStore(71262, (unsigned long )(& tmp___33));
# 4135 "xmlparse.c"
                      tmp___33 = 1;
                    } else {
                      __CrestBranch(71258, 45829, 0);
                      __CrestLoad(71263, (unsigned long )0, (long long )0);
                      __CrestStore(71264, (unsigned long )(& tmp___33));
# 4135 "xmlparse.c"
                      tmp___33 = 0;
                    }
                    }
                  } else {
                    __CrestBranch(71251, 45830, 0);
# 4135 "xmlparse.c"
                    tmp___32 = parser->m_tempPool.ptr;
# 4135 "xmlparse.c"
                    (parser->m_tempPool.ptr) ++;
                    __CrestLoad(71265, (unsigned long )0, (long long )((XML_Char )'\000'));
                    __CrestStore(71266, (unsigned long )tmp___32);
# 4135 "xmlparse.c"
                    *tmp___32 = (XML_Char )'\000';
                    __CrestLoad(71267, (unsigned long )0, (long long )1);
                    __CrestStore(71268, (unsigned long )(& tmp___33));
# 4135 "xmlparse.c"
                    tmp___33 = 1;
                  }
                  }
                  {
                  __CrestLoad(71271, (unsigned long )(& tmp___33), (long long )tmp___33);
                  __CrestLoad(71270, (unsigned long )0, (long long )0);
                  __CrestApply2(71269, 13, (long long )(tmp___33 != 0));
# 4135 "xmlparse.c"
                  if (tmp___33 != 0) {
                    __CrestBranch(71272, 45832, 1);

                  } else {
                    __CrestBranch(71273, 45833, 0);
                    __CrestLoad(71274, (unsigned long )0, (long long )((enum XML_Error )1));
                    __CrestStore(71275, (unsigned long )(& __retres221));
# 4137 "xmlparse.c"
                    __retres221 = (enum XML_Error )1;
# 4137 "xmlparse.c"
                    goto return_label;
                  }
                  }
                } else {
                  __CrestBranch(71246, 45835, 0);
                  __CrestLoad(71276, (unsigned long )0, (long long )((enum XML_Error )1));
                  __CrestStore(71277, (unsigned long )(& __retres221));
# 4137 "xmlparse.c"
                  __retres221 = (enum XML_Error )1;
# 4137 "xmlparse.c"
                  goto return_label;
                }
                }
# 4138 "xmlparse.c"
                parser->m_declAttributeType = (XML_Char const *)parser->m_tempPool.start;
# 4139 "xmlparse.c"
                parser->m_tempPool.start = parser->m_tempPool.ptr;
              } else {
                __CrestBranch(71219, 45838, 0);

              }
              }
              }
            } else {
              __CrestBranch(71214, 45839, 0);

            }
            }
            }
          }
          }
          }
# 4141 "xmlparse.c"
          *eventEndPP = s;
# 4142 "xmlparse.c"
          mem_142 = parser->m_attlistDeclHandler;
# 4142 "xmlparse.c"
          mem_143 = parser->m_declElementType;
# 4142 "xmlparse.c"
          mem_144 = parser->m_declAttributeId;
          __CrestLoad(71280, (unsigned long )(& role), (long long )role);
          __CrestLoad(71279, (unsigned long )0, (long long )38);
          __CrestApply2(71278, 12, (long long )(role == 38));
# 4142 "xmlparse.c"
          (*mem_142)(parser->m_handlerArg, mem_143->name, (XML_Char const *)mem_144->name,
                     parser->m_declAttributeType, attVal, role == 38);
          __CrestClearStack(71281);
# 4146 "xmlparse.c"
          poolClear(& parser->m_tempPool);
          __CrestClearStack(71282);
          __CrestLoad(71283, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71284, (unsigned long )(& handleDefault));
# 4147 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71204, 45841, 0);

        }
        }
      } else {
        __CrestBranch(71199, 45842, 0);

      }
      }
    } else {
      __CrestBranch(71171, 45843, 0);

    }
    }
# 4150 "xmlparse.c"
    goto switch_break___0;
    case_12:
    {
    __CrestLoad(71287, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71286, (unsigned long )0, (long long )0);
    __CrestApply2(71285, 13, (long long )(dtd->keepProcessing != 0));
# 4152 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71288, 45846, 1);
# 4153 "xmlparse.c"
      tmp___35 = storeEntityValue(parser, enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
      __CrestHandleReturn(71291, (long long )tmp___35);
      __CrestStore(71290, (unsigned long )(& tmp___35));
      __CrestLoad(71292, (unsigned long )(& tmp___35), (long long )tmp___35);
      __CrestStore(71293, (unsigned long )(& result___2));
# 4153 "xmlparse.c"
      result___2 = tmp___35;
      {
      __CrestLoad(71296, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71295, (unsigned long )0, (long long )0);
      __CrestApply2(71294, 13, (long long )(parser->m_declEntity != 0));
# 4156 "xmlparse.c"
      if (parser->m_declEntity != 0) {
        __CrestBranch(71297, 45848, 1);
# 4157 "xmlparse.c"
        mem_145 = parser->m_declEntity;
# 4157 "xmlparse.c"
        mem_145->textPtr = (XML_Char const *)dtd->entityValuePool.start;
# 4158 "xmlparse.c"
        mem_146 = parser->m_declEntity;
        __CrestLoad(71301, (unsigned long )(& dtd->entityValuePool.ptr), (long long )((unsigned long )dtd->entityValuePool.ptr));
        __CrestLoad(71300, (unsigned long )(& dtd->entityValuePool.start), (long long )((unsigned long )dtd->entityValuePool.start));
        __CrestApply2(71299, 18, (long long )(dtd->entityValuePool.ptr - dtd->entityValuePool.start));
        __CrestStore(71302, (unsigned long )(& mem_146->textLen));
# 4158 "xmlparse.c"
        mem_146->textLen = (int )(dtd->entityValuePool.ptr - dtd->entityValuePool.start);
# 4159 "xmlparse.c"
        dtd->entityValuePool.start = dtd->entityValuePool.ptr;
        {
        __CrestLoad(71305, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(71304, (unsigned long )0, (long long )0);
        __CrestApply2(71303, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4160 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(71306, 45850, 1);
# 4161 "xmlparse.c"
          *eventEndPP = s;
# 4162 "xmlparse.c"
          mem_147 = parser->m_entityDeclHandler;
# 4162 "xmlparse.c"
          mem_148 = parser->m_declEntity;
# 4162 "xmlparse.c"
          mem_149 = parser->m_declEntity;
# 4162 "xmlparse.c"
          mem_150 = parser->m_declEntity;
# 4162 "xmlparse.c"
          mem_151 = parser->m_declEntity;
          __CrestLoad(71308, (unsigned long )(& mem_149->is_param), (long long )mem_149->is_param);
          __CrestLoad(71309, (unsigned long )(& mem_151->textLen), (long long )mem_151->textLen);
# 4162 "xmlparse.c"
          (*mem_147)(parser->m_handlerArg, mem_148->name, (int )mem_149->is_param,
                     mem_150->textPtr, mem_151->textLen, parser->m_curBase, (XML_Char const *)0,
                     (XML_Char const *)0, (XML_Char const *)0);
          __CrestClearStack(71310);
          __CrestLoad(71311, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71312, (unsigned long )(& handleDefault));
# 4168 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71307, 45851, 0);

        }
        }
      } else {
        __CrestBranch(71298, 45852, 0);
# 4172 "xmlparse.c"
        dtd->entityValuePool.ptr = dtd->entityValuePool.start;
      }
      }
      {
      __CrestLoad(71315, (unsigned long )(& result___2), (long long )result___2);
      __CrestLoad(71314, (unsigned long )0, (long long )0U);
      __CrestApply2(71313, 13, (long long )((unsigned int )result___2 != 0U));
# 4173 "xmlparse.c"
      if ((unsigned int )result___2 != 0U) {
        __CrestBranch(71316, 45854, 1);
        __CrestLoad(71318, (unsigned long )(& result___2), (long long )result___2);
        __CrestStore(71319, (unsigned long )(& __retres221));
# 4174 "xmlparse.c"
        __retres221 = result___2;
# 4174 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71317, 45856, 0);

      }
      }
    } else {
      __CrestBranch(71289, 45857, 0);

    }
    }
# 4176 "xmlparse.c"
    goto switch_break___0;
    case_5:
    __CrestLoad(71320, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(71321, (unsigned long )(& parser->m_useForeignDTD));
# 4179 "xmlparse.c"
    parser->m_useForeignDTD = (XML_Bool )0;
    __CrestLoad(71322, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(71323, (unsigned long )(& dtd->hasParamEntityRefs));
# 4181 "xmlparse.c"
    dtd->hasParamEntityRefs = (XML_Bool )1;
    {
    __CrestLoad(71326, (unsigned long )(& parser->m_startDoctypeDeclHandler), (long long )((unsigned long )parser->m_startDoctypeDeclHandler));
    __CrestLoad(71325, (unsigned long )0, (long long )0);
    __CrestApply2(71324, 13, (long long )(parser->m_startDoctypeDeclHandler != 0));
# 4182 "xmlparse.c"
    if (parser->m_startDoctypeDeclHandler != 0) {
      __CrestBranch(71327, 45861, 1);
# 4183 "xmlparse.c"
      tmp___36 = poolStoreString(& parser->m_tempPool, enc, s + enc->minBytesPerChar,
                                 next - enc->minBytesPerChar);
      __CrestClearStack(71329);
# 4183 "xmlparse.c"
      parser->m_doctypeSysid = (XML_Char const *)tmp___36;
      {
      __CrestLoad(71332, (unsigned long )(& parser->m_doctypeSysid), (long long )((unsigned long )parser->m_doctypeSysid));
      __CrestLoad(71331, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(71330, 12, (long long )((unsigned long )parser->m_doctypeSysid == (unsigned long )((void *)0)));
# 4186 "xmlparse.c"
      if ((unsigned long )parser->m_doctypeSysid == (unsigned long )((void *)0)) {
        __CrestBranch(71333, 45863, 1);
        __CrestLoad(71335, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71336, (unsigned long )(& __retres221));
# 4187 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4187 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71334, 45865, 0);

      }
      }
# 4188 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
      __CrestLoad(71337, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(71338, (unsigned long )(& handleDefault));
# 4189 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(71328, 45867, 0);
# 4195 "xmlparse.c"
      parser->m_doctypeSysid = externalSubsetName;
    }
    }
    {
    __CrestLoad(71341, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
    __CrestLoad(71340, (unsigned long )0, (long long )0);
    __CrestApply2(71339, 12, (long long )(dtd->standalone == 0));
# 4197 "xmlparse.c"
    if (dtd->standalone == 0) {
      __CrestBranch(71342, 45869, 1);
      {
      __CrestLoad(71346, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
      __CrestLoad(71345, (unsigned long )0, (long long )0);
      __CrestApply2(71344, 12, (long long )(parser->m_paramEntityParsing == 0));
# 4197 "xmlparse.c"
      if (parser->m_paramEntityParsing == 0) {
        __CrestBranch(71347, 45870, 1);
        {
        __CrestLoad(71351, (unsigned long )(& parser->m_notStandaloneHandler), (long long )((unsigned long )parser->m_notStandaloneHandler));
        __CrestLoad(71350, (unsigned long )0, (long long )0);
        __CrestApply2(71349, 13, (long long )(parser->m_notStandaloneHandler != 0));
# 4197 "xmlparse.c"
        if (parser->m_notStandaloneHandler != 0) {
          __CrestBranch(71352, 45871, 1);
# 4197 "xmlparse.c"
          mem_152 = parser->m_notStandaloneHandler;
# 4197 "xmlparse.c"
          tmp___37 = (*mem_152)(parser->m_handlerArg);
          __CrestHandleReturn(71355, (long long )tmp___37);
          __CrestStore(71354, (unsigned long )(& tmp___37));
          {
          __CrestLoad(71358, (unsigned long )(& tmp___37), (long long )tmp___37);
          __CrestLoad(71357, (unsigned long )0, (long long )0);
          __CrestApply2(71356, 13, (long long )(tmp___37 != 0));
# 4197 "xmlparse.c"
          if (tmp___37 != 0) {
            __CrestBranch(71359, 45873, 1);

          } else {
            __CrestBranch(71360, 45874, 0);
            __CrestLoad(71361, (unsigned long )0, (long long )((enum XML_Error )22));
            __CrestStore(71362, (unsigned long )(& __retres221));
# 4203 "xmlparse.c"
            __retres221 = (enum XML_Error )22;
# 4203 "xmlparse.c"
            goto return_label;
          }
          }
        } else {
          __CrestBranch(71353, 45876, 0);

        }
        }
      } else {
        __CrestBranch(71348, 45877, 0);

      }
      }
    } else {
      __CrestBranch(71343, 45878, 0);

    }
    }
    {
    __CrestLoad(71365, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
    __CrestLoad(71364, (unsigned long )0, (long long )0);
    __CrestApply2(71363, 12, (long long )(parser->m_declEntity == 0));
# 4207 "xmlparse.c"
    if (parser->m_declEntity == 0) {
      __CrestBranch(71366, 45880, 1);
      __CrestLoad(71368, (unsigned long )0, (long long )sizeof(ENTITY ));
# 4208 "xmlparse.c"
      tmp___38 = lookup(parser, & dtd->paramEntities, externalSubsetName, sizeof(ENTITY ));
      __CrestClearStack(71369);
# 4208 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)tmp___38;
      {
      __CrestLoad(71372, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71371, (unsigned long )0, (long long )0);
      __CrestApply2(71370, 12, (long long )(parser->m_declEntity == 0));
# 4212 "xmlparse.c"
      if (parser->m_declEntity == 0) {
        __CrestBranch(71373, 45882, 1);
        __CrestLoad(71375, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71376, (unsigned long )(& __retres221));
# 4213 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4213 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71374, 45884, 0);

      }
      }
# 4214 "xmlparse.c"
      mem_153 = parser->m_declEntity;
# 4214 "xmlparse.c"
      mem_153->publicId = (XML_Char const *)((void *)0);
    } else {
      __CrestBranch(71367, 45886, 0);

    }
    }
    case_13:
    {
    __CrestLoad(71379, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71378, (unsigned long )0, (long long )0);
    __CrestApply2(71377, 13, (long long )(dtd->keepProcessing != 0));
# 4219 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71380, 45888, 1);
      {
      __CrestLoad(71384, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71383, (unsigned long )0, (long long )0);
      __CrestApply2(71382, 13, (long long )(parser->m_declEntity != 0));
# 4219 "xmlparse.c"
      if (parser->m_declEntity != 0) {
        __CrestBranch(71385, 45889, 1);
# 4220 "xmlparse.c"
        tmp___39 = poolStoreString(& dtd->pool, enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
        __CrestClearStack(71387);
# 4220 "xmlparse.c"
        mem_154 = parser->m_declEntity;
# 4220 "xmlparse.c"
        mem_154->systemId = (XML_Char const *)tmp___39;
        {
# 4223 "xmlparse.c"
        mem_155 = parser->m_declEntity;
        {
        __CrestLoad(71390, (unsigned long )(& mem_155->systemId), (long long )((unsigned long )mem_155->systemId));
        __CrestLoad(71389, (unsigned long )0, (long long )0);
        __CrestApply2(71388, 12, (long long )(mem_155->systemId == 0));
# 4223 "xmlparse.c"
        if (mem_155->systemId == 0) {
          __CrestBranch(71391, 45893, 1);
          __CrestLoad(71393, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71394, (unsigned long )(& __retres221));
# 4224 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4224 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71392, 45895, 0);

        }
        }
        }
# 4225 "xmlparse.c"
        mem_156 = parser->m_declEntity;
# 4225 "xmlparse.c"
        mem_156->base = parser->m_curBase;
# 4226 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
        {
        __CrestLoad(71397, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(71396, (unsigned long )0, (long long )0);
        __CrestApply2(71395, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4227 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(71398, 45898, 1);
          __CrestLoad(71400, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71401, (unsigned long )(& handleDefault));
# 4228 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71399, 45899, 0);

        }
        }
      } else {
        __CrestBranch(71386, 45900, 0);

      }
      }
    } else {
      __CrestBranch(71381, 45901, 0);

    }
    }
# 4230 "xmlparse.c"
    goto switch_break___0;
    case_15:
    {
    __CrestLoad(71404, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71403, (unsigned long )0, (long long )0);
    __CrestApply2(71402, 13, (long long )(dtd->keepProcessing != 0));
# 4232 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71405, 45904, 1);
      {
      __CrestLoad(71409, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71408, (unsigned long )0, (long long )0);
      __CrestApply2(71407, 13, (long long )(parser->m_declEntity != 0));
# 4232 "xmlparse.c"
      if (parser->m_declEntity != 0) {
        __CrestBranch(71410, 45905, 1);
        {
        __CrestLoad(71414, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(71413, (unsigned long )0, (long long )0);
        __CrestApply2(71412, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4232 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(71415, 45906, 1);
# 4233 "xmlparse.c"
          *eventEndPP = s;
# 4234 "xmlparse.c"
          mem_157 = parser->m_entityDeclHandler;
# 4234 "xmlparse.c"
          mem_158 = parser->m_declEntity;
# 4234 "xmlparse.c"
          mem_159 = parser->m_declEntity;
# 4234 "xmlparse.c"
          mem_160 = parser->m_declEntity;
# 4234 "xmlparse.c"
          mem_161 = parser->m_declEntity;
# 4234 "xmlparse.c"
          mem_162 = parser->m_declEntity;
          __CrestLoad(71417, (unsigned long )(& mem_159->is_param), (long long )mem_159->is_param);
          __CrestLoad(71418, (unsigned long )0, (long long )0);
# 4234 "xmlparse.c"
          (*mem_157)(parser->m_handlerArg, mem_158->name, (int )mem_159->is_param,
                     (XML_Char const *)0, 0, mem_160->base, mem_161->systemId, mem_162->publicId,
                     (XML_Char const *)0);
          __CrestClearStack(71419);
          __CrestLoad(71420, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71421, (unsigned long )(& handleDefault));
# 4242 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71416, 45907, 0);

        }
        }
      } else {
        __CrestBranch(71411, 45908, 0);

      }
      }
    } else {
      __CrestBranch(71406, 45909, 0);

    }
    }
# 4244 "xmlparse.c"
    goto switch_break___0;
    case_16:
    {
    __CrestLoad(71424, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71423, (unsigned long )0, (long long )0);
    __CrestApply2(71422, 13, (long long )(dtd->keepProcessing != 0));
# 4246 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71425, 45912, 1);
      {
      __CrestLoad(71429, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71428, (unsigned long )0, (long long )0);
      __CrestApply2(71427, 13, (long long )(parser->m_declEntity != 0));
# 4246 "xmlparse.c"
      if (parser->m_declEntity != 0) {
        __CrestBranch(71430, 45913, 1);
# 4247 "xmlparse.c"
        tmp___40 = poolStoreString(& dtd->pool, enc, s, next);
        __CrestClearStack(71432);
# 4247 "xmlparse.c"
        mem_163 = parser->m_declEntity;
# 4247 "xmlparse.c"
        mem_163->notation = (XML_Char const *)tmp___40;
        {
# 4248 "xmlparse.c"
        mem_164 = parser->m_declEntity;
        {
        __CrestLoad(71435, (unsigned long )(& mem_164->notation), (long long )((unsigned long )mem_164->notation));
        __CrestLoad(71434, (unsigned long )0, (long long )0);
        __CrestApply2(71433, 12, (long long )(mem_164->notation == 0));
# 4248 "xmlparse.c"
        if (mem_164->notation == 0) {
          __CrestBranch(71436, 45917, 1);
          __CrestLoad(71438, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71439, (unsigned long )(& __retres221));
# 4249 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4249 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71437, 45919, 0);

        }
        }
        }
# 4250 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
        {
        __CrestLoad(71442, (unsigned long )(& parser->m_unparsedEntityDeclHandler),
                    (long long )((unsigned long )parser->m_unparsedEntityDeclHandler));
        __CrestLoad(71441, (unsigned long )0, (long long )0);
        __CrestApply2(71440, 13, (long long )(parser->m_unparsedEntityDeclHandler != 0));
# 4251 "xmlparse.c"
        if (parser->m_unparsedEntityDeclHandler != 0) {
          __CrestBranch(71443, 45922, 1);
# 4252 "xmlparse.c"
          *eventEndPP = s;
# 4253 "xmlparse.c"
          mem_165 = parser->m_unparsedEntityDeclHandler;
# 4253 "xmlparse.c"
          mem_166 = parser->m_declEntity;
# 4253 "xmlparse.c"
          mem_167 = parser->m_declEntity;
# 4253 "xmlparse.c"
          mem_168 = parser->m_declEntity;
# 4253 "xmlparse.c"
          mem_169 = parser->m_declEntity;
# 4253 "xmlparse.c"
          mem_170 = parser->m_declEntity;
# 4253 "xmlparse.c"
          (*mem_165)(parser->m_handlerArg, mem_166->name, mem_167->base, mem_168->systemId,
                     mem_169->publicId, mem_170->notation);
          __CrestClearStack(71445);
          __CrestLoad(71446, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71447, (unsigned long )(& handleDefault));
# 4259 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71444, 45923, 0);
          {
          __CrestLoad(71450, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
          __CrestLoad(71449, (unsigned long )0, (long long )0);
          __CrestApply2(71448, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4261 "xmlparse.c"
          if (parser->m_entityDeclHandler != 0) {
            __CrestBranch(71451, 45924, 1);
# 4262 "xmlparse.c"
            *eventEndPP = s;
# 4263 "xmlparse.c"
            mem_171 = parser->m_entityDeclHandler;
# 4263 "xmlparse.c"
            mem_172 = parser->m_declEntity;
# 4263 "xmlparse.c"
            mem_173 = parser->m_declEntity;
# 4263 "xmlparse.c"
            mem_174 = parser->m_declEntity;
# 4263 "xmlparse.c"
            mem_175 = parser->m_declEntity;
# 4263 "xmlparse.c"
            mem_176 = parser->m_declEntity;
            __CrestLoad(71453, (unsigned long )0, (long long )0);
            __CrestLoad(71454, (unsigned long )0, (long long )0);
# 4263 "xmlparse.c"
            (*mem_171)(parser->m_handlerArg, mem_172->name, 0, (XML_Char const *)0,
                       0, mem_173->base, mem_174->systemId, mem_175->publicId, mem_176->notation);
            __CrestClearStack(71455);
            __CrestLoad(71456, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(71457, (unsigned long )(& handleDefault));
# 4270 "xmlparse.c"
            handleDefault = (XML_Bool )0;
          } else {
            __CrestBranch(71452, 45925, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(71431, 45926, 0);

      }
      }
    } else {
      __CrestBranch(71426, 45927, 0);

    }
    }
# 4273 "xmlparse.c"
    goto switch_break___0;
    case_9:
# 4276 "xmlparse.c"
    mem_177 = enc->predefinedEntityName;
# 4276 "xmlparse.c"
    tmp___41 = (*mem_177)(enc, s, next);
    __CrestHandleReturn(71459, (long long )tmp___41);
    __CrestStore(71458, (unsigned long )(& tmp___41));
    {
    __CrestLoad(71462, (unsigned long )(& tmp___41), (long long )tmp___41);
    __CrestLoad(71461, (unsigned long )0, (long long )0);
    __CrestApply2(71460, 13, (long long )(tmp___41 != 0));
# 4276 "xmlparse.c"
    if (tmp___41 != 0) {
      __CrestBranch(71463, 45931, 1);
# 4277 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)((void *)0);
# 4278 "xmlparse.c"
      goto switch_break___0;
    } else {
      __CrestBranch(71464, 45933, 0);

    }
    }
    {
    __CrestLoad(71467, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71466, (unsigned long )0, (long long )0);
    __CrestApply2(71465, 13, (long long )(dtd->keepProcessing != 0));
# 4280 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71468, 45935, 1);
# 4281 "xmlparse.c"
      tmp___42 = poolStoreString(& dtd->pool, enc, s, next);
      __CrestClearStack(71470);
# 4281 "xmlparse.c"
      name = (XML_Char const *)tmp___42;
      {
      __CrestLoad(71473, (unsigned long )(& name), (long long )((unsigned long )name));
      __CrestLoad(71472, (unsigned long )0, (long long )0);
      __CrestApply2(71471, 12, (long long )(name == 0));
# 4282 "xmlparse.c"
      if (name == 0) {
        __CrestBranch(71474, 45937, 1);
        __CrestLoad(71476, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71477, (unsigned long )(& __retres221));
# 4283 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4283 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71475, 45939, 0);

      }
      }
      __CrestLoad(71478, (unsigned long )0, (long long )sizeof(ENTITY ));
# 4284 "xmlparse.c"
      tmp___43 = lookup(parser, & dtd->generalEntities, name, sizeof(ENTITY ));
      __CrestClearStack(71479);
# 4284 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)tmp___43;
      {
      __CrestLoad(71482, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71481, (unsigned long )0, (long long )0);
      __CrestApply2(71480, 12, (long long )(parser->m_declEntity == 0));
# 4286 "xmlparse.c"
      if (parser->m_declEntity == 0) {
        __CrestBranch(71483, 45942, 1);
        __CrestLoad(71485, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71486, (unsigned long )(& __retres221));
# 4287 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4287 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71484, 45944, 0);

      }
      }
      {
# 4288 "xmlparse.c"
      mem_178 = parser->m_declEntity;
      {
      __CrestLoad(71489, (unsigned long )(& mem_178->name), (long long )((unsigned long )mem_178->name));
      __CrestLoad(71488, (unsigned long )(& name), (long long )((unsigned long )name));
      __CrestApply2(71487, 13, (long long )((unsigned long )mem_178->name != (unsigned long )name));
# 4288 "xmlparse.c"
      if ((unsigned long )mem_178->name != (unsigned long )name) {
        __CrestBranch(71490, 45948, 1);
# 4289 "xmlparse.c"
        dtd->pool.ptr = dtd->pool.start;
# 4290 "xmlparse.c"
        parser->m_declEntity = (ENTITY *)((void *)0);
      } else {
        __CrestBranch(71491, 45949, 0);
# 4293 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
# 4294 "xmlparse.c"
        mem_179 = parser->m_declEntity;
# 4294 "xmlparse.c"
        mem_179->publicId = (XML_Char const *)((void *)0);
# 4295 "xmlparse.c"
        mem_180 = parser->m_declEntity;
        __CrestLoad(71492, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71493, (unsigned long )(& mem_180->is_param));
# 4295 "xmlparse.c"
        mem_180->is_param = (XML_Bool )0;
        {
        __CrestLoad(71496, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
        __CrestLoad(71495, (unsigned long )0, (long long )0);
        __CrestApply2(71494, 13, (long long )(parser->m_parentParser != 0));
# 4299 "xmlparse.c"
        if (parser->m_parentParser != 0) {
          __CrestBranch(71497, 45951, 1);
          __CrestLoad(71499, (unsigned long )0, (long long )0);
          __CrestStore(71500, (unsigned long )(& tmp___44));
# 4299 "xmlparse.c"
          tmp___44 = 0;
        } else {
          __CrestBranch(71498, 45952, 0);
          {
          __CrestLoad(71503, (unsigned long )(& parser->m_openInternalEntities), (long long )((unsigned long )parser->m_openInternalEntities));
          __CrestLoad(71502, (unsigned long )0, (long long )0);
          __CrestApply2(71501, 13, (long long )(parser->m_openInternalEntities != 0));
# 4299 "xmlparse.c"
          if (parser->m_openInternalEntities != 0) {
            __CrestBranch(71504, 45953, 1);
            __CrestLoad(71506, (unsigned long )0, (long long )0);
            __CrestStore(71507, (unsigned long )(& tmp___44));
# 4299 "xmlparse.c"
            tmp___44 = 0;
          } else {
            __CrestBranch(71505, 45954, 0);
            __CrestLoad(71508, (unsigned long )0, (long long )1);
            __CrestStore(71509, (unsigned long )(& tmp___44));
# 4299 "xmlparse.c"
            tmp___44 = 1;
          }
          }
        }
        }
# 4299 "xmlparse.c"
        mem_181 = parser->m_declEntity;
        __CrestLoad(71510, (unsigned long )(& tmp___44), (long long )tmp___44);
        __CrestStore(71511, (unsigned long )(& mem_181->is_internal));
# 4299 "xmlparse.c"
        mem_181->is_internal = (XML_Bool )tmp___44;
        {
        __CrestLoad(71514, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(71513, (unsigned long )0, (long long )0);
        __CrestApply2(71512, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4300 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(71515, 45957, 1);
          __CrestLoad(71517, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71518, (unsigned long )(& handleDefault));
# 4301 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71516, 45958, 0);

        }
        }
      }
      }
      }
    } else {
      __CrestBranch(71469, 45959, 0);
# 4305 "xmlparse.c"
      dtd->pool.ptr = dtd->pool.start;
# 4306 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)((void *)0);
    }
    }
# 4309 "xmlparse.c"
    goto switch_break___0;
    case_10:
    {
    __CrestLoad(71521, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(71520, (unsigned long )0, (long long )0);
    __CrestApply2(71519, 13, (long long )(dtd->keepProcessing != 0));
# 4312 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(71522, 45962, 1);
# 4313 "xmlparse.c"
      tmp___45 = poolStoreString(& dtd->pool, enc, s, next);
      __CrestClearStack(71524);
# 4313 "xmlparse.c"
      name___0 = (XML_Char const *)tmp___45;
      {
      __CrestLoad(71527, (unsigned long )(& name___0), (long long )((unsigned long )name___0));
      __CrestLoad(71526, (unsigned long )0, (long long )0);
      __CrestApply2(71525, 12, (long long )(name___0 == 0));
# 4314 "xmlparse.c"
      if (name___0 == 0) {
        __CrestBranch(71528, 45964, 1);
        __CrestLoad(71530, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71531, (unsigned long )(& __retres221));
# 4315 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4315 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71529, 45966, 0);

      }
      }
      __CrestLoad(71532, (unsigned long )0, (long long )sizeof(ENTITY ));
# 4316 "xmlparse.c"
      tmp___46 = lookup(parser, & dtd->paramEntities, name___0, sizeof(ENTITY ));
      __CrestClearStack(71533);
# 4316 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)tmp___46;
      {
      __CrestLoad(71536, (unsigned long )(& parser->m_declEntity), (long long )((unsigned long )parser->m_declEntity));
      __CrestLoad(71535, (unsigned long )0, (long long )0);
      __CrestApply2(71534, 12, (long long )(parser->m_declEntity == 0));
# 4318 "xmlparse.c"
      if (parser->m_declEntity == 0) {
        __CrestBranch(71537, 45969, 1);
        __CrestLoad(71539, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71540, (unsigned long )(& __retres221));
# 4319 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4319 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71538, 45971, 0);

      }
      }
      {
# 4320 "xmlparse.c"
      mem_182 = parser->m_declEntity;
      {
      __CrestLoad(71543, (unsigned long )(& mem_182->name), (long long )((unsigned long )mem_182->name));
      __CrestLoad(71542, (unsigned long )(& name___0), (long long )((unsigned long )name___0));
      __CrestApply2(71541, 13, (long long )((unsigned long )mem_182->name != (unsigned long )name___0));
# 4320 "xmlparse.c"
      if ((unsigned long )mem_182->name != (unsigned long )name___0) {
        __CrestBranch(71544, 45975, 1);
# 4321 "xmlparse.c"
        dtd->pool.ptr = dtd->pool.start;
# 4322 "xmlparse.c"
        parser->m_declEntity = (ENTITY *)((void *)0);
      } else {
        __CrestBranch(71545, 45976, 0);
# 4325 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
# 4326 "xmlparse.c"
        mem_183 = parser->m_declEntity;
# 4326 "xmlparse.c"
        mem_183->publicId = (XML_Char const *)((void *)0);
# 4327 "xmlparse.c"
        mem_184 = parser->m_declEntity;
        __CrestLoad(71546, (unsigned long )0, (long long )((XML_Bool )1));
        __CrestStore(71547, (unsigned long )(& mem_184->is_param));
# 4327 "xmlparse.c"
        mem_184->is_param = (XML_Bool )1;
        {
        __CrestLoad(71550, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
        __CrestLoad(71549, (unsigned long )0, (long long )0);
        __CrestApply2(71548, 13, (long long )(parser->m_parentParser != 0));
# 4331 "xmlparse.c"
        if (parser->m_parentParser != 0) {
          __CrestBranch(71551, 45978, 1);
          __CrestLoad(71553, (unsigned long )0, (long long )0);
          __CrestStore(71554, (unsigned long )(& tmp___47));
# 4331 "xmlparse.c"
          tmp___47 = 0;
        } else {
          __CrestBranch(71552, 45979, 0);
          {
          __CrestLoad(71557, (unsigned long )(& parser->m_openInternalEntities), (long long )((unsigned long )parser->m_openInternalEntities));
          __CrestLoad(71556, (unsigned long )0, (long long )0);
          __CrestApply2(71555, 13, (long long )(parser->m_openInternalEntities != 0));
# 4331 "xmlparse.c"
          if (parser->m_openInternalEntities != 0) {
            __CrestBranch(71558, 45980, 1);
            __CrestLoad(71560, (unsigned long )0, (long long )0);
            __CrestStore(71561, (unsigned long )(& tmp___47));
# 4331 "xmlparse.c"
            tmp___47 = 0;
          } else {
            __CrestBranch(71559, 45981, 0);
            __CrestLoad(71562, (unsigned long )0, (long long )1);
            __CrestStore(71563, (unsigned long )(& tmp___47));
# 4331 "xmlparse.c"
            tmp___47 = 1;
          }
          }
        }
        }
# 4331 "xmlparse.c"
        mem_185 = parser->m_declEntity;
        __CrestLoad(71564, (unsigned long )(& tmp___47), (long long )tmp___47);
        __CrestStore(71565, (unsigned long )(& mem_185->is_internal));
# 4331 "xmlparse.c"
        mem_185->is_internal = (XML_Bool )tmp___47;
        {
        __CrestLoad(71568, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
        __CrestLoad(71567, (unsigned long )0, (long long )0);
        __CrestApply2(71566, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4332 "xmlparse.c"
        if (parser->m_entityDeclHandler != 0) {
          __CrestBranch(71569, 45984, 1);
          __CrestLoad(71571, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71572, (unsigned long )(& handleDefault));
# 4333 "xmlparse.c"
          handleDefault = (XML_Bool )0;
        } else {
          __CrestBranch(71570, 45985, 0);

        }
        }
      }
      }
      }
    } else {
      __CrestBranch(71523, 45986, 0);
# 4337 "xmlparse.c"
      dtd->pool.ptr = dtd->pool.start;
# 4338 "xmlparse.c"
      parser->m_declEntity = (ENTITY *)((void *)0);
    }
    }
# 4343 "xmlparse.c"
    goto switch_break___0;
    case_18:
# 4345 "xmlparse.c"
    parser->m_declNotationPublicId = (XML_Char const *)((void *)0);
# 4346 "xmlparse.c"
    parser->m_declNotationName = (XML_Char const *)((void *)0);
    {
    __CrestLoad(71575, (unsigned long )(& parser->m_notationDeclHandler), (long long )((unsigned long )parser->m_notationDeclHandler));
    __CrestLoad(71574, (unsigned long )0, (long long )0);
    __CrestApply2(71573, 13, (long long )(parser->m_notationDeclHandler != 0));
# 4347 "xmlparse.c"
    if (parser->m_notationDeclHandler != 0) {
      __CrestBranch(71576, 45990, 1);
# 4348 "xmlparse.c"
      tmp___48 = poolStoreString(& parser->m_tempPool, enc, s, next);
      __CrestClearStack(71578);
# 4348 "xmlparse.c"
      parser->m_declNotationName = (XML_Char const *)tmp___48;
      {
      __CrestLoad(71581, (unsigned long )(& parser->m_declNotationName), (long long )((unsigned long )parser->m_declNotationName));
      __CrestLoad(71580, (unsigned long )0, (long long )0);
      __CrestApply2(71579, 12, (long long )(parser->m_declNotationName == 0));
# 4349 "xmlparse.c"
      if (parser->m_declNotationName == 0) {
        __CrestBranch(71582, 45992, 1);
        __CrestLoad(71584, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71585, (unsigned long )(& __retres221));
# 4350 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4350 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71583, 45994, 0);

      }
      }
# 4351 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
      __CrestLoad(71586, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(71587, (unsigned long )(& handleDefault));
# 4352 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(71577, 45996, 0);

    }
    }
# 4354 "xmlparse.c"
    goto switch_break___0;
    case_21:
# 4356 "xmlparse.c"
    mem_186 = enc->isPublicId;
# 4356 "xmlparse.c"
    tmp___49 = (*mem_186)(enc, s, next, eventPP);
    __CrestHandleReturn(71589, (long long )tmp___49);
    __CrestStore(71588, (unsigned long )(& tmp___49));
    {
    __CrestLoad(71592, (unsigned long )(& tmp___49), (long long )tmp___49);
    __CrestLoad(71591, (unsigned long )0, (long long )0);
    __CrestApply2(71590, 13, (long long )(tmp___49 != 0));
# 4356 "xmlparse.c"
    if (tmp___49 != 0) {
      __CrestBranch(71593, 46000, 1);

    } else {
      __CrestBranch(71594, 46001, 0);
      __CrestLoad(71595, (unsigned long )0, (long long )((enum XML_Error )32));
      __CrestStore(71596, (unsigned long )(& __retres221));
# 4357 "xmlparse.c"
      __retres221 = (enum XML_Error )32;
# 4357 "xmlparse.c"
      goto return_label;
    }
    }
    {
    __CrestLoad(71599, (unsigned long )(& parser->m_declNotationName), (long long )((unsigned long )parser->m_declNotationName));
    __CrestLoad(71598, (unsigned long )0, (long long )0);
    __CrestApply2(71597, 13, (long long )(parser->m_declNotationName != 0));
# 4358 "xmlparse.c"
    if (parser->m_declNotationName != 0) {
      __CrestBranch(71600, 46004, 1);
# 4359 "xmlparse.c"
      tmp___50 = poolStoreString(& parser->m_tempPool, enc, s + enc->minBytesPerChar,
                                 next - enc->minBytesPerChar);
      __CrestClearStack(71602);
# 4359 "xmlparse.c"
      tem___0 = tmp___50;
      {
      __CrestLoad(71605, (unsigned long )(& tem___0), (long long )((unsigned long )tem___0));
      __CrestLoad(71604, (unsigned long )0, (long long )0);
      __CrestApply2(71603, 12, (long long )(tem___0 == 0));
# 4363 "xmlparse.c"
      if (tem___0 == 0) {
        __CrestBranch(71606, 46006, 1);
        __CrestLoad(71608, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71609, (unsigned long )(& __retres221));
# 4364 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4364 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71607, 46008, 0);

      }
      }
# 4365 "xmlparse.c"
      normalizePublicId(tem___0);
      __CrestClearStack(71610);
# 4366 "xmlparse.c"
      parser->m_declNotationPublicId = (XML_Char const *)tem___0;
# 4367 "xmlparse.c"
      parser->m_tempPool.start = parser->m_tempPool.ptr;
      __CrestLoad(71611, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(71612, (unsigned long )(& handleDefault));
# 4368 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(71601, 46010, 0);

    }
    }
# 4370 "xmlparse.c"
    goto switch_break___0;
    case_19:
    {
    __CrestLoad(71615, (unsigned long )(& parser->m_declNotationName), (long long )((unsigned long )parser->m_declNotationName));
    __CrestLoad(71614, (unsigned long )0, (long long )0);
    __CrestApply2(71613, 13, (long long )(parser->m_declNotationName != 0));
# 4372 "xmlparse.c"
    if (parser->m_declNotationName != 0) {
      __CrestBranch(71616, 46013, 1);
      {
      __CrestLoad(71620, (unsigned long )(& parser->m_notationDeclHandler), (long long )((unsigned long )parser->m_notationDeclHandler));
      __CrestLoad(71619, (unsigned long )0, (long long )0);
      __CrestApply2(71618, 13, (long long )(parser->m_notationDeclHandler != 0));
# 4372 "xmlparse.c"
      if (parser->m_notationDeclHandler != 0) {
        __CrestBranch(71621, 46014, 1);
# 4373 "xmlparse.c"
        tmp___51 = poolStoreString(& parser->m_tempPool, enc, s + enc->minBytesPerChar,
                                   next - enc->minBytesPerChar);
        __CrestClearStack(71623);
# 4373 "xmlparse.c"
        systemId = (XML_Char const *)tmp___51;
        {
        __CrestLoad(71626, (unsigned long )(& systemId), (long long )((unsigned long )systemId));
        __CrestLoad(71625, (unsigned long )0, (long long )0);
        __CrestApply2(71624, 12, (long long )(systemId == 0));
# 4377 "xmlparse.c"
        if (systemId == 0) {
          __CrestBranch(71627, 46016, 1);
          __CrestLoad(71629, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71630, (unsigned long )(& __retres221));
# 4378 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4378 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71628, 46018, 0);

        }
        }
# 4379 "xmlparse.c"
        *eventEndPP = s;
# 4380 "xmlparse.c"
        mem_187 = parser->m_notationDeclHandler;
# 4380 "xmlparse.c"
        (*mem_187)(parser->m_handlerArg, parser->m_declNotationName, parser->m_curBase,
                   systemId, parser->m_declNotationPublicId);
        __CrestClearStack(71631);
        __CrestLoad(71632, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71633, (unsigned long )(& handleDefault));
# 4385 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71622, 46020, 0);

      }
      }
    } else {
      __CrestBranch(71617, 46021, 0);

    }
    }
# 4387 "xmlparse.c"
    poolClear(& parser->m_tempPool);
    __CrestClearStack(71634);
# 4388 "xmlparse.c"
    goto switch_break___0;
    case_20:
    {
    __CrestLoad(71637, (unsigned long )(& parser->m_declNotationPublicId), (long long )((unsigned long )parser->m_declNotationPublicId));
    __CrestLoad(71636, (unsigned long )0, (long long )0);
    __CrestApply2(71635, 13, (long long )(parser->m_declNotationPublicId != 0));
# 4390 "xmlparse.c"
    if (parser->m_declNotationPublicId != 0) {
      __CrestBranch(71638, 46025, 1);
      {
      __CrestLoad(71642, (unsigned long )(& parser->m_notationDeclHandler), (long long )((unsigned long )parser->m_notationDeclHandler));
      __CrestLoad(71641, (unsigned long )0, (long long )0);
      __CrestApply2(71640, 13, (long long )(parser->m_notationDeclHandler != 0));
# 4390 "xmlparse.c"
      if (parser->m_notationDeclHandler != 0) {
        __CrestBranch(71643, 46026, 1);
# 4391 "xmlparse.c"
        *eventEndPP = s;
# 4392 "xmlparse.c"
        mem_188 = parser->m_notationDeclHandler;
# 4392 "xmlparse.c"
        (*mem_188)(parser->m_handlerArg, parser->m_declNotationName, parser->m_curBase,
                   (XML_Char const *)0, parser->m_declNotationPublicId);
        __CrestClearStack(71645);
        __CrestLoad(71646, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71647, (unsigned long )(& handleDefault));
# 4397 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71644, 46027, 0);

      }
      }
    } else {
      __CrestBranch(71639, 46028, 0);

    }
    }
# 4399 "xmlparse.c"
    poolClear(& parser->m_tempPool);
    __CrestClearStack(71648);
# 4400 "xmlparse.c"
    goto switch_break___0;
    case_neg_1___0:
    {
    {
    __CrestLoad(71651, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(71650, (unsigned long )0, (long long )28);
    __CrestApply2(71649, 12, (long long )(tok == 28));
# 4403 "xmlparse.c"
    if (tok == 28) {
      __CrestBranch(71652, 46033, 1);
# 4403 "xmlparse.c"
      goto case_28___0;
    } else {
      __CrestBranch(71653, 46034, 0);

    }
    }
    {
    __CrestLoad(71656, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(71655, (unsigned long )0, (long long )12);
    __CrestApply2(71654, 12, (long long )(tok == 12));
# 4407 "xmlparse.c"
    if (tok == 12) {
      __CrestBranch(71657, 46036, 1);
# 4407 "xmlparse.c"
      goto case_12___0;
    } else {
      __CrestBranch(71658, 46037, 0);

    }
    }
# 4409 "xmlparse.c"
    goto switch_default___0;
    case_28___0:
    __CrestLoad(71659, (unsigned long )0, (long long )((enum XML_Error )10));
    __CrestStore(71660, (unsigned long )(& __retres221));
# 4406 "xmlparse.c"
    __retres221 = (enum XML_Error )10;
# 4406 "xmlparse.c"
    goto return_label;
    case_12___0:
    __CrestLoad(71661, (unsigned long )0, (long long )((enum XML_Error )17));
    __CrestStore(71662, (unsigned long )(& __retres221));
# 4408 "xmlparse.c"
    __retres221 = (enum XML_Error )17;
# 4408 "xmlparse.c"
    goto return_label;
    switch_default___0:
    __CrestLoad(71663, (unsigned long )0, (long long )((enum XML_Error )2));
    __CrestStore(71664, (unsigned long )(& __retres221));
# 4410 "xmlparse.c"
    __retres221 = (enum XML_Error )2;
# 4410 "xmlparse.c"
    goto return_label;
    switch_break___1: ;
    }
    case_58:
    {
    __CrestLoad(71667, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(71666, (unsigned long )0, (long long )0);
    __CrestApply2(71665, 13, (long long )(parser->m_defaultHandler != 0));
# 4416 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(71668, 46047, 1);
# 4417 "xmlparse.c"
      reportDefault(parser, enc, s, next);
      __CrestClearStack(71670);
    } else {
      __CrestBranch(71669, 46048, 0);

    }
    }
    __CrestLoad(71671, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(71672, (unsigned long )(& handleDefault));
# 4418 "xmlparse.c"
    handleDefault = (XML_Bool )0;
    __CrestLoad(71673, (unsigned long )(& haveMore), (long long )haveMore);
# 4419 "xmlparse.c"
    result___3 = doIgnoreSection(parser, enc, & next, end, nextPtr, haveMore);
    __CrestHandleReturn(71675, (long long )result___3);
    __CrestStore(71674, (unsigned long )(& result___3));
    {
    __CrestLoad(71678, (unsigned long )(& result___3), (long long )result___3);
    __CrestLoad(71677, (unsigned long )0, (long long )0U);
    __CrestApply2(71676, 13, (long long )((unsigned int )result___3 != 0U));
# 4420 "xmlparse.c"
    if ((unsigned int )result___3 != 0U) {
      __CrestBranch(71679, 46051, 1);
      __CrestLoad(71681, (unsigned long )(& result___3), (long long )result___3);
      __CrestStore(71682, (unsigned long )(& __retres221));
# 4421 "xmlparse.c"
      __retres221 = result___3;
# 4421 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(71680, 46053, 0);
      {
      __CrestLoad(71685, (unsigned long )(& next), (long long )((unsigned long )next));
      __CrestLoad(71684, (unsigned long )0, (long long )0);
      __CrestApply2(71683, 12, (long long )(next == 0));
# 4422 "xmlparse.c"
      if (next == 0) {
        __CrestBranch(71686, 46054, 1);
# 4423 "xmlparse.c"
        parser->m_processor = & ignoreSectionProcessor;
        __CrestLoad(71688, (unsigned long )(& result___3), (long long )result___3);
        __CrestStore(71689, (unsigned long )(& __retres221));
# 4424 "xmlparse.c"
        __retres221 = result___3;
# 4424 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71687, 46057, 0);

      }
      }
    }
    }
# 4427 "xmlparse.c"
    goto switch_break___0;
    case_44:
    {
    __CrestLoad(71692, (unsigned long )(& parser->m_prologState.level), (long long )parser->m_prologState.level);
    __CrestLoad(71691, (unsigned long )(& parser->m_groupSize), (long long )parser->m_groupSize);
    __CrestApply2(71690, 17, (long long )(parser->m_prologState.level >= parser->m_groupSize));
# 4430 "xmlparse.c"
    if (parser->m_prologState.level >= parser->m_groupSize) {
      __CrestBranch(71693, 46060, 1);
      {
      __CrestLoad(71697, (unsigned long )(& parser->m_groupSize), (long long )parser->m_groupSize);
      __CrestLoad(71696, (unsigned long )0, (long long )0);
      __CrestApply2(71695, 13, (long long )(parser->m_groupSize != 0));
# 4431 "xmlparse.c"
      if (parser->m_groupSize != 0) {
        __CrestBranch(71698, 46061, 1);
        __CrestLoad(71702, (unsigned long )(& parser->m_groupSize), (long long )parser->m_groupSize);
        __CrestLoad(71701, (unsigned long )0, (long long )2U);
        __CrestApply2(71700, 2, (long long )(parser->m_groupSize * 2U));
        __CrestStore(71703, (unsigned long )(& tmp___52));
# 4432 "xmlparse.c"
        tmp___52 = parser->m_groupSize * 2U;
        __CrestLoad(71704, (unsigned long )(& tmp___52), (long long )tmp___52);
        __CrestStore(71705, (unsigned long )(& parser->m_groupSize));
# 4432 "xmlparse.c"
        parser->m_groupSize = tmp___52;
# 4432 "xmlparse.c"
        mem_189 = parser->m_mem.realloc_fcn;
        __CrestLoad(71706, (unsigned long )(& tmp___52), (long long )tmp___52);
# 4432 "xmlparse.c"
        tmp___53 = (*mem_189)((void *)parser->m_groupConnector, (size_t )tmp___52);
        __CrestClearStack(71707);
# 4432 "xmlparse.c"
        temp = (char *)tmp___53;
        {
        __CrestLoad(71710, (unsigned long )(& temp), (long long )((unsigned long )temp));
        __CrestLoad(71709, (unsigned long )0, (long long )((unsigned long )((void *)0)));
        __CrestApply2(71708, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 4433 "xmlparse.c"
        if ((unsigned long )temp == (unsigned long )((void *)0)) {
          __CrestBranch(71711, 46063, 1);
          __CrestLoad(71713, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71714, (unsigned long )(& __retres221));
# 4434 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4434 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71712, 46065, 0);

        }
        }
# 4435 "xmlparse.c"
        parser->m_groupConnector = temp;
        {
        __CrestLoad(71717, (unsigned long )(& dtd->scaffIndex), (long long )((unsigned long )dtd->scaffIndex));
        __CrestLoad(71716, (unsigned long )0, (long long )0);
        __CrestApply2(71715, 13, (long long )(dtd->scaffIndex != 0));
# 4436 "xmlparse.c"
        if (dtd->scaffIndex != 0) {
          __CrestBranch(71718, 46068, 1);
# 4437 "xmlparse.c"
          mem_190 = parser->m_mem.realloc_fcn;
          __CrestLoad(71722, (unsigned long )(& parser->m_groupSize), (long long )parser->m_groupSize);
          __CrestLoad(71721, (unsigned long )0, (long long )sizeof(int ));
          __CrestApply2(71720, 2, (long long )((unsigned long )parser->m_groupSize * sizeof(int )));
# 4437 "xmlparse.c"
          tmp___54 = (*mem_190)((void *)dtd->scaffIndex, (unsigned long )parser->m_groupSize * sizeof(int ));
          __CrestClearStack(71723);
# 4437 "xmlparse.c"
          temp___0 = (int *)tmp___54;
          {
          __CrestLoad(71726, (unsigned long )(& temp___0), (long long )((unsigned long )temp___0));
          __CrestLoad(71725, (unsigned long )0, (long long )((unsigned long )((void *)0)));
          __CrestApply2(71724, 12, (long long )((unsigned long )temp___0 == (unsigned long )((void *)0)));
# 4439 "xmlparse.c"
          if ((unsigned long )temp___0 == (unsigned long )((void *)0)) {
            __CrestBranch(71727, 46070, 1);
            __CrestLoad(71729, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(71730, (unsigned long )(& __retres221));
# 4440 "xmlparse.c"
            __retres221 = (enum XML_Error )1;
# 4440 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(71728, 46072, 0);

          }
          }
# 4441 "xmlparse.c"
          dtd->scaffIndex = temp___0;
        } else {
          __CrestBranch(71719, 46074, 0);

        }
        }
      } else {
        __CrestBranch(71699, 46075, 0);
        __CrestLoad(71731, (unsigned long )0, (long long )32U);
        __CrestStore(71732, (unsigned long )(& tmp___55));
# 4445 "xmlparse.c"
        tmp___55 = 32U;
        __CrestLoad(71733, (unsigned long )(& tmp___55), (long long )tmp___55);
        __CrestStore(71734, (unsigned long )(& parser->m_groupSize));
# 4445 "xmlparse.c"
        parser->m_groupSize = tmp___55;
# 4445 "xmlparse.c"
        mem_191 = parser->m_mem.malloc_fcn;
        __CrestLoad(71735, (unsigned long )(& tmp___55), (long long )tmp___55);
# 4445 "xmlparse.c"
        tmp___56 = (*mem_191)((size_t )tmp___55);
        __CrestClearStack(71736);
# 4445 "xmlparse.c"
        parser->m_groupConnector = (char *)tmp___56;
        {
        __CrestLoad(71739, (unsigned long )(& parser->m_groupConnector), (long long )((unsigned long )parser->m_groupConnector));
        __CrestLoad(71738, (unsigned long )0, (long long )0);
        __CrestApply2(71737, 12, (long long )(parser->m_groupConnector == 0));
# 4446 "xmlparse.c"
        if (parser->m_groupConnector == 0) {
          __CrestBranch(71740, 46077, 1);
          __CrestLoad(71742, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(71743, (unsigned long )(& __retres221));
# 4447 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4447 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71741, 46079, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(71694, 46080, 0);

    }
    }
# 4450 "xmlparse.c"
    mem_192 = parser->m_groupConnector + parser->m_prologState.level;
    __CrestLoad(71744, (unsigned long )0, (long long )(char)0);
    __CrestStore(71745, (unsigned long )mem_192);
# 4450 "xmlparse.c"
    *mem_192 = (char)0;
    {
    __CrestLoad(71748, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(71747, (unsigned long )0, (long long )0);
    __CrestApply2(71746, 13, (long long )(dtd->in_eldecl != 0));
# 4451 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(71749, 46083, 1);
# 4452 "xmlparse.c"
      tmp___57 = nextScaffoldPart(parser);
      __CrestHandleReturn(71752, (long long )tmp___57);
      __CrestStore(71751, (unsigned long )(& tmp___57));
      __CrestLoad(71753, (unsigned long )(& tmp___57), (long long )tmp___57);
      __CrestStore(71754, (unsigned long )(& myindex));
# 4452 "xmlparse.c"
      myindex = tmp___57;
      {
      __CrestLoad(71757, (unsigned long )(& myindex), (long long )myindex);
      __CrestLoad(71756, (unsigned long )0, (long long )0);
      __CrestApply2(71755, 16, (long long )(myindex < 0));
# 4453 "xmlparse.c"
      if (myindex < 0) {
        __CrestBranch(71758, 46085, 1);
        __CrestLoad(71760, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71761, (unsigned long )(& __retres221));
# 4454 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4454 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71759, 46087, 0);

      }
      }
# 4455 "xmlparse.c"
      mem_193 = dtd->scaffIndex + dtd->scaffLevel;
      __CrestLoad(71762, (unsigned long )(& myindex), (long long )myindex);
      __CrestStore(71763, (unsigned long )mem_193);
# 4455 "xmlparse.c"
      *mem_193 = myindex;
      __CrestLoad(71766, (unsigned long )(& dtd->scaffLevel), (long long )dtd->scaffLevel);
      __CrestLoad(71765, (unsigned long )0, (long long )1);
      __CrestApply2(71764, 0, (long long )(dtd->scaffLevel + 1));
      __CrestStore(71767, (unsigned long )(& dtd->scaffLevel));
# 4456 "xmlparse.c"
      (dtd->scaffLevel) ++;
# 4457 "xmlparse.c"
      mem_194 = dtd->scaffold + myindex;
      __CrestLoad(71768, (unsigned long )0, (long long )((enum XML_Content_Type )6));
      __CrestStore(71769, (unsigned long )(& mem_194->type));
# 4457 "xmlparse.c"
      mem_194->type = (enum XML_Content_Type )6;
      {
      __CrestLoad(71772, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(71771, (unsigned long )0, (long long )0);
      __CrestApply2(71770, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4458 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(71773, 46090, 1);
        __CrestLoad(71775, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71776, (unsigned long )(& handleDefault));
# 4459 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71774, 46091, 0);

      }
      }
    } else {
      __CrestBranch(71750, 46092, 0);

    }
    }
# 4461 "xmlparse.c"
    goto switch_break___0;
    case_50:
    {
# 4463 "xmlparse.c"
    mem_195 = parser->m_groupConnector + parser->m_prologState.level;
    {
    __CrestLoad(71779, (unsigned long )mem_195, (long long )*mem_195);
    __CrestLoad(71778, (unsigned long )0, (long long )124);
    __CrestApply2(71777, 12, (long long )((int )*mem_195 == 124));
# 4463 "xmlparse.c"
    if ((int )*mem_195 == 124) {
      __CrestBranch(71780, 46097, 1);
      __CrestLoad(71782, (unsigned long )0, (long long )((enum XML_Error )2));
      __CrestStore(71783, (unsigned long )(& __retres221));
# 4464 "xmlparse.c"
      __retres221 = (enum XML_Error )2;
# 4464 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(71781, 46099, 0);

    }
    }
    }
# 4465 "xmlparse.c"
    mem_196 = parser->m_groupConnector + parser->m_prologState.level;
    __CrestLoad(71784, (unsigned long )0, (long long )(char)44);
    __CrestStore(71785, (unsigned long )mem_196);
# 4465 "xmlparse.c"
    *mem_196 = (char)44;
    {
    __CrestLoad(71788, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(71787, (unsigned long )0, (long long )0);
    __CrestApply2(71786, 13, (long long )(dtd->in_eldecl != 0));
# 4466 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(71789, 46102, 1);
      {
      __CrestLoad(71793, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(71792, (unsigned long )0, (long long )0);
      __CrestApply2(71791, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4466 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(71794, 46103, 1);
        __CrestLoad(71796, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71797, (unsigned long )(& handleDefault));
# 4467 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(71795, 46104, 0);

      }
      }
    } else {
      __CrestBranch(71790, 46105, 0);

    }
    }
# 4468 "xmlparse.c"
    goto switch_break___0;
    case_49:
    {
# 4470 "xmlparse.c"
    mem_197 = parser->m_groupConnector + parser->m_prologState.level;
    {
    __CrestLoad(71800, (unsigned long )mem_197, (long long )*mem_197);
    __CrestLoad(71799, (unsigned long )0, (long long )44);
    __CrestApply2(71798, 12, (long long )((int )*mem_197 == 44));
# 4470 "xmlparse.c"
    if ((int )*mem_197 == 44) {
      __CrestBranch(71801, 46110, 1);
      __CrestLoad(71803, (unsigned long )0, (long long )((enum XML_Error )2));
      __CrestStore(71804, (unsigned long )(& __retres221));
# 4471 "xmlparse.c"
      __retres221 = (enum XML_Error )2;
# 4471 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(71802, 46112, 0);

    }
    }
    }
    {
    __CrestLoad(71807, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(71806, (unsigned long )0, (long long )0);
    __CrestApply2(71805, 13, (long long )(dtd->in_eldecl != 0));
# 4472 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(71808, 46114, 1);
      {
# 4472 "xmlparse.c"
      mem_198 = parser->m_groupConnector + parser->m_prologState.level;
      {
      __CrestLoad(71812, (unsigned long )mem_198, (long long )*mem_198);
      __CrestLoad(71811, (unsigned long )0, (long long )0);
      __CrestApply2(71810, 12, (long long )(*mem_198 == 0));
# 4472 "xmlparse.c"
      if (*mem_198 == 0) {
        __CrestBranch(71813, 46117, 1);
        {
# 4472 "xmlparse.c"
        mem_199 = dtd->scaffIndex + (dtd->scaffLevel - 1);
# 4472 "xmlparse.c"
        mem_200 = dtd->scaffold + *mem_199;
        {
        __CrestLoad(71817, (unsigned long )(& mem_200->type), (long long )mem_200->type);
        __CrestLoad(71816, (unsigned long )0, (long long )3U);
        __CrestApply2(71815, 13, (long long )((unsigned int )mem_200->type != 3U));
# 4472 "xmlparse.c"
        if ((unsigned int )mem_200->type != 3U) {
          __CrestBranch(71818, 46120, 1);
# 4477 "xmlparse.c"
          mem_201 = dtd->scaffIndex + (dtd->scaffLevel - 1);
# 4477 "xmlparse.c"
          mem_202 = dtd->scaffold + *mem_201;
          __CrestLoad(71820, (unsigned long )0, (long long )((enum XML_Content_Type )5));
          __CrestStore(71821, (unsigned long )(& mem_202->type));
# 4477 "xmlparse.c"
          mem_202->type = (enum XML_Content_Type )5;
          {
          __CrestLoad(71824, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
          __CrestLoad(71823, (unsigned long )0, (long long )0);
          __CrestApply2(71822, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4479 "xmlparse.c"
          if (parser->m_elementDeclHandler != 0) {
            __CrestBranch(71825, 46122, 1);
            __CrestLoad(71827, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(71828, (unsigned long )(& handleDefault));
# 4480 "xmlparse.c"
            handleDefault = (XML_Bool )0;
          } else {
            __CrestBranch(71826, 46123, 0);

          }
          }
        } else {
          __CrestBranch(71819, 46124, 0);

        }
        }
        }
      } else {
        __CrestBranch(71814, 46125, 0);

      }
      }
      }
    } else {
      __CrestBranch(71809, 46126, 0);

    }
    }
# 4482 "xmlparse.c"
    mem_203 = parser->m_groupConnector + parser->m_prologState.level;
    __CrestLoad(71829, (unsigned long )0, (long long )(char)124);
    __CrestStore(71830, (unsigned long )mem_203);
# 4482 "xmlparse.c"
    *mem_203 = (char)124;
# 4483 "xmlparse.c"
    goto switch_break___0;
    case_59:
    case_60:
    __CrestLoad(71831, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(71832, (unsigned long )(& dtd->hasParamEntityRefs));
# 4487 "xmlparse.c"
    dtd->hasParamEntityRefs = (XML_Bool )1;
    {
    __CrestLoad(71835, (unsigned long )(& parser->m_paramEntityParsing), (long long )parser->m_paramEntityParsing);
    __CrestLoad(71834, (unsigned long )0, (long long )0);
    __CrestApply2(71833, 12, (long long )(parser->m_paramEntityParsing == 0));
# 4488 "xmlparse.c"
    if (parser->m_paramEntityParsing == 0) {
      __CrestBranch(71836, 46131, 1);
      __CrestLoad(71838, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
      __CrestStore(71839, (unsigned long )(& dtd->keepProcessing));
# 4489 "xmlparse.c"
      dtd->keepProcessing = dtd->standalone;
    } else {
      __CrestBranch(71837, 46132, 0);
# 4493 "xmlparse.c"
      tmp___58 = poolStoreString(& dtd->pool, enc, s + enc->minBytesPerChar, next - enc->minBytesPerChar);
      __CrestClearStack(71840);
# 4493 "xmlparse.c"
      name___1 = (XML_Char const *)tmp___58;
      {
      __CrestLoad(71843, (unsigned long )(& name___1), (long long )((unsigned long )name___1));
      __CrestLoad(71842, (unsigned long )0, (long long )0);
      __CrestApply2(71841, 12, (long long )(name___1 == 0));
# 4496 "xmlparse.c"
      if (name___1 == 0) {
        __CrestBranch(71844, 46134, 1);
        __CrestLoad(71846, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(71847, (unsigned long )(& __retres221));
# 4497 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4497 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71845, 46136, 0);

      }
      }
      __CrestLoad(71848, (unsigned long )0, (long long )((size_t )0));
# 4498 "xmlparse.c"
      tmp___59 = lookup(parser, & dtd->paramEntities, name___1, (size_t )0);
      __CrestClearStack(71849);
# 4498 "xmlparse.c"
      entity___1 = (ENTITY *)tmp___59;
# 4499 "xmlparse.c"
      dtd->pool.ptr = dtd->pool.start;
      {
      __CrestLoad(71852, (unsigned long )(& parser->m_prologState.documentEntity),
                  (long long )parser->m_prologState.documentEntity);
      __CrestLoad(71851, (unsigned long )0, (long long )0);
      __CrestApply2(71850, 13, (long long )(parser->m_prologState.documentEntity != 0));
# 4504 "xmlparse.c"
      if (parser->m_prologState.documentEntity != 0) {
        __CrestBranch(71853, 46139, 1);
        {
        __CrestLoad(71857, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
        __CrestLoad(71856, (unsigned long )0, (long long )0);
        __CrestApply2(71855, 13, (long long )(dtd->standalone != 0));
# 4504 "xmlparse.c"
        if (dtd->standalone != 0) {
          __CrestBranch(71858, 46140, 1);
          __CrestLoad(71861, (unsigned long )(& parser->m_openInternalEntities), (long long )((unsigned long )parser->m_openInternalEntities));
          __CrestApply1(71860, 21, (long long )(! parser->m_openInternalEntities));
          __CrestStore(71862, (unsigned long )(& tmp___60));
# 4504 "xmlparse.c"
          tmp___60 = ! parser->m_openInternalEntities;
        } else {
          __CrestBranch(71859, 46141, 0);
          __CrestLoad(71864, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
          __CrestApply1(71863, 21, (long long )(! dtd->hasParamEntityRefs));
          __CrestStore(71865, (unsigned long )(& tmp___60));
# 4504 "xmlparse.c"
          tmp___60 = ! dtd->hasParamEntityRefs;
        }
        }
        {
        __CrestLoad(71868, (unsigned long )(& tmp___60), (long long )tmp___60);
        __CrestLoad(71867, (unsigned long )0, (long long )0);
        __CrestApply2(71866, 13, (long long )(tmp___60 != 0));
# 4504 "xmlparse.c"
        if (tmp___60 != 0) {
          __CrestBranch(71869, 46143, 1);
          {
          __CrestLoad(71873, (unsigned long )(& entity___1), (long long )((unsigned long )entity___1));
          __CrestLoad(71872, (unsigned long )0, (long long )0);
          __CrestApply2(71871, 12, (long long )(entity___1 == 0));
# 4508 "xmlparse.c"
          if (entity___1 == 0) {
            __CrestBranch(71874, 46144, 1);
            __CrestLoad(71876, (unsigned long )0, (long long )((enum XML_Error )11));
            __CrestStore(71877, (unsigned long )(& __retres221));
# 4509 "xmlparse.c"
            __retres221 = (enum XML_Error )11;
# 4509 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(71875, 46146, 0);
            {
            __CrestLoad(71880, (unsigned long )(& entity___1->is_internal), (long long )entity___1->is_internal);
            __CrestLoad(71879, (unsigned long )0, (long long )0);
            __CrestApply2(71878, 12, (long long )(entity___1->is_internal == 0));
# 4510 "xmlparse.c"
            if (entity___1->is_internal == 0) {
              __CrestBranch(71881, 46147, 1);
              __CrestLoad(71883, (unsigned long )0, (long long )((enum XML_Error )24));
              __CrestStore(71884, (unsigned long )(& __retres221));
# 4511 "xmlparse.c"
              __retres221 = (enum XML_Error )24;
# 4511 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(71882, 46149, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(71870, 46150, 0);
# 4504 "xmlparse.c"
          goto _L___3;
        }
        }
      } else {
        __CrestBranch(71854, 46151, 0);
        _L___3:
        {
        __CrestLoad(71887, (unsigned long )(& entity___1), (long long )((unsigned long )entity___1));
        __CrestLoad(71886, (unsigned long )0, (long long )0);
        __CrestApply2(71885, 12, (long long )(entity___1 == 0));
# 4513 "xmlparse.c"
        if (entity___1 == 0) {
          __CrestBranch(71888, 46152, 1);
          __CrestLoad(71890, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
          __CrestStore(71891, (unsigned long )(& dtd->keepProcessing));
# 4514 "xmlparse.c"
          dtd->keepProcessing = dtd->standalone;
          {
          __CrestLoad(71894, (unsigned long )(& role), (long long )role);
          __CrestLoad(71893, (unsigned long )0, (long long )60);
          __CrestApply2(71892, 12, (long long )(role == 60));
# 4516 "xmlparse.c"
          if (role == 60) {
            __CrestBranch(71895, 46154, 1);
            {
            __CrestLoad(71899, (unsigned long )(& parser->m_skippedEntityHandler),
                        (long long )((unsigned long )parser->m_skippedEntityHandler));
            __CrestLoad(71898, (unsigned long )0, (long long )0);
            __CrestApply2(71897, 13, (long long )(parser->m_skippedEntityHandler != 0));
# 4516 "xmlparse.c"
            if (parser->m_skippedEntityHandler != 0) {
              __CrestBranch(71900, 46155, 1);
# 4517 "xmlparse.c"
              mem_204 = parser->m_skippedEntityHandler;
              __CrestLoad(71902, (unsigned long )0, (long long )1);
# 4517 "xmlparse.c"
              (*mem_204)(parser->m_handlerArg, name___1, 1);
              __CrestClearStack(71903);
              __CrestLoad(71904, (unsigned long )0, (long long )((XML_Bool )0));
              __CrestStore(71905, (unsigned long )(& handleDefault));
# 4518 "xmlparse.c"
              handleDefault = (XML_Bool )0;
            } else {
              __CrestBranch(71901, 46156, 0);

            }
            }
          } else {
            __CrestBranch(71896, 46157, 0);

          }
          }
# 4520 "xmlparse.c"
          goto switch_break___0;
        } else {
          __CrestBranch(71889, 46159, 0);

        }
        }
      }
      }
      {
      __CrestLoad(71908, (unsigned long )(& entity___1->open), (long long )entity___1->open);
      __CrestLoad(71907, (unsigned long )0, (long long )0);
      __CrestApply2(71906, 13, (long long )(entity___1->open != 0));
# 4522 "xmlparse.c"
      if (entity___1->open != 0) {
        __CrestBranch(71909, 46161, 1);
        __CrestLoad(71911, (unsigned long )0, (long long )((enum XML_Error )12));
        __CrestStore(71912, (unsigned long )(& __retres221));
# 4523 "xmlparse.c"
        __retres221 = (enum XML_Error )12;
# 4523 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(71910, 46163, 0);

      }
      }
      {
      __CrestLoad(71915, (unsigned long )(& entity___1->textPtr), (long long )((unsigned long )entity___1->textPtr));
      __CrestLoad(71914, (unsigned long )0, (long long )0);
      __CrestApply2(71913, 13, (long long )(entity___1->textPtr != 0));
# 4524 "xmlparse.c"
      if (entity___1->textPtr != 0) {
        __CrestBranch(71916, 46165, 1);
        {
        __CrestLoad(71920, (unsigned long )(& role), (long long )role);
        __CrestLoad(71919, (unsigned long )0, (long long )60);
        __CrestApply2(71918, 12, (long long )(role == 60));
# 4526 "xmlparse.c"
        if (role == 60) {
          __CrestBranch(71921, 46166, 1);
          __CrestLoad(71923, (unsigned long )0, (long long )((int )((XML_Bool )1)));
          __CrestStore(71924, (unsigned long )(& tmp___61));
# 4526 "xmlparse.c"
          tmp___61 = (int )((XML_Bool )1);
        } else {
          __CrestBranch(71922, 46167, 0);
          __CrestLoad(71925, (unsigned long )0, (long long )((int )((XML_Bool )0)));
          __CrestStore(71926, (unsigned long )(& tmp___61));
# 4526 "xmlparse.c"
          tmp___61 = (int )((XML_Bool )0);
        }
        }
        __CrestLoad(71927, (unsigned long )(& tmp___61), (long long )tmp___61);
        __CrestStore(71928, (unsigned long )(& betweenDecl));
# 4526 "xmlparse.c"
        betweenDecl = (XML_Bool )tmp___61;
        __CrestLoad(71929, (unsigned long )(& betweenDecl), (long long )betweenDecl);
# 4528 "xmlparse.c"
        result___4 = processInternalEntity(parser, entity___1, betweenDecl);
        __CrestHandleReturn(71931, (long long )result___4);
        __CrestStore(71930, (unsigned long )(& result___4));
        {
        __CrestLoad(71934, (unsigned long )(& result___4), (long long )result___4);
        __CrestLoad(71933, (unsigned long )0, (long long )0U);
        __CrestApply2(71932, 13, (long long )((unsigned int )result___4 != 0U));
# 4529 "xmlparse.c"
        if ((unsigned int )result___4 != 0U) {
          __CrestBranch(71935, 46170, 1);
          __CrestLoad(71937, (unsigned long )(& result___4), (long long )result___4);
          __CrestStore(71938, (unsigned long )(& __retres221));
# 4530 "xmlparse.c"
          __retres221 = result___4;
# 4530 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(71936, 46172, 0);

        }
        }
        __CrestLoad(71939, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71940, (unsigned long )(& handleDefault));
# 4531 "xmlparse.c"
        handleDefault = (XML_Bool )0;
# 4532 "xmlparse.c"
        goto switch_break___0;
      } else {
        __CrestBranch(71917, 46175, 0);

      }
      }
      {
      __CrestLoad(71943, (unsigned long )(& parser->m_externalEntityRefHandler), (long long )((unsigned long )parser->m_externalEntityRefHandler));
      __CrestLoad(71942, (unsigned long )0, (long long )0);
      __CrestApply2(71941, 13, (long long )(parser->m_externalEntityRefHandler != 0));
# 4534 "xmlparse.c"
      if (parser->m_externalEntityRefHandler != 0) {
        __CrestBranch(71944, 46177, 1);
        __CrestLoad(71946, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71947, (unsigned long )(& dtd->paramEntityRead));
# 4535 "xmlparse.c"
        dtd->paramEntityRead = (XML_Bool )0;
        __CrestLoad(71948, (unsigned long )0, (long long )((XML_Bool )1));
        __CrestStore(71949, (unsigned long )(& entity___1->open));
# 4536 "xmlparse.c"
        entity___1->open = (XML_Bool )1;
# 4537 "xmlparse.c"
        mem_205 = parser->m_externalEntityRefHandler;
# 4537 "xmlparse.c"
        tmp___62 = (*mem_205)(parser->m_externalEntityRefHandlerArg, (XML_Char const *)0,
                              entity___1->base, entity___1->systemId, entity___1->publicId);
        __CrestHandleReturn(71951, (long long )tmp___62);
        __CrestStore(71950, (unsigned long )(& tmp___62));
        {
        __CrestLoad(71954, (unsigned long )(& tmp___62), (long long )tmp___62);
        __CrestLoad(71953, (unsigned long )0, (long long )0);
        __CrestApply2(71952, 13, (long long )(tmp___62 != 0));
# 4537 "xmlparse.c"
        if (tmp___62 != 0) {
          __CrestBranch(71955, 46179, 1);

        } else {
          __CrestBranch(71956, 46180, 0);
          __CrestLoad(71957, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(71958, (unsigned long )(& entity___1->open));
# 4542 "xmlparse.c"
          entity___1->open = (XML_Bool )0;
          __CrestLoad(71959, (unsigned long )0, (long long )((enum XML_Error )21));
          __CrestStore(71960, (unsigned long )(& __retres221));
# 4543 "xmlparse.c"
          __retres221 = (enum XML_Error )21;
# 4543 "xmlparse.c"
          goto return_label;
        }
        }
        __CrestLoad(71961, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71962, (unsigned long )(& entity___1->open));
# 4545 "xmlparse.c"
        entity___1->open = (XML_Bool )0;
        __CrestLoad(71963, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(71964, (unsigned long )(& handleDefault));
# 4546 "xmlparse.c"
        handleDefault = (XML_Bool )0;
        {
        __CrestLoad(71967, (unsigned long )(& dtd->paramEntityRead), (long long )dtd->paramEntityRead);
        __CrestLoad(71966, (unsigned long )0, (long long )0);
        __CrestApply2(71965, 12, (long long )(dtd->paramEntityRead == 0));
# 4547 "xmlparse.c"
        if (dtd->paramEntityRead == 0) {
          __CrestBranch(71968, 46185, 1);
          __CrestLoad(71970, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
          __CrestStore(71971, (unsigned long )(& dtd->keepProcessing));
# 4548 "xmlparse.c"
          dtd->keepProcessing = dtd->standalone;
# 4549 "xmlparse.c"
          goto switch_break___0;
        } else {
          __CrestBranch(71969, 46187, 0);

        }
        }
      } else {
        __CrestBranch(71945, 46188, 0);
        __CrestLoad(71972, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
        __CrestStore(71973, (unsigned long )(& dtd->keepProcessing));
# 4553 "xmlparse.c"
        dtd->keepProcessing = dtd->standalone;
# 4554 "xmlparse.c"
        goto switch_break___0;
      }
      }
    }
    }
    {
    __CrestLoad(71976, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
    __CrestLoad(71975, (unsigned long )0, (long long )0);
    __CrestApply2(71974, 12, (long long )(dtd->standalone == 0));
# 4558 "xmlparse.c"
    if (dtd->standalone == 0) {
      __CrestBranch(71977, 46191, 1);
      {
      __CrestLoad(71981, (unsigned long )(& parser->m_notStandaloneHandler), (long long )((unsigned long )parser->m_notStandaloneHandler));
      __CrestLoad(71980, (unsigned long )0, (long long )0);
      __CrestApply2(71979, 13, (long long )(parser->m_notStandaloneHandler != 0));
# 4558 "xmlparse.c"
      if (parser->m_notStandaloneHandler != 0) {
        __CrestBranch(71982, 46192, 1);
# 4558 "xmlparse.c"
        mem_206 = parser->m_notStandaloneHandler;
# 4558 "xmlparse.c"
        tmp___63 = (*mem_206)(parser->m_handlerArg);
        __CrestHandleReturn(71985, (long long )tmp___63);
        __CrestStore(71984, (unsigned long )(& tmp___63));
        {
        __CrestLoad(71988, (unsigned long )(& tmp___63), (long long )tmp___63);
        __CrestLoad(71987, (unsigned long )0, (long long )0);
        __CrestApply2(71986, 13, (long long )(tmp___63 != 0));
# 4558 "xmlparse.c"
        if (tmp___63 != 0) {
          __CrestBranch(71989, 46194, 1);

        } else {
          __CrestBranch(71990, 46195, 0);
          __CrestLoad(71991, (unsigned long )0, (long long )((enum XML_Error )22));
          __CrestStore(71992, (unsigned long )(& __retres221));
# 4561 "xmlparse.c"
          __retres221 = (enum XML_Error )22;
# 4561 "xmlparse.c"
          goto return_label;
        }
        }
      } else {
        __CrestBranch(71983, 46197, 0);

      }
      }
    } else {
      __CrestBranch(71978, 46198, 0);

    }
    }
# 4562 "xmlparse.c"
    goto switch_break___0;
    case_40:
    {
    __CrestLoad(71995, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
    __CrestLoad(71994, (unsigned long )0, (long long )0);
    __CrestApply2(71993, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4567 "xmlparse.c"
    if (parser->m_elementDeclHandler != 0) {
      __CrestBranch(71996, 46201, 1);
# 4568 "xmlparse.c"
      parser->m_declElementType = getElementType(parser, enc, s, next);
      __CrestClearStack(71998);
      {
      __CrestLoad(72001, (unsigned long )(& parser->m_declElementType), (long long )((unsigned long )parser->m_declElementType));
      __CrestLoad(72000, (unsigned long )0, (long long )0);
      __CrestApply2(71999, 12, (long long )(parser->m_declElementType == 0));
# 4569 "xmlparse.c"
      if (parser->m_declElementType == 0) {
        __CrestBranch(72002, 46203, 1);
        __CrestLoad(72004, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(72005, (unsigned long )(& __retres221));
# 4570 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4570 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72003, 46205, 0);

      }
      }
      __CrestLoad(72006, (unsigned long )0, (long long )0);
      __CrestStore(72007, (unsigned long )(& dtd->scaffLevel));
# 4571 "xmlparse.c"
      dtd->scaffLevel = 0;
      __CrestLoad(72008, (unsigned long )0, (long long )0U);
      __CrestStore(72009, (unsigned long )(& dtd->scaffCount));
# 4572 "xmlparse.c"
      dtd->scaffCount = 0U;
      __CrestLoad(72010, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(72011, (unsigned long )(& dtd->in_eldecl));
# 4573 "xmlparse.c"
      dtd->in_eldecl = (XML_Bool )1;
      __CrestLoad(72012, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72013, (unsigned long )(& handleDefault));
# 4574 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(71997, 46207, 0);

    }
    }
# 4576 "xmlparse.c"
    goto switch_break___0;
    case_42:
    case_41:
    {
    __CrestLoad(72016, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(72015, (unsigned long )0, (long long )0);
    __CrestApply2(72014, 13, (long long )(dtd->in_eldecl != 0));
# 4580 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(72017, 46210, 1);
      {
      __CrestLoad(72021, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(72020, (unsigned long )0, (long long )0);
      __CrestApply2(72019, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4581 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(72022, 46211, 1);
# 4582 "xmlparse.c"
        mem_207 = parser->m_mem.malloc_fcn;
        __CrestLoad(72024, (unsigned long )0, (long long )sizeof(XML_Content ));
# 4582 "xmlparse.c"
        tmp___64 = (*mem_207)(sizeof(XML_Content ));
        __CrestClearStack(72025);
# 4582 "xmlparse.c"
        content = (XML_Content *)tmp___64;
        {
        __CrestLoad(72028, (unsigned long )(& content), (long long )((unsigned long )content));
        __CrestLoad(72027, (unsigned long )0, (long long )0);
        __CrestApply2(72026, 12, (long long )(content == 0));
# 4583 "xmlparse.c"
        if (content == 0) {
          __CrestBranch(72029, 46213, 1);
          __CrestLoad(72031, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(72032, (unsigned long )(& __retres221));
# 4584 "xmlparse.c"
          __retres221 = (enum XML_Error )1;
# 4584 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(72030, 46215, 0);

        }
        }
        __CrestLoad(72033, (unsigned long )0, (long long )((enum XML_Content_Quant )0));
        __CrestStore(72034, (unsigned long )(& content->quant));
# 4585 "xmlparse.c"
        content->quant = (enum XML_Content_Quant )0;
# 4586 "xmlparse.c"
        content->name = (XML_Char *)((void *)0);
        __CrestLoad(72035, (unsigned long )0, (long long )0U);
        __CrestStore(72036, (unsigned long )(& content->numchildren));
# 4587 "xmlparse.c"
        content->numchildren = 0U;
# 4588 "xmlparse.c"
        content->children = (XML_Content *)((void *)0);
        {
        __CrestLoad(72039, (unsigned long )(& role), (long long )role);
        __CrestLoad(72038, (unsigned long )0, (long long )41);
        __CrestApply2(72037, 12, (long long )(role == 41));
# 4589 "xmlparse.c"
        if (role == 41) {
          __CrestBranch(72040, 46218, 1);
          __CrestLoad(72042, (unsigned long )0, (long long )((enum XML_Content_Type )2));
          __CrestStore(72043, (unsigned long )(& content->type));
# 4589 "xmlparse.c"
          content->type = (enum XML_Content_Type )2;
        } else {
          __CrestBranch(72041, 46219, 0);
          __CrestLoad(72044, (unsigned long )0, (long long )((enum XML_Content_Type )1));
          __CrestStore(72045, (unsigned long )(& content->type));
# 4589 "xmlparse.c"
          content->type = (enum XML_Content_Type )1;
        }
        }
# 4592 "xmlparse.c"
        *eventEndPP = s;
# 4593 "xmlparse.c"
        mem_208 = parser->m_elementDeclHandler;
# 4593 "xmlparse.c"
        mem_209 = parser->m_declElementType;
# 4593 "xmlparse.c"
        (*mem_208)(parser->m_handlerArg, mem_209->name, content);
        __CrestClearStack(72046);
        __CrestLoad(72047, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72048, (unsigned long )(& handleDefault));
# 4594 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72023, 46221, 0);

      }
      }
      __CrestLoad(72049, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72050, (unsigned long )(& dtd->in_eldecl));
# 4596 "xmlparse.c"
      dtd->in_eldecl = (XML_Bool )0;
    } else {
      __CrestBranch(72018, 46223, 0);

    }
    }
# 4598 "xmlparse.c"
    goto switch_break___0;
    case_43:
    {
    __CrestLoad(72053, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(72052, (unsigned long )0, (long long )0);
    __CrestApply2(72051, 13, (long long )(dtd->in_eldecl != 0));
# 4601 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(72054, 46226, 1);
# 4602 "xmlparse.c"
      mem_210 = dtd->scaffIndex + (dtd->scaffLevel - 1);
# 4602 "xmlparse.c"
      mem_211 = dtd->scaffold + *mem_210;
      __CrestLoad(72056, (unsigned long )0, (long long )((enum XML_Content_Type )3));
      __CrestStore(72057, (unsigned long )(& mem_211->type));
# 4602 "xmlparse.c"
      mem_211->type = (enum XML_Content_Type )3;
      {
      __CrestLoad(72060, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(72059, (unsigned long )0, (long long )0);
      __CrestApply2(72058, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4604 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(72061, 46228, 1);
        __CrestLoad(72063, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72064, (unsigned long )(& handleDefault));
# 4605 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72062, 46229, 0);

      }
      }
    } else {
      __CrestBranch(72055, 46230, 0);

    }
    }
# 4607 "xmlparse.c"
    goto switch_break___0;
    case_51:
    __CrestLoad(72065, (unsigned long )0, (long long )((enum XML_Content_Quant )0));
    __CrestStore(72066, (unsigned long )(& quant));
# 4610 "xmlparse.c"
    quant = (enum XML_Content_Quant )0;
# 4611 "xmlparse.c"
    goto elementContent;
    case_53:
    __CrestLoad(72067, (unsigned long )0, (long long )((enum XML_Content_Quant )1));
    __CrestStore(72068, (unsigned long )(& quant));
# 4613 "xmlparse.c"
    quant = (enum XML_Content_Quant )1;
# 4614 "xmlparse.c"
    goto elementContent;
    case_52:
    __CrestLoad(72069, (unsigned long )0, (long long )((enum XML_Content_Quant )2));
    __CrestStore(72070, (unsigned long )(& quant));
# 4616 "xmlparse.c"
    quant = (enum XML_Content_Quant )2;
# 4617 "xmlparse.c"
    goto elementContent;
    case_54:
    __CrestLoad(72071, (unsigned long )0, (long long )((enum XML_Content_Quant )3));
    __CrestStore(72072, (unsigned long )(& quant));
# 4619 "xmlparse.c"
    quant = (enum XML_Content_Quant )3;
    elementContent:
    {
    __CrestLoad(72075, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(72074, (unsigned long )0, (long long )0);
    __CrestApply2(72073, 13, (long long )(dtd->in_eldecl != 0));
# 4621 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(72076, 46240, 1);
      {
      __CrestLoad(72080, (unsigned long )(& quant), (long long )quant);
      __CrestLoad(72079, (unsigned long )0, (long long )0U);
      __CrestApply2(72078, 12, (long long )((unsigned int )quant == 0U));
# 4625 "xmlparse.c"
      if ((unsigned int )quant == 0U) {
        __CrestBranch(72081, 46241, 1);
# 4625 "xmlparse.c"
        tmp___65 = next;
      } else {
        __CrestBranch(72082, 46242, 0);
# 4625 "xmlparse.c"
        tmp___65 = next - enc->minBytesPerChar;
      }
      }
# 4625 "xmlparse.c"
      nxt = tmp___65;
# 4628 "xmlparse.c"
      tmp___66 = nextScaffoldPart(parser);
      __CrestHandleReturn(72084, (long long )tmp___66);
      __CrestStore(72083, (unsigned long )(& tmp___66));
      __CrestLoad(72085, (unsigned long )(& tmp___66), (long long )tmp___66);
      __CrestStore(72086, (unsigned long )(& myindex___0));
# 4628 "xmlparse.c"
      myindex___0 = tmp___66;
      {
      __CrestLoad(72089, (unsigned long )(& myindex___0), (long long )myindex___0);
      __CrestLoad(72088, (unsigned long )0, (long long )0);
      __CrestApply2(72087, 16, (long long )(myindex___0 < 0));
# 4629 "xmlparse.c"
      if (myindex___0 < 0) {
        __CrestBranch(72090, 46245, 1);
        __CrestLoad(72092, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(72093, (unsigned long )(& __retres221));
# 4630 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4630 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72091, 46247, 0);

      }
      }
# 4631 "xmlparse.c"
      mem_212 = dtd->scaffold + myindex___0;
      __CrestLoad(72094, (unsigned long )0, (long long )((enum XML_Content_Type )4));
      __CrestStore(72095, (unsigned long )(& mem_212->type));
# 4631 "xmlparse.c"
      mem_212->type = (enum XML_Content_Type )4;
# 4632 "xmlparse.c"
      mem_213 = dtd->scaffold + myindex___0;
      __CrestLoad(72096, (unsigned long )(& quant), (long long )quant);
      __CrestStore(72097, (unsigned long )(& mem_213->quant));
# 4632 "xmlparse.c"
      mem_213->quant = quant;
# 4633 "xmlparse.c"
      el = getElementType(parser, enc, s, nxt);
      __CrestClearStack(72098);
      {
      __CrestLoad(72101, (unsigned long )(& el), (long long )((unsigned long )el));
      __CrestLoad(72100, (unsigned long )0, (long long )0);
      __CrestApply2(72099, 12, (long long )(el == 0));
# 4634 "xmlparse.c"
      if (el == 0) {
        __CrestBranch(72102, 46250, 1);
        __CrestLoad(72104, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(72105, (unsigned long )(& __retres221));
# 4635 "xmlparse.c"
        __retres221 = (enum XML_Error )1;
# 4635 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72103, 46252, 0);

      }
      }
# 4636 "xmlparse.c"
      name___2 = el->name;
# 4637 "xmlparse.c"
      mem_214 = dtd->scaffold + myindex___0;
# 4637 "xmlparse.c"
      mem_214->name = name___2;
      __CrestLoad(72106, (unsigned long )0, (long long )0);
      __CrestStore(72107, (unsigned long )(& nameLen));
# 4638 "xmlparse.c"
      nameLen = 0;
      {
# 4639 "xmlparse.c"
      while (1) {
        while_continue___0: ;
        __CrestLoad(72108, (unsigned long )(& nameLen), (long long )nameLen);
        __CrestStore(72109, (unsigned long )(& tmp___67));
# 4639 "xmlparse.c"
        tmp___67 = nameLen;
        __CrestLoad(72112, (unsigned long )(& nameLen), (long long )nameLen);
        __CrestLoad(72111, (unsigned long )0, (long long )1);
        __CrestApply2(72110, 0, (long long )(nameLen + 1));
        __CrestStore(72113, (unsigned long )(& nameLen));
# 4639 "xmlparse.c"
        nameLen ++;
        {
# 4639 "xmlparse.c"
        mem_215 = name___2 + tmp___67;
        {
        __CrestLoad(72116, (unsigned long )mem_215, (long long )*mem_215);
        __CrestLoad(72115, (unsigned long )0, (long long )0);
        __CrestApply2(72114, 13, (long long )(*mem_215 != 0));
# 4639 "xmlparse.c"
        if (*mem_215 != 0) {
          __CrestBranch(72117, 46261, 1);

        } else {
          __CrestBranch(72118, 46262, 0);
# 4639 "xmlparse.c"
          goto while_break___0;
        }
        }
        }
      }
      while_break___0: ;
      }
      __CrestLoad(72121, (unsigned long )(& dtd->contentStringLen), (long long )dtd->contentStringLen);
      __CrestLoad(72120, (unsigned long )(& nameLen), (long long )nameLen);
      __CrestApply2(72119, 0, (long long )(dtd->contentStringLen + (unsigned int )nameLen));
      __CrestStore(72122, (unsigned long )(& dtd->contentStringLen));
# 4640 "xmlparse.c"
      dtd->contentStringLen += (unsigned int )nameLen;
      {
      __CrestLoad(72125, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(72124, (unsigned long )0, (long long )0);
      __CrestApply2(72123, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4641 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(72126, 46266, 1);
        __CrestLoad(72128, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72129, (unsigned long )(& handleDefault));
# 4642 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72127, 46267, 0);

      }
      }
    } else {
      __CrestBranch(72077, 46268, 0);

    }
    }
# 4644 "xmlparse.c"
    goto switch_break___0;
    case_45:
    __CrestLoad(72130, (unsigned long )0, (long long )((enum XML_Content_Quant )0));
    __CrestStore(72131, (unsigned long )(& quant));
# 4647 "xmlparse.c"
    quant = (enum XML_Content_Quant )0;
# 4648 "xmlparse.c"
    goto closeGroup;
    case_47:
    __CrestLoad(72132, (unsigned long )0, (long long )((enum XML_Content_Quant )1));
    __CrestStore(72133, (unsigned long )(& quant));
# 4650 "xmlparse.c"
    quant = (enum XML_Content_Quant )1;
# 4651 "xmlparse.c"
    goto closeGroup;
    case_46:
    __CrestLoad(72134, (unsigned long )0, (long long )((enum XML_Content_Quant )2));
    __CrestStore(72135, (unsigned long )(& quant));
# 4653 "xmlparse.c"
    quant = (enum XML_Content_Quant )2;
# 4654 "xmlparse.c"
    goto closeGroup;
    case_48:
    __CrestLoad(72136, (unsigned long )0, (long long )((enum XML_Content_Quant )3));
    __CrestStore(72137, (unsigned long )(& quant));
# 4656 "xmlparse.c"
    quant = (enum XML_Content_Quant )3;
    closeGroup:
    {
    __CrestLoad(72140, (unsigned long )(& dtd->in_eldecl), (long long )dtd->in_eldecl);
    __CrestLoad(72139, (unsigned long )0, (long long )0);
    __CrestApply2(72138, 13, (long long )(dtd->in_eldecl != 0));
# 4658 "xmlparse.c"
    if (dtd->in_eldecl != 0) {
      __CrestBranch(72141, 46278, 1);
      {
      __CrestLoad(72145, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
      __CrestLoad(72144, (unsigned long )0, (long long )0);
      __CrestApply2(72143, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4659 "xmlparse.c"
      if (parser->m_elementDeclHandler != 0) {
        __CrestBranch(72146, 46279, 1);
        __CrestLoad(72148, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72149, (unsigned long )(& handleDefault));
# 4660 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72147, 46280, 0);

      }
      }
      __CrestLoad(72152, (unsigned long )(& dtd->scaffLevel), (long long )dtd->scaffLevel);
      __CrestLoad(72151, (unsigned long )0, (long long )1);
      __CrestApply2(72150, 1, (long long )(dtd->scaffLevel - 1));
      __CrestStore(72153, (unsigned long )(& dtd->scaffLevel));
# 4661 "xmlparse.c"
      (dtd->scaffLevel) --;
# 4662 "xmlparse.c"
      mem_216 = dtd->scaffIndex + dtd->scaffLevel;
# 4662 "xmlparse.c"
      mem_217 = dtd->scaffold + *mem_216;
      __CrestLoad(72154, (unsigned long )(& quant), (long long )quant);
      __CrestStore(72155, (unsigned long )(& mem_217->quant));
# 4662 "xmlparse.c"
      mem_217->quant = quant;
      {
      __CrestLoad(72158, (unsigned long )(& dtd->scaffLevel), (long long )dtd->scaffLevel);
      __CrestLoad(72157, (unsigned long )0, (long long )0);
      __CrestApply2(72156, 12, (long long )(dtd->scaffLevel == 0));
# 4663 "xmlparse.c"
      if (dtd->scaffLevel == 0) {
        __CrestBranch(72159, 46283, 1);
        {
        __CrestLoad(72163, (unsigned long )(& handleDefault), (long long )handleDefault);
        __CrestLoad(72162, (unsigned long )0, (long long )0);
        __CrestApply2(72161, 12, (long long )(handleDefault == 0));
# 4664 "xmlparse.c"
        if (handleDefault == 0) {
          __CrestBranch(72164, 46284, 1);
# 4665 "xmlparse.c"
          tmp___68 = build_model(parser);
          __CrestClearStack(72166);
# 4665 "xmlparse.c"
          model = tmp___68;
          {
          __CrestLoad(72169, (unsigned long )(& model), (long long )((unsigned long )model));
          __CrestLoad(72168, (unsigned long )0, (long long )0);
          __CrestApply2(72167, 12, (long long )(model == 0));
# 4666 "xmlparse.c"
          if (model == 0) {
            __CrestBranch(72170, 46286, 1);
            __CrestLoad(72172, (unsigned long )0, (long long )((enum XML_Error )1));
            __CrestStore(72173, (unsigned long )(& __retres221));
# 4667 "xmlparse.c"
            __retres221 = (enum XML_Error )1;
# 4667 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(72171, 46288, 0);

          }
          }
# 4668 "xmlparse.c"
          *eventEndPP = s;
# 4669 "xmlparse.c"
          mem_218 = parser->m_elementDeclHandler;
# 4669 "xmlparse.c"
          mem_219 = parser->m_declElementType;
# 4669 "xmlparse.c"
          (*mem_218)(parser->m_handlerArg, mem_219->name, model);
          __CrestClearStack(72174);
        } else {
          __CrestBranch(72165, 46290, 0);

        }
        }
        __CrestLoad(72175, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72176, (unsigned long )(& dtd->in_eldecl));
# 4671 "xmlparse.c"
        dtd->in_eldecl = (XML_Bool )0;
        __CrestLoad(72177, (unsigned long )0, (long long )0U);
        __CrestStore(72178, (unsigned long )(& dtd->contentStringLen));
# 4672 "xmlparse.c"
        dtd->contentStringLen = 0U;
      } else {
        __CrestBranch(72160, 46292, 0);

      }
      }
    } else {
      __CrestBranch(72142, 46293, 0);

    }
    }
# 4675 "xmlparse.c"
    goto switch_break___0;
    case_55:
# 4679 "xmlparse.c"
    tmp___69 = reportProcessingInstruction(parser, enc, s, next);
    __CrestHandleReturn(72180, (long long )tmp___69);
    __CrestStore(72179, (unsigned long )(& tmp___69));
    {
    __CrestLoad(72183, (unsigned long )(& tmp___69), (long long )tmp___69);
    __CrestLoad(72182, (unsigned long )0, (long long )0);
    __CrestApply2(72181, 13, (long long )(tmp___69 != 0));
# 4679 "xmlparse.c"
    if (tmp___69 != 0) {
      __CrestBranch(72184, 46297, 1);

    } else {
      __CrestBranch(72185, 46298, 0);
      __CrestLoad(72186, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72187, (unsigned long )(& __retres221));
# 4680 "xmlparse.c"
      __retres221 = (enum XML_Error )1;
# 4680 "xmlparse.c"
      goto return_label;
    }
    }
    __CrestLoad(72188, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(72189, (unsigned long )(& handleDefault));
# 4681 "xmlparse.c"
    handleDefault = (XML_Bool )0;
# 4682 "xmlparse.c"
    goto switch_break___0;
    case_56:
# 4684 "xmlparse.c"
    tmp___70 = reportComment(parser, enc, s, next);
    __CrestHandleReturn(72191, (long long )tmp___70);
    __CrestStore(72190, (unsigned long )(& tmp___70));
    {
    __CrestLoad(72194, (unsigned long )(& tmp___70), (long long )tmp___70);
    __CrestLoad(72193, (unsigned long )0, (long long )0);
    __CrestApply2(72192, 13, (long long )(tmp___70 != 0));
# 4684 "xmlparse.c"
    if (tmp___70 != 0) {
      __CrestBranch(72195, 46304, 1);

    } else {
      __CrestBranch(72196, 46305, 0);
      __CrestLoad(72197, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72198, (unsigned long )(& __retres221));
# 4685 "xmlparse.c"
      __retres221 = (enum XML_Error )1;
# 4685 "xmlparse.c"
      goto return_label;
    }
    }
    __CrestLoad(72199, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(72200, (unsigned long )(& handleDefault));
# 4686 "xmlparse.c"
    handleDefault = (XML_Bool )0;
# 4687 "xmlparse.c"
    goto switch_break___0;
    case_0___0:
    {
    {
    __CrestLoad(72203, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72202, (unsigned long )0, (long long )14);
    __CrestApply2(72201, 12, (long long )(tok == 14));
# 4690 "xmlparse.c"
    if (tok == 14) {
      __CrestBranch(72204, 46311, 1);
# 4690 "xmlparse.c"
      goto case_14___0;
    } else {
      __CrestBranch(72205, 46312, 0);

    }
    }
# 4689 "xmlparse.c"
    goto switch_break___2;
    case_14___0:
    __CrestLoad(72206, (unsigned long )0, (long long )((XML_Bool )0));
    __CrestStore(72207, (unsigned long )(& handleDefault));
# 4691 "xmlparse.c"
    handleDefault = (XML_Bool )0;
# 4692 "xmlparse.c"
    goto switch_break___2;
    switch_break___2: ;
    }
# 4694 "xmlparse.c"
    goto switch_break___0;
    case_3:
    {
    __CrestLoad(72210, (unsigned long )(& parser->m_startDoctypeDeclHandler), (long long )((unsigned long )parser->m_startDoctypeDeclHandler));
    __CrestLoad(72209, (unsigned long )0, (long long )0);
    __CrestApply2(72208, 13, (long long )(parser->m_startDoctypeDeclHandler != 0));
# 4696 "xmlparse.c"
    if (parser->m_startDoctypeDeclHandler != 0) {
      __CrestBranch(72211, 46319, 1);
      __CrestLoad(72213, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72214, (unsigned long )(& handleDefault));
# 4697 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(72212, 46320, 0);

    }
    }
# 4698 "xmlparse.c"
    goto switch_break___0;
    case_11:
    {
    __CrestLoad(72217, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(72216, (unsigned long )0, (long long )0);
    __CrestApply2(72215, 13, (long long )(dtd->keepProcessing != 0));
# 4700 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(72218, 46323, 1);
      {
      __CrestLoad(72222, (unsigned long )(& parser->m_entityDeclHandler), (long long )((unsigned long )parser->m_entityDeclHandler));
      __CrestLoad(72221, (unsigned long )0, (long long )0);
      __CrestApply2(72220, 13, (long long )(parser->m_entityDeclHandler != 0));
# 4700 "xmlparse.c"
      if (parser->m_entityDeclHandler != 0) {
        __CrestBranch(72223, 46324, 1);
        __CrestLoad(72225, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72226, (unsigned long )(& handleDefault));
# 4701 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72224, 46325, 0);

      }
      }
    } else {
      __CrestBranch(72219, 46326, 0);

    }
    }
# 4702 "xmlparse.c"
    goto switch_break___0;
    case_17:
    {
    __CrestLoad(72229, (unsigned long )(& parser->m_notationDeclHandler), (long long )((unsigned long )parser->m_notationDeclHandler));
    __CrestLoad(72228, (unsigned long )0, (long long )0);
    __CrestApply2(72227, 13, (long long )(parser->m_notationDeclHandler != 0));
# 4704 "xmlparse.c"
    if (parser->m_notationDeclHandler != 0) {
      __CrestBranch(72230, 46329, 1);
      __CrestLoad(72232, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72233, (unsigned long )(& handleDefault));
# 4705 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(72231, 46330, 0);

    }
    }
# 4706 "xmlparse.c"
    goto switch_break___0;
    case_33:
    {
    __CrestLoad(72236, (unsigned long )(& dtd->keepProcessing), (long long )dtd->keepProcessing);
    __CrestLoad(72235, (unsigned long )0, (long long )0);
    __CrestApply2(72234, 13, (long long )(dtd->keepProcessing != 0));
# 4708 "xmlparse.c"
    if (dtd->keepProcessing != 0) {
      __CrestBranch(72237, 46333, 1);
      {
      __CrestLoad(72241, (unsigned long )(& parser->m_attlistDeclHandler), (long long )((unsigned long )parser->m_attlistDeclHandler));
      __CrestLoad(72240, (unsigned long )0, (long long )0);
      __CrestApply2(72239, 13, (long long )(parser->m_attlistDeclHandler != 0));
# 4708 "xmlparse.c"
      if (parser->m_attlistDeclHandler != 0) {
        __CrestBranch(72242, 46334, 1);
        __CrestLoad(72244, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72245, (unsigned long )(& handleDefault));
# 4709 "xmlparse.c"
        handleDefault = (XML_Bool )0;
      } else {
        __CrestBranch(72243, 46335, 0);

      }
      }
    } else {
      __CrestBranch(72238, 46336, 0);

    }
    }
# 4710 "xmlparse.c"
    goto switch_break___0;
    case_39:
    {
    __CrestLoad(72248, (unsigned long )(& parser->m_elementDeclHandler), (long long )((unsigned long )parser->m_elementDeclHandler));
    __CrestLoad(72247, (unsigned long )0, (long long )0);
    __CrestApply2(72246, 13, (long long )(parser->m_elementDeclHandler != 0));
# 4712 "xmlparse.c"
    if (parser->m_elementDeclHandler != 0) {
      __CrestBranch(72249, 46339, 1);
      __CrestLoad(72251, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72252, (unsigned long )(& handleDefault));
# 4713 "xmlparse.c"
      handleDefault = (XML_Bool )0;
    } else {
      __CrestBranch(72250, 46340, 0);

    }
    }
# 4714 "xmlparse.c"
    goto switch_break___0;
    switch_break___0: ;
    }
    {
    __CrestLoad(72255, (unsigned long )(& handleDefault), (long long )handleDefault);
    __CrestLoad(72254, (unsigned long )0, (long long )0);
    __CrestApply2(72253, 13, (long long )(handleDefault != 0));
# 4717 "xmlparse.c"
    if (handleDefault != 0) {
      __CrestBranch(72256, 46344, 1);
      {
      __CrestLoad(72260, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
      __CrestLoad(72259, (unsigned long )0, (long long )0);
      __CrestApply2(72258, 13, (long long )(parser->m_defaultHandler != 0));
# 4717 "xmlparse.c"
      if (parser->m_defaultHandler != 0) {
        __CrestBranch(72261, 46345, 1);
# 4718 "xmlparse.c"
        reportDefault(parser, enc, s, next);
        __CrestClearStack(72263);
      } else {
        __CrestBranch(72262, 46346, 0);

      }
      }
    } else {
      __CrestBranch(72257, 46347, 0);

    }
    }
    {
    {
    __CrestLoad(72266, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(72265, (unsigned long )0, (long long )3U);
    __CrestApply2(72264, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 4721 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(72267, 46350, 1);
# 4721 "xmlparse.c"
      goto case_3___0;
    } else {
      __CrestBranch(72268, 46351, 0);

    }
    }
    {
    __CrestLoad(72271, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(72270, (unsigned long )0, (long long )2U);
    __CrestApply2(72269, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 4724 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
      __CrestBranch(72272, 46353, 1);
# 4724 "xmlparse.c"
      goto case_2___0;
    } else {
      __CrestBranch(72273, 46354, 0);

    }
    }
# 4726 "xmlparse.c"
    goto switch_default___1;
    case_3___0:
# 4722 "xmlparse.c"
    *nextPtr = next;
    __CrestLoad(72274, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(72275, (unsigned long )(& __retres221));
# 4723 "xmlparse.c"
    __retres221 = (enum XML_Error )0;
# 4723 "xmlparse.c"
    goto return_label;
    case_2___0:
    __CrestLoad(72276, (unsigned long )0, (long long )((enum XML_Error )35));
    __CrestStore(72277, (unsigned long )(& __retres221));
# 4725 "xmlparse.c"
    __retres221 = (enum XML_Error )35;
# 4725 "xmlparse.c"
    goto return_label;
    switch_default___1:
# 4727 "xmlparse.c"
    s = next;
# 4728 "xmlparse.c"
    mem_220 = enc->scanners[0];
# 4728 "xmlparse.c"
    tok = (*mem_220)(enc, s, end, & next);
    __CrestHandleReturn(72279, (long long )tok);
    __CrestStore(72278, (unsigned long )(& tok));
    switch_break___3: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(72280, (unsigned long )(& __retres221), (long long )__retres221);
  __CrestReturn(72281);
# 3750 "xmlparse.c"
  return (__retres221);
  }
}
}
# 4734 "xmlparse.c"
static enum XML_Error epilogProcessor(XML_Parser parser , char const *s , char const *end ,
                                      char const **nextPtr )
{
  char const *next ;
  int tok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  ENCODING const *mem_10 ;
  SCANNER mem_11 ;
  enum XML_Error __retres12 ;

  {
  __CrestCall(72282, 782);
# 4740 "xmlparse.c"
  parser->m_processor = & epilogProcessor;
# 4741 "xmlparse.c"
  parser->m_eventPtr = s;
  {
# 4742 "xmlparse.c"
  while (1) {
    while_continue: ;
# 4743 "xmlparse.c"
    next = (char const *)((void *)0);
# 4744 "xmlparse.c"
    mem_10 = parser->m_encoding;
# 4744 "xmlparse.c"
    mem_11 = mem_10->scanners[0];
# 4744 "xmlparse.c"
    tmp = (*mem_11)(parser->m_encoding, s, end, & next);
    __CrestHandleReturn(72284, (long long )tmp);
    __CrestStore(72283, (unsigned long )(& tmp));
    __CrestLoad(72285, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(72286, (unsigned long )(& tok));
# 4744 "xmlparse.c"
    tok = tmp;
# 4745 "xmlparse.c"
    parser->m_eventEndPtr = next;
    {
    {
    __CrestLoad(72289, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72288, (unsigned long )0, (long long )-15);
    __CrestApply2(72287, 12, (long long )(tok == -15));
# 4748 "xmlparse.c"
    if (tok == -15) {
      __CrestBranch(72290, 46372, 1);
# 4748 "xmlparse.c"
      goto case_neg_15;
    } else {
      __CrestBranch(72291, 46373, 0);

    }
    }
    {
    __CrestLoad(72294, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72293, (unsigned long )0, (long long )-4);
    __CrestApply2(72292, 12, (long long )(tok == -4));
# 4756 "xmlparse.c"
    if (tok == -4) {
      __CrestBranch(72295, 46375, 1);
# 4756 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(72296, 46376, 0);

    }
    }
    {
    __CrestLoad(72299, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72298, (unsigned long )0, (long long )15);
    __CrestApply2(72297, 12, (long long )(tok == 15));
# 4759 "xmlparse.c"
    if (tok == 15) {
      __CrestBranch(72300, 46378, 1);
# 4759 "xmlparse.c"
      goto case_15;
    } else {
      __CrestBranch(72301, 46379, 0);

    }
    }
    {
    __CrestLoad(72304, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72303, (unsigned long )0, (long long )11);
    __CrestApply2(72302, 12, (long long )(tok == 11));
# 4763 "xmlparse.c"
    if (tok == 11) {
      __CrestBranch(72305, 46381, 1);
# 4763 "xmlparse.c"
      goto case_11;
    } else {
      __CrestBranch(72306, 46382, 0);

    }
    }
    {
    __CrestLoad(72309, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72308, (unsigned long )0, (long long )13);
    __CrestApply2(72307, 12, (long long )(tok == 13));
# 4767 "xmlparse.c"
    if (tok == 13) {
      __CrestBranch(72310, 46384, 1);
# 4767 "xmlparse.c"
      goto case_13;
    } else {
      __CrestBranch(72311, 46385, 0);

    }
    }
    {
    __CrestLoad(72314, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72313, (unsigned long )0, (long long )0);
    __CrestApply2(72312, 12, (long long )(tok == 0));
# 4771 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(72315, 46387, 1);
# 4771 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(72316, 46388, 0);

    }
    }
    {
    __CrestLoad(72319, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72318, (unsigned long )0, (long long )-1);
    __CrestApply2(72317, 12, (long long )(tok == -1));
# 4774 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(72320, 46390, 1);
# 4774 "xmlparse.c"
      goto case_neg_1;
    } else {
      __CrestBranch(72321, 46391, 0);

    }
    }
    {
    __CrestLoad(72324, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72323, (unsigned long )0, (long long )-2);
    __CrestApply2(72322, 12, (long long )(tok == -2));
# 4780 "xmlparse.c"
    if (tok == -2) {
      __CrestBranch(72325, 46393, 1);
# 4780 "xmlparse.c"
      goto case_neg_2;
    } else {
      __CrestBranch(72326, 46394, 0);

    }
    }
# 4786 "xmlparse.c"
    goto switch_default;
    case_neg_15:
    {
    __CrestLoad(72329, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(72328, (unsigned long )0, (long long )0);
    __CrestApply2(72327, 13, (long long )(parser->m_defaultHandler != 0));
# 4749 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(72330, 46397, 1);
# 4750 "xmlparse.c"
      reportDefault(parser, parser->m_encoding, s, next);
      __CrestClearStack(72332);
      {
      __CrestLoad(72335, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(72334, (unsigned long )0, (long long )2U);
      __CrestApply2(72333, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 4751 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
        __CrestBranch(72336, 46399, 1);
        __CrestLoad(72338, (unsigned long )0, (long long )((enum XML_Error )35));
        __CrestStore(72339, (unsigned long )(& __retres12));
# 4752 "xmlparse.c"
        __retres12 = (enum XML_Error )35;
# 4752 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72337, 46401, 0);

      }
      }
    } else {
      __CrestBranch(72331, 46402, 0);

    }
    }
# 4754 "xmlparse.c"
    *nextPtr = next;
    __CrestLoad(72340, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(72341, (unsigned long )(& __retres12));
# 4755 "xmlparse.c"
    __retres12 = (enum XML_Error )0;
# 4755 "xmlparse.c"
    goto return_label;
    case_neg_4:
# 4757 "xmlparse.c"
    *nextPtr = s;
    __CrestLoad(72342, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(72343, (unsigned long )(& __retres12));
# 4758 "xmlparse.c"
    __retres12 = (enum XML_Error )0;
# 4758 "xmlparse.c"
    goto return_label;
    case_15:
    {
    __CrestLoad(72346, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(72345, (unsigned long )0, (long long )0);
    __CrestApply2(72344, 13, (long long )(parser->m_defaultHandler != 0));
# 4760 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(72347, 46410, 1);
# 4761 "xmlparse.c"
      reportDefault(parser, parser->m_encoding, s, next);
      __CrestClearStack(72349);
    } else {
      __CrestBranch(72348, 46411, 0);

    }
    }
# 4762 "xmlparse.c"
    goto switch_break;
    case_11:
# 4764 "xmlparse.c"
    tmp___0 = reportProcessingInstruction(parser, parser->m_encoding, s, next);
    __CrestHandleReturn(72351, (long long )tmp___0);
    __CrestStore(72350, (unsigned long )(& tmp___0));
    {
    __CrestLoad(72354, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(72353, (unsigned long )0, (long long )0);
    __CrestApply2(72352, 13, (long long )(tmp___0 != 0));
# 4764 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(72355, 46415, 1);

    } else {
      __CrestBranch(72356, 46416, 0);
      __CrestLoad(72357, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72358, (unsigned long )(& __retres12));
# 4765 "xmlparse.c"
      __retres12 = (enum XML_Error )1;
# 4765 "xmlparse.c"
      goto return_label;
    }
    }
# 4766 "xmlparse.c"
    goto switch_break;
    case_13:
# 4768 "xmlparse.c"
    tmp___1 = reportComment(parser, parser->m_encoding, s, next);
    __CrestHandleReturn(72360, (long long )tmp___1);
    __CrestStore(72359, (unsigned long )(& tmp___1));
    {
    __CrestLoad(72363, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(72362, (unsigned long )0, (long long )0);
    __CrestApply2(72361, 13, (long long )(tmp___1 != 0));
# 4768 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(72364, 46421, 1);

    } else {
      __CrestBranch(72365, 46422, 0);
      __CrestLoad(72366, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72367, (unsigned long )(& __retres12));
# 4769 "xmlparse.c"
      __retres12 = (enum XML_Error )1;
# 4769 "xmlparse.c"
      goto return_label;
    }
    }
# 4770 "xmlparse.c"
    goto switch_break;
    case_0:
# 4772 "xmlparse.c"
    parser->m_eventPtr = next;
    __CrestLoad(72368, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(72369, (unsigned long )(& __retres12));
# 4773 "xmlparse.c"
    __retres12 = (enum XML_Error )4;
# 4773 "xmlparse.c"
    goto return_label;
    case_neg_1:
    {
    __CrestLoad(72372, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestLoad(72371, (unsigned long )0, (long long )0);
    __CrestApply2(72370, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 4775 "xmlparse.c"
    if (parser->m_parsingStatus.finalBuffer == 0) {
      __CrestBranch(72373, 46429, 1);
# 4776 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(72375, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(72376, (unsigned long )(& __retres12));
# 4777 "xmlparse.c"
      __retres12 = (enum XML_Error )0;
# 4777 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72374, 46432, 0);

    }
    }
    __CrestLoad(72377, (unsigned long )0, (long long )((enum XML_Error )5));
    __CrestStore(72378, (unsigned long )(& __retres12));
# 4779 "xmlparse.c"
    __retres12 = (enum XML_Error )5;
# 4779 "xmlparse.c"
    goto return_label;
    case_neg_2:
    {
    __CrestLoad(72381, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestLoad(72380, (unsigned long )0, (long long )0);
    __CrestApply2(72379, 12, (long long )(parser->m_parsingStatus.finalBuffer == 0));
# 4781 "xmlparse.c"
    if (parser->m_parsingStatus.finalBuffer == 0) {
      __CrestBranch(72382, 46436, 1);
# 4782 "xmlparse.c"
      *nextPtr = s;
      __CrestLoad(72384, (unsigned long )0, (long long )((enum XML_Error )0));
      __CrestStore(72385, (unsigned long )(& __retres12));
# 4783 "xmlparse.c"
      __retres12 = (enum XML_Error )0;
# 4783 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72383, 46439, 0);

    }
    }
    __CrestLoad(72386, (unsigned long )0, (long long )((enum XML_Error )6));
    __CrestStore(72387, (unsigned long )(& __retres12));
# 4785 "xmlparse.c"
    __retres12 = (enum XML_Error )6;
# 4785 "xmlparse.c"
    goto return_label;
    switch_default:
    __CrestLoad(72388, (unsigned long )0, (long long )((enum XML_Error )9));
    __CrestStore(72389, (unsigned long )(& __retres12));
# 4787 "xmlparse.c"
    __retres12 = (enum XML_Error )9;
# 4787 "xmlparse.c"
    goto return_label;
    switch_break: ;
    }
# 4789 "xmlparse.c"
    s = next;
# 4789 "xmlparse.c"
    parser->m_eventPtr = s;
    {
    {
    __CrestLoad(72392, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(72391, (unsigned long )0, (long long )3U);
    __CrestApply2(72390, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 4791 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
      __CrestBranch(72393, 46448, 1);
# 4791 "xmlparse.c"
      goto case_3;
    } else {
      __CrestBranch(72394, 46449, 0);

    }
    }
    {
    __CrestLoad(72397, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
    __CrestLoad(72396, (unsigned long )0, (long long )2U);
    __CrestApply2(72395, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 2U));
# 4794 "xmlparse.c"
    if ((unsigned int )parser->m_parsingStatus.parsing == 2U) {
      __CrestBranch(72398, 46451, 1);
# 4794 "xmlparse.c"
      goto case_2;
    } else {
      __CrestBranch(72399, 46452, 0);

    }
    }
# 4796 "xmlparse.c"
    goto switch_default___0;
    case_3:
# 4792 "xmlparse.c"
    *nextPtr = next;
    __CrestLoad(72400, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(72401, (unsigned long )(& __retres12));
# 4793 "xmlparse.c"
    __retres12 = (enum XML_Error )0;
# 4793 "xmlparse.c"
    goto return_label;
    case_2:
    __CrestLoad(72402, (unsigned long )0, (long long )((enum XML_Error )35));
    __CrestStore(72403, (unsigned long )(& __retres12));
# 4795 "xmlparse.c"
    __retres12 = (enum XML_Error )35;
# 4795 "xmlparse.c"
    goto return_label;
    switch_default___0: ;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(72404, (unsigned long )(& __retres12), (long long )__retres12);
  __CrestReturn(72405);
# 4734 "xmlparse.c"
  return (__retres12);
  }
}
}
# 4801 "xmlparse.c"
static enum XML_Error processInternalEntity(XML_Parser parser , ENTITY *entity , XML_Bool betweenDecl )
{
  char const *textStart ;
  char const *textEnd ;
  char const *next ;
  enum XML_Error result ;
  OPEN_INTERNAL_ENTITY *openEntity ;
  void *tmp ;
  int tok ;
  int tmp___0 ;
  void *(*mem_12)(size_t size ) ;
  ENCODING const *mem_13 ;
  SCANNER mem_14 ;
  enum XML_Error __retres15 ;

  {
  __CrestCall(72407, 783);
  __CrestStore(72406, (unsigned long )(& betweenDecl));
  {
  __CrestLoad(72410, (unsigned long )(& parser->m_freeInternalEntities), (long long )((unsigned long )parser->m_freeInternalEntities));
  __CrestLoad(72409, (unsigned long )0, (long long )0);
  __CrestApply2(72408, 13, (long long )(parser->m_freeInternalEntities != 0));
# 4810 "xmlparse.c"
  if (parser->m_freeInternalEntities != 0) {
    __CrestBranch(72411, 46464, 1);
# 4811 "xmlparse.c"
    openEntity = parser->m_freeInternalEntities;
# 4812 "xmlparse.c"
    parser->m_freeInternalEntities = openEntity->next;
  } else {
    __CrestBranch(72412, 46465, 0);
# 4815 "xmlparse.c"
    mem_12 = parser->m_mem.malloc_fcn;
    __CrestLoad(72413, (unsigned long )0, (long long )sizeof(OPEN_INTERNAL_ENTITY ));
# 4815 "xmlparse.c"
    tmp = (*mem_12)(sizeof(OPEN_INTERNAL_ENTITY ));
    __CrestClearStack(72414);
# 4815 "xmlparse.c"
    openEntity = (OPEN_INTERNAL_ENTITY *)tmp;
    {
    __CrestLoad(72417, (unsigned long )(& openEntity), (long long )((unsigned long )openEntity));
    __CrestLoad(72416, (unsigned long )0, (long long )0);
    __CrestApply2(72415, 12, (long long )(openEntity == 0));
# 4816 "xmlparse.c"
    if (openEntity == 0) {
      __CrestBranch(72418, 46467, 1);
      __CrestLoad(72420, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72421, (unsigned long )(& __retres15));
# 4817 "xmlparse.c"
      __retres15 = (enum XML_Error )1;
# 4817 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72419, 46469, 0);

    }
    }
  }
  }
  __CrestLoad(72422, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(72423, (unsigned long )(& entity->open));
# 4819 "xmlparse.c"
  entity->open = (XML_Bool )1;
  __CrestLoad(72424, (unsigned long )0, (long long )0);
  __CrestStore(72425, (unsigned long )(& entity->processed));
# 4820 "xmlparse.c"
  entity->processed = 0;
# 4821 "xmlparse.c"
  openEntity->next = parser->m_openInternalEntities;
# 4822 "xmlparse.c"
  parser->m_openInternalEntities = openEntity;
# 4823 "xmlparse.c"
  openEntity->entity = entity;
  __CrestLoad(72426, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
  __CrestStore(72427, (unsigned long )(& openEntity->startTagLevel));
# 4824 "xmlparse.c"
  openEntity->startTagLevel = parser->m_tagLevel;
  __CrestLoad(72428, (unsigned long )(& betweenDecl), (long long )betweenDecl);
  __CrestStore(72429, (unsigned long )(& openEntity->betweenDecl));
# 4825 "xmlparse.c"
  openEntity->betweenDecl = betweenDecl;
# 4826 "xmlparse.c"
  openEntity->internalEventPtr = (char const *)((void *)0);
# 4827 "xmlparse.c"
  openEntity->internalEventEndPtr = (char const *)((void *)0);
# 4828 "xmlparse.c"
  textStart = (char const *)((char *)entity->textPtr);
# 4829 "xmlparse.c"
  textEnd = (char const *)((char *)(entity->textPtr + entity->textLen));
  {
  __CrestLoad(72432, (unsigned long )(& entity->is_param), (long long )entity->is_param);
  __CrestLoad(72431, (unsigned long )0, (long long )0);
  __CrestApply2(72430, 13, (long long )(entity->is_param != 0));
# 4832 "xmlparse.c"
  if (entity->is_param != 0) {
    __CrestBranch(72433, 46472, 1);
# 4833 "xmlparse.c"
    mem_13 = parser->m_internalEncoding;
# 4833 "xmlparse.c"
    mem_14 = mem_13->scanners[0];
# 4833 "xmlparse.c"
    tmp___0 = (*mem_14)(parser->m_internalEncoding, textStart, textEnd, & next);
    __CrestHandleReturn(72436, (long long )tmp___0);
    __CrestStore(72435, (unsigned long )(& tmp___0));
    __CrestLoad(72437, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(72438, (unsigned long )(& tok));
# 4833 "xmlparse.c"
    tok = tmp___0;
    __CrestLoad(72439, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72440, (unsigned long )0, (long long )((XML_Bool )0));
# 4834 "xmlparse.c"
    result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd, tok,
                      next, & next, (XML_Bool )0);
    __CrestHandleReturn(72442, (long long )result);
    __CrestStore(72441, (unsigned long )(& result));
  } else {
    __CrestBranch(72434, 46473, 0);
    __CrestLoad(72443, (unsigned long )(& parser->m_tagLevel), (long long )parser->m_tagLevel);
    __CrestLoad(72444, (unsigned long )0, (long long )((XML_Bool )0));
# 4839 "xmlparse.c"
    result = doContent(parser, parser->m_tagLevel, parser->m_internalEncoding, textStart,
                       textEnd, & next, (XML_Bool )0);
    __CrestHandleReturn(72446, (long long )result);
    __CrestStore(72445, (unsigned long )(& result));
  }
  }
  {
  __CrestLoad(72449, (unsigned long )(& result), (long long )result);
  __CrestLoad(72448, (unsigned long )0, (long long )0U);
  __CrestApply2(72447, 12, (long long )((unsigned int )result == 0U));
# 4842 "xmlparse.c"
  if ((unsigned int )result == 0U) {
    __CrestBranch(72450, 46475, 1);
    {
    __CrestLoad(72454, (unsigned long )(& textEnd), (long long )((unsigned long )textEnd));
    __CrestLoad(72453, (unsigned long )(& next), (long long )((unsigned long )next));
    __CrestApply2(72452, 13, (long long )((unsigned long )textEnd != (unsigned long )next));
# 4843 "xmlparse.c"
    if ((unsigned long )textEnd != (unsigned long )next) {
      __CrestBranch(72455, 46476, 1);
      {
      __CrestLoad(72459, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(72458, (unsigned long )0, (long long )3U);
      __CrestApply2(72457, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 4843 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
        __CrestBranch(72460, 46477, 1);
        __CrestLoad(72464, (unsigned long )(& next), (long long )((unsigned long )next));
        __CrestLoad(72463, (unsigned long )(& textStart), (long long )((unsigned long )textStart));
        __CrestApply2(72462, 18, (long long )(next - textStart));
        __CrestStore(72465, (unsigned long )(& entity->processed));
# 4844 "xmlparse.c"
        entity->processed = (int )(next - textStart);
# 4845 "xmlparse.c"
        parser->m_processor = & internalEntityProcessor;
      } else {
        __CrestBranch(72461, 46478, 0);
        __CrestLoad(72466, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72467, (unsigned long )(& entity->open));
# 4848 "xmlparse.c"
        entity->open = (XML_Bool )0;
# 4849 "xmlparse.c"
        parser->m_openInternalEntities = openEntity->next;
# 4851 "xmlparse.c"
        openEntity->next = parser->m_freeInternalEntities;
# 4852 "xmlparse.c"
        parser->m_freeInternalEntities = openEntity;
      }
      }
    } else {
      __CrestBranch(72456, 46479, 0);
      __CrestLoad(72468, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72469, (unsigned long )(& entity->open));
# 4848 "xmlparse.c"
      entity->open = (XML_Bool )0;
# 4849 "xmlparse.c"
      parser->m_openInternalEntities = openEntity->next;
# 4851 "xmlparse.c"
      openEntity->next = parser->m_freeInternalEntities;
# 4852 "xmlparse.c"
      parser->m_freeInternalEntities = openEntity;
    }
    }
  } else {
    __CrestBranch(72451, 46480, 0);

  }
  }
  __CrestLoad(72470, (unsigned long )(& result), (long long )result);
  __CrestStore(72471, (unsigned long )(& __retres15));
# 4855 "xmlparse.c"
  __retres15 = result;
  return_label:
  {
  __CrestLoad(72472, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(72473);
# 4801 "xmlparse.c"
  return (__retres15);
  }
}
}
# 4858 "xmlparse.c"
static enum XML_Error internalEntityProcessor(XML_Parser parser , char const *s ,
                                              char const *end , char const **nextPtr )
{
  ENTITY *entity ;
  char const *textStart ;
  char const *textEnd ;
  char const *next ;
  enum XML_Error result ;
  OPEN_INTERNAL_ENTITY *openEntity ;
  int tok ;
  int tmp ;
  int tok___0 ;
  enum XML_Error tmp___0 ;
  int tmp___1 ;
  enum XML_Error tmp___2 ;
  ENCODING const *mem_17 ;
  SCANNER mem_18 ;
  ENCODING const *mem_19 ;
  SCANNER mem_20 ;
  enum XML_Error __retres21 ;

  {
  __CrestCall(72474, 784);
# 4868 "xmlparse.c"
  openEntity = parser->m_openInternalEntities;
  {
  __CrestLoad(72477, (unsigned long )(& openEntity), (long long )((unsigned long )openEntity));
  __CrestLoad(72476, (unsigned long )0, (long long )0);
  __CrestApply2(72475, 12, (long long )(openEntity == 0));
# 4869 "xmlparse.c"
  if (openEntity == 0) {
    __CrestBranch(72478, 46485, 1);
    __CrestLoad(72480, (unsigned long )0, (long long )((enum XML_Error )23));
    __CrestStore(72481, (unsigned long )(& __retres21));
# 4870 "xmlparse.c"
    __retres21 = (enum XML_Error )23;
# 4870 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(72479, 46487, 0);

  }
  }
# 4872 "xmlparse.c"
  entity = openEntity->entity;
# 4873 "xmlparse.c"
  textStart = (char const *)((char *)entity->textPtr + entity->processed);
# 4874 "xmlparse.c"
  textEnd = (char const *)((char *)(entity->textPtr + entity->textLen));
  {
  __CrestLoad(72484, (unsigned long )(& entity->is_param), (long long )entity->is_param);
  __CrestLoad(72483, (unsigned long )0, (long long )0);
  __CrestApply2(72482, 13, (long long )(entity->is_param != 0));
# 4877 "xmlparse.c"
  if (entity->is_param != 0) {
    __CrestBranch(72485, 46490, 1);
# 4878 "xmlparse.c"
    mem_17 = parser->m_internalEncoding;
# 4878 "xmlparse.c"
    mem_18 = mem_17->scanners[0];
# 4878 "xmlparse.c"
    tmp = (*mem_18)(parser->m_internalEncoding, textStart, textEnd, & next);
    __CrestHandleReturn(72488, (long long )tmp);
    __CrestStore(72487, (unsigned long )(& tmp));
    __CrestLoad(72489, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(72490, (unsigned long )(& tok));
# 4878 "xmlparse.c"
    tok = tmp;
    __CrestLoad(72491, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72492, (unsigned long )0, (long long )((XML_Bool )0));
# 4879 "xmlparse.c"
    result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd, tok,
                      next, & next, (XML_Bool )0);
    __CrestHandleReturn(72494, (long long )result);
    __CrestStore(72493, (unsigned long )(& result));
  } else {
    __CrestBranch(72486, 46491, 0);
    __CrestLoad(72495, (unsigned long )(& openEntity->startTagLevel), (long long )openEntity->startTagLevel);
    __CrestLoad(72496, (unsigned long )0, (long long )((XML_Bool )0));
# 4884 "xmlparse.c"
    result = doContent(parser, openEntity->startTagLevel, parser->m_internalEncoding,
                       textStart, textEnd, & next, (XML_Bool )0);
    __CrestHandleReturn(72498, (long long )result);
    __CrestStore(72497, (unsigned long )(& result));
  }
  }
  {
  __CrestLoad(72501, (unsigned long )(& result), (long long )result);
  __CrestLoad(72500, (unsigned long )0, (long long )0U);
  __CrestApply2(72499, 13, (long long )((unsigned int )result != 0U));
# 4887 "xmlparse.c"
  if ((unsigned int )result != 0U) {
    __CrestBranch(72502, 46493, 1);
    __CrestLoad(72504, (unsigned long )(& result), (long long )result);
    __CrestStore(72505, (unsigned long )(& __retres21));
# 4888 "xmlparse.c"
    __retres21 = result;
# 4888 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(72503, 46495, 0);
    {
    __CrestLoad(72508, (unsigned long )(& textEnd), (long long )((unsigned long )textEnd));
    __CrestLoad(72507, (unsigned long )(& next), (long long )((unsigned long )next));
    __CrestApply2(72506, 13, (long long )((unsigned long )textEnd != (unsigned long )next));
# 4889 "xmlparse.c"
    if ((unsigned long )textEnd != (unsigned long )next) {
      __CrestBranch(72509, 46496, 1);
      {
      __CrestLoad(72513, (unsigned long )(& parser->m_parsingStatus.parsing), (long long )parser->m_parsingStatus.parsing);
      __CrestLoad(72512, (unsigned long )0, (long long )3U);
      __CrestApply2(72511, 12, (long long )((unsigned int )parser->m_parsingStatus.parsing == 3U));
# 4889 "xmlparse.c"
      if ((unsigned int )parser->m_parsingStatus.parsing == 3U) {
        __CrestBranch(72514, 46497, 1);
        __CrestLoad(72518, (unsigned long )(& next), (long long )((unsigned long )next));
        __CrestLoad(72517, (unsigned long )(& entity->textPtr), (long long )((unsigned long )entity->textPtr));
        __CrestApply2(72516, 18, (long long )(next - (char const *)((char *)entity->textPtr)));
        __CrestStore(72519, (unsigned long )(& entity->processed));
# 4890 "xmlparse.c"
        entity->processed = (int )(next - (char const *)((char *)entity->textPtr));
        __CrestLoad(72520, (unsigned long )(& result), (long long )result);
        __CrestStore(72521, (unsigned long )(& __retres21));
# 4891 "xmlparse.c"
        __retres21 = result;
# 4891 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72515, 46500, 0);
        __CrestLoad(72522, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(72523, (unsigned long )(& entity->open));
# 4894 "xmlparse.c"
        entity->open = (XML_Bool )0;
# 4895 "xmlparse.c"
        parser->m_openInternalEntities = openEntity->next;
# 4897 "xmlparse.c"
        openEntity->next = parser->m_freeInternalEntities;
# 4898 "xmlparse.c"
        parser->m_freeInternalEntities = openEntity;
      }
      }
    } else {
      __CrestBranch(72510, 46501, 0);
      __CrestLoad(72524, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(72525, (unsigned long )(& entity->open));
# 4894 "xmlparse.c"
      entity->open = (XML_Bool )0;
# 4895 "xmlparse.c"
      parser->m_openInternalEntities = openEntity->next;
# 4897 "xmlparse.c"
      openEntity->next = parser->m_freeInternalEntities;
# 4898 "xmlparse.c"
      parser->m_freeInternalEntities = openEntity;
    }
    }
  }
  }
  {
  __CrestLoad(72528, (unsigned long )(& entity->is_param), (long long )entity->is_param);
  __CrestLoad(72527, (unsigned long )0, (long long )0);
  __CrestApply2(72526, 13, (long long )(entity->is_param != 0));
# 4902 "xmlparse.c"
  if (entity->is_param != 0) {
    __CrestBranch(72529, 46503, 1);
# 4904 "xmlparse.c"
    parser->m_processor = & prologProcessor;
# 4905 "xmlparse.c"
    mem_19 = parser->m_encoding;
# 4905 "xmlparse.c"
    mem_20 = mem_19->scanners[0];
# 4905 "xmlparse.c"
    tok___0 = (*mem_20)(parser->m_encoding, s, end, & next);
    __CrestHandleReturn(72532, (long long )tok___0);
    __CrestStore(72531, (unsigned long )(& tok___0));
    __CrestLoad(72533, (unsigned long )(& tok___0), (long long )tok___0);
    __CrestLoad(72535, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestApply1(72534, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 4906 "xmlparse.c"
    tmp___0 = doProlog(parser, parser->m_encoding, s, end, tok___0, next, nextPtr,
                       (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
    __CrestHandleReturn(72537, (long long )tmp___0);
    __CrestStore(72536, (unsigned long )(& tmp___0));
    __CrestLoad(72538, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(72539, (unsigned long )(& __retres21));
# 4906 "xmlparse.c"
    __retres21 = tmp___0;
# 4906 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(72530, 46506, 0);
# 4912 "xmlparse.c"
    parser->m_processor = & contentProcessor;
    {
    __CrestLoad(72542, (unsigned long )(& parser->m_parentParser), (long long )((unsigned long )parser->m_parentParser));
    __CrestLoad(72541, (unsigned long )0, (long long )0);
    __CrestApply2(72540, 13, (long long )(parser->m_parentParser != 0));
# 4914 "xmlparse.c"
    if (parser->m_parentParser != 0) {
      __CrestBranch(72543, 46508, 1);
      __CrestLoad(72545, (unsigned long )0, (long long )1);
      __CrestStore(72546, (unsigned long )(& tmp___1));
# 4914 "xmlparse.c"
      tmp___1 = 1;
    } else {
      __CrestBranch(72544, 46509, 0);
      __CrestLoad(72547, (unsigned long )0, (long long )0);
      __CrestStore(72548, (unsigned long )(& tmp___1));
# 4914 "xmlparse.c"
      tmp___1 = 0;
    }
    }
    __CrestLoad(72549, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(72551, (unsigned long )(& parser->m_parsingStatus.finalBuffer), (long long )parser->m_parsingStatus.finalBuffer);
    __CrestApply1(72550, 21, (long long )(! parser->m_parsingStatus.finalBuffer));
# 4914 "xmlparse.c"
    tmp___2 = doContent(parser, tmp___1, parser->m_encoding, s, end, nextPtr, (XML_Bool )(! parser->m_parsingStatus.finalBuffer));
    __CrestHandleReturn(72553, (long long )tmp___2);
    __CrestStore(72552, (unsigned long )(& tmp___2));
    __CrestLoad(72554, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestStore(72555, (unsigned long )(& __retres21));
# 4914 "xmlparse.c"
    __retres21 = tmp___2;
# 4914 "xmlparse.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(72556, (unsigned long )(& __retres21), (long long )__retres21);
  __CrestReturn(72557);
# 4858 "xmlparse.c"
  return (__retres21);
  }
}
}
# 4919 "xmlparse.c"
static enum XML_Error errorProcessor(XML_Parser parser , char const *s , char const *end ,
                                     char const **nextPtr )
{
  enum XML_Error __retres5 ;

  {
  __CrestCall(72558, 785);

  __CrestLoad(72559, (unsigned long )(& parser->m_errorCode), (long long )parser->m_errorCode);
  __CrestStore(72560, (unsigned long )(& __retres5));
# 4925 "xmlparse.c"
  __retres5 = parser->m_errorCode;
  {
  __CrestLoad(72561, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(72562);
# 4919 "xmlparse.c"
  return (__retres5);
  }
}
}
# 4928 "xmlparse.c"
static enum XML_Error storeAttributeValue(XML_Parser parser , ENCODING const *enc ,
                                          XML_Bool isCdata , char const *ptr , char const *end ,
                                          STRING_POOL *pool )
{
  enum XML_Error result ;
  enum XML_Error tmp ;
  XML_Char *tmp___1 ;
  int tmp___2 ;
  XML_Bool tmp___3 ;
  XML_Char *mem_13 ;
  enum XML_Error __retres14 ;

  {
  __CrestCall(72564, 786);
  __CrestStore(72563, (unsigned long )(& isCdata));
  __CrestLoad(72565, (unsigned long )(& isCdata), (long long )isCdata);
# 4933 "xmlparse.c"
  tmp = appendAttributeValue(parser, enc, isCdata, ptr, end, pool);
  __CrestHandleReturn(72567, (long long )tmp);
  __CrestStore(72566, (unsigned long )(& tmp));
  __CrestLoad(72568, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(72569, (unsigned long )(& result));
# 4933 "xmlparse.c"
  result = tmp;
  {
  __CrestLoad(72572, (unsigned long )(& result), (long long )result);
  __CrestLoad(72571, (unsigned long )0, (long long )0);
  __CrestApply2(72570, 13, (long long )(result != 0));
# 4935 "xmlparse.c"
  if (result != 0) {
    __CrestBranch(72573, 46518, 1);
    __CrestLoad(72575, (unsigned long )(& result), (long long )result);
    __CrestStore(72576, (unsigned long )(& __retres14));
# 4936 "xmlparse.c"
    __retres14 = result;
# 4936 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(72574, 46520, 0);

  }
  }
  {
  __CrestLoad(72579, (unsigned long )(& isCdata), (long long )isCdata);
  __CrestLoad(72578, (unsigned long )0, (long long )0);
  __CrestApply2(72577, 12, (long long )(isCdata == 0));
# 4937 "xmlparse.c"
  if (isCdata == 0) {
    __CrestBranch(72580, 46522, 1);
    {
    __CrestLoad(72586, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(72585, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestApply2(72584, 18, (long long )(pool->ptr - pool->start));
    __CrestLoad(72583, (unsigned long )0, (long long )0);
    __CrestApply2(72582, 13, (long long )(pool->ptr - pool->start != 0));
# 4937 "xmlparse.c"
    if (pool->ptr - pool->start != 0) {
      __CrestBranch(72587, 46523, 1);
      {
# 4937 "xmlparse.c"
      mem_13 = pool->ptr + -1;
      {
      __CrestLoad(72591, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(72590, (unsigned long )0, (long long )32);
      __CrestApply2(72589, 12, (long long )((int )*mem_13 == 32));
# 4937 "xmlparse.c"
      if ((int )*mem_13 == 32) {
        __CrestBranch(72592, 46526, 1);
# 4938 "xmlparse.c"
        (pool->ptr) --;
      } else {
        __CrestBranch(72593, 46527, 0);

      }
      }
      }
    } else {
      __CrestBranch(72588, 46528, 0);

    }
    }
  } else {
    __CrestBranch(72581, 46529, 0);

  }
  }
  {
  __CrestLoad(72596, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
  __CrestLoad(72595, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
  __CrestApply2(72594, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 4939 "xmlparse.c"
  if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
    __CrestBranch(72597, 46531, 1);
# 4939 "xmlparse.c"
    tmp___3 = poolGrow(pool);
    __CrestHandleReturn(72600, (long long )tmp___3);
    __CrestStore(72599, (unsigned long )(& tmp___3));
    {
    __CrestLoad(72603, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(72602, (unsigned long )0, (long long )0);
    __CrestApply2(72601, 13, (long long )(tmp___3 != 0));
# 4939 "xmlparse.c"
    if (tmp___3 != 0) {
      __CrestBranch(72604, 46533, 1);
# 4939 "xmlparse.c"
      tmp___1 = pool->ptr;
# 4939 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(72606, (unsigned long )0, (long long )((XML_Char )'\000'));
      __CrestStore(72607, (unsigned long )tmp___1);
# 4939 "xmlparse.c"
      *tmp___1 = (XML_Char )'\000';
      __CrestLoad(72608, (unsigned long )0, (long long )1);
      __CrestStore(72609, (unsigned long )(& tmp___2));
# 4939 "xmlparse.c"
      tmp___2 = 1;
    } else {
      __CrestBranch(72605, 46534, 0);
      __CrestLoad(72610, (unsigned long )0, (long long )0);
      __CrestStore(72611, (unsigned long )(& tmp___2));
# 4939 "xmlparse.c"
      tmp___2 = 0;
    }
    }
  } else {
    __CrestBranch(72598, 46535, 0);
# 4939 "xmlparse.c"
    tmp___1 = pool->ptr;
# 4939 "xmlparse.c"
    (pool->ptr) ++;
    __CrestLoad(72612, (unsigned long )0, (long long )((XML_Char )'\000'));
    __CrestStore(72613, (unsigned long )tmp___1);
# 4939 "xmlparse.c"
    *tmp___1 = (XML_Char )'\000';
    __CrestLoad(72614, (unsigned long )0, (long long )1);
    __CrestStore(72615, (unsigned long )(& tmp___2));
# 4939 "xmlparse.c"
    tmp___2 = 1;
  }
  }
  {
  __CrestLoad(72618, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(72617, (unsigned long )0, (long long )0);
  __CrestApply2(72616, 13, (long long )(tmp___2 != 0));
# 4939 "xmlparse.c"
  if (tmp___2 != 0) {
    __CrestBranch(72619, 46537, 1);

  } else {
    __CrestBranch(72620, 46538, 0);
    __CrestLoad(72621, (unsigned long )0, (long long )((enum XML_Error )1));
    __CrestStore(72622, (unsigned long )(& __retres14));
# 4940 "xmlparse.c"
    __retres14 = (enum XML_Error )1;
# 4940 "xmlparse.c"
    goto return_label;
  }
  }
  __CrestLoad(72623, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(72624, (unsigned long )(& __retres14));
# 4941 "xmlparse.c"
  __retres14 = (enum XML_Error )0;
  return_label:
  {
  __CrestLoad(72625, (unsigned long )(& __retres14), (long long )__retres14);
  __CrestReturn(72626);
# 4928 "xmlparse.c"
  return (__retres14);
  }
}
}
# 4944 "xmlparse.c"
static enum XML_Error appendAttributeValue(XML_Parser parser , ENCODING const *enc ,
                                           XML_Bool isCdata , char const *ptr ,
                                           char const *end , STRING_POOL *pool )
{
  DTD *dtd ;
  char const *next ;
  int tok ;
  int tmp ;
  XML_Char buf[4] ;
  int i ;
  int n ;
  int tmp___0 ;
  XML_Char *tmp___2 ;
  int tmp___3 ;
  XML_Bool tmp___4 ;
  XML_Char *tmp___5 ;
  XML_Char *tmp___7 ;
  int tmp___8 ;
  XML_Bool tmp___9 ;
  XML_Char const *name ;
  ENTITY *entity ;
  char checkEntityDecl ;
  XML_Char ch ;
  int tmp___10 ;
  XML_Char *tmp___12 ;
  int tmp___13 ;
  XML_Bool tmp___14 ;
  XML_Char *tmp___15 ;
  NAMED *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  enum XML_Error result ;
  XML_Char const *textEnd ;
  SCANNER mem_40 ;
  int (*mem_41)(ENCODING const *enc , char const *ptr ) ;
  XML_Char *mem_42 ;
  XML_Char *mem_43 ;
  int (*mem_44)(ENCODING const * , char const * , char const * ) ;
  enum XML_Error __retres45 ;

  {
  __CrestCall(72628, 787);
  __CrestStore(72627, (unsigned long )(& isCdata));
# 4949 "xmlparse.c"
  dtd = parser->m_dtd;
  {
# 4950 "xmlparse.c"
  while (1) {
    while_continue: ;
# 4952 "xmlparse.c"
    mem_40 = enc->literalScanners[0];
# 4952 "xmlparse.c"
    tmp = (*mem_40)(enc, ptr, end, & next);
    __CrestHandleReturn(72630, (long long )tmp);
    __CrestStore(72629, (unsigned long )(& tmp));
    __CrestLoad(72631, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(72632, (unsigned long )(& tok));
# 4952 "xmlparse.c"
    tok = tmp;
    {
    {
    __CrestLoad(72635, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72634, (unsigned long )0, (long long )-4);
    __CrestApply2(72633, 12, (long long )(tok == -4));
# 4954 "xmlparse.c"
    if (tok == -4) {
      __CrestBranch(72636, 46549, 1);
# 4954 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(72637, 46550, 0);

    }
    }
    {
    __CrestLoad(72640, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72639, (unsigned long )0, (long long )0);
    __CrestApply2(72638, 12, (long long )(tok == 0));
# 4956 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(72641, 46552, 1);
# 4956 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(72642, 46553, 0);

    }
    }
    {
    __CrestLoad(72645, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72644, (unsigned long )0, (long long )-1);
    __CrestApply2(72643, 12, (long long )(tok == -1));
# 4960 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(72646, 46555, 1);
# 4960 "xmlparse.c"
      goto case_neg_1;
    } else {
      __CrestBranch(72647, 46556, 0);

    }
    }
    {
    __CrestLoad(72650, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72649, (unsigned long )0, (long long )10);
    __CrestApply2(72648, 12, (long long )(tok == 10));
# 4964 "xmlparse.c"
    if (tok == 10) {
      __CrestBranch(72651, 46558, 1);
# 4964 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(72652, 46559, 0);

    }
    }
    {
    __CrestLoad(72655, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72654, (unsigned long )0, (long long )6);
    __CrestApply2(72653, 12, (long long )(tok == 6));
# 4990 "xmlparse.c"
    if (tok == 6) {
      __CrestBranch(72656, 46561, 1);
# 4990 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(72657, 46562, 0);

    }
    }
    {
    __CrestLoad(72660, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72659, (unsigned long )0, (long long )-3);
    __CrestApply2(72658, 12, (long long )(tok == -3));
# 4994 "xmlparse.c"
    if (tok == -3) {
      __CrestBranch(72661, 46564, 1);
# 4994 "xmlparse.c"
      goto case_neg_3;
    } else {
      __CrestBranch(72662, 46565, 0);

    }
    }
    {
    __CrestLoad(72665, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72664, (unsigned long )0, (long long )7);
    __CrestApply2(72663, 12, (long long )(tok == 7));
# 4998 "xmlparse.c"
    if (tok == 7) {
      __CrestBranch(72666, 46567, 1);
# 4998 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(72667, 46568, 0);

    }
    }
    {
    __CrestLoad(72670, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72669, (unsigned long )0, (long long )39);
    __CrestApply2(72668, 12, (long long )(tok == 39));
# 4998 "xmlparse.c"
    if (tok == 39) {
      __CrestBranch(72671, 46570, 1);
# 4998 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(72672, 46571, 0);

    }
    }
    {
    __CrestLoad(72675, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(72674, (unsigned long )0, (long long )9);
    __CrestApply2(72673, 12, (long long )(tok == 9));
# 5004 "xmlparse.c"
    if (tok == 9) {
      __CrestBranch(72676, 46573, 1);
# 5004 "xmlparse.c"
      goto case_9;
    } else {
      __CrestBranch(72677, 46574, 0);

    }
    }
# 5084 "xmlparse.c"
    goto switch_default;
    case_neg_4:
    __CrestLoad(72678, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(72679, (unsigned long )(& __retres45));
# 4955 "xmlparse.c"
    __retres45 = (enum XML_Error )0;
# 4955 "xmlparse.c"
    goto return_label;
    case_0:
    {
    __CrestLoad(72682, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(72681, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(72680, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 4957 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(72683, 46579, 1);
# 4958 "xmlparse.c"
      parser->m_eventPtr = next;
    } else {
      __CrestBranch(72684, 46580, 0);

    }
    }
    __CrestLoad(72685, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(72686, (unsigned long )(& __retres45));
# 4959 "xmlparse.c"
    __retres45 = (enum XML_Error )4;
# 4959 "xmlparse.c"
    goto return_label;
    case_neg_1:
    {
    __CrestLoad(72689, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(72688, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(72687, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 4961 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(72690, 46584, 1);
# 4962 "xmlparse.c"
      parser->m_eventPtr = ptr;
    } else {
      __CrestBranch(72691, 46585, 0);

    }
    }
    __CrestLoad(72692, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(72693, (unsigned long )(& __retres45));
# 4963 "xmlparse.c"
    __retres45 = (enum XML_Error )4;
# 4963 "xmlparse.c"
    goto return_label;
    case_10:
# 4968 "xmlparse.c"
    mem_41 = enc->charRefNumber;
# 4968 "xmlparse.c"
    tmp___0 = (*mem_41)(enc, ptr);
    __CrestHandleReturn(72695, (long long )tmp___0);
    __CrestStore(72694, (unsigned long )(& tmp___0));
    __CrestLoad(72696, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(72697, (unsigned long )(& n));
# 4968 "xmlparse.c"
    n = tmp___0;
    {
    __CrestLoad(72700, (unsigned long )(& n), (long long )n);
    __CrestLoad(72699, (unsigned long )0, (long long )0);
    __CrestApply2(72698, 16, (long long )(n < 0));
# 4969 "xmlparse.c"
    if (n < 0) {
      __CrestBranch(72701, 46590, 1);
      {
      __CrestLoad(72705, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(72704, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(72703, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 4970 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(72706, 46591, 1);
# 4971 "xmlparse.c"
        parser->m_eventPtr = ptr;
      } else {
        __CrestBranch(72707, 46592, 0);

      }
      }
      __CrestLoad(72708, (unsigned long )0, (long long )((enum XML_Error )14));
      __CrestStore(72709, (unsigned long )(& __retres45));
# 4972 "xmlparse.c"
      __retres45 = (enum XML_Error )14;
# 4972 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72702, 46595, 0);

    }
    }
    {
    __CrestLoad(72712, (unsigned long )(& isCdata), (long long )isCdata);
    __CrestLoad(72711, (unsigned long )0, (long long )0);
    __CrestApply2(72710, 12, (long long )(isCdata == 0));
# 4974 "xmlparse.c"
    if (isCdata == 0) {
      __CrestBranch(72713, 46597, 1);
      {
      __CrestLoad(72717, (unsigned long )(& n), (long long )n);
      __CrestLoad(72716, (unsigned long )0, (long long )32);
      __CrestApply2(72715, 12, (long long )(n == 32));
# 4974 "xmlparse.c"
      if (n == 32) {
        __CrestBranch(72718, 46598, 1);
        {
        __CrestLoad(72724, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
        __CrestLoad(72723, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
        __CrestApply2(72722, 18, (long long )(pool->ptr - pool->start));
        __CrestLoad(72721, (unsigned long )0, (long long )0L);
        __CrestApply2(72720, 12, (long long )(pool->ptr - pool->start == 0L));
# 4974 "xmlparse.c"
        if (pool->ptr - pool->start == 0L) {
          __CrestBranch(72725, 46599, 1);
# 4977 "xmlparse.c"
          goto switch_break;
        } else {
          __CrestBranch(72726, 46600, 0);
          {
# 4974 "xmlparse.c"
          mem_42 = pool->ptr + -1;
          {
          __CrestLoad(72729, (unsigned long )mem_42, (long long )*mem_42);
          __CrestLoad(72728, (unsigned long )0, (long long )32);
          __CrestApply2(72727, 12, (long long )((int )*mem_42 == 32));
# 4974 "xmlparse.c"
          if ((int )*mem_42 == 32) {
            __CrestBranch(72730, 46603, 1);
# 4977 "xmlparse.c"
            goto switch_break;
          } else {
            __CrestBranch(72731, 46604, 0);

          }
          }
          }
        }
        }
      } else {
        __CrestBranch(72719, 46605, 0);

      }
      }
    } else {
      __CrestBranch(72714, 46606, 0);

    }
    }
    __CrestLoad(72732, (unsigned long )(& n), (long long )n);
# 4978 "xmlparse.c"
    n = XmlUtf8Encode(n, buf);
    __CrestHandleReturn(72734, (long long )n);
    __CrestStore(72733, (unsigned long )(& n));
    {
    __CrestLoad(72737, (unsigned long )(& n), (long long )n);
    __CrestLoad(72736, (unsigned long )0, (long long )0);
    __CrestApply2(72735, 12, (long long )(n == 0));
# 4979 "xmlparse.c"
    if (n == 0) {
      __CrestBranch(72738, 46609, 1);
      {
      __CrestLoad(72742, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(72741, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(72740, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 4980 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(72743, 46610, 1);
# 4981 "xmlparse.c"
        parser->m_eventPtr = ptr;
      } else {
        __CrestBranch(72744, 46611, 0);

      }
      }
      __CrestLoad(72745, (unsigned long )0, (long long )((enum XML_Error )14));
      __CrestStore(72746, (unsigned long )(& __retres45));
# 4982 "xmlparse.c"
      __retres45 = (enum XML_Error )14;
# 4982 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72739, 46614, 0);

    }
    }
    __CrestLoad(72747, (unsigned long )0, (long long )0);
    __CrestStore(72748, (unsigned long )(& i));
# 4984 "xmlparse.c"
    i = 0;
    {
# 4984 "xmlparse.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(72751, (unsigned long )(& i), (long long )i);
      __CrestLoad(72750, (unsigned long )(& n), (long long )n);
      __CrestApply2(72749, 16, (long long )(i < n));
# 4984 "xmlparse.c"
      if (i < n) {
        __CrestBranch(72752, 46620, 1);

      } else {
        __CrestBranch(72753, 46621, 0);
# 4984 "xmlparse.c"
        goto while_break___0;
      }
      }
      {
      __CrestLoad(72756, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
      __CrestLoad(72755, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
      __CrestApply2(72754, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 4985 "xmlparse.c"
      if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
        __CrestBranch(72757, 46623, 1);
# 4985 "xmlparse.c"
        tmp___4 = poolGrow(pool);
        __CrestHandleReturn(72760, (long long )tmp___4);
        __CrestStore(72759, (unsigned long )(& tmp___4));
        {
        __CrestLoad(72763, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestLoad(72762, (unsigned long )0, (long long )0);
        __CrestApply2(72761, 13, (long long )(tmp___4 != 0));
# 4985 "xmlparse.c"
        if (tmp___4 != 0) {
          __CrestBranch(72764, 46625, 1);
# 4985 "xmlparse.c"
          tmp___2 = pool->ptr;
# 4985 "xmlparse.c"
          (pool->ptr) ++;
          __CrestLoad(72766, (unsigned long )(& buf[i]), (long long )buf[i]);
          __CrestStore(72767, (unsigned long )tmp___2);
# 4985 "xmlparse.c"
          *tmp___2 = buf[i];
          __CrestLoad(72768, (unsigned long )0, (long long )1);
          __CrestStore(72769, (unsigned long )(& tmp___3));
# 4985 "xmlparse.c"
          tmp___3 = 1;
        } else {
          __CrestBranch(72765, 46626, 0);
          __CrestLoad(72770, (unsigned long )0, (long long )0);
          __CrestStore(72771, (unsigned long )(& tmp___3));
# 4985 "xmlparse.c"
          tmp___3 = 0;
        }
        }
      } else {
        __CrestBranch(72758, 46627, 0);
# 4985 "xmlparse.c"
        tmp___2 = pool->ptr;
# 4985 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(72772, (unsigned long )(& buf[i]), (long long )buf[i]);
        __CrestStore(72773, (unsigned long )tmp___2);
# 4985 "xmlparse.c"
        *tmp___2 = buf[i];
        __CrestLoad(72774, (unsigned long )0, (long long )1);
        __CrestStore(72775, (unsigned long )(& tmp___3));
# 4985 "xmlparse.c"
        tmp___3 = 1;
      }
      }
      {
      __CrestLoad(72778, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(72777, (unsigned long )0, (long long )0);
      __CrestApply2(72776, 13, (long long )(tmp___3 != 0));
# 4985 "xmlparse.c"
      if (tmp___3 != 0) {
        __CrestBranch(72779, 46629, 1);

      } else {
        __CrestBranch(72780, 46630, 0);
        __CrestLoad(72781, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(72782, (unsigned long )(& __retres45));
# 4986 "xmlparse.c"
        __retres45 = (enum XML_Error )1;
# 4986 "xmlparse.c"
        goto return_label;
      }
      }
      __CrestLoad(72785, (unsigned long )(& i), (long long )i);
      __CrestLoad(72784, (unsigned long )0, (long long )1);
      __CrestApply2(72783, 0, (long long )(i + 1));
      __CrestStore(72786, (unsigned long )(& i));
# 4984 "xmlparse.c"
      i ++;
    }
    while_break___0: ;
    }
# 4989 "xmlparse.c"
    goto switch_break;
    case_6:
# 4991 "xmlparse.c"
    tmp___5 = poolAppend(pool, enc, ptr, next);
    __CrestClearStack(72787);
    {
    __CrestLoad(72790, (unsigned long )(& tmp___5), (long long )((unsigned long )tmp___5));
    __CrestLoad(72789, (unsigned long )0, (long long )0);
    __CrestApply2(72788, 13, (long long )(tmp___5 != 0));
# 4991 "xmlparse.c"
    if (tmp___5 != 0) {
      __CrestBranch(72791, 46637, 1);

    } else {
      __CrestBranch(72792, 46638, 0);
      __CrestLoad(72793, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72794, (unsigned long )(& __retres45));
# 4992 "xmlparse.c"
      __retres45 = (enum XML_Error )1;
# 4992 "xmlparse.c"
      goto return_label;
    }
    }
# 4993 "xmlparse.c"
    goto switch_break;
    case_neg_3:
# 4995 "xmlparse.c"
    next = ptr + enc->minBytesPerChar;
    case_7:
    case_39:
    {
    __CrestLoad(72797, (unsigned long )(& isCdata), (long long )isCdata);
    __CrestLoad(72796, (unsigned long )0, (long long )0);
    __CrestApply2(72795, 12, (long long )(isCdata == 0));
# 4999 "xmlparse.c"
    if (isCdata == 0) {
      __CrestBranch(72798, 46643, 1);
      {
      __CrestLoad(72804, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
      __CrestLoad(72803, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
      __CrestApply2(72802, 18, (long long )(pool->ptr - pool->start));
      __CrestLoad(72801, (unsigned long )0, (long long )0L);
      __CrestApply2(72800, 12, (long long )(pool->ptr - pool->start == 0L));
# 4999 "xmlparse.c"
      if (pool->ptr - pool->start == 0L) {
        __CrestBranch(72805, 46644, 1);
# 5000 "xmlparse.c"
        goto switch_break;
      } else {
        __CrestBranch(72806, 46645, 0);
        {
# 4999 "xmlparse.c"
        mem_43 = pool->ptr + -1;
        {
        __CrestLoad(72809, (unsigned long )mem_43, (long long )*mem_43);
        __CrestLoad(72808, (unsigned long )0, (long long )32);
        __CrestApply2(72807, 12, (long long )((int )*mem_43 == 32));
# 4999 "xmlparse.c"
        if ((int )*mem_43 == 32) {
          __CrestBranch(72810, 46648, 1);
# 5000 "xmlparse.c"
          goto switch_break;
        } else {
          __CrestBranch(72811, 46649, 0);

        }
        }
        }
      }
      }
    } else {
      __CrestBranch(72799, 46650, 0);

    }
    }
    {
    __CrestLoad(72814, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(72813, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestApply2(72812, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 5001 "xmlparse.c"
    if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
      __CrestBranch(72815, 46652, 1);
# 5001 "xmlparse.c"
      tmp___9 = poolGrow(pool);
      __CrestHandleReturn(72818, (long long )tmp___9);
      __CrestStore(72817, (unsigned long )(& tmp___9));
      {
      __CrestLoad(72821, (unsigned long )(& tmp___9), (long long )tmp___9);
      __CrestLoad(72820, (unsigned long )0, (long long )0);
      __CrestApply2(72819, 13, (long long )(tmp___9 != 0));
# 5001 "xmlparse.c"
      if (tmp___9 != 0) {
        __CrestBranch(72822, 46654, 1);
# 5001 "xmlparse.c"
        tmp___7 = pool->ptr;
# 5001 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(72824, (unsigned long )0, (long long )((XML_Char )32));
        __CrestStore(72825, (unsigned long )tmp___7);
# 5001 "xmlparse.c"
        *tmp___7 = (XML_Char )32;
        __CrestLoad(72826, (unsigned long )0, (long long )1);
        __CrestStore(72827, (unsigned long )(& tmp___8));
# 5001 "xmlparse.c"
        tmp___8 = 1;
      } else {
        __CrestBranch(72823, 46655, 0);
        __CrestLoad(72828, (unsigned long )0, (long long )0);
        __CrestStore(72829, (unsigned long )(& tmp___8));
# 5001 "xmlparse.c"
        tmp___8 = 0;
      }
      }
    } else {
      __CrestBranch(72816, 46656, 0);
# 5001 "xmlparse.c"
      tmp___7 = pool->ptr;
# 5001 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(72830, (unsigned long )0, (long long )((XML_Char )32));
      __CrestStore(72831, (unsigned long )tmp___7);
# 5001 "xmlparse.c"
      *tmp___7 = (XML_Char )32;
      __CrestLoad(72832, (unsigned long )0, (long long )1);
      __CrestStore(72833, (unsigned long )(& tmp___8));
# 5001 "xmlparse.c"
      tmp___8 = 1;
    }
    }
    {
    __CrestLoad(72836, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(72835, (unsigned long )0, (long long )0);
    __CrestApply2(72834, 13, (long long )(tmp___8 != 0));
# 5001 "xmlparse.c"
    if (tmp___8 != 0) {
      __CrestBranch(72837, 46658, 1);

    } else {
      __CrestBranch(72838, 46659, 0);
      __CrestLoad(72839, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72840, (unsigned long )(& __retres45));
# 5002 "xmlparse.c"
      __retres45 = (enum XML_Error )1;
# 5002 "xmlparse.c"
      goto return_label;
    }
    }
# 5003 "xmlparse.c"
    goto switch_break;
    case_9:
# 5009 "xmlparse.c"
    mem_44 = enc->predefinedEntityName;
# 5009 "xmlparse.c"
    tmp___10 = (*mem_44)(enc, ptr + enc->minBytesPerChar, next - enc->minBytesPerChar);
    __CrestHandleReturn(72842, (long long )tmp___10);
    __CrestStore(72841, (unsigned long )(& tmp___10));
    __CrestLoad(72843, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestStore(72844, (unsigned long )(& ch));
# 5009 "xmlparse.c"
    ch = (XML_Char )tmp___10;
    {
    __CrestLoad(72847, (unsigned long )(& ch), (long long )ch);
    __CrestLoad(72846, (unsigned long )0, (long long )0);
    __CrestApply2(72845, 13, (long long )(ch != 0));
# 5012 "xmlparse.c"
    if (ch != 0) {
      __CrestBranch(72848, 46664, 1);
      {
      __CrestLoad(72852, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
      __CrestLoad(72851, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
      __CrestApply2(72850, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 5013 "xmlparse.c"
      if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
        __CrestBranch(72853, 46665, 1);
# 5013 "xmlparse.c"
        tmp___14 = poolGrow(pool);
        __CrestHandleReturn(72856, (long long )tmp___14);
        __CrestStore(72855, (unsigned long )(& tmp___14));
        {
        __CrestLoad(72859, (unsigned long )(& tmp___14), (long long )tmp___14);
        __CrestLoad(72858, (unsigned long )0, (long long )0);
        __CrestApply2(72857, 13, (long long )(tmp___14 != 0));
# 5013 "xmlparse.c"
        if (tmp___14 != 0) {
          __CrestBranch(72860, 46667, 1);
# 5013 "xmlparse.c"
          tmp___12 = pool->ptr;
# 5013 "xmlparse.c"
          (pool->ptr) ++;
          __CrestLoad(72862, (unsigned long )(& ch), (long long )ch);
          __CrestStore(72863, (unsigned long )tmp___12);
# 5013 "xmlparse.c"
          *tmp___12 = ch;
          __CrestLoad(72864, (unsigned long )0, (long long )1);
          __CrestStore(72865, (unsigned long )(& tmp___13));
# 5013 "xmlparse.c"
          tmp___13 = 1;
        } else {
          __CrestBranch(72861, 46668, 0);
          __CrestLoad(72866, (unsigned long )0, (long long )0);
          __CrestStore(72867, (unsigned long )(& tmp___13));
# 5013 "xmlparse.c"
          tmp___13 = 0;
        }
        }
      } else {
        __CrestBranch(72854, 46669, 0);
# 5013 "xmlparse.c"
        tmp___12 = pool->ptr;
# 5013 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(72868, (unsigned long )(& ch), (long long )ch);
        __CrestStore(72869, (unsigned long )tmp___12);
# 5013 "xmlparse.c"
        *tmp___12 = ch;
        __CrestLoad(72870, (unsigned long )0, (long long )1);
        __CrestStore(72871, (unsigned long )(& tmp___13));
# 5013 "xmlparse.c"
        tmp___13 = 1;
      }
      }
      {
      __CrestLoad(72874, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestLoad(72873, (unsigned long )0, (long long )0);
      __CrestApply2(72872, 13, (long long )(tmp___13 != 0));
# 5013 "xmlparse.c"
      if (tmp___13 != 0) {
        __CrestBranch(72875, 46671, 1);

      } else {
        __CrestBranch(72876, 46672, 0);
        __CrestLoad(72877, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(72878, (unsigned long )(& __retres45));
# 5014 "xmlparse.c"
        __retres45 = (enum XML_Error )1;
# 5014 "xmlparse.c"
        goto return_label;
      }
      }
# 5015 "xmlparse.c"
      goto switch_break;
    } else {
      __CrestBranch(72849, 46675, 0);

    }
    }
# 5017 "xmlparse.c"
    tmp___15 = poolStoreString(& parser->m_temp2Pool, enc, ptr + enc->minBytesPerChar,
                               next - enc->minBytesPerChar);
    __CrestClearStack(72879);
# 5017 "xmlparse.c"
    name = (XML_Char const *)tmp___15;
    {
    __CrestLoad(72882, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(72881, (unsigned long )0, (long long )0);
    __CrestApply2(72880, 12, (long long )(name == 0));
# 5020 "xmlparse.c"
    if (name == 0) {
      __CrestBranch(72883, 46678, 1);
      __CrestLoad(72885, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(72886, (unsigned long )(& __retres45));
# 5021 "xmlparse.c"
      __retres45 = (enum XML_Error )1;
# 5021 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72884, 46680, 0);

    }
    }
    __CrestLoad(72887, (unsigned long )0, (long long )((size_t )0));
# 5022 "xmlparse.c"
    tmp___16 = lookup(parser, & dtd->generalEntities, name, (size_t )0);
    __CrestClearStack(72888);
# 5022 "xmlparse.c"
    entity = (ENTITY *)tmp___16;
# 5023 "xmlparse.c"
    parser->m_temp2Pool.ptr = parser->m_temp2Pool.start;
    {
    __CrestLoad(72891, (unsigned long )(& pool), (long long )((unsigned long )pool));
    __CrestLoad(72890, (unsigned long )0, (long long )((unsigned long )(& dtd->pool)));
    __CrestApply2(72889, 12, (long long )((unsigned long )pool == (unsigned long )(& dtd->pool)));
# 5027 "xmlparse.c"
    if ((unsigned long )pool == (unsigned long )(& dtd->pool)) {
      __CrestBranch(72892, 46683, 1);
      {
      __CrestLoad(72896, (unsigned long )(& parser->m_prologState.documentEntity),
                  (long long )parser->m_prologState.documentEntity);
      __CrestLoad(72895, (unsigned long )0, (long long )0);
      __CrestApply2(72894, 13, (long long )(parser->m_prologState.documentEntity != 0));
# 5028 "xmlparse.c"
      if (parser->m_prologState.documentEntity != 0) {
        __CrestBranch(72897, 46684, 1);
        {
        __CrestLoad(72901, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
        __CrestLoad(72900, (unsigned long )0, (long long )0);
        __CrestApply2(72899, 13, (long long )(dtd->standalone != 0));
# 5028 "xmlparse.c"
        if (dtd->standalone != 0) {
          __CrestBranch(72902, 46685, 1);
          __CrestLoad(72905, (unsigned long )(& parser->m_openInternalEntities), (long long )((unsigned long )parser->m_openInternalEntities));
          __CrestApply1(72904, 21, (long long )(! parser->m_openInternalEntities));
          __CrestStore(72906, (unsigned long )(& tmp___17));
# 5028 "xmlparse.c"
          tmp___17 = ! parser->m_openInternalEntities;
        } else {
          __CrestBranch(72903, 46686, 0);
          __CrestLoad(72908, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
          __CrestApply1(72907, 21, (long long )(! dtd->hasParamEntityRefs));
          __CrestStore(72909, (unsigned long )(& tmp___17));
# 5028 "xmlparse.c"
          tmp___17 = ! dtd->hasParamEntityRefs;
        }
        }
        {
        __CrestLoad(72912, (unsigned long )(& tmp___17), (long long )tmp___17);
        __CrestLoad(72911, (unsigned long )0, (long long )0);
        __CrestApply2(72910, 13, (long long )(tmp___17 != 0));
# 5028 "xmlparse.c"
        if (tmp___17 != 0) {
          __CrestBranch(72913, 46688, 1);
          __CrestLoad(72915, (unsigned long )0, (long long )1);
          __CrestStore(72916, (unsigned long )(& tmp___18));
# 5028 "xmlparse.c"
          tmp___18 = 1;
        } else {
          __CrestBranch(72914, 46689, 0);
          __CrestLoad(72917, (unsigned long )0, (long long )0);
          __CrestStore(72918, (unsigned long )(& tmp___18));
# 5028 "xmlparse.c"
          tmp___18 = 0;
        }
        }
      } else {
        __CrestBranch(72898, 46690, 0);
        __CrestLoad(72919, (unsigned long )0, (long long )0);
        __CrestStore(72920, (unsigned long )(& tmp___18));
# 5028 "xmlparse.c"
        tmp___18 = 0;
      }
      }
      __CrestLoad(72921, (unsigned long )(& tmp___18), (long long )tmp___18);
      __CrestStore(72922, (unsigned long )(& checkEntityDecl));
# 5028 "xmlparse.c"
      checkEntityDecl = (char )tmp___18;
    } else {
      __CrestBranch(72893, 46692, 0);
      {
      __CrestLoad(72925, (unsigned long )(& dtd->hasParamEntityRefs), (long long )dtd->hasParamEntityRefs);
      __CrestLoad(72924, (unsigned long )0, (long long )0);
      __CrestApply2(72923, 12, (long long )(dtd->hasParamEntityRefs == 0));
# 5036 "xmlparse.c"
      if (dtd->hasParamEntityRefs == 0) {
        __CrestBranch(72926, 46693, 1);
        __CrestLoad(72928, (unsigned long )0, (long long )1);
        __CrestStore(72929, (unsigned long )(& tmp___19));
# 5036 "xmlparse.c"
        tmp___19 = 1;
      } else {
        __CrestBranch(72927, 46694, 0);
        {
        __CrestLoad(72932, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
        __CrestLoad(72931, (unsigned long )0, (long long )0);
        __CrestApply2(72930, 13, (long long )(dtd->standalone != 0));
# 5036 "xmlparse.c"
        if (dtd->standalone != 0) {
          __CrestBranch(72933, 46695, 1);
          __CrestLoad(72935, (unsigned long )0, (long long )1);
          __CrestStore(72936, (unsigned long )(& tmp___19));
# 5036 "xmlparse.c"
          tmp___19 = 1;
        } else {
          __CrestBranch(72934, 46696, 0);
          __CrestLoad(72937, (unsigned long )0, (long long )0);
          __CrestStore(72938, (unsigned long )(& tmp___19));
# 5036 "xmlparse.c"
          tmp___19 = 0;
        }
        }
      }
      }
      __CrestLoad(72939, (unsigned long )(& tmp___19), (long long )tmp___19);
      __CrestStore(72940, (unsigned long )(& checkEntityDecl));
# 5036 "xmlparse.c"
      checkEntityDecl = (char )tmp___19;
    }
    }
    {
    __CrestLoad(72943, (unsigned long )(& checkEntityDecl), (long long )checkEntityDecl);
    __CrestLoad(72942, (unsigned long )0, (long long )0);
    __CrestApply2(72941, 13, (long long )(checkEntityDecl != 0));
# 5037 "xmlparse.c"
    if (checkEntityDecl != 0) {
      __CrestBranch(72944, 46699, 1);
      {
      __CrestLoad(72948, (unsigned long )(& entity), (long long )((unsigned long )entity));
      __CrestLoad(72947, (unsigned long )0, (long long )0);
      __CrestApply2(72946, 12, (long long )(entity == 0));
# 5038 "xmlparse.c"
      if (entity == 0) {
        __CrestBranch(72949, 46700, 1);
        __CrestLoad(72951, (unsigned long )0, (long long )((enum XML_Error )11));
        __CrestStore(72952, (unsigned long )(& __retres45));
# 5039 "xmlparse.c"
        __retres45 = (enum XML_Error )11;
# 5039 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(72950, 46702, 0);
        {
        __CrestLoad(72955, (unsigned long )(& entity->is_internal), (long long )entity->is_internal);
        __CrestLoad(72954, (unsigned long )0, (long long )0);
        __CrestApply2(72953, 12, (long long )(entity->is_internal == 0));
# 5040 "xmlparse.c"
        if (entity->is_internal == 0) {
          __CrestBranch(72956, 46703, 1);
          __CrestLoad(72958, (unsigned long )0, (long long )((enum XML_Error )24));
          __CrestStore(72959, (unsigned long )(& __retres45));
# 5041 "xmlparse.c"
          __retres45 = (enum XML_Error )24;
# 5041 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(72957, 46705, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(72945, 46706, 0);
      {
      __CrestLoad(72962, (unsigned long )(& entity), (long long )((unsigned long )entity));
      __CrestLoad(72961, (unsigned long )0, (long long )0);
      __CrestApply2(72960, 12, (long long )(entity == 0));
# 5043 "xmlparse.c"
      if (entity == 0) {
        __CrestBranch(72963, 46707, 1);
# 5054 "xmlparse.c"
        goto switch_break;
      } else {
        __CrestBranch(72964, 46708, 0);

      }
      }
    }
    }
    {
    __CrestLoad(72967, (unsigned long )(& entity->open), (long long )entity->open);
    __CrestLoad(72966, (unsigned long )0, (long long )0);
    __CrestApply2(72965, 13, (long long )(entity->open != 0));
# 5056 "xmlparse.c"
    if (entity->open != 0) {
      __CrestBranch(72968, 46710, 1);
      {
      __CrestLoad(72972, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(72971, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(72970, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5057 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(72973, 46711, 1);
# 5058 "xmlparse.c"
        parser->m_eventPtr = ptr;
      } else {
        __CrestBranch(72974, 46712, 0);

      }
      }
      __CrestLoad(72975, (unsigned long )0, (long long )((enum XML_Error )12));
      __CrestStore(72976, (unsigned long )(& __retres45));
# 5059 "xmlparse.c"
      __retres45 = (enum XML_Error )12;
# 5059 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72969, 46715, 0);

    }
    }
    {
    __CrestLoad(72979, (unsigned long )(& entity->notation), (long long )((unsigned long )entity->notation));
    __CrestLoad(72978, (unsigned long )0, (long long )0);
    __CrestApply2(72977, 13, (long long )(entity->notation != 0));
# 5061 "xmlparse.c"
    if (entity->notation != 0) {
      __CrestBranch(72980, 46717, 1);
      {
      __CrestLoad(72984, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(72983, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(72982, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5062 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(72985, 46718, 1);
# 5063 "xmlparse.c"
        parser->m_eventPtr = ptr;
      } else {
        __CrestBranch(72986, 46719, 0);

      }
      }
      __CrestLoad(72987, (unsigned long )0, (long long )((enum XML_Error )15));
      __CrestStore(72988, (unsigned long )(& __retres45));
# 5064 "xmlparse.c"
      __retres45 = (enum XML_Error )15;
# 5064 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72981, 46722, 0);

    }
    }
    {
    __CrestLoad(72991, (unsigned long )(& entity->textPtr), (long long )((unsigned long )entity->textPtr));
    __CrestLoad(72990, (unsigned long )0, (long long )0);
    __CrestApply2(72989, 12, (long long )(entity->textPtr == 0));
# 5066 "xmlparse.c"
    if (entity->textPtr == 0) {
      __CrestBranch(72992, 46724, 1);
      {
      __CrestLoad(72996, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(72995, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(72994, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5067 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(72997, 46725, 1);
# 5068 "xmlparse.c"
        parser->m_eventPtr = ptr;
      } else {
        __CrestBranch(72998, 46726, 0);

      }
      }
      __CrestLoad(72999, (unsigned long )0, (long long )((enum XML_Error )16));
      __CrestStore(73000, (unsigned long )(& __retres45));
# 5069 "xmlparse.c"
      __retres45 = (enum XML_Error )16;
# 5069 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(72993, 46729, 0);
# 5073 "xmlparse.c"
      textEnd = entity->textPtr + entity->textLen;
      __CrestLoad(73001, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(73002, (unsigned long )(& entity->open));
# 5074 "xmlparse.c"
      entity->open = (XML_Bool )1;
      __CrestLoad(73003, (unsigned long )(& isCdata), (long long )isCdata);
# 5075 "xmlparse.c"
      result = appendAttributeValue(parser, parser->m_internalEncoding, isCdata, (char const *)((char *)entity->textPtr),
                                    (char const *)((char *)textEnd), pool);
      __CrestHandleReturn(73005, (long long )result);
      __CrestStore(73004, (unsigned long )(& result));
      __CrestLoad(73006, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(73007, (unsigned long )(& entity->open));
# 5078 "xmlparse.c"
      entity->open = (XML_Bool )0;
      {
      __CrestLoad(73010, (unsigned long )(& result), (long long )result);
      __CrestLoad(73009, (unsigned long )0, (long long )0);
      __CrestApply2(73008, 13, (long long )(result != 0));
# 5079 "xmlparse.c"
      if (result != 0) {
        __CrestBranch(73011, 46731, 1);
        __CrestLoad(73013, (unsigned long )(& result), (long long )result);
        __CrestStore(73014, (unsigned long )(& __retres45));
# 5080 "xmlparse.c"
        __retres45 = result;
# 5080 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(73012, 46733, 0);

      }
      }
    }
    }
# 5083 "xmlparse.c"
    goto switch_break;
    switch_default:
    {
    __CrestLoad(73017, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(73016, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(73015, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5085 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(73018, 46736, 1);
# 5086 "xmlparse.c"
      parser->m_eventPtr = ptr;
    } else {
      __CrestBranch(73019, 46737, 0);

    }
    }
    __CrestLoad(73020, (unsigned long )0, (long long )((enum XML_Error )23));
    __CrestStore(73021, (unsigned long )(& __retres45));
# 5087 "xmlparse.c"
    __retres45 = (enum XML_Error )23;
# 5087 "xmlparse.c"
    goto return_label;
    switch_break: ;
    }
# 5089 "xmlparse.c"
    ptr = next;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(73022, (unsigned long )(& __retres45), (long long )__retres45);
  __CrestReturn(73023);
# 4944 "xmlparse.c"
  return (__retres45);
  }
}
}
# 5094 "xmlparse.c"
static enum XML_Error storeEntityValue(XML_Parser parser , ENCODING const *enc ,
                                       char const *entityTextPtr , char const *entityTextEnd )
{
  DTD *dtd ;
  STRING_POOL *pool ;
  enum XML_Error result ;
  int oldInEntityValue ;
  XML_Bool tmp ;
  char const *next ;
  int tok ;
  int tmp___0 ;
  XML_Char const *name ;
  ENTITY *entity ;
  XML_Char *tmp___1 ;
  NAMED *tmp___2 ;
  int tmp___3 ;
  XML_Char *tmp___4 ;
  XML_Bool tmp___5 ;
  XML_Char *tmp___6 ;
  XML_Char buf[4] ;
  int i ;
  int n ;
  int tmp___7 ;
  XML_Bool tmp___8 ;
  XML_Char *tmp___9 ;
  SCANNER mem_27 ;
  int (*mem_28)(XML_Parser parser , XML_Char const *context , XML_Char const *base ,
                XML_Char const *systemId , XML_Char const *publicId ) ;
  int (*mem_29)(ENCODING const *enc , char const *ptr ) ;
  enum XML_Error __retres30 ;

  {
  __CrestCall(73024, 788);
# 5100 "xmlparse.c"
  dtd = parser->m_dtd;
# 5101 "xmlparse.c"
  pool = & dtd->entityValuePool;
  __CrestLoad(73025, (unsigned long )0, (long long )((enum XML_Error )0));
  __CrestStore(73026, (unsigned long )(& result));
# 5102 "xmlparse.c"
  result = (enum XML_Error )0;
  __CrestLoad(73027, (unsigned long )(& parser->m_prologState.inEntityValue), (long long )parser->m_prologState.inEntityValue);
  __CrestStore(73028, (unsigned long )(& oldInEntityValue));
# 5104 "xmlparse.c"
  oldInEntityValue = parser->m_prologState.inEntityValue;
  __CrestLoad(73029, (unsigned long )0, (long long )1);
  __CrestStore(73030, (unsigned long )(& parser->m_prologState.inEntityValue));
# 5105 "xmlparse.c"
  parser->m_prologState.inEntityValue = 1;
  {
  __CrestLoad(73033, (unsigned long )(& pool->blocks), (long long )((unsigned long )pool->blocks));
  __CrestLoad(73032, (unsigned long )0, (long long )0);
  __CrestApply2(73031, 12, (long long )(pool->blocks == 0));
# 5110 "xmlparse.c"
  if (pool->blocks == 0) {
    __CrestBranch(73034, 46746, 1);
# 5111 "xmlparse.c"
    tmp = poolGrow(pool);
    __CrestHandleReturn(73037, (long long )tmp);
    __CrestStore(73036, (unsigned long )(& tmp));
    {
    __CrestLoad(73040, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(73039, (unsigned long )0, (long long )0);
    __CrestApply2(73038, 13, (long long )(tmp != 0));
# 5111 "xmlparse.c"
    if (tmp != 0) {
      __CrestBranch(73041, 46748, 1);

    } else {
      __CrestBranch(73042, 46749, 0);
      __CrestLoad(73043, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(73044, (unsigned long )(& __retres30));
# 5112 "xmlparse.c"
      __retres30 = (enum XML_Error )1;
# 5112 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(73035, 46751, 0);

  }
  }
  {
# 5115 "xmlparse.c"
  while (1) {
    while_continue: ;
# 5117 "xmlparse.c"
    mem_27 = enc->literalScanners[1];
# 5117 "xmlparse.c"
    tmp___0 = (*mem_27)(enc, entityTextPtr, entityTextEnd, & next);
    __CrestHandleReturn(73046, (long long )tmp___0);
    __CrestStore(73045, (unsigned long )(& tmp___0));
    __CrestLoad(73047, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(73048, (unsigned long )(& tok));
# 5117 "xmlparse.c"
    tok = tmp___0;
    {
    {
    __CrestLoad(73051, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73050, (unsigned long )0, (long long )28);
    __CrestApply2(73049, 12, (long long )(tok == 28));
# 5119 "xmlparse.c"
    if (tok == 28) {
      __CrestBranch(73052, 46758, 1);
# 5119 "xmlparse.c"
      goto case_28;
    } else {
      __CrestBranch(73053, 46759, 0);

    }
    }
    {
    __CrestLoad(73056, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73055, (unsigned long )0, (long long )-4);
    __CrestApply2(73054, 12, (long long )(tok == -4));
# 5188 "xmlparse.c"
    if (tok == -4) {
      __CrestBranch(73057, 46761, 1);
# 5188 "xmlparse.c"
      goto case_neg_4;
    } else {
      __CrestBranch(73058, 46762, 0);

    }
    }
    {
    __CrestLoad(73061, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73060, (unsigned long )0, (long long )6);
    __CrestApply2(73059, 12, (long long )(tok == 6));
# 5192 "xmlparse.c"
    if (tok == 6) {
      __CrestBranch(73062, 46764, 1);
# 5192 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(73063, 46765, 0);

    }
    }
    {
    __CrestLoad(73066, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73065, (unsigned long )0, (long long )9);
    __CrestApply2(73064, 12, (long long )(tok == 9));
# 5192 "xmlparse.c"
    if (tok == 9) {
      __CrestBranch(73067, 46767, 1);
# 5192 "xmlparse.c"
      goto case_6;
    } else {
      __CrestBranch(73068, 46768, 0);

    }
    }
    {
    __CrestLoad(73071, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73070, (unsigned long )0, (long long )-3);
    __CrestApply2(73069, 12, (long long )(tok == -3));
# 5198 "xmlparse.c"
    if (tok == -3) {
      __CrestBranch(73072, 46770, 1);
# 5198 "xmlparse.c"
      goto case_neg_3;
    } else {
      __CrestBranch(73073, 46771, 0);

    }
    }
    {
    __CrestLoad(73076, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73075, (unsigned long )0, (long long )7);
    __CrestApply2(73074, 12, (long long )(tok == 7));
# 5201 "xmlparse.c"
    if (tok == 7) {
      __CrestBranch(73077, 46773, 1);
# 5201 "xmlparse.c"
      goto case_7;
    } else {
      __CrestBranch(73078, 46774, 0);

    }
    }
    {
    __CrestLoad(73081, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73080, (unsigned long )0, (long long )10);
    __CrestApply2(73079, 12, (long long )(tok == 10));
# 5208 "xmlparse.c"
    if (tok == 10) {
      __CrestBranch(73082, 46776, 1);
# 5208 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(73083, 46777, 0);

    }
    }
    {
    __CrestLoad(73086, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73085, (unsigned long )0, (long long )-1);
    __CrestApply2(73084, 12, (long long )(tok == -1));
# 5235 "xmlparse.c"
    if (tok == -1) {
      __CrestBranch(73087, 46779, 1);
# 5235 "xmlparse.c"
      goto case_neg_1;
    } else {
      __CrestBranch(73088, 46780, 0);

    }
    }
    {
    __CrestLoad(73091, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(73090, (unsigned long )0, (long long )0);
    __CrestApply2(73089, 12, (long long )(tok == 0));
# 5240 "xmlparse.c"
    if (tok == 0) {
      __CrestBranch(73092, 46782, 1);
# 5240 "xmlparse.c"
      goto case_0;
    } else {
      __CrestBranch(73093, 46783, 0);

    }
    }
# 5245 "xmlparse.c"
    goto switch_default;
    case_28:
    {
    __CrestLoad(73096, (unsigned long )(& parser->m_isParamEntity), (long long )parser->m_isParamEntity);
    __CrestLoad(73095, (unsigned long )0, (long long )0);
    __CrestApply2(73094, 13, (long long )(parser->m_isParamEntity != 0));
# 5121 "xmlparse.c"
    if (parser->m_isParamEntity != 0) {
      __CrestBranch(73097, 46786, 1);
# 5121 "xmlparse.c"
      goto _L;
    } else {
      __CrestBranch(73098, 46787, 0);
      {
      __CrestLoad(73101, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(73100, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(73099, 13, (long long )((unsigned long )enc != (unsigned long )parser->m_encoding));
# 5121 "xmlparse.c"
      if ((unsigned long )enc != (unsigned long )parser->m_encoding) {
        __CrestBranch(73102, 46788, 1);
        _L:
# 5124 "xmlparse.c"
        tmp___1 = poolStoreString(& parser->m_tempPool, enc, entityTextPtr + enc->minBytesPerChar,
                                  next - enc->minBytesPerChar);
        __CrestClearStack(73104);
# 5124 "xmlparse.c"
        name = (XML_Char const *)tmp___1;
        {
        __CrestLoad(73107, (unsigned long )(& name), (long long )((unsigned long )name));
        __CrestLoad(73106, (unsigned long )0, (long long )0);
        __CrestApply2(73105, 12, (long long )(name == 0));
# 5127 "xmlparse.c"
        if (name == 0) {
          __CrestBranch(73108, 46790, 1);
          __CrestLoad(73110, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(73111, (unsigned long )(& result));
# 5128 "xmlparse.c"
          result = (enum XML_Error )1;
# 5129 "xmlparse.c"
          goto endEntityValue;
        } else {
          __CrestBranch(73109, 46792, 0);

        }
        }
        __CrestLoad(73112, (unsigned long )0, (long long )((size_t )0));
# 5131 "xmlparse.c"
        tmp___2 = lookup(parser, & dtd->paramEntities, name, (size_t )0);
        __CrestClearStack(73113);
# 5131 "xmlparse.c"
        entity = (ENTITY *)tmp___2;
# 5132 "xmlparse.c"
        parser->m_tempPool.ptr = parser->m_tempPool.start;
        {
        __CrestLoad(73116, (unsigned long )(& entity), (long long )((unsigned long )entity));
        __CrestLoad(73115, (unsigned long )0, (long long )0);
        __CrestApply2(73114, 12, (long long )(entity == 0));
# 5133 "xmlparse.c"
        if (entity == 0) {
          __CrestBranch(73117, 46795, 1);
          __CrestLoad(73119, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
          __CrestStore(73120, (unsigned long )(& dtd->keepProcessing));
# 5140 "xmlparse.c"
          dtd->keepProcessing = dtd->standalone;
# 5141 "xmlparse.c"
          goto endEntityValue;
        } else {
          __CrestBranch(73118, 46797, 0);

        }
        }
        {
        __CrestLoad(73123, (unsigned long )(& entity->open), (long long )entity->open);
        __CrestLoad(73122, (unsigned long )0, (long long )0);
        __CrestApply2(73121, 13, (long long )(entity->open != 0));
# 5143 "xmlparse.c"
        if (entity->open != 0) {
          __CrestBranch(73124, 46799, 1);
          {
          __CrestLoad(73128, (unsigned long )(& enc), (long long )((unsigned long )enc));
          __CrestLoad(73127, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
          __CrestApply2(73126, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5144 "xmlparse.c"
          if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
            __CrestBranch(73129, 46800, 1);
# 5145 "xmlparse.c"
            parser->m_eventPtr = entityTextPtr;
          } else {
            __CrestBranch(73130, 46801, 0);

          }
          }
          __CrestLoad(73131, (unsigned long )0, (long long )((enum XML_Error )12));
          __CrestStore(73132, (unsigned long )(& result));
# 5146 "xmlparse.c"
          result = (enum XML_Error )12;
# 5147 "xmlparse.c"
          goto endEntityValue;
        } else {
          __CrestBranch(73125, 46804, 0);

        }
        }
        {
        __CrestLoad(73135, (unsigned long )(& entity->systemId), (long long )((unsigned long )entity->systemId));
        __CrestLoad(73134, (unsigned long )0, (long long )0);
        __CrestApply2(73133, 13, (long long )(entity->systemId != 0));
# 5149 "xmlparse.c"
        if (entity->systemId != 0) {
          __CrestBranch(73136, 46806, 1);
          {
          __CrestLoad(73140, (unsigned long )(& parser->m_externalEntityRefHandler),
                      (long long )((unsigned long )parser->m_externalEntityRefHandler));
          __CrestLoad(73139, (unsigned long )0, (long long )0);
          __CrestApply2(73138, 13, (long long )(parser->m_externalEntityRefHandler != 0));
# 5150 "xmlparse.c"
          if (parser->m_externalEntityRefHandler != 0) {
            __CrestBranch(73141, 46807, 1);
            __CrestLoad(73143, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(73144, (unsigned long )(& dtd->paramEntityRead));
# 5151 "xmlparse.c"
            dtd->paramEntityRead = (XML_Bool )0;
            __CrestLoad(73145, (unsigned long )0, (long long )((XML_Bool )1));
            __CrestStore(73146, (unsigned long )(& entity->open));
# 5152 "xmlparse.c"
            entity->open = (XML_Bool )1;
# 5153 "xmlparse.c"
            mem_28 = parser->m_externalEntityRefHandler;
# 5153 "xmlparse.c"
            tmp___3 = (*mem_28)(parser->m_externalEntityRefHandlerArg, (XML_Char const *)0,
                                entity->base, entity->systemId, entity->publicId);
            __CrestHandleReturn(73148, (long long )tmp___3);
            __CrestStore(73147, (unsigned long )(& tmp___3));
            {
            __CrestLoad(73151, (unsigned long )(& tmp___3), (long long )tmp___3);
            __CrestLoad(73150, (unsigned long )0, (long long )0);
            __CrestApply2(73149, 13, (long long )(tmp___3 != 0));
# 5153 "xmlparse.c"
            if (tmp___3 != 0) {
              __CrestBranch(73152, 46809, 1);

            } else {
              __CrestBranch(73153, 46810, 0);
              __CrestLoad(73154, (unsigned long )0, (long long )((XML_Bool )0));
              __CrestStore(73155, (unsigned long )(& entity->open));
# 5158 "xmlparse.c"
              entity->open = (XML_Bool )0;
              __CrestLoad(73156, (unsigned long )0, (long long )((enum XML_Error )21));
              __CrestStore(73157, (unsigned long )(& result));
# 5159 "xmlparse.c"
              result = (enum XML_Error )21;
# 5160 "xmlparse.c"
              goto endEntityValue;
            }
            }
            __CrestLoad(73158, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(73159, (unsigned long )(& entity->open));
# 5162 "xmlparse.c"
            entity->open = (XML_Bool )0;
            {
            __CrestLoad(73162, (unsigned long )(& dtd->paramEntityRead), (long long )dtd->paramEntityRead);
            __CrestLoad(73161, (unsigned long )0, (long long )0);
            __CrestApply2(73160, 12, (long long )(dtd->paramEntityRead == 0));
# 5163 "xmlparse.c"
            if (dtd->paramEntityRead == 0) {
              __CrestBranch(73163, 46814, 1);
              __CrestLoad(73165, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
              __CrestStore(73166, (unsigned long )(& dtd->keepProcessing));
# 5164 "xmlparse.c"
              dtd->keepProcessing = dtd->standalone;
            } else {
              __CrestBranch(73164, 46815, 0);

            }
            }
          } else {
            __CrestBranch(73142, 46816, 0);
            __CrestLoad(73167, (unsigned long )(& dtd->standalone), (long long )dtd->standalone);
            __CrestStore(73168, (unsigned long )(& dtd->keepProcessing));
# 5167 "xmlparse.c"
            dtd->keepProcessing = dtd->standalone;
          }
          }
        } else {
          __CrestBranch(73137, 46817, 0);
          __CrestLoad(73169, (unsigned long )0, (long long )((XML_Bool )1));
          __CrestStore(73170, (unsigned long )(& entity->open));
# 5170 "xmlparse.c"
          entity->open = (XML_Bool )1;
# 5171 "xmlparse.c"
          result = storeEntityValue(parser, parser->m_internalEncoding, (char const *)((char *)entity->textPtr),
                                    (char const *)((char *)(entity->textPtr + entity->textLen)));
          __CrestHandleReturn(73172, (long long )result);
          __CrestStore(73171, (unsigned long )(& result));
          __CrestLoad(73173, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(73174, (unsigned long )(& entity->open));
# 5176 "xmlparse.c"
          entity->open = (XML_Bool )0;
          {
          __CrestLoad(73177, (unsigned long )(& result), (long long )result);
          __CrestLoad(73176, (unsigned long )0, (long long )0);
          __CrestApply2(73175, 13, (long long )(result != 0));
# 5177 "xmlparse.c"
          if (result != 0) {
            __CrestBranch(73178, 46819, 1);
# 5178 "xmlparse.c"
            goto endEntityValue;
          } else {
            __CrestBranch(73179, 46820, 0);

          }
          }
        }
        }
# 5180 "xmlparse.c"
        goto switch_break;
      } else {
        __CrestBranch(73103, 46822, 0);

      }
      }
    }
    }
# 5185 "xmlparse.c"
    parser->m_eventPtr = entityTextPtr;
    __CrestLoad(73180, (unsigned long )0, (long long )((enum XML_Error )10));
    __CrestStore(73181, (unsigned long )(& result));
# 5186 "xmlparse.c"
    result = (enum XML_Error )10;
# 5187 "xmlparse.c"
    goto endEntityValue;
    case_neg_4:
    __CrestLoad(73182, (unsigned long )0, (long long )((enum XML_Error )0));
    __CrestStore(73183, (unsigned long )(& result));
# 5189 "xmlparse.c"
    result = (enum XML_Error )0;
# 5190 "xmlparse.c"
    goto endEntityValue;
    case_6:
    case_9:
# 5193 "xmlparse.c"
    tmp___4 = poolAppend(pool, enc, entityTextPtr, next);
    __CrestClearStack(73184);
    {
    __CrestLoad(73187, (unsigned long )(& tmp___4), (long long )((unsigned long )tmp___4));
    __CrestLoad(73186, (unsigned long )0, (long long )0);
    __CrestApply2(73185, 13, (long long )(tmp___4 != 0));
# 5193 "xmlparse.c"
    if (tmp___4 != 0) {
      __CrestBranch(73188, 46829, 1);

    } else {
      __CrestBranch(73189, 46830, 0);
      __CrestLoad(73190, (unsigned long )0, (long long )((enum XML_Error )1));
      __CrestStore(73191, (unsigned long )(& result));
# 5194 "xmlparse.c"
      result = (enum XML_Error )1;
# 5195 "xmlparse.c"
      goto endEntityValue;
    }
    }
# 5197 "xmlparse.c"
    goto switch_break;
    case_neg_3:
# 5199 "xmlparse.c"
    next = entityTextPtr + enc->minBytesPerChar;
    case_7:
    {
    __CrestLoad(73194, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestLoad(73193, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestApply2(73192, 12, (long long )((unsigned long )pool->end == (unsigned long )pool->ptr));
# 5202 "xmlparse.c"
    if ((unsigned long )pool->end == (unsigned long )pool->ptr) {
      __CrestBranch(73195, 46835, 1);
# 5202 "xmlparse.c"
      tmp___5 = poolGrow(pool);
      __CrestHandleReturn(73198, (long long )tmp___5);
      __CrestStore(73197, (unsigned long )(& tmp___5));
      {
      __CrestLoad(73201, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(73200, (unsigned long )0, (long long )0);
      __CrestApply2(73199, 13, (long long )(tmp___5 != 0));
# 5202 "xmlparse.c"
      if (tmp___5 != 0) {
        __CrestBranch(73202, 46837, 1);

      } else {
        __CrestBranch(73203, 46838, 0);
        __CrestLoad(73204, (unsigned long )0, (long long )((enum XML_Error )1));
        __CrestStore(73205, (unsigned long )(& result));
# 5203 "xmlparse.c"
        result = (enum XML_Error )1;
# 5204 "xmlparse.c"
        goto endEntityValue;
      }
      }
    } else {
      __CrestBranch(73196, 46840, 0);

    }
    }
# 5206 "xmlparse.c"
    tmp___6 = pool->ptr;
# 5206 "xmlparse.c"
    (pool->ptr) ++;
    __CrestLoad(73206, (unsigned long )0, (long long )((XML_Char )10));
    __CrestStore(73207, (unsigned long )tmp___6);
# 5206 "xmlparse.c"
    *tmp___6 = (XML_Char )10;
# 5207 "xmlparse.c"
    goto switch_break;
    case_10:
# 5212 "xmlparse.c"
    mem_29 = enc->charRefNumber;
# 5212 "xmlparse.c"
    tmp___7 = (*mem_29)(enc, entityTextPtr);
    __CrestHandleReturn(73209, (long long )tmp___7);
    __CrestStore(73208, (unsigned long )(& tmp___7));
    __CrestLoad(73210, (unsigned long )(& tmp___7), (long long )tmp___7);
    __CrestStore(73211, (unsigned long )(& n));
# 5212 "xmlparse.c"
    n = tmp___7;
    {
    __CrestLoad(73214, (unsigned long )(& n), (long long )n);
    __CrestLoad(73213, (unsigned long )0, (long long )0);
    __CrestApply2(73212, 16, (long long )(n < 0));
# 5213 "xmlparse.c"
    if (n < 0) {
      __CrestBranch(73215, 46845, 1);
      {
      __CrestLoad(73219, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(73218, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(73217, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5214 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(73220, 46846, 1);
# 5215 "xmlparse.c"
        parser->m_eventPtr = entityTextPtr;
      } else {
        __CrestBranch(73221, 46847, 0);

      }
      }
      __CrestLoad(73222, (unsigned long )0, (long long )((enum XML_Error )14));
      __CrestStore(73223, (unsigned long )(& result));
# 5216 "xmlparse.c"
      result = (enum XML_Error )14;
# 5217 "xmlparse.c"
      goto endEntityValue;
    } else {
      __CrestBranch(73216, 46850, 0);

    }
    }
    __CrestLoad(73224, (unsigned long )(& n), (long long )n);
# 5219 "xmlparse.c"
    n = XmlUtf8Encode(n, buf);
    __CrestHandleReturn(73226, (long long )n);
    __CrestStore(73225, (unsigned long )(& n));
    {
    __CrestLoad(73229, (unsigned long )(& n), (long long )n);
    __CrestLoad(73228, (unsigned long )0, (long long )0);
    __CrestApply2(73227, 12, (long long )(n == 0));
# 5220 "xmlparse.c"
    if (n == 0) {
      __CrestBranch(73230, 46853, 1);
      {
      __CrestLoad(73234, (unsigned long )(& enc), (long long )((unsigned long )enc));
      __CrestLoad(73233, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
      __CrestApply2(73232, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5221 "xmlparse.c"
      if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
        __CrestBranch(73235, 46854, 1);
# 5222 "xmlparse.c"
        parser->m_eventPtr = entityTextPtr;
      } else {
        __CrestBranch(73236, 46855, 0);

      }
      }
      __CrestLoad(73237, (unsigned long )0, (long long )((enum XML_Error )14));
      __CrestStore(73238, (unsigned long )(& result));
# 5223 "xmlparse.c"
      result = (enum XML_Error )14;
# 5224 "xmlparse.c"
      goto endEntityValue;
    } else {
      __CrestBranch(73231, 46858, 0);

    }
    }
    __CrestLoad(73239, (unsigned long )0, (long long )0);
    __CrestStore(73240, (unsigned long )(& i));
# 5226 "xmlparse.c"
    i = 0;
    {
# 5226 "xmlparse.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(73243, (unsigned long )(& i), (long long )i);
      __CrestLoad(73242, (unsigned long )(& n), (long long )n);
      __CrestApply2(73241, 16, (long long )(i < n));
# 5226 "xmlparse.c"
      if (i < n) {
        __CrestBranch(73244, 46864, 1);

      } else {
        __CrestBranch(73245, 46865, 0);
# 5226 "xmlparse.c"
        goto while_break___0;
      }
      }
      {
      __CrestLoad(73248, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
      __CrestLoad(73247, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
      __CrestApply2(73246, 12, (long long )((unsigned long )pool->end == (unsigned long )pool->ptr));
# 5227 "xmlparse.c"
      if ((unsigned long )pool->end == (unsigned long )pool->ptr) {
        __CrestBranch(73249, 46867, 1);
# 5227 "xmlparse.c"
        tmp___8 = poolGrow(pool);
        __CrestHandleReturn(73252, (long long )tmp___8);
        __CrestStore(73251, (unsigned long )(& tmp___8));
        {
        __CrestLoad(73255, (unsigned long )(& tmp___8), (long long )tmp___8);
        __CrestLoad(73254, (unsigned long )0, (long long )0);
        __CrestApply2(73253, 13, (long long )(tmp___8 != 0));
# 5227 "xmlparse.c"
        if (tmp___8 != 0) {
          __CrestBranch(73256, 46869, 1);

        } else {
          __CrestBranch(73257, 46870, 0);
          __CrestLoad(73258, (unsigned long )0, (long long )((enum XML_Error )1));
          __CrestStore(73259, (unsigned long )(& result));
# 5228 "xmlparse.c"
          result = (enum XML_Error )1;
# 5229 "xmlparse.c"
          goto endEntityValue;
        }
        }
      } else {
        __CrestBranch(73250, 46872, 0);

      }
      }
# 5231 "xmlparse.c"
      tmp___9 = pool->ptr;
# 5231 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(73260, (unsigned long )(& buf[i]), (long long )buf[i]);
      __CrestStore(73261, (unsigned long )tmp___9);
# 5231 "xmlparse.c"
      *tmp___9 = buf[i];
      __CrestLoad(73264, (unsigned long )(& i), (long long )i);
      __CrestLoad(73263, (unsigned long )0, (long long )1);
      __CrestApply2(73262, 0, (long long )(i + 1));
      __CrestStore(73265, (unsigned long )(& i));
# 5226 "xmlparse.c"
      i ++;
    }
    while_break___0: ;
    }
# 5234 "xmlparse.c"
    goto switch_break;
    case_neg_1:
    {
    __CrestLoad(73268, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(73267, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(73266, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5236 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(73269, 46877, 1);
# 5237 "xmlparse.c"
      parser->m_eventPtr = entityTextPtr;
    } else {
      __CrestBranch(73270, 46878, 0);

    }
    }
    __CrestLoad(73271, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(73272, (unsigned long )(& result));
# 5238 "xmlparse.c"
    result = (enum XML_Error )4;
# 5239 "xmlparse.c"
    goto endEntityValue;
    case_0:
    {
    __CrestLoad(73275, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(73274, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(73273, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5241 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(73276, 46882, 1);
# 5242 "xmlparse.c"
      parser->m_eventPtr = next;
    } else {
      __CrestBranch(73277, 46883, 0);

    }
    }
    __CrestLoad(73278, (unsigned long )0, (long long )((enum XML_Error )4));
    __CrestStore(73279, (unsigned long )(& result));
# 5243 "xmlparse.c"
    result = (enum XML_Error )4;
# 5244 "xmlparse.c"
    goto endEntityValue;
    switch_default:
    {
    __CrestLoad(73282, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(73281, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(73280, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5246 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(73283, 46887, 1);
# 5247 "xmlparse.c"
      parser->m_eventPtr = entityTextPtr;
    } else {
      __CrestBranch(73284, 46888, 0);

    }
    }
    __CrestLoad(73285, (unsigned long )0, (long long )((enum XML_Error )23));
    __CrestStore(73286, (unsigned long )(& result));
# 5248 "xmlparse.c"
    result = (enum XML_Error )23;
# 5249 "xmlparse.c"
    goto endEntityValue;
    switch_break: ;
    }
# 5251 "xmlparse.c"
    entityTextPtr = next;
  }
  while_break: ;
  }
  endEntityValue:
  __CrestLoad(73287, (unsigned long )(& oldInEntityValue), (long long )oldInEntityValue);
  __CrestStore(73288, (unsigned long )(& parser->m_prologState.inEntityValue));
# 5255 "xmlparse.c"
  parser->m_prologState.inEntityValue = oldInEntityValue;
  __CrestLoad(73289, (unsigned long )(& result), (long long )result);
  __CrestStore(73290, (unsigned long )(& __retres30));
# 5257 "xmlparse.c"
  __retres30 = result;
  return_label:
  {
  __CrestLoad(73291, (unsigned long )(& __retres30), (long long )__retres30);
  __CrestReturn(73292);
# 5094 "xmlparse.c"
  return (__retres30);
  }
}
}
# 5260 "xmlparse.c"
static void normalizeLines(XML_Char *s )
{
  XML_Char *p ;
  XML_Char *tmp ;
  XML_Char *tmp___0 ;
  XML_Char *tmp___1 ;

  {
  __CrestCall(73293, 789);

  {
# 5264 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(73296, (unsigned long )s, (long long )*s);
    __CrestLoad(73295, (unsigned long )0, (long long )0);
    __CrestApply2(73294, 12, (long long )((int )*s == 0));
# 5265 "xmlparse.c"
    if ((int )*s == 0) {
      __CrestBranch(73297, 46901, 1);
# 5266 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(73298, 46903, 0);

    }
    }
    {
    __CrestLoad(73301, (unsigned long )s, (long long )*s);
    __CrestLoad(73300, (unsigned long )0, (long long )13);
    __CrestApply2(73299, 12, (long long )((int )*s == 13));
# 5267 "xmlparse.c"
    if ((int )*s == 13) {
      __CrestBranch(73302, 46905, 1);
# 5268 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(73303, 46906, 0);

    }
    }
# 5264 "xmlparse.c"
    s ++;
  }
  while_break: ;
  }
# 5270 "xmlparse.c"
  p = s;
  {
# 5271 "xmlparse.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(73306, (unsigned long )s, (long long )*s);
    __CrestLoad(73305, (unsigned long )0, (long long )13);
    __CrestApply2(73304, 12, (long long )((int )*s == 13));
# 5272 "xmlparse.c"
    if ((int )*s == 13) {
      __CrestBranch(73307, 46914, 1);
# 5273 "xmlparse.c"
      tmp = p;
# 5273 "xmlparse.c"
      p ++;
      __CrestLoad(73309, (unsigned long )0, (long long )((XML_Char )10));
      __CrestStore(73310, (unsigned long )tmp);
# 5273 "xmlparse.c"
      *tmp = (XML_Char )10;
# 5274 "xmlparse.c"
      s ++;
      {
      __CrestLoad(73313, (unsigned long )s, (long long )*s);
      __CrestLoad(73312, (unsigned long )0, (long long )10);
      __CrestApply2(73311, 12, (long long )((int )*s == 10));
# 5274 "xmlparse.c"
      if ((int )*s == 10) {
        __CrestBranch(73314, 46916, 1);
# 5275 "xmlparse.c"
        s ++;
      } else {
        __CrestBranch(73315, 46917, 0);

      }
      }
    } else {
      __CrestBranch(73308, 46918, 0);
# 5278 "xmlparse.c"
      tmp___0 = p;
# 5278 "xmlparse.c"
      p ++;
# 5278 "xmlparse.c"
      tmp___1 = s;
# 5278 "xmlparse.c"
      s ++;
      __CrestLoad(73316, (unsigned long )tmp___1, (long long )*tmp___1);
      __CrestStore(73317, (unsigned long )tmp___0);
# 5278 "xmlparse.c"
      *tmp___0 = *tmp___1;
    }
    }
    {
    __CrestLoad(73320, (unsigned long )s, (long long )*s);
    __CrestLoad(73319, (unsigned long )0, (long long )0);
    __CrestApply2(73318, 13, (long long )(*s != 0));
# 5271 "xmlparse.c"
    if (*s != 0) {
      __CrestBranch(73321, 46920, 1);

    } else {
      __CrestBranch(73322, 46921, 0);
# 5271 "xmlparse.c"
      goto while_break___0;
    }
    }
  }
  while_break___0: ;
  }
  __CrestLoad(73323, (unsigned long )0, (long long )((XML_Char )'\000'));
  __CrestStore(73324, (unsigned long )p);
# 5280 "xmlparse.c"
  *p = (XML_Char )'\000';

  return_label:
  {
  __CrestReturn(73325);
# 5260 "xmlparse.c"
  return;
  }
}
}
# 5283 "xmlparse.c"
static int reportProcessingInstruction(XML_Parser parser , ENCODING const *enc ,
                                       char const *start , char const *end )
{
  XML_Char const *target ;
  XML_Char *data ;
  char const *tem ;
  int tmp ;
  XML_Char *tmp___0 ;
  char const *tmp___1 ;
  int (*mem_11)(ENCODING const * , char const * ) ;
  char const *(*mem_12)(ENCODING const * , char const * ) ;
  void (*mem_13)(void *userData , XML_Char const *target , XML_Char const *data ) ;
  int __retres14 ;

  {
  __CrestCall(73326, 790);

  {
  __CrestLoad(73329, (unsigned long )(& parser->m_processingInstructionHandler), (long long )((unsigned long )parser->m_processingInstructionHandler));
  __CrestLoad(73328, (unsigned long )0, (long long )0);
  __CrestApply2(73327, 12, (long long )(parser->m_processingInstructionHandler == 0));
# 5290 "xmlparse.c"
  if (parser->m_processingInstructionHandler == 0) {
    __CrestBranch(73330, 46927, 1);
    {
    __CrestLoad(73334, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(73333, (unsigned long )0, (long long )0);
    __CrestApply2(73332, 13, (long long )(parser->m_defaultHandler != 0));
# 5291 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(73335, 46928, 1);
# 5292 "xmlparse.c"
      reportDefault(parser, enc, start, end);
      __CrestClearStack(73337);
    } else {
      __CrestBranch(73336, 46929, 0);

    }
    }
    __CrestLoad(73338, (unsigned long )0, (long long )1);
    __CrestStore(73339, (unsigned long )(& __retres14));
# 5293 "xmlparse.c"
    __retres14 = 1;
# 5293 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73331, 46932, 0);

  }
  }
# 5295 "xmlparse.c"
  start += enc->minBytesPerChar * 2;
# 5296 "xmlparse.c"
  mem_11 = enc->nameLength;
# 5296 "xmlparse.c"
  tmp = (*mem_11)(enc, start);
  __CrestHandleReturn(73341, (long long )tmp);
  __CrestStore(73340, (unsigned long )(& tmp));
# 5296 "xmlparse.c"
  tem = start + tmp;
# 5297 "xmlparse.c"
  tmp___0 = poolStoreString(& parser->m_tempPool, enc, start, tem);
  __CrestClearStack(73342);
# 5297 "xmlparse.c"
  target = (XML_Char const *)tmp___0;
  {
  __CrestLoad(73345, (unsigned long )(& target), (long long )((unsigned long )target));
  __CrestLoad(73344, (unsigned long )0, (long long )0);
  __CrestApply2(73343, 12, (long long )(target == 0));
# 5298 "xmlparse.c"
  if (target == 0) {
    __CrestBranch(73346, 46935, 1);
    __CrestLoad(73348, (unsigned long )0, (long long )0);
    __CrestStore(73349, (unsigned long )(& __retres14));
# 5299 "xmlparse.c"
    __retres14 = 0;
# 5299 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73347, 46937, 0);

  }
  }
# 5300 "xmlparse.c"
  parser->m_tempPool.start = parser->m_tempPool.ptr;
# 5301 "xmlparse.c"
  mem_12 = enc->skipS;
# 5301 "xmlparse.c"
  tmp___1 = (*mem_12)(enc, tem);
  __CrestClearStack(73350);
# 5301 "xmlparse.c"
  data = poolStoreString(& parser->m_tempPool, enc, tmp___1, end - enc->minBytesPerChar * 2);
  __CrestClearStack(73351);
  {
  __CrestLoad(73354, (unsigned long )(& data), (long long )((unsigned long )data));
  __CrestLoad(73353, (unsigned long )0, (long long )0);
  __CrestApply2(73352, 12, (long long )(data == 0));
# 5304 "xmlparse.c"
  if (data == 0) {
    __CrestBranch(73355, 46940, 1);
    __CrestLoad(73357, (unsigned long )0, (long long )0);
    __CrestStore(73358, (unsigned long )(& __retres14));
# 5305 "xmlparse.c"
    __retres14 = 0;
# 5305 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73356, 46942, 0);

  }
  }
# 5306 "xmlparse.c"
  normalizeLines(data);
  __CrestClearStack(73359);
# 5307 "xmlparse.c"
  mem_13 = parser->m_processingInstructionHandler;
# 5307 "xmlparse.c"
  (*mem_13)(parser->m_handlerArg, target, (XML_Char const *)data);
  __CrestClearStack(73360);
# 5308 "xmlparse.c"
  poolClear(& parser->m_tempPool);
  __CrestClearStack(73361);
  __CrestLoad(73362, (unsigned long )0, (long long )1);
  __CrestStore(73363, (unsigned long )(& __retres14));
# 5309 "xmlparse.c"
  __retres14 = 1;
  return_label:
  {
  __CrestLoad(73364, (unsigned long )(& __retres14), (long long )__retres14);
  __CrestReturn(73365);
# 5283 "xmlparse.c"
  return (__retres14);
  }
}
}
# 5312 "xmlparse.c"
static int reportComment(XML_Parser parser , ENCODING const *enc , char const *start ,
                         char const *end )
{
  XML_Char *data ;
  void (*mem_6)(void *userData , XML_Char const *data ) ;
  int __retres7 ;

  {
  __CrestCall(73366, 791);

  {
  __CrestLoad(73369, (unsigned long )(& parser->m_commentHandler), (long long )((unsigned long )parser->m_commentHandler));
  __CrestLoad(73368, (unsigned long )0, (long long )0);
  __CrestApply2(73367, 12, (long long )(parser->m_commentHandler == 0));
# 5317 "xmlparse.c"
  if (parser->m_commentHandler == 0) {
    __CrestBranch(73370, 46947, 1);
    {
    __CrestLoad(73374, (unsigned long )(& parser->m_defaultHandler), (long long )((unsigned long )parser->m_defaultHandler));
    __CrestLoad(73373, (unsigned long )0, (long long )0);
    __CrestApply2(73372, 13, (long long )(parser->m_defaultHandler != 0));
# 5318 "xmlparse.c"
    if (parser->m_defaultHandler != 0) {
      __CrestBranch(73375, 46948, 1);
# 5319 "xmlparse.c"
      reportDefault(parser, enc, start, end);
      __CrestClearStack(73377);
    } else {
      __CrestBranch(73376, 46949, 0);

    }
    }
    __CrestLoad(73378, (unsigned long )0, (long long )1);
    __CrestStore(73379, (unsigned long )(& __retres7));
# 5320 "xmlparse.c"
    __retres7 = 1;
# 5320 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73371, 46952, 0);

  }
  }
# 5322 "xmlparse.c"
  data = poolStoreString(& parser->m_tempPool, enc, start + enc->minBytesPerChar * 4,
                         end - enc->minBytesPerChar * 3);
  __CrestClearStack(73380);
  {
  __CrestLoad(73383, (unsigned long )(& data), (long long )((unsigned long )data));
  __CrestLoad(73382, (unsigned long )0, (long long )0);
  __CrestApply2(73381, 12, (long long )(data == 0));
# 5326 "xmlparse.c"
  if (data == 0) {
    __CrestBranch(73384, 46955, 1);
    __CrestLoad(73386, (unsigned long )0, (long long )0);
    __CrestStore(73387, (unsigned long )(& __retres7));
# 5327 "xmlparse.c"
    __retres7 = 0;
# 5327 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73385, 46957, 0);

  }
  }
# 5328 "xmlparse.c"
  normalizeLines(data);
  __CrestClearStack(73388);
# 5329 "xmlparse.c"
  mem_6 = parser->m_commentHandler;
# 5329 "xmlparse.c"
  (*mem_6)(parser->m_handlerArg, (XML_Char const *)data);
  __CrestClearStack(73389);
# 5330 "xmlparse.c"
  poolClear(& parser->m_tempPool);
  __CrestClearStack(73390);
  __CrestLoad(73391, (unsigned long )0, (long long )1);
  __CrestStore(73392, (unsigned long )(& __retres7));
# 5331 "xmlparse.c"
  __retres7 = 1;
  return_label:
  {
  __CrestLoad(73393, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(73394);
# 5312 "xmlparse.c"
  return (__retres7);
  }
}
}
# 5334 "xmlparse.c"
static void reportDefault(XML_Parser parser , ENCODING const *enc , char const *s ,
                          char const *end )
{
  char const **eventPP ;
  char const **eventEndPP ;
  ICHAR *dataPtr ;
  OPEN_INTERNAL_ENTITY *mem_8 ;
  OPEN_INTERNAL_ENTITY *mem_9 ;
  void (*mem_10)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                 char **toP , char const *toLim ) ;
  void (*mem_11)(void *userData , XML_Char const *s , int len ) ;
  void (*mem_12)(void *userData , XML_Char const *s , int len ) ;

  {
  __CrestCall(73395, 792);

  {
  __CrestLoad(73398, (unsigned long )(& enc->isUtf8), (long long )enc->isUtf8);
  __CrestLoad(73397, (unsigned long )0, (long long )0);
  __CrestApply2(73396, 12, (long long )(enc->isUtf8 == 0));
# 5338 "xmlparse.c"
  if (enc->isUtf8 == 0) {
    __CrestBranch(73399, 46962, 1);
    {
    __CrestLoad(73403, (unsigned long )(& enc), (long long )((unsigned long )enc));
    __CrestLoad(73402, (unsigned long )(& parser->m_encoding), (long long )((unsigned long )parser->m_encoding));
    __CrestApply2(73401, 12, (long long )((unsigned long )enc == (unsigned long )parser->m_encoding));
# 5341 "xmlparse.c"
    if ((unsigned long )enc == (unsigned long )parser->m_encoding) {
      __CrestBranch(73404, 46963, 1);
# 5342 "xmlparse.c"
      eventPP = & parser->m_eventPtr;
# 5343 "xmlparse.c"
      eventEndPP = & parser->m_eventEndPtr;
    } else {
      __CrestBranch(73405, 46964, 0);
# 5346 "xmlparse.c"
      mem_8 = parser->m_openInternalEntities;
# 5346 "xmlparse.c"
      eventPP = & mem_8->internalEventPtr;
# 5347 "xmlparse.c"
      mem_9 = parser->m_openInternalEntities;
# 5347 "xmlparse.c"
      eventEndPP = & mem_9->internalEventEndPtr;
    }
    }
    {
# 5349 "xmlparse.c"
    while (1) {
      while_continue: ;
# 5350 "xmlparse.c"
      dataPtr = parser->m_dataBuf;
# 5351 "xmlparse.c"
      mem_10 = enc->utf8Convert;
# 5351 "xmlparse.c"
      (*mem_10)(enc, & s, end, & dataPtr, (char const *)parser->m_dataBufEnd);
      __CrestClearStack(73406);
# 5352 "xmlparse.c"
      *eventEndPP = s;
# 5353 "xmlparse.c"
      mem_11 = parser->m_defaultHandler;
      __CrestLoad(73409, (unsigned long )(& dataPtr), (long long )((unsigned long )dataPtr));
      __CrestLoad(73408, (unsigned long )(& parser->m_dataBuf), (long long )((unsigned long )parser->m_dataBuf));
      __CrestApply2(73407, 18, (long long )(dataPtr - parser->m_dataBuf));
# 5353 "xmlparse.c"
      (*mem_11)(parser->m_handlerArg, (XML_Char const *)parser->m_dataBuf, (int )(dataPtr - parser->m_dataBuf));
      __CrestClearStack(73410);
# 5354 "xmlparse.c"
      *eventPP = s;
      {
      __CrestLoad(73413, (unsigned long )(& s), (long long )((unsigned long )s));
      __CrestLoad(73412, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(73411, 13, (long long )((unsigned long )s != (unsigned long )end));
# 5349 "xmlparse.c"
      if ((unsigned long )s != (unsigned long )end) {
        __CrestBranch(73414, 46970, 1);

      } else {
        __CrestBranch(73415, 46971, 0);
# 5349 "xmlparse.c"
        goto while_break;
      }
      }
    }
    while_break: ;
    }
  } else {
    __CrestBranch(73400, 46973, 0);
# 5358 "xmlparse.c"
    mem_12 = parser->m_defaultHandler;
    __CrestLoad(73418, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(73417, (unsigned long )(& s), (long long )((unsigned long )s));
    __CrestApply2(73416, 18, (long long )((XML_Char *)end - (XML_Char *)s));
# 5358 "xmlparse.c"
    (*mem_12)(parser->m_handlerArg, (XML_Char const *)((XML_Char *)s), (int )((XML_Char *)end - (XML_Char *)s));
    __CrestClearStack(73419);
  }
  }

  {
  __CrestReturn(73420);
# 5334 "xmlparse.c"
  return;
  }
}
}
# 5362 "xmlparse.c"
static int defineAttribute(ELEMENT_TYPE *type , ATTRIBUTE_ID *attId , XML_Bool isCdata ,
                           XML_Bool isId , XML_Char const *value , XML_Parser parser )
{
  DEFAULT_ATTRIBUTE *att ;
  int i ;
  void *tmp ;
  DEFAULT_ATTRIBUTE *temp ;
  int count ;
  void *tmp___0 ;
  DEFAULT_ATTRIBUTE *mem_13 ;
  void *(*mem_14)(size_t size ) ;
  void *(*mem_15)(void *ptr , size_t size ) ;
  int __retres16 ;

  {
  __CrestCall(73423, 793);
  __CrestStore(73422, (unsigned long )(& isId));
  __CrestStore(73421, (unsigned long )(& isCdata));
  {
  __CrestLoad(73426, (unsigned long )(& value), (long long )((unsigned long )value));
  __CrestLoad(73425, (unsigned long )0, (long long )0);
  __CrestApply2(73424, 13, (long long )(value != 0));
# 5367 "xmlparse.c"
  if (value != 0) {
    __CrestBranch(73427, 46977, 1);
# 5367 "xmlparse.c"
    goto _L;
  } else {
    __CrestBranch(73428, 46978, 0);
    {
    __CrestLoad(73431, (unsigned long )(& isId), (long long )isId);
    __CrestLoad(73430, (unsigned long )0, (long long )0);
    __CrestApply2(73429, 13, (long long )(isId != 0));
# 5367 "xmlparse.c"
    if (isId != 0) {
      __CrestBranch(73432, 46979, 1);
      _L:
      __CrestLoad(73434, (unsigned long )0, (long long )0);
      __CrestStore(73435, (unsigned long )(& i));
# 5371 "xmlparse.c"
      i = 0;
      {
# 5371 "xmlparse.c"
      while (1) {
        while_continue: ;
        {
        __CrestLoad(73438, (unsigned long )(& i), (long long )i);
        __CrestLoad(73437, (unsigned long )(& type->nDefaultAtts), (long long )type->nDefaultAtts);
        __CrestApply2(73436, 16, (long long )(i < type->nDefaultAtts));
# 5371 "xmlparse.c"
        if (i < type->nDefaultAtts) {
          __CrestBranch(73439, 46984, 1);

        } else {
          __CrestBranch(73440, 46985, 0);
# 5371 "xmlparse.c"
          goto while_break;
        }
        }
        {
# 5372 "xmlparse.c"
        mem_13 = type->defaultAtts + i;
        {
        __CrestLoad(73443, (unsigned long )(& attId), (long long )((unsigned long )attId));
        __CrestLoad(73442, (unsigned long )(& mem_13->id), (long long )((unsigned long )mem_13->id));
        __CrestApply2(73441, 12, (long long )((unsigned long )attId == (unsigned long )mem_13->id));
# 5372 "xmlparse.c"
        if ((unsigned long )attId == (unsigned long )mem_13->id) {
          __CrestBranch(73444, 46989, 1);
          __CrestLoad(73446, (unsigned long )0, (long long )1);
          __CrestStore(73447, (unsigned long )(& __retres16));
# 5373 "xmlparse.c"
          __retres16 = 1;
# 5373 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(73445, 46991, 0);

        }
        }
        }
        __CrestLoad(73450, (unsigned long )(& i), (long long )i);
        __CrestLoad(73449, (unsigned long )0, (long long )1);
        __CrestApply2(73448, 0, (long long )(i + 1));
        __CrestStore(73451, (unsigned long )(& i));
# 5371 "xmlparse.c"
        i ++;
      }
      while_break: ;
      }
      {
      __CrestLoad(73454, (unsigned long )(& isId), (long long )isId);
      __CrestLoad(73453, (unsigned long )0, (long long )0);
      __CrestApply2(73452, 13, (long long )(isId != 0));
# 5374 "xmlparse.c"
      if (isId != 0) {
        __CrestBranch(73455, 46995, 1);
        {
        __CrestLoad(73459, (unsigned long )(& type->idAtt), (long long )((unsigned long )type->idAtt));
        __CrestLoad(73458, (unsigned long )0, (long long )0);
        __CrestApply2(73457, 12, (long long )(type->idAtt == 0));
# 5374 "xmlparse.c"
        if (type->idAtt == 0) {
          __CrestBranch(73460, 46996, 1);
          {
          __CrestLoad(73464, (unsigned long )(& attId->xmlns), (long long )attId->xmlns);
          __CrestLoad(73463, (unsigned long )0, (long long )0);
          __CrestApply2(73462, 12, (long long )(attId->xmlns == 0));
# 5374 "xmlparse.c"
          if (attId->xmlns == 0) {
            __CrestBranch(73465, 46997, 1);
# 5375 "xmlparse.c"
            type->idAtt = (ATTRIBUTE_ID const *)attId;
          } else {
            __CrestBranch(73466, 46998, 0);

          }
          }
        } else {
          __CrestBranch(73461, 46999, 0);

        }
        }
      } else {
        __CrestBranch(73456, 47000, 0);

      }
      }
    } else {
      __CrestBranch(73433, 47001, 0);

    }
    }
  }
  }
  {
  __CrestLoad(73469, (unsigned long )(& type->nDefaultAtts), (long long )type->nDefaultAtts);
  __CrestLoad(73468, (unsigned long )(& type->allocDefaultAtts), (long long )type->allocDefaultAtts);
  __CrestApply2(73467, 12, (long long )(type->nDefaultAtts == type->allocDefaultAtts));
# 5377 "xmlparse.c"
  if (type->nDefaultAtts == type->allocDefaultAtts) {
    __CrestBranch(73470, 47003, 1);
    {
    __CrestLoad(73474, (unsigned long )(& type->allocDefaultAtts), (long long )type->allocDefaultAtts);
    __CrestLoad(73473, (unsigned long )0, (long long )0);
    __CrestApply2(73472, 12, (long long )(type->allocDefaultAtts == 0));
# 5378 "xmlparse.c"
    if (type->allocDefaultAtts == 0) {
      __CrestBranch(73475, 47004, 1);
      __CrestLoad(73477, (unsigned long )0, (long long )8);
      __CrestStore(73478, (unsigned long )(& type->allocDefaultAtts));
# 5379 "xmlparse.c"
      type->allocDefaultAtts = 8;
# 5380 "xmlparse.c"
      mem_14 = parser->m_mem.malloc_fcn;
      __CrestLoad(73481, (unsigned long )(& type->allocDefaultAtts), (long long )type->allocDefaultAtts);
      __CrestLoad(73480, (unsigned long )0, (long long )sizeof(DEFAULT_ATTRIBUTE ));
      __CrestApply2(73479, 2, (long long )((unsigned long )type->allocDefaultAtts * sizeof(DEFAULT_ATTRIBUTE )));
# 5380 "xmlparse.c"
      tmp = (*mem_14)((unsigned long )type->allocDefaultAtts * sizeof(DEFAULT_ATTRIBUTE ));
      __CrestClearStack(73482);
# 5380 "xmlparse.c"
      type->defaultAtts = (DEFAULT_ATTRIBUTE *)tmp;
      {
      __CrestLoad(73485, (unsigned long )(& type->defaultAtts), (long long )((unsigned long )type->defaultAtts));
      __CrestLoad(73484, (unsigned long )0, (long long )0);
      __CrestApply2(73483, 12, (long long )(type->defaultAtts == 0));
# 5382 "xmlparse.c"
      if (type->defaultAtts == 0) {
        __CrestBranch(73486, 47006, 1);
        __CrestLoad(73488, (unsigned long )0, (long long )0);
        __CrestStore(73489, (unsigned long )(& __retres16));
# 5383 "xmlparse.c"
        __retres16 = 0;
# 5383 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(73487, 47008, 0);

      }
      }
    } else {
      __CrestBranch(73476, 47009, 0);
      __CrestLoad(73492, (unsigned long )(& type->allocDefaultAtts), (long long )type->allocDefaultAtts);
      __CrestLoad(73491, (unsigned long )0, (long long )2);
      __CrestApply2(73490, 2, (long long )(type->allocDefaultAtts * 2));
      __CrestStore(73493, (unsigned long )(& count));
# 5387 "xmlparse.c"
      count = type->allocDefaultAtts * 2;
# 5388 "xmlparse.c"
      mem_15 = parser->m_mem.realloc_fcn;
      __CrestLoad(73496, (unsigned long )(& count), (long long )count);
      __CrestLoad(73495, (unsigned long )0, (long long )sizeof(DEFAULT_ATTRIBUTE ));
      __CrestApply2(73494, 2, (long long )((unsigned long )count * sizeof(DEFAULT_ATTRIBUTE )));
# 5388 "xmlparse.c"
      tmp___0 = (*mem_15)((void *)type->defaultAtts, (unsigned long )count * sizeof(DEFAULT_ATTRIBUTE ));
      __CrestClearStack(73497);
# 5388 "xmlparse.c"
      temp = (DEFAULT_ATTRIBUTE *)tmp___0;
      {
      __CrestLoad(73500, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(73499, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(73498, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 5390 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(73501, 47011, 1);
        __CrestLoad(73503, (unsigned long )0, (long long )0);
        __CrestStore(73504, (unsigned long )(& __retres16));
# 5391 "xmlparse.c"
        __retres16 = 0;
# 5391 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(73502, 47013, 0);

      }
      }
      __CrestLoad(73505, (unsigned long )(& count), (long long )count);
      __CrestStore(73506, (unsigned long )(& type->allocDefaultAtts));
# 5392 "xmlparse.c"
      type->allocDefaultAtts = count;
# 5393 "xmlparse.c"
      type->defaultAtts = temp;
    }
    }
  } else {
    __CrestBranch(73471, 47015, 0);

  }
  }
# 5396 "xmlparse.c"
  att = type->defaultAtts + type->nDefaultAtts;
# 5397 "xmlparse.c"
  att->id = (ATTRIBUTE_ID const *)attId;
# 5398 "xmlparse.c"
  att->value = value;
  __CrestLoad(73507, (unsigned long )(& isCdata), (long long )isCdata);
  __CrestStore(73508, (unsigned long )(& att->isCdata));
# 5399 "xmlparse.c"
  att->isCdata = isCdata;
  {
  __CrestLoad(73511, (unsigned long )(& isCdata), (long long )isCdata);
  __CrestLoad(73510, (unsigned long )0, (long long )0);
  __CrestApply2(73509, 12, (long long )(isCdata == 0));
# 5400 "xmlparse.c"
  if (isCdata == 0) {
    __CrestBranch(73512, 47018, 1);
    __CrestLoad(73514, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(73515, (unsigned long )(& attId->maybeTokenized));
# 5401 "xmlparse.c"
    attId->maybeTokenized = (XML_Bool )1;
  } else {
    __CrestBranch(73513, 47019, 0);

  }
  }
  __CrestLoad(73518, (unsigned long )(& type->nDefaultAtts), (long long )type->nDefaultAtts);
  __CrestLoad(73517, (unsigned long )0, (long long )1);
  __CrestApply2(73516, 0, (long long )(type->nDefaultAtts + 1));
  __CrestStore(73519, (unsigned long )(& type->nDefaultAtts));
# 5402 "xmlparse.c"
  (type->nDefaultAtts) ++;
  __CrestLoad(73520, (unsigned long )0, (long long )1);
  __CrestStore(73521, (unsigned long )(& __retres16));
# 5403 "xmlparse.c"
  __retres16 = 1;
  return_label:
  {
  __CrestLoad(73522, (unsigned long )(& __retres16), (long long )__retres16);
  __CrestReturn(73523);
# 5362 "xmlparse.c"
  return (__retres16);
  }
}
}
# 5406 "xmlparse.c"
static int setElementTypePrefix(XML_Parser parser , ELEMENT_TYPE *elementType )
{
  DTD *dtd ;
  XML_Char const *name ;
  PREFIX *prefix ;
  XML_Char const *s ;
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  XML_Char *tmp___4 ;
  int tmp___5 ;
  XML_Bool tmp___6 ;
  NAMED *tmp___7 ;
  int __retres16 ;

  {
  __CrestCall(73524, 794);
# 5409 "xmlparse.c"
  dtd = parser->m_dtd;
# 5411 "xmlparse.c"
  name = elementType->name;
  {
# 5411 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(73527, (unsigned long )name, (long long )*name);
    __CrestLoad(73526, (unsigned long )0, (long long )0);
    __CrestApply2(73525, 13, (long long )(*name != 0));
# 5411 "xmlparse.c"
    if (*name != 0) {
      __CrestBranch(73528, 47028, 1);

    } else {
      __CrestBranch(73529, 47029, 0);
# 5411 "xmlparse.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(73532, (unsigned long )name, (long long )*name);
    __CrestLoad(73531, (unsigned long )0, (long long )58);
    __CrestApply2(73530, 12, (long long )((int const )*name == 58));
# 5412 "xmlparse.c"
    if ((int const )*name == 58) {
      __CrestBranch(73533, 47031, 1);
# 5415 "xmlparse.c"
      s = elementType->name;
      {
# 5415 "xmlparse.c"
      while (1) {
        while_continue___0: ;
        {
        __CrestLoad(73537, (unsigned long )(& s), (long long )((unsigned long )s));
        __CrestLoad(73536, (unsigned long )(& name), (long long )((unsigned long )name));
        __CrestApply2(73535, 13, (long long )((unsigned long )s != (unsigned long )name));
# 5415 "xmlparse.c"
        if ((unsigned long )s != (unsigned long )name) {
          __CrestBranch(73538, 47036, 1);

        } else {
          __CrestBranch(73539, 47037, 0);
# 5415 "xmlparse.c"
          goto while_break___0;
        }
        }
        {
        __CrestLoad(73542, (unsigned long )(& dtd->pool.ptr), (long long )((unsigned long )dtd->pool.ptr));
        __CrestLoad(73541, (unsigned long )(& dtd->pool.end), (long long )((unsigned long )dtd->pool.end));
        __CrestApply2(73540, 12, (long long )((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end));
# 5416 "xmlparse.c"
        if ((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end) {
          __CrestBranch(73543, 47039, 1);
# 5416 "xmlparse.c"
          tmp___2 = poolGrow(& dtd->pool);
          __CrestHandleReturn(73546, (long long )tmp___2);
          __CrestStore(73545, (unsigned long )(& tmp___2));
          {
          __CrestLoad(73549, (unsigned long )(& tmp___2), (long long )tmp___2);
          __CrestLoad(73548, (unsigned long )0, (long long )0);
          __CrestApply2(73547, 13, (long long )(tmp___2 != 0));
# 5416 "xmlparse.c"
          if (tmp___2 != 0) {
            __CrestBranch(73550, 47041, 1);
# 5416 "xmlparse.c"
            tmp___0 = dtd->pool.ptr;
# 5416 "xmlparse.c"
            (dtd->pool.ptr) ++;
            __CrestLoad(73552, (unsigned long )s, (long long )*s);
            __CrestStore(73553, (unsigned long )tmp___0);
# 5416 "xmlparse.c"
            *tmp___0 = (XML_Char )*s;
            __CrestLoad(73554, (unsigned long )0, (long long )1);
            __CrestStore(73555, (unsigned long )(& tmp___1));
# 5416 "xmlparse.c"
            tmp___1 = 1;
          } else {
            __CrestBranch(73551, 47042, 0);
            __CrestLoad(73556, (unsigned long )0, (long long )0);
            __CrestStore(73557, (unsigned long )(& tmp___1));
# 5416 "xmlparse.c"
            tmp___1 = 0;
          }
          }
        } else {
          __CrestBranch(73544, 47043, 0);
# 5416 "xmlparse.c"
          tmp___0 = dtd->pool.ptr;
# 5416 "xmlparse.c"
          (dtd->pool.ptr) ++;
          __CrestLoad(73558, (unsigned long )s, (long long )*s);
          __CrestStore(73559, (unsigned long )tmp___0);
# 5416 "xmlparse.c"
          *tmp___0 = (XML_Char )*s;
          __CrestLoad(73560, (unsigned long )0, (long long )1);
          __CrestStore(73561, (unsigned long )(& tmp___1));
# 5416 "xmlparse.c"
          tmp___1 = 1;
        }
        }
        {
        __CrestLoad(73564, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestLoad(73563, (unsigned long )0, (long long )0);
        __CrestApply2(73562, 13, (long long )(tmp___1 != 0));
# 5416 "xmlparse.c"
        if (tmp___1 != 0) {
          __CrestBranch(73565, 47045, 1);

        } else {
          __CrestBranch(73566, 47046, 0);
          __CrestLoad(73567, (unsigned long )0, (long long )0);
          __CrestStore(73568, (unsigned long )(& __retres16));
# 5417 "xmlparse.c"
          __retres16 = 0;
# 5417 "xmlparse.c"
          goto return_label;
        }
        }
# 5415 "xmlparse.c"
        s ++;
      }
      while_break___0: ;
      }
      {
      __CrestLoad(73571, (unsigned long )(& dtd->pool.ptr), (long long )((unsigned long )dtd->pool.ptr));
      __CrestLoad(73570, (unsigned long )(& dtd->pool.end), (long long )((unsigned long )dtd->pool.end));
      __CrestApply2(73569, 12, (long long )((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end));
# 5419 "xmlparse.c"
      if ((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end) {
        __CrestBranch(73572, 47051, 1);
# 5419 "xmlparse.c"
        tmp___6 = poolGrow(& dtd->pool);
        __CrestHandleReturn(73575, (long long )tmp___6);
        __CrestStore(73574, (unsigned long )(& tmp___6));
        {
        __CrestLoad(73578, (unsigned long )(& tmp___6), (long long )tmp___6);
        __CrestLoad(73577, (unsigned long )0, (long long )0);
        __CrestApply2(73576, 13, (long long )(tmp___6 != 0));
# 5419 "xmlparse.c"
        if (tmp___6 != 0) {
          __CrestBranch(73579, 47053, 1);
# 5419 "xmlparse.c"
          tmp___4 = dtd->pool.ptr;
# 5419 "xmlparse.c"
          (dtd->pool.ptr) ++;
          __CrestLoad(73581, (unsigned long )0, (long long )((XML_Char )'\000'));
          __CrestStore(73582, (unsigned long )tmp___4);
# 5419 "xmlparse.c"
          *tmp___4 = (XML_Char )'\000';
          __CrestLoad(73583, (unsigned long )0, (long long )1);
          __CrestStore(73584, (unsigned long )(& tmp___5));
# 5419 "xmlparse.c"
          tmp___5 = 1;
        } else {
          __CrestBranch(73580, 47054, 0);
          __CrestLoad(73585, (unsigned long )0, (long long )0);
          __CrestStore(73586, (unsigned long )(& tmp___5));
# 5419 "xmlparse.c"
          tmp___5 = 0;
        }
        }
      } else {
        __CrestBranch(73573, 47055, 0);
# 5419 "xmlparse.c"
        tmp___4 = dtd->pool.ptr;
# 5419 "xmlparse.c"
        (dtd->pool.ptr) ++;
        __CrestLoad(73587, (unsigned long )0, (long long )((XML_Char )'\000'));
        __CrestStore(73588, (unsigned long )tmp___4);
# 5419 "xmlparse.c"
        *tmp___4 = (XML_Char )'\000';
        __CrestLoad(73589, (unsigned long )0, (long long )1);
        __CrestStore(73590, (unsigned long )(& tmp___5));
# 5419 "xmlparse.c"
        tmp___5 = 1;
      }
      }
      {
      __CrestLoad(73593, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(73592, (unsigned long )0, (long long )0);
      __CrestApply2(73591, 13, (long long )(tmp___5 != 0));
# 5419 "xmlparse.c"
      if (tmp___5 != 0) {
        __CrestBranch(73594, 47057, 1);

      } else {
        __CrestBranch(73595, 47058, 0);
        __CrestLoad(73596, (unsigned long )0, (long long )0);
        __CrestStore(73597, (unsigned long )(& __retres16));
# 5420 "xmlparse.c"
        __retres16 = 0;
# 5420 "xmlparse.c"
        goto return_label;
      }
      }
      __CrestLoad(73598, (unsigned long )0, (long long )sizeof(PREFIX ));
# 5421 "xmlparse.c"
      tmp___7 = lookup(parser, & dtd->prefixes, (KEY )dtd->pool.start, sizeof(PREFIX ));
      __CrestClearStack(73599);
# 5421 "xmlparse.c"
      prefix = (PREFIX *)tmp___7;
      {
      __CrestLoad(73602, (unsigned long )(& prefix), (long long )((unsigned long )prefix));
      __CrestLoad(73601, (unsigned long )0, (long long )0);
      __CrestApply2(73600, 12, (long long )(prefix == 0));
# 5423 "xmlparse.c"
      if (prefix == 0) {
        __CrestBranch(73603, 47062, 1);
        __CrestLoad(73605, (unsigned long )0, (long long )0);
        __CrestStore(73606, (unsigned long )(& __retres16));
# 5424 "xmlparse.c"
        __retres16 = 0;
# 5424 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(73604, 47064, 0);

      }
      }
      {
      __CrestLoad(73609, (unsigned long )(& prefix->name), (long long )((unsigned long )prefix->name));
      __CrestLoad(73608, (unsigned long )(& dtd->pool.start), (long long )((unsigned long )dtd->pool.start));
      __CrestApply2(73607, 12, (long long )((unsigned long )prefix->name == (unsigned long )dtd->pool.start));
# 5425 "xmlparse.c"
      if ((unsigned long )prefix->name == (unsigned long )dtd->pool.start) {
        __CrestBranch(73610, 47066, 1);
# 5426 "xmlparse.c"
        dtd->pool.start = dtd->pool.ptr;
      } else {
        __CrestBranch(73611, 47067, 0);
# 5428 "xmlparse.c"
        dtd->pool.ptr = dtd->pool.start;
      }
      }
# 5429 "xmlparse.c"
      elementType->prefix = prefix;
    } else {
      __CrestBranch(73534, 47069, 0);

    }
    }
# 5411 "xmlparse.c"
    name ++;
  }
  while_break: ;
  }
  __CrestLoad(73612, (unsigned long )0, (long long )1);
  __CrestStore(73613, (unsigned long )(& __retres16));
# 5433 "xmlparse.c"
  __retres16 = 1;
  return_label:
  {
  __CrestLoad(73614, (unsigned long )(& __retres16), (long long )__retres16);
  __CrestReturn(73615);
# 5406 "xmlparse.c"
  return (__retres16);
  }
}
}
# 5436 "xmlparse.c"
static ATTRIBUTE_ID *getAttributeId(XML_Parser parser , ENCODING const *enc , char const *start ,
                                    char const *end )
{
  DTD *dtd ;
  ATTRIBUTE_ID *id ;
  XML_Char const *name ;
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  XML_Char *tmp___3 ;
  NAMED *tmp___4 ;
  NAMED *tmp___5 ;
  int i ;
  int j ;
  XML_Char *tmp___7 ;
  int tmp___8 ;
  XML_Bool tmp___9 ;
  XML_Char *tmp___11 ;
  int tmp___12 ;
  XML_Bool tmp___13 ;
  NAMED *tmp___14 ;
  XML_Char const *mem_26 ;
  XML_Char const *mem_27 ;
  XML_Char const *mem_28 ;
  XML_Char const *mem_29 ;
  XML_Char const *mem_30 ;
  XML_Char const *mem_31 ;
  XML_Char const *mem_32 ;
  XML_Char const *mem_33 ;
  XML_Char const *mem_34 ;
  XML_Char const *mem_35 ;
  XML_Char const *mem_36 ;
  XML_Char const *mem_37 ;
  PREFIX *mem_38 ;
  ATTRIBUTE_ID *__retres39 ;

  {
  __CrestCall(73616, 795);
# 5440 "xmlparse.c"
  dtd = parser->m_dtd;
  {
  __CrestLoad(73619, (unsigned long )(& dtd->pool.ptr), (long long )((unsigned long )dtd->pool.ptr));
  __CrestLoad(73618, (unsigned long )(& dtd->pool.end), (long long )((unsigned long )dtd->pool.end));
  __CrestApply2(73617, 12, (long long )((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end));
# 5443 "xmlparse.c"
  if ((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end) {
    __CrestBranch(73620, 47076, 1);
# 5443 "xmlparse.c"
    tmp___2 = poolGrow(& dtd->pool);
    __CrestHandleReturn(73623, (long long )tmp___2);
    __CrestStore(73622, (unsigned long )(& tmp___2));
    {
    __CrestLoad(73626, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(73625, (unsigned long )0, (long long )0);
    __CrestApply2(73624, 13, (long long )(tmp___2 != 0));
# 5443 "xmlparse.c"
    if (tmp___2 != 0) {
      __CrestBranch(73627, 47078, 1);
# 5443 "xmlparse.c"
      tmp___0 = dtd->pool.ptr;
# 5443 "xmlparse.c"
      (dtd->pool.ptr) ++;
      __CrestLoad(73629, (unsigned long )0, (long long )((XML_Char )'\000'));
      __CrestStore(73630, (unsigned long )tmp___0);
# 5443 "xmlparse.c"
      *tmp___0 = (XML_Char )'\000';
      __CrestLoad(73631, (unsigned long )0, (long long )1);
      __CrestStore(73632, (unsigned long )(& tmp___1));
# 5443 "xmlparse.c"
      tmp___1 = 1;
    } else {
      __CrestBranch(73628, 47079, 0);
      __CrestLoad(73633, (unsigned long )0, (long long )0);
      __CrestStore(73634, (unsigned long )(& tmp___1));
# 5443 "xmlparse.c"
      tmp___1 = 0;
    }
    }
  } else {
    __CrestBranch(73621, 47080, 0);
# 5443 "xmlparse.c"
    tmp___0 = dtd->pool.ptr;
# 5443 "xmlparse.c"
    (dtd->pool.ptr) ++;
    __CrestLoad(73635, (unsigned long )0, (long long )((XML_Char )'\000'));
    __CrestStore(73636, (unsigned long )tmp___0);
# 5443 "xmlparse.c"
    *tmp___0 = (XML_Char )'\000';
    __CrestLoad(73637, (unsigned long )0, (long long )1);
    __CrestStore(73638, (unsigned long )(& tmp___1));
# 5443 "xmlparse.c"
    tmp___1 = 1;
  }
  }
  {
  __CrestLoad(73641, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(73640, (unsigned long )0, (long long )0);
  __CrestApply2(73639, 13, (long long )(tmp___1 != 0));
# 5443 "xmlparse.c"
  if (tmp___1 != 0) {
    __CrestBranch(73642, 47082, 1);

  } else {
    __CrestBranch(73643, 47083, 0);
# 5444 "xmlparse.c"
    __retres39 = (ATTRIBUTE_ID *)((void *)0);
# 5444 "xmlparse.c"
    goto return_label;
  }
  }
# 5445 "xmlparse.c"
  tmp___3 = poolStoreString(& dtd->pool, enc, start, end);
  __CrestClearStack(73644);
# 5445 "xmlparse.c"
  name = (XML_Char const *)tmp___3;
  {
  __CrestLoad(73647, (unsigned long )(& name), (long long )((unsigned long )name));
  __CrestLoad(73646, (unsigned long )0, (long long )0);
  __CrestApply2(73645, 12, (long long )(name == 0));
# 5446 "xmlparse.c"
  if (name == 0) {
    __CrestBranch(73648, 47087, 1);
# 5447 "xmlparse.c"
    __retres39 = (ATTRIBUTE_ID *)((void *)0);
# 5447 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73649, 47089, 0);

  }
  }
# 5449 "xmlparse.c"
  name ++;
  __CrestLoad(73650, (unsigned long )0, (long long )sizeof(ATTRIBUTE_ID ));
# 5450 "xmlparse.c"
  tmp___4 = lookup(parser, & dtd->attributeIds, name, sizeof(ATTRIBUTE_ID ));
  __CrestClearStack(73651);
# 5450 "xmlparse.c"
  id = (ATTRIBUTE_ID *)tmp___4;
  {
  __CrestLoad(73654, (unsigned long )(& id), (long long )((unsigned long )id));
  __CrestLoad(73653, (unsigned long )0, (long long )0);
  __CrestApply2(73652, 12, (long long )(id == 0));
# 5451 "xmlparse.c"
  if (id == 0) {
    __CrestBranch(73655, 47092, 1);
# 5452 "xmlparse.c"
    __retres39 = (ATTRIBUTE_ID *)((void *)0);
# 5452 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(73656, 47094, 0);

  }
  }
  {
  __CrestLoad(73659, (unsigned long )(& id->name), (long long )((unsigned long )id->name));
  __CrestLoad(73658, (unsigned long )(& name), (long long )((unsigned long )name));
  __CrestApply2(73657, 13, (long long )((unsigned long )id->name != (unsigned long )name));
# 5453 "xmlparse.c"
  if ((unsigned long )id->name != (unsigned long )name) {
    __CrestBranch(73660, 47096, 1);
# 5454 "xmlparse.c"
    dtd->pool.ptr = dtd->pool.start;
  } else {
    __CrestBranch(73661, 47097, 0);
# 5456 "xmlparse.c"
    dtd->pool.start = dtd->pool.ptr;
    {
    __CrestLoad(73664, (unsigned long )(& parser->m_ns), (long long )parser->m_ns);
    __CrestLoad(73663, (unsigned long )0, (long long )0);
    __CrestApply2(73662, 12, (long long )(parser->m_ns == 0));
# 5457 "xmlparse.c"
    if (parser->m_ns == 0) {
      __CrestBranch(73665, 47099, 1);

    } else {
      __CrestBranch(73666, 47100, 0);
      {
# 5459 "xmlparse.c"
      mem_26 = name + 0;
      {
      __CrestLoad(73669, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(73668, (unsigned long )0, (long long )120);
      __CrestApply2(73667, 12, (long long )((int const )*mem_26 == 120));
# 5459 "xmlparse.c"
      if ((int const )*mem_26 == 120) {
        __CrestBranch(73670, 47103, 1);
        {
# 5459 "xmlparse.c"
        mem_27 = name + 1;
        {
        __CrestLoad(73674, (unsigned long )mem_27, (long long )*mem_27);
        __CrestLoad(73673, (unsigned long )0, (long long )109);
        __CrestApply2(73672, 12, (long long )((int const )*mem_27 == 109));
# 5459 "xmlparse.c"
        if ((int const )*mem_27 == 109) {
          __CrestBranch(73675, 47106, 1);
          {
# 5459 "xmlparse.c"
          mem_28 = name + 2;
          {
          __CrestLoad(73679, (unsigned long )mem_28, (long long )*mem_28);
          __CrestLoad(73678, (unsigned long )0, (long long )108);
          __CrestApply2(73677, 12, (long long )((int const )*mem_28 == 108));
# 5459 "xmlparse.c"
          if ((int const )*mem_28 == 108) {
            __CrestBranch(73680, 47109, 1);
            {
# 5459 "xmlparse.c"
            mem_29 = name + 3;
            {
            __CrestLoad(73684, (unsigned long )mem_29, (long long )*mem_29);
            __CrestLoad(73683, (unsigned long )0, (long long )110);
            __CrestApply2(73682, 12, (long long )((int const )*mem_29 == 110));
# 5459 "xmlparse.c"
            if ((int const )*mem_29 == 110) {
              __CrestBranch(73685, 47112, 1);
              {
# 5459 "xmlparse.c"
              mem_30 = name + 4;
              {
              __CrestLoad(73689, (unsigned long )mem_30, (long long )*mem_30);
              __CrestLoad(73688, (unsigned long )0, (long long )115);
              __CrestApply2(73687, 12, (long long )((int const )*mem_30 == 115));
# 5459 "xmlparse.c"
              if ((int const )*mem_30 == 115) {
                __CrestBranch(73690, 47115, 1);
                {
# 5459 "xmlparse.c"
                mem_31 = name + 5;
                {
                __CrestLoad(73694, (unsigned long )mem_31, (long long )*mem_31);
                __CrestLoad(73693, (unsigned long )0, (long long )0);
                __CrestApply2(73692, 12, (long long )((int const )*mem_31 == 0));
# 5459 "xmlparse.c"
                if ((int const )*mem_31 == 0) {
                  __CrestBranch(73695, 47118, 1);
# 5459 "xmlparse.c"
                  goto _L___0;
                } else {
                  __CrestBranch(73696, 47119, 0);
                  {
# 5459 "xmlparse.c"
                  mem_32 = name + 5;
                  {
                  __CrestLoad(73699, (unsigned long )mem_32, (long long )*mem_32);
                  __CrestLoad(73698, (unsigned long )0, (long long )58);
                  __CrestApply2(73697, 12, (long long )((int const )*mem_32 == 58));
# 5459 "xmlparse.c"
                  if ((int const )*mem_32 == 58) {
                    __CrestBranch(73700, 47122, 1);
                    _L___0:
                    {
# 5465 "xmlparse.c"
                    mem_33 = name + 5;
                    {
                    __CrestLoad(73704, (unsigned long )mem_33, (long long )*mem_33);
                    __CrestLoad(73703, (unsigned long )0, (long long )0);
                    __CrestApply2(73702, 12, (long long )((int const )*mem_33 == 0));
# 5465 "xmlparse.c"
                    if ((int const )*mem_33 == 0) {
                      __CrestBranch(73705, 47125, 1);
# 5466 "xmlparse.c"
                      id->prefix = & dtd->defaultPrefix;
                    } else {
                      __CrestBranch(73706, 47126, 0);
                      __CrestLoad(73707, (unsigned long )0, (long long )sizeof(PREFIX ));
# 5468 "xmlparse.c"
                      tmp___5 = lookup(parser, & dtd->prefixes, name + 6, sizeof(PREFIX ));
                      __CrestClearStack(73708);
# 5468 "xmlparse.c"
                      id->prefix = (PREFIX *)tmp___5;
                    }
                    }
                    }
                    __CrestLoad(73709, (unsigned long )0, (long long )((XML_Bool )1));
                    __CrestStore(73710, (unsigned long )(& id->xmlns));
# 5469 "xmlparse.c"
                    id->xmlns = (XML_Bool )1;
                  } else {
                    __CrestBranch(73701, 47128, 0);
# 5459 "xmlparse.c"
                    goto _L___4;
                  }
                  }
                  }
                }
                }
                }
              } else {
                __CrestBranch(73691, 47129, 0);
# 5459 "xmlparse.c"
                goto _L___4;
              }
              }
              }
            } else {
              __CrestBranch(73686, 47130, 0);
# 5459 "xmlparse.c"
              goto _L___4;
            }
            }
            }
          } else {
            __CrestBranch(73681, 47131, 0);
# 5459 "xmlparse.c"
            goto _L___4;
          }
          }
          }
        } else {
          __CrestBranch(73676, 47132, 0);
# 5459 "xmlparse.c"
          goto _L___4;
        }
        }
        }
      } else {
        __CrestBranch(73671, 47133, 0);
        _L___4:
        __CrestLoad(73711, (unsigned long )0, (long long )0);
        __CrestStore(73712, (unsigned long )(& i));
# 5473 "xmlparse.c"
        i = 0;
        {
# 5473 "xmlparse.c"
        while (1) {
          while_continue: ;
          {
# 5473 "xmlparse.c"
          mem_34 = name + i;
          {
          __CrestLoad(73715, (unsigned long )mem_34, (long long )*mem_34);
          __CrestLoad(73714, (unsigned long )0, (long long )0);
          __CrestApply2(73713, 13, (long long )(*mem_34 != 0));
# 5473 "xmlparse.c"
          if (*mem_34 != 0) {
            __CrestBranch(73716, 47140, 1);

          } else {
            __CrestBranch(73717, 47141, 0);
# 5473 "xmlparse.c"
            goto while_break;
          }
          }
          }
          {
# 5475 "xmlparse.c"
          mem_35 = name + i;
          {
          __CrestLoad(73720, (unsigned long )mem_35, (long long )*mem_35);
          __CrestLoad(73719, (unsigned long )0, (long long )58);
          __CrestApply2(73718, 12, (long long )((int const )*mem_35 == 58));
# 5475 "xmlparse.c"
          if ((int const )*mem_35 == 58) {
            __CrestBranch(73721, 47145, 1);
            __CrestLoad(73723, (unsigned long )0, (long long )0);
            __CrestStore(73724, (unsigned long )(& j));
# 5477 "xmlparse.c"
            j = 0;
            {
# 5477 "xmlparse.c"
            while (1) {
              while_continue___0: ;
              {
              __CrestLoad(73727, (unsigned long )(& j), (long long )j);
              __CrestLoad(73726, (unsigned long )(& i), (long long )i);
              __CrestApply2(73725, 16, (long long )(j < i));
# 5477 "xmlparse.c"
              if (j < i) {
                __CrestBranch(73728, 47150, 1);

              } else {
                __CrestBranch(73729, 47151, 0);
# 5477 "xmlparse.c"
                goto while_break___0;
              }
              }
              {
              __CrestLoad(73732, (unsigned long )(& dtd->pool.ptr), (long long )((unsigned long )dtd->pool.ptr));
              __CrestLoad(73731, (unsigned long )(& dtd->pool.end), (long long )((unsigned long )dtd->pool.end));
              __CrestApply2(73730, 12, (long long )((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end));
# 5478 "xmlparse.c"
              if ((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end) {
                __CrestBranch(73733, 47153, 1);
# 5478 "xmlparse.c"
                tmp___9 = poolGrow(& dtd->pool);
                __CrestHandleReturn(73736, (long long )tmp___9);
                __CrestStore(73735, (unsigned long )(& tmp___9));
                {
                __CrestLoad(73739, (unsigned long )(& tmp___9), (long long )tmp___9);
                __CrestLoad(73738, (unsigned long )0, (long long )0);
                __CrestApply2(73737, 13, (long long )(tmp___9 != 0));
# 5478 "xmlparse.c"
                if (tmp___9 != 0) {
                  __CrestBranch(73740, 47155, 1);
# 5478 "xmlparse.c"
                  tmp___7 = dtd->pool.ptr;
# 5478 "xmlparse.c"
                  (dtd->pool.ptr) ++;
# 5478 "xmlparse.c"
                  mem_36 = name + j;
                  __CrestLoad(73742, (unsigned long )mem_36, (long long )*mem_36);
                  __CrestStore(73743, (unsigned long )tmp___7);
# 5478 "xmlparse.c"
                  *tmp___7 = (XML_Char )*mem_36;
                  __CrestLoad(73744, (unsigned long )0, (long long )1);
                  __CrestStore(73745, (unsigned long )(& tmp___8));
# 5478 "xmlparse.c"
                  tmp___8 = 1;
                } else {
                  __CrestBranch(73741, 47156, 0);
                  __CrestLoad(73746, (unsigned long )0, (long long )0);
                  __CrestStore(73747, (unsigned long )(& tmp___8));
# 5478 "xmlparse.c"
                  tmp___8 = 0;
                }
                }
              } else {
                __CrestBranch(73734, 47157, 0);
# 5478 "xmlparse.c"
                tmp___7 = dtd->pool.ptr;
# 5478 "xmlparse.c"
                (dtd->pool.ptr) ++;
# 5478 "xmlparse.c"
                mem_37 = name + j;
                __CrestLoad(73748, (unsigned long )mem_37, (long long )*mem_37);
                __CrestStore(73749, (unsigned long )tmp___7);
# 5478 "xmlparse.c"
                *tmp___7 = (XML_Char )*mem_37;
                __CrestLoad(73750, (unsigned long )0, (long long )1);
                __CrestStore(73751, (unsigned long )(& tmp___8));
# 5478 "xmlparse.c"
                tmp___8 = 1;
              }
              }
              {
              __CrestLoad(73754, (unsigned long )(& tmp___8), (long long )tmp___8);
              __CrestLoad(73753, (unsigned long )0, (long long )0);
              __CrestApply2(73752, 13, (long long )(tmp___8 != 0));
# 5478 "xmlparse.c"
              if (tmp___8 != 0) {
                __CrestBranch(73755, 47159, 1);

              } else {
                __CrestBranch(73756, 47160, 0);
# 5479 "xmlparse.c"
                __retres39 = (ATTRIBUTE_ID *)((void *)0);
# 5479 "xmlparse.c"
                goto return_label;
              }
              }
              __CrestLoad(73759, (unsigned long )(& j), (long long )j);
              __CrestLoad(73758, (unsigned long )0, (long long )1);
              __CrestApply2(73757, 0, (long long )(j + 1));
              __CrestStore(73760, (unsigned long )(& j));
# 5477 "xmlparse.c"
              j ++;
            }
            while_break___0: ;
            }
            {
            __CrestLoad(73763, (unsigned long )(& dtd->pool.ptr), (long long )((unsigned long )dtd->pool.ptr));
            __CrestLoad(73762, (unsigned long )(& dtd->pool.end), (long long )((unsigned long )dtd->pool.end));
            __CrestApply2(73761, 12, (long long )((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end));
# 5481 "xmlparse.c"
            if ((unsigned long )dtd->pool.ptr == (unsigned long )dtd->pool.end) {
              __CrestBranch(73764, 47165, 1);
# 5481 "xmlparse.c"
              tmp___13 = poolGrow(& dtd->pool);
              __CrestHandleReturn(73767, (long long )tmp___13);
              __CrestStore(73766, (unsigned long )(& tmp___13));
              {
              __CrestLoad(73770, (unsigned long )(& tmp___13), (long long )tmp___13);
              __CrestLoad(73769, (unsigned long )0, (long long )0);
              __CrestApply2(73768, 13, (long long )(tmp___13 != 0));
# 5481 "xmlparse.c"
              if (tmp___13 != 0) {
                __CrestBranch(73771, 47167, 1);
# 5481 "xmlparse.c"
                tmp___11 = dtd->pool.ptr;
# 5481 "xmlparse.c"
                (dtd->pool.ptr) ++;
                __CrestLoad(73773, (unsigned long )0, (long long )((XML_Char )'\000'));
                __CrestStore(73774, (unsigned long )tmp___11);
# 5481 "xmlparse.c"
                *tmp___11 = (XML_Char )'\000';
                __CrestLoad(73775, (unsigned long )0, (long long )1);
                __CrestStore(73776, (unsigned long )(& tmp___12));
# 5481 "xmlparse.c"
                tmp___12 = 1;
              } else {
                __CrestBranch(73772, 47168, 0);
                __CrestLoad(73777, (unsigned long )0, (long long )0);
                __CrestStore(73778, (unsigned long )(& tmp___12));
# 5481 "xmlparse.c"
                tmp___12 = 0;
              }
              }
            } else {
              __CrestBranch(73765, 47169, 0);
# 5481 "xmlparse.c"
              tmp___11 = dtd->pool.ptr;
# 5481 "xmlparse.c"
              (dtd->pool.ptr) ++;
              __CrestLoad(73779, (unsigned long )0, (long long )((XML_Char )'\000'));
              __CrestStore(73780, (unsigned long )tmp___11);
# 5481 "xmlparse.c"
              *tmp___11 = (XML_Char )'\000';
              __CrestLoad(73781, (unsigned long )0, (long long )1);
              __CrestStore(73782, (unsigned long )(& tmp___12));
# 5481 "xmlparse.c"
              tmp___12 = 1;
            }
            }
            {
            __CrestLoad(73785, (unsigned long )(& tmp___12), (long long )tmp___12);
            __CrestLoad(73784, (unsigned long )0, (long long )0);
            __CrestApply2(73783, 13, (long long )(tmp___12 != 0));
# 5481 "xmlparse.c"
            if (tmp___12 != 0) {
              __CrestBranch(73786, 47171, 1);

            } else {
              __CrestBranch(73787, 47172, 0);
# 5482 "xmlparse.c"
              __retres39 = (ATTRIBUTE_ID *)((void *)0);
# 5482 "xmlparse.c"
              goto return_label;
            }
            }
            __CrestLoad(73788, (unsigned long )0, (long long )sizeof(PREFIX ));
# 5483 "xmlparse.c"
            tmp___14 = lookup(parser, & dtd->prefixes, (KEY )dtd->pool.start, sizeof(PREFIX ));
            __CrestClearStack(73789);
# 5483 "xmlparse.c"
            id->prefix = (PREFIX *)tmp___14;
            {
# 5485 "xmlparse.c"
            mem_38 = id->prefix;
            {
            __CrestLoad(73792, (unsigned long )(& mem_38->name), (long long )((unsigned long )mem_38->name));
            __CrestLoad(73791, (unsigned long )(& dtd->pool.start), (long long )((unsigned long )dtd->pool.start));
            __CrestApply2(73790, 12, (long long )((unsigned long )mem_38->name == (unsigned long )dtd->pool.start));
# 5485 "xmlparse.c"
            if ((unsigned long )mem_38->name == (unsigned long )dtd->pool.start) {
              __CrestBranch(73793, 47178, 1);
# 5486 "xmlparse.c"
              dtd->pool.start = dtd->pool.ptr;
            } else {
              __CrestBranch(73794, 47179, 0);
# 5488 "xmlparse.c"
              dtd->pool.ptr = dtd->pool.start;
            }
            }
            }
# 5489 "xmlparse.c"
            goto while_break;
          } else {
            __CrestBranch(73722, 47181, 0);

          }
          }
          }
          __CrestLoad(73797, (unsigned long )(& i), (long long )i);
          __CrestLoad(73796, (unsigned long )0, (long long )1);
          __CrestApply2(73795, 0, (long long )(i + 1));
          __CrestStore(73798, (unsigned long )(& i));
# 5473 "xmlparse.c"
          i ++;
        }
        while_break: ;
        }
      }
      }
      }
    }
    }
  }
  }
# 5494 "xmlparse.c"
  __retres39 = id;
  return_label:
  {
  __CrestReturn(73799);
# 5436 "xmlparse.c"
  return (__retres39);
  }
}
}
# 5499 "xmlparse.c"
static XML_Char const *getContext(XML_Parser parser )
{
  DTD *dtd ;
  HASH_TABLE_ITER iter ;
  XML_Bool needSep ;
  int i ;
  int len ;
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  XML_Char *tmp___4 ;
  int tmp___5 ;
  XML_Bool tmp___6 ;
  int i___0 ;
  int len___0 ;
  XML_Char const *s ;
  PREFIX *prefix ;
  NAMED *tmp___7 ;
  XML_Char *tmp___9 ;
  int tmp___10 ;
  XML_Bool tmp___11 ;
  XML_Char *tmp___13 ;
  int tmp___14 ;
  XML_Bool tmp___15 ;
  XML_Char *tmp___17 ;
  int tmp___18 ;
  XML_Bool tmp___19 ;
  XML_Char *tmp___21 ;
  int tmp___22 ;
  XML_Bool tmp___23 ;
  XML_Char const *s___0 ;
  ENTITY *e ;
  NAMED *tmp___24 ;
  XML_Char *tmp___26 ;
  int tmp___27 ;
  XML_Bool tmp___28 ;
  XML_Char *tmp___30 ;
  int tmp___31 ;
  XML_Bool tmp___32 ;
  XML_Char *tmp___34 ;
  int tmp___35 ;
  XML_Bool tmp___36 ;
  BINDING *mem_51 ;
  BINDING *mem_52 ;
  XML_Char *mem_53 ;
  BINDING *mem_54 ;
  XML_Char *mem_55 ;
  BINDING *mem_56 ;
  BINDING *mem_57 ;
  XML_Char *mem_58 ;
  BINDING *mem_59 ;
  XML_Char *mem_60 ;
  XML_Char const *__retres61 ;

  {
  __CrestCall(73800, 796);
# 5502 "xmlparse.c"
  dtd = parser->m_dtd;
  __CrestLoad(73801, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(73802, (unsigned long )(& needSep));
# 5504 "xmlparse.c"
  needSep = (XML_Bool )0;
  {
  __CrestLoad(73805, (unsigned long )(& dtd->defaultPrefix.binding), (long long )((unsigned long )dtd->defaultPrefix.binding));
  __CrestLoad(73804, (unsigned long )0, (long long )0);
  __CrestApply2(73803, 13, (long long )(dtd->defaultPrefix.binding != 0));
# 5506 "xmlparse.c"
  if (dtd->defaultPrefix.binding != 0) {
    __CrestBranch(73806, 47188, 1);
    {
    __CrestLoad(73810, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
    __CrestLoad(73809, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
    __CrestApply2(73808, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5509 "xmlparse.c"
    if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
      __CrestBranch(73811, 47189, 1);
# 5509 "xmlparse.c"
      tmp___2 = poolGrow(& parser->m_tempPool);
      __CrestHandleReturn(73814, (long long )tmp___2);
      __CrestStore(73813, (unsigned long )(& tmp___2));
      {
      __CrestLoad(73817, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(73816, (unsigned long )0, (long long )0);
      __CrestApply2(73815, 13, (long long )(tmp___2 != 0));
# 5509 "xmlparse.c"
      if (tmp___2 != 0) {
        __CrestBranch(73818, 47191, 1);
# 5509 "xmlparse.c"
        tmp___0 = parser->m_tempPool.ptr;
# 5509 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(73820, (unsigned long )0, (long long )((XML_Char )61));
        __CrestStore(73821, (unsigned long )tmp___0);
# 5509 "xmlparse.c"
        *tmp___0 = (XML_Char )61;
        __CrestLoad(73822, (unsigned long )0, (long long )1);
        __CrestStore(73823, (unsigned long )(& tmp___1));
# 5509 "xmlparse.c"
        tmp___1 = 1;
      } else {
        __CrestBranch(73819, 47192, 0);
        __CrestLoad(73824, (unsigned long )0, (long long )0);
        __CrestStore(73825, (unsigned long )(& tmp___1));
# 5509 "xmlparse.c"
        tmp___1 = 0;
      }
      }
    } else {
      __CrestBranch(73812, 47193, 0);
# 5509 "xmlparse.c"
      tmp___0 = parser->m_tempPool.ptr;
# 5509 "xmlparse.c"
      (parser->m_tempPool.ptr) ++;
      __CrestLoad(73826, (unsigned long )0, (long long )((XML_Char )61));
      __CrestStore(73827, (unsigned long )tmp___0);
# 5509 "xmlparse.c"
      *tmp___0 = (XML_Char )61;
      __CrestLoad(73828, (unsigned long )0, (long long )1);
      __CrestStore(73829, (unsigned long )(& tmp___1));
# 5509 "xmlparse.c"
      tmp___1 = 1;
    }
    }
    {
    __CrestLoad(73832, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(73831, (unsigned long )0, (long long )0);
    __CrestApply2(73830, 13, (long long )(tmp___1 != 0));
# 5509 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(73833, 47195, 1);

    } else {
      __CrestBranch(73834, 47196, 0);
# 5510 "xmlparse.c"
      __retres61 = (XML_Char const *)((void *)0);
# 5510 "xmlparse.c"
      goto return_label;
    }
    }
# 5511 "xmlparse.c"
    mem_51 = dtd->defaultPrefix.binding;
    __CrestLoad(73835, (unsigned long )(& mem_51->uriLen), (long long )mem_51->uriLen);
    __CrestStore(73836, (unsigned long )(& len));
# 5511 "xmlparse.c"
    len = mem_51->uriLen;
    {
    __CrestLoad(73839, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
    __CrestLoad(73838, (unsigned long )0, (long long )0);
    __CrestApply2(73837, 13, (long long )(parser->m_namespaceSeparator != 0));
# 5512 "xmlparse.c"
    if (parser->m_namespaceSeparator != 0) {
      __CrestBranch(73840, 47200, 1);
      __CrestLoad(73844, (unsigned long )(& len), (long long )len);
      __CrestLoad(73843, (unsigned long )0, (long long )1);
      __CrestApply2(73842, 1, (long long )(len - 1));
      __CrestStore(73845, (unsigned long )(& len));
# 5513 "xmlparse.c"
      len --;
    } else {
      __CrestBranch(73841, 47201, 0);

    }
    }
    __CrestLoad(73846, (unsigned long )0, (long long )0);
    __CrestStore(73847, (unsigned long )(& i));
# 5514 "xmlparse.c"
    i = 0;
    {
# 5514 "xmlparse.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(73850, (unsigned long )(& i), (long long )i);
      __CrestLoad(73849, (unsigned long )(& len), (long long )len);
      __CrestApply2(73848, 16, (long long )(i < len));
# 5514 "xmlparse.c"
      if (i < len) {
        __CrestBranch(73851, 47207, 1);

      } else {
        __CrestBranch(73852, 47208, 0);
# 5514 "xmlparse.c"
        goto while_break;
      }
      }
      {
      __CrestLoad(73855, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(73854, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(73853, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5515 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(73856, 47210, 1);
# 5515 "xmlparse.c"
        tmp___6 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(73859, (long long )tmp___6);
        __CrestStore(73858, (unsigned long )(& tmp___6));
        {
        __CrestLoad(73862, (unsigned long )(& tmp___6), (long long )tmp___6);
        __CrestLoad(73861, (unsigned long )0, (long long )0);
        __CrestApply2(73860, 13, (long long )(tmp___6 != 0));
# 5515 "xmlparse.c"
        if (tmp___6 != 0) {
          __CrestBranch(73863, 47212, 1);
# 5515 "xmlparse.c"
          tmp___4 = parser->m_tempPool.ptr;
# 5515 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
# 5515 "xmlparse.c"
          mem_52 = dtd->defaultPrefix.binding;
# 5515 "xmlparse.c"
          mem_53 = mem_52->uri + i;
          __CrestLoad(73865, (unsigned long )mem_53, (long long )*mem_53);
          __CrestStore(73866, (unsigned long )tmp___4);
# 5515 "xmlparse.c"
          *tmp___4 = *mem_53;
          __CrestLoad(73867, (unsigned long )0, (long long )1);
          __CrestStore(73868, (unsigned long )(& tmp___5));
# 5515 "xmlparse.c"
          tmp___5 = 1;
        } else {
          __CrestBranch(73864, 47213, 0);
          __CrestLoad(73869, (unsigned long )0, (long long )0);
          __CrestStore(73870, (unsigned long )(& tmp___5));
# 5515 "xmlparse.c"
          tmp___5 = 0;
        }
        }
      } else {
        __CrestBranch(73857, 47214, 0);
# 5515 "xmlparse.c"
        tmp___4 = parser->m_tempPool.ptr;
# 5515 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
# 5515 "xmlparse.c"
        mem_54 = dtd->defaultPrefix.binding;
# 5515 "xmlparse.c"
        mem_55 = mem_54->uri + i;
        __CrestLoad(73871, (unsigned long )mem_55, (long long )*mem_55);
        __CrestStore(73872, (unsigned long )tmp___4);
# 5515 "xmlparse.c"
        *tmp___4 = *mem_55;
        __CrestLoad(73873, (unsigned long )0, (long long )1);
        __CrestStore(73874, (unsigned long )(& tmp___5));
# 5515 "xmlparse.c"
        tmp___5 = 1;
      }
      }
      {
      __CrestLoad(73877, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(73876, (unsigned long )0, (long long )0);
      __CrestApply2(73875, 13, (long long )(tmp___5 != 0));
# 5515 "xmlparse.c"
      if (tmp___5 != 0) {
        __CrestBranch(73878, 47216, 1);

      } else {
        __CrestBranch(73879, 47217, 0);
# 5516 "xmlparse.c"
        __retres61 = (XML_Char const *)((void *)0);
# 5516 "xmlparse.c"
        goto return_label;
      }
      }
      __CrestLoad(73882, (unsigned long )(& i), (long long )i);
      __CrestLoad(73881, (unsigned long )0, (long long )1);
      __CrestApply2(73880, 0, (long long )(i + 1));
      __CrestStore(73883, (unsigned long )(& i));
# 5514 "xmlparse.c"
      i ++;
    }
    while_break: ;
    }
    __CrestLoad(73884, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(73885, (unsigned long )(& needSep));
# 5517 "xmlparse.c"
    needSep = (XML_Bool )1;
  } else {
    __CrestBranch(73807, 47222, 0);

  }
  }
# 5520 "xmlparse.c"
  hashTableIterInit(& iter, (HASH_TABLE const *)(& dtd->prefixes));
  __CrestClearStack(73886);
  {
# 5521 "xmlparse.c"
  while (1) {
    while_continue___0: ;
# 5525 "xmlparse.c"
    tmp___7 = hashTableIterNext(& iter);
    __CrestClearStack(73887);
# 5525 "xmlparse.c"
    prefix = (PREFIX *)tmp___7;
    {
    __CrestLoad(73890, (unsigned long )(& prefix), (long long )((unsigned long )prefix));
    __CrestLoad(73889, (unsigned long )0, (long long )0);
    __CrestApply2(73888, 12, (long long )(prefix == 0));
# 5526 "xmlparse.c"
    if (prefix == 0) {
      __CrestBranch(73891, 47229, 1);
# 5527 "xmlparse.c"
      goto while_break___0;
    } else {
      __CrestBranch(73892, 47230, 0);

    }
    }
    {
    __CrestLoad(73895, (unsigned long )(& prefix->binding), (long long )((unsigned long )prefix->binding));
    __CrestLoad(73894, (unsigned long )0, (long long )0);
    __CrestApply2(73893, 12, (long long )(prefix->binding == 0));
# 5528 "xmlparse.c"
    if (prefix->binding == 0) {
      __CrestBranch(73896, 47232, 1);
# 5529 "xmlparse.c"
      goto __Cont;
    } else {
      __CrestBranch(73897, 47233, 0);

    }
    }
    {
    __CrestLoad(73900, (unsigned long )(& needSep), (long long )needSep);
    __CrestLoad(73899, (unsigned long )0, (long long )0);
    __CrestApply2(73898, 13, (long long )(needSep != 0));
# 5530 "xmlparse.c"
    if (needSep != 0) {
      __CrestBranch(73901, 47235, 1);
      {
      __CrestLoad(73905, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(73904, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(73903, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5530 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(73906, 47236, 1);
# 5530 "xmlparse.c"
        tmp___11 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(73909, (long long )tmp___11);
        __CrestStore(73908, (unsigned long )(& tmp___11));
        {
        __CrestLoad(73912, (unsigned long )(& tmp___11), (long long )tmp___11);
        __CrestLoad(73911, (unsigned long )0, (long long )0);
        __CrestApply2(73910, 13, (long long )(tmp___11 != 0));
# 5530 "xmlparse.c"
        if (tmp___11 != 0) {
          __CrestBranch(73913, 47238, 1);
# 5530 "xmlparse.c"
          tmp___9 = parser->m_tempPool.ptr;
# 5530 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
          __CrestLoad(73915, (unsigned long )0, (long long )((XML_Char )12));
          __CrestStore(73916, (unsigned long )tmp___9);
# 5530 "xmlparse.c"
          *tmp___9 = (XML_Char )12;
          __CrestLoad(73917, (unsigned long )0, (long long )1);
          __CrestStore(73918, (unsigned long )(& tmp___10));
# 5530 "xmlparse.c"
          tmp___10 = 1;
        } else {
          __CrestBranch(73914, 47239, 0);
          __CrestLoad(73919, (unsigned long )0, (long long )0);
          __CrestStore(73920, (unsigned long )(& tmp___10));
# 5530 "xmlparse.c"
          tmp___10 = 0;
        }
        }
      } else {
        __CrestBranch(73907, 47240, 0);
# 5530 "xmlparse.c"
        tmp___9 = parser->m_tempPool.ptr;
# 5530 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(73921, (unsigned long )0, (long long )((XML_Char )12));
        __CrestStore(73922, (unsigned long )tmp___9);
# 5530 "xmlparse.c"
        *tmp___9 = (XML_Char )12;
        __CrestLoad(73923, (unsigned long )0, (long long )1);
        __CrestStore(73924, (unsigned long )(& tmp___10));
# 5530 "xmlparse.c"
        tmp___10 = 1;
      }
      }
      {
      __CrestLoad(73927, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(73926, (unsigned long )0, (long long )0);
      __CrestApply2(73925, 13, (long long )(tmp___10 != 0));
# 5530 "xmlparse.c"
      if (tmp___10 != 0) {
        __CrestBranch(73928, 47242, 1);

      } else {
        __CrestBranch(73929, 47243, 0);
# 5531 "xmlparse.c"
        __retres61 = (XML_Char const *)((void *)0);
# 5531 "xmlparse.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(73902, 47245, 0);

    }
    }
# 5532 "xmlparse.c"
    s = prefix->name;
    {
# 5532 "xmlparse.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(73932, (unsigned long )s, (long long )*s);
      __CrestLoad(73931, (unsigned long )0, (long long )0);
      __CrestApply2(73930, 13, (long long )(*s != 0));
# 5532 "xmlparse.c"
      if (*s != 0) {
        __CrestBranch(73933, 47251, 1);

      } else {
        __CrestBranch(73934, 47252, 0);
# 5532 "xmlparse.c"
        goto while_break___1;
      }
      }
      {
      __CrestLoad(73937, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(73936, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(73935, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5533 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(73938, 47254, 1);
# 5533 "xmlparse.c"
        tmp___15 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(73941, (long long )tmp___15);
        __CrestStore(73940, (unsigned long )(& tmp___15));
        {
        __CrestLoad(73944, (unsigned long )(& tmp___15), (long long )tmp___15);
        __CrestLoad(73943, (unsigned long )0, (long long )0);
        __CrestApply2(73942, 13, (long long )(tmp___15 != 0));
# 5533 "xmlparse.c"
        if (tmp___15 != 0) {
          __CrestBranch(73945, 47256, 1);
# 5533 "xmlparse.c"
          tmp___13 = parser->m_tempPool.ptr;
# 5533 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
          __CrestLoad(73947, (unsigned long )s, (long long )*s);
          __CrestStore(73948, (unsigned long )tmp___13);
# 5533 "xmlparse.c"
          *tmp___13 = (XML_Char )*s;
          __CrestLoad(73949, (unsigned long )0, (long long )1);
          __CrestStore(73950, (unsigned long )(& tmp___14));
# 5533 "xmlparse.c"
          tmp___14 = 1;
        } else {
          __CrestBranch(73946, 47257, 0);
          __CrestLoad(73951, (unsigned long )0, (long long )0);
          __CrestStore(73952, (unsigned long )(& tmp___14));
# 5533 "xmlparse.c"
          tmp___14 = 0;
        }
        }
      } else {
        __CrestBranch(73939, 47258, 0);
# 5533 "xmlparse.c"
        tmp___13 = parser->m_tempPool.ptr;
# 5533 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(73953, (unsigned long )s, (long long )*s);
        __CrestStore(73954, (unsigned long )tmp___13);
# 5533 "xmlparse.c"
        *tmp___13 = (XML_Char )*s;
        __CrestLoad(73955, (unsigned long )0, (long long )1);
        __CrestStore(73956, (unsigned long )(& tmp___14));
# 5533 "xmlparse.c"
        tmp___14 = 1;
      }
      }
      {
      __CrestLoad(73959, (unsigned long )(& tmp___14), (long long )tmp___14);
      __CrestLoad(73958, (unsigned long )0, (long long )0);
      __CrestApply2(73957, 13, (long long )(tmp___14 != 0));
# 5533 "xmlparse.c"
      if (tmp___14 != 0) {
        __CrestBranch(73960, 47260, 1);

      } else {
        __CrestBranch(73961, 47261, 0);
# 5534 "xmlparse.c"
        __retres61 = (XML_Char const *)((void *)0);
# 5534 "xmlparse.c"
        goto return_label;
      }
      }
# 5532 "xmlparse.c"
      s ++;
    }
    while_break___1: ;
    }
    {
    __CrestLoad(73964, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
    __CrestLoad(73963, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
    __CrestApply2(73962, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5535 "xmlparse.c"
    if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
      __CrestBranch(73965, 47266, 1);
# 5535 "xmlparse.c"
      tmp___19 = poolGrow(& parser->m_tempPool);
      __CrestHandleReturn(73968, (long long )tmp___19);
      __CrestStore(73967, (unsigned long )(& tmp___19));
      {
      __CrestLoad(73971, (unsigned long )(& tmp___19), (long long )tmp___19);
      __CrestLoad(73970, (unsigned long )0, (long long )0);
      __CrestApply2(73969, 13, (long long )(tmp___19 != 0));
# 5535 "xmlparse.c"
      if (tmp___19 != 0) {
        __CrestBranch(73972, 47268, 1);
# 5535 "xmlparse.c"
        tmp___17 = parser->m_tempPool.ptr;
# 5535 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(73974, (unsigned long )0, (long long )((XML_Char )61));
        __CrestStore(73975, (unsigned long )tmp___17);
# 5535 "xmlparse.c"
        *tmp___17 = (XML_Char )61;
        __CrestLoad(73976, (unsigned long )0, (long long )1);
        __CrestStore(73977, (unsigned long )(& tmp___18));
# 5535 "xmlparse.c"
        tmp___18 = 1;
      } else {
        __CrestBranch(73973, 47269, 0);
        __CrestLoad(73978, (unsigned long )0, (long long )0);
        __CrestStore(73979, (unsigned long )(& tmp___18));
# 5535 "xmlparse.c"
        tmp___18 = 0;
      }
      }
    } else {
      __CrestBranch(73966, 47270, 0);
# 5535 "xmlparse.c"
      tmp___17 = parser->m_tempPool.ptr;
# 5535 "xmlparse.c"
      (parser->m_tempPool.ptr) ++;
      __CrestLoad(73980, (unsigned long )0, (long long )((XML_Char )61));
      __CrestStore(73981, (unsigned long )tmp___17);
# 5535 "xmlparse.c"
      *tmp___17 = (XML_Char )61;
      __CrestLoad(73982, (unsigned long )0, (long long )1);
      __CrestStore(73983, (unsigned long )(& tmp___18));
# 5535 "xmlparse.c"
      tmp___18 = 1;
    }
    }
    {
    __CrestLoad(73986, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(73985, (unsigned long )0, (long long )0);
    __CrestApply2(73984, 13, (long long )(tmp___18 != 0));
# 5535 "xmlparse.c"
    if (tmp___18 != 0) {
      __CrestBranch(73987, 47272, 1);

    } else {
      __CrestBranch(73988, 47273, 0);
# 5536 "xmlparse.c"
      __retres61 = (XML_Char const *)((void *)0);
# 5536 "xmlparse.c"
      goto return_label;
    }
    }
# 5537 "xmlparse.c"
    mem_56 = prefix->binding;
    __CrestLoad(73989, (unsigned long )(& mem_56->uriLen), (long long )mem_56->uriLen);
    __CrestStore(73990, (unsigned long )(& len___0));
# 5537 "xmlparse.c"
    len___0 = mem_56->uriLen;
    {
    __CrestLoad(73993, (unsigned long )(& parser->m_namespaceSeparator), (long long )parser->m_namespaceSeparator);
    __CrestLoad(73992, (unsigned long )0, (long long )0);
    __CrestApply2(73991, 13, (long long )(parser->m_namespaceSeparator != 0));
# 5538 "xmlparse.c"
    if (parser->m_namespaceSeparator != 0) {
      __CrestBranch(73994, 47277, 1);
      __CrestLoad(73998, (unsigned long )(& len___0), (long long )len___0);
      __CrestLoad(73997, (unsigned long )0, (long long )1);
      __CrestApply2(73996, 1, (long long )(len___0 - 1));
      __CrestStore(73999, (unsigned long )(& len___0));
# 5539 "xmlparse.c"
      len___0 --;
    } else {
      __CrestBranch(73995, 47278, 0);

    }
    }
    __CrestLoad(74000, (unsigned long )0, (long long )0);
    __CrestStore(74001, (unsigned long )(& i___0));
# 5540 "xmlparse.c"
    i___0 = 0;
    {
# 5540 "xmlparse.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(74004, (unsigned long )(& i___0), (long long )i___0);
      __CrestLoad(74003, (unsigned long )(& len___0), (long long )len___0);
      __CrestApply2(74002, 16, (long long )(i___0 < len___0));
# 5540 "xmlparse.c"
      if (i___0 < len___0) {
        __CrestBranch(74005, 47284, 1);

      } else {
        __CrestBranch(74006, 47285, 0);
# 5540 "xmlparse.c"
        goto while_break___2;
      }
      }
      {
      __CrestLoad(74009, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(74008, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(74007, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5541 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(74010, 47287, 1);
# 5541 "xmlparse.c"
        tmp___23 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(74013, (long long )tmp___23);
        __CrestStore(74012, (unsigned long )(& tmp___23));
        {
        __CrestLoad(74016, (unsigned long )(& tmp___23), (long long )tmp___23);
        __CrestLoad(74015, (unsigned long )0, (long long )0);
        __CrestApply2(74014, 13, (long long )(tmp___23 != 0));
# 5541 "xmlparse.c"
        if (tmp___23 != 0) {
          __CrestBranch(74017, 47289, 1);
# 5541 "xmlparse.c"
          tmp___21 = parser->m_tempPool.ptr;
# 5541 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
# 5541 "xmlparse.c"
          mem_57 = prefix->binding;
# 5541 "xmlparse.c"
          mem_58 = mem_57->uri + i___0;
          __CrestLoad(74019, (unsigned long )mem_58, (long long )*mem_58);
          __CrestStore(74020, (unsigned long )tmp___21);
# 5541 "xmlparse.c"
          *tmp___21 = *mem_58;
          __CrestLoad(74021, (unsigned long )0, (long long )1);
          __CrestStore(74022, (unsigned long )(& tmp___22));
# 5541 "xmlparse.c"
          tmp___22 = 1;
        } else {
          __CrestBranch(74018, 47290, 0);
          __CrestLoad(74023, (unsigned long )0, (long long )0);
          __CrestStore(74024, (unsigned long )(& tmp___22));
# 5541 "xmlparse.c"
          tmp___22 = 0;
        }
        }
      } else {
        __CrestBranch(74011, 47291, 0);
# 5541 "xmlparse.c"
        tmp___21 = parser->m_tempPool.ptr;
# 5541 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
# 5541 "xmlparse.c"
        mem_59 = prefix->binding;
# 5541 "xmlparse.c"
        mem_60 = mem_59->uri + i___0;
        __CrestLoad(74025, (unsigned long )mem_60, (long long )*mem_60);
        __CrestStore(74026, (unsigned long )tmp___21);
# 5541 "xmlparse.c"
        *tmp___21 = *mem_60;
        __CrestLoad(74027, (unsigned long )0, (long long )1);
        __CrestStore(74028, (unsigned long )(& tmp___22));
# 5541 "xmlparse.c"
        tmp___22 = 1;
      }
      }
      {
      __CrestLoad(74031, (unsigned long )(& tmp___22), (long long )tmp___22);
      __CrestLoad(74030, (unsigned long )0, (long long )0);
      __CrestApply2(74029, 13, (long long )(tmp___22 != 0));
# 5541 "xmlparse.c"
      if (tmp___22 != 0) {
        __CrestBranch(74032, 47293, 1);

      } else {
        __CrestBranch(74033, 47294, 0);
# 5542 "xmlparse.c"
        __retres61 = (XML_Char const *)((void *)0);
# 5542 "xmlparse.c"
        goto return_label;
      }
      }
      __CrestLoad(74036, (unsigned long )(& i___0), (long long )i___0);
      __CrestLoad(74035, (unsigned long )0, (long long )1);
      __CrestApply2(74034, 0, (long long )(i___0 + 1));
      __CrestStore(74037, (unsigned long )(& i___0));
# 5540 "xmlparse.c"
      i___0 ++;
    }
    while_break___2: ;
    }
    __CrestLoad(74038, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(74039, (unsigned long )(& needSep));
# 5543 "xmlparse.c"
    needSep = (XML_Bool )1;
    __Cont: ;
  }
  while_break___0: ;
  }
# 5547 "xmlparse.c"
  hashTableIterInit(& iter, (HASH_TABLE const *)(& dtd->generalEntities));
  __CrestClearStack(74040);
  {
# 5548 "xmlparse.c"
  while (1) {
    while_continue___3: ;
# 5550 "xmlparse.c"
    tmp___24 = hashTableIterNext(& iter);
    __CrestClearStack(74041);
# 5550 "xmlparse.c"
    e = (ENTITY *)tmp___24;
    {
    __CrestLoad(74044, (unsigned long )(& e), (long long )((unsigned long )e));
    __CrestLoad(74043, (unsigned long )0, (long long )0);
    __CrestApply2(74042, 12, (long long )(e == 0));
# 5551 "xmlparse.c"
    if (e == 0) {
      __CrestBranch(74045, 47307, 1);
# 5552 "xmlparse.c"
      goto while_break___3;
    } else {
      __CrestBranch(74046, 47308, 0);

    }
    }
    {
    __CrestLoad(74049, (unsigned long )(& e->open), (long long )e->open);
    __CrestLoad(74048, (unsigned long )0, (long long )0);
    __CrestApply2(74047, 12, (long long )(e->open == 0));
# 5553 "xmlparse.c"
    if (e->open == 0) {
      __CrestBranch(74050, 47310, 1);
# 5554 "xmlparse.c"
      goto __Cont___0;
    } else {
      __CrestBranch(74051, 47311, 0);

    }
    }
    {
    __CrestLoad(74054, (unsigned long )(& needSep), (long long )needSep);
    __CrestLoad(74053, (unsigned long )0, (long long )0);
    __CrestApply2(74052, 13, (long long )(needSep != 0));
# 5555 "xmlparse.c"
    if (needSep != 0) {
      __CrestBranch(74055, 47313, 1);
      {
      __CrestLoad(74059, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(74058, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(74057, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5555 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(74060, 47314, 1);
# 5555 "xmlparse.c"
        tmp___28 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(74063, (long long )tmp___28);
        __CrestStore(74062, (unsigned long )(& tmp___28));
        {
        __CrestLoad(74066, (unsigned long )(& tmp___28), (long long )tmp___28);
        __CrestLoad(74065, (unsigned long )0, (long long )0);
        __CrestApply2(74064, 13, (long long )(tmp___28 != 0));
# 5555 "xmlparse.c"
        if (tmp___28 != 0) {
          __CrestBranch(74067, 47316, 1);
# 5555 "xmlparse.c"
          tmp___26 = parser->m_tempPool.ptr;
# 5555 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
          __CrestLoad(74069, (unsigned long )0, (long long )((XML_Char )12));
          __CrestStore(74070, (unsigned long )tmp___26);
# 5555 "xmlparse.c"
          *tmp___26 = (XML_Char )12;
          __CrestLoad(74071, (unsigned long )0, (long long )1);
          __CrestStore(74072, (unsigned long )(& tmp___27));
# 5555 "xmlparse.c"
          tmp___27 = 1;
        } else {
          __CrestBranch(74068, 47317, 0);
          __CrestLoad(74073, (unsigned long )0, (long long )0);
          __CrestStore(74074, (unsigned long )(& tmp___27));
# 5555 "xmlparse.c"
          tmp___27 = 0;
        }
        }
      } else {
        __CrestBranch(74061, 47318, 0);
# 5555 "xmlparse.c"
        tmp___26 = parser->m_tempPool.ptr;
# 5555 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(74075, (unsigned long )0, (long long )((XML_Char )12));
        __CrestStore(74076, (unsigned long )tmp___26);
# 5555 "xmlparse.c"
        *tmp___26 = (XML_Char )12;
        __CrestLoad(74077, (unsigned long )0, (long long )1);
        __CrestStore(74078, (unsigned long )(& tmp___27));
# 5555 "xmlparse.c"
        tmp___27 = 1;
      }
      }
      {
      __CrestLoad(74081, (unsigned long )(& tmp___27), (long long )tmp___27);
      __CrestLoad(74080, (unsigned long )0, (long long )0);
      __CrestApply2(74079, 13, (long long )(tmp___27 != 0));
# 5555 "xmlparse.c"
      if (tmp___27 != 0) {
        __CrestBranch(74082, 47320, 1);

      } else {
        __CrestBranch(74083, 47321, 0);
# 5556 "xmlparse.c"
        __retres61 = (XML_Char const *)((void *)0);
# 5556 "xmlparse.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(74056, 47323, 0);

    }
    }
# 5557 "xmlparse.c"
    s___0 = e->name;
    {
# 5557 "xmlparse.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(74086, (unsigned long )s___0, (long long )*s___0);
      __CrestLoad(74085, (unsigned long )0, (long long )0);
      __CrestApply2(74084, 13, (long long )(*s___0 != 0));
# 5557 "xmlparse.c"
      if (*s___0 != 0) {
        __CrestBranch(74087, 47329, 1);

      } else {
        __CrestBranch(74088, 47330, 0);
# 5557 "xmlparse.c"
        goto while_break___4;
      }
      }
      {
      __CrestLoad(74091, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
      __CrestLoad(74090, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
      __CrestApply2(74089, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5558 "xmlparse.c"
      if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
        __CrestBranch(74092, 47332, 1);
# 5558 "xmlparse.c"
        tmp___32 = poolGrow(& parser->m_tempPool);
        __CrestHandleReturn(74095, (long long )tmp___32);
        __CrestStore(74094, (unsigned long )(& tmp___32));
        {
        __CrestLoad(74098, (unsigned long )(& tmp___32), (long long )tmp___32);
        __CrestLoad(74097, (unsigned long )0, (long long )0);
        __CrestApply2(74096, 13, (long long )(tmp___32 != 0));
# 5558 "xmlparse.c"
        if (tmp___32 != 0) {
          __CrestBranch(74099, 47334, 1);
# 5558 "xmlparse.c"
          tmp___30 = parser->m_tempPool.ptr;
# 5558 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
          __CrestLoad(74101, (unsigned long )s___0, (long long )*s___0);
          __CrestStore(74102, (unsigned long )tmp___30);
# 5558 "xmlparse.c"
          *tmp___30 = (XML_Char )*s___0;
          __CrestLoad(74103, (unsigned long )0, (long long )1);
          __CrestStore(74104, (unsigned long )(& tmp___31));
# 5558 "xmlparse.c"
          tmp___31 = 1;
        } else {
          __CrestBranch(74100, 47335, 0);
          __CrestLoad(74105, (unsigned long )0, (long long )0);
          __CrestStore(74106, (unsigned long )(& tmp___31));
# 5558 "xmlparse.c"
          tmp___31 = 0;
        }
        }
      } else {
        __CrestBranch(74093, 47336, 0);
# 5558 "xmlparse.c"
        tmp___30 = parser->m_tempPool.ptr;
# 5558 "xmlparse.c"
        (parser->m_tempPool.ptr) ++;
        __CrestLoad(74107, (unsigned long )s___0, (long long )*s___0);
        __CrestStore(74108, (unsigned long )tmp___30);
# 5558 "xmlparse.c"
        *tmp___30 = (XML_Char )*s___0;
        __CrestLoad(74109, (unsigned long )0, (long long )1);
        __CrestStore(74110, (unsigned long )(& tmp___31));
# 5558 "xmlparse.c"
        tmp___31 = 1;
      }
      }
      {
      __CrestLoad(74113, (unsigned long )(& tmp___31), (long long )tmp___31);
      __CrestLoad(74112, (unsigned long )0, (long long )0);
      __CrestApply2(74111, 13, (long long )(tmp___31 != 0));
# 5558 "xmlparse.c"
      if (tmp___31 != 0) {
        __CrestBranch(74114, 47338, 1);

      } else {
        __CrestBranch(74115, 47339, 0);
# 5559 "xmlparse.c"
        __retres61 = (XML_Char const *)0;
# 5559 "xmlparse.c"
        goto return_label;
      }
      }
# 5557 "xmlparse.c"
      s___0 ++;
    }
    while_break___4: ;
    }
    __CrestLoad(74116, (unsigned long )0, (long long )((XML_Bool )1));
    __CrestStore(74117, (unsigned long )(& needSep));
# 5560 "xmlparse.c"
    needSep = (XML_Bool )1;
    __Cont___0: ;
  }
  while_break___3: ;
  }
  {
  __CrestLoad(74120, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
  __CrestLoad(74119, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
  __CrestApply2(74118, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5563 "xmlparse.c"
  if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
    __CrestBranch(74121, 47347, 1);
# 5563 "xmlparse.c"
    tmp___36 = poolGrow(& parser->m_tempPool);
    __CrestHandleReturn(74124, (long long )tmp___36);
    __CrestStore(74123, (unsigned long )(& tmp___36));
    {
    __CrestLoad(74127, (unsigned long )(& tmp___36), (long long )tmp___36);
    __CrestLoad(74126, (unsigned long )0, (long long )0);
    __CrestApply2(74125, 13, (long long )(tmp___36 != 0));
# 5563 "xmlparse.c"
    if (tmp___36 != 0) {
      __CrestBranch(74128, 47349, 1);
# 5563 "xmlparse.c"
      tmp___34 = parser->m_tempPool.ptr;
# 5563 "xmlparse.c"
      (parser->m_tempPool.ptr) ++;
      __CrestLoad(74130, (unsigned long )0, (long long )((XML_Char )'\000'));
      __CrestStore(74131, (unsigned long )tmp___34);
# 5563 "xmlparse.c"
      *tmp___34 = (XML_Char )'\000';
      __CrestLoad(74132, (unsigned long )0, (long long )1);
      __CrestStore(74133, (unsigned long )(& tmp___35));
# 5563 "xmlparse.c"
      tmp___35 = 1;
    } else {
      __CrestBranch(74129, 47350, 0);
      __CrestLoad(74134, (unsigned long )0, (long long )0);
      __CrestStore(74135, (unsigned long )(& tmp___35));
# 5563 "xmlparse.c"
      tmp___35 = 0;
    }
    }
  } else {
    __CrestBranch(74122, 47351, 0);
# 5563 "xmlparse.c"
    tmp___34 = parser->m_tempPool.ptr;
# 5563 "xmlparse.c"
    (parser->m_tempPool.ptr) ++;
    __CrestLoad(74136, (unsigned long )0, (long long )((XML_Char )'\000'));
    __CrestStore(74137, (unsigned long )tmp___34);
# 5563 "xmlparse.c"
    *tmp___34 = (XML_Char )'\000';
    __CrestLoad(74138, (unsigned long )0, (long long )1);
    __CrestStore(74139, (unsigned long )(& tmp___35));
# 5563 "xmlparse.c"
    tmp___35 = 1;
  }
  }
  {
  __CrestLoad(74142, (unsigned long )(& tmp___35), (long long )tmp___35);
  __CrestLoad(74141, (unsigned long )0, (long long )0);
  __CrestApply2(74140, 13, (long long )(tmp___35 != 0));
# 5563 "xmlparse.c"
  if (tmp___35 != 0) {
    __CrestBranch(74143, 47353, 1);

  } else {
    __CrestBranch(74144, 47354, 0);
# 5564 "xmlparse.c"
    __retres61 = (XML_Char const *)((void *)0);
# 5564 "xmlparse.c"
    goto return_label;
  }
  }
# 5565 "xmlparse.c"
  __retres61 = (XML_Char const *)parser->m_tempPool.start;
  return_label:
  {
  __CrestReturn(74145);
# 5499 "xmlparse.c"
  return (__retres61);
  }
}
}
# 5568 "xmlparse.c"
static XML_Bool setContext(XML_Parser parser , XML_Char const *context )
{
  DTD *dtd ;
  XML_Char const *s ;
  ENTITY *e ;
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  NAMED *tmp___3 ;
  PREFIX *prefix ;
  XML_Char *tmp___5 ;
  int tmp___6 ;
  XML_Bool tmp___7 ;
  NAMED *tmp___8 ;
  XML_Char *tmp___10 ;
  int tmp___11 ;
  XML_Bool tmp___12 ;
  XML_Char *tmp___14 ;
  int tmp___15 ;
  XML_Bool tmp___16 ;
  enum XML_Error tmp___17 ;
  XML_Char *tmp___19 ;
  int tmp___20 ;
  XML_Bool tmp___21 ;
  XML_Bool __retres30 ;

  {
  __CrestCall(74146, 797);
# 5571 "xmlparse.c"
  dtd = parser->m_dtd;
# 5572 "xmlparse.c"
  s = context;
  {
# 5574 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(74149, (unsigned long )context, (long long )*context);
    __CrestLoad(74148, (unsigned long )0, (long long )0);
    __CrestApply2(74147, 13, (long long )((int const )*context != 0));
# 5574 "xmlparse.c"
    if ((int const )*context != 0) {
      __CrestBranch(74150, 47363, 1);

    } else {
      __CrestBranch(74151, 47364, 0);
# 5574 "xmlparse.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(74154, (unsigned long )s, (long long )*s);
    __CrestLoad(74153, (unsigned long )0, (long long )12);
    __CrestApply2(74152, 12, (long long )((int const )*s == 12));
# 5575 "xmlparse.c"
    if ((int const )*s == 12) {
      __CrestBranch(74155, 47366, 1);
# 5575 "xmlparse.c"
      goto _L;
    } else {
      __CrestBranch(74156, 47367, 0);
      {
      __CrestLoad(74159, (unsigned long )s, (long long )*s);
      __CrestLoad(74158, (unsigned long )0, (long long )0);
      __CrestApply2(74157, 12, (long long )((int const )*s == 0));
# 5575 "xmlparse.c"
      if ((int const )*s == 0) {
        __CrestBranch(74160, 47368, 1);
        _L:
        {
        __CrestLoad(74164, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
        __CrestLoad(74163, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
        __CrestApply2(74162, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5577 "xmlparse.c"
        if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
          __CrestBranch(74165, 47369, 1);
# 5577 "xmlparse.c"
          tmp___2 = poolGrow(& parser->m_tempPool);
          __CrestHandleReturn(74168, (long long )tmp___2);
          __CrestStore(74167, (unsigned long )(& tmp___2));
          {
          __CrestLoad(74171, (unsigned long )(& tmp___2), (long long )tmp___2);
          __CrestLoad(74170, (unsigned long )0, (long long )0);
          __CrestApply2(74169, 13, (long long )(tmp___2 != 0));
# 5577 "xmlparse.c"
          if (tmp___2 != 0) {
            __CrestBranch(74172, 47371, 1);
# 5577 "xmlparse.c"
            tmp___0 = parser->m_tempPool.ptr;
# 5577 "xmlparse.c"
            (parser->m_tempPool.ptr) ++;
            __CrestLoad(74174, (unsigned long )0, (long long )((XML_Char )'\000'));
            __CrestStore(74175, (unsigned long )tmp___0);
# 5577 "xmlparse.c"
            *tmp___0 = (XML_Char )'\000';
            __CrestLoad(74176, (unsigned long )0, (long long )1);
            __CrestStore(74177, (unsigned long )(& tmp___1));
# 5577 "xmlparse.c"
            tmp___1 = 1;
          } else {
            __CrestBranch(74173, 47372, 0);
            __CrestLoad(74178, (unsigned long )0, (long long )0);
            __CrestStore(74179, (unsigned long )(& tmp___1));
# 5577 "xmlparse.c"
            tmp___1 = 0;
          }
          }
        } else {
          __CrestBranch(74166, 47373, 0);
# 5577 "xmlparse.c"
          tmp___0 = parser->m_tempPool.ptr;
# 5577 "xmlparse.c"
          (parser->m_tempPool.ptr) ++;
          __CrestLoad(74180, (unsigned long )0, (long long )((XML_Char )'\000'));
          __CrestStore(74181, (unsigned long )tmp___0);
# 5577 "xmlparse.c"
          *tmp___0 = (XML_Char )'\000';
          __CrestLoad(74182, (unsigned long )0, (long long )1);
          __CrestStore(74183, (unsigned long )(& tmp___1));
# 5577 "xmlparse.c"
          tmp___1 = 1;
        }
        }
        {
        __CrestLoad(74186, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestLoad(74185, (unsigned long )0, (long long )0);
        __CrestApply2(74184, 13, (long long )(tmp___1 != 0));
# 5577 "xmlparse.c"
        if (tmp___1 != 0) {
          __CrestBranch(74187, 47375, 1);

        } else {
          __CrestBranch(74188, 47376, 0);
          __CrestLoad(74189, (unsigned long )0, (long long )((XML_Bool )0));
          __CrestStore(74190, (unsigned long )(& __retres30));
# 5578 "xmlparse.c"
          __retres30 = (XML_Bool )0;
# 5578 "xmlparse.c"
          goto return_label;
        }
        }
        __CrestLoad(74191, (unsigned long )0, (long long )((size_t )0));
# 5579 "xmlparse.c"
        tmp___3 = lookup(parser, & dtd->generalEntities, (KEY )parser->m_tempPool.start,
                         (size_t )0);
        __CrestClearStack(74192);
# 5579 "xmlparse.c"
        e = (ENTITY *)tmp___3;
        {
        __CrestLoad(74195, (unsigned long )(& e), (long long )((unsigned long )e));
        __CrestLoad(74194, (unsigned long )0, (long long )0);
        __CrestApply2(74193, 13, (long long )(e != 0));
# 5580 "xmlparse.c"
        if (e != 0) {
          __CrestBranch(74196, 47380, 1);
          __CrestLoad(74198, (unsigned long )0, (long long )((XML_Bool )1));
          __CrestStore(74199, (unsigned long )(& e->open));
# 5581 "xmlparse.c"
          e->open = (XML_Bool )1;
        } else {
          __CrestBranch(74197, 47381, 0);

        }
        }
        {
        __CrestLoad(74202, (unsigned long )s, (long long )*s);
        __CrestLoad(74201, (unsigned long )0, (long long )0);
        __CrestApply2(74200, 13, (long long )((int const )*s != 0));
# 5582 "xmlparse.c"
        if ((int const )*s != 0) {
          __CrestBranch(74203, 47383, 1);
# 5583 "xmlparse.c"
          s ++;
        } else {
          __CrestBranch(74204, 47384, 0);

        }
        }
# 5584 "xmlparse.c"
        context = s;
# 5585 "xmlparse.c"
        parser->m_tempPool.ptr = parser->m_tempPool.start;
      } else {
        __CrestBranch(74161, 47386, 0);
        {
        __CrestLoad(74207, (unsigned long )s, (long long )*s);
        __CrestLoad(74206, (unsigned long )0, (long long )61);
        __CrestApply2(74205, 12, (long long )((int const )*s == 61));
# 5587 "xmlparse.c"
        if ((int const )*s == 61) {
          __CrestBranch(74208, 47387, 1);
          {
          __CrestLoad(74214, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
          __CrestLoad(74213, (unsigned long )(& parser->m_tempPool.start), (long long )((unsigned long )parser->m_tempPool.start));
          __CrestApply2(74212, 18, (long long )(parser->m_tempPool.ptr - parser->m_tempPool.start));
          __CrestLoad(74211, (unsigned long )0, (long long )0L);
          __CrestApply2(74210, 12, (long long )(parser->m_tempPool.ptr - parser->m_tempPool.start == 0L));
# 5589 "xmlparse.c"
          if (parser->m_tempPool.ptr - parser->m_tempPool.start == 0L) {
            __CrestBranch(74215, 47388, 1);
# 5590 "xmlparse.c"
            prefix = & dtd->defaultPrefix;
          } else {
            __CrestBranch(74216, 47389, 0);
            {
            __CrestLoad(74219, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
            __CrestLoad(74218, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
            __CrestApply2(74217, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5592 "xmlparse.c"
            if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
              __CrestBranch(74220, 47390, 1);
# 5592 "xmlparse.c"
              tmp___7 = poolGrow(& parser->m_tempPool);
              __CrestHandleReturn(74223, (long long )tmp___7);
              __CrestStore(74222, (unsigned long )(& tmp___7));
              {
              __CrestLoad(74226, (unsigned long )(& tmp___7), (long long )tmp___7);
              __CrestLoad(74225, (unsigned long )0, (long long )0);
              __CrestApply2(74224, 13, (long long )(tmp___7 != 0));
# 5592 "xmlparse.c"
              if (tmp___7 != 0) {
                __CrestBranch(74227, 47392, 1);
# 5592 "xmlparse.c"
                tmp___5 = parser->m_tempPool.ptr;
# 5592 "xmlparse.c"
                (parser->m_tempPool.ptr) ++;
                __CrestLoad(74229, (unsigned long )0, (long long )((XML_Char )'\000'));
                __CrestStore(74230, (unsigned long )tmp___5);
# 5592 "xmlparse.c"
                *tmp___5 = (XML_Char )'\000';
                __CrestLoad(74231, (unsigned long )0, (long long )1);
                __CrestStore(74232, (unsigned long )(& tmp___6));
# 5592 "xmlparse.c"
                tmp___6 = 1;
              } else {
                __CrestBranch(74228, 47393, 0);
                __CrestLoad(74233, (unsigned long )0, (long long )0);
                __CrestStore(74234, (unsigned long )(& tmp___6));
# 5592 "xmlparse.c"
                tmp___6 = 0;
              }
              }
            } else {
              __CrestBranch(74221, 47394, 0);
# 5592 "xmlparse.c"
              tmp___5 = parser->m_tempPool.ptr;
# 5592 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(74235, (unsigned long )0, (long long )((XML_Char )'\000'));
              __CrestStore(74236, (unsigned long )tmp___5);
# 5592 "xmlparse.c"
              *tmp___5 = (XML_Char )'\000';
              __CrestLoad(74237, (unsigned long )0, (long long )1);
              __CrestStore(74238, (unsigned long )(& tmp___6));
# 5592 "xmlparse.c"
              tmp___6 = 1;
            }
            }
            {
            __CrestLoad(74241, (unsigned long )(& tmp___6), (long long )tmp___6);
            __CrestLoad(74240, (unsigned long )0, (long long )0);
            __CrestApply2(74239, 13, (long long )(tmp___6 != 0));
# 5592 "xmlparse.c"
            if (tmp___6 != 0) {
              __CrestBranch(74242, 47396, 1);

            } else {
              __CrestBranch(74243, 47397, 0);
              __CrestLoad(74244, (unsigned long )0, (long long )((XML_Bool )0));
              __CrestStore(74245, (unsigned long )(& __retres30));
# 5593 "xmlparse.c"
              __retres30 = (XML_Bool )0;
# 5593 "xmlparse.c"
              goto return_label;
            }
            }
            __CrestLoad(74246, (unsigned long )0, (long long )sizeof(PREFIX ));
# 5594 "xmlparse.c"
            tmp___8 = lookup(parser, & dtd->prefixes, (KEY )parser->m_tempPool.start,
                             sizeof(PREFIX ));
            __CrestClearStack(74247);
# 5594 "xmlparse.c"
            prefix = (PREFIX *)tmp___8;
            {
            __CrestLoad(74250, (unsigned long )(& prefix), (long long )((unsigned long )prefix));
            __CrestLoad(74249, (unsigned long )0, (long long )0);
            __CrestApply2(74248, 12, (long long )(prefix == 0));
# 5596 "xmlparse.c"
            if (prefix == 0) {
              __CrestBranch(74251, 47401, 1);
              __CrestLoad(74253, (unsigned long )0, (long long )((XML_Bool )0));
              __CrestStore(74254, (unsigned long )(& __retres30));
# 5597 "xmlparse.c"
              __retres30 = (XML_Bool )0;
# 5597 "xmlparse.c"
              goto return_label;
            } else {
              __CrestBranch(74252, 47403, 0);

            }
            }
            {
            __CrestLoad(74257, (unsigned long )(& prefix->name), (long long )((unsigned long )prefix->name));
            __CrestLoad(74256, (unsigned long )(& parser->m_tempPool.start), (long long )((unsigned long )parser->m_tempPool.start));
            __CrestApply2(74255, 12, (long long )((unsigned long )prefix->name == (unsigned long )parser->m_tempPool.start));
# 5598 "xmlparse.c"
            if ((unsigned long )prefix->name == (unsigned long )parser->m_tempPool.start) {
              __CrestBranch(74258, 47405, 1);
# 5599 "xmlparse.c"
              prefix->name = poolCopyString(& dtd->pool, prefix->name);
              __CrestClearStack(74260);
              {
              __CrestLoad(74263, (unsigned long )(& prefix->name), (long long )((unsigned long )prefix->name));
              __CrestLoad(74262, (unsigned long )0, (long long )0);
              __CrestApply2(74261, 12, (long long )(prefix->name == 0));
# 5600 "xmlparse.c"
              if (prefix->name == 0) {
                __CrestBranch(74264, 47407, 1);
                __CrestLoad(74266, (unsigned long )0, (long long )((XML_Bool )0));
                __CrestStore(74267, (unsigned long )(& __retres30));
# 5601 "xmlparse.c"
                __retres30 = (XML_Bool )0;
# 5601 "xmlparse.c"
                goto return_label;
              } else {
                __CrestBranch(74265, 47409, 0);

              }
              }
            } else {
              __CrestBranch(74259, 47410, 0);

            }
            }
# 5603 "xmlparse.c"
            parser->m_tempPool.ptr = parser->m_tempPool.start;
          }
          }
# 5605 "xmlparse.c"
          context = s + 1;
          {
# 5605 "xmlparse.c"
          while (1) {
            while_continue___0: ;
            {
            __CrestLoad(74270, (unsigned long )context, (long long )*context);
            __CrestLoad(74269, (unsigned long )0, (long long )12);
            __CrestApply2(74268, 13, (long long )((int const )*context != 12));
# 5605 "xmlparse.c"
            if ((int const )*context != 12) {
              __CrestBranch(74271, 47417, 1);
              {
              __CrestLoad(74275, (unsigned long )context, (long long )*context);
              __CrestLoad(74274, (unsigned long )0, (long long )0);
              __CrestApply2(74273, 13, (long long )((int const )*context != 0));
# 5605 "xmlparse.c"
              if ((int const )*context != 0) {
                __CrestBranch(74276, 47418, 1);

              } else {
                __CrestBranch(74277, 47419, 0);
# 5605 "xmlparse.c"
                goto while_break___0;
              }
              }
            } else {
              __CrestBranch(74272, 47420, 0);
# 5605 "xmlparse.c"
              goto while_break___0;
            }
            }
            {
            __CrestLoad(74280, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
            __CrestLoad(74279, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
            __CrestApply2(74278, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5608 "xmlparse.c"
            if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
              __CrestBranch(74281, 47422, 1);
# 5608 "xmlparse.c"
              tmp___12 = poolGrow(& parser->m_tempPool);
              __CrestHandleReturn(74284, (long long )tmp___12);
              __CrestStore(74283, (unsigned long )(& tmp___12));
              {
              __CrestLoad(74287, (unsigned long )(& tmp___12), (long long )tmp___12);
              __CrestLoad(74286, (unsigned long )0, (long long )0);
              __CrestApply2(74285, 13, (long long )(tmp___12 != 0));
# 5608 "xmlparse.c"
              if (tmp___12 != 0) {
                __CrestBranch(74288, 47424, 1);
# 5608 "xmlparse.c"
                tmp___10 = parser->m_tempPool.ptr;
# 5608 "xmlparse.c"
                (parser->m_tempPool.ptr) ++;
                __CrestLoad(74290, (unsigned long )context, (long long )*context);
                __CrestStore(74291, (unsigned long )tmp___10);
# 5608 "xmlparse.c"
                *tmp___10 = (XML_Char )*context;
                __CrestLoad(74292, (unsigned long )0, (long long )1);
                __CrestStore(74293, (unsigned long )(& tmp___11));
# 5608 "xmlparse.c"
                tmp___11 = 1;
              } else {
                __CrestBranch(74289, 47425, 0);
                __CrestLoad(74294, (unsigned long )0, (long long )0);
                __CrestStore(74295, (unsigned long )(& tmp___11));
# 5608 "xmlparse.c"
                tmp___11 = 0;
              }
              }
            } else {
              __CrestBranch(74282, 47426, 0);
# 5608 "xmlparse.c"
              tmp___10 = parser->m_tempPool.ptr;
# 5608 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(74296, (unsigned long )context, (long long )*context);
              __CrestStore(74297, (unsigned long )tmp___10);
# 5608 "xmlparse.c"
              *tmp___10 = (XML_Char )*context;
              __CrestLoad(74298, (unsigned long )0, (long long )1);
              __CrestStore(74299, (unsigned long )(& tmp___11));
# 5608 "xmlparse.c"
              tmp___11 = 1;
            }
            }
            {
            __CrestLoad(74302, (unsigned long )(& tmp___11), (long long )tmp___11);
            __CrestLoad(74301, (unsigned long )0, (long long )0);
            __CrestApply2(74300, 13, (long long )(tmp___11 != 0));
# 5608 "xmlparse.c"
            if (tmp___11 != 0) {
              __CrestBranch(74303, 47428, 1);

            } else {
              __CrestBranch(74304, 47429, 0);
              __CrestLoad(74305, (unsigned long )0, (long long )((XML_Bool )0));
              __CrestStore(74306, (unsigned long )(& __retres30));
# 5609 "xmlparse.c"
              __retres30 = (XML_Bool )0;
# 5609 "xmlparse.c"
              goto return_label;
            }
            }
# 5605 "xmlparse.c"
            context ++;
          }
          while_break___0: ;
          }
          {
          __CrestLoad(74309, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
          __CrestLoad(74308, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
          __CrestApply2(74307, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5610 "xmlparse.c"
          if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
            __CrestBranch(74310, 47434, 1);
# 5610 "xmlparse.c"
            tmp___16 = poolGrow(& parser->m_tempPool);
            __CrestHandleReturn(74313, (long long )tmp___16);
            __CrestStore(74312, (unsigned long )(& tmp___16));
            {
            __CrestLoad(74316, (unsigned long )(& tmp___16), (long long )tmp___16);
            __CrestLoad(74315, (unsigned long )0, (long long )0);
            __CrestApply2(74314, 13, (long long )(tmp___16 != 0));
# 5610 "xmlparse.c"
            if (tmp___16 != 0) {
              __CrestBranch(74317, 47436, 1);
# 5610 "xmlparse.c"
              tmp___14 = parser->m_tempPool.ptr;
# 5610 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(74319, (unsigned long )0, (long long )((XML_Char )'\000'));
              __CrestStore(74320, (unsigned long )tmp___14);
# 5610 "xmlparse.c"
              *tmp___14 = (XML_Char )'\000';
              __CrestLoad(74321, (unsigned long )0, (long long )1);
              __CrestStore(74322, (unsigned long )(& tmp___15));
# 5610 "xmlparse.c"
              tmp___15 = 1;
            } else {
              __CrestBranch(74318, 47437, 0);
              __CrestLoad(74323, (unsigned long )0, (long long )0);
              __CrestStore(74324, (unsigned long )(& tmp___15));
# 5610 "xmlparse.c"
              tmp___15 = 0;
            }
            }
          } else {
            __CrestBranch(74311, 47438, 0);
# 5610 "xmlparse.c"
            tmp___14 = parser->m_tempPool.ptr;
# 5610 "xmlparse.c"
            (parser->m_tempPool.ptr) ++;
            __CrestLoad(74325, (unsigned long )0, (long long )((XML_Char )'\000'));
            __CrestStore(74326, (unsigned long )tmp___14);
# 5610 "xmlparse.c"
            *tmp___14 = (XML_Char )'\000';
            __CrestLoad(74327, (unsigned long )0, (long long )1);
            __CrestStore(74328, (unsigned long )(& tmp___15));
# 5610 "xmlparse.c"
            tmp___15 = 1;
          }
          }
          {
          __CrestLoad(74331, (unsigned long )(& tmp___15), (long long )tmp___15);
          __CrestLoad(74330, (unsigned long )0, (long long )0);
          __CrestApply2(74329, 13, (long long )(tmp___15 != 0));
# 5610 "xmlparse.c"
          if (tmp___15 != 0) {
            __CrestBranch(74332, 47440, 1);

          } else {
            __CrestBranch(74333, 47441, 0);
            __CrestLoad(74334, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(74335, (unsigned long )(& __retres30));
# 5611 "xmlparse.c"
            __retres30 = (XML_Bool )0;
# 5611 "xmlparse.c"
            goto return_label;
          }
          }
# 5612 "xmlparse.c"
          tmp___17 = addBinding(parser, prefix, (ATTRIBUTE_ID const *)((void *)0),
                                (XML_Char const *)parser->m_tempPool.start, & parser->m_inheritedBindings);
          __CrestHandleReturn(74337, (long long )tmp___17);
          __CrestStore(74336, (unsigned long )(& tmp___17));
          {
          __CrestLoad(74340, (unsigned long )(& tmp___17), (long long )tmp___17);
          __CrestLoad(74339, (unsigned long )0, (long long )0U);
          __CrestApply2(74338, 13, (long long )((unsigned int )tmp___17 != 0U));
# 5612 "xmlparse.c"
          if ((unsigned int )tmp___17 != 0U) {
            __CrestBranch(74341, 47445, 1);
            __CrestLoad(74343, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(74344, (unsigned long )(& __retres30));
# 5614 "xmlparse.c"
            __retres30 = (XML_Bool )0;
# 5614 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(74342, 47447, 0);

          }
          }
# 5615 "xmlparse.c"
          parser->m_tempPool.ptr = parser->m_tempPool.start;
          {
          __CrestLoad(74347, (unsigned long )context, (long long )*context);
          __CrestLoad(74346, (unsigned long )0, (long long )0);
          __CrestApply2(74345, 13, (long long )((int const )*context != 0));
# 5616 "xmlparse.c"
          if ((int const )*context != 0) {
            __CrestBranch(74348, 47450, 1);
# 5617 "xmlparse.c"
            context ++;
          } else {
            __CrestBranch(74349, 47451, 0);

          }
          }
# 5618 "xmlparse.c"
          s = context;
        } else {
          __CrestBranch(74209, 47453, 0);
          {
          __CrestLoad(74352, (unsigned long )(& parser->m_tempPool.ptr), (long long )((unsigned long )parser->m_tempPool.ptr));
          __CrestLoad(74351, (unsigned long )(& parser->m_tempPool.end), (long long )((unsigned long )parser->m_tempPool.end));
          __CrestApply2(74350, 12, (long long )((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end));
# 5621 "xmlparse.c"
          if ((unsigned long )parser->m_tempPool.ptr == (unsigned long )parser->m_tempPool.end) {
            __CrestBranch(74353, 47454, 1);
# 5621 "xmlparse.c"
            tmp___21 = poolGrow(& parser->m_tempPool);
            __CrestHandleReturn(74356, (long long )tmp___21);
            __CrestStore(74355, (unsigned long )(& tmp___21));
            {
            __CrestLoad(74359, (unsigned long )(& tmp___21), (long long )tmp___21);
            __CrestLoad(74358, (unsigned long )0, (long long )0);
            __CrestApply2(74357, 13, (long long )(tmp___21 != 0));
# 5621 "xmlparse.c"
            if (tmp___21 != 0) {
              __CrestBranch(74360, 47456, 1);
# 5621 "xmlparse.c"
              tmp___19 = parser->m_tempPool.ptr;
# 5621 "xmlparse.c"
              (parser->m_tempPool.ptr) ++;
              __CrestLoad(74362, (unsigned long )s, (long long )*s);
              __CrestStore(74363, (unsigned long )tmp___19);
# 5621 "xmlparse.c"
              *tmp___19 = (XML_Char )*s;
              __CrestLoad(74364, (unsigned long )0, (long long )1);
              __CrestStore(74365, (unsigned long )(& tmp___20));
# 5621 "xmlparse.c"
              tmp___20 = 1;
            } else {
              __CrestBranch(74361, 47457, 0);
              __CrestLoad(74366, (unsigned long )0, (long long )0);
              __CrestStore(74367, (unsigned long )(& tmp___20));
# 5621 "xmlparse.c"
              tmp___20 = 0;
            }
            }
          } else {
            __CrestBranch(74354, 47458, 0);
# 5621 "xmlparse.c"
            tmp___19 = parser->m_tempPool.ptr;
# 5621 "xmlparse.c"
            (parser->m_tempPool.ptr) ++;
            __CrestLoad(74368, (unsigned long )s, (long long )*s);
            __CrestStore(74369, (unsigned long )tmp___19);
# 5621 "xmlparse.c"
            *tmp___19 = (XML_Char )*s;
            __CrestLoad(74370, (unsigned long )0, (long long )1);
            __CrestStore(74371, (unsigned long )(& tmp___20));
# 5621 "xmlparse.c"
            tmp___20 = 1;
          }
          }
          {
          __CrestLoad(74374, (unsigned long )(& tmp___20), (long long )tmp___20);
          __CrestLoad(74373, (unsigned long )0, (long long )0);
          __CrestApply2(74372, 13, (long long )(tmp___20 != 0));
# 5621 "xmlparse.c"
          if (tmp___20 != 0) {
            __CrestBranch(74375, 47460, 1);

          } else {
            __CrestBranch(74376, 47461, 0);
            __CrestLoad(74377, (unsigned long )0, (long long )((XML_Bool )0));
            __CrestStore(74378, (unsigned long )(& __retres30));
# 5622 "xmlparse.c"
            __retres30 = (XML_Bool )0;
# 5622 "xmlparse.c"
            goto return_label;
          }
          }
# 5623 "xmlparse.c"
          s ++;
        }
        }
      }
      }
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(74379, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(74380, (unsigned long )(& __retres30));
# 5626 "xmlparse.c"
  __retres30 = (XML_Bool )1;
  return_label:
  {
  __CrestLoad(74381, (unsigned long )(& __retres30), (long long )__retres30);
  __CrestReturn(74382);
# 5568 "xmlparse.c"
  return (__retres30);
  }
}
}
# 5629 "xmlparse.c"
static void normalizePublicId(XML_Char *publicId )
{
  XML_Char *p ;
  XML_Char *s ;
  XML_Char *tmp ;
  XML_Char *tmp___0 ;
  XML_Char *mem_6 ;
  XML_Char *mem_7 ;

  {
  __CrestCall(74383, 798);
# 5632 "xmlparse.c"
  p = publicId;
# 5634 "xmlparse.c"
  s = publicId;
  {
# 5634 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(74386, (unsigned long )s, (long long )*s);
    __CrestLoad(74385, (unsigned long )0, (long long )0);
    __CrestApply2(74384, 13, (long long )(*s != 0));
# 5634 "xmlparse.c"
    if (*s != 0) {
      __CrestBranch(74387, 47472, 1);

    } else {
      __CrestBranch(74388, 47473, 0);
# 5634 "xmlparse.c"
      goto while_break;
    }
    }
    {
    {
    __CrestLoad(74391, (unsigned long )s, (long long )*s);
    __CrestLoad(74390, (unsigned long )0, (long long )10);
    __CrestApply2(74389, 12, (long long )((int )*s == 10));
# 5638 "xmlparse.c"
    if ((int )*s == 10) {
      __CrestBranch(74392, 47476, 1);
# 5638 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(74393, 47477, 0);

    }
    }
    {
    __CrestLoad(74396, (unsigned long )s, (long long )*s);
    __CrestLoad(74395, (unsigned long )0, (long long )13);
    __CrestApply2(74394, 12, (long long )((int )*s == 13));
# 5638 "xmlparse.c"
    if ((int )*s == 13) {
      __CrestBranch(74397, 47479, 1);
# 5638 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(74398, 47480, 0);

    }
    }
    {
    __CrestLoad(74401, (unsigned long )s, (long long )*s);
    __CrestLoad(74400, (unsigned long )0, (long long )32);
    __CrestApply2(74399, 12, (long long )((int )*s == 32));
# 5638 "xmlparse.c"
    if ((int )*s == 32) {
      __CrestBranch(74402, 47482, 1);
# 5638 "xmlparse.c"
      goto case_10;
    } else {
      __CrestBranch(74403, 47483, 0);

    }
    }
# 5642 "xmlparse.c"
    goto switch_default;
    case_10:
    case_13:
    case_32:
    {
    __CrestLoad(74406, (unsigned long )(& p), (long long )((unsigned long )p));
    __CrestLoad(74405, (unsigned long )(& publicId), (long long )((unsigned long )publicId));
    __CrestApply2(74404, 13, (long long )((unsigned long )p != (unsigned long )publicId));
# 5639 "xmlparse.c"
    if ((unsigned long )p != (unsigned long )publicId) {
      __CrestBranch(74407, 47486, 1);
      {
# 5639 "xmlparse.c"
      mem_6 = p + -1;
      {
      __CrestLoad(74411, (unsigned long )mem_6, (long long )*mem_6);
      __CrestLoad(74410, (unsigned long )0, (long long )32);
      __CrestApply2(74409, 13, (long long )((int )*mem_6 != 32));
# 5639 "xmlparse.c"
      if ((int )*mem_6 != 32) {
        __CrestBranch(74412, 47489, 1);
# 5640 "xmlparse.c"
        tmp = p;
# 5640 "xmlparse.c"
        p ++;
        __CrestLoad(74414, (unsigned long )0, (long long )((XML_Char )32));
        __CrestStore(74415, (unsigned long )tmp);
# 5640 "xmlparse.c"
        *tmp = (XML_Char )32;
      } else {
        __CrestBranch(74413, 47490, 0);

      }
      }
      }
    } else {
      __CrestBranch(74408, 47491, 0);

    }
    }
# 5641 "xmlparse.c"
    goto switch_break;
    switch_default:
# 5643 "xmlparse.c"
    tmp___0 = p;
# 5643 "xmlparse.c"
    p ++;
    __CrestLoad(74416, (unsigned long )s, (long long )*s);
    __CrestStore(74417, (unsigned long )tmp___0);
# 5643 "xmlparse.c"
    *tmp___0 = *s;
    switch_break: ;
    }
# 5634 "xmlparse.c"
    s ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(74420, (unsigned long )(& p), (long long )((unsigned long )p));
  __CrestLoad(74419, (unsigned long )(& publicId), (long long )((unsigned long )publicId));
  __CrestApply2(74418, 13, (long long )((unsigned long )p != (unsigned long )publicId));
# 5646 "xmlparse.c"
  if ((unsigned long )p != (unsigned long )publicId) {
    __CrestBranch(74421, 47498, 1);
    {
# 5646 "xmlparse.c"
    mem_7 = p + -1;
    {
    __CrestLoad(74425, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(74424, (unsigned long )0, (long long )32);
    __CrestApply2(74423, 12, (long long )((int )*mem_7 == 32));
# 5646 "xmlparse.c"
    if ((int )*mem_7 == 32) {
      __CrestBranch(74426, 47501, 1);
# 5647 "xmlparse.c"
      p --;
    } else {
      __CrestBranch(74427, 47502, 0);

    }
    }
    }
  } else {
    __CrestBranch(74422, 47503, 0);

  }
  }
  __CrestLoad(74428, (unsigned long )0, (long long )((XML_Char )'\000'));
  __CrestStore(74429, (unsigned long )p);
# 5648 "xmlparse.c"
  *p = (XML_Char )'\000';

  {
  __CrestReturn(74430);
# 5629 "xmlparse.c"
  return;
  }
}
}
# 5651 "xmlparse.c"
static DTD *dtdCreate(XML_Memory_Handling_Suite const *ms )
{
  DTD *p ;
  void *tmp ;
  void *(*mem_4)(size_t size ) ;
  DTD *__retres5 ;

  {
  __CrestCall(74431, 799);
# 5654 "xmlparse.c"
  mem_4 = ms->malloc_fcn;
  __CrestLoad(74432, (unsigned long )0, (long long )sizeof(DTD ));
# 5654 "xmlparse.c"
  tmp = (*mem_4)(sizeof(DTD ));
  __CrestClearStack(74433);
# 5654 "xmlparse.c"
  p = (DTD *)tmp;
  {
  __CrestLoad(74436, (unsigned long )(& p), (long long )((unsigned long )p));
  __CrestLoad(74435, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(74434, 12, (long long )((unsigned long )p == (unsigned long )((void *)0)));
# 5655 "xmlparse.c"
  if ((unsigned long )p == (unsigned long )((void *)0)) {
    __CrestBranch(74437, 47509, 1);
# 5656 "xmlparse.c"
    __retres5 = p;
# 5656 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(74438, 47511, 0);

  }
  }
# 5657 "xmlparse.c"
  poolInit(& p->pool, ms);
  __CrestClearStack(74439);
# 5658 "xmlparse.c"
  poolInit(& p->entityValuePool, ms);
  __CrestClearStack(74440);
# 5659 "xmlparse.c"
  hashTableInit(& p->generalEntities, ms);
  __CrestClearStack(74441);
# 5660 "xmlparse.c"
  hashTableInit(& p->elementTypes, ms);
  __CrestClearStack(74442);
# 5661 "xmlparse.c"
  hashTableInit(& p->attributeIds, ms);
  __CrestClearStack(74443);
# 5662 "xmlparse.c"
  hashTableInit(& p->prefixes, ms);
  __CrestClearStack(74444);
  __CrestLoad(74445, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74446, (unsigned long )(& p->paramEntityRead));
# 5664 "xmlparse.c"
  p->paramEntityRead = (XML_Bool )0;
# 5665 "xmlparse.c"
  hashTableInit(& p->paramEntities, ms);
  __CrestClearStack(74447);
# 5667 "xmlparse.c"
  p->defaultPrefix.name = (XML_Char const *)((void *)0);
# 5668 "xmlparse.c"
  p->defaultPrefix.binding = (BINDING *)((void *)0);
  __CrestLoad(74448, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74449, (unsigned long )(& p->in_eldecl));
# 5670 "xmlparse.c"
  p->in_eldecl = (XML_Bool )0;
# 5671 "xmlparse.c"
  p->scaffIndex = (int *)((void *)0);
# 5672 "xmlparse.c"
  p->scaffold = (CONTENT_SCAFFOLD *)((void *)0);
  __CrestLoad(74450, (unsigned long )0, (long long )0);
  __CrestStore(74451, (unsigned long )(& p->scaffLevel));
# 5673 "xmlparse.c"
  p->scaffLevel = 0;
  __CrestLoad(74452, (unsigned long )0, (long long )0U);
  __CrestStore(74453, (unsigned long )(& p->scaffSize));
# 5674 "xmlparse.c"
  p->scaffSize = 0U;
  __CrestLoad(74454, (unsigned long )0, (long long )0U);
  __CrestStore(74455, (unsigned long )(& p->scaffCount));
# 5675 "xmlparse.c"
  p->scaffCount = 0U;
  __CrestLoad(74456, (unsigned long )0, (long long )0U);
  __CrestStore(74457, (unsigned long )(& p->contentStringLen));
# 5676 "xmlparse.c"
  p->contentStringLen = 0U;
  __CrestLoad(74458, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(74459, (unsigned long )(& p->keepProcessing));
# 5678 "xmlparse.c"
  p->keepProcessing = (XML_Bool )1;
  __CrestLoad(74460, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74461, (unsigned long )(& p->hasParamEntityRefs));
# 5679 "xmlparse.c"
  p->hasParamEntityRefs = (XML_Bool )0;
  __CrestLoad(74462, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74463, (unsigned long )(& p->standalone));
# 5680 "xmlparse.c"
  p->standalone = (XML_Bool )0;
# 5681 "xmlparse.c"
  __retres5 = p;
  return_label:
  {
  __CrestReturn(74464);
# 5651 "xmlparse.c"
  return (__retres5);
  }
}
}
# 5684 "xmlparse.c"
static void dtdReset(DTD *p , XML_Memory_Handling_Suite const *ms )
{
  HASH_TABLE_ITER iter ;
  ELEMENT_TYPE *e ;
  NAMED *tmp ;
  void (*mem_6)(void *ptr ) ;
  void (*mem_7)(void *ptr ) ;
  void (*mem_8)(void *ptr ) ;

  {
  __CrestCall(74465, 800);
# 5688 "xmlparse.c"
  hashTableIterInit(& iter, (HASH_TABLE const *)(& p->elementTypes));
  __CrestClearStack(74466);
  {
# 5689 "xmlparse.c"
  while (1) {
    while_continue: ;
# 5690 "xmlparse.c"
    tmp = hashTableIterNext(& iter);
    __CrestClearStack(74467);
# 5690 "xmlparse.c"
    e = (ELEMENT_TYPE *)tmp;
    {
    __CrestLoad(74470, (unsigned long )(& e), (long long )((unsigned long )e));
    __CrestLoad(74469, (unsigned long )0, (long long )0);
    __CrestApply2(74468, 12, (long long )(e == 0));
# 5691 "xmlparse.c"
    if (e == 0) {
      __CrestBranch(74471, 47521, 1);
# 5692 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(74472, 47522, 0);

    }
    }
    {
    __CrestLoad(74475, (unsigned long )(& e->allocDefaultAtts), (long long )e->allocDefaultAtts);
    __CrestLoad(74474, (unsigned long )0, (long long )0);
    __CrestApply2(74473, 13, (long long )(e->allocDefaultAtts != 0));
# 5693 "xmlparse.c"
    if (e->allocDefaultAtts != 0) {
      __CrestBranch(74476, 47524, 1);
# 5694 "xmlparse.c"
      mem_6 = ms->free_fcn;
# 5694 "xmlparse.c"
      (*mem_6)((void *)e->defaultAtts);
      __CrestClearStack(74478);
    } else {
      __CrestBranch(74477, 47525, 0);

    }
    }
  }
  while_break: ;
  }
# 5696 "xmlparse.c"
  hashTableClear(& p->generalEntities);
  __CrestClearStack(74479);
  __CrestLoad(74480, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74481, (unsigned long )(& p->paramEntityRead));
# 5698 "xmlparse.c"
  p->paramEntityRead = (XML_Bool )0;
# 5699 "xmlparse.c"
  hashTableClear(& p->paramEntities);
  __CrestClearStack(74482);
# 5701 "xmlparse.c"
  hashTableClear(& p->elementTypes);
  __CrestClearStack(74483);
# 5702 "xmlparse.c"
  hashTableClear(& p->attributeIds);
  __CrestClearStack(74484);
# 5703 "xmlparse.c"
  hashTableClear(& p->prefixes);
  __CrestClearStack(74485);
# 5704 "xmlparse.c"
  poolClear(& p->pool);
  __CrestClearStack(74486);
# 5705 "xmlparse.c"
  poolClear(& p->entityValuePool);
  __CrestClearStack(74487);
# 5706 "xmlparse.c"
  p->defaultPrefix.name = (XML_Char const *)((void *)0);
# 5707 "xmlparse.c"
  p->defaultPrefix.binding = (BINDING *)((void *)0);
  __CrestLoad(74488, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74489, (unsigned long )(& p->in_eldecl));
# 5709 "xmlparse.c"
  p->in_eldecl = (XML_Bool )0;
# 5711 "xmlparse.c"
  mem_7 = ms->free_fcn;
# 5711 "xmlparse.c"
  (*mem_7)((void *)p->scaffIndex);
  __CrestClearStack(74490);
# 5712 "xmlparse.c"
  p->scaffIndex = (int *)((void *)0);
# 5713 "xmlparse.c"
  mem_8 = ms->free_fcn;
# 5713 "xmlparse.c"
  (*mem_8)((void *)p->scaffold);
  __CrestClearStack(74491);
# 5714 "xmlparse.c"
  p->scaffold = (CONTENT_SCAFFOLD *)((void *)0);
  __CrestLoad(74492, (unsigned long )0, (long long )0);
  __CrestStore(74493, (unsigned long )(& p->scaffLevel));
# 5716 "xmlparse.c"
  p->scaffLevel = 0;
  __CrestLoad(74494, (unsigned long )0, (long long )0U);
  __CrestStore(74495, (unsigned long )(& p->scaffSize));
# 5717 "xmlparse.c"
  p->scaffSize = 0U;
  __CrestLoad(74496, (unsigned long )0, (long long )0U);
  __CrestStore(74497, (unsigned long )(& p->scaffCount));
# 5718 "xmlparse.c"
  p->scaffCount = 0U;
  __CrestLoad(74498, (unsigned long )0, (long long )0U);
  __CrestStore(74499, (unsigned long )(& p->contentStringLen));
# 5719 "xmlparse.c"
  p->contentStringLen = 0U;
  __CrestLoad(74500, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(74501, (unsigned long )(& p->keepProcessing));
# 5721 "xmlparse.c"
  p->keepProcessing = (XML_Bool )1;
  __CrestLoad(74502, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74503, (unsigned long )(& p->hasParamEntityRefs));
# 5722 "xmlparse.c"
  p->hasParamEntityRefs = (XML_Bool )0;
  __CrestLoad(74504, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74505, (unsigned long )(& p->standalone));
# 5723 "xmlparse.c"
  p->standalone = (XML_Bool )0;

  {
  __CrestReturn(74506);
# 5684 "xmlparse.c"
  return;
  }
}
}
# 5726 "xmlparse.c"
static void dtdDestroy(DTD *p , XML_Bool isDocEntity , XML_Memory_Handling_Suite const *ms )
{
  HASH_TABLE_ITER iter ;
  ELEMENT_TYPE *e ;
  NAMED *tmp ;
  void (*mem_7)(void *ptr ) ;
  void (*mem_8)(void *ptr ) ;
  void (*mem_9)(void *ptr ) ;
  void (*mem_10)(void *ptr ) ;

  {
  __CrestCall(74508, 801);
  __CrestStore(74507, (unsigned long )(& isDocEntity));
# 5730 "xmlparse.c"
  hashTableIterInit(& iter, (HASH_TABLE const *)(& p->elementTypes));
  __CrestClearStack(74509);
  {
# 5731 "xmlparse.c"
  while (1) {
    while_continue: ;
# 5732 "xmlparse.c"
    tmp = hashTableIterNext(& iter);
    __CrestClearStack(74510);
# 5732 "xmlparse.c"
    e = (ELEMENT_TYPE *)tmp;
    {
    __CrestLoad(74513, (unsigned long )(& e), (long long )((unsigned long )e));
    __CrestLoad(74512, (unsigned long )0, (long long )0);
    __CrestApply2(74511, 12, (long long )(e == 0));
# 5733 "xmlparse.c"
    if (e == 0) {
      __CrestBranch(74514, 47536, 1);
# 5734 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(74515, 47537, 0);

    }
    }
    {
    __CrestLoad(74518, (unsigned long )(& e->allocDefaultAtts), (long long )e->allocDefaultAtts);
    __CrestLoad(74517, (unsigned long )0, (long long )0);
    __CrestApply2(74516, 13, (long long )(e->allocDefaultAtts != 0));
# 5735 "xmlparse.c"
    if (e->allocDefaultAtts != 0) {
      __CrestBranch(74519, 47539, 1);
# 5736 "xmlparse.c"
      mem_7 = ms->free_fcn;
# 5736 "xmlparse.c"
      (*mem_7)((void *)e->defaultAtts);
      __CrestClearStack(74521);
    } else {
      __CrestBranch(74520, 47540, 0);

    }
    }
  }
  while_break: ;
  }
# 5738 "xmlparse.c"
  hashTableDestroy(& p->generalEntities);
  __CrestClearStack(74522);
# 5740 "xmlparse.c"
  hashTableDestroy(& p->paramEntities);
  __CrestClearStack(74523);
# 5742 "xmlparse.c"
  hashTableDestroy(& p->elementTypes);
  __CrestClearStack(74524);
# 5743 "xmlparse.c"
  hashTableDestroy(& p->attributeIds);
  __CrestClearStack(74525);
# 5744 "xmlparse.c"
  hashTableDestroy(& p->prefixes);
  __CrestClearStack(74526);
# 5745 "xmlparse.c"
  poolDestroy(& p->pool);
  __CrestClearStack(74527);
# 5746 "xmlparse.c"
  poolDestroy(& p->entityValuePool);
  __CrestClearStack(74528);
  {
  __CrestLoad(74531, (unsigned long )(& isDocEntity), (long long )isDocEntity);
  __CrestLoad(74530, (unsigned long )0, (long long )0);
  __CrestApply2(74529, 13, (long long )(isDocEntity != 0));
# 5747 "xmlparse.c"
  if (isDocEntity != 0) {
    __CrestBranch(74532, 47544, 1);
# 5748 "xmlparse.c"
    mem_8 = ms->free_fcn;
# 5748 "xmlparse.c"
    (*mem_8)((void *)p->scaffIndex);
    __CrestClearStack(74534);
# 5749 "xmlparse.c"
    mem_9 = ms->free_fcn;
# 5749 "xmlparse.c"
    (*mem_9)((void *)p->scaffold);
    __CrestClearStack(74535);
  } else {
    __CrestBranch(74533, 47545, 0);

  }
  }
# 5751 "xmlparse.c"
  mem_10 = ms->free_fcn;
# 5751 "xmlparse.c"
  (*mem_10)((void *)p);
  __CrestClearStack(74536);

  {
  __CrestReturn(74537);
# 5726 "xmlparse.c"
  return;
  }
}
}
# 5757 "xmlparse.c"
static int dtdCopy(XML_Parser oldParser , DTD *newDtd , DTD const *oldDtd , XML_Memory_Handling_Suite const *ms )
{
  HASH_TABLE_ITER iter ;
  XML_Char const *name ;
  PREFIX const *oldP ;
  NAMED *tmp ;
  NAMED *tmp___0 ;
  ATTRIBUTE_ID *newA ;
  XML_Char const *name___0 ;
  ATTRIBUTE_ID const *oldA ;
  NAMED *tmp___1 ;
  XML_Char *tmp___3 ;
  int tmp___4 ;
  XML_Bool tmp___5 ;
  NAMED *tmp___6 ;
  NAMED *tmp___7 ;
  int i ;
  ELEMENT_TYPE *newE ;
  XML_Char const *name___1 ;
  ELEMENT_TYPE const *oldE ;
  NAMED *tmp___8 ;
  NAMED *tmp___9 ;
  void *tmp___10 ;
  NAMED *tmp___11 ;
  int tmp___12 ;
  NAMED *tmp___13 ;
  NAMED *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  PREFIX *mem_33 ;
  void *(*mem_34)(size_t size ) ;
  void (*mem_35)(void *ptr ) ;
  ATTRIBUTE_ID const *mem_36 ;
  PREFIX *mem_37 ;
  DEFAULT_ATTRIBUTE *mem_38 ;
  ATTRIBUTE_ID const *mem_39 ;
  DEFAULT_ATTRIBUTE *mem_40 ;
  DEFAULT_ATTRIBUTE *mem_41 ;
  DEFAULT_ATTRIBUTE *mem_42 ;
  DEFAULT_ATTRIBUTE *mem_43 ;
  DEFAULT_ATTRIBUTE *mem_44 ;
  DEFAULT_ATTRIBUTE *mem_45 ;
  DEFAULT_ATTRIBUTE *mem_46 ;
  DEFAULT_ATTRIBUTE *mem_47 ;
  int __retres48 ;

  {
  __CrestCall(74538, 802);
# 5764 "xmlparse.c"
  hashTableIterInit(& iter, & oldDtd->prefixes);
  __CrestClearStack(74539);
  {
# 5765 "xmlparse.c"
  while (1) {
    while_continue: ;
# 5767 "xmlparse.c"
    tmp = hashTableIterNext(& iter);
    __CrestClearStack(74540);
# 5767 "xmlparse.c"
    oldP = (PREFIX const *)((PREFIX *)tmp);
    {
    __CrestLoad(74543, (unsigned long )(& oldP), (long long )((unsigned long )oldP));
    __CrestLoad(74542, (unsigned long )0, (long long )0);
    __CrestApply2(74541, 12, (long long )(oldP == 0));
# 5768 "xmlparse.c"
    if (oldP == 0) {
      __CrestBranch(74544, 47555, 1);
# 5769 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(74545, 47556, 0);

    }
    }
# 5770 "xmlparse.c"
    name = poolCopyString(& newDtd->pool, (XML_Char const *)oldP->name);
    __CrestClearStack(74546);
    {
    __CrestLoad(74549, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(74548, (unsigned long )0, (long long )0);
    __CrestApply2(74547, 12, (long long )(name == 0));
# 5771 "xmlparse.c"
    if (name == 0) {
      __CrestBranch(74550, 47559, 1);
      __CrestLoad(74552, (unsigned long )0, (long long )0);
      __CrestStore(74553, (unsigned long )(& __retres48));
# 5772 "xmlparse.c"
      __retres48 = 0;
# 5772 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74551, 47561, 0);

    }
    }
    __CrestLoad(74554, (unsigned long )0, (long long )sizeof(PREFIX ));
# 5773 "xmlparse.c"
    tmp___0 = lookup(oldParser, & newDtd->prefixes, name, sizeof(PREFIX ));
    __CrestClearStack(74555);
    {
    __CrestLoad(74558, (unsigned long )(& tmp___0), (long long )((unsigned long )tmp___0));
    __CrestLoad(74557, (unsigned long )0, (long long )0);
    __CrestApply2(74556, 13, (long long )(tmp___0 != 0));
# 5773 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(74559, 47564, 1);

    } else {
      __CrestBranch(74560, 47565, 0);
      __CrestLoad(74561, (unsigned long )0, (long long )0);
      __CrestStore(74562, (unsigned long )(& __retres48));
# 5774 "xmlparse.c"
      __retres48 = 0;
# 5774 "xmlparse.c"
      goto return_label;
    }
    }
  }
  while_break: ;
  }
# 5777 "xmlparse.c"
  hashTableIterInit(& iter, & oldDtd->attributeIds);
  __CrestClearStack(74563);
  {
# 5781 "xmlparse.c"
  while (1) {
    while_continue___0: ;
# 5784 "xmlparse.c"
    tmp___1 = hashTableIterNext(& iter);
    __CrestClearStack(74564);
# 5784 "xmlparse.c"
    oldA = (ATTRIBUTE_ID const *)((ATTRIBUTE_ID *)tmp___1);
    {
    __CrestLoad(74567, (unsigned long )(& oldA), (long long )((unsigned long )oldA));
    __CrestLoad(74566, (unsigned long )0, (long long )0);
    __CrestApply2(74565, 12, (long long )(oldA == 0));
# 5786 "xmlparse.c"
    if (oldA == 0) {
      __CrestBranch(74568, 47574, 1);
# 5787 "xmlparse.c"
      goto while_break___0;
    } else {
      __CrestBranch(74569, 47575, 0);

    }
    }
    {
    __CrestLoad(74572, (unsigned long )(& newDtd->pool.ptr), (long long )((unsigned long )newDtd->pool.ptr));
    __CrestLoad(74571, (unsigned long )(& newDtd->pool.end), (long long )((unsigned long )newDtd->pool.end));
    __CrestApply2(74570, 12, (long long )((unsigned long )newDtd->pool.ptr == (unsigned long )newDtd->pool.end));
# 5789 "xmlparse.c"
    if ((unsigned long )newDtd->pool.ptr == (unsigned long )newDtd->pool.end) {
      __CrestBranch(74573, 47577, 1);
# 5789 "xmlparse.c"
      tmp___5 = poolGrow(& newDtd->pool);
      __CrestHandleReturn(74576, (long long )tmp___5);
      __CrestStore(74575, (unsigned long )(& tmp___5));
      {
      __CrestLoad(74579, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(74578, (unsigned long )0, (long long )0);
      __CrestApply2(74577, 13, (long long )(tmp___5 != 0));
# 5789 "xmlparse.c"
      if (tmp___5 != 0) {
        __CrestBranch(74580, 47579, 1);
# 5789 "xmlparse.c"
        tmp___3 = newDtd->pool.ptr;
# 5789 "xmlparse.c"
        (newDtd->pool.ptr) ++;
        __CrestLoad(74582, (unsigned long )0, (long long )((XML_Char )'\000'));
        __CrestStore(74583, (unsigned long )tmp___3);
# 5789 "xmlparse.c"
        *tmp___3 = (XML_Char )'\000';
        __CrestLoad(74584, (unsigned long )0, (long long )1);
        __CrestStore(74585, (unsigned long )(& tmp___4));
# 5789 "xmlparse.c"
        tmp___4 = 1;
      } else {
        __CrestBranch(74581, 47580, 0);
        __CrestLoad(74586, (unsigned long )0, (long long )0);
        __CrestStore(74587, (unsigned long )(& tmp___4));
# 5789 "xmlparse.c"
        tmp___4 = 0;
      }
      }
    } else {
      __CrestBranch(74574, 47581, 0);
# 5789 "xmlparse.c"
      tmp___3 = newDtd->pool.ptr;
# 5789 "xmlparse.c"
      (newDtd->pool.ptr) ++;
      __CrestLoad(74588, (unsigned long )0, (long long )((XML_Char )'\000'));
      __CrestStore(74589, (unsigned long )tmp___3);
# 5789 "xmlparse.c"
      *tmp___3 = (XML_Char )'\000';
      __CrestLoad(74590, (unsigned long )0, (long long )1);
      __CrestStore(74591, (unsigned long )(& tmp___4));
# 5789 "xmlparse.c"
      tmp___4 = 1;
    }
    }
    {
    __CrestLoad(74594, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(74593, (unsigned long )0, (long long )0);
    __CrestApply2(74592, 13, (long long )(tmp___4 != 0));
# 5789 "xmlparse.c"
    if (tmp___4 != 0) {
      __CrestBranch(74595, 47583, 1);

    } else {
      __CrestBranch(74596, 47584, 0);
      __CrestLoad(74597, (unsigned long )0, (long long )0);
      __CrestStore(74598, (unsigned long )(& __retres48));
# 5790 "xmlparse.c"
      __retres48 = 0;
# 5790 "xmlparse.c"
      goto return_label;
    }
    }
# 5791 "xmlparse.c"
    name___0 = poolCopyString(& newDtd->pool, (XML_Char const *)oldA->name);
    __CrestClearStack(74599);
    {
    __CrestLoad(74602, (unsigned long )(& name___0), (long long )((unsigned long )name___0));
    __CrestLoad(74601, (unsigned long )0, (long long )0);
    __CrestApply2(74600, 12, (long long )(name___0 == 0));
# 5792 "xmlparse.c"
    if (name___0 == 0) {
      __CrestBranch(74603, 47588, 1);
      __CrestLoad(74605, (unsigned long )0, (long long )0);
      __CrestStore(74606, (unsigned long )(& __retres48));
# 5793 "xmlparse.c"
      __retres48 = 0;
# 5793 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74604, 47590, 0);

    }
    }
# 5794 "xmlparse.c"
    name___0 ++;
    __CrestLoad(74607, (unsigned long )0, (long long )sizeof(ATTRIBUTE_ID ));
# 5795 "xmlparse.c"
    tmp___6 = lookup(oldParser, & newDtd->attributeIds, name___0, sizeof(ATTRIBUTE_ID ));
    __CrestClearStack(74608);
# 5795 "xmlparse.c"
    newA = (ATTRIBUTE_ID *)tmp___6;
    {
    __CrestLoad(74611, (unsigned long )(& newA), (long long )((unsigned long )newA));
    __CrestLoad(74610, (unsigned long )0, (long long )0);
    __CrestApply2(74609, 12, (long long )(newA == 0));
# 5797 "xmlparse.c"
    if (newA == 0) {
      __CrestBranch(74612, 47593, 1);
      __CrestLoad(74614, (unsigned long )0, (long long )0);
      __CrestStore(74615, (unsigned long )(& __retres48));
# 5798 "xmlparse.c"
      __retres48 = 0;
# 5798 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74613, 47595, 0);

    }
    }
    __CrestLoad(74616, (unsigned long )(& oldA->maybeTokenized), (long long )oldA->maybeTokenized);
    __CrestStore(74617, (unsigned long )(& newA->maybeTokenized));
# 5799 "xmlparse.c"
    newA->maybeTokenized = (XML_Bool )oldA->maybeTokenized;
    {
    __CrestLoad(74620, (unsigned long )(& oldA->prefix), (long long )((unsigned long )oldA->prefix));
    __CrestLoad(74619, (unsigned long )0, (long long )0);
    __CrestApply2(74618, 13, (long long )(oldA->prefix != 0));
# 5800 "xmlparse.c"
    if (oldA->prefix != 0) {
      __CrestBranch(74621, 47598, 1);
      __CrestLoad(74623, (unsigned long )(& oldA->xmlns), (long long )oldA->xmlns);
      __CrestStore(74624, (unsigned long )(& newA->xmlns));
# 5801 "xmlparse.c"
      newA->xmlns = (XML_Bool )oldA->xmlns;
      {
      __CrestLoad(74627, (unsigned long )(& oldA->prefix), (long long )((unsigned long )oldA->prefix));
      __CrestLoad(74626, (unsigned long )0, (long long )((unsigned long )(& oldDtd->defaultPrefix)));
      __CrestApply2(74625, 12, (long long )((unsigned long )oldA->prefix == (unsigned long )(& oldDtd->defaultPrefix)));
# 5802 "xmlparse.c"
      if ((unsigned long )oldA->prefix == (unsigned long )(& oldDtd->defaultPrefix)) {
        __CrestBranch(74628, 47600, 1);
# 5803 "xmlparse.c"
        newA->prefix = & newDtd->defaultPrefix;
      } else {
        __CrestBranch(74629, 47601, 0);
# 5805 "xmlparse.c"
        mem_33 = oldA->prefix;
        __CrestLoad(74630, (unsigned long )0, (long long )((size_t )0));
# 5805 "xmlparse.c"
        tmp___7 = lookup(oldParser, & newDtd->prefixes, mem_33->name, (size_t )0);
        __CrestClearStack(74631);
# 5805 "xmlparse.c"
        newA->prefix = (PREFIX *)tmp___7;
      }
      }
    } else {
      __CrestBranch(74622, 47602, 0);

    }
    }
  }
  while_break___0: ;
  }
# 5812 "xmlparse.c"
  hashTableIterInit(& iter, & oldDtd->elementTypes);
  __CrestClearStack(74632);
  {
# 5814 "xmlparse.c"
  while (1) {
    while_continue___1: ;
# 5818 "xmlparse.c"
    tmp___8 = hashTableIterNext(& iter);
    __CrestClearStack(74633);
# 5818 "xmlparse.c"
    oldE = (ELEMENT_TYPE const *)((ELEMENT_TYPE *)tmp___8);
    {
    __CrestLoad(74636, (unsigned long )(& oldE), (long long )((unsigned long )oldE));
    __CrestLoad(74635, (unsigned long )0, (long long )0);
    __CrestApply2(74634, 12, (long long )(oldE == 0));
# 5819 "xmlparse.c"
    if (oldE == 0) {
      __CrestBranch(74637, 47610, 1);
# 5820 "xmlparse.c"
      goto while_break___1;
    } else {
      __CrestBranch(74638, 47611, 0);

    }
    }
# 5821 "xmlparse.c"
    name___1 = poolCopyString(& newDtd->pool, (XML_Char const *)oldE->name);
    __CrestClearStack(74639);
    {
    __CrestLoad(74642, (unsigned long )(& name___1), (long long )((unsigned long )name___1));
    __CrestLoad(74641, (unsigned long )0, (long long )0);
    __CrestApply2(74640, 12, (long long )(name___1 == 0));
# 5822 "xmlparse.c"
    if (name___1 == 0) {
      __CrestBranch(74643, 47614, 1);
      __CrestLoad(74645, (unsigned long )0, (long long )0);
      __CrestStore(74646, (unsigned long )(& __retres48));
# 5823 "xmlparse.c"
      __retres48 = 0;
# 5823 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74644, 47616, 0);

    }
    }
    __CrestLoad(74647, (unsigned long )0, (long long )sizeof(ELEMENT_TYPE ));
# 5824 "xmlparse.c"
    tmp___9 = lookup(oldParser, & newDtd->elementTypes, name___1, sizeof(ELEMENT_TYPE ));
    __CrestClearStack(74648);
# 5824 "xmlparse.c"
    newE = (ELEMENT_TYPE *)tmp___9;
    {
    __CrestLoad(74651, (unsigned long )(& newE), (long long )((unsigned long )newE));
    __CrestLoad(74650, (unsigned long )0, (long long )0);
    __CrestApply2(74649, 12, (long long )(newE == 0));
# 5826 "xmlparse.c"
    if (newE == 0) {
      __CrestBranch(74652, 47619, 1);
      __CrestLoad(74654, (unsigned long )0, (long long )0);
      __CrestStore(74655, (unsigned long )(& __retres48));
# 5827 "xmlparse.c"
      __retres48 = 0;
# 5827 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74653, 47621, 0);

    }
    }
    {
    __CrestLoad(74658, (unsigned long )(& oldE->nDefaultAtts), (long long )oldE->nDefaultAtts);
    __CrestLoad(74657, (unsigned long )0, (long long )0);
    __CrestApply2(74656, 13, (long long )(oldE->nDefaultAtts != 0));
# 5828 "xmlparse.c"
    if (oldE->nDefaultAtts != 0) {
      __CrestBranch(74659, 47623, 1);
# 5829 "xmlparse.c"
      mem_34 = ms->malloc_fcn;
      __CrestLoad(74663, (unsigned long )(& oldE->nDefaultAtts), (long long )oldE->nDefaultAtts);
      __CrestLoad(74662, (unsigned long )0, (long long )sizeof(DEFAULT_ATTRIBUTE ));
      __CrestApply2(74661, 2, (long long )((unsigned long )oldE->nDefaultAtts * sizeof(DEFAULT_ATTRIBUTE )));
# 5829 "xmlparse.c"
      tmp___10 = (*mem_34)((unsigned long )oldE->nDefaultAtts * sizeof(DEFAULT_ATTRIBUTE ));
      __CrestClearStack(74664);
# 5829 "xmlparse.c"
      newE->defaultAtts = (DEFAULT_ATTRIBUTE *)tmp___10;
      {
      __CrestLoad(74667, (unsigned long )(& newE->defaultAtts), (long long )((unsigned long )newE->defaultAtts));
      __CrestLoad(74666, (unsigned long )0, (long long )0);
      __CrestApply2(74665, 12, (long long )(newE->defaultAtts == 0));
# 5831 "xmlparse.c"
      if (newE->defaultAtts == 0) {
        __CrestBranch(74668, 47625, 1);
# 5832 "xmlparse.c"
        mem_35 = ms->free_fcn;
# 5832 "xmlparse.c"
        (*mem_35)((void *)newE);
        __CrestClearStack(74670);
        __CrestLoad(74671, (unsigned long )0, (long long )0);
        __CrestStore(74672, (unsigned long )(& __retres48));
# 5833 "xmlparse.c"
        __retres48 = 0;
# 5833 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(74669, 47628, 0);

      }
      }
    } else {
      __CrestBranch(74660, 47629, 0);

    }
    }
    {
    __CrestLoad(74675, (unsigned long )(& oldE->idAtt), (long long )((unsigned long )oldE->idAtt));
    __CrestLoad(74674, (unsigned long )0, (long long )0);
    __CrestApply2(74673, 13, (long long )(oldE->idAtt != 0));
# 5836 "xmlparse.c"
    if (oldE->idAtt != 0) {
      __CrestBranch(74676, 47631, 1);
# 5837 "xmlparse.c"
      mem_36 = oldE->idAtt;
      __CrestLoad(74678, (unsigned long )0, (long long )((size_t )0));
# 5837 "xmlparse.c"
      tmp___11 = lookup(oldParser, & newDtd->attributeIds, (KEY )mem_36->name, (size_t )0);
      __CrestClearStack(74679);
# 5837 "xmlparse.c"
      newE->idAtt = (ATTRIBUTE_ID const *)((ATTRIBUTE_ID *)tmp___11);
    } else {
      __CrestBranch(74677, 47632, 0);

    }
    }
    __CrestLoad(74680, (unsigned long )(& oldE->nDefaultAtts), (long long )oldE->nDefaultAtts);
    __CrestStore(74681, (unsigned long )(& tmp___12));
# 5839 "xmlparse.c"
    tmp___12 = (int )oldE->nDefaultAtts;
    __CrestLoad(74682, (unsigned long )(& tmp___12), (long long )tmp___12);
    __CrestStore(74683, (unsigned long )(& newE->nDefaultAtts));
# 5839 "xmlparse.c"
    newE->nDefaultAtts = tmp___12;
    __CrestLoad(74684, (unsigned long )(& tmp___12), (long long )tmp___12);
    __CrestStore(74685, (unsigned long )(& newE->allocDefaultAtts));
# 5839 "xmlparse.c"
    newE->allocDefaultAtts = tmp___12;
    {
    __CrestLoad(74688, (unsigned long )(& oldE->prefix), (long long )((unsigned long )oldE->prefix));
    __CrestLoad(74687, (unsigned long )0, (long long )0);
    __CrestApply2(74686, 13, (long long )(oldE->prefix != 0));
# 5840 "xmlparse.c"
    if (oldE->prefix != 0) {
      __CrestBranch(74689, 47635, 1);
# 5841 "xmlparse.c"
      mem_37 = oldE->prefix;
      __CrestLoad(74691, (unsigned long )0, (long long )((size_t )0));
# 5841 "xmlparse.c"
      tmp___13 = lookup(oldParser, & newDtd->prefixes, mem_37->name, (size_t )0);
      __CrestClearStack(74692);
# 5841 "xmlparse.c"
      newE->prefix = (PREFIX *)tmp___13;
    } else {
      __CrestBranch(74690, 47636, 0);

    }
    }
    __CrestLoad(74693, (unsigned long )0, (long long )0);
    __CrestStore(74694, (unsigned long )(& i));
# 5843 "xmlparse.c"
    i = 0;
    {
# 5843 "xmlparse.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(74697, (unsigned long )(& i), (long long )i);
      __CrestLoad(74696, (unsigned long )(& newE->nDefaultAtts), (long long )newE->nDefaultAtts);
      __CrestApply2(74695, 16, (long long )(i < newE->nDefaultAtts));
# 5843 "xmlparse.c"
      if (i < newE->nDefaultAtts) {
        __CrestBranch(74698, 47642, 1);

      } else {
        __CrestBranch(74699, 47643, 0);
# 5843 "xmlparse.c"
        goto while_break___2;
      }
      }
# 5844 "xmlparse.c"
      mem_38 = oldE->defaultAtts + i;
# 5844 "xmlparse.c"
      mem_39 = mem_38->id;
      __CrestLoad(74700, (unsigned long )0, (long long )((size_t )0));
# 5844 "xmlparse.c"
      tmp___14 = lookup(oldParser, & newDtd->attributeIds, (KEY )mem_39->name, (size_t )0);
      __CrestClearStack(74701);
# 5844 "xmlparse.c"
      mem_40 = newE->defaultAtts + i;
# 5844 "xmlparse.c"
      mem_40->id = (ATTRIBUTE_ID const *)((ATTRIBUTE_ID *)tmp___14);
# 5846 "xmlparse.c"
      mem_41 = newE->defaultAtts + i;
# 5846 "xmlparse.c"
      mem_42 = oldE->defaultAtts + i;
      __CrestLoad(74702, (unsigned long )(& mem_42->isCdata), (long long )mem_42->isCdata);
      __CrestStore(74703, (unsigned long )(& mem_41->isCdata));
# 5846 "xmlparse.c"
      mem_41->isCdata = mem_42->isCdata;
      {
# 5847 "xmlparse.c"
      mem_43 = oldE->defaultAtts + i;
      {
      __CrestLoad(74706, (unsigned long )(& mem_43->value), (long long )((unsigned long )mem_43->value));
      __CrestLoad(74705, (unsigned long )0, (long long )0);
      __CrestApply2(74704, 13, (long long )(mem_43->value != 0));
# 5847 "xmlparse.c"
      if (mem_43->value != 0) {
        __CrestBranch(74707, 47648, 1);
# 5848 "xmlparse.c"
        mem_44 = newE->defaultAtts + i;
# 5848 "xmlparse.c"
        mem_45 = oldE->defaultAtts + i;
# 5848 "xmlparse.c"
        mem_44->value = poolCopyString(& newDtd->pool, mem_45->value);
        __CrestClearStack(74709);
        {
# 5850 "xmlparse.c"
        mem_46 = newE->defaultAtts + i;
        {
        __CrestLoad(74712, (unsigned long )(& mem_46->value), (long long )((unsigned long )mem_46->value));
        __CrestLoad(74711, (unsigned long )0, (long long )0);
        __CrestApply2(74710, 12, (long long )(mem_46->value == 0));
# 5850 "xmlparse.c"
        if (mem_46->value == 0) {
          __CrestBranch(74713, 47652, 1);
          __CrestLoad(74715, (unsigned long )0, (long long )0);
          __CrestStore(74716, (unsigned long )(& __retres48));
# 5851 "xmlparse.c"
          __retres48 = 0;
# 5851 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(74714, 47654, 0);

        }
        }
        }
      } else {
        __CrestBranch(74708, 47655, 0);
# 5854 "xmlparse.c"
        mem_47 = newE->defaultAtts + i;
# 5854 "xmlparse.c"
        mem_47->value = (XML_Char const *)((void *)0);
      }
      }
      }
      __CrestLoad(74719, (unsigned long )(& i), (long long )i);
      __CrestLoad(74718, (unsigned long )0, (long long )1);
      __CrestApply2(74717, 0, (long long )(i + 1));
      __CrestStore(74720, (unsigned long )(& i));
# 5843 "xmlparse.c"
      i ++;
    }
    while_break___2: ;
    }
  }
  while_break___1: ;
  }
# 5859 "xmlparse.c"
  tmp___15 = copyEntityTable(oldParser, & newDtd->generalEntities, & newDtd->pool,
                             & oldDtd->generalEntities);
  __CrestHandleReturn(74722, (long long )tmp___15);
  __CrestStore(74721, (unsigned long )(& tmp___15));
  {
  __CrestLoad(74725, (unsigned long )(& tmp___15), (long long )tmp___15);
  __CrestLoad(74724, (unsigned long )0, (long long )0);
  __CrestApply2(74723, 13, (long long )(tmp___15 != 0));
# 5859 "xmlparse.c"
  if (tmp___15 != 0) {
    __CrestBranch(74726, 47661, 1);

  } else {
    __CrestBranch(74727, 47662, 0);
    __CrestLoad(74728, (unsigned long )0, (long long )0);
    __CrestStore(74729, (unsigned long )(& __retres48));
# 5863 "xmlparse.c"
    __retres48 = 0;
# 5863 "xmlparse.c"
    goto return_label;
  }
  }
# 5866 "xmlparse.c"
  tmp___16 = copyEntityTable(oldParser, & newDtd->paramEntities, & newDtd->pool, & oldDtd->paramEntities);
  __CrestHandleReturn(74731, (long long )tmp___16);
  __CrestStore(74730, (unsigned long )(& tmp___16));
  {
  __CrestLoad(74734, (unsigned long )(& tmp___16), (long long )tmp___16);
  __CrestLoad(74733, (unsigned long )0, (long long )0);
  __CrestApply2(74732, 13, (long long )(tmp___16 != 0));
# 5866 "xmlparse.c"
  if (tmp___16 != 0) {
    __CrestBranch(74735, 47666, 1);

  } else {
    __CrestBranch(74736, 47667, 0);
    __CrestLoad(74737, (unsigned long )0, (long long )0);
    __CrestStore(74738, (unsigned long )(& __retres48));
# 5870 "xmlparse.c"
    __retres48 = 0;
# 5870 "xmlparse.c"
    goto return_label;
  }
  }
  __CrestLoad(74739, (unsigned long )(& oldDtd->paramEntityRead), (long long )oldDtd->paramEntityRead);
  __CrestStore(74740, (unsigned long )(& newDtd->paramEntityRead));
# 5871 "xmlparse.c"
  newDtd->paramEntityRead = (XML_Bool )oldDtd->paramEntityRead;
  __CrestLoad(74741, (unsigned long )(& oldDtd->keepProcessing), (long long )oldDtd->keepProcessing);
  __CrestStore(74742, (unsigned long )(& newDtd->keepProcessing));
# 5874 "xmlparse.c"
  newDtd->keepProcessing = (XML_Bool )oldDtd->keepProcessing;
  __CrestLoad(74743, (unsigned long )(& oldDtd->hasParamEntityRefs), (long long )oldDtd->hasParamEntityRefs);
  __CrestStore(74744, (unsigned long )(& newDtd->hasParamEntityRefs));
# 5875 "xmlparse.c"
  newDtd->hasParamEntityRefs = (XML_Bool )oldDtd->hasParamEntityRefs;
  __CrestLoad(74745, (unsigned long )(& oldDtd->standalone), (long long )oldDtd->standalone);
  __CrestStore(74746, (unsigned long )(& newDtd->standalone));
# 5876 "xmlparse.c"
  newDtd->standalone = (XML_Bool )oldDtd->standalone;
  __CrestLoad(74747, (unsigned long )(& oldDtd->in_eldecl), (long long )oldDtd->in_eldecl);
  __CrestStore(74748, (unsigned long )(& newDtd->in_eldecl));
# 5879 "xmlparse.c"
  newDtd->in_eldecl = (XML_Bool )oldDtd->in_eldecl;
# 5880 "xmlparse.c"
  newDtd->scaffold = (CONTENT_SCAFFOLD *)oldDtd->scaffold;
  __CrestLoad(74749, (unsigned long )(& oldDtd->contentStringLen), (long long )oldDtd->contentStringLen);
  __CrestStore(74750, (unsigned long )(& newDtd->contentStringLen));
# 5881 "xmlparse.c"
  newDtd->contentStringLen = (unsigned int )oldDtd->contentStringLen;
  __CrestLoad(74751, (unsigned long )(& oldDtd->scaffSize), (long long )oldDtd->scaffSize);
  __CrestStore(74752, (unsigned long )(& newDtd->scaffSize));
# 5882 "xmlparse.c"
  newDtd->scaffSize = (unsigned int )oldDtd->scaffSize;
  __CrestLoad(74753, (unsigned long )(& oldDtd->scaffLevel), (long long )oldDtd->scaffLevel);
  __CrestStore(74754, (unsigned long )(& newDtd->scaffLevel));
# 5883 "xmlparse.c"
  newDtd->scaffLevel = (int )oldDtd->scaffLevel;
# 5884 "xmlparse.c"
  newDtd->scaffIndex = (int *)oldDtd->scaffIndex;
  __CrestLoad(74755, (unsigned long )0, (long long )1);
  __CrestStore(74756, (unsigned long )(& __retres48));
# 5886 "xmlparse.c"
  __retres48 = 1;
  return_label:
  {
  __CrestLoad(74757, (unsigned long )(& __retres48), (long long )__retres48);
  __CrestReturn(74758);
# 5757 "xmlparse.c"
  return (__retres48);
  }
}
}
# 5889 "xmlparse.c"
static int copyEntityTable(XML_Parser oldParser , HASH_TABLE *newTable , STRING_POOL *newPool ,
                           HASH_TABLE const *oldTable )
{
  HASH_TABLE_ITER iter ;
  XML_Char const *cachedOldBase ;
  XML_Char const *cachedNewBase ;
  ENTITY *newE ;
  XML_Char const *name ;
  ENTITY const *oldE ;
  NAMED *tmp ;
  NAMED *tmp___0 ;
  XML_Char const *tem ;
  XML_Char const *tmp___1 ;
  XML_Char const *tmp___2 ;
  XML_Char const *tem___0 ;
  XML_Char const *tmp___3 ;
  XML_Char const *tem___1 ;
  XML_Char const *tmp___4 ;
  int __retres20 ;

  {
  __CrestCall(74759, 803);
# 5896 "xmlparse.c"
  cachedOldBase = (XML_Char const *)((void *)0);
# 5897 "xmlparse.c"
  cachedNewBase = (XML_Char const *)((void *)0);
# 5899 "xmlparse.c"
  hashTableIterInit(& iter, oldTable);
  __CrestClearStack(74760);
  {
# 5901 "xmlparse.c"
  while (1) {
    while_continue: ;
# 5904 "xmlparse.c"
    tmp = hashTableIterNext(& iter);
    __CrestClearStack(74761);
# 5904 "xmlparse.c"
    oldE = (ENTITY const *)((ENTITY *)tmp);
    {
    __CrestLoad(74764, (unsigned long )(& oldE), (long long )((unsigned long )oldE));
    __CrestLoad(74763, (unsigned long )0, (long long )0);
    __CrestApply2(74762, 12, (long long )(oldE == 0));
# 5905 "xmlparse.c"
    if (oldE == 0) {
      __CrestBranch(74765, 47678, 1);
# 5906 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(74766, 47679, 0);

    }
    }
# 5907 "xmlparse.c"
    name = poolCopyString(newPool, (XML_Char const *)oldE->name);
    __CrestClearStack(74767);
    {
    __CrestLoad(74770, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(74769, (unsigned long )0, (long long )0);
    __CrestApply2(74768, 12, (long long )(name == 0));
# 5908 "xmlparse.c"
    if (name == 0) {
      __CrestBranch(74771, 47682, 1);
      __CrestLoad(74773, (unsigned long )0, (long long )0);
      __CrestStore(74774, (unsigned long )(& __retres20));
# 5909 "xmlparse.c"
      __retres20 = 0;
# 5909 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74772, 47684, 0);

    }
    }
    __CrestLoad(74775, (unsigned long )0, (long long )sizeof(ENTITY ));
# 5910 "xmlparse.c"
    tmp___0 = lookup(oldParser, newTable, name, sizeof(ENTITY ));
    __CrestClearStack(74776);
# 5910 "xmlparse.c"
    newE = (ENTITY *)tmp___0;
    {
    __CrestLoad(74779, (unsigned long )(& newE), (long long )((unsigned long )newE));
    __CrestLoad(74778, (unsigned long )0, (long long )0);
    __CrestApply2(74777, 12, (long long )(newE == 0));
# 5911 "xmlparse.c"
    if (newE == 0) {
      __CrestBranch(74780, 47687, 1);
      __CrestLoad(74782, (unsigned long )0, (long long )0);
      __CrestStore(74783, (unsigned long )(& __retres20));
# 5912 "xmlparse.c"
      __retres20 = 0;
# 5912 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74781, 47689, 0);

    }
    }
    {
    __CrestLoad(74786, (unsigned long )(& oldE->systemId), (long long )((unsigned long )oldE->systemId));
    __CrestLoad(74785, (unsigned long )0, (long long )0);
    __CrestApply2(74784, 13, (long long )(oldE->systemId != 0));
# 5913 "xmlparse.c"
    if (oldE->systemId != 0) {
      __CrestBranch(74787, 47691, 1);
# 5914 "xmlparse.c"
      tmp___1 = poolCopyString(newPool, (XML_Char const *)oldE->systemId);
      __CrestClearStack(74789);
# 5914 "xmlparse.c"
      tem = tmp___1;
      {
      __CrestLoad(74792, (unsigned long )(& tem), (long long )((unsigned long )tem));
      __CrestLoad(74791, (unsigned long )0, (long long )0);
      __CrestApply2(74790, 12, (long long )(tem == 0));
# 5915 "xmlparse.c"
      if (tem == 0) {
        __CrestBranch(74793, 47693, 1);
        __CrestLoad(74795, (unsigned long )0, (long long )0);
        __CrestStore(74796, (unsigned long )(& __retres20));
# 5916 "xmlparse.c"
        __retres20 = 0;
# 5916 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(74794, 47695, 0);

      }
      }
# 5917 "xmlparse.c"
      newE->systemId = tem;
      {
      __CrestLoad(74799, (unsigned long )(& oldE->base), (long long )((unsigned long )oldE->base));
      __CrestLoad(74798, (unsigned long )0, (long long )0);
      __CrestApply2(74797, 13, (long long )(oldE->base != 0));
# 5918 "xmlparse.c"
      if (oldE->base != 0) {
        __CrestBranch(74800, 47698, 1);
        {
        __CrestLoad(74804, (unsigned long )(& oldE->base), (long long )((unsigned long )oldE->base));
        __CrestLoad(74803, (unsigned long )(& cachedOldBase), (long long )((unsigned long )cachedOldBase));
        __CrestApply2(74802, 12, (long long )((unsigned long )oldE->base == (unsigned long )cachedOldBase));
# 5919 "xmlparse.c"
        if ((unsigned long )oldE->base == (unsigned long )cachedOldBase) {
          __CrestBranch(74805, 47699, 1);
# 5920 "xmlparse.c"
          newE->base = cachedNewBase;
        } else {
          __CrestBranch(74806, 47700, 0);
# 5922 "xmlparse.c"
          cachedOldBase = (XML_Char const *)oldE->base;
# 5923 "xmlparse.c"
          tem = poolCopyString(newPool, cachedOldBase);
          __CrestClearStack(74807);
          {
          __CrestLoad(74810, (unsigned long )(& tem), (long long )((unsigned long )tem));
          __CrestLoad(74809, (unsigned long )0, (long long )0);
          __CrestApply2(74808, 12, (long long )(tem == 0));
# 5924 "xmlparse.c"
          if (tem == 0) {
            __CrestBranch(74811, 47702, 1);
            __CrestLoad(74813, (unsigned long )0, (long long )0);
            __CrestStore(74814, (unsigned long )(& __retres20));
# 5925 "xmlparse.c"
            __retres20 = 0;
# 5925 "xmlparse.c"
            goto return_label;
          } else {
            __CrestBranch(74812, 47704, 0);

          }
          }
# 5926 "xmlparse.c"
          tmp___2 = tem;
# 5926 "xmlparse.c"
          newE->base = tmp___2;
# 5926 "xmlparse.c"
          cachedNewBase = tmp___2;
        }
        }
      } else {
        __CrestBranch(74801, 47706, 0);

      }
      }
      {
      __CrestLoad(74817, (unsigned long )(& oldE->publicId), (long long )((unsigned long )oldE->publicId));
      __CrestLoad(74816, (unsigned long )0, (long long )0);
      __CrestApply2(74815, 13, (long long )(oldE->publicId != 0));
# 5929 "xmlparse.c"
      if (oldE->publicId != 0) {
        __CrestBranch(74818, 47708, 1);
# 5930 "xmlparse.c"
        tem = poolCopyString(newPool, (XML_Char const *)oldE->publicId);
        __CrestClearStack(74820);
        {
        __CrestLoad(74823, (unsigned long )(& tem), (long long )((unsigned long )tem));
        __CrestLoad(74822, (unsigned long )0, (long long )0);
        __CrestApply2(74821, 12, (long long )(tem == 0));
# 5931 "xmlparse.c"
        if (tem == 0) {
          __CrestBranch(74824, 47710, 1);
          __CrestLoad(74826, (unsigned long )0, (long long )0);
          __CrestStore(74827, (unsigned long )(& __retres20));
# 5932 "xmlparse.c"
          __retres20 = 0;
# 5932 "xmlparse.c"
          goto return_label;
        } else {
          __CrestBranch(74825, 47712, 0);

        }
        }
# 5933 "xmlparse.c"
        newE->publicId = tem;
      } else {
        __CrestBranch(74819, 47714, 0);

      }
      }
    } else {
      __CrestBranch(74788, 47715, 0);
      __CrestLoad(74828, (unsigned long )(& oldE->textLen), (long long )oldE->textLen);
# 5937 "xmlparse.c"
      tmp___3 = poolCopyStringN(newPool, (XML_Char const *)oldE->textPtr, (int )oldE->textLen);
      __CrestClearStack(74829);
# 5937 "xmlparse.c"
      tem___0 = tmp___3;
      {
      __CrestLoad(74832, (unsigned long )(& tem___0), (long long )((unsigned long )tem___0));
      __CrestLoad(74831, (unsigned long )0, (long long )0);
      __CrestApply2(74830, 12, (long long )(tem___0 == 0));
# 5939 "xmlparse.c"
      if (tem___0 == 0) {
        __CrestBranch(74833, 47717, 1);
        __CrestLoad(74835, (unsigned long )0, (long long )0);
        __CrestStore(74836, (unsigned long )(& __retres20));
# 5940 "xmlparse.c"
        __retres20 = 0;
# 5940 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(74834, 47719, 0);

      }
      }
# 5941 "xmlparse.c"
      newE->textPtr = tem___0;
      __CrestLoad(74837, (unsigned long )(& oldE->textLen), (long long )oldE->textLen);
      __CrestStore(74838, (unsigned long )(& newE->textLen));
# 5942 "xmlparse.c"
      newE->textLen = (int )oldE->textLen;
    }
    }
    {
    __CrestLoad(74841, (unsigned long )(& oldE->notation), (long long )((unsigned long )oldE->notation));
    __CrestLoad(74840, (unsigned long )0, (long long )0);
    __CrestApply2(74839, 13, (long long )(oldE->notation != 0));
# 5944 "xmlparse.c"
    if (oldE->notation != 0) {
      __CrestBranch(74842, 47722, 1);
# 5945 "xmlparse.c"
      tmp___4 = poolCopyString(newPool, (XML_Char const *)oldE->notation);
      __CrestClearStack(74844);
# 5945 "xmlparse.c"
      tem___1 = tmp___4;
      {
      __CrestLoad(74847, (unsigned long )(& tem___1), (long long )((unsigned long )tem___1));
      __CrestLoad(74846, (unsigned long )0, (long long )0);
      __CrestApply2(74845, 12, (long long )(tem___1 == 0));
# 5946 "xmlparse.c"
      if (tem___1 == 0) {
        __CrestBranch(74848, 47724, 1);
        __CrestLoad(74850, (unsigned long )0, (long long )0);
        __CrestStore(74851, (unsigned long )(& __retres20));
# 5947 "xmlparse.c"
        __retres20 = 0;
# 5947 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(74849, 47726, 0);

      }
      }
# 5948 "xmlparse.c"
      newE->notation = tem___1;
    } else {
      __CrestBranch(74843, 47728, 0);

    }
    }
    __CrestLoad(74852, (unsigned long )(& oldE->is_param), (long long )oldE->is_param);
    __CrestStore(74853, (unsigned long )(& newE->is_param));
# 5950 "xmlparse.c"
    newE->is_param = (XML_Bool )oldE->is_param;
    __CrestLoad(74854, (unsigned long )(& oldE->is_internal), (long long )oldE->is_internal);
    __CrestStore(74855, (unsigned long )(& newE->is_internal));
# 5951 "xmlparse.c"
    newE->is_internal = (XML_Bool )oldE->is_internal;
  }
  while_break: ;
  }
  __CrestLoad(74856, (unsigned long )0, (long long )1);
  __CrestStore(74857, (unsigned long )(& __retres20));
# 5953 "xmlparse.c"
  __retres20 = 1;
  return_label:
  {
  __CrestLoad(74858, (unsigned long )(& __retres20), (long long )__retres20);
  __CrestReturn(74859);
# 5889 "xmlparse.c"
  return (__retres20);
  }
}
}
# 5958 "xmlparse.c"
static XML_Bool keyeq(KEY s1 , KEY s2 )
{
  XML_Bool __retres3 ;

  {
  __CrestCall(74860, 804);

  {
# 5961 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(74863, (unsigned long )s1, (long long )*s1);
    __CrestLoad(74862, (unsigned long )s2, (long long )*s2);
    __CrestApply2(74861, 12, (long long )((int const )*s1 == (int const )*s2));
# 5961 "xmlparse.c"
    if ((int const )*s1 == (int const )*s2) {
      __CrestBranch(74864, 47737, 1);

    } else {
      __CrestBranch(74865, 47738, 0);
# 5961 "xmlparse.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(74868, (unsigned long )s1, (long long )*s1);
    __CrestLoad(74867, (unsigned long )0, (long long )0);
    __CrestApply2(74866, 12, (long long )((int const )*s1 == 0));
# 5962 "xmlparse.c"
    if ((int const )*s1 == 0) {
      __CrestBranch(74869, 47740, 1);
      __CrestLoad(74871, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(74872, (unsigned long )(& __retres3));
# 5963 "xmlparse.c"
      __retres3 = (XML_Bool )1;
# 5963 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74870, 47742, 0);

    }
    }
# 5961 "xmlparse.c"
    s1 ++;
# 5961 "xmlparse.c"
    s2 ++;
  }
  while_break: ;
  }
  __CrestLoad(74873, (unsigned long )0, (long long )((XML_Bool )0));
  __CrestStore(74874, (unsigned long )(& __retres3));
# 5964 "xmlparse.c"
  __retres3 = (XML_Bool )0;
  return_label:
  {
  __CrestLoad(74875, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(74876);
# 5958 "xmlparse.c"
  return (__retres3);
  }
}
}
# 5967 "xmlparse.c"
static unsigned long hash(XML_Parser parser , KEY s )
{
  unsigned long h ;
  KEY tmp ;

  {
  __CrestCall(74877, 805);

  __CrestLoad(74878, (unsigned long )(& parser->m_hash_secret_salt), (long long )parser->m_hash_secret_salt);
  __CrestStore(74879, (unsigned long )(& h));
# 5970 "xmlparse.c"
  h = parser->m_hash_secret_salt;
  {
# 5971 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(74882, (unsigned long )s, (long long )*s);
    __CrestLoad(74881, (unsigned long )0, (long long )0);
    __CrestApply2(74880, 13, (long long )(*s != 0));
# 5971 "xmlparse.c"
    if (*s != 0) {
      __CrestBranch(74883, 47752, 1);

    } else {
      __CrestBranch(74884, 47753, 0);
# 5971 "xmlparse.c"
      goto while_break;
    }
    }
# 5972 "xmlparse.c"
    tmp = s;
# 5972 "xmlparse.c"
    s ++;
    __CrestLoad(74889, (unsigned long )(& h), (long long )h);
    __CrestLoad(74888, (unsigned long )0, (long long )1000003UL);
    __CrestApply2(74887, 2, (long long )(h * 1000003UL));
    __CrestLoad(74886, (unsigned long )tmp, (long long )*tmp);
    __CrestApply2(74885, 7, (long long )(h * 1000003UL ^ (unsigned long )((unsigned char )*tmp)));
    __CrestStore(74890, (unsigned long )(& h));
# 5972 "xmlparse.c"
    h = h * 1000003UL ^ (unsigned long )((unsigned char )*tmp);
  }
  while_break: ;
  }
  {
  __CrestLoad(74891, (unsigned long )(& h), (long long )h);
  __CrestReturn(74892);
# 5973 "xmlparse.c"
  return (h);
  }
}
}
# 5976 "xmlparse.c"
static NAMED *lookup(XML_Parser parser , HASH_TABLE *table , KEY name , size_t createSize )
{
  size_t i ;
  size_t tsize ;
  void *tmp ;
  unsigned long tmp___0 ;
  unsigned long h ;
  unsigned long tmp___1 ;
  unsigned long mask ;
  unsigned char step ;
  XML_Bool tmp___2 ;
  unsigned char newPower ;
  size_t newSize ;
  unsigned long newMask ;
  size_t tsize___0 ;
  NAMED **newV ;
  void *tmp___3 ;
  unsigned long newHash ;
  unsigned long tmp___4 ;
  size_t j ;
  void *tmp___5 ;
  XML_Memory_Handling_Suite const *mem_24 ;
  void *(*mem_25)(size_t size ) ;
  NAMED **mem_26 ;
  NAMED **mem_27 ;
  NAMED *mem_28 ;
  NAMED **mem_29 ;
  XML_Memory_Handling_Suite const *mem_30 ;
  void *(*mem_31)(size_t size ) ;
  NAMED **mem_32 ;
  NAMED **mem_33 ;
  NAMED *mem_34 ;
  NAMED **mem_35 ;
  NAMED **mem_36 ;
  NAMED **mem_37 ;
  XML_Memory_Handling_Suite const *mem_38 ;
  void (*mem_39)(void *ptr ) ;
  NAMED **mem_40 ;
  XML_Memory_Handling_Suite const *mem_41 ;
  void *(*mem_42)(size_t size ) ;
  NAMED **mem_43 ;
  NAMED **mem_44 ;
  NAMED **mem_45 ;
  NAMED **mem_46 ;
  NAMED *mem_47 ;
  NAMED **mem_48 ;
  NAMED *__retres49 ;

  {
  __CrestCall(74894, 806);
  __CrestStore(74893, (unsigned long )(& createSize));
  {
  __CrestLoad(74897, (unsigned long )(& table->size), (long long )table->size);
  __CrestLoad(74896, (unsigned long )0, (long long )0UL);
  __CrestApply2(74895, 12, (long long )(table->size == 0UL));
# 5980 "xmlparse.c"
  if (table->size == 0UL) {
    __CrestBranch(74898, 47758, 1);
    {
    __CrestLoad(74902, (unsigned long )(& createSize), (long long )createSize);
    __CrestLoad(74901, (unsigned long )0, (long long )0);
    __CrestApply2(74900, 12, (long long )(createSize == 0));
# 5982 "xmlparse.c"
    if (createSize == 0) {
      __CrestBranch(74903, 47759, 1);
# 5983 "xmlparse.c"
      __retres49 = (NAMED *)((void *)0);
# 5983 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74904, 47761, 0);

    }
    }
    __CrestLoad(74905, (unsigned long )0, (long long )(unsigned char)6);
    __CrestStore(74906, (unsigned long )(& table->power));
# 5984 "xmlparse.c"
    table->power = (unsigned char)6;
    __CrestLoad(74907, (unsigned long )0, (long long )(1UL << 6));
    __CrestStore(74908, (unsigned long )(& table->size));
# 5986 "xmlparse.c"
    table->size = 1UL << 6;
    __CrestLoad(74911, (unsigned long )(& table->size), (long long )table->size);
    __CrestLoad(74910, (unsigned long )0, (long long )sizeof(NAMED *));
    __CrestApply2(74909, 2, (long long )(table->size * sizeof(NAMED *)));
    __CrestStore(74912, (unsigned long )(& tsize));
# 5987 "xmlparse.c"
    tsize = table->size * sizeof(NAMED *);
# 5988 "xmlparse.c"
    mem_24 = table->mem;
# 5988 "xmlparse.c"
    mem_25 = mem_24->malloc_fcn;
    __CrestLoad(74913, (unsigned long )(& tsize), (long long )tsize);
# 5988 "xmlparse.c"
    tmp = (*mem_25)(tsize);
    __CrestClearStack(74914);
# 5988 "xmlparse.c"
    table->v = (NAMED **)tmp;
    {
    __CrestLoad(74917, (unsigned long )(& table->v), (long long )((unsigned long )table->v));
    __CrestLoad(74916, (unsigned long )0, (long long )0);
    __CrestApply2(74915, 12, (long long )(table->v == 0));
# 5989 "xmlparse.c"
    if (table->v == 0) {
      __CrestBranch(74918, 47764, 1);
      __CrestLoad(74920, (unsigned long )0, (long long )((size_t )0));
      __CrestStore(74921, (unsigned long )(& table->size));
# 5990 "xmlparse.c"
      table->size = (size_t )0;
# 5991 "xmlparse.c"
      __retres49 = (NAMED *)((void *)0);
# 5991 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74919, 47767, 0);

    }
    }
    __CrestLoad(74922, (unsigned long )0, (long long )0);
    __CrestLoad(74923, (unsigned long )(& tsize), (long long )tsize);
# 5993 "xmlparse.c"
    memset((void *)table->v, 0, tsize);
    __CrestClearStack(74924);
# 5994 "xmlparse.c"
    tmp___0 = hash(parser, name);
    __CrestHandleReturn(74926, (long long )tmp___0);
    __CrestStore(74925, (unsigned long )(& tmp___0));
    __CrestLoad(74931, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(74930, (unsigned long )(& table->size), (long long )table->size);
    __CrestLoad(74929, (unsigned long )0, (long long )1UL);
    __CrestApply2(74928, 1, (long long )(table->size - 1UL));
    __CrestApply2(74927, 5, (long long )(tmp___0 & (table->size - 1UL)));
    __CrestStore(74932, (unsigned long )(& i));
# 5994 "xmlparse.c"
    i = tmp___0 & (table->size - 1UL);
  } else {
    __CrestBranch(74899, 47769, 0);
# 5997 "xmlparse.c"
    tmp___1 = hash(parser, name);
    __CrestHandleReturn(74934, (long long )tmp___1);
    __CrestStore(74933, (unsigned long )(& tmp___1));
    __CrestLoad(74935, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(74936, (unsigned long )(& h));
# 5997 "xmlparse.c"
    h = tmp___1;
    __CrestLoad(74939, (unsigned long )(& table->size), (long long )table->size);
    __CrestLoad(74938, (unsigned long )0, (long long )1UL);
    __CrestApply2(74937, 1, (long long )(table->size - 1UL));
    __CrestStore(74940, (unsigned long )(& mask));
# 5998 "xmlparse.c"
    mask = table->size - 1UL;
    __CrestLoad(74941, (unsigned long )0, (long long )(unsigned char)0);
    __CrestStore(74942, (unsigned long )(& step));
# 5999 "xmlparse.c"
    step = (unsigned char)0;
    __CrestLoad(74945, (unsigned long )(& h), (long long )h);
    __CrestLoad(74944, (unsigned long )(& mask), (long long )mask);
    __CrestApply2(74943, 5, (long long )(h & mask));
    __CrestStore(74946, (unsigned long )(& i));
# 6000 "xmlparse.c"
    i = h & mask;
    {
# 6001 "xmlparse.c"
    while (1) {
      while_continue: ;
      {
# 6001 "xmlparse.c"
      mem_26 = table->v + i;
      {
      __CrestLoad(74949, (unsigned long )mem_26, (long long )((unsigned long )*mem_26));
      __CrestLoad(74948, (unsigned long )0, (long long )0);
      __CrestApply2(74947, 13, (long long )(*mem_26 != 0));
# 6001 "xmlparse.c"
      if (*mem_26 != 0) {
        __CrestBranch(74950, 47776, 1);

      } else {
        __CrestBranch(74951, 47777, 0);
# 6001 "xmlparse.c"
        goto while_break;
      }
      }
      }
# 6002 "xmlparse.c"
      mem_27 = table->v + i;
# 6002 "xmlparse.c"
      mem_28 = *mem_27;
# 6002 "xmlparse.c"
      tmp___2 = keyeq(name, mem_28->name);
      __CrestHandleReturn(74953, (long long )tmp___2);
      __CrestStore(74952, (unsigned long )(& tmp___2));
      {
      __CrestLoad(74956, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(74955, (unsigned long )0, (long long )0);
      __CrestApply2(74954, 13, (long long )(tmp___2 != 0));
# 6002 "xmlparse.c"
      if (tmp___2 != 0) {
        __CrestBranch(74957, 47780, 1);
        {
# 6003 "xmlparse.c"
        mem_29 = table->v + i;
# 6003 "xmlparse.c"
        __retres49 = *mem_29;
# 6003 "xmlparse.c"
        goto return_label;
        }
      } else {
        __CrestBranch(74958, 47784, 0);

      }
      }
      {
      __CrestLoad(74961, (unsigned long )(& step), (long long )step);
      __CrestLoad(74960, (unsigned long )0, (long long )0);
      __CrestApply2(74959, 12, (long long )(step == 0));
# 6004 "xmlparse.c"
      if (step == 0) {
        __CrestBranch(74962, 47786, 1);
        __CrestLoad(74977, (unsigned long )(& h), (long long )h);
        __CrestLoad(74976, (unsigned long )(& mask), (long long )mask);
        __CrestApply1(74975, 20, (long long )(~ mask));
        __CrestApply2(74974, 5, (long long )(h & ~ mask));
        __CrestLoad(74973, (unsigned long )(& table->power), (long long )table->power);
        __CrestLoad(74972, (unsigned long )0, (long long )1);
        __CrestApply2(74971, 1, (long long )((int )table->power - 1));
        __CrestApply2(74970, 9, (long long )((h & ~ mask) >> ((int )table->power - 1)));
        __CrestLoad(74969, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(74968, (unsigned long )0, (long long )2);
        __CrestApply2(74967, 9, (long long )(mask >> 2));
        __CrestApply2(74966, 5, (long long )(((h & ~ mask) >> ((int )table->power - 1)) & (mask >> 2)));
        __CrestLoad(74965, (unsigned long )0, (long long )1UL);
        __CrestApply2(74964, 6, (long long )((((h & ~ mask) >> ((int )table->power - 1)) & (mask >> 2)) | 1UL));
        __CrestStore(74978, (unsigned long )(& step));
# 6005 "xmlparse.c"
        step = (unsigned char )((((h & ~ mask) >> ((int )table->power - 1)) & (mask >> 2)) | 1UL);
      } else {
        __CrestBranch(74963, 47787, 0);

      }
      }
      {
      __CrestLoad(74981, (unsigned long )(& i), (long long )i);
      __CrestLoad(74980, (unsigned long )(& step), (long long )step);
      __CrestApply2(74979, 16, (long long )(i < (size_t )step));
# 6006 "xmlparse.c"
      if (i < (size_t )step) {
        __CrestBranch(74982, 47789, 1);
        __CrestLoad(74988, (unsigned long )(& i), (long long )i);
        __CrestLoad(74987, (unsigned long )(& table->size), (long long )table->size);
        __CrestLoad(74986, (unsigned long )(& step), (long long )step);
        __CrestApply2(74985, 1, (long long )(table->size - (size_t )step));
        __CrestApply2(74984, 0, (long long )(i + (table->size - (size_t )step)));
        __CrestStore(74989, (unsigned long )(& i));
# 6006 "xmlparse.c"
        i += table->size - (size_t )step;
      } else {
        __CrestBranch(74983, 47790, 0);
        __CrestLoad(74992, (unsigned long )(& i), (long long )i);
        __CrestLoad(74991, (unsigned long )(& step), (long long )step);
        __CrestApply2(74990, 1, (long long )(i - (size_t )step));
        __CrestStore(74993, (unsigned long )(& i));
# 6006 "xmlparse.c"
        i -= (size_t )step;
      }
      }
    }
    while_break: ;
    }
    {
    __CrestLoad(74996, (unsigned long )(& createSize), (long long )createSize);
    __CrestLoad(74995, (unsigned long )0, (long long )0);
    __CrestApply2(74994, 12, (long long )(createSize == 0));
# 6008 "xmlparse.c"
    if (createSize == 0) {
      __CrestBranch(74997, 47793, 1);
# 6009 "xmlparse.c"
      __retres49 = (NAMED *)((void *)0);
# 6009 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(74998, 47795, 0);

    }
    }
    {
    __CrestLoad(75005, (unsigned long )(& table->used), (long long )table->used);
    __CrestLoad(75004, (unsigned long )(& table->power), (long long )table->power);
    __CrestLoad(75003, (unsigned long )0, (long long )1);
    __CrestApply2(75002, 1, (long long )((int )table->power - 1));
    __CrestApply2(75001, 9, (long long )(table->used >> ((int )table->power - 1)));
    __CrestLoad(75000, (unsigned long )0, (long long )0);
    __CrestApply2(74999, 13, (long long )(table->used >> ((int )table->power - 1) != 0));
# 6012 "xmlparse.c"
    if (table->used >> ((int )table->power - 1) != 0) {
      __CrestBranch(75006, 47797, 1);
      __CrestLoad(75010, (unsigned long )(& table->power), (long long )table->power);
      __CrestLoad(75009, (unsigned long )0, (long long )1);
      __CrestApply2(75008, 0, (long long )((int )table->power + 1));
      __CrestStore(75011, (unsigned long )(& newPower));
# 6013 "xmlparse.c"
      newPower = (unsigned char )((int )table->power + 1);
      __CrestLoad(75014, (unsigned long )0, (long long )1UL);
      __CrestLoad(75013, (unsigned long )(& newPower), (long long )newPower);
      __CrestApply2(75012, 8, (long long )(1UL << (int )newPower));
      __CrestStore(75015, (unsigned long )(& newSize));
# 6014 "xmlparse.c"
      newSize = 1UL << (int )newPower;
      __CrestLoad(75018, (unsigned long )(& newSize), (long long )newSize);
      __CrestLoad(75017, (unsigned long )0, (long long )1UL);
      __CrestApply2(75016, 1, (long long )(newSize - 1UL));
      __CrestStore(75019, (unsigned long )(& newMask));
# 6015 "xmlparse.c"
      newMask = newSize - 1UL;
      __CrestLoad(75022, (unsigned long )(& newSize), (long long )newSize);
      __CrestLoad(75021, (unsigned long )0, (long long )sizeof(NAMED *));
      __CrestApply2(75020, 2, (long long )(newSize * sizeof(NAMED *)));
      __CrestStore(75023, (unsigned long )(& tsize___0));
# 6016 "xmlparse.c"
      tsize___0 = newSize * sizeof(NAMED *);
# 6017 "xmlparse.c"
      mem_30 = table->mem;
# 6017 "xmlparse.c"
      mem_31 = mem_30->malloc_fcn;
      __CrestLoad(75024, (unsigned long )(& tsize___0), (long long )tsize___0);
# 6017 "xmlparse.c"
      tmp___3 = (*mem_31)(tsize___0);
      __CrestClearStack(75025);
# 6017 "xmlparse.c"
      newV = (NAMED **)tmp___3;
      {
      __CrestLoad(75028, (unsigned long )(& newV), (long long )((unsigned long )newV));
      __CrestLoad(75027, (unsigned long )0, (long long )0);
      __CrestApply2(75026, 12, (long long )(newV == 0));
# 6018 "xmlparse.c"
      if (newV == 0) {
        __CrestBranch(75029, 47799, 1);
# 6019 "xmlparse.c"
        __retres49 = (NAMED *)((void *)0);
# 6019 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(75030, 47801, 0);

      }
      }
      __CrestLoad(75031, (unsigned long )0, (long long )0);
      __CrestLoad(75032, (unsigned long )(& tsize___0), (long long )tsize___0);
# 6020 "xmlparse.c"
      memset((void *)newV, 0, tsize___0);
      __CrestClearStack(75033);
      __CrestLoad(75034, (unsigned long )0, (long long )((size_t )0));
      __CrestStore(75035, (unsigned long )(& i));
# 6021 "xmlparse.c"
      i = (size_t )0;
      {
# 6021 "xmlparse.c"
      while (1) {
        while_continue___0: ;
        {
        __CrestLoad(75038, (unsigned long )(& i), (long long )i);
        __CrestLoad(75037, (unsigned long )(& table->size), (long long )table->size);
        __CrestApply2(75036, 16, (long long )(i < table->size));
# 6021 "xmlparse.c"
        if (i < table->size) {
          __CrestBranch(75039, 47807, 1);

        } else {
          __CrestBranch(75040, 47808, 0);
# 6021 "xmlparse.c"
          goto while_break___0;
        }
        }
        {
# 6022 "xmlparse.c"
        mem_32 = table->v + i;
        {
        __CrestLoad(75043, (unsigned long )mem_32, (long long )((unsigned long )*mem_32));
        __CrestLoad(75042, (unsigned long )0, (long long )0);
        __CrestApply2(75041, 13, (long long )(*mem_32 != 0));
# 6022 "xmlparse.c"
        if (*mem_32 != 0) {
          __CrestBranch(75044, 47812, 1);
# 6023 "xmlparse.c"
          mem_33 = table->v + i;
# 6023 "xmlparse.c"
          mem_34 = *mem_33;
# 6023 "xmlparse.c"
          tmp___4 = hash(parser, mem_34->name);
          __CrestHandleReturn(75047, (long long )tmp___4);
          __CrestStore(75046, (unsigned long )(& tmp___4));
          __CrestLoad(75048, (unsigned long )(& tmp___4), (long long )tmp___4);
          __CrestStore(75049, (unsigned long )(& newHash));
# 6023 "xmlparse.c"
          newHash = tmp___4;
          __CrestLoad(75052, (unsigned long )(& newHash), (long long )newHash);
          __CrestLoad(75051, (unsigned long )(& newMask), (long long )newMask);
          __CrestApply2(75050, 5, (long long )(newHash & newMask));
          __CrestStore(75053, (unsigned long )(& j));
# 6024 "xmlparse.c"
          j = newHash & newMask;
          __CrestLoad(75054, (unsigned long )0, (long long )(unsigned char)0);
          __CrestStore(75055, (unsigned long )(& step));
# 6025 "xmlparse.c"
          step = (unsigned char)0;
          {
# 6026 "xmlparse.c"
          while (1) {
            while_continue___1: ;
            {
# 6026 "xmlparse.c"
            mem_35 = newV + j;
            {
            __CrestLoad(75058, (unsigned long )mem_35, (long long )((unsigned long )*mem_35));
            __CrestLoad(75057, (unsigned long )0, (long long )0);
            __CrestApply2(75056, 13, (long long )(*mem_35 != 0));
# 6026 "xmlparse.c"
            if (*mem_35 != 0) {
              __CrestBranch(75059, 47819, 1);

            } else {
              __CrestBranch(75060, 47820, 0);
# 6026 "xmlparse.c"
              goto while_break___1;
            }
            }
            }
            {
            __CrestLoad(75063, (unsigned long )(& step), (long long )step);
            __CrestLoad(75062, (unsigned long )0, (long long )0);
            __CrestApply2(75061, 12, (long long )(step == 0));
# 6027 "xmlparse.c"
            if (step == 0) {
              __CrestBranch(75064, 47822, 1);
              __CrestLoad(75079, (unsigned long )(& newHash), (long long )newHash);
              __CrestLoad(75078, (unsigned long )(& newMask), (long long )newMask);
              __CrestApply1(75077, 20, (long long )(~ newMask));
              __CrestApply2(75076, 5, (long long )(newHash & ~ newMask));
              __CrestLoad(75075, (unsigned long )(& newPower), (long long )newPower);
              __CrestLoad(75074, (unsigned long )0, (long long )1);
              __CrestApply2(75073, 1, (long long )((int )newPower - 1));
              __CrestApply2(75072, 9, (long long )((newHash & ~ newMask) >> ((int )newPower - 1)));
              __CrestLoad(75071, (unsigned long )(& newMask), (long long )newMask);
              __CrestLoad(75070, (unsigned long )0, (long long )2);
              __CrestApply2(75069, 9, (long long )(newMask >> 2));
              __CrestApply2(75068, 5, (long long )(((newHash & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)));
              __CrestLoad(75067, (unsigned long )0, (long long )1UL);
              __CrestApply2(75066, 6, (long long )((((newHash & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)) | 1UL));
              __CrestStore(75080, (unsigned long )(& step));
# 6028 "xmlparse.c"
              step = (unsigned char )((((newHash & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)) | 1UL);
            } else {
              __CrestBranch(75065, 47823, 0);

            }
            }
            {
            __CrestLoad(75083, (unsigned long )(& j), (long long )j);
            __CrestLoad(75082, (unsigned long )(& step), (long long )step);
            __CrestApply2(75081, 16, (long long )(j < (size_t )step));
# 6029 "xmlparse.c"
            if (j < (size_t )step) {
              __CrestBranch(75084, 47825, 1);
              __CrestLoad(75090, (unsigned long )(& j), (long long )j);
              __CrestLoad(75089, (unsigned long )(& newSize), (long long )newSize);
              __CrestLoad(75088, (unsigned long )(& step), (long long )step);
              __CrestApply2(75087, 1, (long long )(newSize - (size_t )step));
              __CrestApply2(75086, 0, (long long )(j + (newSize - (size_t )step)));
              __CrestStore(75091, (unsigned long )(& j));
# 6029 "xmlparse.c"
              j += newSize - (size_t )step;
            } else {
              __CrestBranch(75085, 47826, 0);
              __CrestLoad(75094, (unsigned long )(& j), (long long )j);
              __CrestLoad(75093, (unsigned long )(& step), (long long )step);
              __CrestApply2(75092, 1, (long long )(j - (size_t )step));
              __CrestStore(75095, (unsigned long )(& j));
# 6029 "xmlparse.c"
              j -= (size_t )step;
            }
            }
          }
          while_break___1: ;
          }
# 6031 "xmlparse.c"
          mem_36 = newV + j;
# 6031 "xmlparse.c"
          mem_37 = table->v + i;
# 6031 "xmlparse.c"
          *mem_36 = *mem_37;
        } else {
          __CrestBranch(75045, 47829, 0);

        }
        }
        }
        __CrestLoad(75098, (unsigned long )(& i), (long long )i);
        __CrestLoad(75097, (unsigned long )0, (long long )1UL);
        __CrestApply2(75096, 0, (long long )(i + 1UL));
        __CrestStore(75099, (unsigned long )(& i));
# 6021 "xmlparse.c"
        i ++;
      }
      while_break___0: ;
      }
# 6033 "xmlparse.c"
      mem_38 = table->mem;
# 6033 "xmlparse.c"
      mem_39 = mem_38->free_fcn;
# 6033 "xmlparse.c"
      (*mem_39)((void *)table->v);
      __CrestClearStack(75100);
# 6034 "xmlparse.c"
      table->v = newV;
      __CrestLoad(75101, (unsigned long )(& newPower), (long long )newPower);
      __CrestStore(75102, (unsigned long )(& table->power));
# 6035 "xmlparse.c"
      table->power = newPower;
      __CrestLoad(75103, (unsigned long )(& newSize), (long long )newSize);
      __CrestStore(75104, (unsigned long )(& table->size));
# 6036 "xmlparse.c"
      table->size = newSize;
      __CrestLoad(75107, (unsigned long )(& h), (long long )h);
      __CrestLoad(75106, (unsigned long )(& newMask), (long long )newMask);
      __CrestApply2(75105, 5, (long long )(h & newMask));
      __CrestStore(75108, (unsigned long )(& i));
# 6037 "xmlparse.c"
      i = h & newMask;
      __CrestLoad(75109, (unsigned long )0, (long long )(unsigned char)0);
      __CrestStore(75110, (unsigned long )(& step));
# 6038 "xmlparse.c"
      step = (unsigned char)0;
      {
# 6039 "xmlparse.c"
      while (1) {
        while_continue___2: ;
        {
# 6039 "xmlparse.c"
        mem_40 = table->v + i;
        {
        __CrestLoad(75113, (unsigned long )mem_40, (long long )((unsigned long )*mem_40));
        __CrestLoad(75112, (unsigned long )0, (long long )0);
        __CrestApply2(75111, 13, (long long )(*mem_40 != 0));
# 6039 "xmlparse.c"
        if (*mem_40 != 0) {
          __CrestBranch(75114, 47839, 1);

        } else {
          __CrestBranch(75115, 47840, 0);
# 6039 "xmlparse.c"
          goto while_break___2;
        }
        }
        }
        {
        __CrestLoad(75118, (unsigned long )(& step), (long long )step);
        __CrestLoad(75117, (unsigned long )0, (long long )0);
        __CrestApply2(75116, 12, (long long )(step == 0));
# 6040 "xmlparse.c"
        if (step == 0) {
          __CrestBranch(75119, 47842, 1);
          __CrestLoad(75134, (unsigned long )(& h), (long long )h);
          __CrestLoad(75133, (unsigned long )(& newMask), (long long )newMask);
          __CrestApply1(75132, 20, (long long )(~ newMask));
          __CrestApply2(75131, 5, (long long )(h & ~ newMask));
          __CrestLoad(75130, (unsigned long )(& newPower), (long long )newPower);
          __CrestLoad(75129, (unsigned long )0, (long long )1);
          __CrestApply2(75128, 1, (long long )((int )newPower - 1));
          __CrestApply2(75127, 9, (long long )((h & ~ newMask) >> ((int )newPower - 1)));
          __CrestLoad(75126, (unsigned long )(& newMask), (long long )newMask);
          __CrestLoad(75125, (unsigned long )0, (long long )2);
          __CrestApply2(75124, 9, (long long )(newMask >> 2));
          __CrestApply2(75123, 5, (long long )(((h & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)));
          __CrestLoad(75122, (unsigned long )0, (long long )1UL);
          __CrestApply2(75121, 6, (long long )((((h & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)) | 1UL));
          __CrestStore(75135, (unsigned long )(& step));
# 6041 "xmlparse.c"
          step = (unsigned char )((((h & ~ newMask) >> ((int )newPower - 1)) & (newMask >> 2)) | 1UL);
        } else {
          __CrestBranch(75120, 47843, 0);

        }
        }
        {
        __CrestLoad(75138, (unsigned long )(& i), (long long )i);
        __CrestLoad(75137, (unsigned long )(& step), (long long )step);
        __CrestApply2(75136, 16, (long long )(i < (size_t )step));
# 6042 "xmlparse.c"
        if (i < (size_t )step) {
          __CrestBranch(75139, 47845, 1);
          __CrestLoad(75145, (unsigned long )(& i), (long long )i);
          __CrestLoad(75144, (unsigned long )(& newSize), (long long )newSize);
          __CrestLoad(75143, (unsigned long )(& step), (long long )step);
          __CrestApply2(75142, 1, (long long )(newSize - (size_t )step));
          __CrestApply2(75141, 0, (long long )(i + (newSize - (size_t )step)));
          __CrestStore(75146, (unsigned long )(& i));
# 6042 "xmlparse.c"
          i += newSize - (size_t )step;
        } else {
          __CrestBranch(75140, 47846, 0);
          __CrestLoad(75149, (unsigned long )(& i), (long long )i);
          __CrestLoad(75148, (unsigned long )(& step), (long long )step);
          __CrestApply2(75147, 1, (long long )(i - (size_t )step));
          __CrestStore(75150, (unsigned long )(& i));
# 6042 "xmlparse.c"
          i -= (size_t )step;
        }
        }
      }
      while_break___2: ;
      }
    } else {
      __CrestBranch(75007, 47848, 0);

    }
    }
  }
  }
# 6046 "xmlparse.c"
  mem_41 = table->mem;
# 6046 "xmlparse.c"
  mem_42 = mem_41->malloc_fcn;
  __CrestLoad(75151, (unsigned long )(& createSize), (long long )createSize);
# 6046 "xmlparse.c"
  tmp___5 = (*mem_42)(createSize);
  __CrestClearStack(75152);
# 6046 "xmlparse.c"
  mem_43 = table->v + i;
# 6046 "xmlparse.c"
  *mem_43 = (NAMED *)tmp___5;
  {
# 6047 "xmlparse.c"
  mem_44 = table->v + i;
  {
  __CrestLoad(75155, (unsigned long )mem_44, (long long )((unsigned long )*mem_44));
  __CrestLoad(75154, (unsigned long )0, (long long )0);
  __CrestApply2(75153, 12, (long long )(*mem_44 == 0));
# 6047 "xmlparse.c"
  if (*mem_44 == 0) {
    __CrestBranch(75156, 47853, 1);
# 6048 "xmlparse.c"
    __retres49 = (NAMED *)((void *)0);
# 6048 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(75157, 47855, 0);

  }
  }
  }
# 6049 "xmlparse.c"
  mem_45 = table->v + i;
  __CrestLoad(75158, (unsigned long )0, (long long )0);
  __CrestLoad(75159, (unsigned long )(& createSize), (long long )createSize);
# 6049 "xmlparse.c"
  memset((void *)*mem_45, 0, createSize);
  __CrestClearStack(75160);
# 6050 "xmlparse.c"
  mem_46 = table->v + i;
# 6050 "xmlparse.c"
  mem_47 = *mem_46;
# 6050 "xmlparse.c"
  mem_47->name = name;
  __CrestLoad(75163, (unsigned long )(& table->used), (long long )table->used);
  __CrestLoad(75162, (unsigned long )0, (long long )1UL);
  __CrestApply2(75161, 0, (long long )(table->used + 1UL));
  __CrestStore(75164, (unsigned long )(& table->used));
# 6051 "xmlparse.c"
  (table->used) ++;
  {
# 6052 "xmlparse.c"
  mem_48 = table->v + i;
# 6052 "xmlparse.c"
  __retres49 = *mem_48;
# 6052 "xmlparse.c"
  goto return_label;
  }
  return_label:
  {
  __CrestReturn(75165);
# 5976 "xmlparse.c"
  return (__retres49);
  }
}
}
# 6055 "xmlparse.c"
static void hashTableClear(HASH_TABLE *table )
{
  size_t i ;
  XML_Memory_Handling_Suite const *mem_3 ;
  void (*mem_4)(void *ptr ) ;
  NAMED **mem_5 ;
  NAMED **mem_6 ;

  {
  __CrestCall(75166, 807);

  __CrestLoad(75167, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(75168, (unsigned long )(& i));
# 6059 "xmlparse.c"
  i = (size_t )0;
  {
# 6059 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75171, (unsigned long )(& i), (long long )i);
    __CrestLoad(75170, (unsigned long )(& table->size), (long long )table->size);
    __CrestApply2(75169, 16, (long long )(i < table->size));
# 6059 "xmlparse.c"
    if (i < table->size) {
      __CrestBranch(75172, 47867, 1);

    } else {
      __CrestBranch(75173, 47868, 0);
# 6059 "xmlparse.c"
      goto while_break;
    }
    }
# 6060 "xmlparse.c"
    mem_3 = table->mem;
# 6060 "xmlparse.c"
    mem_4 = mem_3->free_fcn;
# 6060 "xmlparse.c"
    mem_5 = table->v + i;
# 6060 "xmlparse.c"
    (*mem_4)((void *)*mem_5);
    __CrestClearStack(75174);
# 6061 "xmlparse.c"
    mem_6 = table->v + i;
# 6061 "xmlparse.c"
    *mem_6 = (NAMED *)((void *)0);
    __CrestLoad(75177, (unsigned long )(& i), (long long )i);
    __CrestLoad(75176, (unsigned long )0, (long long )1UL);
    __CrestApply2(75175, 0, (long long )(i + 1UL));
    __CrestStore(75178, (unsigned long )(& i));
# 6059 "xmlparse.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(75179, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(75180, (unsigned long )(& table->used));
# 6063 "xmlparse.c"
  table->used = (size_t )0;

  {
  __CrestReturn(75181);
# 6055 "xmlparse.c"
  return;
  }
}
}
# 6066 "xmlparse.c"
static void hashTableDestroy(HASH_TABLE *table )
{
  size_t i ;
  XML_Memory_Handling_Suite const *mem_3 ;
  void (*mem_4)(void *ptr ) ;
  NAMED **mem_5 ;
  XML_Memory_Handling_Suite const *mem_6 ;
  void (*mem_7)(void *ptr ) ;

  {
  __CrestCall(75182, 808);

  __CrestLoad(75183, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(75184, (unsigned long )(& i));
# 6070 "xmlparse.c"
  i = (size_t )0;
  {
# 6070 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75187, (unsigned long )(& i), (long long )i);
    __CrestLoad(75186, (unsigned long )(& table->size), (long long )table->size);
    __CrestApply2(75185, 16, (long long )(i < table->size));
# 6070 "xmlparse.c"
    if (i < table->size) {
      __CrestBranch(75188, 47879, 1);

    } else {
      __CrestBranch(75189, 47880, 0);
# 6070 "xmlparse.c"
      goto while_break;
    }
    }
# 6071 "xmlparse.c"
    mem_3 = table->mem;
# 6071 "xmlparse.c"
    mem_4 = mem_3->free_fcn;
# 6071 "xmlparse.c"
    mem_5 = table->v + i;
# 6071 "xmlparse.c"
    (*mem_4)((void *)*mem_5);
    __CrestClearStack(75190);
    __CrestLoad(75193, (unsigned long )(& i), (long long )i);
    __CrestLoad(75192, (unsigned long )0, (long long )1UL);
    __CrestApply2(75191, 0, (long long )(i + 1UL));
    __CrestStore(75194, (unsigned long )(& i));
# 6070 "xmlparse.c"
    i ++;
  }
  while_break: ;
  }
# 6072 "xmlparse.c"
  mem_6 = table->mem;
# 6072 "xmlparse.c"
  mem_7 = mem_6->free_fcn;
# 6072 "xmlparse.c"
  (*mem_7)((void *)table->v);
  __CrestClearStack(75195);

  {
  __CrestReturn(75196);
# 6066 "xmlparse.c"
  return;
  }
}
}
# 6075 "xmlparse.c"
static void hashTableInit(HASH_TABLE *p , XML_Memory_Handling_Suite const *ms )
{


  {
  __CrestCall(75197, 809);

  __CrestLoad(75198, (unsigned long )0, (long long )(unsigned char)0);
  __CrestStore(75199, (unsigned long )(& p->power));
# 6078 "xmlparse.c"
  p->power = (unsigned char)0;
  __CrestLoad(75200, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(75201, (unsigned long )(& p->size));
# 6079 "xmlparse.c"
  p->size = (size_t )0;
  __CrestLoad(75202, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(75203, (unsigned long )(& p->used));
# 6080 "xmlparse.c"
  p->used = (size_t )0;
# 6081 "xmlparse.c"
  p->v = (NAMED **)((void *)0);
# 6082 "xmlparse.c"
  p->mem = ms;

  {
  __CrestReturn(75204);
# 6075 "xmlparse.c"
  return;
  }
}
}
# 6085 "xmlparse.c"
static void hashTableIterInit(HASH_TABLE_ITER *iter , HASH_TABLE const *table )
{


  {
  __CrestCall(75205, 810);
# 6088 "xmlparse.c"
  iter->p = (NAMED **)table->v;
# 6089 "xmlparse.c"
  iter->end = iter->p + table->size;

  {
  __CrestReturn(75206);
# 6085 "xmlparse.c"
  return;
  }
}
}
# 6092 "xmlparse.c"
static NAMED *hashTableIterNext(HASH_TABLE_ITER *iter )
{
  NAMED *tem ;
  NAMED **tmp ;
  NAMED *__retres4 ;

  {
  __CrestCall(75207, 811);

  {
# 6095 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75210, (unsigned long )(& iter->p), (long long )((unsigned long )iter->p));
    __CrestLoad(75209, (unsigned long )(& iter->end), (long long )((unsigned long )iter->end));
    __CrestApply2(75208, 13, (long long )((unsigned long )iter->p != (unsigned long )iter->end));
# 6095 "xmlparse.c"
    if ((unsigned long )iter->p != (unsigned long )iter->end) {
      __CrestBranch(75211, 47896, 1);

    } else {
      __CrestBranch(75212, 47897, 0);
# 6095 "xmlparse.c"
      goto while_break;
    }
    }
# 6096 "xmlparse.c"
    tmp = iter->p;
# 6096 "xmlparse.c"
    (iter->p) ++;
# 6096 "xmlparse.c"
    tem = *tmp;
    {
    __CrestLoad(75215, (unsigned long )(& tem), (long long )((unsigned long )tem));
    __CrestLoad(75214, (unsigned long )0, (long long )0);
    __CrestApply2(75213, 13, (long long )(tem != 0));
# 6097 "xmlparse.c"
    if (tem != 0) {
      __CrestBranch(75216, 47900, 1);
# 6098 "xmlparse.c"
      __retres4 = tem;
# 6098 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(75217, 47902, 0);

    }
    }
  }
  while_break: ;
  }
# 6100 "xmlparse.c"
  __retres4 = (NAMED *)((void *)0);
  return_label:
  {
  __CrestReturn(75218);
# 6092 "xmlparse.c"
  return (__retres4);
  }
}
}
# 6103 "xmlparse.c"
static void poolInit(STRING_POOL *pool , XML_Memory_Handling_Suite const *ms )
{


  {
  __CrestCall(75219, 812);
# 6106 "xmlparse.c"
  pool->blocks = (BLOCK *)((void *)0);
# 6107 "xmlparse.c"
  pool->freeBlocks = (BLOCK *)((void *)0);
# 6108 "xmlparse.c"
  pool->start = (XML_Char *)((void *)0);
# 6109 "xmlparse.c"
  pool->ptr = (XML_Char *)((void *)0);
# 6110 "xmlparse.c"
  pool->end = (XML_Char const *)((void *)0);
# 6111 "xmlparse.c"
  pool->mem = ms;

  {
  __CrestReturn(75220);
# 6103 "xmlparse.c"
  return;
  }
}
}
# 6114 "xmlparse.c"
static void poolClear(STRING_POOL *pool )
{
  BLOCK *p ;
  BLOCK *tem ;

  {
  __CrestCall(75221, 813);

  {
  __CrestLoad(75224, (unsigned long )(& pool->freeBlocks), (long long )((unsigned long )pool->freeBlocks));
  __CrestLoad(75223, (unsigned long )0, (long long )0);
  __CrestApply2(75222, 12, (long long )(pool->freeBlocks == 0));
# 6117 "xmlparse.c"
  if (pool->freeBlocks == 0) {
    __CrestBranch(75225, 47910, 1);
# 6118 "xmlparse.c"
    pool->freeBlocks = pool->blocks;
  } else {
    __CrestBranch(75226, 47911, 0);
# 6120 "xmlparse.c"
    p = pool->blocks;
    {
# 6121 "xmlparse.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(75229, (unsigned long )(& p), (long long )((unsigned long )p));
      __CrestLoad(75228, (unsigned long )0, (long long )0);
      __CrestApply2(75227, 13, (long long )(p != 0));
# 6121 "xmlparse.c"
      if (p != 0) {
        __CrestBranch(75230, 47916, 1);

      } else {
        __CrestBranch(75231, 47917, 0);
# 6121 "xmlparse.c"
        goto while_break;
      }
      }
# 6122 "xmlparse.c"
      tem = p->next;
# 6123 "xmlparse.c"
      p->next = pool->freeBlocks;
# 6124 "xmlparse.c"
      pool->freeBlocks = p;
# 6125 "xmlparse.c"
      p = tem;
    }
    while_break: ;
    }
  }
  }
# 6128 "xmlparse.c"
  pool->blocks = (BLOCK *)((void *)0);
# 6129 "xmlparse.c"
  pool->start = (XML_Char *)((void *)0);
# 6130 "xmlparse.c"
  pool->ptr = (XML_Char *)((void *)0);
# 6131 "xmlparse.c"
  pool->end = (XML_Char const *)((void *)0);

  {
  __CrestReturn(75232);
# 6114 "xmlparse.c"
  return;
  }
}
}
# 6134 "xmlparse.c"
static void poolDestroy(STRING_POOL *pool )
{
  BLOCK *p ;
  BLOCK *tem ;
  BLOCK *tem___0 ;
  XML_Memory_Handling_Suite const *mem_5 ;
  void (*mem_6)(void *ptr ) ;
  XML_Memory_Handling_Suite const *mem_7 ;
  void (*mem_8)(void *ptr ) ;

  {
  __CrestCall(75233, 814);
# 6137 "xmlparse.c"
  p = pool->blocks;
  {
# 6138 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75236, (unsigned long )(& p), (long long )((unsigned long )p));
    __CrestLoad(75235, (unsigned long )0, (long long )0);
    __CrestApply2(75234, 13, (long long )(p != 0));
# 6138 "xmlparse.c"
    if (p != 0) {
      __CrestBranch(75237, 47928, 1);

    } else {
      __CrestBranch(75238, 47929, 0);
# 6138 "xmlparse.c"
      goto while_break;
    }
    }
# 6139 "xmlparse.c"
    tem = p->next;
# 6140 "xmlparse.c"
    mem_5 = pool->mem;
# 6140 "xmlparse.c"
    mem_6 = mem_5->free_fcn;
# 6140 "xmlparse.c"
    (*mem_6)((void *)p);
    __CrestClearStack(75239);
# 6141 "xmlparse.c"
    p = tem;
  }
  while_break: ;
  }
# 6143 "xmlparse.c"
  p = pool->freeBlocks;
  {
# 6144 "xmlparse.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(75242, (unsigned long )(& p), (long long )((unsigned long )p));
    __CrestLoad(75241, (unsigned long )0, (long long )0);
    __CrestApply2(75240, 13, (long long )(p != 0));
# 6144 "xmlparse.c"
    if (p != 0) {
      __CrestBranch(75243, 47937, 1);

    } else {
      __CrestBranch(75244, 47938, 0);
# 6144 "xmlparse.c"
      goto while_break___0;
    }
    }
# 6145 "xmlparse.c"
    tem___0 = p->next;
# 6146 "xmlparse.c"
    mem_7 = pool->mem;
# 6146 "xmlparse.c"
    mem_8 = mem_7->free_fcn;
# 6146 "xmlparse.c"
    (*mem_8)((void *)p);
    __CrestClearStack(75245);
# 6147 "xmlparse.c"
    p = tem___0;
  }
  while_break___0: ;
  }

  {
  __CrestReturn(75246);
# 6134 "xmlparse.c"
  return;
  }
}
}
# 6151 "xmlparse.c"
static XML_Char *poolAppend(STRING_POOL *pool , ENCODING const *enc , char const *ptr ,
                            char const *end )
{
  XML_Bool tmp ;
  XML_Bool tmp___0 ;
  void (*mem_7)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                char **toP , char const *toLim ) ;
  XML_Char *__retres8 ;

  {
  __CrestCall(75247, 815);

  {
  __CrestLoad(75250, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
  __CrestLoad(75249, (unsigned long )0, (long long )0);
  __CrestApply2(75248, 12, (long long )(pool->ptr == 0));
# 6155 "xmlparse.c"
  if (pool->ptr == 0) {
    __CrestBranch(75251, 47944, 1);
# 6155 "xmlparse.c"
    tmp = poolGrow(pool);
    __CrestHandleReturn(75254, (long long )tmp);
    __CrestStore(75253, (unsigned long )(& tmp));
    {
    __CrestLoad(75257, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(75256, (unsigned long )0, (long long )0);
    __CrestApply2(75255, 13, (long long )(tmp != 0));
# 6155 "xmlparse.c"
    if (tmp != 0) {
      __CrestBranch(75258, 47946, 1);

    } else {
      __CrestBranch(75259, 47947, 0);
# 6156 "xmlparse.c"
      __retres8 = (XML_Char *)((void *)0);
# 6156 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(75252, 47949, 0);

  }
  }
  {
# 6157 "xmlparse.c"
  while (1) {
    while_continue: ;
# 6158 "xmlparse.c"
    mem_7 = enc->utf8Convert;
# 6158 "xmlparse.c"
    (*mem_7)(enc, & ptr, end, & pool->ptr, (char const *)((ICHAR *)pool->end));
    __CrestClearStack(75260);
    {
    __CrestLoad(75263, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(75262, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(75261, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 6159 "xmlparse.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(75264, 47955, 1);
# 6160 "xmlparse.c"
      goto while_break;
    } else {
      __CrestBranch(75265, 47956, 0);

    }
    }
# 6161 "xmlparse.c"
    tmp___0 = poolGrow(pool);
    __CrestHandleReturn(75267, (long long )tmp___0);
    __CrestStore(75266, (unsigned long )(& tmp___0));
    {
    __CrestLoad(75270, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(75269, (unsigned long )0, (long long )0);
    __CrestApply2(75268, 13, (long long )(tmp___0 != 0));
# 6161 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(75271, 47959, 1);

    } else {
      __CrestBranch(75272, 47960, 0);
# 6162 "xmlparse.c"
      __retres8 = (XML_Char *)((void *)0);
# 6162 "xmlparse.c"
      goto return_label;
    }
    }
  }
  while_break: ;
  }
# 6164 "xmlparse.c"
  __retres8 = pool->start;
  return_label:
  {
  __CrestReturn(75273);
# 6151 "xmlparse.c"
  return (__retres8);
  }
}
}
# 6167 "xmlparse.c"
static XML_Char const *poolCopyString(STRING_POOL *pool , XML_Char const *s )
{
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  XML_Char const *tmp___3 ;
  XML_Char const *__retres8 ;

  {
  __CrestCall(75274, 816);

  {
# 6170 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75277, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(75276, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestApply2(75275, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 6171 "xmlparse.c"
    if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
      __CrestBranch(75278, 47969, 1);
# 6171 "xmlparse.c"
      tmp___2 = poolGrow(pool);
      __CrestHandleReturn(75281, (long long )tmp___2);
      __CrestStore(75280, (unsigned long )(& tmp___2));
      {
      __CrestLoad(75284, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(75283, (unsigned long )0, (long long )0);
      __CrestApply2(75282, 13, (long long )(tmp___2 != 0));
# 6171 "xmlparse.c"
      if (tmp___2 != 0) {
        __CrestBranch(75285, 47971, 1);
# 6171 "xmlparse.c"
        tmp___0 = pool->ptr;
# 6171 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(75287, (unsigned long )s, (long long )*s);
        __CrestStore(75288, (unsigned long )tmp___0);
# 6171 "xmlparse.c"
        *tmp___0 = (XML_Char )*s;
        __CrestLoad(75289, (unsigned long )0, (long long )1);
        __CrestStore(75290, (unsigned long )(& tmp___1));
# 6171 "xmlparse.c"
        tmp___1 = 1;
      } else {
        __CrestBranch(75286, 47972, 0);
        __CrestLoad(75291, (unsigned long )0, (long long )0);
        __CrestStore(75292, (unsigned long )(& tmp___1));
# 6171 "xmlparse.c"
        tmp___1 = 0;
      }
      }
    } else {
      __CrestBranch(75279, 47973, 0);
# 6171 "xmlparse.c"
      tmp___0 = pool->ptr;
# 6171 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(75293, (unsigned long )s, (long long )*s);
      __CrestStore(75294, (unsigned long )tmp___0);
# 6171 "xmlparse.c"
      *tmp___0 = (XML_Char )*s;
      __CrestLoad(75295, (unsigned long )0, (long long )1);
      __CrestStore(75296, (unsigned long )(& tmp___1));
# 6171 "xmlparse.c"
      tmp___1 = 1;
    }
    }
    {
    __CrestLoad(75299, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(75298, (unsigned long )0, (long long )0);
    __CrestApply2(75297, 13, (long long )(tmp___1 != 0));
# 6171 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(75300, 47975, 1);

    } else {
      __CrestBranch(75301, 47976, 0);
# 6172 "xmlparse.c"
      __retres8 = (XML_Char const *)((void *)0);
# 6172 "xmlparse.c"
      goto return_label;
    }
    }
# 6170 "xmlparse.c"
    tmp___3 = s;
# 6170 "xmlparse.c"
    s ++;
    {
    __CrestLoad(75304, (unsigned long )tmp___3, (long long )*tmp___3);
    __CrestLoad(75303, (unsigned long )0, (long long )0);
    __CrestApply2(75302, 13, (long long )(*tmp___3 != 0));
# 6170 "xmlparse.c"
    if (*tmp___3 != 0) {
      __CrestBranch(75305, 47980, 1);

    } else {
      __CrestBranch(75306, 47981, 0);
# 6170 "xmlparse.c"
      goto while_break;
    }
    }
  }
  while_break: ;
  }
# 6174 "xmlparse.c"
  s = (XML_Char const *)pool->start;
# 6175 "xmlparse.c"
  pool->start = pool->ptr;
# 6176 "xmlparse.c"
  __retres8 = s;
  return_label:
  {
  __CrestReturn(75307);
# 6167 "xmlparse.c"
  return (__retres8);
  }
}
}
# 6179 "xmlparse.c"
static XML_Char const *poolCopyStringN(STRING_POOL *pool , XML_Char const *s ,
                                         int n )
{
  XML_Bool tmp ;
  XML_Char *tmp___1 ;
  int tmp___2 ;
  XML_Bool tmp___3 ;
  XML_Char const *__retres9 ;

  {
  __CrestCall(75309, 817);
  __CrestStore(75308, (unsigned long )(& n));
  {
  __CrestLoad(75312, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
  __CrestLoad(75311, (unsigned long )0, (long long )0);
  __CrestApply2(75310, 12, (long long )(pool->ptr == 0));
# 6182 "xmlparse.c"
  if (pool->ptr == 0) {
    __CrestBranch(75313, 47987, 1);
# 6182 "xmlparse.c"
    tmp = poolGrow(pool);
    __CrestHandleReturn(75316, (long long )tmp);
    __CrestStore(75315, (unsigned long )(& tmp));
    {
    __CrestLoad(75319, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(75318, (unsigned long )0, (long long )0);
    __CrestApply2(75317, 13, (long long )(tmp != 0));
# 6182 "xmlparse.c"
    if (tmp != 0) {
      __CrestBranch(75320, 47989, 1);

    } else {
      __CrestBranch(75321, 47990, 0);
# 6183 "xmlparse.c"
      __retres9 = (XML_Char const *)((void *)0);
# 6183 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(75314, 47992, 0);

  }
  }
  {
# 6184 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75324, (unsigned long )(& n), (long long )n);
    __CrestLoad(75323, (unsigned long )0, (long long )0);
    __CrestApply2(75322, 14, (long long )(n > 0));
# 6184 "xmlparse.c"
    if (n > 0) {
      __CrestBranch(75325, 47997, 1);

    } else {
      __CrestBranch(75326, 47998, 0);
# 6184 "xmlparse.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(75329, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(75328, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestApply2(75327, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 6185 "xmlparse.c"
    if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
      __CrestBranch(75330, 48000, 1);
# 6185 "xmlparse.c"
      tmp___3 = poolGrow(pool);
      __CrestHandleReturn(75333, (long long )tmp___3);
      __CrestStore(75332, (unsigned long )(& tmp___3));
      {
      __CrestLoad(75336, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(75335, (unsigned long )0, (long long )0);
      __CrestApply2(75334, 13, (long long )(tmp___3 != 0));
# 6185 "xmlparse.c"
      if (tmp___3 != 0) {
        __CrestBranch(75337, 48002, 1);
# 6185 "xmlparse.c"
        tmp___1 = pool->ptr;
# 6185 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(75339, (unsigned long )s, (long long )*s);
        __CrestStore(75340, (unsigned long )tmp___1);
# 6185 "xmlparse.c"
        *tmp___1 = (XML_Char )*s;
        __CrestLoad(75341, (unsigned long )0, (long long )1);
        __CrestStore(75342, (unsigned long )(& tmp___2));
# 6185 "xmlparse.c"
        tmp___2 = 1;
      } else {
        __CrestBranch(75338, 48003, 0);
        __CrestLoad(75343, (unsigned long )0, (long long )0);
        __CrestStore(75344, (unsigned long )(& tmp___2));
# 6185 "xmlparse.c"
        tmp___2 = 0;
      }
      }
    } else {
      __CrestBranch(75331, 48004, 0);
# 6185 "xmlparse.c"
      tmp___1 = pool->ptr;
# 6185 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(75345, (unsigned long )s, (long long )*s);
      __CrestStore(75346, (unsigned long )tmp___1);
# 6185 "xmlparse.c"
      *tmp___1 = (XML_Char )*s;
      __CrestLoad(75347, (unsigned long )0, (long long )1);
      __CrestStore(75348, (unsigned long )(& tmp___2));
# 6185 "xmlparse.c"
      tmp___2 = 1;
    }
    }
    {
    __CrestLoad(75351, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(75350, (unsigned long )0, (long long )0);
    __CrestApply2(75349, 13, (long long )(tmp___2 != 0));
# 6185 "xmlparse.c"
    if (tmp___2 != 0) {
      __CrestBranch(75352, 48006, 1);

    } else {
      __CrestBranch(75353, 48007, 0);
# 6186 "xmlparse.c"
      __retres9 = (XML_Char const *)((void *)0);
# 6186 "xmlparse.c"
      goto return_label;
    }
    }
    __CrestLoad(75356, (unsigned long )(& n), (long long )n);
    __CrestLoad(75355, (unsigned long )0, (long long )1);
    __CrestApply2(75354, 1, (long long )(n - 1));
    __CrestStore(75357, (unsigned long )(& n));
# 6184 "xmlparse.c"
    n --;
# 6184 "xmlparse.c"
    s ++;
  }
  while_break: ;
  }
# 6188 "xmlparse.c"
  s = (XML_Char const *)pool->start;
# 6189 "xmlparse.c"
  pool->start = pool->ptr;
# 6190 "xmlparse.c"
  __retres9 = s;
  return_label:
  {
  __CrestReturn(75358);
# 6179 "xmlparse.c"
  return (__retres9);
  }
}
}
# 6193 "xmlparse.c"
static XML_Char const *poolAppendString(STRING_POOL *pool , XML_Char const *s )
{
  XML_Char *tmp___0 ;
  int tmp___1 ;
  XML_Bool tmp___2 ;
  XML_Char const *__retres7 ;

  {
  __CrestCall(75359, 818);

  {
# 6196 "xmlparse.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(75362, (unsigned long )s, (long long )*s);
    __CrestLoad(75361, (unsigned long )0, (long long )0);
    __CrestApply2(75360, 13, (long long )(*s != 0));
# 6196 "xmlparse.c"
    if (*s != 0) {
      __CrestBranch(75363, 48018, 1);

    } else {
      __CrestBranch(75364, 48019, 0);
# 6196 "xmlparse.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(75367, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(75366, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestApply2(75365, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 6197 "xmlparse.c"
    if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
      __CrestBranch(75368, 48021, 1);
# 6197 "xmlparse.c"
      tmp___2 = poolGrow(pool);
      __CrestHandleReturn(75371, (long long )tmp___2);
      __CrestStore(75370, (unsigned long )(& tmp___2));
      {
      __CrestLoad(75374, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(75373, (unsigned long )0, (long long )0);
      __CrestApply2(75372, 13, (long long )(tmp___2 != 0));
# 6197 "xmlparse.c"
      if (tmp___2 != 0) {
        __CrestBranch(75375, 48023, 1);
# 6197 "xmlparse.c"
        tmp___0 = pool->ptr;
# 6197 "xmlparse.c"
        (pool->ptr) ++;
        __CrestLoad(75377, (unsigned long )s, (long long )*s);
        __CrestStore(75378, (unsigned long )tmp___0);
# 6197 "xmlparse.c"
        *tmp___0 = (XML_Char )*s;
        __CrestLoad(75379, (unsigned long )0, (long long )1);
        __CrestStore(75380, (unsigned long )(& tmp___1));
# 6197 "xmlparse.c"
        tmp___1 = 1;
      } else {
        __CrestBranch(75376, 48024, 0);
        __CrestLoad(75381, (unsigned long )0, (long long )0);
        __CrestStore(75382, (unsigned long )(& tmp___1));
# 6197 "xmlparse.c"
        tmp___1 = 0;
      }
      }
    } else {
      __CrestBranch(75369, 48025, 0);
# 6197 "xmlparse.c"
      tmp___0 = pool->ptr;
# 6197 "xmlparse.c"
      (pool->ptr) ++;
      __CrestLoad(75383, (unsigned long )s, (long long )*s);
      __CrestStore(75384, (unsigned long )tmp___0);
# 6197 "xmlparse.c"
      *tmp___0 = (XML_Char )*s;
      __CrestLoad(75385, (unsigned long )0, (long long )1);
      __CrestStore(75386, (unsigned long )(& tmp___1));
# 6197 "xmlparse.c"
      tmp___1 = 1;
    }
    }
    {
    __CrestLoad(75389, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(75388, (unsigned long )0, (long long )0);
    __CrestApply2(75387, 13, (long long )(tmp___1 != 0));
# 6197 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(75390, 48027, 1);

    } else {
      __CrestBranch(75391, 48028, 0);
# 6198 "xmlparse.c"
      __retres7 = (XML_Char const *)((void *)0);
# 6198 "xmlparse.c"
      goto return_label;
    }
    }
# 6199 "xmlparse.c"
    s ++;
  }
  while_break: ;
  }
# 6201 "xmlparse.c"
  __retres7 = (XML_Char const *)pool->start;
  return_label:
  {
  __CrestReturn(75392);
# 6193 "xmlparse.c"
  return (__retres7);
  }
}
}
# 6204 "xmlparse.c"
static XML_Char *poolStoreString(STRING_POOL *pool , ENCODING const *enc , char const *ptr ,
                                 char const *end )
{
  XML_Char *tmp ;
  XML_Bool tmp___0 ;
  XML_Char *tmp___1 ;
  XML_Char *__retres8 ;

  {
  __CrestCall(75393, 819);
# 6208 "xmlparse.c"
  tmp = poolAppend(pool, enc, ptr, end);
  __CrestClearStack(75394);
  {
  __CrestLoad(75397, (unsigned long )(& tmp), (long long )((unsigned long )tmp));
  __CrestLoad(75396, (unsigned long )0, (long long )0);
  __CrestApply2(75395, 13, (long long )(tmp != 0));
# 6208 "xmlparse.c"
  if (tmp != 0) {
    __CrestBranch(75398, 48036, 1);

  } else {
    __CrestBranch(75399, 48037, 0);
# 6209 "xmlparse.c"
    __retres8 = (XML_Char *)((void *)0);
# 6209 "xmlparse.c"
    goto return_label;
  }
  }
  {
  __CrestLoad(75402, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
  __CrestLoad(75401, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
  __CrestApply2(75400, 12, (long long )((unsigned long )pool->ptr == (unsigned long )pool->end));
# 6210 "xmlparse.c"
  if ((unsigned long )pool->ptr == (unsigned long )pool->end) {
    __CrestBranch(75403, 48040, 1);
# 6210 "xmlparse.c"
    tmp___0 = poolGrow(pool);
    __CrestHandleReturn(75406, (long long )tmp___0);
    __CrestStore(75405, (unsigned long )(& tmp___0));
    {
    __CrestLoad(75409, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(75408, (unsigned long )0, (long long )0);
    __CrestApply2(75407, 13, (long long )(tmp___0 != 0));
# 6210 "xmlparse.c"
    if (tmp___0 != 0) {
      __CrestBranch(75410, 48042, 1);

    } else {
      __CrestBranch(75411, 48043, 0);
# 6211 "xmlparse.c"
      __retres8 = (XML_Char *)((void *)0);
# 6211 "xmlparse.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(75404, 48045, 0);

  }
  }
# 6212 "xmlparse.c"
  tmp___1 = pool->ptr;
# 6212 "xmlparse.c"
  (pool->ptr) ++;
  __CrestLoad(75412, (unsigned long )0, (long long )((XML_Char )0));
  __CrestStore(75413, (unsigned long )tmp___1);
# 6212 "xmlparse.c"
  *tmp___1 = (XML_Char )0;
# 6213 "xmlparse.c"
  __retres8 = pool->start;
  return_label:
  {
  __CrestReturn(75414);
# 6204 "xmlparse.c"
  return (__retres8);
  }
}
}
# 6216 "xmlparse.c"
static XML_Bool poolGrow(STRING_POOL *pool )
{
  BLOCK *tem ;
  int blockSize ;
  BLOCK *temp ;
  void *tmp ;
  BLOCK *tem___0 ;
  int blockSize___0 ;
  void *tmp___0 ;
  BLOCK *mem_9 ;
  BLOCK *mem_10 ;
  BLOCK *mem_11 ;
  BLOCK *mem_12 ;
  BLOCK *mem_13 ;
  BLOCK *mem_14 ;
  BLOCK *mem_15 ;
  BLOCK *mem_16 ;
  BLOCK *mem_17 ;
  BLOCK *mem_18 ;
  BLOCK *mem_19 ;
  BLOCK *mem_20 ;
  XML_Memory_Handling_Suite const *mem_21 ;
  void *(*mem_22)(void *ptr , size_t size ) ;
  BLOCK *mem_23 ;
  BLOCK *mem_24 ;
  BLOCK *mem_25 ;
  BLOCK *mem_26 ;
  XML_Memory_Handling_Suite const *mem_27 ;
  void *(*mem_28)(size_t size ) ;
  BLOCK *mem_29 ;
  XML_Bool __retres30 ;

  {
  __CrestCall(75415, 820);

  {
  __CrestLoad(75418, (unsigned long )(& pool->freeBlocks), (long long )((unsigned long )pool->freeBlocks));
  __CrestLoad(75417, (unsigned long )0, (long long )0);
  __CrestApply2(75416, 13, (long long )(pool->freeBlocks != 0));
# 6219 "xmlparse.c"
  if (pool->freeBlocks != 0) {
    __CrestBranch(75419, 48050, 1);
    {
    __CrestLoad(75423, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestLoad(75422, (unsigned long )0, (long long )((unsigned long )((XML_Char *)0)));
    __CrestApply2(75421, 12, (long long )((unsigned long )pool->start == (unsigned long )((XML_Char *)0)));
# 6220 "xmlparse.c"
    if ((unsigned long )pool->start == (unsigned long )((XML_Char *)0)) {
      __CrestBranch(75424, 48051, 1);
# 6221 "xmlparse.c"
      pool->blocks = pool->freeBlocks;
# 6222 "xmlparse.c"
      mem_9 = pool->freeBlocks;
# 6222 "xmlparse.c"
      pool->freeBlocks = mem_9->next;
# 6223 "xmlparse.c"
      mem_10 = pool->blocks;
# 6223 "xmlparse.c"
      mem_10->next = (struct block *)((void *)0);
# 6224 "xmlparse.c"
      mem_11 = pool->blocks;
# 6224 "xmlparse.c"
      pool->start = mem_11->s;
# 6225 "xmlparse.c"
      mem_12 = pool->blocks;
# 6225 "xmlparse.c"
      pool->end = (XML_Char const *)(pool->start + mem_12->size);
# 6226 "xmlparse.c"
      pool->ptr = pool->start;
      __CrestLoad(75426, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(75427, (unsigned long )(& __retres30));
# 6227 "xmlparse.c"
      __retres30 = (XML_Bool )1;
# 6227 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(75425, 48054, 0);

    }
    }
    {
# 6229 "xmlparse.c"
    mem_13 = pool->freeBlocks;
    {
    __CrestLoad(75432, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestLoad(75431, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestApply2(75430, 18, (long long )(pool->end - (XML_Char const *)pool->start));
    __CrestLoad(75429, (unsigned long )(& mem_13->size), (long long )mem_13->size);
    __CrestApply2(75428, 16, (long long )(pool->end - (XML_Char const *)pool->start < (long )mem_13->size));
# 6229 "xmlparse.c"
    if (pool->end - (XML_Char const *)pool->start < (long )mem_13->size) {
      __CrestBranch(75433, 48058, 1);
# 6230 "xmlparse.c"
      mem_14 = pool->freeBlocks;
# 6230 "xmlparse.c"
      tem = mem_14->next;
# 6231 "xmlparse.c"
      mem_15 = pool->freeBlocks;
# 6231 "xmlparse.c"
      mem_15->next = pool->blocks;
# 6232 "xmlparse.c"
      pool->blocks = pool->freeBlocks;
# 6233 "xmlparse.c"
      pool->freeBlocks = tem;
# 6234 "xmlparse.c"
      mem_16 = pool->blocks;
      __CrestLoad(75439, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
      __CrestLoad(75438, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
      __CrestApply2(75437, 18, (long long )(pool->end - (XML_Char const *)pool->start));
      __CrestLoad(75436, (unsigned long )0, (long long )sizeof(XML_Char ));
      __CrestApply2(75435, 2, (long long )((unsigned long )(pool->end - (XML_Char const *)pool->start) * sizeof(XML_Char )));
# 6234 "xmlparse.c"
      sym_memcpy(mem_16->s, pool->start, (unsigned long )(pool->end - (XML_Char const *)pool->start) * sizeof(XML_Char ));
      __CrestClearStack(75440);
# 6236 "xmlparse.c"
      mem_17 = pool->blocks;
# 6236 "xmlparse.c"
      pool->ptr = mem_17->s + (pool->ptr - pool->start);
# 6237 "xmlparse.c"
      mem_18 = pool->blocks;
# 6237 "xmlparse.c"
      pool->start = mem_18->s;
# 6238 "xmlparse.c"
      mem_19 = pool->blocks;
# 6238 "xmlparse.c"
      pool->end = (XML_Char const *)(pool->start + mem_19->size);
      __CrestLoad(75441, (unsigned long )0, (long long )((XML_Bool )1));
      __CrestStore(75442, (unsigned long )(& __retres30));
# 6239 "xmlparse.c"
      __retres30 = (XML_Bool )1;
# 6239 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(75434, 48061, 0);

    }
    }
    }
  } else {
    __CrestBranch(75420, 48062, 0);

  }
  }
  {
  __CrestLoad(75445, (unsigned long )(& pool->blocks), (long long )((unsigned long )pool->blocks));
  __CrestLoad(75444, (unsigned long )0, (long long )0);
  __CrestApply2(75443, 13, (long long )(pool->blocks != 0));
# 6242 "xmlparse.c"
  if (pool->blocks != 0) {
    __CrestBranch(75446, 48064, 1);
    {
# 6242 "xmlparse.c"
    mem_20 = pool->blocks;
    {
    __CrestLoad(75450, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestLoad(75449, (unsigned long )0, (long long )((unsigned long )(mem_20->s)));
    __CrestApply2(75448, 12, (long long )((unsigned long )pool->start == (unsigned long )(mem_20->s)));
# 6242 "xmlparse.c"
    if ((unsigned long )pool->start == (unsigned long )(mem_20->s)) {
      __CrestBranch(75451, 48067, 1);
      __CrestLoad(75457, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
      __CrestLoad(75456, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
      __CrestApply2(75455, 18, (long long )(pool->end - (XML_Char const *)pool->start));
      __CrestLoad(75454, (unsigned long )0, (long long )2);
      __CrestApply2(75453, 2, (long long )((int )(pool->end - (XML_Char const *)pool->start) * 2));
      __CrestStore(75458, (unsigned long )(& blockSize));
# 6243 "xmlparse.c"
      blockSize = (int )(pool->end - (XML_Char const *)pool->start) * 2;
# 6244 "xmlparse.c"
      mem_21 = pool->mem;
# 6244 "xmlparse.c"
      mem_22 = mem_21->realloc_fcn;
# 6244 "xmlparse.c"
      mem_23 = (BLOCK *)0;
      __CrestLoad(75463, (unsigned long )0, (long long )((unsigned long )(& mem_23->s)));
      __CrestLoad(75462, (unsigned long )(& blockSize), (long long )blockSize);
      __CrestLoad(75461, (unsigned long )0, (long long )sizeof(XML_Char ));
      __CrestApply2(75460, 2, (long long )((unsigned long )blockSize * sizeof(XML_Char )));
      __CrestApply2(75459, 0, (long long )((unsigned long )(& mem_23->s) + (unsigned long )blockSize * sizeof(XML_Char )));
# 6244 "xmlparse.c"
      tmp = (*mem_22)((void *)pool->blocks, (unsigned long )(& mem_23->s) + (unsigned long )blockSize * sizeof(XML_Char ));
      __CrestClearStack(75464);
# 6244 "xmlparse.c"
      temp = (BLOCK *)tmp;
      {
      __CrestLoad(75467, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(75466, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(75465, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 6248 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(75468, 48069, 1);
        __CrestLoad(75470, (unsigned long )0, (long long )((XML_Bool )0));
        __CrestStore(75471, (unsigned long )(& __retres30));
# 6249 "xmlparse.c"
        __retres30 = (XML_Bool )0;
# 6249 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(75469, 48071, 0);

      }
      }
# 6250 "xmlparse.c"
      pool->blocks = temp;
# 6251 "xmlparse.c"
      mem_24 = pool->blocks;
      __CrestLoad(75472, (unsigned long )(& blockSize), (long long )blockSize);
      __CrestStore(75473, (unsigned long )(& mem_24->size));
# 6251 "xmlparse.c"
      mem_24->size = blockSize;
# 6252 "xmlparse.c"
      mem_25 = pool->blocks;
# 6252 "xmlparse.c"
      pool->ptr = mem_25->s + (pool->ptr - pool->start);
# 6253 "xmlparse.c"
      mem_26 = pool->blocks;
# 6253 "xmlparse.c"
      pool->start = mem_26->s;
# 6254 "xmlparse.c"
      pool->end = (XML_Char const *)(pool->start + blockSize);
    } else {
      __CrestBranch(75452, 48073, 0);
# 6242 "xmlparse.c"
      goto _L;
    }
    }
    }
  } else {
    __CrestBranch(75447, 48074, 0);
    _L:
    __CrestLoad(75476, (unsigned long )(& pool->end), (long long )((unsigned long )pool->end));
    __CrestLoad(75475, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestApply2(75474, 18, (long long )(pool->end - (XML_Char const *)pool->start));
    __CrestStore(75477, (unsigned long )(& blockSize___0));
# 6258 "xmlparse.c"
    blockSize___0 = (int )(pool->end - (XML_Char const *)pool->start);
    {
    __CrestLoad(75480, (unsigned long )(& blockSize___0), (long long )blockSize___0);
    __CrestLoad(75479, (unsigned long )0, (long long )1024);
    __CrestApply2(75478, 16, (long long )(blockSize___0 < 1024));
# 6259 "xmlparse.c"
    if (blockSize___0 < 1024) {
      __CrestBranch(75481, 48076, 1);
      __CrestLoad(75483, (unsigned long )0, (long long )1024);
      __CrestStore(75484, (unsigned long )(& blockSize___0));
# 6260 "xmlparse.c"
      blockSize___0 = 1024;
    } else {
      __CrestBranch(75482, 48077, 0);
      __CrestLoad(75487, (unsigned long )(& blockSize___0), (long long )blockSize___0);
      __CrestLoad(75486, (unsigned long )0, (long long )2);
      __CrestApply2(75485, 2, (long long )(blockSize___0 * 2));
      __CrestStore(75488, (unsigned long )(& blockSize___0));
# 6262 "xmlparse.c"
      blockSize___0 *= 2;
    }
    }
# 6263 "xmlparse.c"
    mem_27 = pool->mem;
# 6263 "xmlparse.c"
    mem_28 = mem_27->malloc_fcn;
# 6263 "xmlparse.c"
    mem_29 = (BLOCK *)0;
    __CrestLoad(75493, (unsigned long )0, (long long )((unsigned long )(& mem_29->s)));
    __CrestLoad(75492, (unsigned long )(& blockSize___0), (long long )blockSize___0);
    __CrestLoad(75491, (unsigned long )0, (long long )sizeof(XML_Char ));
    __CrestApply2(75490, 2, (long long )((unsigned long )blockSize___0 * sizeof(XML_Char )));
    __CrestApply2(75489, 0, (long long )((unsigned long )(& mem_29->s) + (unsigned long )blockSize___0 * sizeof(XML_Char )));
# 6263 "xmlparse.c"
    tmp___0 = (*mem_28)((unsigned long )(& mem_29->s) + (unsigned long )blockSize___0 * sizeof(XML_Char ));
    __CrestClearStack(75494);
# 6263 "xmlparse.c"
    tem___0 = (BLOCK *)tmp___0;
    {
    __CrestLoad(75497, (unsigned long )(& tem___0), (long long )((unsigned long )tem___0));
    __CrestLoad(75496, (unsigned long )0, (long long )0);
    __CrestApply2(75495, 12, (long long )(tem___0 == 0));
# 6265 "xmlparse.c"
    if (tem___0 == 0) {
      __CrestBranch(75498, 48080, 1);
      __CrestLoad(75500, (unsigned long )0, (long long )((XML_Bool )0));
      __CrestStore(75501, (unsigned long )(& __retres30));
# 6266 "xmlparse.c"
      __retres30 = (XML_Bool )0;
# 6266 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(75499, 48082, 0);

    }
    }
    __CrestLoad(75502, (unsigned long )(& blockSize___0), (long long )blockSize___0);
    __CrestStore(75503, (unsigned long )(& tem___0->size));
# 6267 "xmlparse.c"
    tem___0->size = blockSize___0;
# 6268 "xmlparse.c"
    tem___0->next = pool->blocks;
# 6269 "xmlparse.c"
    pool->blocks = tem___0;
    {
    __CrestLoad(75506, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
    __CrestLoad(75505, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
    __CrestApply2(75504, 13, (long long )((unsigned long )pool->ptr != (unsigned long )pool->start));
# 6270 "xmlparse.c"
    if ((unsigned long )pool->ptr != (unsigned long )pool->start) {
      __CrestBranch(75507, 48085, 1);
      __CrestLoad(75513, (unsigned long )(& pool->ptr), (long long )((unsigned long )pool->ptr));
      __CrestLoad(75512, (unsigned long )(& pool->start), (long long )((unsigned long )pool->start));
      __CrestApply2(75511, 18, (long long )(pool->ptr - pool->start));
      __CrestLoad(75510, (unsigned long )0, (long long )sizeof(XML_Char ));
      __CrestApply2(75509, 2, (long long )((unsigned long )(pool->ptr - pool->start) * sizeof(XML_Char )));
# 6271 "xmlparse.c"
      sym_memcpy(tem___0->s, pool->start, (unsigned long )(pool->ptr - pool->start) * sizeof(XML_Char ));
      __CrestClearStack(75514);
    } else {
      __CrestBranch(75508, 48086, 0);

    }
    }
# 6273 "xmlparse.c"
    pool->ptr = tem___0->s + (pool->ptr - pool->start);
# 6274 "xmlparse.c"
    pool->start = tem___0->s;
# 6275 "xmlparse.c"
    pool->end = (XML_Char const *)(tem___0->s + blockSize___0);
  }
  }
  __CrestLoad(75515, (unsigned long )0, (long long )((XML_Bool )1));
  __CrestStore(75516, (unsigned long )(& __retres30));
# 6277 "xmlparse.c"
  __retres30 = (XML_Bool )1;
  return_label:
  {
  __CrestLoad(75517, (unsigned long )(& __retres30), (long long )__retres30);
  __CrestReturn(75518);
# 6216 "xmlparse.c"
  return (__retres30);
  }
}
}
# 6280 "xmlparse.c"
static int nextScaffoldPart(XML_Parser parser )
{
  DTD *dtd ;
  CONTENT_SCAFFOLD *me ;
  int next ;
  void *tmp ;
  CONTENT_SCAFFOLD *temp ;
  void *tmp___0 ;
  void *tmp___1 ;
  unsigned int tmp___2 ;
  CONTENT_SCAFFOLD *parent ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *(*mem_14)(size_t size ) ;
  int *mem_15 ;
  void *(*mem_16)(void *ptr , size_t size ) ;
  void *(*mem_17)(size_t size ) ;
  int *mem_18 ;
  CONTENT_SCAFFOLD *mem_19 ;
  int __retres20 ;

  {
  __CrestCall(75519, 821);
# 6283 "xmlparse.c"
  dtd = parser->m_dtd;
  {
  __CrestLoad(75522, (unsigned long )(& dtd->scaffIndex), (long long )((unsigned long )dtd->scaffIndex));
  __CrestLoad(75521, (unsigned long )0, (long long )0);
  __CrestApply2(75520, 12, (long long )(dtd->scaffIndex == 0));
# 6287 "xmlparse.c"
  if (dtd->scaffIndex == 0) {
    __CrestBranch(75523, 48092, 1);
# 6288 "xmlparse.c"
    mem_14 = parser->m_mem.malloc_fcn;
    __CrestLoad(75527, (unsigned long )(& parser->m_groupSize), (long long )parser->m_groupSize);
    __CrestLoad(75526, (unsigned long )0, (long long )sizeof(int ));
    __CrestApply2(75525, 2, (long long )((unsigned long )parser->m_groupSize * sizeof(int )));
# 6288 "xmlparse.c"
    tmp = (*mem_14)((unsigned long )parser->m_groupSize * sizeof(int ));
    __CrestClearStack(75528);
# 6288 "xmlparse.c"
    dtd->scaffIndex = (int *)tmp;
    {
    __CrestLoad(75531, (unsigned long )(& dtd->scaffIndex), (long long )((unsigned long )dtd->scaffIndex));
    __CrestLoad(75530, (unsigned long )0, (long long )0);
    __CrestApply2(75529, 12, (long long )(dtd->scaffIndex == 0));
# 6289 "xmlparse.c"
    if (dtd->scaffIndex == 0) {
      __CrestBranch(75532, 48094, 1);
      __CrestLoad(75534, (unsigned long )0, (long long )-1);
      __CrestStore(75535, (unsigned long )(& __retres20));
# 6290 "xmlparse.c"
      __retres20 = -1;
# 6290 "xmlparse.c"
      goto return_label;
    } else {
      __CrestBranch(75533, 48096, 0);

    }
    }
# 6291 "xmlparse.c"
    mem_15 = dtd->scaffIndex + 0;
    __CrestLoad(75536, (unsigned long )0, (long long )0);
    __CrestStore(75537, (unsigned long )mem_15);
# 6291 "xmlparse.c"
    *mem_15 = 0;
  } else {
    __CrestBranch(75524, 48098, 0);

  }
  }
  {
  __CrestLoad(75540, (unsigned long )(& dtd->scaffCount), (long long )dtd->scaffCount);
  __CrestLoad(75539, (unsigned long )(& dtd->scaffSize), (long long )dtd->scaffSize);
  __CrestApply2(75538, 17, (long long )(dtd->scaffCount >= dtd->scaffSize));
# 6294 "xmlparse.c"
  if (dtd->scaffCount >= dtd->scaffSize) {
    __CrestBranch(75541, 48100, 1);
    {
    __CrestLoad(75545, (unsigned long )(& dtd->scaffold), (long long )((unsigned long )dtd->scaffold));
    __CrestLoad(75544, (unsigned long )0, (long long )0);
    __CrestApply2(75543, 13, (long long )(dtd->scaffold != 0));
# 6296 "xmlparse.c"
    if (dtd->scaffold != 0) {
      __CrestBranch(75546, 48101, 1);
# 6297 "xmlparse.c"
      mem_16 = parser->m_mem.realloc_fcn;
      __CrestLoad(75552, (unsigned long )(& dtd->scaffSize), (long long )dtd->scaffSize);
      __CrestLoad(75551, (unsigned long )0, (long long )2U);
      __CrestApply2(75550, 2, (long long )(dtd->scaffSize * 2U));
      __CrestLoad(75549, (unsigned long )0, (long long )sizeof(CONTENT_SCAFFOLD ));
      __CrestApply2(75548, 2, (long long )((unsigned long )(dtd->scaffSize * 2U) * sizeof(CONTENT_SCAFFOLD )));
# 6297 "xmlparse.c"
      tmp___0 = (*mem_16)((void *)dtd->scaffold, (unsigned long )(dtd->scaffSize * 2U) * sizeof(CONTENT_SCAFFOLD ));
      __CrestClearStack(75553);
# 6297 "xmlparse.c"
      temp = (CONTENT_SCAFFOLD *)tmp___0;
      {
      __CrestLoad(75556, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(75555, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(75554, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 6299 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(75557, 48103, 1);
        __CrestLoad(75559, (unsigned long )0, (long long )-1);
        __CrestStore(75560, (unsigned long )(& __retres20));
# 6300 "xmlparse.c"
        __retres20 = -1;
# 6300 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(75558, 48105, 0);

      }
      }
      __CrestLoad(75563, (unsigned long )(& dtd->scaffSize), (long long )dtd->scaffSize);
      __CrestLoad(75562, (unsigned long )0, (long long )2U);
      __CrestApply2(75561, 2, (long long )(dtd->scaffSize * 2U));
      __CrestStore(75564, (unsigned long )(& dtd->scaffSize));
# 6301 "xmlparse.c"
      dtd->scaffSize *= 2U;
    } else {
      __CrestBranch(75547, 48107, 0);
# 6304 "xmlparse.c"
      mem_17 = parser->m_mem.malloc_fcn;
      __CrestLoad(75565, (unsigned long )0, (long long )(32UL * sizeof(CONTENT_SCAFFOLD )));
# 6304 "xmlparse.c"
      tmp___1 = (*mem_17)(32UL * sizeof(CONTENT_SCAFFOLD ));
      __CrestClearStack(75566);
# 6304 "xmlparse.c"
      temp = (CONTENT_SCAFFOLD *)tmp___1;
      {
      __CrestLoad(75569, (unsigned long )(& temp), (long long )((unsigned long )temp));
      __CrestLoad(75568, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(75567, 12, (long long )((unsigned long )temp == (unsigned long )((void *)0)));
# 6306 "xmlparse.c"
      if ((unsigned long )temp == (unsigned long )((void *)0)) {
        __CrestBranch(75570, 48109, 1);
        __CrestLoad(75572, (unsigned long )0, (long long )-1);
        __CrestStore(75573, (unsigned long )(& __retres20));
# 6307 "xmlparse.c"
        __retres20 = -1;
# 6307 "xmlparse.c"
        goto return_label;
      } else {
        __CrestBranch(75571, 48111, 0);

      }
      }
      __CrestLoad(75574, (unsigned long )0, (long long )32U);
      __CrestStore(75575, (unsigned long )(& dtd->scaffSize));
# 6308 "xmlparse.c"
      dtd->scaffSize = 32U;
    }
    }
# 6310 "xmlparse.c"
    dtd->scaffold = temp;
  } else {
    __CrestBranch(75542, 48114, 0);

  }
  }
  __CrestLoad(75576, (unsigned long )(& dtd->scaffCount), (long long )dtd->scaffCount);
  __CrestStore(75577, (unsigned long )(& tmp___2));
# 6312 "xmlparse.c"
  tmp___2 = dtd->scaffCount;
  __CrestLoad(75580, (unsigned long )(& dtd->scaffCount), (long long )dtd->scaffCount);
  __CrestLoad(75579, (unsigned long )0, (long long )1U);
  __CrestApply2(75578, 0, (long long )(dtd->scaffCount + 1U));
  __CrestStore(75581, (unsigned long )(& dtd->scaffCount));
# 6312 "xmlparse.c"
  (dtd->scaffCount) ++;
  __CrestLoad(75582, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(75583, (unsigned long )(& next));
# 6312 "xmlparse.c"
  next = (int )tmp___2;
# 6313 "xmlparse.c"
  me = dtd->scaffold + next;
  {
  __CrestLoad(75586, (unsigned long )(& dtd->scaffLevel), (long long )dtd->scaffLevel);
  __CrestLoad(75585, (unsigned long )0, (long long )0);
  __CrestApply2(75584, 13, (long long )(dtd->scaffLevel != 0));
# 6314 "xmlparse.c"
  if (dtd->scaffLevel != 0) {
    __CrestBranch(75587, 48117, 1);
# 6315 "xmlparse.c"
    mem_18 = dtd->scaffIndex + (dtd->scaffLevel - 1);
# 6315 "xmlparse.c"
    parent = dtd->scaffold + *mem_18;
    {
    __CrestLoad(75591, (unsigned long )(& parent->lastchild), (long long )parent->lastchild);
    __CrestLoad(75590, (unsigned long )0, (long long )0);
    __CrestApply2(75589, 13, (long long )(parent->lastchild != 0));
# 6316 "xmlparse.c"
    if (parent->lastchild != 0) {
      __CrestBranch(75592, 48119, 1);
# 6317 "xmlparse.c"
      mem_19 = dtd->scaffold + parent->lastchild;
      __CrestLoad(75594, (unsigned long )(& next), (long long )next);
      __CrestStore(75595, (unsigned long )(& mem_19->nextsib));
# 6317 "xmlparse.c"
      mem_19->nextsib = next;
    } else {
      __CrestBranch(75593, 48120, 0);

    }
    }
    {
    __CrestLoad(75598, (unsigned long )(& parent->childcnt), (long long )parent->childcnt);
    __CrestLoad(75597, (unsigned long )0, (long long )0);
    __CrestApply2(75596, 12, (long long )(parent->childcnt == 0));
# 6319 "xmlparse.c"
    if (parent->childcnt == 0) {
      __CrestBranch(75599, 48122, 1);
      __CrestLoad(75601, (unsigned long )(& next), (long long )next);
      __CrestStore(75602, (unsigned long )(& parent->firstchild));
# 6320 "xmlparse.c"
      parent->firstchild = next;
    } else {
      __CrestBranch(75600, 48123, 0);

    }
    }
    __CrestLoad(75603, (unsigned long )(& next), (long long )next);
    __CrestStore(75604, (unsigned long )(& parent->lastchild));
# 6321 "xmlparse.c"
    parent->lastchild = next;
    __CrestLoad(75607, (unsigned long )(& parent->childcnt), (long long )parent->childcnt);
    __CrestLoad(75606, (unsigned long )0, (long long )1);
    __CrestApply2(75605, 0, (long long )(parent->childcnt + 1));
    __CrestStore(75608, (unsigned long )(& parent->childcnt));
# 6322 "xmlparse.c"
    (parent->childcnt) ++;
  } else {
    __CrestBranch(75588, 48125, 0);

  }
  }
  __CrestLoad(75609, (unsigned long )0, (long long )0);
  __CrestStore(75610, (unsigned long )(& tmp___5));
# 6324 "xmlparse.c"
  tmp___5 = 0;
  __CrestLoad(75611, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(75612, (unsigned long )(& me->nextsib));
# 6324 "xmlparse.c"
  me->nextsib = tmp___5;
  __CrestLoad(75613, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(75614, (unsigned long )(& tmp___4));
# 6324 "xmlparse.c"
  tmp___4 = tmp___5;
  __CrestLoad(75615, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(75616, (unsigned long )(& me->childcnt));
# 6324 "xmlparse.c"
  me->childcnt = tmp___4;
  __CrestLoad(75617, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(75618, (unsigned long )(& tmp___3));
# 6324 "xmlparse.c"
  tmp___3 = tmp___4;
  __CrestLoad(75619, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(75620, (unsigned long )(& me->lastchild));
# 6324 "xmlparse.c"
  me->lastchild = tmp___3;
  __CrestLoad(75621, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(75622, (unsigned long )(& me->firstchild));
# 6324 "xmlparse.c"
  me->firstchild = tmp___3;
  __CrestLoad(75623, (unsigned long )(& next), (long long )next);
  __CrestStore(75624, (unsigned long )(& __retres20));
# 6325 "xmlparse.c"
  __retres20 = next;
  return_label:
  {
  __CrestLoad(75625, (unsigned long )(& __retres20), (long long )__retres20);
  __CrestReturn(75626);
# 6280 "xmlparse.c"
  return (__retres20);
  }
}
}
# 6328 "xmlparse.c"
static void build_node(XML_Parser parser , int src_node , XML_Content *dest , XML_Content **contpos ,
                       XML_Char **strpos )
{
  DTD *dtd ;
  XML_Char const *src ;
  XML_Char *tmp ;
  unsigned int i ;
  int cn ;
  CONTENT_SCAFFOLD *mem_11 ;
  CONTENT_SCAFFOLD *mem_12 ;
  CONTENT_SCAFFOLD *mem_13 ;
  CONTENT_SCAFFOLD *mem_14 ;
  CONTENT_SCAFFOLD *mem_15 ;
  CONTENT_SCAFFOLD *mem_16 ;

  {
  __CrestCall(75628, 822);
  __CrestStore(75627, (unsigned long )(& src_node));
# 6335 "xmlparse.c"
  dtd = parser->m_dtd;
# 6336 "xmlparse.c"
  mem_11 = dtd->scaffold + src_node;
  __CrestLoad(75629, (unsigned long )(& mem_11->type), (long long )mem_11->type);
  __CrestStore(75630, (unsigned long )(& dest->type));
# 6336 "xmlparse.c"
  dest->type = mem_11->type;
# 6337 "xmlparse.c"
  mem_12 = dtd->scaffold + src_node;
  __CrestLoad(75631, (unsigned long )(& mem_12->quant), (long long )mem_12->quant);
  __CrestStore(75632, (unsigned long )(& dest->quant));
# 6337 "xmlparse.c"
  dest->quant = mem_12->quant;
  {
  __CrestLoad(75635, (unsigned long )(& dest->type), (long long )dest->type);
  __CrestLoad(75634, (unsigned long )0, (long long )4U);
  __CrestApply2(75633, 12, (long long )((unsigned int )dest->type == 4U));
# 6338 "xmlparse.c"
  if ((unsigned int )dest->type == 4U) {
    __CrestBranch(75636, 48131, 1);
# 6340 "xmlparse.c"
    dest->name = *strpos;
# 6341 "xmlparse.c"
    mem_13 = dtd->scaffold + src_node;
# 6341 "xmlparse.c"
    src = mem_13->name;
    {
# 6342 "xmlparse.c"
    while (1) {
      while_continue: ;
# 6343 "xmlparse.c"
      tmp = *strpos;
# 6343 "xmlparse.c"
      (*strpos) ++;
      __CrestLoad(75638, (unsigned long )src, (long long )*src);
      __CrestStore(75639, (unsigned long )tmp);
# 6343 "xmlparse.c"
      *tmp = (XML_Char )*src;
      {
      __CrestLoad(75642, (unsigned long )src, (long long )*src);
      __CrestLoad(75641, (unsigned long )0, (long long )0);
      __CrestApply2(75640, 12, (long long )(*src == 0));
# 6344 "xmlparse.c"
      if (*src == 0) {
        __CrestBranch(75643, 48137, 1);
# 6345 "xmlparse.c"
        goto while_break;
      } else {
        __CrestBranch(75644, 48138, 0);

      }
      }
# 6346 "xmlparse.c"
      src ++;
    }
    while_break: ;
    }
    __CrestLoad(75645, (unsigned long )0, (long long )0U);
    __CrestStore(75646, (unsigned long )(& dest->numchildren));
# 6348 "xmlparse.c"
    dest->numchildren = 0U;
# 6349 "xmlparse.c"
    dest->children = (XML_Content *)((void *)0);
  } else {
    __CrestBranch(75637, 48142, 0);
# 6354 "xmlparse.c"
    mem_14 = dtd->scaffold + src_node;
    __CrestLoad(75647, (unsigned long )(& mem_14->childcnt), (long long )mem_14->childcnt);
    __CrestStore(75648, (unsigned long )(& dest->numchildren));
# 6354 "xmlparse.c"
    dest->numchildren = (unsigned int )mem_14->childcnt;
# 6355 "xmlparse.c"
    dest->children = *contpos;
# 6356 "xmlparse.c"
    *contpos += dest->numchildren;
    __CrestLoad(75649, (unsigned long )0, (long long )0U);
    __CrestStore(75650, (unsigned long )(& i));
# 6357 "xmlparse.c"
    i = 0U;
# 6357 "xmlparse.c"
    mem_15 = dtd->scaffold + src_node;
    __CrestLoad(75651, (unsigned long )(& mem_15->firstchild), (long long )mem_15->firstchild);
    __CrestStore(75652, (unsigned long )(& cn));
# 6357 "xmlparse.c"
    cn = mem_15->firstchild;
    {
# 6357 "xmlparse.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(75655, (unsigned long )(& i), (long long )i);
      __CrestLoad(75654, (unsigned long )(& dest->numchildren), (long long )dest->numchildren);
      __CrestApply2(75653, 16, (long long )(i < dest->numchildren));
# 6357 "xmlparse.c"
      if (i < dest->numchildren) {
        __CrestBranch(75656, 48147, 1);

      } else {
        __CrestBranch(75657, 48148, 0);
# 6357 "xmlparse.c"
        goto while_break___0;
      }
      }
      __CrestLoad(75658, (unsigned long )(& cn), (long long )cn);
# 6360 "xmlparse.c"
      build_node(parser, cn, dest->children + i, contpos, strpos);
      __CrestClearStack(75659);
      __CrestLoad(75662, (unsigned long )(& i), (long long )i);
      __CrestLoad(75661, (unsigned long )0, (long long )1U);
      __CrestApply2(75660, 0, (long long )(i + 1U));
      __CrestStore(75663, (unsigned long )(& i));
# 6357 "xmlparse.c"
      i ++;
# 6357 "xmlparse.c"
      mem_16 = dtd->scaffold + cn;
      __CrestLoad(75664, (unsigned long )(& mem_16->nextsib), (long long )mem_16->nextsib);
      __CrestStore(75665, (unsigned long )(& cn));
# 6357 "xmlparse.c"
      cn = mem_16->nextsib;
    }
    while_break___0: ;
    }
# 6362 "xmlparse.c"
    dest->name = (XML_Char *)((void *)0);
  }
  }

  {
  __CrestReturn(75666);
# 6328 "xmlparse.c"
  return;
  }
}
}
# 6366 "xmlparse.c"
static XML_Content *build_model(XML_Parser parser )
{
  DTD *dtd ;
  XML_Content *ret ;
  XML_Content *cpos ;
  XML_Char *str ;
  int allocsize ;
  void *tmp ;
  void *(*mem_8)(size_t size ) ;
  XML_Content *__retres9 ;

  {
  __CrestCall(75667, 823);
# 6369 "xmlparse.c"
  dtd = parser->m_dtd;
  __CrestLoad(75674, (unsigned long )(& dtd->scaffCount), (long long )dtd->scaffCount);
  __CrestLoad(75673, (unsigned long )0, (long long )sizeof(XML_Content ));
  __CrestApply2(75672, 2, (long long )((unsigned long )dtd->scaffCount * sizeof(XML_Content )));
  __CrestLoad(75671, (unsigned long )(& dtd->contentStringLen), (long long )dtd->contentStringLen);
  __CrestLoad(75670, (unsigned long )0, (long long )sizeof(XML_Char ));
  __CrestApply2(75669, 2, (long long )((unsigned long )dtd->contentStringLen * sizeof(XML_Char )));
  __CrestApply2(75668, 0, (long long )((unsigned long )dtd->scaffCount * sizeof(XML_Content ) + (unsigned long )dtd->contentStringLen * sizeof(XML_Char )));
  __CrestStore(75675, (unsigned long )(& allocsize));
# 6373 "xmlparse.c"
  allocsize = (int )((unsigned long )dtd->scaffCount * sizeof(XML_Content ) + (unsigned long )dtd->contentStringLen * sizeof(XML_Char ));
# 6376 "xmlparse.c"
  mem_8 = parser->m_mem.malloc_fcn;
  __CrestLoad(75676, (unsigned long )(& allocsize), (long long )allocsize);
# 6376 "xmlparse.c"
  tmp = (*mem_8)((size_t )allocsize);
  __CrestClearStack(75677);
# 6376 "xmlparse.c"
  ret = (XML_Content *)tmp;
  {
  __CrestLoad(75680, (unsigned long )(& ret), (long long )((unsigned long )ret));
  __CrestLoad(75679, (unsigned long )0, (long long )0);
  __CrestApply2(75678, 12, (long long )(ret == 0));
# 6377 "xmlparse.c"
  if (ret == 0) {
    __CrestBranch(75681, 48156, 1);
# 6378 "xmlparse.c"
    __retres9 = (XML_Content *)((void *)0);
# 6378 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(75682, 48158, 0);

  }
  }
# 6380 "xmlparse.c"
  str = (XML_Char *)(ret + dtd->scaffCount);
# 6381 "xmlparse.c"
  cpos = ret + 1;
  __CrestLoad(75683, (unsigned long )0, (long long )0);
# 6383 "xmlparse.c"
  build_node(parser, 0, ret, & cpos, & str);
  __CrestClearStack(75684);
# 6384 "xmlparse.c"
  __retres9 = ret;
  return_label:
  {
  __CrestReturn(75685);
# 6366 "xmlparse.c"
  return (__retres9);
  }
}
}
# 6387 "xmlparse.c"
static ELEMENT_TYPE *getElementType(XML_Parser parser , ENCODING const *enc , char const *ptr ,
                                    char const *end )
{
  DTD *dtd ;
  XML_Char const *name ;
  XML_Char *tmp ;
  ELEMENT_TYPE *ret ;
  NAMED *tmp___0 ;
  int tmp___1 ;
  ELEMENT_TYPE *__retres11 ;

  {
  __CrestCall(75686, 824);
# 6393 "xmlparse.c"
  dtd = parser->m_dtd;
# 6394 "xmlparse.c"
  tmp = poolStoreString(& dtd->pool, enc, ptr, end);
  __CrestClearStack(75687);
# 6394 "xmlparse.c"
  name = (XML_Char const *)tmp;
  {
  __CrestLoad(75690, (unsigned long )(& name), (long long )((unsigned long )name));
  __CrestLoad(75689, (unsigned long )0, (long long )0);
  __CrestApply2(75688, 12, (long long )(name == 0));
# 6397 "xmlparse.c"
  if (name == 0) {
    __CrestBranch(75691, 48164, 1);
# 6398 "xmlparse.c"
    __retres11 = (ELEMENT_TYPE *)((void *)0);
# 6398 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(75692, 48166, 0);

  }
  }
  __CrestLoad(75693, (unsigned long )0, (long long )sizeof(ELEMENT_TYPE ));
# 6399 "xmlparse.c"
  tmp___0 = lookup(parser, & dtd->elementTypes, name, sizeof(ELEMENT_TYPE ));
  __CrestClearStack(75694);
# 6399 "xmlparse.c"
  ret = (ELEMENT_TYPE *)tmp___0;
  {
  __CrestLoad(75697, (unsigned long )(& ret), (long long )((unsigned long )ret));
  __CrestLoad(75696, (unsigned long )0, (long long )0);
  __CrestApply2(75695, 12, (long long )(ret == 0));
# 6400 "xmlparse.c"
  if (ret == 0) {
    __CrestBranch(75698, 48169, 1);
# 6401 "xmlparse.c"
    __retres11 = (ELEMENT_TYPE *)((void *)0);
# 6401 "xmlparse.c"
    goto return_label;
  } else {
    __CrestBranch(75699, 48171, 0);

  }
  }
  {
  __CrestLoad(75702, (unsigned long )(& ret->name), (long long )((unsigned long )ret->name));
  __CrestLoad(75701, (unsigned long )(& name), (long long )((unsigned long )name));
  __CrestApply2(75700, 13, (long long )((unsigned long )ret->name != (unsigned long )name));
# 6402 "xmlparse.c"
  if ((unsigned long )ret->name != (unsigned long )name) {
    __CrestBranch(75703, 48173, 1);
# 6403 "xmlparse.c"
    dtd->pool.ptr = dtd->pool.start;
  } else {
    __CrestBranch(75704, 48174, 0);
# 6405 "xmlparse.c"
    dtd->pool.start = dtd->pool.ptr;
# 6406 "xmlparse.c"
    tmp___1 = setElementTypePrefix(parser, ret);
    __CrestHandleReturn(75706, (long long )tmp___1);
    __CrestStore(75705, (unsigned long )(& tmp___1));
    {
    __CrestLoad(75709, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(75708, (unsigned long )0, (long long )0);
    __CrestApply2(75707, 13, (long long )(tmp___1 != 0));
# 6406 "xmlparse.c"
    if (tmp___1 != 0) {
      __CrestBranch(75710, 48176, 1);

    } else {
      __CrestBranch(75711, 48177, 0);
# 6407 "xmlparse.c"
      __retres11 = (ELEMENT_TYPE *)((void *)0);
# 6407 "xmlparse.c"
      goto return_label;
    }
    }
  }
  }
# 6409 "xmlparse.c"
  __retres11 = ret;
  return_label:
  {
  __CrestReturn(75712);
# 6387 "xmlparse.c"
  return (__retres11);
  }
}
}
# 1 "xmltok.o"
#pragma merger("0","./xmltok.i","-std=gnu99,-g,-O0,-Wall,-Wmissing-prototypes,-Wstrict-prototypes,-fexceptions")
# 279 "xmltok.h"
ENCODING const *XmlGetUtf16InternalEncoding(void) ;
# 281 "xmltok.h"
int XmlUtf16Encode(int charNum , unsigned short *buf ) ;
# 306 "xmltok.h"
ENCODING const *XmlGetUtf16InternalEncodingNS(void) ;
# 1 "nametab.h"
static unsigned int const namingBitmap[320] =
# 1 "nametab.h"
  { (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U,
        (unsigned int const )0, (unsigned int const )67108864, (unsigned int const )2281701374U, (unsigned int const )134217726,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )4286578687U, (unsigned int const )4286578687U,
        (unsigned int const )4294967295U, (unsigned int const )2146697215, (unsigned int const )4294966782U, (unsigned int const )2147483647,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294959119U, (unsigned int const )4231135231U,
        (unsigned int const )16777215, (unsigned int const )0, (unsigned int const )4294901760U, (unsigned int const )4294967295U,
        (unsigned int const )4294967295U, (unsigned int const )4160750079U, (unsigned int const )3, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294956864U, (unsigned int const )4294967291U, (unsigned int const )1417641983, (unsigned int const )1048573,
        (unsigned int const )4294959102U, (unsigned int const )4294967295U, (unsigned int const )3758030847U, (unsigned int const )4294967295U,
        (unsigned int const )4294901763U, (unsigned int const )4294967295U, (unsigned int const )4294908319U, (unsigned int const )54513663,
        (unsigned int const )0, (unsigned int const )4294836224U, (unsigned int const )41943039, (unsigned int const )4294967294U,
        (unsigned int const )127, (unsigned int const )0, (unsigned int const )4294901760U, (unsigned int const )460799,
        (unsigned int const )0, (unsigned int const )134217726, (unsigned int const )2046, (unsigned int const )4294836224U,
        (unsigned int const )4294967295U, (unsigned int const )2097151999, (unsigned int const )3112959, (unsigned int const )96,
        (unsigned int const )4294967264U, (unsigned int const )603979775, (unsigned int const )4278190080U, (unsigned int const )3,
        (unsigned int const )4294549472U, (unsigned int const )63307263, (unsigned int const )2952790016U, (unsigned int const )196611,
        (unsigned int const )4294543328U, (unsigned int const )57540095, (unsigned int const )1577058304, (unsigned int const )1835008,
        (unsigned int const )4294684640U, (unsigned int const )602799615, (unsigned int const )0, (unsigned int const )1,
        (unsigned int const )4294549472U, (unsigned int const )600702463, (unsigned int const )2952790016U, (unsigned int const )3,
        (unsigned int const )3594373088U, (unsigned int const )62899992, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294828000U, (unsigned int const )66059775, (unsigned int const )0, (unsigned int const )3,
        (unsigned int const )4294828000U, (unsigned int const )66059775, (unsigned int const )1073741824, (unsigned int const )3,
        (unsigned int const )4294828000U, (unsigned int const )67108351, (unsigned int const )0, (unsigned int const )3,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294967294U, (unsigned int const )884735, (unsigned int const )63, (unsigned int const )0,
        (unsigned int const )4277151126U, (unsigned int const )537750702, (unsigned int const )31, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )4294967039U, (unsigned int const )1023,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )4294967295U, (unsigned int const )4294901823U, (unsigned int const )8388607,
        (unsigned int const )514797, (unsigned int const )1342177280, (unsigned int const )2184269825U, (unsigned int const )2908843,
        (unsigned int const )1073741824, (unsigned int const )4118857984U, (unsigned int const )7, (unsigned int const )33622016,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U,
        (unsigned int const )268435455, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )67108863,
        (unsigned int const )1061158911, (unsigned int const )4294967295U, (unsigned int const )2868854591U, (unsigned int const )1073741823,
        (unsigned int const )4294967295U, (unsigned int const )1608515583, (unsigned int const )265232348, (unsigned int const )534519807,
        (unsigned int const )0, (unsigned int const )19520, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )7, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )128, (unsigned int const )1022, (unsigned int const )4294967294U, (unsigned int const )4294967295U,
        (unsigned int const )2097151, (unsigned int const )4294967294U, (unsigned int const )4294967295U, (unsigned int const )134217727,
        (unsigned int const )4294967264U, (unsigned int const )8191, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U,
        (unsigned int const )4294967295U, (unsigned int const )63, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )4294967295U,
        (unsigned int const )4294967295U, (unsigned int const )15, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )134176768, (unsigned int const )2281701374U, (unsigned int const )134217726,
        (unsigned int const )0, (unsigned int const )8388608, (unsigned int const )4286578687U, (unsigned int const )4286578687U,
        (unsigned int const )16777215, (unsigned int const )0, (unsigned int const )4294901760U, (unsigned int const )4294967295U,
        (unsigned int const )4294967295U, (unsigned int const )4160750079U, (unsigned int const )196611, (unsigned int const )0,
        (unsigned int const )4294967295U, (unsigned int const )4294967295U, (unsigned int const )63, (unsigned int const )3,
        (unsigned int const )4294956992U, (unsigned int const )4294967291U, (unsigned int const )1417641983, (unsigned int const )1048573,
        (unsigned int const )4294959102U, (unsigned int const )4294967295U, (unsigned int const )3758030847U, (unsigned int const )4294967295U,
        (unsigned int const )4294901883U, (unsigned int const )4294967295U, (unsigned int const )4294908319U, (unsigned int const )54513663,
        (unsigned int const )0, (unsigned int const )4294836224U, (unsigned int const )41943039, (unsigned int const )4294967294U,
        (unsigned int const )4294836351U, (unsigned int const )3154116603U, (unsigned int const )4294901782U, (unsigned int const )460799,
        (unsigned int const )0, (unsigned int const )134217726, (unsigned int const )524287, (unsigned int const )4294902783U,
        (unsigned int const )4294967295U, (unsigned int const )2097151999, (unsigned int const )4293885951U, (unsigned int const )67059199,
        (unsigned int const )4294967278U, (unsigned int const )4093640703U, (unsigned int const )4280172543U, (unsigned int const )65487,
        (unsigned int const )4294549486U, (unsigned int const )3552968191U, (unsigned int const )2961193375U, (unsigned int const )262095,
        (unsigned int const )4294543332U, (unsigned int const )3547201023U, (unsigned int const )1577073031, (unsigned int const )2097088,
        (unsigned int const )4294684654U, (unsigned int const )4092460543U, (unsigned int const )15295, (unsigned int const )65473,
        (unsigned int const )4294549486U, (unsigned int const )4090363391U, (unsigned int const )2965387663U, (unsigned int const )65475,
        (unsigned int const )3594373100U, (unsigned int const )3284125464U, (unsigned int const )8404423, (unsigned int const )65408,
        (unsigned int const )4294828014U, (unsigned int const )3287285247U, (unsigned int const )6307295, (unsigned int const )65475,
        (unsigned int const )4294828012U, (unsigned int const )3287285247U, (unsigned int const )1080049119, (unsigned int const )65475,
        (unsigned int const )4294828012U, (unsigned int const )3288333823U, (unsigned int const )8404431, (unsigned int const )65475,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )4294967294U, (unsigned int const )134184959, (unsigned int const )67076095, (unsigned int const )0,
        (unsigned int const )4277151126U, (unsigned int const )1006595246, (unsigned int const )67059551, (unsigned int const )0,
        (unsigned int const )50331648, (unsigned int const )3265266687U, (unsigned int const )4294967039U, (unsigned int const )4294837247U,
        (unsigned int const )4273934303U, (unsigned int const )50216959, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )0, (unsigned int const )0,
        (unsigned int const )0, (unsigned int const )0, (unsigned int const )536805376, (unsigned int const )2,
        (unsigned int const )160, (unsigned int const )4128766, (unsigned int const )4294967294U, (unsigned int const )4294967295U,
        (unsigned int const )1713373183, (unsigned int const )4294967294U, (unsigned int const )4294967295U, (unsigned int const )2013265919};
# 83 "nametab.h"
static unsigned char const nmstrtPages[256] =
# 83 "nametab.h"
  { (unsigned char const )2, (unsigned char const )3, (unsigned char const )4, (unsigned char const )5,
        (unsigned char const )6, (unsigned char const )7, (unsigned char const )8, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )9, (unsigned char const )10, (unsigned char const )11,
        (unsigned char const )12, (unsigned char const )13, (unsigned char const )14, (unsigned char const )15,
        (unsigned char const )16, (unsigned char const )17, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )18, (unsigned char const )19,
        (unsigned char const )0, (unsigned char const )20, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )21, (unsigned char const )22, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )23,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )24,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0};
# 117 "nametab.h"
static unsigned char const namePages[256] =
# 117 "nametab.h"
  { (unsigned char const )25, (unsigned char const )3, (unsigned char const )26, (unsigned char const )27,
        (unsigned char const )28, (unsigned char const )29, (unsigned char const )30, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )31, (unsigned char const )32, (unsigned char const )33,
        (unsigned char const )34, (unsigned char const )35, (unsigned char const )36, (unsigned char const )37,
        (unsigned char const )16, (unsigned char const )17, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )18, (unsigned char const )19,
        (unsigned char const )38, (unsigned char const )20, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )39, (unsigned char const )22, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )23,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )1,
        (unsigned char const )1, (unsigned char const )1, (unsigned char const )1, (unsigned char const )24,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0,
        (unsigned char const )0, (unsigned char const )0, (unsigned char const )0, (unsigned char const )0};
# 124 "xmltok.c"
static int isNever(ENCODING const *enc , char const *p )
{
  int __retres3 ;

  {
  __CrestCall(75713, 825);

  __CrestLoad(75714, (unsigned long )0, (long long )0);
  __CrestStore(75715, (unsigned long )(& __retres3));
# 127 "xmltok.c"
  __retres3 = 0;
  {
  __CrestLoad(75716, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(75717);
# 124 "xmltok.c"
  return (__retres3);
  }
}
}
# 130 "xmltok.c"
static int utf8_isName2(ENCODING const *enc , char const *p )
{
  unsigned char const *mem_3 ;
  unsigned char const *mem_4 ;
  unsigned char const *mem_5 ;
  unsigned char const *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(75718, 826);

  {
# 133 "xmltok.c"
  mem_3 = (unsigned char const *)p + 0;
# 133 "xmltok.c"
  mem_4 = (unsigned char const *)p + 0;
# 133 "xmltok.c"
  mem_5 = (unsigned char const *)p + 1;
# 133 "xmltok.c"
  mem_6 = (unsigned char const *)p + 1;
  __CrestLoad(75725, (unsigned long )(& namingBitmap[(((int const )namePages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)]),
              (long long )namingBitmap[(((int const )namePages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)]);
  __CrestLoad(75724, (unsigned long )0, (long long )1);
  __CrestLoad(75723, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(75722, (unsigned long )0, (long long )31);
  __CrestApply2(75721, 5, (long long )((int const )*mem_6 & 31));
  __CrestApply2(75720, 8, (long long )(1 << ((int const )*mem_6 & 31)));
  __CrestApply2(75719, 5, (long long )(namingBitmap[(((int const )namePages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_6 & 31))));
  __CrestStore(75726, (unsigned long )(& __retres7));
# 133 "xmltok.c"
  __retres7 = (int )(namingBitmap[(((int const )namePages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_6 & 31)));
# 133 "xmltok.c"
  goto return_label;
  }
  return_label:
  {
  __CrestLoad(75727, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(75728);
# 130 "xmltok.c"
  return (__retres7);
  }
}
}
# 136 "xmltok.c"
static int utf8_isName3(ENCODING const *enc , char const *p )
{
  unsigned char const *mem_3 ;
  unsigned char const *mem_4 ;
  unsigned char const *mem_5 ;
  unsigned char const *mem_6 ;
  unsigned char const *mem_7 ;
  int __retres8 ;

  {
  __CrestCall(75729, 827);

  {
# 139 "xmltok.c"
  mem_3 = (unsigned char const *)p + 0;
# 139 "xmltok.c"
  mem_4 = (unsigned char const *)p + 1;
# 139 "xmltok.c"
  mem_5 = (unsigned char const *)p + 1;
# 139 "xmltok.c"
  mem_6 = (unsigned char const *)p + 2;
# 139 "xmltok.c"
  mem_7 = (unsigned char const *)p + 2;
  __CrestLoad(75736, (unsigned long )(& namingBitmap[(((int const )namePages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)]),
              (long long )namingBitmap[(((int const )namePages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)]);
  __CrestLoad(75735, (unsigned long )0, (long long )1);
  __CrestLoad(75734, (unsigned long )mem_7, (long long )*mem_7);
  __CrestLoad(75733, (unsigned long )0, (long long )31);
  __CrestApply2(75732, 5, (long long )((int const )*mem_7 & 31));
  __CrestApply2(75731, 8, (long long )(1 << ((int const )*mem_7 & 31)));
  __CrestApply2(75730, 5, (long long )(namingBitmap[(((int const )namePages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_7 & 31))));
  __CrestStore(75737, (unsigned long )(& __retres8));
# 139 "xmltok.c"
  __retres8 = (int )(namingBitmap[(((int const )namePages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_7 & 31)));
# 139 "xmltok.c"
  goto return_label;
  }
  return_label:
  {
  __CrestLoad(75738, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(75739);
# 136 "xmltok.c"
  return (__retres8);
  }
}
}
# 144 "xmltok.c"
static int utf8_isNmstrt2(ENCODING const *enc , char const *p )
{
  unsigned char const *mem_3 ;
  unsigned char const *mem_4 ;
  unsigned char const *mem_5 ;
  unsigned char const *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(75740, 828);

  {
# 147 "xmltok.c"
  mem_3 = (unsigned char const *)p + 0;
# 147 "xmltok.c"
  mem_4 = (unsigned char const *)p + 0;
# 147 "xmltok.c"
  mem_5 = (unsigned char const *)p + 1;
# 147 "xmltok.c"
  mem_6 = (unsigned char const *)p + 1;
  __CrestLoad(75747, (unsigned long )(& namingBitmap[(((int const )nmstrtPages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)]),
              (long long )namingBitmap[(((int const )nmstrtPages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)]);
  __CrestLoad(75746, (unsigned long )0, (long long )1);
  __CrestLoad(75745, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(75744, (unsigned long )0, (long long )31);
  __CrestApply2(75743, 5, (long long )((int const )*mem_6 & 31));
  __CrestApply2(75742, 8, (long long )(1 << ((int const )*mem_6 & 31)));
  __CrestApply2(75741, 5, (long long )(namingBitmap[(((int const )nmstrtPages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_6 & 31))));
  __CrestStore(75748, (unsigned long )(& __retres7));
# 147 "xmltok.c"
  __retres7 = (int )(namingBitmap[(((int const )nmstrtPages[((int const )*mem_3 >> 2) & 7] << 3) + (((int const )*mem_4 & 3) << 1)) + (((int const )*mem_5 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_6 & 31)));
# 147 "xmltok.c"
  goto return_label;
  }
  return_label:
  {
  __CrestLoad(75749, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(75750);
# 144 "xmltok.c"
  return (__retres7);
  }
}
}
# 150 "xmltok.c"
static int utf8_isNmstrt3(ENCODING const *enc , char const *p )
{
  unsigned char const *mem_3 ;
  unsigned char const *mem_4 ;
  unsigned char const *mem_5 ;
  unsigned char const *mem_6 ;
  unsigned char const *mem_7 ;
  int __retres8 ;

  {
  __CrestCall(75751, 829);

  {
# 153 "xmltok.c"
  mem_3 = (unsigned char const *)p + 0;
# 153 "xmltok.c"
  mem_4 = (unsigned char const *)p + 1;
# 153 "xmltok.c"
  mem_5 = (unsigned char const *)p + 1;
# 153 "xmltok.c"
  mem_6 = (unsigned char const *)p + 2;
# 153 "xmltok.c"
  mem_7 = (unsigned char const *)p + 2;
  __CrestLoad(75758, (unsigned long )(& namingBitmap[(((int const )nmstrtPages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)]),
              (long long )namingBitmap[(((int const )nmstrtPages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)]);
  __CrestLoad(75757, (unsigned long )0, (long long )1);
  __CrestLoad(75756, (unsigned long )mem_7, (long long )*mem_7);
  __CrestLoad(75755, (unsigned long )0, (long long )31);
  __CrestApply2(75754, 5, (long long )((int const )*mem_7 & 31));
  __CrestApply2(75753, 8, (long long )(1 << ((int const )*mem_7 & 31)));
  __CrestApply2(75752, 5, (long long )(namingBitmap[(((int const )nmstrtPages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_7 & 31))));
  __CrestStore(75759, (unsigned long )(& __retres8));
# 153 "xmltok.c"
  __retres8 = (int )(namingBitmap[(((int const )nmstrtPages[(((int const )*mem_3 & 15) << 4) + (((int const )*mem_4 >> 2) & 15)] << 3) + (((int const )*mem_5 & 3) << 1)) + (((int const )*mem_6 >> 5) & 1)] & (unsigned int const )(1 << ((int const )*mem_7 & 31)));
# 153 "xmltok.c"
  goto return_label;
  }
  return_label:
  {
  __CrestLoad(75760, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(75761);
# 150 "xmltok.c"
  return (__retres8);
  }
}
}
# 158 "xmltok.c"
static int utf8_isInvalid2(ENCODING const *enc , char const *p )
{
  int tmp ;
  unsigned char const *mem_4 ;
  unsigned char const *mem_5 ;
  unsigned char const *mem_6 ;

  {
  __CrestCall(75762, 830);

  {
# 161 "xmltok.c"
  mem_4 = (unsigned char const *)p;
  {
  __CrestLoad(75765, (unsigned long )mem_4, (long long )*mem_4);
  __CrestLoad(75764, (unsigned long )0, (long long )194);
  __CrestApply2(75763, 16, (long long )((int const )*mem_4 < 194));
# 161 "xmltok.c"
  if ((int const )*mem_4 < 194) {
    __CrestBranch(75766, 48206, 1);
    __CrestLoad(75768, (unsigned long )0, (long long )1);
    __CrestStore(75769, (unsigned long )(& tmp));
# 161 "xmltok.c"
    tmp = 1;
  } else {
    __CrestBranch(75767, 48207, 0);
    {
# 161 "xmltok.c"
    mem_5 = (unsigned char const *)p + 1;
    {
    __CrestLoad(75774, (unsigned long )mem_5, (long long )*mem_5);
    __CrestLoad(75773, (unsigned long )0, (long long )128);
    __CrestApply2(75772, 5, (long long )((int const )*mem_5 & 128));
    __CrestLoad(75771, (unsigned long )0, (long long )0);
    __CrestApply2(75770, 12, (long long )(((int const )*mem_5 & 128) == 0));
# 161 "xmltok.c"
    if (((int const )*mem_5 & 128) == 0) {
      __CrestBranch(75775, 48210, 1);
      __CrestLoad(75777, (unsigned long )0, (long long )1);
      __CrestStore(75778, (unsigned long )(& tmp));
# 161 "xmltok.c"
      tmp = 1;
    } else {
      __CrestBranch(75776, 48211, 0);
      {
# 161 "xmltok.c"
      mem_6 = (unsigned char const *)p + 1;
      {
      __CrestLoad(75783, (unsigned long )mem_6, (long long )*mem_6);
      __CrestLoad(75782, (unsigned long )0, (long long )192);
      __CrestApply2(75781, 5, (long long )((int const )*mem_6 & 192));
      __CrestLoad(75780, (unsigned long )0, (long long )192);
      __CrestApply2(75779, 12, (long long )(((int const )*mem_6 & 192) == 192));
# 161 "xmltok.c"
      if (((int const )*mem_6 & 192) == 192) {
        __CrestBranch(75784, 48214, 1);
        __CrestLoad(75786, (unsigned long )0, (long long )1);
        __CrestStore(75787, (unsigned long )(& tmp));
# 161 "xmltok.c"
        tmp = 1;
      } else {
        __CrestBranch(75785, 48215, 0);
        __CrestLoad(75788, (unsigned long )0, (long long )0);
        __CrestStore(75789, (unsigned long )(& tmp));
# 161 "xmltok.c"
        tmp = 0;
      }
      }
      }
    }
    }
    }
  }
  }
  }
  {
  __CrestLoad(75790, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(75791);
# 161 "xmltok.c"
  return (tmp);
  }
}
}
# 164 "xmltok.c"
static int utf8_isInvalid3(ENCODING const *enc , char const *p )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned char const *mem_9 ;
  unsigned char const *mem_10 ;
  unsigned char const *mem_11 ;
  unsigned char const *mem_12 ;
  unsigned char const *mem_13 ;
  unsigned char const *mem_14 ;
  unsigned char const *mem_15 ;
  unsigned char const *mem_16 ;
  unsigned char const *mem_17 ;
  unsigned char const *mem_18 ;
  unsigned char const *mem_19 ;
  unsigned char const *mem_20 ;
  unsigned char const *mem_21 ;

  {
  __CrestCall(75792, 831);

  {
# 167 "xmltok.c"
  mem_9 = (unsigned char const *)p + 2;
  {
  __CrestLoad(75797, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(75796, (unsigned long )0, (long long )128);
  __CrestApply2(75795, 5, (long long )((int const )*mem_9 & 128));
  __CrestLoad(75794, (unsigned long )0, (long long )0);
  __CrestApply2(75793, 12, (long long )(((int const )*mem_9 & 128) == 0));
# 167 "xmltok.c"
  if (((int const )*mem_9 & 128) == 0) {
    __CrestBranch(75798, 48220, 1);
    __CrestLoad(75800, (unsigned long )0, (long long )1);
    __CrestStore(75801, (unsigned long )(& tmp___4));
# 167 "xmltok.c"
    tmp___4 = 1;
  } else {
    __CrestBranch(75799, 48221, 0);
    {
# 167 "xmltok.c"
    mem_10 = (unsigned char const *)p;
    {
    __CrestLoad(75804, (unsigned long )mem_10, (long long )*mem_10);
    __CrestLoad(75803, (unsigned long )0, (long long )239);
    __CrestApply2(75802, 12, (long long )((int const )*mem_10 == 239));
# 167 "xmltok.c"
    if ((int const )*mem_10 == 239) {
      __CrestBranch(75805, 48224, 1);
      {
# 167 "xmltok.c"
      mem_11 = (unsigned char const *)p + 1;
      {
      __CrestLoad(75809, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(75808, (unsigned long )0, (long long )191);
      __CrestApply2(75807, 12, (long long )((int const )*mem_11 == 191));
# 167 "xmltok.c"
      if ((int const )*mem_11 == 191) {
        __CrestBranch(75810, 48227, 1);
# 167 "xmltok.c"
        mem_12 = (unsigned char const *)p + 2;
        __CrestLoad(75814, (unsigned long )mem_12, (long long )*mem_12);
        __CrestLoad(75813, (unsigned long )0, (long long )189);
        __CrestApply2(75812, 14, (long long )((int const )*mem_12 > 189));
        __CrestStore(75815, (unsigned long )(& tmp));
# 167 "xmltok.c"
        tmp = (int const )*mem_12 > 189;
      } else {
        __CrestBranch(75811, 48228, 0);
# 167 "xmltok.c"
        mem_13 = (unsigned char const *)p + 2;
        __CrestLoad(75820, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(75819, (unsigned long )0, (long long )192);
        __CrestApply2(75818, 5, (long long )((int const )*mem_13 & 192));
        __CrestLoad(75817, (unsigned long )0, (long long )192);
        __CrestApply2(75816, 12, (long long )(((int const )*mem_13 & 192) == 192));
        __CrestStore(75821, (unsigned long )(& tmp));
# 167 "xmltok.c"
        tmp = ((int const )*mem_13 & 192) == 192;
      }
      }
      }
    } else {
      __CrestBranch(75806, 48229, 0);
# 167 "xmltok.c"
      mem_14 = (unsigned char const *)p + 2;
      __CrestLoad(75826, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(75825, (unsigned long )0, (long long )192);
      __CrestApply2(75824, 5, (long long )((int const )*mem_14 & 192));
      __CrestLoad(75823, (unsigned long )0, (long long )192);
      __CrestApply2(75822, 12, (long long )(((int const )*mem_14 & 192) == 192));
      __CrestStore(75827, (unsigned long )(& tmp));
# 167 "xmltok.c"
      tmp = ((int const )*mem_14 & 192) == 192;
    }
    }
    }
    {
    __CrestLoad(75830, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(75829, (unsigned long )0, (long long )0);
    __CrestApply2(75828, 13, (long long )(tmp != 0));
# 167 "xmltok.c"
    if (tmp != 0) {
      __CrestBranch(75831, 48231, 1);
      __CrestLoad(75833, (unsigned long )0, (long long )1);
      __CrestStore(75834, (unsigned long )(& tmp___4));
# 167 "xmltok.c"
      tmp___4 = 1;
    } else {
      __CrestBranch(75832, 48232, 0);
      {
# 167 "xmltok.c"
      mem_15 = (unsigned char const *)p;
      {
      __CrestLoad(75837, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(75836, (unsigned long )0, (long long )224);
      __CrestApply2(75835, 12, (long long )((int const )*mem_15 == 224));
# 167 "xmltok.c"
      if ((int const )*mem_15 == 224) {
        __CrestBranch(75838, 48235, 1);
        {
# 167 "xmltok.c"
        mem_16 = (unsigned char const *)p + 1;
        {
        __CrestLoad(75842, (unsigned long )mem_16, (long long )*mem_16);
        __CrestLoad(75841, (unsigned long )0, (long long )160);
        __CrestApply2(75840, 16, (long long )((int const )*mem_16 < 160));
# 167 "xmltok.c"
        if ((int const )*mem_16 < 160) {
          __CrestBranch(75843, 48238, 1);
          __CrestLoad(75845, (unsigned long )0, (long long )1);
          __CrestStore(75846, (unsigned long )(& tmp___0));
# 167 "xmltok.c"
          tmp___0 = 1;
        } else {
          __CrestBranch(75844, 48239, 0);
          {
# 167 "xmltok.c"
          mem_17 = (unsigned char const *)p + 1;
          {
          __CrestLoad(75851, (unsigned long )mem_17, (long long )*mem_17);
          __CrestLoad(75850, (unsigned long )0, (long long )192);
          __CrestApply2(75849, 5, (long long )((int const )*mem_17 & 192));
          __CrestLoad(75848, (unsigned long )0, (long long )192);
          __CrestApply2(75847, 12, (long long )(((int const )*mem_17 & 192) == 192));
# 167 "xmltok.c"
          if (((int const )*mem_17 & 192) == 192) {
            __CrestBranch(75852, 48242, 1);
            __CrestLoad(75854, (unsigned long )0, (long long )1);
            __CrestStore(75855, (unsigned long )(& tmp___0));
# 167 "xmltok.c"
            tmp___0 = 1;
          } else {
            __CrestBranch(75853, 48243, 0);
            __CrestLoad(75856, (unsigned long )0, (long long )0);
            __CrestStore(75857, (unsigned long )(& tmp___0));
# 167 "xmltok.c"
            tmp___0 = 0;
          }
          }
          }
        }
        }
        }
        __CrestLoad(75858, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestStore(75859, (unsigned long )(& tmp___3));
# 167 "xmltok.c"
        tmp___3 = tmp___0;
      } else {
        __CrestBranch(75839, 48245, 0);
        {
# 167 "xmltok.c"
        mem_18 = (unsigned char const *)p + 1;
        {
        __CrestLoad(75864, (unsigned long )mem_18, (long long )*mem_18);
        __CrestLoad(75863, (unsigned long )0, (long long )128);
        __CrestApply2(75862, 5, (long long )((int const )*mem_18 & 128));
        __CrestLoad(75861, (unsigned long )0, (long long )0);
        __CrestApply2(75860, 12, (long long )(((int const )*mem_18 & 128) == 0));
# 167 "xmltok.c"
        if (((int const )*mem_18 & 128) == 0) {
          __CrestBranch(75865, 48248, 1);
          __CrestLoad(75867, (unsigned long )0, (long long )1);
          __CrestStore(75868, (unsigned long )(& tmp___2));
# 167 "xmltok.c"
          tmp___2 = 1;
        } else {
          __CrestBranch(75866, 48249, 0);
          {
# 167 "xmltok.c"
          mem_19 = (unsigned char const *)p;
          {
          __CrestLoad(75871, (unsigned long )mem_19, (long long )*mem_19);
          __CrestLoad(75870, (unsigned long )0, (long long )237);
          __CrestApply2(75869, 12, (long long )((int const )*mem_19 == 237));
# 167 "xmltok.c"
          if ((int const )*mem_19 == 237) {
            __CrestBranch(75872, 48252, 1);
# 167 "xmltok.c"
            mem_20 = (unsigned char const *)p + 1;
            __CrestLoad(75876, (unsigned long )mem_20, (long long )*mem_20);
            __CrestLoad(75875, (unsigned long )0, (long long )159);
            __CrestApply2(75874, 14, (long long )((int const )*mem_20 > 159));
            __CrestStore(75877, (unsigned long )(& tmp___1));
# 167 "xmltok.c"
            tmp___1 = (int const )*mem_20 > 159;
          } else {
            __CrestBranch(75873, 48253, 0);
# 167 "xmltok.c"
            mem_21 = (unsigned char const *)p + 1;
            __CrestLoad(75882, (unsigned long )mem_21, (long long )*mem_21);
            __CrestLoad(75881, (unsigned long )0, (long long )192);
            __CrestApply2(75880, 5, (long long )((int const )*mem_21 & 192));
            __CrestLoad(75879, (unsigned long )0, (long long )192);
            __CrestApply2(75878, 12, (long long )(((int const )*mem_21 & 192) == 192));
            __CrestStore(75883, (unsigned long )(& tmp___1));
# 167 "xmltok.c"
            tmp___1 = ((int const )*mem_21 & 192) == 192;
          }
          }
          }
          {
          __CrestLoad(75886, (unsigned long )(& tmp___1), (long long )tmp___1);
          __CrestLoad(75885, (unsigned long )0, (long long )0);
          __CrestApply2(75884, 13, (long long )(tmp___1 != 0));
# 167 "xmltok.c"
          if (tmp___1 != 0) {
            __CrestBranch(75887, 48255, 1);
            __CrestLoad(75889, (unsigned long )0, (long long )1);
            __CrestStore(75890, (unsigned long )(& tmp___2));
# 167 "xmltok.c"
            tmp___2 = 1;
          } else {
            __CrestBranch(75888, 48256, 0);
            __CrestLoad(75891, (unsigned long )0, (long long )0);
            __CrestStore(75892, (unsigned long )(& tmp___2));
# 167 "xmltok.c"
            tmp___2 = 0;
          }
          }
        }
        }
        }
        __CrestLoad(75893, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(75894, (unsigned long )(& tmp___3));
# 167 "xmltok.c"
        tmp___3 = tmp___2;
      }
      }
      }
      {
      __CrestLoad(75897, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(75896, (unsigned long )0, (long long )0);
      __CrestApply2(75895, 13, (long long )(tmp___3 != 0));
# 167 "xmltok.c"
      if (tmp___3 != 0) {
        __CrestBranch(75898, 48259, 1);
        __CrestLoad(75900, (unsigned long )0, (long long )1);
        __CrestStore(75901, (unsigned long )(& tmp___4));
# 167 "xmltok.c"
        tmp___4 = 1;
      } else {
        __CrestBranch(75899, 48260, 0);
        __CrestLoad(75902, (unsigned long )0, (long long )0);
        __CrestStore(75903, (unsigned long )(& tmp___4));
# 167 "xmltok.c"
        tmp___4 = 0;
      }
      }
    }
    }
  }
  }
  }
  {
  __CrestLoad(75904, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestReturn(75905);
# 167 "xmltok.c"
  return (tmp___4);
  }
}
}
# 170 "xmltok.c"
static int utf8_isInvalid4(ENCODING const *enc , char const *p )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char const *mem_8 ;
  unsigned char const *mem_9 ;
  unsigned char const *mem_10 ;
  unsigned char const *mem_11 ;
  unsigned char const *mem_12 ;
  unsigned char const *mem_13 ;
  unsigned char const *mem_14 ;
  unsigned char const *mem_15 ;
  unsigned char const *mem_16 ;
  unsigned char const *mem_17 ;
  unsigned char const *mem_18 ;

  {
  __CrestCall(75906, 832);

  {
# 173 "xmltok.c"
  mem_8 = (unsigned char const *)p + 3;
  {
  __CrestLoad(75911, (unsigned long )mem_8, (long long )*mem_8);
  __CrestLoad(75910, (unsigned long )0, (long long )128);
  __CrestApply2(75909, 5, (long long )((int const )*mem_8 & 128));
  __CrestLoad(75908, (unsigned long )0, (long long )0);
  __CrestApply2(75907, 12, (long long )(((int const )*mem_8 & 128) == 0));
# 173 "xmltok.c"
  if (((int const )*mem_8 & 128) == 0) {
    __CrestBranch(75912, 48265, 1);
    __CrestLoad(75914, (unsigned long )0, (long long )1);
    __CrestStore(75915, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
    tmp___3 = 1;
  } else {
    __CrestBranch(75913, 48266, 0);
    {
# 173 "xmltok.c"
    mem_9 = (unsigned char const *)p + 3;
    {
    __CrestLoad(75920, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(75919, (unsigned long )0, (long long )192);
    __CrestApply2(75918, 5, (long long )((int const )*mem_9 & 192));
    __CrestLoad(75917, (unsigned long )0, (long long )192);
    __CrestApply2(75916, 12, (long long )(((int const )*mem_9 & 192) == 192));
# 173 "xmltok.c"
    if (((int const )*mem_9 & 192) == 192) {
      __CrestBranch(75921, 48269, 1);
      __CrestLoad(75923, (unsigned long )0, (long long )1);
      __CrestStore(75924, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
      tmp___3 = 1;
    } else {
      __CrestBranch(75922, 48270, 0);
      {
# 173 "xmltok.c"
      mem_10 = (unsigned char const *)p + 2;
      {
      __CrestLoad(75929, (unsigned long )mem_10, (long long )*mem_10);
      __CrestLoad(75928, (unsigned long )0, (long long )128);
      __CrestApply2(75927, 5, (long long )((int const )*mem_10 & 128));
      __CrestLoad(75926, (unsigned long )0, (long long )0);
      __CrestApply2(75925, 12, (long long )(((int const )*mem_10 & 128) == 0));
# 173 "xmltok.c"
      if (((int const )*mem_10 & 128) == 0) {
        __CrestBranch(75930, 48273, 1);
        __CrestLoad(75932, (unsigned long )0, (long long )1);
        __CrestStore(75933, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
        tmp___3 = 1;
      } else {
        __CrestBranch(75931, 48274, 0);
        {
# 173 "xmltok.c"
        mem_11 = (unsigned char const *)p + 2;
        {
        __CrestLoad(75938, (unsigned long )mem_11, (long long )*mem_11);
        __CrestLoad(75937, (unsigned long )0, (long long )192);
        __CrestApply2(75936, 5, (long long )((int const )*mem_11 & 192));
        __CrestLoad(75935, (unsigned long )0, (long long )192);
        __CrestApply2(75934, 12, (long long )(((int const )*mem_11 & 192) == 192));
# 173 "xmltok.c"
        if (((int const )*mem_11 & 192) == 192) {
          __CrestBranch(75939, 48277, 1);
          __CrestLoad(75941, (unsigned long )0, (long long )1);
          __CrestStore(75942, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
          tmp___3 = 1;
        } else {
          __CrestBranch(75940, 48278, 0);
          {
# 173 "xmltok.c"
          mem_12 = (unsigned char const *)p;
          {
          __CrestLoad(75945, (unsigned long )mem_12, (long long )*mem_12);
          __CrestLoad(75944, (unsigned long )0, (long long )240);
          __CrestApply2(75943, 12, (long long )((int const )*mem_12 == 240));
# 173 "xmltok.c"
          if ((int const )*mem_12 == 240) {
            __CrestBranch(75946, 48281, 1);
            {
# 173 "xmltok.c"
            mem_13 = (unsigned char const *)p + 1;
            {
            __CrestLoad(75950, (unsigned long )mem_13, (long long )*mem_13);
            __CrestLoad(75949, (unsigned long )0, (long long )144);
            __CrestApply2(75948, 16, (long long )((int const )*mem_13 < 144));
# 173 "xmltok.c"
            if ((int const )*mem_13 < 144) {
              __CrestBranch(75951, 48284, 1);
              __CrestLoad(75953, (unsigned long )0, (long long )1);
              __CrestStore(75954, (unsigned long )(& tmp));
# 173 "xmltok.c"
              tmp = 1;
            } else {
              __CrestBranch(75952, 48285, 0);
              {
# 173 "xmltok.c"
              mem_14 = (unsigned char const *)p + 1;
              {
              __CrestLoad(75959, (unsigned long )mem_14, (long long )*mem_14);
              __CrestLoad(75958, (unsigned long )0, (long long )192);
              __CrestApply2(75957, 5, (long long )((int const )*mem_14 & 192));
              __CrestLoad(75956, (unsigned long )0, (long long )192);
              __CrestApply2(75955, 12, (long long )(((int const )*mem_14 & 192) == 192));
# 173 "xmltok.c"
              if (((int const )*mem_14 & 192) == 192) {
                __CrestBranch(75960, 48288, 1);
                __CrestLoad(75962, (unsigned long )0, (long long )1);
                __CrestStore(75963, (unsigned long )(& tmp));
# 173 "xmltok.c"
                tmp = 1;
              } else {
                __CrestBranch(75961, 48289, 0);
                __CrestLoad(75964, (unsigned long )0, (long long )0);
                __CrestStore(75965, (unsigned long )(& tmp));
# 173 "xmltok.c"
                tmp = 0;
              }
              }
              }
            }
            }
            }
            __CrestLoad(75966, (unsigned long )(& tmp), (long long )tmp);
            __CrestStore(75967, (unsigned long )(& tmp___2));
# 173 "xmltok.c"
            tmp___2 = tmp;
          } else {
            __CrestBranch(75947, 48291, 0);
            {
# 173 "xmltok.c"
            mem_15 = (unsigned char const *)p + 1;
            {
            __CrestLoad(75972, (unsigned long )mem_15, (long long )*mem_15);
            __CrestLoad(75971, (unsigned long )0, (long long )128);
            __CrestApply2(75970, 5, (long long )((int const )*mem_15 & 128));
            __CrestLoad(75969, (unsigned long )0, (long long )0);
            __CrestApply2(75968, 12, (long long )(((int const )*mem_15 & 128) == 0));
# 173 "xmltok.c"
            if (((int const )*mem_15 & 128) == 0) {
              __CrestBranch(75973, 48294, 1);
              __CrestLoad(75975, (unsigned long )0, (long long )1);
              __CrestStore(75976, (unsigned long )(& tmp___1));
# 173 "xmltok.c"
              tmp___1 = 1;
            } else {
              __CrestBranch(75974, 48295, 0);
              {
# 173 "xmltok.c"
              mem_16 = (unsigned char const *)p;
              {
              __CrestLoad(75979, (unsigned long )mem_16, (long long )*mem_16);
              __CrestLoad(75978, (unsigned long )0, (long long )244);
              __CrestApply2(75977, 12, (long long )((int const )*mem_16 == 244));
# 173 "xmltok.c"
              if ((int const )*mem_16 == 244) {
                __CrestBranch(75980, 48298, 1);
# 173 "xmltok.c"
                mem_17 = (unsigned char const *)p + 1;
                __CrestLoad(75984, (unsigned long )mem_17, (long long )*mem_17);
                __CrestLoad(75983, (unsigned long )0, (long long )143);
                __CrestApply2(75982, 14, (long long )((int const )*mem_17 > 143));
                __CrestStore(75985, (unsigned long )(& tmp___0));
# 173 "xmltok.c"
                tmp___0 = (int const )*mem_17 > 143;
              } else {
                __CrestBranch(75981, 48299, 0);
# 173 "xmltok.c"
                mem_18 = (unsigned char const *)p + 1;
                __CrestLoad(75990, (unsigned long )mem_18, (long long )*mem_18);
                __CrestLoad(75989, (unsigned long )0, (long long )192);
                __CrestApply2(75988, 5, (long long )((int const )*mem_18 & 192));
                __CrestLoad(75987, (unsigned long )0, (long long )192);
                __CrestApply2(75986, 12, (long long )(((int const )*mem_18 & 192) == 192));
                __CrestStore(75991, (unsigned long )(& tmp___0));
# 173 "xmltok.c"
                tmp___0 = ((int const )*mem_18 & 192) == 192;
              }
              }
              }
              {
              __CrestLoad(75994, (unsigned long )(& tmp___0), (long long )tmp___0);
              __CrestLoad(75993, (unsigned long )0, (long long )0);
              __CrestApply2(75992, 13, (long long )(tmp___0 != 0));
# 173 "xmltok.c"
              if (tmp___0 != 0) {
                __CrestBranch(75995, 48301, 1);
                __CrestLoad(75997, (unsigned long )0, (long long )1);
                __CrestStore(75998, (unsigned long )(& tmp___1));
# 173 "xmltok.c"
                tmp___1 = 1;
              } else {
                __CrestBranch(75996, 48302, 0);
                __CrestLoad(75999, (unsigned long )0, (long long )0);
                __CrestStore(76000, (unsigned long )(& tmp___1));
# 173 "xmltok.c"
                tmp___1 = 0;
              }
              }
            }
            }
            }
            __CrestLoad(76001, (unsigned long )(& tmp___1), (long long )tmp___1);
            __CrestStore(76002, (unsigned long )(& tmp___2));
# 173 "xmltok.c"
            tmp___2 = tmp___1;
          }
          }
          }
          {
          __CrestLoad(76005, (unsigned long )(& tmp___2), (long long )tmp___2);
          __CrestLoad(76004, (unsigned long )0, (long long )0);
          __CrestApply2(76003, 13, (long long )(tmp___2 != 0));
# 173 "xmltok.c"
          if (tmp___2 != 0) {
            __CrestBranch(76006, 48305, 1);
            __CrestLoad(76008, (unsigned long )0, (long long )1);
            __CrestStore(76009, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
            tmp___3 = 1;
          } else {
            __CrestBranch(76007, 48306, 0);
            __CrestLoad(76010, (unsigned long )0, (long long )0);
            __CrestStore(76011, (unsigned long )(& tmp___3));
# 173 "xmltok.c"
            tmp___3 = 0;
          }
          }
        }
        }
        }
      }
      }
      }
    }
    }
    }
  }
  }
  }
  {
  __CrestLoad(76012, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestReturn(76013);
# 173 "xmltok.c"
  return (tmp___3);
  }
}
}
# 225 "xmltok.c"
static int checkCharRefNumber(int result ) ;
# 92 "xmltok_impl.c"
static int normal_scanComment(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct normal_encoding *mem_8 ;
  struct normal_encoding const *mem_9 ;
  int (*mem_10)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_11 ;
  int (*mem_12)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_13 ;
  int (*mem_14)(ENCODING const * , char const * ) ;
  int __retres15 ;

  {
  __CrestCall(76014, 833);

  {
  __CrestLoad(76017, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76016, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76015, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 96 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(76018, 48309, 1);
    {
    __CrestLoad(76022, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(76021, (unsigned long )0, (long long )45);
    __CrestApply2(76020, 13, (long long )((int const )*ptr != 45));
# 97 "xmltok_impl.c"
    if ((int const )*ptr != 45) {
      __CrestBranch(76023, 48310, 1);
# 98 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76025, (unsigned long )0, (long long )0);
      __CrestStore(76026, (unsigned long )(& __retres15));
# 99 "xmltok_impl.c"
      __retres15 = 0;
# 99 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76024, 48313, 0);

    }
    }
# 101 "xmltok_impl.c"
    ptr ++;
    {
# 102 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(76029, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(76028, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(76027, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 102 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(76030, 48319, 1);

      } else {
        __CrestBranch(76031, 48320, 0);
# 102 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 103 "xmltok_impl.c"
      mem_8 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(76034, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76033, (unsigned long )0, (long long )5);
      __CrestApply2(76032, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 5));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 5) {
        __CrestBranch(76035, 48325, 1);
# 104 "xmltok_impl.c"
        goto case_5;
      } else {
        __CrestBranch(76036, 48326, 0);

      }
      }
      {
      __CrestLoad(76039, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76038, (unsigned long )0, (long long )6);
      __CrestApply2(76037, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 6));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 6) {
        __CrestBranch(76040, 48328, 1);
# 104 "xmltok_impl.c"
        goto case_6;
      } else {
        __CrestBranch(76041, 48329, 0);

      }
      }
      {
      __CrestLoad(76044, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76043, (unsigned long )0, (long long )7);
      __CrestApply2(76042, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 7));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 7) {
        __CrestBranch(76045, 48331, 1);
# 104 "xmltok_impl.c"
        goto case_7;
      } else {
        __CrestBranch(76046, 48332, 0);

      }
      }
      {
      __CrestLoad(76049, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76048, (unsigned long )0, (long long )8);
      __CrestApply2(76047, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 8));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 8) {
        __CrestBranch(76050, 48334, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76051, 48335, 0);

      }
      }
      {
      __CrestLoad(76054, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76053, (unsigned long )0, (long long )1);
      __CrestApply2(76052, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 1));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 1) {
        __CrestBranch(76055, 48337, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76056, 48338, 0);

      }
      }
      {
      __CrestLoad(76059, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76058, (unsigned long )0, (long long )0);
      __CrestApply2(76057, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 0));
# 104 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 0) {
        __CrestBranch(76060, 48340, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76061, 48341, 0);

      }
      }
      {
      __CrestLoad(76064, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(76063, (unsigned long )0, (long long )27);
      __CrestApply2(76062, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 27));
# 105 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 27) {
        __CrestBranch(76065, 48343, 1);
# 105 "xmltok_impl.c"
        goto case_27;
      } else {
        __CrestBranch(76066, 48344, 0);

      }
      }
# 119 "xmltok_impl.c"
      goto switch_default;
      case_5:
      {
      __CrestLoad(76071, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76070, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76069, 18, (long long )(end - ptr));
      __CrestLoad(76068, (unsigned long )0, (long long )2L);
      __CrestApply2(76067, 16, (long long )(end - ptr < 2L));
# 104 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(76072, 48347, 1);
        __CrestLoad(76074, (unsigned long )0, (long long )-2);
        __CrestStore(76075, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76073, 48349, 0);

      }
      }
# 104 "xmltok_impl.c"
      mem_9 = (struct normal_encoding const *)enc;
# 104 "xmltok_impl.c"
      mem_10 = mem_9->isInvalid2;
# 104 "xmltok_impl.c"
      tmp = (*mem_10)(enc, ptr);
      __CrestHandleReturn(76077, (long long )tmp);
      __CrestStore(76076, (unsigned long )(& tmp));
      {
      __CrestLoad(76080, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(76079, (unsigned long )0, (long long )0);
      __CrestApply2(76078, 13, (long long )(tmp != 0));
# 104 "xmltok_impl.c"
      if (tmp != 0) {
        __CrestBranch(76081, 48352, 1);
# 104 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76083, (unsigned long )0, (long long )0);
        __CrestStore(76084, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = 0;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76082, 48355, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 2;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_6:
      {
      __CrestLoad(76089, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76088, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76087, 18, (long long )(end - ptr));
      __CrestLoad(76086, (unsigned long )0, (long long )3L);
      __CrestApply2(76085, 16, (long long )(end - ptr < 3L));
# 104 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(76090, 48359, 1);
        __CrestLoad(76092, (unsigned long )0, (long long )-2);
        __CrestStore(76093, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76091, 48361, 0);

      }
      }
# 104 "xmltok_impl.c"
      mem_11 = (struct normal_encoding const *)enc;
# 104 "xmltok_impl.c"
      mem_12 = mem_11->isInvalid3;
# 104 "xmltok_impl.c"
      tmp___0 = (*mem_12)(enc, ptr);
      __CrestHandleReturn(76095, (long long )tmp___0);
      __CrestStore(76094, (unsigned long )(& tmp___0));
      {
      __CrestLoad(76098, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(76097, (unsigned long )0, (long long )0);
      __CrestApply2(76096, 13, (long long )(tmp___0 != 0));
# 104 "xmltok_impl.c"
      if (tmp___0 != 0) {
        __CrestBranch(76099, 48364, 1);
# 104 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76101, (unsigned long )0, (long long )0);
        __CrestStore(76102, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = 0;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76100, 48367, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 3;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_7:
      {
      __CrestLoad(76107, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76106, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76105, 18, (long long )(end - ptr));
      __CrestLoad(76104, (unsigned long )0, (long long )4L);
      __CrestApply2(76103, 16, (long long )(end - ptr < 4L));
# 104 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(76108, 48371, 1);
        __CrestLoad(76110, (unsigned long )0, (long long )-2);
        __CrestStore(76111, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76109, 48373, 0);

      }
      }
# 104 "xmltok_impl.c"
      mem_13 = (struct normal_encoding const *)enc;
# 104 "xmltok_impl.c"
      mem_14 = mem_13->isInvalid4;
# 104 "xmltok_impl.c"
      tmp___1 = (*mem_14)(enc, ptr);
      __CrestHandleReturn(76113, (long long )tmp___1);
      __CrestStore(76112, (unsigned long )(& tmp___1));
      {
      __CrestLoad(76116, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestLoad(76115, (unsigned long )0, (long long )0);
      __CrestApply2(76114, 13, (long long )(tmp___1 != 0));
# 104 "xmltok_impl.c"
      if (tmp___1 != 0) {
        __CrestBranch(76117, 48376, 1);
# 104 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76119, (unsigned long )0, (long long )0);
        __CrestStore(76120, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
        __retres15 = 0;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76118, 48379, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 4;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_8:
      case_1:
      case_0:
# 104 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76121, (unsigned long )0, (long long )0);
      __CrestStore(76122, (unsigned long )(& __retres15));
# 104 "xmltok_impl.c"
      __retres15 = 0;
# 104 "xmltok_impl.c"
      goto return_label;
      case_27:
# 106 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(76125, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(76124, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(76123, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 106 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(76126, 48387, 1);
        __CrestLoad(76128, (unsigned long )0, (long long )-1);
        __CrestStore(76129, (unsigned long )(& __retres15));
# 107 "xmltok_impl.c"
        __retres15 = -1;
# 107 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76127, 48389, 0);

      }
      }
      {
      __CrestLoad(76132, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(76131, (unsigned long )0, (long long )45);
      __CrestApply2(76130, 12, (long long )((int const )*ptr == 45));
# 108 "xmltok_impl.c"
      if ((int const )*ptr == 45) {
        __CrestBranch(76133, 48391, 1);
# 109 "xmltok_impl.c"
        ptr ++;
        {
        __CrestLoad(76137, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
        __CrestLoad(76136, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestApply2(76135, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 109 "xmltok_impl.c"
        if ((unsigned long )ptr == (unsigned long )end) {
          __CrestBranch(76138, 48393, 1);
          __CrestLoad(76140, (unsigned long )0, (long long )-1);
          __CrestStore(76141, (unsigned long )(& __retres15));
# 110 "xmltok_impl.c"
          __retres15 = -1;
# 110 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(76139, 48395, 0);

        }
        }
        {
        __CrestLoad(76144, (unsigned long )ptr, (long long )*ptr);
        __CrestLoad(76143, (unsigned long )0, (long long )62);
        __CrestApply2(76142, 13, (long long )((int const )*ptr != 62));
# 111 "xmltok_impl.c"
        if ((int const )*ptr != 62) {
          __CrestBranch(76145, 48397, 1);
# 112 "xmltok_impl.c"
          *nextTokPtr = ptr;
          __CrestLoad(76147, (unsigned long )0, (long long )0);
          __CrestStore(76148, (unsigned long )(& __retres15));
# 113 "xmltok_impl.c"
          __retres15 = 0;
# 113 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(76146, 48400, 0);

        }
        }
# 115 "xmltok_impl.c"
        *nextTokPtr = ptr + 1;
        __CrestLoad(76149, (unsigned long )0, (long long )13);
        __CrestStore(76150, (unsigned long )(& __retres15));
# 116 "xmltok_impl.c"
        __retres15 = 13;
# 116 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76134, 48404, 0);

      }
      }
# 118 "xmltok_impl.c"
      goto switch_break;
      switch_default:
# 120 "xmltok_impl.c"
      ptr ++;
# 121 "xmltok_impl.c"
      goto switch_break;
      switch_break: ;
      }
      }
    }
    while_break: ;
    }
  } else {
    __CrestBranch(76019, 48410, 0);

  }
  }
  __CrestLoad(76151, (unsigned long )0, (long long )-1);
  __CrestStore(76152, (unsigned long )(& __retres15));
# 125 "xmltok_impl.c"
  __retres15 = -1;
  return_label:
  {
  __CrestLoad(76153, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(76154);
# 92 "xmltok_impl.c"
  return (__retres15);
  }
}
}
# 130 "xmltok_impl.c"
static int normal_scanDecl(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  int tmp ;
  struct normal_encoding *mem_6 ;
  struct normal_encoding *mem_7 ;
  char const *mem_8 ;
  struct normal_encoding *mem_9 ;
  int __retres10 ;

  {
  __CrestCall(76155, 834);

  {
  __CrestLoad(76158, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76157, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76156, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 134 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76159, 48414, 1);
    __CrestLoad(76161, (unsigned long )0, (long long )-1);
    __CrestStore(76162, (unsigned long )(& __retres10));
# 135 "xmltok_impl.c"
    __retres10 = -1;
# 135 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76160, 48416, 0);

  }
  }
  {
# 136 "xmltok_impl.c"
  mem_6 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(76165, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
  __CrestLoad(76164, (unsigned long )0, (long long )27);
  __CrestApply2(76163, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 27));
# 137 "xmltok_impl.c"
  if ((int )mem_6->type[(unsigned char )*ptr] == 27) {
    __CrestBranch(76166, 48421, 1);
# 137 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(76167, 48422, 0);

  }
  }
  {
  __CrestLoad(76170, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
  __CrestLoad(76169, (unsigned long )0, (long long )20);
  __CrestApply2(76168, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 20));
# 139 "xmltok_impl.c"
  if ((int )mem_6->type[(unsigned char )*ptr] == 20) {
    __CrestBranch(76171, 48424, 1);
# 139 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(76172, 48425, 0);

  }
  }
  {
  __CrestLoad(76175, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
  __CrestLoad(76174, (unsigned long )0, (long long )24);
  __CrestApply2(76173, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 24));
# 143 "xmltok_impl.c"
  if ((int )mem_6->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(76176, 48427, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(76177, 48428, 0);

  }
  }
  {
  __CrestLoad(76180, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
  __CrestLoad(76179, (unsigned long )0, (long long )22);
  __CrestApply2(76178, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 22));
# 143 "xmltok_impl.c"
  if ((int )mem_6->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(76181, 48430, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(76182, 48431, 0);

  }
  }
# 146 "xmltok_impl.c"
  goto switch_default;
  case_27:
# 138 "xmltok_impl.c"
  tmp = normal_scanComment(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(76184, (long long )tmp);
  __CrestStore(76183, (unsigned long )(& tmp));
  __CrestLoad(76185, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(76186, (unsigned long )(& __retres10));
# 138 "xmltok_impl.c"
  __retres10 = tmp;
# 138 "xmltok_impl.c"
  goto return_label;
  case_20:
# 140 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(76187, (unsigned long )0, (long long )33);
  __CrestStore(76188, (unsigned long )(& __retres10));
# 141 "xmltok_impl.c"
  __retres10 = 33;
# 141 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 144 "xmltok_impl.c"
  ptr ++;
# 145 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 147 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76189, (unsigned long )0, (long long )0);
  __CrestStore(76190, (unsigned long )(& __retres10));
# 148 "xmltok_impl.c"
  __retres10 = 0;
# 148 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 150 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(76193, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(76192, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(76191, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 150 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(76194, 48449, 1);

    } else {
      __CrestBranch(76195, 48450, 0);
# 150 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 151 "xmltok_impl.c"
    mem_7 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(76198, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76197, (unsigned long )0, (long long )30);
    __CrestApply2(76196, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 30));
# 152 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(76199, 48455, 1);
# 152 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(76200, 48456, 0);

    }
    }
    {
    __CrestLoad(76203, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76202, (unsigned long )0, (long long )10);
    __CrestApply2(76201, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 10));
# 162 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(76204, 48458, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(76205, 48459, 0);

    }
    }
    {
    __CrestLoad(76208, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76207, (unsigned long )0, (long long )9);
    __CrestApply2(76206, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 9));
# 162 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(76209, 48461, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(76210, 48462, 0);

    }
    }
    {
    __CrestLoad(76213, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76212, (unsigned long )0, (long long )21);
    __CrestApply2(76211, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 21));
# 162 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(76214, 48464, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(76215, 48465, 0);

    }
    }
    {
    __CrestLoad(76218, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76217, (unsigned long )0, (long long )24);
    __CrestApply2(76216, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 24));
# 166 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(76219, 48467, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(76220, 48468, 0);

    }
    }
    {
    __CrestLoad(76223, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(76222, (unsigned long )0, (long long )22);
    __CrestApply2(76221, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 22));
# 166 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(76224, 48470, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(76225, 48471, 0);

    }
    }
# 169 "xmltok_impl.c"
    goto switch_default___0;
    case_30:
    {
    __CrestLoad(76230, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(76229, (unsigned long )0, (long long )1);
    __CrestApply2(76228, 18, (long long )((unsigned long )(ptr + 1)));
    __CrestLoad(76227, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(76226, 12, (long long )((unsigned long )(ptr + 1) == (unsigned long )end));
# 153 "xmltok_impl.c"
    if ((unsigned long )(ptr + 1) == (unsigned long )end) {
      __CrestBranch(76231, 48474, 1);
      __CrestLoad(76233, (unsigned long )0, (long long )-1);
      __CrestStore(76234, (unsigned long )(& __retres10));
# 154 "xmltok_impl.c"
      __retres10 = -1;
# 154 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76232, 48476, 0);

    }
    }
    {
# 156 "xmltok_impl.c"
    mem_8 = ptr + 1;
# 156 "xmltok_impl.c"
    mem_9 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(76237, (unsigned long )(& mem_9->type[(unsigned char )*mem_8]), (long long )mem_9->type[(unsigned char )*mem_8]);
    __CrestLoad(76236, (unsigned long )0, (long long )30);
    __CrestApply2(76235, 12, (long long )((int )mem_9->type[(unsigned char )*mem_8] == 30));
# 157 "xmltok_impl.c"
    if ((int )mem_9->type[(unsigned char )*mem_8] == 30) {
      __CrestBranch(76238, 48481, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(76239, 48482, 0);

    }
    }
    {
    __CrestLoad(76242, (unsigned long )(& mem_9->type[(unsigned char )*mem_8]), (long long )mem_9->type[(unsigned char )*mem_8]);
    __CrestLoad(76241, (unsigned long )0, (long long )10);
    __CrestApply2(76240, 12, (long long )((int )mem_9->type[(unsigned char )*mem_8] == 10));
# 157 "xmltok_impl.c"
    if ((int )mem_9->type[(unsigned char )*mem_8] == 10) {
      __CrestBranch(76243, 48484, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(76244, 48485, 0);

    }
    }
    {
    __CrestLoad(76247, (unsigned long )(& mem_9->type[(unsigned char )*mem_8]), (long long )mem_9->type[(unsigned char )*mem_8]);
    __CrestLoad(76246, (unsigned long )0, (long long )9);
    __CrestApply2(76245, 12, (long long )((int )mem_9->type[(unsigned char )*mem_8] == 9));
# 157 "xmltok_impl.c"
    if ((int )mem_9->type[(unsigned char )*mem_8] == 9) {
      __CrestBranch(76248, 48487, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(76249, 48488, 0);

    }
    }
    {
    __CrestLoad(76252, (unsigned long )(& mem_9->type[(unsigned char )*mem_8]), (long long )mem_9->type[(unsigned char )*mem_8]);
    __CrestLoad(76251, (unsigned long )0, (long long )21);
    __CrestApply2(76250, 12, (long long )((int )mem_9->type[(unsigned char )*mem_8] == 21));
# 157 "xmltok_impl.c"
    if ((int )mem_9->type[(unsigned char )*mem_8] == 21) {
      __CrestBranch(76253, 48490, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(76254, 48491, 0);

    }
    }
# 156 "xmltok_impl.c"
    goto switch_break___1;
    case_30___0:
    case_10:
    case_9:
    case_21:
# 158 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76255, (unsigned long )0, (long long )0);
    __CrestStore(76256, (unsigned long )(& __retres10));
# 159 "xmltok_impl.c"
    __retres10 = 0;
# 159 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
    }
    case_10___0:
    case_9___0:
    case_21___0:
# 163 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76257, (unsigned long )0, (long long )16);
    __CrestStore(76258, (unsigned long )(& __retres10));
# 164 "xmltok_impl.c"
    __retres10 = 16;
# 164 "xmltok_impl.c"
    goto return_label;
    case_24___0:
    case_22___0:
# 167 "xmltok_impl.c"
    ptr ++;
# 168 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 170 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76259, (unsigned long )0, (long long )0);
    __CrestStore(76260, (unsigned long )(& __retres10));
# 171 "xmltok_impl.c"
    __retres10 = 0;
# 171 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(76261, (unsigned long )0, (long long )-1);
  __CrestStore(76262, (unsigned long )(& __retres10));
# 174 "xmltok_impl.c"
  __retres10 = -1;
  return_label:
  {
  __CrestLoad(76263, (unsigned long )(& __retres10), (long long )__retres10);
  __CrestReturn(76264);
# 130 "xmltok_impl.c"
  return (__retres10);
  }
}
}
# 177 "xmltok_impl.c"
static int normal_checkPiTarget(ENCODING const *enc , char const *ptr , char const *end ,
                                int *tokPtr )
{
  int upper ;
  int __retres6 ;

  {
  __CrestCall(76265, 835);

  __CrestLoad(76266, (unsigned long )0, (long long )0);
  __CrestStore(76267, (unsigned long )(& upper));
# 181 "xmltok_impl.c"
  upper = 0;
  __CrestLoad(76268, (unsigned long )0, (long long )11);
  __CrestStore(76269, (unsigned long )tokPtr);
# 182 "xmltok_impl.c"
  *tokPtr = 11;
  {
  __CrestLoad(76274, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76273, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76272, 18, (long long )(end - ptr));
  __CrestLoad(76271, (unsigned long )0, (long long )3L);
  __CrestApply2(76270, 13, (long long )(end - ptr != 3L));
# 183 "xmltok_impl.c"
  if (end - ptr != 3L) {
    __CrestBranch(76275, 48511, 1);
    __CrestLoad(76277, (unsigned long )0, (long long )1);
    __CrestStore(76278, (unsigned long )(& __retres6));
# 184 "xmltok_impl.c"
    __retres6 = 1;
# 184 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76276, 48513, 0);

  }
  }
  {
  {
  __CrestLoad(76281, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76280, (unsigned long )0, (long long )120);
  __CrestApply2(76279, 12, (long long )((int const )*ptr == 120));
# 186 "xmltok_impl.c"
  if ((int const )*ptr == 120) {
    __CrestBranch(76282, 48516, 1);
# 186 "xmltok_impl.c"
    goto case_120;
  } else {
    __CrestBranch(76283, 48517, 0);

  }
  }
  {
  __CrestLoad(76286, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76285, (unsigned long )0, (long long )88);
  __CrestApply2(76284, 12, (long long )((int const )*ptr == 88));
# 188 "xmltok_impl.c"
  if ((int const )*ptr == 88) {
    __CrestBranch(76287, 48519, 1);
# 188 "xmltok_impl.c"
    goto case_88;
  } else {
    __CrestBranch(76288, 48520, 0);

  }
  }
# 191 "xmltok_impl.c"
  goto switch_default;
  case_120:
# 187 "xmltok_impl.c"
  goto switch_break;
  case_88:
  __CrestLoad(76289, (unsigned long )0, (long long )1);
  __CrestStore(76290, (unsigned long )(& upper));
# 189 "xmltok_impl.c"
  upper = 1;
# 190 "xmltok_impl.c"
  goto switch_break;
  switch_default:
  __CrestLoad(76291, (unsigned long )0, (long long )1);
  __CrestStore(76292, (unsigned long )(& __retres6));
# 192 "xmltok_impl.c"
  __retres6 = 1;
# 192 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
# 194 "xmltok_impl.c"
  ptr ++;
  {
  {
  __CrestLoad(76295, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76294, (unsigned long )0, (long long )109);
  __CrestApply2(76293, 12, (long long )((int const )*ptr == 109));
# 196 "xmltok_impl.c"
  if ((int const )*ptr == 109) {
    __CrestBranch(76296, 48531, 1);
# 196 "xmltok_impl.c"
    goto case_109;
  } else {
    __CrestBranch(76297, 48532, 0);

  }
  }
  {
  __CrestLoad(76300, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76299, (unsigned long )0, (long long )77);
  __CrestApply2(76298, 12, (long long )((int const )*ptr == 77));
# 198 "xmltok_impl.c"
  if ((int const )*ptr == 77) {
    __CrestBranch(76301, 48534, 1);
# 198 "xmltok_impl.c"
    goto case_77;
  } else {
    __CrestBranch(76302, 48535, 0);

  }
  }
# 201 "xmltok_impl.c"
  goto switch_default___0;
  case_109:
# 197 "xmltok_impl.c"
  goto switch_break___0;
  case_77:
  __CrestLoad(76303, (unsigned long )0, (long long )1);
  __CrestStore(76304, (unsigned long )(& upper));
# 199 "xmltok_impl.c"
  upper = 1;
# 200 "xmltok_impl.c"
  goto switch_break___0;
  switch_default___0:
  __CrestLoad(76305, (unsigned long )0, (long long )1);
  __CrestStore(76306, (unsigned long )(& __retres6));
# 202 "xmltok_impl.c"
  __retres6 = 1;
# 202 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 204 "xmltok_impl.c"
  ptr ++;
  {
  {
  __CrestLoad(76309, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76308, (unsigned long )0, (long long )108);
  __CrestApply2(76307, 12, (long long )((int const )*ptr == 108));
# 206 "xmltok_impl.c"
  if ((int const )*ptr == 108) {
    __CrestBranch(76310, 48546, 1);
# 206 "xmltok_impl.c"
    goto case_108;
  } else {
    __CrestBranch(76311, 48547, 0);

  }
  }
  {
  __CrestLoad(76314, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76313, (unsigned long )0, (long long )76);
  __CrestApply2(76312, 12, (long long )((int const )*ptr == 76));
# 208 "xmltok_impl.c"
  if ((int const )*ptr == 76) {
    __CrestBranch(76315, 48549, 1);
# 208 "xmltok_impl.c"
    goto case_76;
  } else {
    __CrestBranch(76316, 48550, 0);

  }
  }
# 211 "xmltok_impl.c"
  goto switch_default___1;
  case_108:
# 207 "xmltok_impl.c"
  goto switch_break___1;
  case_76:
  __CrestLoad(76317, (unsigned long )0, (long long )1);
  __CrestStore(76318, (unsigned long )(& upper));
# 209 "xmltok_impl.c"
  upper = 1;
# 210 "xmltok_impl.c"
  goto switch_break___1;
  switch_default___1:
  __CrestLoad(76319, (unsigned long )0, (long long )1);
  __CrestStore(76320, (unsigned long )(& __retres6));
# 212 "xmltok_impl.c"
  __retres6 = 1;
# 212 "xmltok_impl.c"
  goto return_label;
  switch_break___1: ;
  }
  {
  __CrestLoad(76323, (unsigned long )(& upper), (long long )upper);
  __CrestLoad(76322, (unsigned long )0, (long long )0);
  __CrestApply2(76321, 13, (long long )(upper != 0));
# 214 "xmltok_impl.c"
  if (upper != 0) {
    __CrestBranch(76324, 48559, 1);
    __CrestLoad(76326, (unsigned long )0, (long long )0);
    __CrestStore(76327, (unsigned long )(& __retres6));
# 215 "xmltok_impl.c"
    __retres6 = 0;
# 215 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76325, 48561, 0);

  }
  }
  __CrestLoad(76328, (unsigned long )0, (long long )12);
  __CrestStore(76329, (unsigned long )tokPtr);
# 216 "xmltok_impl.c"
  *tokPtr = 12;
  __CrestLoad(76330, (unsigned long )0, (long long )1);
  __CrestStore(76331, (unsigned long )(& __retres6));
# 217 "xmltok_impl.c"
  __retres6 = 1;
  return_label:
  {
  __CrestLoad(76332, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(76333);
# 177 "xmltok_impl.c"
  return (__retres6);
  }
}
}
# 222 "xmltok_impl.c"
static int normal_scanPi(ENCODING const *enc , char const *ptr , char const *end ,
                         char const **nextTokPtr )
{
  int tok ;
  char const *target ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct normal_encoding *mem_18 ;
  struct normal_encoding const *mem_19 ;
  int (*mem_20)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_25 ;
  struct normal_encoding const *mem_26 ;
  int (*mem_27)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_28 ;
  int (*mem_29)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_30 ;
  int (*mem_31)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_32 ;
  struct normal_encoding const *mem_33 ;
  int (*mem_34)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_35 ;
  int (*mem_36)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_37 ;
  int (*mem_38)(ENCODING const * , char const * ) ;
  int __retres39 ;

  {
  __CrestCall(76334, 836);
# 227 "xmltok_impl.c"
  target = ptr;
  {
  __CrestLoad(76337, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76336, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76335, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 228 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76338, 48567, 1);
    __CrestLoad(76340, (unsigned long )0, (long long )-1);
    __CrestStore(76341, (unsigned long )(& __retres39));
# 229 "xmltok_impl.c"
    __retres39 = -1;
# 229 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76339, 48569, 0);

  }
  }
  {
# 230 "xmltok_impl.c"
  mem_18 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(76344, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76343, (unsigned long )0, (long long )29);
  __CrestApply2(76342, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 29));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(76345, 48574, 1);
# 231 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(76346, 48575, 0);

  }
  }
  {
  __CrestLoad(76349, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76348, (unsigned long )0, (long long )24);
  __CrestApply2(76347, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 24));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(76350, 48577, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(76351, 48578, 0);

  }
  }
  {
  __CrestLoad(76354, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76353, (unsigned long )0, (long long )22);
  __CrestApply2(76352, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 22));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(76355, 48580, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(76356, 48581, 0);

  }
  }
  {
  __CrestLoad(76359, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76358, (unsigned long )0, (long long )5);
  __CrestApply2(76357, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 5));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(76360, 48583, 1);
# 231 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(76361, 48584, 0);

  }
  }
  {
  __CrestLoad(76364, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76363, (unsigned long )0, (long long )6);
  __CrestApply2(76362, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 6));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(76365, 48586, 1);
# 231 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(76366, 48587, 0);

  }
  }
  {
  __CrestLoad(76369, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
  __CrestLoad(76368, (unsigned long )0, (long long )7);
  __CrestApply2(76367, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 7));
# 231 "xmltok_impl.c"
  if ((int )mem_18->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(76370, 48589, 1);
# 231 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(76371, 48590, 0);

  }
  }
# 232 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76372, (unsigned long )0, (long long )0);
  __CrestStore(76373, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
  __retres39 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 231 "xmltok_impl.c"
  ptr ++;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(76378, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76377, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76376, 18, (long long )(end - ptr));
  __CrestLoad(76375, (unsigned long )0, (long long )2L);
  __CrestApply2(76374, 16, (long long )(end - ptr < 2L));
# 231 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(76379, 48598, 1);
    __CrestLoad(76381, (unsigned long )0, (long long )-2);
    __CrestStore(76382, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76380, 48600, 0);

  }
  }
# 231 "xmltok_impl.c"
  mem_19 = (struct normal_encoding const *)enc;
# 231 "xmltok_impl.c"
  mem_20 = mem_19->isNmstrt2;
# 231 "xmltok_impl.c"
  tmp = (*mem_20)(enc, ptr);
  __CrestHandleReturn(76384, (long long )tmp);
  __CrestStore(76383, (unsigned long )(& tmp));
  {
  __CrestLoad(76387, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(76386, (unsigned long )0, (long long )0);
  __CrestApply2(76385, 13, (long long )(tmp != 0));
# 231 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(76388, 48603, 1);

  } else {
    __CrestBranch(76389, 48604, 0);
# 231 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76390, (unsigned long )0, (long long )0);
    __CrestStore(76391, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = 0;
# 231 "xmltok_impl.c"
    goto return_label;
  }
  }
# 231 "xmltok_impl.c"
  ptr += 2;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(76396, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76395, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76394, 18, (long long )(end - ptr));
  __CrestLoad(76393, (unsigned long )0, (long long )3L);
  __CrestApply2(76392, 16, (long long )(end - ptr < 3L));
# 231 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(76397, 48610, 1);
    __CrestLoad(76399, (unsigned long )0, (long long )-2);
    __CrestStore(76400, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76398, 48612, 0);

  }
  }
# 231 "xmltok_impl.c"
  mem_21 = (struct normal_encoding const *)enc;
# 231 "xmltok_impl.c"
  mem_22 = mem_21->isNmstrt3;
# 231 "xmltok_impl.c"
  tmp___0 = (*mem_22)(enc, ptr);
  __CrestHandleReturn(76402, (long long )tmp___0);
  __CrestStore(76401, (unsigned long )(& tmp___0));
  {
  __CrestLoad(76405, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(76404, (unsigned long )0, (long long )0);
  __CrestApply2(76403, 13, (long long )(tmp___0 != 0));
# 231 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(76406, 48615, 1);

  } else {
    __CrestBranch(76407, 48616, 0);
# 231 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76408, (unsigned long )0, (long long )0);
    __CrestStore(76409, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = 0;
# 231 "xmltok_impl.c"
    goto return_label;
  }
  }
# 231 "xmltok_impl.c"
  ptr += 3;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(76414, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76413, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76412, 18, (long long )(end - ptr));
  __CrestLoad(76411, (unsigned long )0, (long long )4L);
  __CrestApply2(76410, 16, (long long )(end - ptr < 4L));
# 231 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(76415, 48622, 1);
    __CrestLoad(76417, (unsigned long )0, (long long )-2);
    __CrestStore(76418, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76416, 48624, 0);

  }
  }
# 231 "xmltok_impl.c"
  mem_23 = (struct normal_encoding const *)enc;
# 231 "xmltok_impl.c"
  mem_24 = mem_23->isNmstrt4;
# 231 "xmltok_impl.c"
  tmp___1 = (*mem_24)(enc, ptr);
  __CrestHandleReturn(76420, (long long )tmp___1);
  __CrestStore(76419, (unsigned long )(& tmp___1));
  {
  __CrestLoad(76423, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(76422, (unsigned long )0, (long long )0);
  __CrestApply2(76421, 13, (long long )(tmp___1 != 0));
# 231 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(76424, 48627, 1);

  } else {
    __CrestBranch(76425, 48628, 0);
# 231 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76426, (unsigned long )0, (long long )0);
    __CrestStore(76427, (unsigned long )(& __retres39));
# 231 "xmltok_impl.c"
    __retres39 = 0;
# 231 "xmltok_impl.c"
    goto return_label;
  }
  }
# 231 "xmltok_impl.c"
  ptr += 4;
# 231 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 233 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76428, (unsigned long )0, (long long )0);
  __CrestStore(76429, (unsigned long )(& __retres39));
# 234 "xmltok_impl.c"
  __retres39 = 0;
# 234 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 236 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(76432, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(76431, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(76430, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 236 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(76433, 48641, 1);

    } else {
      __CrestBranch(76434, 48642, 0);
# 236 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 237 "xmltok_impl.c"
    mem_25 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(76437, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76436, (unsigned long )0, (long long )29);
    __CrestApply2(76435, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 29));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(76438, 48647, 1);
# 238 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(76439, 48648, 0);

    }
    }
    {
    __CrestLoad(76442, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76441, (unsigned long )0, (long long )27);
    __CrestApply2(76440, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 27));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(76443, 48650, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(76444, 48651, 0);

    }
    }
    {
    __CrestLoad(76447, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76446, (unsigned long )0, (long long )26);
    __CrestApply2(76445, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 26));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(76448, 48653, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(76449, 48654, 0);

    }
    }
    {
    __CrestLoad(76452, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76451, (unsigned long )0, (long long )25);
    __CrestApply2(76450, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 25));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(76453, 48656, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(76454, 48657, 0);

    }
    }
    {
    __CrestLoad(76457, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76456, (unsigned long )0, (long long )24);
    __CrestApply2(76455, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 24));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(76458, 48659, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(76459, 48660, 0);

    }
    }
    {
    __CrestLoad(76462, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76461, (unsigned long )0, (long long )22);
    __CrestApply2(76460, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 22));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(76463, 48662, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(76464, 48663, 0);

    }
    }
    {
    __CrestLoad(76467, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76466, (unsigned long )0, (long long )5);
    __CrestApply2(76465, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 5));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(76468, 48665, 1);
# 238 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(76469, 48666, 0);

    }
    }
    {
    __CrestLoad(76472, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76471, (unsigned long )0, (long long )6);
    __CrestApply2(76470, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 6));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(76473, 48668, 1);
# 238 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(76474, 48669, 0);

    }
    }
    {
    __CrestLoad(76477, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76476, (unsigned long )0, (long long )7);
    __CrestApply2(76475, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 7));
# 238 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(76478, 48671, 1);
# 238 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(76479, 48672, 0);

    }
    }
    {
    __CrestLoad(76482, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76481, (unsigned long )0, (long long )10);
    __CrestApply2(76480, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 10));
# 239 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(76483, 48674, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(76484, 48675, 0);

    }
    }
    {
    __CrestLoad(76487, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76486, (unsigned long )0, (long long )9);
    __CrestApply2(76485, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 9));
# 239 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(76488, 48677, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(76489, 48678, 0);

    }
    }
    {
    __CrestLoad(76492, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76491, (unsigned long )0, (long long )21);
    __CrestApply2(76490, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 21));
# 239 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(76493, 48680, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(76494, 48681, 0);

    }
    }
    {
    __CrestLoad(76497, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
    __CrestLoad(76496, (unsigned long )0, (long long )15);
    __CrestApply2(76495, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 15));
# 263 "xmltok_impl.c"
    if ((int )mem_25->type[(unsigned char )*ptr] == 15) {
      __CrestBranch(76498, 48683, 1);
# 263 "xmltok_impl.c"
      goto case_15___0;
    } else {
      __CrestBranch(76499, 48684, 0);

    }
    }
# 276 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76500, (unsigned long )0, (long long )0);
    __CrestStore(76501, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
    __retres39 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 238 "xmltok_impl.c"
    ptr ++;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(76506, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76505, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76504, 18, (long long )(end - ptr));
    __CrestLoad(76503, (unsigned long )0, (long long )2L);
    __CrestApply2(76502, 16, (long long )(end - ptr < 2L));
# 238 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(76507, 48692, 1);
      __CrestLoad(76509, (unsigned long )0, (long long )-2);
      __CrestStore(76510, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76508, 48694, 0);

    }
    }
# 238 "xmltok_impl.c"
    mem_26 = (struct normal_encoding const *)enc;
# 238 "xmltok_impl.c"
    mem_27 = mem_26->isName2;
# 238 "xmltok_impl.c"
    tmp___2 = (*mem_27)(enc, ptr);
    __CrestHandleReturn(76512, (long long )tmp___2);
    __CrestStore(76511, (unsigned long )(& tmp___2));
    {
    __CrestLoad(76515, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(76514, (unsigned long )0, (long long )0);
    __CrestApply2(76513, 13, (long long )(tmp___2 != 0));
# 238 "xmltok_impl.c"
    if (tmp___2 != 0) {
      __CrestBranch(76516, 48697, 1);

    } else {
      __CrestBranch(76517, 48698, 0);
# 238 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76518, (unsigned long )0, (long long )0);
      __CrestStore(76519, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = 0;
# 238 "xmltok_impl.c"
      goto return_label;
    }
    }
# 238 "xmltok_impl.c"
    ptr += 2;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(76524, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76523, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76522, 18, (long long )(end - ptr));
    __CrestLoad(76521, (unsigned long )0, (long long )3L);
    __CrestApply2(76520, 16, (long long )(end - ptr < 3L));
# 238 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(76525, 48704, 1);
      __CrestLoad(76527, (unsigned long )0, (long long )-2);
      __CrestStore(76528, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76526, 48706, 0);

    }
    }
# 238 "xmltok_impl.c"
    mem_28 = (struct normal_encoding const *)enc;
# 238 "xmltok_impl.c"
    mem_29 = mem_28->isName3;
# 238 "xmltok_impl.c"
    tmp___3 = (*mem_29)(enc, ptr);
    __CrestHandleReturn(76530, (long long )tmp___3);
    __CrestStore(76529, (unsigned long )(& tmp___3));
    {
    __CrestLoad(76533, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(76532, (unsigned long )0, (long long )0);
    __CrestApply2(76531, 13, (long long )(tmp___3 != 0));
# 238 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(76534, 48709, 1);

    } else {
      __CrestBranch(76535, 48710, 0);
# 238 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76536, (unsigned long )0, (long long )0);
      __CrestStore(76537, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = 0;
# 238 "xmltok_impl.c"
      goto return_label;
    }
    }
# 238 "xmltok_impl.c"
    ptr += 3;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(76542, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76541, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76540, 18, (long long )(end - ptr));
    __CrestLoad(76539, (unsigned long )0, (long long )4L);
    __CrestApply2(76538, 16, (long long )(end - ptr < 4L));
# 238 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(76543, 48716, 1);
      __CrestLoad(76545, (unsigned long )0, (long long )-2);
      __CrestStore(76546, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76544, 48718, 0);

    }
    }
# 238 "xmltok_impl.c"
    mem_30 = (struct normal_encoding const *)enc;
# 238 "xmltok_impl.c"
    mem_31 = mem_30->isName4;
# 238 "xmltok_impl.c"
    tmp___4 = (*mem_31)(enc, ptr);
    __CrestHandleReturn(76548, (long long )tmp___4);
    __CrestStore(76547, (unsigned long )(& tmp___4));
    {
    __CrestLoad(76551, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(76550, (unsigned long )0, (long long )0);
    __CrestApply2(76549, 13, (long long )(tmp___4 != 0));
# 238 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(76552, 48721, 1);

    } else {
      __CrestBranch(76553, 48722, 0);
# 238 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76554, (unsigned long )0, (long long )0);
      __CrestStore(76555, (unsigned long )(& __retres39));
# 238 "xmltok_impl.c"
      __retres39 = 0;
# 238 "xmltok_impl.c"
      goto return_label;
    }
    }
# 238 "xmltok_impl.c"
    ptr += 4;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 240 "xmltok_impl.c"
    tmp___5 = normal_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(76557, (long long )tmp___5);
    __CrestStore(76556, (unsigned long )(& tmp___5));
    {
    __CrestLoad(76560, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(76559, (unsigned long )0, (long long )0);
    __CrestApply2(76558, 13, (long long )(tmp___5 != 0));
# 240 "xmltok_impl.c"
    if (tmp___5 != 0) {
      __CrestBranch(76561, 48729, 1);

    } else {
      __CrestBranch(76562, 48730, 0);
# 241 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76563, (unsigned long )0, (long long )0);
      __CrestStore(76564, (unsigned long )(& __retres39));
# 242 "xmltok_impl.c"
      __retres39 = 0;
# 242 "xmltok_impl.c"
      goto return_label;
    }
    }
# 244 "xmltok_impl.c"
    ptr ++;
    {
# 245 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(76567, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(76566, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(76565, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 245 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(76568, 48738, 1);

      } else {
        __CrestBranch(76569, 48739, 0);
# 245 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 246 "xmltok_impl.c"
      mem_32 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(76572, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76571, (unsigned long )0, (long long )5);
      __CrestApply2(76570, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 5));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 5) {
        __CrestBranch(76573, 48744, 1);
# 247 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(76574, 48745, 0);

      }
      }
      {
      __CrestLoad(76577, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76576, (unsigned long )0, (long long )6);
      __CrestApply2(76575, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 6));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 6) {
        __CrestBranch(76578, 48747, 1);
# 247 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(76579, 48748, 0);

      }
      }
      {
      __CrestLoad(76582, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76581, (unsigned long )0, (long long )7);
      __CrestApply2(76580, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 7));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 7) {
        __CrestBranch(76583, 48750, 1);
# 247 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(76584, 48751, 0);

      }
      }
      {
      __CrestLoad(76587, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76586, (unsigned long )0, (long long )8);
      __CrestApply2(76585, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 8));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 8) {
        __CrestBranch(76588, 48753, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76589, 48754, 0);

      }
      }
      {
      __CrestLoad(76592, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76591, (unsigned long )0, (long long )1);
      __CrestApply2(76590, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 1));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 1) {
        __CrestBranch(76593, 48756, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76594, 48757, 0);

      }
      }
      {
      __CrestLoad(76597, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76596, (unsigned long )0, (long long )0);
      __CrestApply2(76595, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 0));
# 247 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 0) {
        __CrestBranch(76598, 48759, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(76599, 48760, 0);

      }
      }
      {
      __CrestLoad(76602, (unsigned long )(& mem_32->type[(unsigned char )*ptr]), (long long )mem_32->type[(unsigned char )*ptr]);
      __CrestLoad(76601, (unsigned long )0, (long long )15);
      __CrestApply2(76600, 12, (long long )((int )mem_32->type[(unsigned char )*ptr] == 15));
# 248 "xmltok_impl.c"
      if ((int )mem_32->type[(unsigned char )*ptr] == 15) {
        __CrestBranch(76603, 48762, 1);
# 248 "xmltok_impl.c"
        goto case_15;
      } else {
        __CrestBranch(76604, 48763, 0);

      }
      }
# 257 "xmltok_impl.c"
      goto switch_default___0;
      case_5___1:
      {
      __CrestLoad(76609, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76608, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76607, 18, (long long )(end - ptr));
      __CrestLoad(76606, (unsigned long )0, (long long )2L);
      __CrestApply2(76605, 16, (long long )(end - ptr < 2L));
# 247 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(76610, 48766, 1);
        __CrestLoad(76612, (unsigned long )0, (long long )-2);
        __CrestStore(76613, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76611, 48768, 0);

      }
      }
# 247 "xmltok_impl.c"
      mem_33 = (struct normal_encoding const *)enc;
# 247 "xmltok_impl.c"
      mem_34 = mem_33->isInvalid2;
# 247 "xmltok_impl.c"
      tmp___6 = (*mem_34)(enc, ptr);
      __CrestHandleReturn(76615, (long long )tmp___6);
      __CrestStore(76614, (unsigned long )(& tmp___6));
      {
      __CrestLoad(76618, (unsigned long )(& tmp___6), (long long )tmp___6);
      __CrestLoad(76617, (unsigned long )0, (long long )0);
      __CrestApply2(76616, 13, (long long )(tmp___6 != 0));
# 247 "xmltok_impl.c"
      if (tmp___6 != 0) {
        __CrestBranch(76619, 48771, 1);
# 247 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76621, (unsigned long )0, (long long )0);
        __CrestStore(76622, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = 0;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76620, 48774, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 2;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_6___1:
      {
      __CrestLoad(76627, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76626, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76625, 18, (long long )(end - ptr));
      __CrestLoad(76624, (unsigned long )0, (long long )3L);
      __CrestApply2(76623, 16, (long long )(end - ptr < 3L));
# 247 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(76628, 48778, 1);
        __CrestLoad(76630, (unsigned long )0, (long long )-2);
        __CrestStore(76631, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76629, 48780, 0);

      }
      }
# 247 "xmltok_impl.c"
      mem_35 = (struct normal_encoding const *)enc;
# 247 "xmltok_impl.c"
      mem_36 = mem_35->isInvalid3;
# 247 "xmltok_impl.c"
      tmp___7 = (*mem_36)(enc, ptr);
      __CrestHandleReturn(76633, (long long )tmp___7);
      __CrestStore(76632, (unsigned long )(& tmp___7));
      {
      __CrestLoad(76636, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestLoad(76635, (unsigned long )0, (long long )0);
      __CrestApply2(76634, 13, (long long )(tmp___7 != 0));
# 247 "xmltok_impl.c"
      if (tmp___7 != 0) {
        __CrestBranch(76637, 48783, 1);
# 247 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76639, (unsigned long )0, (long long )0);
        __CrestStore(76640, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = 0;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76638, 48786, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 3;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_7___1:
      {
      __CrestLoad(76645, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(76644, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(76643, 18, (long long )(end - ptr));
      __CrestLoad(76642, (unsigned long )0, (long long )4L);
      __CrestApply2(76641, 16, (long long )(end - ptr < 4L));
# 247 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(76646, 48790, 1);
        __CrestLoad(76648, (unsigned long )0, (long long )-2);
        __CrestStore(76649, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76647, 48792, 0);

      }
      }
# 247 "xmltok_impl.c"
      mem_37 = (struct normal_encoding const *)enc;
# 247 "xmltok_impl.c"
      mem_38 = mem_37->isInvalid4;
# 247 "xmltok_impl.c"
      tmp___8 = (*mem_38)(enc, ptr);
      __CrestHandleReturn(76651, (long long )tmp___8);
      __CrestStore(76650, (unsigned long )(& tmp___8));
      {
      __CrestLoad(76654, (unsigned long )(& tmp___8), (long long )tmp___8);
      __CrestLoad(76653, (unsigned long )0, (long long )0);
      __CrestApply2(76652, 13, (long long )(tmp___8 != 0));
# 247 "xmltok_impl.c"
      if (tmp___8 != 0) {
        __CrestBranch(76655, 48795, 1);
# 247 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76657, (unsigned long )0, (long long )0);
        __CrestStore(76658, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
        __retres39 = 0;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76656, 48798, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 4;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_8:
      case_1:
      case_0:
# 247 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76659, (unsigned long )0, (long long )0);
      __CrestStore(76660, (unsigned long )(& __retres39));
# 247 "xmltok_impl.c"
      __retres39 = 0;
# 247 "xmltok_impl.c"
      goto return_label;
      case_15:
# 249 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(76663, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(76662, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(76661, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 250 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(76664, 48806, 1);
        __CrestLoad(76666, (unsigned long )0, (long long )-1);
        __CrestStore(76667, (unsigned long )(& __retres39));
# 251 "xmltok_impl.c"
        __retres39 = -1;
# 251 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76665, 48808, 0);

      }
      }
      {
      __CrestLoad(76670, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(76669, (unsigned long )0, (long long )62);
      __CrestApply2(76668, 12, (long long )((int const )*ptr == 62));
# 252 "xmltok_impl.c"
      if ((int const )*ptr == 62) {
        __CrestBranch(76671, 48810, 1);
# 253 "xmltok_impl.c"
        *nextTokPtr = ptr + 1;
        __CrestLoad(76673, (unsigned long )(& tok), (long long )tok);
        __CrestStore(76674, (unsigned long )(& __retres39));
# 254 "xmltok_impl.c"
        __retres39 = tok;
# 254 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76672, 48813, 0);

      }
      }
# 256 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 258 "xmltok_impl.c"
      ptr ++;
# 259 "xmltok_impl.c"
      goto switch_break___1;
      switch_break___1: ;
      }
      }
    }
    while_break___0: ;
    }
    __CrestLoad(76675, (unsigned long )0, (long long )-1);
    __CrestStore(76676, (unsigned long )(& __retres39));
# 262 "xmltok_impl.c"
    __retres39 = -1;
# 262 "xmltok_impl.c"
    goto return_label;
    case_15___0:
# 264 "xmltok_impl.c"
    tmp___9 = normal_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(76678, (long long )tmp___9);
    __CrestStore(76677, (unsigned long )(& tmp___9));
    {
    __CrestLoad(76681, (unsigned long )(& tmp___9), (long long )tmp___9);
    __CrestLoad(76680, (unsigned long )0, (long long )0);
    __CrestApply2(76679, 13, (long long )(tmp___9 != 0));
# 264 "xmltok_impl.c"
    if (tmp___9 != 0) {
      __CrestBranch(76682, 48823, 1);

    } else {
      __CrestBranch(76683, 48824, 0);
# 265 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76684, (unsigned long )0, (long long )0);
      __CrestStore(76685, (unsigned long )(& __retres39));
# 266 "xmltok_impl.c"
      __retres39 = 0;
# 266 "xmltok_impl.c"
      goto return_label;
    }
    }
# 268 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(76688, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(76687, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(76686, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 269 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(76689, 48829, 1);
      __CrestLoad(76691, (unsigned long )0, (long long )-1);
      __CrestStore(76692, (unsigned long )(& __retres39));
# 270 "xmltok_impl.c"
      __retres39 = -1;
# 270 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76690, 48831, 0);

    }
    }
    {
    __CrestLoad(76695, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(76694, (unsigned long )0, (long long )62);
    __CrestApply2(76693, 12, (long long )((int const )*ptr == 62));
# 271 "xmltok_impl.c"
    if ((int const )*ptr == 62) {
      __CrestBranch(76696, 48833, 1);
# 272 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(76698, (unsigned long )(& tok), (long long )tok);
      __CrestStore(76699, (unsigned long )(& __retres39));
# 273 "xmltok_impl.c"
      __retres39 = tok;
# 273 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76697, 48836, 0);

    }
    }
    switch_default___1:
# 277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76700, (unsigned long )0, (long long )0);
    __CrestStore(76701, (unsigned long )(& __retres39));
# 278 "xmltok_impl.c"
    __retres39 = 0;
# 278 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(76702, (unsigned long )0, (long long )-1);
  __CrestStore(76703, (unsigned long )(& __retres39));
# 281 "xmltok_impl.c"
  __retres39 = -1;
  return_label:
  {
  __CrestLoad(76704, (unsigned long )(& __retres39), (long long )__retres39);
  __CrestReturn(76705);
# 222 "xmltok_impl.c"
  return (__retres39);
  }
}
}
# 288 "xmltok_impl.c"
static int normal_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                   char const **nextTokPtr ) ;
# 288 "xmltok_impl.c"
static char const CDATA_LSQB[6] = { (char const )67, (char const )68, (char const )65, (char const )84,
        (char const )65, (char const )91};
# 284 "xmltok_impl.c"
static int normal_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                   char const **nextTokPtr )
{
  int i ;
  int __retres6 ;

  {
  __CrestCall(76706, 837);

  {
  __CrestLoad(76711, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76710, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76709, 18, (long long )(end - ptr));
  __CrestLoad(76708, (unsigned long )0, (long long )6L);
  __CrestApply2(76707, 16, (long long )(end - ptr < 6L));
# 292 "xmltok_impl.c"
  if (end - ptr < 6L) {
    __CrestBranch(76712, 48845, 1);
    __CrestLoad(76714, (unsigned long )0, (long long )-1);
    __CrestStore(76715, (unsigned long )(& __retres6));
# 293 "xmltok_impl.c"
    __retres6 = -1;
# 293 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76713, 48847, 0);

  }
  }
  __CrestLoad(76716, (unsigned long )0, (long long )0);
  __CrestStore(76717, (unsigned long )(& i));
# 294 "xmltok_impl.c"
  i = 0;
  {
# 294 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(76720, (unsigned long )(& i), (long long )i);
    __CrestLoad(76719, (unsigned long )0, (long long )6);
    __CrestApply2(76718, 16, (long long )(i < 6));
# 294 "xmltok_impl.c"
    if (i < 6) {
      __CrestBranch(76721, 48853, 1);

    } else {
      __CrestBranch(76722, 48854, 0);
# 294 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(76725, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(76724, (unsigned long )(& CDATA_LSQB[i]), (long long )CDATA_LSQB[i]);
    __CrestApply2(76723, 13, (long long )((int const )*ptr != (int const )CDATA_LSQB[i]));
# 295 "xmltok_impl.c"
    if ((int const )*ptr != (int const )CDATA_LSQB[i]) {
      __CrestBranch(76726, 48856, 1);
# 296 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76728, (unsigned long )0, (long long )0);
      __CrestStore(76729, (unsigned long )(& __retres6));
# 297 "xmltok_impl.c"
      __retres6 = 0;
# 297 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76727, 48859, 0);

    }
    }
    __CrestLoad(76732, (unsigned long )(& i), (long long )i);
    __CrestLoad(76731, (unsigned long )0, (long long )1);
    __CrestApply2(76730, 0, (long long )(i + 1));
    __CrestStore(76733, (unsigned long )(& i));
# 294 "xmltok_impl.c"
    i ++;
# 294 "xmltok_impl.c"
    ptr ++;
  }
  while_break: ;
  }
# 300 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76734, (unsigned long )0, (long long )8);
  __CrestStore(76735, (unsigned long )(& __retres6));
# 301 "xmltok_impl.c"
  __retres6 = 8;
  return_label:
  {
  __CrestLoad(76736, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(76737);
# 284 "xmltok_impl.c"
  return (__retres6);
  }
}
}
# 304 "xmltok_impl.c"
static int normal_cdataSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                  char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct normal_encoding *mem_12 ;
  struct normal_encoding *mem_13 ;
  struct normal_encoding const *mem_14 ;
  int (*mem_15)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_16 ;
  int (*mem_17)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_18 ;
  int (*mem_19)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_20 ;
  struct normal_encoding const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_25 ;
  int (*mem_26)(ENCODING const * , char const * ) ;
  int __retres27 ;

  {
  __CrestCall(76738, 838);

  {
  __CrestLoad(76741, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76740, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76739, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 308 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76742, 48866, 1);
    __CrestLoad(76744, (unsigned long )0, (long long )-4);
    __CrestStore(76745, (unsigned long )(& __retres27));
# 309 "xmltok_impl.c"
    __retres27 = -4;
# 309 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76743, 48868, 0);

  }
  }
  {
# 319 "xmltok_impl.c"
  mem_12 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(76748, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76747, (unsigned long )0, (long long )4);
  __CrestApply2(76746, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 4));
# 320 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 4) {
    __CrestBranch(76749, 48873, 1);
# 320 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(76750, 48874, 0);

  }
  }
  {
  __CrestLoad(76753, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76752, (unsigned long )0, (long long )9);
  __CrestApply2(76751, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 9));
# 335 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 9) {
    __CrestBranch(76754, 48876, 1);
# 335 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(76755, 48877, 0);

  }
  }
  {
  __CrestLoad(76758, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76757, (unsigned long )0, (long long )10);
  __CrestApply2(76756, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 10));
# 343 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(76759, 48879, 1);
# 343 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(76760, 48880, 0);

  }
  }
  {
  __CrestLoad(76763, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76762, (unsigned long )0, (long long )5);
  __CrestApply2(76761, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 5));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(76764, 48882, 1);
# 346 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(76765, 48883, 0);

  }
  }
  {
  __CrestLoad(76768, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76767, (unsigned long )0, (long long )6);
  __CrestApply2(76766, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 6));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(76769, 48885, 1);
# 346 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(76770, 48886, 0);

  }
  }
  {
  __CrestLoad(76773, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76772, (unsigned long )0, (long long )7);
  __CrestApply2(76771, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 7));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(76774, 48888, 1);
# 346 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(76775, 48889, 0);

  }
  }
  {
  __CrestLoad(76778, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76777, (unsigned long )0, (long long )8);
  __CrestApply2(76776, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 8));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 8) {
    __CrestBranch(76779, 48891, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(76780, 48892, 0);

  }
  }
  {
  __CrestLoad(76783, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76782, (unsigned long )0, (long long )1);
  __CrestApply2(76781, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 1));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 1) {
    __CrestBranch(76784, 48894, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(76785, 48895, 0);

  }
  }
  {
  __CrestLoad(76788, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(76787, (unsigned long )0, (long long )0);
  __CrestApply2(76786, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 0));
# 346 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 0) {
    __CrestBranch(76789, 48897, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(76790, 48898, 0);

  }
  }
# 347 "xmltok_impl.c"
  goto switch_default;
  case_4:
# 321 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(76793, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76792, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76791, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 322 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76794, 48902, 1);
    __CrestLoad(76796, (unsigned long )0, (long long )-1);
    __CrestStore(76797, (unsigned long )(& __retres27));
# 323 "xmltok_impl.c"
    __retres27 = -1;
# 323 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76795, 48904, 0);

  }
  }
  {
  __CrestLoad(76800, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76799, (unsigned long )0, (long long )93);
  __CrestApply2(76798, 13, (long long )((int const )*ptr != 93));
# 324 "xmltok_impl.c"
  if ((int const )*ptr != 93) {
    __CrestBranch(76801, 48906, 1);
# 325 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(76802, 48907, 0);

  }
  }
# 326 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(76805, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76804, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76803, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 327 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76806, 48910, 1);
    __CrestLoad(76808, (unsigned long )0, (long long )-1);
    __CrestStore(76809, (unsigned long )(& __retres27));
# 328 "xmltok_impl.c"
    __retres27 = -1;
# 328 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76807, 48912, 0);

  }
  }
  {
  __CrestLoad(76812, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(76811, (unsigned long )0, (long long )62);
  __CrestApply2(76810, 13, (long long )((int const )*ptr != 62));
# 329 "xmltok_impl.c"
  if ((int const )*ptr != 62) {
    __CrestBranch(76813, 48914, 1);
# 330 "xmltok_impl.c"
    ptr --;
# 331 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(76814, 48916, 0);

  }
  }
# 333 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(76815, (unsigned long )0, (long long )40);
  __CrestStore(76816, (unsigned long )(& __retres27));
# 334 "xmltok_impl.c"
  __retres27 = 40;
# 334 "xmltok_impl.c"
  goto return_label;
  case_9:
# 336 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(76819, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(76818, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(76817, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 337 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(76820, 48922, 1);
    __CrestLoad(76822, (unsigned long )0, (long long )-1);
    __CrestStore(76823, (unsigned long )(& __retres27));
# 338 "xmltok_impl.c"
    __retres27 = -1;
# 338 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76821, 48924, 0);

  }
  }
  {
# 339 "xmltok_impl.c"
  mem_13 = (struct normal_encoding *)enc;
  {
  __CrestLoad(76826, (unsigned long )(& mem_13->type[(unsigned char )*ptr]), (long long )mem_13->type[(unsigned char )*ptr]);
  __CrestLoad(76825, (unsigned long )0, (long long )10);
  __CrestApply2(76824, 12, (long long )((int )mem_13->type[(unsigned char )*ptr] == 10));
# 339 "xmltok_impl.c"
  if ((int )mem_13->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(76827, 48928, 1);
# 340 "xmltok_impl.c"
    ptr ++;
  } else {
    __CrestBranch(76828, 48929, 0);

  }
  }
  }
# 341 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76829, (unsigned long )0, (long long )7);
  __CrestStore(76830, (unsigned long )(& __retres27));
# 342 "xmltok_impl.c"
  __retres27 = 7;
# 342 "xmltok_impl.c"
  goto return_label;
  case_10:
# 344 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(76831, (unsigned long )0, (long long )7);
  __CrestStore(76832, (unsigned long )(& __retres27));
# 345 "xmltok_impl.c"
  __retres27 = 7;
# 345 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(76837, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76836, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76835, 18, (long long )(end - ptr));
  __CrestLoad(76834, (unsigned long )0, (long long )2L);
  __CrestApply2(76833, 16, (long long )(end - ptr < 2L));
# 346 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(76838, 48937, 1);
    __CrestLoad(76840, (unsigned long )0, (long long )-2);
    __CrestStore(76841, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76839, 48939, 0);

  }
  }
# 346 "xmltok_impl.c"
  mem_14 = (struct normal_encoding const *)enc;
# 346 "xmltok_impl.c"
  mem_15 = mem_14->isInvalid2;
# 346 "xmltok_impl.c"
  tmp = (*mem_15)(enc, ptr);
  __CrestHandleReturn(76843, (long long )tmp);
  __CrestStore(76842, (unsigned long )(& tmp));
  {
  __CrestLoad(76846, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(76845, (unsigned long )0, (long long )0);
  __CrestApply2(76844, 13, (long long )(tmp != 0));
# 346 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(76847, 48942, 1);
# 346 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76849, (unsigned long )0, (long long )0);
    __CrestStore(76850, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = 0;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76848, 48945, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 2;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(76855, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76854, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76853, 18, (long long )(end - ptr));
  __CrestLoad(76852, (unsigned long )0, (long long )3L);
  __CrestApply2(76851, 16, (long long )(end - ptr < 3L));
# 346 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(76856, 48949, 1);
    __CrestLoad(76858, (unsigned long )0, (long long )-2);
    __CrestStore(76859, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76857, 48951, 0);

  }
  }
# 346 "xmltok_impl.c"
  mem_16 = (struct normal_encoding const *)enc;
# 346 "xmltok_impl.c"
  mem_17 = mem_16->isInvalid3;
# 346 "xmltok_impl.c"
  tmp___0 = (*mem_17)(enc, ptr);
  __CrestHandleReturn(76861, (long long )tmp___0);
  __CrestStore(76860, (unsigned long )(& tmp___0));
  {
  __CrestLoad(76864, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(76863, (unsigned long )0, (long long )0);
  __CrestApply2(76862, 13, (long long )(tmp___0 != 0));
# 346 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(76865, 48954, 1);
# 346 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76867, (unsigned long )0, (long long )0);
    __CrestStore(76868, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = 0;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76866, 48957, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 3;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(76873, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(76872, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(76871, 18, (long long )(end - ptr));
  __CrestLoad(76870, (unsigned long )0, (long long )4L);
  __CrestApply2(76869, 16, (long long )(end - ptr < 4L));
# 346 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(76874, 48961, 1);
    __CrestLoad(76876, (unsigned long )0, (long long )-2);
    __CrestStore(76877, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76875, 48963, 0);

  }
  }
# 346 "xmltok_impl.c"
  mem_18 = (struct normal_encoding const *)enc;
# 346 "xmltok_impl.c"
  mem_19 = mem_18->isInvalid4;
# 346 "xmltok_impl.c"
  tmp___1 = (*mem_19)(enc, ptr);
  __CrestHandleReturn(76879, (long long )tmp___1);
  __CrestStore(76878, (unsigned long )(& tmp___1));
  {
  __CrestLoad(76882, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(76881, (unsigned long )0, (long long )0);
  __CrestApply2(76880, 13, (long long )(tmp___1 != 0));
# 346 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(76883, 48966, 1);
# 346 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76885, (unsigned long )0, (long long )0);
    __CrestStore(76886, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
    __retres27 = 0;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(76884, 48969, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 4;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 346 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76887, (unsigned long )0, (long long )0);
  __CrestStore(76888, (unsigned long )(& __retres27));
# 346 "xmltok_impl.c"
  __retres27 = 0;
# 346 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 348 "xmltok_impl.c"
  ptr ++;
# 349 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  }
  {
# 351 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(76891, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(76890, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(76889, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 351 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(76892, 48982, 1);

    } else {
      __CrestBranch(76893, 48983, 0);
# 351 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 352 "xmltok_impl.c"
    mem_20 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(76896, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76895, (unsigned long )0, (long long )5);
    __CrestApply2(76894, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 5));
# 361 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(76897, 48988, 1);
# 361 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(76898, 48989, 0);

    }
    }
    {
    __CrestLoad(76901, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76900, (unsigned long )0, (long long )6);
    __CrestApply2(76899, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 6));
# 361 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(76902, 48991, 1);
# 361 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(76903, 48992, 0);

    }
    }
    {
    __CrestLoad(76906, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76905, (unsigned long )0, (long long )7);
    __CrestApply2(76904, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 7));
# 361 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(76907, 48994, 1);
# 361 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(76908, 48995, 0);

    }
    }
    {
    __CrestLoad(76911, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76910, (unsigned long )0, (long long )4);
    __CrestApply2(76909, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 4));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 4) {
      __CrestBranch(76912, 48997, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76913, 48998, 0);

    }
    }
    {
    __CrestLoad(76916, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76915, (unsigned long )0, (long long )10);
    __CrestApply2(76914, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 10));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(76917, 49000, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76918, 49001, 0);

    }
    }
    {
    __CrestLoad(76921, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76920, (unsigned long )0, (long long )9);
    __CrestApply2(76919, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 9));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(76922, 49003, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76923, 49004, 0);

    }
    }
    {
    __CrestLoad(76926, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76925, (unsigned long )0, (long long )8);
    __CrestApply2(76924, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 8));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 8) {
      __CrestBranch(76927, 49006, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76928, 49007, 0);

    }
    }
    {
    __CrestLoad(76931, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76930, (unsigned long )0, (long long )1);
    __CrestApply2(76929, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 1));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 1) {
      __CrestBranch(76932, 49009, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76933, 49010, 0);

    }
    }
    {
    __CrestLoad(76936, (unsigned long )(& mem_20->type[(unsigned char )*ptr]), (long long )mem_20->type[(unsigned char )*ptr]);
    __CrestLoad(76935, (unsigned long )0, (long long )0);
    __CrestApply2(76934, 12, (long long )((int )mem_20->type[(unsigned char )*ptr] == 0));
# 368 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr] == 0) {
      __CrestBranch(76937, 49012, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(76938, 49013, 0);

    }
    }
# 371 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(76943, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76942, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76941, 18, (long long )(end - ptr));
    __CrestLoad(76940, (unsigned long )0, (long long )2L);
    __CrestApply2(76939, 16, (long long )(end - ptr < 2L));
# 361 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(76944, 49016, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76946, (unsigned long )0, (long long )6);
      __CrestStore(76947, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
      __retres27 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76945, 49019, 0);
# 361 "xmltok_impl.c"
      mem_21 = (struct normal_encoding const *)enc;
# 361 "xmltok_impl.c"
      mem_22 = mem_21->isInvalid2;
# 361 "xmltok_impl.c"
      tmp___2 = (*mem_22)(enc, ptr);
      __CrestHandleReturn(76949, (long long )tmp___2);
      __CrestStore(76948, (unsigned long )(& tmp___2));
      {
      __CrestLoad(76952, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(76951, (unsigned long )0, (long long )0);
      __CrestApply2(76950, 13, (long long )(tmp___2 != 0));
# 361 "xmltok_impl.c"
      if (tmp___2 != 0) {
        __CrestBranch(76953, 49021, 1);
# 361 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76955, (unsigned long )0, (long long )6);
        __CrestStore(76956, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
        __retres27 = 6;
# 361 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76954, 49024, 0);

      }
      }
    }
    }
# 361 "xmltok_impl.c"
    ptr += 2;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(76961, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76960, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76959, 18, (long long )(end - ptr));
    __CrestLoad(76958, (unsigned long )0, (long long )3L);
    __CrestApply2(76957, 16, (long long )(end - ptr < 3L));
# 361 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(76962, 49028, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76964, (unsigned long )0, (long long )6);
      __CrestStore(76965, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
      __retres27 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76963, 49031, 0);
# 361 "xmltok_impl.c"
      mem_23 = (struct normal_encoding const *)enc;
# 361 "xmltok_impl.c"
      mem_24 = mem_23->isInvalid3;
# 361 "xmltok_impl.c"
      tmp___3 = (*mem_24)(enc, ptr);
      __CrestHandleReturn(76967, (long long )tmp___3);
      __CrestStore(76966, (unsigned long )(& tmp___3));
      {
      __CrestLoad(76970, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(76969, (unsigned long )0, (long long )0);
      __CrestApply2(76968, 13, (long long )(tmp___3 != 0));
# 361 "xmltok_impl.c"
      if (tmp___3 != 0) {
        __CrestBranch(76971, 49033, 1);
# 361 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76973, (unsigned long )0, (long long )6);
        __CrestStore(76974, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
        __retres27 = 6;
# 361 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76972, 49036, 0);

      }
      }
    }
    }
# 361 "xmltok_impl.c"
    ptr += 3;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(76979, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(76978, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(76977, 18, (long long )(end - ptr));
    __CrestLoad(76976, (unsigned long )0, (long long )4L);
    __CrestApply2(76975, 16, (long long )(end - ptr < 4L));
# 361 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(76980, 49040, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(76982, (unsigned long )0, (long long )6);
      __CrestStore(76983, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
      __retres27 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(76981, 49043, 0);
# 361 "xmltok_impl.c"
      mem_25 = (struct normal_encoding const *)enc;
# 361 "xmltok_impl.c"
      mem_26 = mem_25->isInvalid4;
# 361 "xmltok_impl.c"
      tmp___4 = (*mem_26)(enc, ptr);
      __CrestHandleReturn(76985, (long long )tmp___4);
      __CrestStore(76984, (unsigned long )(& tmp___4));
      {
      __CrestLoad(76988, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(76987, (unsigned long )0, (long long )0);
      __CrestApply2(76986, 13, (long long )(tmp___4 != 0));
# 361 "xmltok_impl.c"
      if (tmp___4 != 0) {
        __CrestBranch(76989, 49045, 1);
# 361 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(76991, (unsigned long )0, (long long )6);
        __CrestStore(76992, (unsigned long )(& __retres27));
# 361 "xmltok_impl.c"
        __retres27 = 6;
# 361 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(76990, 49048, 0);

      }
      }
    }
    }
# 361 "xmltok_impl.c"
    ptr += 4;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
# 369 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(76993, (unsigned long )0, (long long )6);
    __CrestStore(76994, (unsigned long )(& __retres27));
# 370 "xmltok_impl.c"
    __retres27 = 6;
# 370 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 372 "xmltok_impl.c"
    ptr ++;
# 373 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
# 376 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(76995, (unsigned long )0, (long long )6);
  __CrestStore(76996, (unsigned long )(& __retres27));
# 377 "xmltok_impl.c"
  __retres27 = 6;
  return_label:
  {
  __CrestLoad(76997, (unsigned long )(& __retres27), (long long )__retres27);
  __CrestReturn(76998);
# 304 "xmltok_impl.c"
  return (__retres27);
  }
}
}
# 382 "xmltok_impl.c"
static int normal_scanEndTag(ENCODING const *enc , char const *ptr , char const *end ,
                             char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct normal_encoding *mem_11 ;
  struct normal_encoding const *mem_12 ;
  int (*mem_13)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_14 ;
  int (*mem_15)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_16 ;
  int (*mem_17)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_18 ;
  struct normal_encoding const *mem_19 ;
  int (*mem_20)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_25 ;
  int __retres26 ;

  {
  __CrestCall(76999, 839);

  {
  __CrestLoad(77002, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(77001, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(77000, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 386 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(77003, 49062, 1);
    __CrestLoad(77005, (unsigned long )0, (long long )-1);
    __CrestStore(77006, (unsigned long )(& __retres26));
# 387 "xmltok_impl.c"
    __retres26 = -1;
# 387 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77004, 49064, 0);

  }
  }
  {
# 388 "xmltok_impl.c"
  mem_11 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(77009, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77008, (unsigned long )0, (long long )29);
  __CrestApply2(77007, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 29));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(77010, 49069, 1);
# 389 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(77011, 49070, 0);

  }
  }
  {
  __CrestLoad(77014, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77013, (unsigned long )0, (long long )24);
  __CrestApply2(77012, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 24));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(77015, 49072, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(77016, 49073, 0);

  }
  }
  {
  __CrestLoad(77019, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77018, (unsigned long )0, (long long )22);
  __CrestApply2(77017, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 22));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(77020, 49075, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(77021, 49076, 0);

  }
  }
  {
  __CrestLoad(77024, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77023, (unsigned long )0, (long long )5);
  __CrestApply2(77022, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 5));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(77025, 49078, 1);
# 389 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(77026, 49079, 0);

  }
  }
  {
  __CrestLoad(77029, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77028, (unsigned long )0, (long long )6);
  __CrestApply2(77027, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 6));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(77030, 49081, 1);
# 389 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(77031, 49082, 0);

  }
  }
  {
  __CrestLoad(77034, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(77033, (unsigned long )0, (long long )7);
  __CrestApply2(77032, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 7));
# 389 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(77035, 49084, 1);
# 389 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(77036, 49085, 0);

  }
  }
# 390 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(77037, (unsigned long )0, (long long )0);
  __CrestStore(77038, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
  __retres26 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 389 "xmltok_impl.c"
  ptr ++;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(77043, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77042, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77041, 18, (long long )(end - ptr));
  __CrestLoad(77040, (unsigned long )0, (long long )2L);
  __CrestApply2(77039, 16, (long long )(end - ptr < 2L));
# 389 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(77044, 49093, 1);
    __CrestLoad(77046, (unsigned long )0, (long long )-2);
    __CrestStore(77047, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77045, 49095, 0);

  }
  }
# 389 "xmltok_impl.c"
  mem_12 = (struct normal_encoding const *)enc;
# 389 "xmltok_impl.c"
  mem_13 = mem_12->isNmstrt2;
# 389 "xmltok_impl.c"
  tmp = (*mem_13)(enc, ptr);
  __CrestHandleReturn(77049, (long long )tmp);
  __CrestStore(77048, (unsigned long )(& tmp));
  {
  __CrestLoad(77052, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(77051, (unsigned long )0, (long long )0);
  __CrestApply2(77050, 13, (long long )(tmp != 0));
# 389 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(77053, 49098, 1);

  } else {
    __CrestBranch(77054, 49099, 0);
# 389 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77055, (unsigned long )0, (long long )0);
    __CrestStore(77056, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = 0;
# 389 "xmltok_impl.c"
    goto return_label;
  }
  }
# 389 "xmltok_impl.c"
  ptr += 2;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(77061, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77060, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77059, 18, (long long )(end - ptr));
  __CrestLoad(77058, (unsigned long )0, (long long )3L);
  __CrestApply2(77057, 16, (long long )(end - ptr < 3L));
# 389 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(77062, 49105, 1);
    __CrestLoad(77064, (unsigned long )0, (long long )-2);
    __CrestStore(77065, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77063, 49107, 0);

  }
  }
# 389 "xmltok_impl.c"
  mem_14 = (struct normal_encoding const *)enc;
# 389 "xmltok_impl.c"
  mem_15 = mem_14->isNmstrt3;
# 389 "xmltok_impl.c"
  tmp___0 = (*mem_15)(enc, ptr);
  __CrestHandleReturn(77067, (long long )tmp___0);
  __CrestStore(77066, (unsigned long )(& tmp___0));
  {
  __CrestLoad(77070, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(77069, (unsigned long )0, (long long )0);
  __CrestApply2(77068, 13, (long long )(tmp___0 != 0));
# 389 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(77071, 49110, 1);

  } else {
    __CrestBranch(77072, 49111, 0);
# 389 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77073, (unsigned long )0, (long long )0);
    __CrestStore(77074, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = 0;
# 389 "xmltok_impl.c"
    goto return_label;
  }
  }
# 389 "xmltok_impl.c"
  ptr += 3;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(77079, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77078, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77077, 18, (long long )(end - ptr));
  __CrestLoad(77076, (unsigned long )0, (long long )4L);
  __CrestApply2(77075, 16, (long long )(end - ptr < 4L));
# 389 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(77080, 49117, 1);
    __CrestLoad(77082, (unsigned long )0, (long long )-2);
    __CrestStore(77083, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77081, 49119, 0);

  }
  }
# 389 "xmltok_impl.c"
  mem_16 = (struct normal_encoding const *)enc;
# 389 "xmltok_impl.c"
  mem_17 = mem_16->isNmstrt4;
# 389 "xmltok_impl.c"
  tmp___1 = (*mem_17)(enc, ptr);
  __CrestHandleReturn(77085, (long long )tmp___1);
  __CrestStore(77084, (unsigned long )(& tmp___1));
  {
  __CrestLoad(77088, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(77087, (unsigned long )0, (long long )0);
  __CrestApply2(77086, 13, (long long )(tmp___1 != 0));
# 389 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(77089, 49122, 1);

  } else {
    __CrestBranch(77090, 49123, 0);
# 389 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77091, (unsigned long )0, (long long )0);
    __CrestStore(77092, (unsigned long )(& __retres26));
# 389 "xmltok_impl.c"
    __retres26 = 0;
# 389 "xmltok_impl.c"
    goto return_label;
  }
  }
# 389 "xmltok_impl.c"
  ptr += 4;
# 389 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 391 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(77093, (unsigned long )0, (long long )0);
  __CrestStore(77094, (unsigned long )(& __retres26));
# 392 "xmltok_impl.c"
  __retres26 = 0;
# 392 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 394 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(77097, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(77096, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(77095, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 394 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(77098, 49136, 1);

    } else {
      __CrestBranch(77099, 49137, 0);
# 394 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 395 "xmltok_impl.c"
    mem_18 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77102, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77101, (unsigned long )0, (long long )29);
    __CrestApply2(77100, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 29));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(77103, 49142, 1);
# 396 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(77104, 49143, 0);

    }
    }
    {
    __CrestLoad(77107, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77106, (unsigned long )0, (long long )27);
    __CrestApply2(77105, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 27));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(77108, 49145, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77109, 49146, 0);

    }
    }
    {
    __CrestLoad(77112, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77111, (unsigned long )0, (long long )26);
    __CrestApply2(77110, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 26));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(77113, 49148, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77114, 49149, 0);

    }
    }
    {
    __CrestLoad(77117, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77116, (unsigned long )0, (long long )25);
    __CrestApply2(77115, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 25));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(77118, 49151, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77119, 49152, 0);

    }
    }
    {
    __CrestLoad(77122, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77121, (unsigned long )0, (long long )24);
    __CrestApply2(77120, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 24));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(77123, 49154, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77124, 49155, 0);

    }
    }
    {
    __CrestLoad(77127, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77126, (unsigned long )0, (long long )22);
    __CrestApply2(77125, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 22));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(77128, 49157, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77129, 49158, 0);

    }
    }
    {
    __CrestLoad(77132, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77131, (unsigned long )0, (long long )5);
    __CrestApply2(77130, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 5));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(77133, 49160, 1);
# 396 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(77134, 49161, 0);

    }
    }
    {
    __CrestLoad(77137, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77136, (unsigned long )0, (long long )6);
    __CrestApply2(77135, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 6));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(77138, 49163, 1);
# 396 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(77139, 49164, 0);

    }
    }
    {
    __CrestLoad(77142, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77141, (unsigned long )0, (long long )7);
    __CrestApply2(77140, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 7));
# 396 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(77143, 49166, 1);
# 396 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(77144, 49167, 0);

    }
    }
    {
    __CrestLoad(77147, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77146, (unsigned long )0, (long long )10);
    __CrestApply2(77145, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 10));
# 397 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(77148, 49169, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77149, 49170, 0);

    }
    }
    {
    __CrestLoad(77152, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77151, (unsigned long )0, (long long )9);
    __CrestApply2(77150, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 9));
# 397 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(77153, 49172, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77154, 49173, 0);

    }
    }
    {
    __CrestLoad(77157, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77156, (unsigned long )0, (long long )21);
    __CrestApply2(77155, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 21));
# 397 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(77158, 49175, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77159, 49176, 0);

    }
    }
    {
    __CrestLoad(77162, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77161, (unsigned long )0, (long long )23);
    __CrestApply2(77160, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 23));
# 412 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(77163, 49178, 1);
# 412 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(77164, 49179, 0);

    }
    }
    {
    __CrestLoad(77167, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(77166, (unsigned long )0, (long long )11);
    __CrestApply2(77165, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 11));
# 418 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(77168, 49181, 1);
# 418 "xmltok_impl.c"
      goto case_11___0;
    } else {
      __CrestBranch(77169, 49182, 0);

    }
    }
# 421 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77170, (unsigned long )0, (long long )0);
    __CrestStore(77171, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
    __retres26 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 396 "xmltok_impl.c"
    ptr ++;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(77176, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77175, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77174, 18, (long long )(end - ptr));
    __CrestLoad(77173, (unsigned long )0, (long long )2L);
    __CrestApply2(77172, 16, (long long )(end - ptr < 2L));
# 396 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(77177, 49190, 1);
      __CrestLoad(77179, (unsigned long )0, (long long )-2);
      __CrestStore(77180, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77178, 49192, 0);

    }
    }
# 396 "xmltok_impl.c"
    mem_19 = (struct normal_encoding const *)enc;
# 396 "xmltok_impl.c"
    mem_20 = mem_19->isName2;
# 396 "xmltok_impl.c"
    tmp___2 = (*mem_20)(enc, ptr);
    __CrestHandleReturn(77182, (long long )tmp___2);
    __CrestStore(77181, (unsigned long )(& tmp___2));
    {
    __CrestLoad(77185, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(77184, (unsigned long )0, (long long )0);
    __CrestApply2(77183, 13, (long long )(tmp___2 != 0));
# 396 "xmltok_impl.c"
    if (tmp___2 != 0) {
      __CrestBranch(77186, 49195, 1);

    } else {
      __CrestBranch(77187, 49196, 0);
# 396 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77188, (unsigned long )0, (long long )0);
      __CrestStore(77189, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = 0;
# 396 "xmltok_impl.c"
      goto return_label;
    }
    }
# 396 "xmltok_impl.c"
    ptr += 2;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(77194, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77193, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77192, 18, (long long )(end - ptr));
    __CrestLoad(77191, (unsigned long )0, (long long )3L);
    __CrestApply2(77190, 16, (long long )(end - ptr < 3L));
# 396 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(77195, 49202, 1);
      __CrestLoad(77197, (unsigned long )0, (long long )-2);
      __CrestStore(77198, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77196, 49204, 0);

    }
    }
# 396 "xmltok_impl.c"
    mem_21 = (struct normal_encoding const *)enc;
# 396 "xmltok_impl.c"
    mem_22 = mem_21->isName3;
# 396 "xmltok_impl.c"
    tmp___3 = (*mem_22)(enc, ptr);
    __CrestHandleReturn(77200, (long long )tmp___3);
    __CrestStore(77199, (unsigned long )(& tmp___3));
    {
    __CrestLoad(77203, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(77202, (unsigned long )0, (long long )0);
    __CrestApply2(77201, 13, (long long )(tmp___3 != 0));
# 396 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(77204, 49207, 1);

    } else {
      __CrestBranch(77205, 49208, 0);
# 396 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77206, (unsigned long )0, (long long )0);
      __CrestStore(77207, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = 0;
# 396 "xmltok_impl.c"
      goto return_label;
    }
    }
# 396 "xmltok_impl.c"
    ptr += 3;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(77212, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77211, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77210, 18, (long long )(end - ptr));
    __CrestLoad(77209, (unsigned long )0, (long long )4L);
    __CrestApply2(77208, 16, (long long )(end - ptr < 4L));
# 396 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(77213, 49214, 1);
      __CrestLoad(77215, (unsigned long )0, (long long )-2);
      __CrestStore(77216, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77214, 49216, 0);

    }
    }
# 396 "xmltok_impl.c"
    mem_23 = (struct normal_encoding const *)enc;
# 396 "xmltok_impl.c"
    mem_24 = mem_23->isName4;
# 396 "xmltok_impl.c"
    tmp___4 = (*mem_24)(enc, ptr);
    __CrestHandleReturn(77218, (long long )tmp___4);
    __CrestStore(77217, (unsigned long )(& tmp___4));
    {
    __CrestLoad(77221, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(77220, (unsigned long )0, (long long )0);
    __CrestApply2(77219, 13, (long long )(tmp___4 != 0));
# 396 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(77222, 49219, 1);

    } else {
      __CrestBranch(77223, 49220, 0);
# 396 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77224, (unsigned long )0, (long long )0);
      __CrestStore(77225, (unsigned long )(& __retres26));
# 396 "xmltok_impl.c"
      __retres26 = 0;
# 396 "xmltok_impl.c"
      goto return_label;
    }
    }
# 396 "xmltok_impl.c"
    ptr += 4;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 398 "xmltok_impl.c"
    ptr ++;
    {
# 398 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(77228, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77227, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77226, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 398 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(77229, 49230, 1);

      } else {
        __CrestBranch(77230, 49231, 0);
# 398 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 399 "xmltok_impl.c"
      mem_25 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(77233, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
      __CrestLoad(77232, (unsigned long )0, (long long )10);
      __CrestApply2(77231, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 10));
# 400 "xmltok_impl.c"
      if ((int )mem_25->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(77234, 49236, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(77235, 49237, 0);

      }
      }
      {
      __CrestLoad(77238, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
      __CrestLoad(77237, (unsigned long )0, (long long )9);
      __CrestApply2(77236, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 9));
# 400 "xmltok_impl.c"
      if ((int )mem_25->type[(unsigned char )*ptr] == 9) {
        __CrestBranch(77239, 49239, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(77240, 49240, 0);

      }
      }
      {
      __CrestLoad(77243, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
      __CrestLoad(77242, (unsigned long )0, (long long )21);
      __CrestApply2(77241, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 21));
# 400 "xmltok_impl.c"
      if ((int )mem_25->type[(unsigned char )*ptr] == 21) {
        __CrestBranch(77244, 49242, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(77245, 49243, 0);

      }
      }
      {
      __CrestLoad(77248, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
      __CrestLoad(77247, (unsigned long )0, (long long )11);
      __CrestApply2(77246, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 11));
# 402 "xmltok_impl.c"
      if ((int )mem_25->type[(unsigned char )*ptr] == 11) {
        __CrestBranch(77249, 49245, 1);
# 402 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(77250, 49246, 0);

      }
      }
# 405 "xmltok_impl.c"
      goto switch_default___0;
      case_10___0:
      case_9___0:
      case_21___0:
# 401 "xmltok_impl.c"
      goto switch_break___1;
      case_11:
# 403 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(77251, (unsigned long )0, (long long )5);
      __CrestStore(77252, (unsigned long )(& __retres26));
# 404 "xmltok_impl.c"
      __retres26 = 5;
# 404 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 406 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77253, (unsigned long )0, (long long )0);
      __CrestStore(77254, (unsigned long )(& __retres26));
# 407 "xmltok_impl.c"
      __retres26 = 0;
# 407 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
      }
# 398 "xmltok_impl.c"
      ptr ++;
    }
    while_break___0: ;
    }
    __CrestLoad(77255, (unsigned long )0, (long long )-1);
    __CrestStore(77256, (unsigned long )(& __retres26));
# 410 "xmltok_impl.c"
    __retres26 = -1;
# 410 "xmltok_impl.c"
    goto return_label;
    case_23:
# 415 "xmltok_impl.c"
    ptr ++;
# 416 "xmltok_impl.c"
    goto switch_break___0;
    case_11___0:
# 419 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(77257, (unsigned long )0, (long long )5);
    __CrestStore(77258, (unsigned long )(& __retres26));
# 420 "xmltok_impl.c"
    __retres26 = 5;
# 420 "xmltok_impl.c"
    goto return_label;
    switch_default___1:
# 422 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77259, (unsigned long )0, (long long )0);
    __CrestStore(77260, (unsigned long )(& __retres26));
# 423 "xmltok_impl.c"
    __retres26 = 0;
# 423 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(77261, (unsigned long )0, (long long )-1);
  __CrestStore(77262, (unsigned long )(& __retres26));
# 426 "xmltok_impl.c"
  __retres26 = -1;
  return_label:
  {
  __CrestLoad(77263, (unsigned long )(& __retres26), (long long )__retres26);
  __CrestReturn(77264);
# 382 "xmltok_impl.c"
  return (__retres26);
  }
}
}
# 431 "xmltok_impl.c"
static int normal_scanHexCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr )
{
  struct normal_encoding *mem_5 ;
  struct normal_encoding *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(77265, 840);

  {
  __CrestLoad(77268, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(77267, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(77266, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 435 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(77269, 49273, 1);
    {
# 436 "xmltok_impl.c"
    mem_5 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77273, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(77272, (unsigned long )0, (long long )24);
    __CrestApply2(77271, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 24));
# 438 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(77274, 49277, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(77275, 49278, 0);

    }
    }
    {
    __CrestLoad(77278, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(77277, (unsigned long )0, (long long )25);
    __CrestApply2(77276, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 25));
# 438 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(77279, 49280, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(77280, 49281, 0);

    }
    }
# 440 "xmltok_impl.c"
    goto switch_default;
    case_24:
    case_25:
# 439 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 441 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77281, (unsigned long )0, (long long )0);
    __CrestStore(77282, (unsigned long )(& __retres7));
# 442 "xmltok_impl.c"
    __retres7 = 0;
# 442 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
    }
# 444 "xmltok_impl.c"
    ptr ++;
    {
# 444 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(77285, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77284, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77283, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 444 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(77286, 49293, 1);

      } else {
        __CrestBranch(77287, 49294, 0);
# 444 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 445 "xmltok_impl.c"
      mem_6 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(77290, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
      __CrestLoad(77289, (unsigned long )0, (long long )24);
      __CrestApply2(77288, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 24));
# 447 "xmltok_impl.c"
      if ((int )mem_6->type[(unsigned char )*ptr] == 24) {
        __CrestBranch(77291, 49299, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(77292, 49300, 0);

      }
      }
      {
      __CrestLoad(77295, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
      __CrestLoad(77294, (unsigned long )0, (long long )25);
      __CrestApply2(77293, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 25));
# 447 "xmltok_impl.c"
      if ((int )mem_6->type[(unsigned char )*ptr] == 25) {
        __CrestBranch(77296, 49302, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(77297, 49303, 0);

      }
      }
      {
      __CrestLoad(77300, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
      __CrestLoad(77299, (unsigned long )0, (long long )18);
      __CrestApply2(77298, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 18));
# 449 "xmltok_impl.c"
      if ((int )mem_6->type[(unsigned char )*ptr] == 18) {
        __CrestBranch(77301, 49305, 1);
# 449 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(77302, 49306, 0);

      }
      }
# 452 "xmltok_impl.c"
      goto switch_default___0;
      case_24___0:
      case_25___0:
# 448 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 450 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(77303, (unsigned long )0, (long long )10);
      __CrestStore(77304, (unsigned long )(& __retres7));
# 451 "xmltok_impl.c"
      __retres7 = 10;
# 451 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 453 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77305, (unsigned long )0, (long long )0);
      __CrestStore(77306, (unsigned long )(& __retres7));
# 454 "xmltok_impl.c"
      __retres7 = 0;
# 454 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
      }
# 444 "xmltok_impl.c"
      ptr ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(77270, 49318, 0);

  }
  }
  __CrestLoad(77307, (unsigned long )0, (long long )-1);
  __CrestStore(77308, (unsigned long )(& __retres7));
# 458 "xmltok_impl.c"
  __retres7 = -1;
  return_label:
  {
  __CrestLoad(77309, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(77310);
# 431 "xmltok_impl.c"
  return (__retres7);
  }
}
}
# 463 "xmltok_impl.c"
static int normal_scanCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  int tmp ;
  struct normal_encoding *mem_6 ;
  struct normal_encoding *mem_7 ;
  int __retres8 ;

  {
  __CrestCall(77311, 841);

  {
  __CrestLoad(77314, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(77313, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(77312, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 467 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(77315, 49322, 1);
    {
    __CrestLoad(77319, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(77318, (unsigned long )0, (long long )120);
    __CrestApply2(77317, 12, (long long )((int const )*ptr == 120));
# 468 "xmltok_impl.c"
    if ((int const )*ptr == 120) {
      __CrestBranch(77320, 49323, 1);
# 469 "xmltok_impl.c"
      tmp = normal_scanHexCharRef(enc, ptr + 1, end, nextTokPtr);
      __CrestHandleReturn(77323, (long long )tmp);
      __CrestStore(77322, (unsigned long )(& tmp));
      __CrestLoad(77324, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(77325, (unsigned long )(& __retres8));
# 469 "xmltok_impl.c"
      __retres8 = tmp;
# 469 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77321, 49326, 0);

    }
    }
    {
# 470 "xmltok_impl.c"
    mem_6 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77328, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
    __CrestLoad(77327, (unsigned long )0, (long long )25);
    __CrestApply2(77326, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 25));
# 471 "xmltok_impl.c"
    if ((int )mem_6->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(77329, 49331, 1);
# 471 "xmltok_impl.c"
      goto case_25;
    } else {
      __CrestBranch(77330, 49332, 0);

    }
    }
# 473 "xmltok_impl.c"
    goto switch_default;
    case_25:
# 472 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 474 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77331, (unsigned long )0, (long long )0);
    __CrestStore(77332, (unsigned long )(& __retres8));
# 475 "xmltok_impl.c"
    __retres8 = 0;
# 475 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
    }
# 477 "xmltok_impl.c"
    ptr ++;
    {
# 477 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(77335, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77334, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77333, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 477 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(77336, 49344, 1);

      } else {
        __CrestBranch(77337, 49345, 0);
# 477 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 478 "xmltok_impl.c"
      mem_7 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(77340, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
      __CrestLoad(77339, (unsigned long )0, (long long )25);
      __CrestApply2(77338, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 25));
# 479 "xmltok_impl.c"
      if ((int )mem_7->type[(unsigned char )*ptr] == 25) {
        __CrestBranch(77341, 49350, 1);
# 479 "xmltok_impl.c"
        goto case_25___0;
      } else {
        __CrestBranch(77342, 49351, 0);

      }
      }
      {
      __CrestLoad(77345, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
      __CrestLoad(77344, (unsigned long )0, (long long )18);
      __CrestApply2(77343, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 18));
# 481 "xmltok_impl.c"
      if ((int )mem_7->type[(unsigned char )*ptr] == 18) {
        __CrestBranch(77346, 49353, 1);
# 481 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(77347, 49354, 0);

      }
      }
# 484 "xmltok_impl.c"
      goto switch_default___0;
      case_25___0:
# 480 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 482 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(77348, (unsigned long )0, (long long )10);
      __CrestStore(77349, (unsigned long )(& __retres8));
# 483 "xmltok_impl.c"
      __retres8 = 10;
# 483 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 485 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77350, (unsigned long )0, (long long )0);
      __CrestStore(77351, (unsigned long )(& __retres8));
# 486 "xmltok_impl.c"
      __retres8 = 0;
# 486 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
      }
# 477 "xmltok_impl.c"
      ptr ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(77316, 49366, 0);

  }
  }
  __CrestLoad(77352, (unsigned long )0, (long long )-1);
  __CrestStore(77353, (unsigned long )(& __retres8));
# 490 "xmltok_impl.c"
  __retres8 = -1;
  return_label:
  {
  __CrestLoad(77354, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(77355);
# 463 "xmltok_impl.c"
  return (__retres8);
  }
}
}
# 495 "xmltok_impl.c"
static int normal_scanRef(ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct normal_encoding *mem_12 ;
  struct normal_encoding const *mem_13 ;
  int (*mem_14)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_15 ;
  int (*mem_16)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_17 ;
  int (*mem_18)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_19 ;
  struct normal_encoding const *mem_20 ;
  int (*mem_21)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_22 ;
  int (*mem_23)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_24 ;
  int (*mem_25)(ENCODING const * , char const * ) ;
  int __retres26 ;

  {
  __CrestCall(77356, 842);

  {
  __CrestLoad(77359, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(77358, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(77357, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 499 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(77360, 49370, 1);
    __CrestLoad(77362, (unsigned long )0, (long long )-1);
    __CrestStore(77363, (unsigned long )(& __retres26));
# 500 "xmltok_impl.c"
    __retres26 = -1;
# 500 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77361, 49372, 0);

  }
  }
  {
# 501 "xmltok_impl.c"
  mem_12 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(77366, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77365, (unsigned long )0, (long long )29);
  __CrestApply2(77364, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 29));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(77367, 49377, 1);
# 502 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(77368, 49378, 0);

  }
  }
  {
  __CrestLoad(77371, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77370, (unsigned long )0, (long long )24);
  __CrestApply2(77369, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 24));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(77372, 49380, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(77373, 49381, 0);

  }
  }
  {
  __CrestLoad(77376, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77375, (unsigned long )0, (long long )22);
  __CrestApply2(77374, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 22));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(77377, 49383, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(77378, 49384, 0);

  }
  }
  {
  __CrestLoad(77381, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77380, (unsigned long )0, (long long )5);
  __CrestApply2(77379, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 5));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(77382, 49386, 1);
# 502 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(77383, 49387, 0);

  }
  }
  {
  __CrestLoad(77386, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77385, (unsigned long )0, (long long )6);
  __CrestApply2(77384, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 6));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(77387, 49389, 1);
# 502 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(77388, 49390, 0);

  }
  }
  {
  __CrestLoad(77391, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77390, (unsigned long )0, (long long )7);
  __CrestApply2(77389, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 7));
# 502 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(77392, 49392, 1);
# 502 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(77393, 49393, 0);

  }
  }
  {
  __CrestLoad(77396, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
  __CrestLoad(77395, (unsigned long )0, (long long )19);
  __CrestApply2(77394, 12, (long long )((int )mem_12->type[(unsigned char )*ptr] == 19));
# 503 "xmltok_impl.c"
  if ((int )mem_12->type[(unsigned char )*ptr] == 19) {
    __CrestBranch(77397, 49395, 1);
# 503 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(77398, 49396, 0);

  }
  }
# 505 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(77399, (unsigned long )0, (long long )0);
  __CrestStore(77400, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
  __retres26 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 502 "xmltok_impl.c"
  ptr ++;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(77405, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77404, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77403, 18, (long long )(end - ptr));
  __CrestLoad(77402, (unsigned long )0, (long long )2L);
  __CrestApply2(77401, 16, (long long )(end - ptr < 2L));
# 502 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(77406, 49404, 1);
    __CrestLoad(77408, (unsigned long )0, (long long )-2);
    __CrestStore(77409, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77407, 49406, 0);

  }
  }
# 502 "xmltok_impl.c"
  mem_13 = (struct normal_encoding const *)enc;
# 502 "xmltok_impl.c"
  mem_14 = mem_13->isNmstrt2;
# 502 "xmltok_impl.c"
  tmp = (*mem_14)(enc, ptr);
  __CrestHandleReturn(77411, (long long )tmp);
  __CrestStore(77410, (unsigned long )(& tmp));
  {
  __CrestLoad(77414, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(77413, (unsigned long )0, (long long )0);
  __CrestApply2(77412, 13, (long long )(tmp != 0));
# 502 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(77415, 49409, 1);

  } else {
    __CrestBranch(77416, 49410, 0);
# 502 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77417, (unsigned long )0, (long long )0);
    __CrestStore(77418, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = 0;
# 502 "xmltok_impl.c"
    goto return_label;
  }
  }
# 502 "xmltok_impl.c"
  ptr += 2;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(77423, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77422, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77421, 18, (long long )(end - ptr));
  __CrestLoad(77420, (unsigned long )0, (long long )3L);
  __CrestApply2(77419, 16, (long long )(end - ptr < 3L));
# 502 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(77424, 49416, 1);
    __CrestLoad(77426, (unsigned long )0, (long long )-2);
    __CrestStore(77427, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77425, 49418, 0);

  }
  }
# 502 "xmltok_impl.c"
  mem_15 = (struct normal_encoding const *)enc;
# 502 "xmltok_impl.c"
  mem_16 = mem_15->isNmstrt3;
# 502 "xmltok_impl.c"
  tmp___0 = (*mem_16)(enc, ptr);
  __CrestHandleReturn(77429, (long long )tmp___0);
  __CrestStore(77428, (unsigned long )(& tmp___0));
  {
  __CrestLoad(77432, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(77431, (unsigned long )0, (long long )0);
  __CrestApply2(77430, 13, (long long )(tmp___0 != 0));
# 502 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(77433, 49421, 1);

  } else {
    __CrestBranch(77434, 49422, 0);
# 502 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77435, (unsigned long )0, (long long )0);
    __CrestStore(77436, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = 0;
# 502 "xmltok_impl.c"
    goto return_label;
  }
  }
# 502 "xmltok_impl.c"
  ptr += 3;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(77441, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(77440, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(77439, 18, (long long )(end - ptr));
  __CrestLoad(77438, (unsigned long )0, (long long )4L);
  __CrestApply2(77437, 16, (long long )(end - ptr < 4L));
# 502 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(77442, 49428, 1);
    __CrestLoad(77444, (unsigned long )0, (long long )-2);
    __CrestStore(77445, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(77443, 49430, 0);

  }
  }
# 502 "xmltok_impl.c"
  mem_17 = (struct normal_encoding const *)enc;
# 502 "xmltok_impl.c"
  mem_18 = mem_17->isNmstrt4;
# 502 "xmltok_impl.c"
  tmp___1 = (*mem_18)(enc, ptr);
  __CrestHandleReturn(77447, (long long )tmp___1);
  __CrestStore(77446, (unsigned long )(& tmp___1));
  {
  __CrestLoad(77450, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(77449, (unsigned long )0, (long long )0);
  __CrestApply2(77448, 13, (long long )(tmp___1 != 0));
# 502 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(77451, 49433, 1);

  } else {
    __CrestBranch(77452, 49434, 0);
# 502 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77453, (unsigned long )0, (long long )0);
    __CrestStore(77454, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = 0;
# 502 "xmltok_impl.c"
    goto return_label;
  }
  }
# 502 "xmltok_impl.c"
  ptr += 4;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_19:
# 504 "xmltok_impl.c"
  tmp___2 = normal_scanCharRef(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(77456, (long long )tmp___2);
  __CrestStore(77455, (unsigned long )(& tmp___2));
  __CrestLoad(77457, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(77458, (unsigned long )(& __retres26));
# 504 "xmltok_impl.c"
  __retres26 = tmp___2;
# 504 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 506 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(77459, (unsigned long )0, (long long )0);
  __CrestStore(77460, (unsigned long )(& __retres26));
# 507 "xmltok_impl.c"
  __retres26 = 0;
# 507 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 509 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(77463, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(77462, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(77461, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 509 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(77464, 49450, 1);

    } else {
      __CrestBranch(77465, 49451, 0);
# 509 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 510 "xmltok_impl.c"
    mem_19 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77468, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77467, (unsigned long )0, (long long )29);
    __CrestApply2(77466, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 29));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(77469, 49456, 1);
# 511 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(77470, 49457, 0);

    }
    }
    {
    __CrestLoad(77473, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77472, (unsigned long )0, (long long )27);
    __CrestApply2(77471, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 27));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(77474, 49459, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77475, 49460, 0);

    }
    }
    {
    __CrestLoad(77478, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77477, (unsigned long )0, (long long )26);
    __CrestApply2(77476, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 26));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(77479, 49462, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77480, 49463, 0);

    }
    }
    {
    __CrestLoad(77483, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77482, (unsigned long )0, (long long )25);
    __CrestApply2(77481, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 25));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(77484, 49465, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77485, 49466, 0);

    }
    }
    {
    __CrestLoad(77488, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77487, (unsigned long )0, (long long )24);
    __CrestApply2(77486, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 24));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(77489, 49468, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77490, 49469, 0);

    }
    }
    {
    __CrestLoad(77493, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77492, (unsigned long )0, (long long )22);
    __CrestApply2(77491, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 22));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(77494, 49471, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77495, 49472, 0);

    }
    }
    {
    __CrestLoad(77498, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77497, (unsigned long )0, (long long )5);
    __CrestApply2(77496, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 5));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(77499, 49474, 1);
# 511 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(77500, 49475, 0);

    }
    }
    {
    __CrestLoad(77503, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77502, (unsigned long )0, (long long )6);
    __CrestApply2(77501, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 6));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(77504, 49477, 1);
# 511 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(77505, 49478, 0);

    }
    }
    {
    __CrestLoad(77508, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77507, (unsigned long )0, (long long )7);
    __CrestApply2(77506, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 7));
# 511 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(77509, 49480, 1);
# 511 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(77510, 49481, 0);

    }
    }
    {
    __CrestLoad(77513, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestLoad(77512, (unsigned long )0, (long long )18);
    __CrestApply2(77511, 12, (long long )((int )mem_19->type[(unsigned char )*ptr] == 18));
# 512 "xmltok_impl.c"
    if ((int )mem_19->type[(unsigned char )*ptr] == 18) {
      __CrestBranch(77514, 49483, 1);
# 512 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(77515, 49484, 0);

    }
    }
# 515 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77516, (unsigned long )0, (long long )0);
    __CrestStore(77517, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
    __retres26 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 511 "xmltok_impl.c"
    ptr ++;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(77522, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77521, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77520, 18, (long long )(end - ptr));
    __CrestLoad(77519, (unsigned long )0, (long long )2L);
    __CrestApply2(77518, 16, (long long )(end - ptr < 2L));
# 511 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(77523, 49492, 1);
      __CrestLoad(77525, (unsigned long )0, (long long )-2);
      __CrestStore(77526, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77524, 49494, 0);

    }
    }
# 511 "xmltok_impl.c"
    mem_20 = (struct normal_encoding const *)enc;
# 511 "xmltok_impl.c"
    mem_21 = mem_20->isName2;
# 511 "xmltok_impl.c"
    tmp___3 = (*mem_21)(enc, ptr);
    __CrestHandleReturn(77528, (long long )tmp___3);
    __CrestStore(77527, (unsigned long )(& tmp___3));
    {
    __CrestLoad(77531, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(77530, (unsigned long )0, (long long )0);
    __CrestApply2(77529, 13, (long long )(tmp___3 != 0));
# 511 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(77532, 49497, 1);

    } else {
      __CrestBranch(77533, 49498, 0);
# 511 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77534, (unsigned long )0, (long long )0);
      __CrestStore(77535, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = 0;
# 511 "xmltok_impl.c"
      goto return_label;
    }
    }
# 511 "xmltok_impl.c"
    ptr += 2;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(77540, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77539, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77538, 18, (long long )(end - ptr));
    __CrestLoad(77537, (unsigned long )0, (long long )3L);
    __CrestApply2(77536, 16, (long long )(end - ptr < 3L));
# 511 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(77541, 49504, 1);
      __CrestLoad(77543, (unsigned long )0, (long long )-2);
      __CrestStore(77544, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77542, 49506, 0);

    }
    }
# 511 "xmltok_impl.c"
    mem_22 = (struct normal_encoding const *)enc;
# 511 "xmltok_impl.c"
    mem_23 = mem_22->isName3;
# 511 "xmltok_impl.c"
    tmp___4 = (*mem_23)(enc, ptr);
    __CrestHandleReturn(77546, (long long )tmp___4);
    __CrestStore(77545, (unsigned long )(& tmp___4));
    {
    __CrestLoad(77549, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(77548, (unsigned long )0, (long long )0);
    __CrestApply2(77547, 13, (long long )(tmp___4 != 0));
# 511 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(77550, 49509, 1);

    } else {
      __CrestBranch(77551, 49510, 0);
# 511 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77552, (unsigned long )0, (long long )0);
      __CrestStore(77553, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = 0;
# 511 "xmltok_impl.c"
      goto return_label;
    }
    }
# 511 "xmltok_impl.c"
    ptr += 3;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(77558, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77557, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77556, 18, (long long )(end - ptr));
    __CrestLoad(77555, (unsigned long )0, (long long )4L);
    __CrestApply2(77554, 16, (long long )(end - ptr < 4L));
# 511 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(77559, 49516, 1);
      __CrestLoad(77561, (unsigned long )0, (long long )-2);
      __CrestStore(77562, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77560, 49518, 0);

    }
    }
# 511 "xmltok_impl.c"
    mem_24 = (struct normal_encoding const *)enc;
# 511 "xmltok_impl.c"
    mem_25 = mem_24->isName4;
# 511 "xmltok_impl.c"
    tmp___5 = (*mem_25)(enc, ptr);
    __CrestHandleReturn(77564, (long long )tmp___5);
    __CrestStore(77563, (unsigned long )(& tmp___5));
    {
    __CrestLoad(77567, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(77566, (unsigned long )0, (long long )0);
    __CrestApply2(77565, 13, (long long )(tmp___5 != 0));
# 511 "xmltok_impl.c"
    if (tmp___5 != 0) {
      __CrestBranch(77568, 49521, 1);

    } else {
      __CrestBranch(77569, 49522, 0);
# 511 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77570, (unsigned long )0, (long long )0);
      __CrestStore(77571, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = 0;
# 511 "xmltok_impl.c"
      goto return_label;
    }
    }
# 511 "xmltok_impl.c"
    ptr += 4;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 513 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(77572, (unsigned long )0, (long long )9);
    __CrestStore(77573, (unsigned long )(& __retres26));
# 514 "xmltok_impl.c"
    __retres26 = 9;
# 514 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 516 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77574, (unsigned long )0, (long long )0);
    __CrestStore(77575, (unsigned long )(& __retres26));
# 517 "xmltok_impl.c"
    __retres26 = 0;
# 517 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(77576, (unsigned long )0, (long long )-1);
  __CrestStore(77577, (unsigned long )(& __retres26));
# 520 "xmltok_impl.c"
  __retres26 = -1;
  return_label:
  {
  __CrestLoad(77578, (unsigned long )(& __retres26), (long long )__retres26);
  __CrestReturn(77579);
# 495 "xmltok_impl.c"
  return (__retres26);
  }
}
}
# 525 "xmltok_impl.c"
static int normal_scanAtts(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int t ;
  int open ;
  int t___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tok ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  struct normal_encoding *mem_23 ;
  struct normal_encoding const *mem_24 ;
  int (*mem_25)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_26 ;
  int (*mem_27)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_28 ;
  int (*mem_29)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_30 ;
  struct normal_encoding const *mem_31 ;
  int (*mem_32)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_33 ;
  int (*mem_34)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_35 ;
  int (*mem_36)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_37 ;
  struct normal_encoding *mem_38 ;
  struct normal_encoding *mem_39 ;
  struct normal_encoding const *mem_40 ;
  int (*mem_41)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_42 ;
  int (*mem_43)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_44 ;
  int (*mem_45)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_46 ;
  struct normal_encoding *mem_47 ;
  struct normal_encoding const *mem_48 ;
  int (*mem_49)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_50 ;
  int (*mem_51)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_52 ;
  int (*mem_53)(ENCODING const * , char const * ) ;
  int __retres54 ;

  {
  __CrestCall(77580, 843);

  __CrestLoad(77581, (unsigned long )0, (long long )0);
  __CrestStore(77582, (unsigned long )(& hadColon));
# 530 "xmltok_impl.c"
  hadColon = 0;
  {
# 532 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(77585, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(77584, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(77583, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 532 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(77586, 49542, 1);

    } else {
      __CrestBranch(77587, 49543, 0);
# 532 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 533 "xmltok_impl.c"
    mem_23 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77590, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77589, (unsigned long )0, (long long )29);
    __CrestApply2(77588, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 29));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(77591, 49548, 1);
# 534 "xmltok_impl.c"
      goto case_29;
    } else {
      __CrestBranch(77592, 49549, 0);

    }
    }
    {
    __CrestLoad(77595, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77594, (unsigned long )0, (long long )27);
    __CrestApply2(77593, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 27));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(77596, 49551, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77597, 49552, 0);

    }
    }
    {
    __CrestLoad(77600, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77599, (unsigned long )0, (long long )26);
    __CrestApply2(77598, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 26));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(77601, 49554, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77602, 49555, 0);

    }
    }
    {
    __CrestLoad(77605, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77604, (unsigned long )0, (long long )25);
    __CrestApply2(77603, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 25));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(77606, 49557, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77607, 49558, 0);

    }
    }
    {
    __CrestLoad(77610, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77609, (unsigned long )0, (long long )24);
    __CrestApply2(77608, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 24));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(77611, 49560, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77612, 49561, 0);

    }
    }
    {
    __CrestLoad(77615, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77614, (unsigned long )0, (long long )22);
    __CrestApply2(77613, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 22));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(77616, 49563, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(77617, 49564, 0);

    }
    }
    {
    __CrestLoad(77620, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77619, (unsigned long )0, (long long )5);
    __CrestApply2(77618, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 5));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(77621, 49566, 1);
# 534 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(77622, 49567, 0);

    }
    }
    {
    __CrestLoad(77625, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77624, (unsigned long )0, (long long )6);
    __CrestApply2(77623, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 6));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(77626, 49569, 1);
# 534 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(77627, 49570, 0);

    }
    }
    {
    __CrestLoad(77630, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77629, (unsigned long )0, (long long )7);
    __CrestApply2(77628, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 7));
# 534 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(77631, 49572, 1);
# 534 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(77632, 49573, 0);

    }
    }
    {
    __CrestLoad(77635, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77634, (unsigned long )0, (long long )23);
    __CrestApply2(77633, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 23));
# 536 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(77636, 49575, 1);
# 536 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(77637, 49576, 0);

    }
    }
    {
    __CrestLoad(77640, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77639, (unsigned long )0, (long long )10);
    __CrestApply2(77638, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 10));
# 553 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(77641, 49578, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77642, 49579, 0);

    }
    }
    {
    __CrestLoad(77645, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77644, (unsigned long )0, (long long )9);
    __CrestApply2(77643, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 9));
# 553 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(77646, 49581, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77647, 49582, 0);

    }
    }
    {
    __CrestLoad(77650, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77649, (unsigned long )0, (long long )21);
    __CrestApply2(77648, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 21));
# 553 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(77651, 49584, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(77652, 49585, 0);

    }
    }
    {
    __CrestLoad(77655, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
    __CrestLoad(77654, (unsigned long )0, (long long )14);
    __CrestApply2(77653, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 14));
# 574 "xmltok_impl.c"
    if ((int )mem_23->type[(unsigned char )*ptr] == 14) {
      __CrestBranch(77656, 49587, 1);
# 574 "xmltok_impl.c"
      goto case_14;
    } else {
      __CrestBranch(77657, 49588, 0);

    }
    }
# 674 "xmltok_impl.c"
    goto switch_default___5;
    case_29:
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77658, (unsigned long )0, (long long )0);
    __CrestStore(77659, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
    __retres54 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24:
    case_22:
# 534 "xmltok_impl.c"
    ptr ++;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_5:
    {
    __CrestLoad(77664, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77663, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77662, 18, (long long )(end - ptr));
    __CrestLoad(77661, (unsigned long )0, (long long )2L);
    __CrestApply2(77660, 16, (long long )(end - ptr < 2L));
# 534 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(77665, 49596, 1);
      __CrestLoad(77667, (unsigned long )0, (long long )-2);
      __CrestStore(77668, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77666, 49598, 0);

    }
    }
# 534 "xmltok_impl.c"
    mem_24 = (struct normal_encoding const *)enc;
# 534 "xmltok_impl.c"
    mem_25 = mem_24->isName2;
# 534 "xmltok_impl.c"
    tmp = (*mem_25)(enc, ptr);
    __CrestHandleReturn(77670, (long long )tmp);
    __CrestStore(77669, (unsigned long )(& tmp));
    {
    __CrestLoad(77673, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(77672, (unsigned long )0, (long long )0);
    __CrestApply2(77671, 13, (long long )(tmp != 0));
# 534 "xmltok_impl.c"
    if (tmp != 0) {
      __CrestBranch(77674, 49601, 1);

    } else {
      __CrestBranch(77675, 49602, 0);
# 534 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77676, (unsigned long )0, (long long )0);
      __CrestStore(77677, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = 0;
# 534 "xmltok_impl.c"
      goto return_label;
    }
    }
# 534 "xmltok_impl.c"
    ptr += 2;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(77682, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77681, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77680, 18, (long long )(end - ptr));
    __CrestLoad(77679, (unsigned long )0, (long long )3L);
    __CrestApply2(77678, 16, (long long )(end - ptr < 3L));
# 534 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(77683, 49608, 1);
      __CrestLoad(77685, (unsigned long )0, (long long )-2);
      __CrestStore(77686, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77684, 49610, 0);

    }
    }
# 534 "xmltok_impl.c"
    mem_26 = (struct normal_encoding const *)enc;
# 534 "xmltok_impl.c"
    mem_27 = mem_26->isName3;
# 534 "xmltok_impl.c"
    tmp___0 = (*mem_27)(enc, ptr);
    __CrestHandleReturn(77688, (long long )tmp___0);
    __CrestStore(77687, (unsigned long )(& tmp___0));
    {
    __CrestLoad(77691, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(77690, (unsigned long )0, (long long )0);
    __CrestApply2(77689, 13, (long long )(tmp___0 != 0));
# 534 "xmltok_impl.c"
    if (tmp___0 != 0) {
      __CrestBranch(77692, 49613, 1);

    } else {
      __CrestBranch(77693, 49614, 0);
# 534 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77694, (unsigned long )0, (long long )0);
      __CrestStore(77695, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = 0;
# 534 "xmltok_impl.c"
      goto return_label;
    }
    }
# 534 "xmltok_impl.c"
    ptr += 3;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(77700, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77699, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77698, 18, (long long )(end - ptr));
    __CrestLoad(77697, (unsigned long )0, (long long )4L);
    __CrestApply2(77696, 16, (long long )(end - ptr < 4L));
# 534 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(77701, 49620, 1);
      __CrestLoad(77703, (unsigned long )0, (long long )-2);
      __CrestStore(77704, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77702, 49622, 0);

    }
    }
# 534 "xmltok_impl.c"
    mem_28 = (struct normal_encoding const *)enc;
# 534 "xmltok_impl.c"
    mem_29 = mem_28->isName4;
# 534 "xmltok_impl.c"
    tmp___1 = (*mem_29)(enc, ptr);
    __CrestHandleReturn(77706, (long long )tmp___1);
    __CrestStore(77705, (unsigned long )(& tmp___1));
    {
    __CrestLoad(77709, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(77708, (unsigned long )0, (long long )0);
    __CrestApply2(77707, 13, (long long )(tmp___1 != 0));
# 534 "xmltok_impl.c"
    if (tmp___1 != 0) {
      __CrestBranch(77710, 49625, 1);

    } else {
      __CrestBranch(77711, 49626, 0);
# 534 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77712, (unsigned long )0, (long long )0);
      __CrestStore(77713, (unsigned long )(& __retres54));
# 534 "xmltok_impl.c"
      __retres54 = 0;
# 534 "xmltok_impl.c"
      goto return_label;
    }
    }
# 534 "xmltok_impl.c"
    ptr += 4;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_23:
    {
    __CrestLoad(77716, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(77715, (unsigned long )0, (long long )0);
    __CrestApply2(77714, 13, (long long )(hadColon != 0));
# 537 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(77717, 49632, 1);
# 538 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77719, (unsigned long )0, (long long )0);
      __CrestStore(77720, (unsigned long )(& __retres54));
# 539 "xmltok_impl.c"
      __retres54 = 0;
# 539 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77718, 49635, 0);

    }
    }
    __CrestLoad(77721, (unsigned long )0, (long long )1);
    __CrestStore(77722, (unsigned long )(& hadColon));
# 541 "xmltok_impl.c"
    hadColon = 1;
# 542 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(77725, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(77724, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(77723, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 543 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(77726, 49638, 1);
      __CrestLoad(77728, (unsigned long )0, (long long )-1);
      __CrestStore(77729, (unsigned long )(& __retres54));
# 544 "xmltok_impl.c"
      __retres54 = -1;
# 544 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77727, 49640, 0);

    }
    }
    {
# 545 "xmltok_impl.c"
    mem_30 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(77732, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77731, (unsigned long )0, (long long )29);
    __CrestApply2(77730, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 29));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(77733, 49645, 1);
# 546 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(77734, 49646, 0);

    }
    }
    {
    __CrestLoad(77737, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77736, (unsigned long )0, (long long )24);
    __CrestApply2(77735, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 24));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(77738, 49648, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(77739, 49649, 0);

    }
    }
    {
    __CrestLoad(77742, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77741, (unsigned long )0, (long long )22);
    __CrestApply2(77740, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 22));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(77743, 49651, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(77744, 49652, 0);

    }
    }
    {
    __CrestLoad(77747, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77746, (unsigned long )0, (long long )5);
    __CrestApply2(77745, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 5));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(77748, 49654, 1);
# 546 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(77749, 49655, 0);

    }
    }
    {
    __CrestLoad(77752, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77751, (unsigned long )0, (long long )6);
    __CrestApply2(77750, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 6));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(77753, 49657, 1);
# 546 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(77754, 49658, 0);

    }
    }
    {
    __CrestLoad(77757, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestLoad(77756, (unsigned long )0, (long long )7);
    __CrestApply2(77755, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 7));
# 546 "xmltok_impl.c"
    if ((int )mem_30->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(77758, 49660, 1);
# 546 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(77759, 49661, 0);

    }
    }
# 547 "xmltok_impl.c"
    goto switch_default;
    case_29___0:
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77760, (unsigned long )0, (long long )0);
    __CrestStore(77761, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
    __retres54 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
    case_24___0:
    case_22___0:
# 546 "xmltok_impl.c"
    ptr ++;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(77766, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77765, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77764, 18, (long long )(end - ptr));
    __CrestLoad(77763, (unsigned long )0, (long long )2L);
    __CrestApply2(77762, 16, (long long )(end - ptr < 2L));
# 546 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(77767, 49669, 1);
      __CrestLoad(77769, (unsigned long )0, (long long )-2);
      __CrestStore(77770, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77768, 49671, 0);

    }
    }
# 546 "xmltok_impl.c"
    mem_31 = (struct normal_encoding const *)enc;
# 546 "xmltok_impl.c"
    mem_32 = mem_31->isNmstrt2;
# 546 "xmltok_impl.c"
    tmp___2 = (*mem_32)(enc, ptr);
    __CrestHandleReturn(77772, (long long )tmp___2);
    __CrestStore(77771, (unsigned long )(& tmp___2));
    {
    __CrestLoad(77775, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(77774, (unsigned long )0, (long long )0);
    __CrestApply2(77773, 13, (long long )(tmp___2 != 0));
# 546 "xmltok_impl.c"
    if (tmp___2 != 0) {
      __CrestBranch(77776, 49674, 1);

    } else {
      __CrestBranch(77777, 49675, 0);
# 546 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77778, (unsigned long )0, (long long )0);
      __CrestStore(77779, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = 0;
# 546 "xmltok_impl.c"
      goto return_label;
    }
    }
# 546 "xmltok_impl.c"
    ptr += 2;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(77784, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77783, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77782, 18, (long long )(end - ptr));
    __CrestLoad(77781, (unsigned long )0, (long long )3L);
    __CrestApply2(77780, 16, (long long )(end - ptr < 3L));
# 546 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(77785, 49681, 1);
      __CrestLoad(77787, (unsigned long )0, (long long )-2);
      __CrestStore(77788, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77786, 49683, 0);

    }
    }
# 546 "xmltok_impl.c"
    mem_33 = (struct normal_encoding const *)enc;
# 546 "xmltok_impl.c"
    mem_34 = mem_33->isNmstrt3;
# 546 "xmltok_impl.c"
    tmp___3 = (*mem_34)(enc, ptr);
    __CrestHandleReturn(77790, (long long )tmp___3);
    __CrestStore(77789, (unsigned long )(& tmp___3));
    {
    __CrestLoad(77793, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(77792, (unsigned long )0, (long long )0);
    __CrestApply2(77791, 13, (long long )(tmp___3 != 0));
# 546 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(77794, 49686, 1);

    } else {
      __CrestBranch(77795, 49687, 0);
# 546 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77796, (unsigned long )0, (long long )0);
      __CrestStore(77797, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = 0;
# 546 "xmltok_impl.c"
      goto return_label;
    }
    }
# 546 "xmltok_impl.c"
    ptr += 3;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(77802, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(77801, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(77800, 18, (long long )(end - ptr));
    __CrestLoad(77799, (unsigned long )0, (long long )4L);
    __CrestApply2(77798, 16, (long long )(end - ptr < 4L));
# 546 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(77803, 49693, 1);
      __CrestLoad(77805, (unsigned long )0, (long long )-2);
      __CrestStore(77806, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(77804, 49695, 0);

    }
    }
# 546 "xmltok_impl.c"
    mem_35 = (struct normal_encoding const *)enc;
# 546 "xmltok_impl.c"
    mem_36 = mem_35->isNmstrt4;
# 546 "xmltok_impl.c"
    tmp___4 = (*mem_36)(enc, ptr);
    __CrestHandleReturn(77808, (long long )tmp___4);
    __CrestStore(77807, (unsigned long )(& tmp___4));
    {
    __CrestLoad(77811, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(77810, (unsigned long )0, (long long )0);
    __CrestApply2(77809, 13, (long long )(tmp___4 != 0));
# 546 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(77812, 49698, 1);

    } else {
      __CrestBranch(77813, 49699, 0);
# 546 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77814, (unsigned long )0, (long long )0);
      __CrestStore(77815, (unsigned long )(& __retres54));
# 546 "xmltok_impl.c"
      __retres54 = 0;
# 546 "xmltok_impl.c"
      goto return_label;
    }
    }
# 546 "xmltok_impl.c"
    ptr += 4;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    switch_default:
# 548 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(77816, (unsigned long )0, (long long )0);
    __CrestStore(77817, (unsigned long )(& __retres54));
# 549 "xmltok_impl.c"
    __retres54 = 0;
# 549 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
# 551 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    case_21:
    {
# 554 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
# 557 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(77820, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77819, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77818, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 558 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(77821, 49714, 1);
        __CrestLoad(77823, (unsigned long )0, (long long )-1);
        __CrestStore(77824, (unsigned long )(& __retres54));
# 559 "xmltok_impl.c"
        __retres54 = -1;
# 559 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77822, 49716, 0);

      }
      }
# 560 "xmltok_impl.c"
      mem_37 = (struct normal_encoding *)enc;
      __CrestLoad(77825, (unsigned long )(& mem_37->type[(unsigned char )*ptr]), (long long )mem_37->type[(unsigned char )*ptr]);
      __CrestStore(77826, (unsigned long )(& t));
# 560 "xmltok_impl.c"
      t = (int )mem_37->type[(unsigned char )*ptr];
      {
      __CrestLoad(77829, (unsigned long )(& t), (long long )t);
      __CrestLoad(77828, (unsigned long )0, (long long )14);
      __CrestApply2(77827, 12, (long long )(t == 14));
# 561 "xmltok_impl.c"
      if (t == 14) {
        __CrestBranch(77830, 49719, 1);
# 562 "xmltok_impl.c"
        goto while_break___0;
      } else {
        __CrestBranch(77831, 49720, 0);

      }
      }
      {
      {
      __CrestLoad(77834, (unsigned long )(& t), (long long )t);
      __CrestLoad(77833, (unsigned long )0, (long long )9);
      __CrestApply2(77832, 12, (long long )(t == 9));
# 566 "xmltok_impl.c"
      if (t == 9) {
        __CrestBranch(77835, 49723, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(77836, 49724, 0);

      }
      }
      {
      __CrestLoad(77839, (unsigned long )(& t), (long long )t);
      __CrestLoad(77838, (unsigned long )0, (long long )10);
      __CrestApply2(77837, 12, (long long )(t == 10));
# 566 "xmltok_impl.c"
      if (t == 10) {
        __CrestBranch(77840, 49726, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(77841, 49727, 0);

      }
      }
      {
      __CrestLoad(77844, (unsigned long )(& t), (long long )t);
      __CrestLoad(77843, (unsigned long )0, (long long )21);
      __CrestApply2(77842, 12, (long long )(t == 21));
# 566 "xmltok_impl.c"
      if (t == 21) {
        __CrestBranch(77845, 49729, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(77846, 49730, 0);

      }
      }
# 568 "xmltok_impl.c"
      goto switch_default___0;
      case_9___0:
      case_10___0:
      case_21___0:
# 567 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 569 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77847, (unsigned long )0, (long long )0);
      __CrestStore(77848, (unsigned long )(& __retres54));
# 570 "xmltok_impl.c"
      __retres54 = 0;
# 570 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
    }
    while_break___0: ;
    }
    case_14:
    __CrestLoad(77849, (unsigned long )0, (long long )0);
    __CrestStore(77850, (unsigned long )(& hadColon));
# 578 "xmltok_impl.c"
    hadColon = 0;
    {
# 580 "xmltok_impl.c"
    while (1) {
      while_continue___1: ;
# 581 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(77853, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77852, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77851, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 582 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(77854, 49744, 1);
        __CrestLoad(77856, (unsigned long )0, (long long )-1);
        __CrestStore(77857, (unsigned long )(& __retres54));
# 583 "xmltok_impl.c"
        __retres54 = -1;
# 583 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77855, 49746, 0);

      }
      }
# 584 "xmltok_impl.c"
      mem_38 = (struct normal_encoding *)enc;
      __CrestLoad(77858, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
      __CrestStore(77859, (unsigned long )(& open));
# 584 "xmltok_impl.c"
      open = (int )mem_38->type[(unsigned char )*ptr];
      {
      __CrestLoad(77862, (unsigned long )(& open), (long long )open);
      __CrestLoad(77861, (unsigned long )0, (long long )12);
      __CrestApply2(77860, 12, (long long )(open == 12));
# 585 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(77863, 49749, 1);
# 586 "xmltok_impl.c"
        goto while_break___1;
      } else {
        __CrestBranch(77864, 49750, 0);
        {
        __CrestLoad(77867, (unsigned long )(& open), (long long )open);
        __CrestLoad(77866, (unsigned long )0, (long long )13);
        __CrestApply2(77865, 12, (long long )(open == 13));
# 585 "xmltok_impl.c"
        if (open == 13) {
          __CrestBranch(77868, 49751, 1);
# 586 "xmltok_impl.c"
          goto while_break___1;
        } else {
          __CrestBranch(77869, 49752, 0);

        }
        }
      }
      }
      {
      {
      __CrestLoad(77872, (unsigned long )(& open), (long long )open);
      __CrestLoad(77871, (unsigned long )0, (long long )9);
      __CrestApply2(77870, 12, (long long )(open == 9));
# 590 "xmltok_impl.c"
      if (open == 9) {
        __CrestBranch(77873, 49755, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(77874, 49756, 0);

      }
      }
      {
      __CrestLoad(77877, (unsigned long )(& open), (long long )open);
      __CrestLoad(77876, (unsigned long )0, (long long )10);
      __CrestApply2(77875, 12, (long long )(open == 10));
# 590 "xmltok_impl.c"
      if (open == 10) {
        __CrestBranch(77878, 49758, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(77879, 49759, 0);

      }
      }
      {
      __CrestLoad(77882, (unsigned long )(& open), (long long )open);
      __CrestLoad(77881, (unsigned long )0, (long long )21);
      __CrestApply2(77880, 12, (long long )(open == 21));
# 590 "xmltok_impl.c"
      if (open == 21) {
        __CrestBranch(77883, 49761, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(77884, 49762, 0);

      }
      }
# 592 "xmltok_impl.c"
      goto switch_default___1;
      case_9___1:
      case_10___1:
      case_21___1:
# 591 "xmltok_impl.c"
      goto switch_break___2;
      switch_default___1:
# 593 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77885, (unsigned long )0, (long long )0);
      __CrestStore(77886, (unsigned long )(& __retres54));
# 594 "xmltok_impl.c"
      __retres54 = 0;
# 594 "xmltok_impl.c"
      goto return_label;
      switch_break___2: ;
      }
    }
    while_break___1: ;
    }
# 597 "xmltok_impl.c"
    ptr ++;
    {
# 599 "xmltok_impl.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(77889, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(77888, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(77887, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 601 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(77890, 49775, 1);
        __CrestLoad(77892, (unsigned long )0, (long long )-1);
        __CrestStore(77893, (unsigned long )(& __retres54));
# 602 "xmltok_impl.c"
        __retres54 = -1;
# 602 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77891, 49777, 0);

      }
      }
# 603 "xmltok_impl.c"
      mem_39 = (struct normal_encoding *)enc;
      __CrestLoad(77894, (unsigned long )(& mem_39->type[(unsigned char )*ptr]), (long long )mem_39->type[(unsigned char )*ptr]);
      __CrestStore(77895, (unsigned long )(& t___0));
# 603 "xmltok_impl.c"
      t___0 = (int )mem_39->type[(unsigned char )*ptr];
      {
      __CrestLoad(77898, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77897, (unsigned long )(& open), (long long )open);
      __CrestApply2(77896, 12, (long long )(t___0 == open));
# 604 "xmltok_impl.c"
      if (t___0 == open) {
        __CrestBranch(77899, 49780, 1);
# 605 "xmltok_impl.c"
        goto while_break___2;
      } else {
        __CrestBranch(77900, 49781, 0);

      }
      }
      {
      {
      __CrestLoad(77903, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77902, (unsigned long )0, (long long )5);
      __CrestApply2(77901, 12, (long long )(t___0 == 5));
# 607 "xmltok_impl.c"
      if (t___0 == 5) {
        __CrestBranch(77904, 49784, 1);
# 607 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(77905, 49785, 0);

      }
      }
      {
      __CrestLoad(77908, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77907, (unsigned long )0, (long long )6);
      __CrestApply2(77906, 12, (long long )(t___0 == 6));
# 607 "xmltok_impl.c"
      if (t___0 == 6) {
        __CrestBranch(77909, 49787, 1);
# 607 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(77910, 49788, 0);

      }
      }
      {
      __CrestLoad(77913, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77912, (unsigned long )0, (long long )7);
      __CrestApply2(77911, 12, (long long )(t___0 == 7));
# 607 "xmltok_impl.c"
      if (t___0 == 7) {
        __CrestBranch(77914, 49790, 1);
# 607 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(77915, 49791, 0);

      }
      }
      {
      __CrestLoad(77918, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77917, (unsigned long )0, (long long )8);
      __CrestApply2(77916, 12, (long long )(t___0 == 8));
# 607 "xmltok_impl.c"
      if (t___0 == 8) {
        __CrestBranch(77919, 49793, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(77920, 49794, 0);

      }
      }
      {
      __CrestLoad(77923, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77922, (unsigned long )0, (long long )1);
      __CrestApply2(77921, 12, (long long )(t___0 == 1));
# 607 "xmltok_impl.c"
      if (t___0 == 1) {
        __CrestBranch(77924, 49796, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(77925, 49797, 0);

      }
      }
      {
      __CrestLoad(77928, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77927, (unsigned long )0, (long long )0);
      __CrestApply2(77926, 12, (long long )(t___0 == 0));
# 607 "xmltok_impl.c"
      if (t___0 == 0) {
        __CrestBranch(77929, 49799, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(77930, 49800, 0);

      }
      }
      {
      __CrestLoad(77933, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77932, (unsigned long )0, (long long )3);
      __CrestApply2(77931, 12, (long long )(t___0 == 3));
# 608 "xmltok_impl.c"
      if (t___0 == 3) {
        __CrestBranch(77934, 49802, 1);
# 608 "xmltok_impl.c"
        goto case_3;
      } else {
        __CrestBranch(77935, 49803, 0);

      }
      }
      {
      __CrestLoad(77938, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(77937, (unsigned long )0, (long long )2);
      __CrestApply2(77936, 12, (long long )(t___0 == 2));
# 618 "xmltok_impl.c"
      if (t___0 == 2) {
        __CrestBranch(77939, 49805, 1);
# 618 "xmltok_impl.c"
        goto case_2;
      } else {
        __CrestBranch(77940, 49806, 0);

      }
      }
# 621 "xmltok_impl.c"
      goto switch_default___2;
      case_5___1:
      {
      __CrestLoad(77945, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(77944, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(77943, 18, (long long )(end - ptr));
      __CrestLoad(77942, (unsigned long )0, (long long )2L);
      __CrestApply2(77941, 16, (long long )(end - ptr < 2L));
# 607 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(77946, 49809, 1);
        __CrestLoad(77948, (unsigned long )0, (long long )-2);
        __CrestStore(77949, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77947, 49811, 0);

      }
      }
# 607 "xmltok_impl.c"
      mem_40 = (struct normal_encoding const *)enc;
# 607 "xmltok_impl.c"
      mem_41 = mem_40->isInvalid2;
# 607 "xmltok_impl.c"
      tmp___5 = (*mem_41)(enc, ptr);
      __CrestHandleReturn(77951, (long long )tmp___5);
      __CrestStore(77950, (unsigned long )(& tmp___5));
      {
      __CrestLoad(77954, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(77953, (unsigned long )0, (long long )0);
      __CrestApply2(77952, 13, (long long )(tmp___5 != 0));
# 607 "xmltok_impl.c"
      if (tmp___5 != 0) {
        __CrestBranch(77955, 49814, 1);
# 607 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(77957, (unsigned long )0, (long long )0);
        __CrestStore(77958, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = 0;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77956, 49817, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 2;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_6___1:
      {
      __CrestLoad(77963, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(77962, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(77961, 18, (long long )(end - ptr));
      __CrestLoad(77960, (unsigned long )0, (long long )3L);
      __CrestApply2(77959, 16, (long long )(end - ptr < 3L));
# 607 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(77964, 49821, 1);
        __CrestLoad(77966, (unsigned long )0, (long long )-2);
        __CrestStore(77967, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77965, 49823, 0);

      }
      }
# 607 "xmltok_impl.c"
      mem_42 = (struct normal_encoding const *)enc;
# 607 "xmltok_impl.c"
      mem_43 = mem_42->isInvalid3;
# 607 "xmltok_impl.c"
      tmp___6 = (*mem_43)(enc, ptr);
      __CrestHandleReturn(77969, (long long )tmp___6);
      __CrestStore(77968, (unsigned long )(& tmp___6));
      {
      __CrestLoad(77972, (unsigned long )(& tmp___6), (long long )tmp___6);
      __CrestLoad(77971, (unsigned long )0, (long long )0);
      __CrestApply2(77970, 13, (long long )(tmp___6 != 0));
# 607 "xmltok_impl.c"
      if (tmp___6 != 0) {
        __CrestBranch(77973, 49826, 1);
# 607 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(77975, (unsigned long )0, (long long )0);
        __CrestStore(77976, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = 0;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77974, 49829, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 3;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_7___1:
      {
      __CrestLoad(77981, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(77980, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(77979, 18, (long long )(end - ptr));
      __CrestLoad(77978, (unsigned long )0, (long long )4L);
      __CrestApply2(77977, 16, (long long )(end - ptr < 4L));
# 607 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(77982, 49833, 1);
        __CrestLoad(77984, (unsigned long )0, (long long )-2);
        __CrestStore(77985, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77983, 49835, 0);

      }
      }
# 607 "xmltok_impl.c"
      mem_44 = (struct normal_encoding const *)enc;
# 607 "xmltok_impl.c"
      mem_45 = mem_44->isInvalid4;
# 607 "xmltok_impl.c"
      tmp___7 = (*mem_45)(enc, ptr);
      __CrestHandleReturn(77987, (long long )tmp___7);
      __CrestStore(77986, (unsigned long )(& tmp___7));
      {
      __CrestLoad(77990, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestLoad(77989, (unsigned long )0, (long long )0);
      __CrestApply2(77988, 13, (long long )(tmp___7 != 0));
# 607 "xmltok_impl.c"
      if (tmp___7 != 0) {
        __CrestBranch(77991, 49838, 1);
# 607 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(77993, (unsigned long )0, (long long )0);
        __CrestStore(77994, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
        __retres54 = 0;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(77992, 49841, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 4;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_8:
      case_1:
      case_0:
# 607 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(77995, (unsigned long )0, (long long )0);
      __CrestStore(77996, (unsigned long )(& __retres54));
# 607 "xmltok_impl.c"
      __retres54 = 0;
# 607 "xmltok_impl.c"
      goto return_label;
      case_3:
# 610 "xmltok_impl.c"
      tmp___8 = normal_scanRef(enc, ptr + 1, end, & ptr);
      __CrestHandleReturn(77998, (long long )tmp___8);
      __CrestStore(77997, (unsigned long )(& tmp___8));
      __CrestLoad(77999, (unsigned long )(& tmp___8), (long long )tmp___8);
      __CrestStore(78000, (unsigned long )(& tok));
# 610 "xmltok_impl.c"
      tok = tmp___8;
      {
      __CrestLoad(78003, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(78002, (unsigned long )0, (long long )0);
      __CrestApply2(78001, 15, (long long )(tok <= 0));
# 611 "xmltok_impl.c"
      if (tok <= 0) {
        __CrestBranch(78004, 49849, 1);
        {
        __CrestLoad(78008, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(78007, (unsigned long )0, (long long )0);
        __CrestApply2(78006, 12, (long long )(tok == 0));
# 612 "xmltok_impl.c"
        if (tok == 0) {
          __CrestBranch(78009, 49850, 1);
# 613 "xmltok_impl.c"
          *nextTokPtr = ptr;
        } else {
          __CrestBranch(78010, 49851, 0);

        }
        }
        __CrestLoad(78011, (unsigned long )(& tok), (long long )tok);
        __CrestStore(78012, (unsigned long )(& __retres54));
# 614 "xmltok_impl.c"
        __retres54 = tok;
# 614 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78005, 49854, 0);

      }
      }
# 616 "xmltok_impl.c"
      goto switch_break___3;
      case_2:
# 619 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78013, (unsigned long )0, (long long )0);
      __CrestStore(78014, (unsigned long )(& __retres54));
# 620 "xmltok_impl.c"
      __retres54 = 0;
# 620 "xmltok_impl.c"
      goto return_label;
      switch_default___2:
# 622 "xmltok_impl.c"
      ptr ++;
# 623 "xmltok_impl.c"
      goto switch_break___3;
      switch_break___3: ;
      }
    }
    while_break___2: ;
    }
# 626 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(78017, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(78016, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(78015, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 627 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(78018, 49865, 1);
      __CrestLoad(78020, (unsigned long )0, (long long )-1);
      __CrestStore(78021, (unsigned long )(& __retres54));
# 628 "xmltok_impl.c"
      __retres54 = -1;
# 628 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78019, 49867, 0);

    }
    }
    {
# 629 "xmltok_impl.c"
    mem_46 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(78024, (unsigned long )(& mem_46->type[(unsigned char )*ptr]), (long long )mem_46->type[(unsigned char )*ptr]);
    __CrestLoad(78023, (unsigned long )0, (long long )10);
    __CrestApply2(78022, 12, (long long )((int )mem_46->type[(unsigned char )*ptr] == 10));
# 632 "xmltok_impl.c"
    if ((int )mem_46->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(78025, 49872, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(78026, 49873, 0);

    }
    }
    {
    __CrestLoad(78029, (unsigned long )(& mem_46->type[(unsigned char )*ptr]), (long long )mem_46->type[(unsigned char )*ptr]);
    __CrestLoad(78028, (unsigned long )0, (long long )9);
    __CrestApply2(78027, 12, (long long )((int )mem_46->type[(unsigned char )*ptr] == 9));
# 632 "xmltok_impl.c"
    if ((int )mem_46->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(78030, 49875, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(78031, 49876, 0);

    }
    }
    {
    __CrestLoad(78034, (unsigned long )(& mem_46->type[(unsigned char )*ptr]), (long long )mem_46->type[(unsigned char )*ptr]);
    __CrestLoad(78033, (unsigned long )0, (long long )21);
    __CrestApply2(78032, 12, (long long )((int )mem_46->type[(unsigned char )*ptr] == 21));
# 632 "xmltok_impl.c"
    if ((int )mem_46->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(78035, 49878, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(78036, 49879, 0);

    }
    }
    {
    __CrestLoad(78039, (unsigned long )(& mem_46->type[(unsigned char )*ptr]), (long long )mem_46->type[(unsigned char )*ptr]);
    __CrestLoad(78038, (unsigned long )0, (long long )17);
    __CrestApply2(78037, 12, (long long )((int )mem_46->type[(unsigned char )*ptr] == 17));
# 634 "xmltok_impl.c"
    if ((int )mem_46->type[(unsigned char )*ptr] == 17) {
      __CrestBranch(78040, 49881, 1);
# 634 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(78041, 49882, 0);

    }
    }
    {
    __CrestLoad(78044, (unsigned long )(& mem_46->type[(unsigned char )*ptr]), (long long )mem_46->type[(unsigned char )*ptr]);
    __CrestLoad(78043, (unsigned long )0, (long long )11);
    __CrestApply2(78042, 12, (long long )((int )mem_46->type[(unsigned char )*ptr] == 11));
# 636 "xmltok_impl.c"
    if ((int )mem_46->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(78045, 49884, 1);
# 636 "xmltok_impl.c"
      goto case_11;
    } else {
      __CrestBranch(78046, 49885, 0);

    }
    }
# 638 "xmltok_impl.c"
    goto switch_default___3;
    case_10___2:
    case_9___2:
    case_21___2:
# 633 "xmltok_impl.c"
    goto switch_break___4;
    case_17:
# 635 "xmltok_impl.c"
    goto sol;
    case_11:
# 637 "xmltok_impl.c"
    goto gt;
    switch_default___3:
# 639 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78047, (unsigned long )0, (long long )0);
    __CrestStore(78048, (unsigned long )(& __retres54));
# 640 "xmltok_impl.c"
    __retres54 = 0;
# 640 "xmltok_impl.c"
    goto return_label;
    switch_break___4: ;
    }
    }
    {
# 643 "xmltok_impl.c"
    while (1) {
      while_continue___3: ;
# 644 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(78051, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(78050, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(78049, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 645 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(78052, 49899, 1);
        __CrestLoad(78054, (unsigned long )0, (long long )-1);
        __CrestStore(78055, (unsigned long )(& __retres54));
# 646 "xmltok_impl.c"
        __retres54 = -1;
# 646 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78053, 49901, 0);

      }
      }
      {
# 647 "xmltok_impl.c"
      mem_47 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(78058, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78057, (unsigned long )0, (long long )29);
      __CrestApply2(78056, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 29));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 29) {
        __CrestBranch(78059, 49906, 1);
# 648 "xmltok_impl.c"
        goto case_29___1;
      } else {
        __CrestBranch(78060, 49907, 0);

      }
      }
      {
      __CrestLoad(78063, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78062, (unsigned long )0, (long long )24);
      __CrestApply2(78061, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 24));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 24) {
        __CrestBranch(78064, 49909, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(78065, 49910, 0);

      }
      }
      {
      __CrestLoad(78068, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78067, (unsigned long )0, (long long )22);
      __CrestApply2(78066, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 22));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 22) {
        __CrestBranch(78069, 49912, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(78070, 49913, 0);

      }
      }
      {
      __CrestLoad(78073, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78072, (unsigned long )0, (long long )5);
      __CrestApply2(78071, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 5));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 5) {
        __CrestBranch(78074, 49915, 1);
# 648 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(78075, 49916, 0);

      }
      }
      {
      __CrestLoad(78078, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78077, (unsigned long )0, (long long )6);
      __CrestApply2(78076, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 6));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 6) {
        __CrestBranch(78079, 49918, 1);
# 648 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(78080, 49919, 0);

      }
      }
      {
      __CrestLoad(78083, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78082, (unsigned long )0, (long long )7);
      __CrestApply2(78081, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 7));
# 648 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 7) {
        __CrestBranch(78084, 49921, 1);
# 648 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(78085, 49922, 0);

      }
      }
      {
      __CrestLoad(78088, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78087, (unsigned long )0, (long long )10);
      __CrestApply2(78086, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 10));
# 649 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(78089, 49924, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(78090, 49925, 0);

      }
      }
      {
      __CrestLoad(78093, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78092, (unsigned long )0, (long long )9);
      __CrestApply2(78091, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 9));
# 649 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 9) {
        __CrestBranch(78094, 49927, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(78095, 49928, 0);

      }
      }
      {
      __CrestLoad(78098, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78097, (unsigned long )0, (long long )21);
      __CrestApply2(78096, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 21));
# 649 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 21) {
        __CrestBranch(78099, 49930, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(78100, 49931, 0);

      }
      }
      {
      __CrestLoad(78103, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78102, (unsigned long )0, (long long )11);
      __CrestApply2(78101, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 11));
# 651 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 11) {
        __CrestBranch(78104, 49933, 1);
# 651 "xmltok_impl.c"
        goto gt;
      } else {
        __CrestBranch(78105, 49934, 0);

      }
      }
      {
      __CrestLoad(78108, (unsigned long )(& mem_47->type[(unsigned char )*ptr]), (long long )mem_47->type[(unsigned char )*ptr]);
      __CrestLoad(78107, (unsigned long )0, (long long )17);
      __CrestApply2(78106, 12, (long long )((int )mem_47->type[(unsigned char )*ptr] == 17));
# 655 "xmltok_impl.c"
      if ((int )mem_47->type[(unsigned char )*ptr] == 17) {
        __CrestBranch(78109, 49936, 1);
# 655 "xmltok_impl.c"
        goto sol;
      } else {
        __CrestBranch(78110, 49937, 0);

      }
      }
# 666 "xmltok_impl.c"
      goto switch_default___4;
      case_29___1:
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78111, (unsigned long )0, (long long )0);
      __CrestStore(78112, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
      __retres54 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
      case_24___1:
      case_22___1:
# 648 "xmltok_impl.c"
      ptr ++;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_5___2:
      {
      __CrestLoad(78117, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78116, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78115, 18, (long long )(end - ptr));
      __CrestLoad(78114, (unsigned long )0, (long long )2L);
      __CrestApply2(78113, 16, (long long )(end - ptr < 2L));
# 648 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(78118, 49945, 1);
        __CrestLoad(78120, (unsigned long )0, (long long )-2);
        __CrestStore(78121, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78119, 49947, 0);

      }
      }
# 648 "xmltok_impl.c"
      mem_48 = (struct normal_encoding const *)enc;
# 648 "xmltok_impl.c"
      mem_49 = mem_48->isNmstrt2;
# 648 "xmltok_impl.c"
      tmp___9 = (*mem_49)(enc, ptr);
      __CrestHandleReturn(78123, (long long )tmp___9);
      __CrestStore(78122, (unsigned long )(& tmp___9));
      {
      __CrestLoad(78126, (unsigned long )(& tmp___9), (long long )tmp___9);
      __CrestLoad(78125, (unsigned long )0, (long long )0);
      __CrestApply2(78124, 13, (long long )(tmp___9 != 0));
# 648 "xmltok_impl.c"
      if (tmp___9 != 0) {
        __CrestBranch(78127, 49950, 1);

      } else {
        __CrestBranch(78128, 49951, 0);
# 648 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78129, (unsigned long )0, (long long )0);
        __CrestStore(78130, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = 0;
# 648 "xmltok_impl.c"
        goto return_label;
      }
      }
# 648 "xmltok_impl.c"
      ptr += 2;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_6___2:
      {
      __CrestLoad(78135, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78134, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78133, 18, (long long )(end - ptr));
      __CrestLoad(78132, (unsigned long )0, (long long )3L);
      __CrestApply2(78131, 16, (long long )(end - ptr < 3L));
# 648 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(78136, 49957, 1);
        __CrestLoad(78138, (unsigned long )0, (long long )-2);
        __CrestStore(78139, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78137, 49959, 0);

      }
      }
# 648 "xmltok_impl.c"
      mem_50 = (struct normal_encoding const *)enc;
# 648 "xmltok_impl.c"
      mem_51 = mem_50->isNmstrt3;
# 648 "xmltok_impl.c"
      tmp___10 = (*mem_51)(enc, ptr);
      __CrestHandleReturn(78141, (long long )tmp___10);
      __CrestStore(78140, (unsigned long )(& tmp___10));
      {
      __CrestLoad(78144, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(78143, (unsigned long )0, (long long )0);
      __CrestApply2(78142, 13, (long long )(tmp___10 != 0));
# 648 "xmltok_impl.c"
      if (tmp___10 != 0) {
        __CrestBranch(78145, 49962, 1);

      } else {
        __CrestBranch(78146, 49963, 0);
# 648 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78147, (unsigned long )0, (long long )0);
        __CrestStore(78148, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = 0;
# 648 "xmltok_impl.c"
        goto return_label;
      }
      }
# 648 "xmltok_impl.c"
      ptr += 3;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_7___2:
      {
      __CrestLoad(78153, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78152, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78151, 18, (long long )(end - ptr));
      __CrestLoad(78150, (unsigned long )0, (long long )4L);
      __CrestApply2(78149, 16, (long long )(end - ptr < 4L));
# 648 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(78154, 49969, 1);
        __CrestLoad(78156, (unsigned long )0, (long long )-2);
        __CrestStore(78157, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78155, 49971, 0);

      }
      }
# 648 "xmltok_impl.c"
      mem_52 = (struct normal_encoding const *)enc;
# 648 "xmltok_impl.c"
      mem_53 = mem_52->isNmstrt4;
# 648 "xmltok_impl.c"
      tmp___11 = (*mem_53)(enc, ptr);
      __CrestHandleReturn(78159, (long long )tmp___11);
      __CrestStore(78158, (unsigned long )(& tmp___11));
      {
      __CrestLoad(78162, (unsigned long )(& tmp___11), (long long )tmp___11);
      __CrestLoad(78161, (unsigned long )0, (long long )0);
      __CrestApply2(78160, 13, (long long )(tmp___11 != 0));
# 648 "xmltok_impl.c"
      if (tmp___11 != 0) {
        __CrestBranch(78163, 49974, 1);

      } else {
        __CrestBranch(78164, 49975, 0);
# 648 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78165, (unsigned long )0, (long long )0);
        __CrestStore(78166, (unsigned long )(& __retres54));
# 648 "xmltok_impl.c"
        __retres54 = 0;
# 648 "xmltok_impl.c"
        goto return_label;
      }
      }
# 648 "xmltok_impl.c"
      ptr += 4;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_10___3:
      case_9___3:
      case_21___3:
# 650 "xmltok_impl.c"
      goto __Cont;
      gt:
      case_11___0:
# 653 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(78167, (unsigned long )0, (long long )1);
      __CrestStore(78168, (unsigned long )(& __retres54));
# 654 "xmltok_impl.c"
      __retres54 = 1;
# 654 "xmltok_impl.c"
      goto return_label;
      sol:
      case_17___0:
# 657 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(78171, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(78170, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(78169, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 658 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(78172, 49986, 1);
        __CrestLoad(78174, (unsigned long )0, (long long )-1);
        __CrestStore(78175, (unsigned long )(& __retres54));
# 659 "xmltok_impl.c"
        __retres54 = -1;
# 659 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78173, 49988, 0);

      }
      }
      {
      __CrestLoad(78178, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(78177, (unsigned long )0, (long long )62);
      __CrestApply2(78176, 13, (long long )((int const )*ptr != 62));
# 660 "xmltok_impl.c"
      if ((int const )*ptr != 62) {
        __CrestBranch(78179, 49990, 1);
# 661 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78181, (unsigned long )0, (long long )0);
        __CrestStore(78182, (unsigned long )(& __retres54));
# 662 "xmltok_impl.c"
        __retres54 = 0;
# 662 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78180, 49993, 0);

      }
      }
# 664 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(78183, (unsigned long )0, (long long )3);
      __CrestStore(78184, (unsigned long )(& __retres54));
# 665 "xmltok_impl.c"
      __retres54 = 3;
# 665 "xmltok_impl.c"
      goto return_label;
      switch_default___4:
# 667 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78185, (unsigned long )0, (long long )0);
      __CrestStore(78186, (unsigned long )(& __retres54));
# 668 "xmltok_impl.c"
      __retres54 = 0;
# 668 "xmltok_impl.c"
      goto return_label;
      switch_break___5: ;
      }
      }
# 670 "xmltok_impl.c"
      goto while_break___3;
      __Cont: ;
    }
    while_break___3: ;
    }
# 672 "xmltok_impl.c"
    goto switch_break;
    switch_default___5:
# 675 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78187, (unsigned long )0, (long long )0);
    __CrestStore(78188, (unsigned long )(& __retres54));
# 676 "xmltok_impl.c"
    __retres54 = 0;
# 676 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(78189, (unsigned long )0, (long long )-1);
  __CrestStore(78190, (unsigned long )(& __retres54));
# 679 "xmltok_impl.c"
  __retres54 = -1;
  return_label:
  {
  __CrestLoad(78191, (unsigned long )(& __retres54), (long long )__retres54);
  __CrestReturn(78192);
# 525 "xmltok_impl.c"
  return (__retres54);
  }
}
}
# 684 "xmltok_impl.c"
static int normal_scanLt(ENCODING const *enc , char const *ptr , char const *end ,
                         char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  struct normal_encoding *mem_23 ;
  struct normal_encoding const *mem_24 ;
  int (*mem_25)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_26 ;
  int (*mem_27)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_28 ;
  int (*mem_29)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_30 ;
  struct normal_encoding *mem_31 ;
  struct normal_encoding const *mem_32 ;
  int (*mem_33)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_34 ;
  int (*mem_35)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_36 ;
  int (*mem_37)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_38 ;
  struct normal_encoding const *mem_39 ;
  int (*mem_40)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_41 ;
  int (*mem_42)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_43 ;
  int (*mem_44)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_45 ;
  struct normal_encoding const *mem_46 ;
  int (*mem_47)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_48 ;
  int (*mem_49)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_50 ;
  int (*mem_51)(ENCODING const * , char const * ) ;
  int __retres52 ;

  {
  __CrestCall(78193, 844);

  {
  __CrestLoad(78196, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78195, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78194, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 691 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78197, 50013, 1);
    __CrestLoad(78199, (unsigned long )0, (long long )-1);
    __CrestStore(78200, (unsigned long )(& __retres52));
# 692 "xmltok_impl.c"
    __retres52 = -1;
# 692 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78198, 50015, 0);

  }
  }
  {
# 693 "xmltok_impl.c"
  mem_23 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(78203, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78202, (unsigned long )0, (long long )29);
  __CrestApply2(78201, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 29));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(78204, 50020, 1);
# 694 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(78205, 50021, 0);

  }
  }
  {
  __CrestLoad(78208, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78207, (unsigned long )0, (long long )24);
  __CrestApply2(78206, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 24));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(78209, 50023, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(78210, 50024, 0);

  }
  }
  {
  __CrestLoad(78213, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78212, (unsigned long )0, (long long )22);
  __CrestApply2(78211, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 22));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(78214, 50026, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(78215, 50027, 0);

  }
  }
  {
  __CrestLoad(78218, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78217, (unsigned long )0, (long long )5);
  __CrestApply2(78216, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 5));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(78219, 50029, 1);
# 694 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(78220, 50030, 0);

  }
  }
  {
  __CrestLoad(78223, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78222, (unsigned long )0, (long long )6);
  __CrestApply2(78221, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 6));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(78224, 50032, 1);
# 694 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(78225, 50033, 0);

  }
  }
  {
  __CrestLoad(78228, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78227, (unsigned long )0, (long long )7);
  __CrestApply2(78226, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 7));
# 694 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(78229, 50035, 1);
# 694 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(78230, 50036, 0);

  }
  }
  {
  __CrestLoad(78233, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78232, (unsigned long )0, (long long )16);
  __CrestApply2(78231, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 16));
# 695 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 16) {
    __CrestBranch(78234, 50038, 1);
# 695 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(78235, 50039, 0);

  }
  }
  {
  __CrestLoad(78238, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78237, (unsigned long )0, (long long )15);
  __CrestApply2(78236, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 15));
# 707 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 15) {
    __CrestBranch(78239, 50041, 1);
# 707 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(78240, 50042, 0);

  }
  }
  {
  __CrestLoad(78243, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
  __CrestLoad(78242, (unsigned long )0, (long long )17);
  __CrestApply2(78241, 12, (long long )((int )mem_23->type[(unsigned char )*ptr] == 17));
# 709 "xmltok_impl.c"
  if ((int )mem_23->type[(unsigned char )*ptr] == 17) {
    __CrestBranch(78244, 50044, 1);
# 709 "xmltok_impl.c"
    goto case_17;
  } else {
    __CrestBranch(78245, 50045, 0);

  }
  }
# 711 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78246, (unsigned long )0, (long long )0);
  __CrestStore(78247, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
  __retres52 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 694 "xmltok_impl.c"
  ptr ++;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(78252, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78251, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78250, 18, (long long )(end - ptr));
  __CrestLoad(78249, (unsigned long )0, (long long )2L);
  __CrestApply2(78248, 16, (long long )(end - ptr < 2L));
# 694 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(78253, 50053, 1);
    __CrestLoad(78255, (unsigned long )0, (long long )-2);
    __CrestStore(78256, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78254, 50055, 0);

  }
  }
# 694 "xmltok_impl.c"
  mem_24 = (struct normal_encoding const *)enc;
# 694 "xmltok_impl.c"
  mem_25 = mem_24->isNmstrt2;
# 694 "xmltok_impl.c"
  tmp = (*mem_25)(enc, ptr);
  __CrestHandleReturn(78258, (long long )tmp);
  __CrestStore(78257, (unsigned long )(& tmp));
  {
  __CrestLoad(78261, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(78260, (unsigned long )0, (long long )0);
  __CrestApply2(78259, 13, (long long )(tmp != 0));
# 694 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(78262, 50058, 1);

  } else {
    __CrestBranch(78263, 50059, 0);
# 694 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78264, (unsigned long )0, (long long )0);
    __CrestStore(78265, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = 0;
# 694 "xmltok_impl.c"
    goto return_label;
  }
  }
# 694 "xmltok_impl.c"
  ptr += 2;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(78270, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78269, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78268, 18, (long long )(end - ptr));
  __CrestLoad(78267, (unsigned long )0, (long long )3L);
  __CrestApply2(78266, 16, (long long )(end - ptr < 3L));
# 694 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(78271, 50065, 1);
    __CrestLoad(78273, (unsigned long )0, (long long )-2);
    __CrestStore(78274, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78272, 50067, 0);

  }
  }
# 694 "xmltok_impl.c"
  mem_26 = (struct normal_encoding const *)enc;
# 694 "xmltok_impl.c"
  mem_27 = mem_26->isNmstrt3;
# 694 "xmltok_impl.c"
  tmp___0 = (*mem_27)(enc, ptr);
  __CrestHandleReturn(78276, (long long )tmp___0);
  __CrestStore(78275, (unsigned long )(& tmp___0));
  {
  __CrestLoad(78279, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(78278, (unsigned long )0, (long long )0);
  __CrestApply2(78277, 13, (long long )(tmp___0 != 0));
# 694 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(78280, 50070, 1);

  } else {
    __CrestBranch(78281, 50071, 0);
# 694 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78282, (unsigned long )0, (long long )0);
    __CrestStore(78283, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = 0;
# 694 "xmltok_impl.c"
    goto return_label;
  }
  }
# 694 "xmltok_impl.c"
  ptr += 3;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(78288, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78287, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78286, 18, (long long )(end - ptr));
  __CrestLoad(78285, (unsigned long )0, (long long )4L);
  __CrestApply2(78284, 16, (long long )(end - ptr < 4L));
# 694 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(78289, 50077, 1);
    __CrestLoad(78291, (unsigned long )0, (long long )-2);
    __CrestStore(78292, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78290, 50079, 0);

  }
  }
# 694 "xmltok_impl.c"
  mem_28 = (struct normal_encoding const *)enc;
# 694 "xmltok_impl.c"
  mem_29 = mem_28->isNmstrt4;
# 694 "xmltok_impl.c"
  tmp___1 = (*mem_29)(enc, ptr);
  __CrestHandleReturn(78294, (long long )tmp___1);
  __CrestStore(78293, (unsigned long )(& tmp___1));
  {
  __CrestLoad(78297, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(78296, (unsigned long )0, (long long )0);
  __CrestApply2(78295, 13, (long long )(tmp___1 != 0));
# 694 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(78298, 50082, 1);

  } else {
    __CrestBranch(78299, 50083, 0);
# 694 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78300, (unsigned long )0, (long long )0);
    __CrestStore(78301, (unsigned long )(& __retres52));
# 694 "xmltok_impl.c"
    __retres52 = 0;
# 694 "xmltok_impl.c"
    goto return_label;
  }
  }
# 694 "xmltok_impl.c"
  ptr += 4;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_16:
# 696 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(78304, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78303, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78302, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 696 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78305, 50090, 1);
    __CrestLoad(78307, (unsigned long )0, (long long )-1);
    __CrestStore(78308, (unsigned long )(& __retres52));
# 697 "xmltok_impl.c"
    __retres52 = -1;
# 697 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78306, 50092, 0);

  }
  }
  {
# 698 "xmltok_impl.c"
  mem_30 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(78311, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
  __CrestLoad(78310, (unsigned long )0, (long long )27);
  __CrestApply2(78309, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 27));
# 699 "xmltok_impl.c"
  if ((int )mem_30->type[(unsigned char )*ptr] == 27) {
    __CrestBranch(78312, 50097, 1);
# 699 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(78313, 50098, 0);

  }
  }
  {
  __CrestLoad(78316, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
  __CrestLoad(78315, (unsigned long )0, (long long )20);
  __CrestApply2(78314, 12, (long long )((int )mem_30->type[(unsigned char )*ptr] == 20));
# 701 "xmltok_impl.c"
  if ((int )mem_30->type[(unsigned char )*ptr] == 20) {
    __CrestBranch(78317, 50100, 1);
# 701 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(78318, 50101, 0);

  }
  }
# 698 "xmltok_impl.c"
  goto switch_break___0;
  case_27:
# 700 "xmltok_impl.c"
  tmp___2 = normal_scanComment(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78320, (long long )tmp___2);
  __CrestStore(78319, (unsigned long )(& tmp___2));
  __CrestLoad(78321, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(78322, (unsigned long )(& __retres52));
# 700 "xmltok_impl.c"
  __retres52 = tmp___2;
# 700 "xmltok_impl.c"
  goto return_label;
  case_20:
# 702 "xmltok_impl.c"
  tmp___3 = normal_scanCdataSection(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78324, (long long )tmp___3);
  __CrestStore(78323, (unsigned long )(& tmp___3));
  __CrestLoad(78325, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(78326, (unsigned long )(& __retres52));
# 702 "xmltok_impl.c"
  __retres52 = tmp___3;
# 702 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
  }
# 705 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78327, (unsigned long )0, (long long )0);
  __CrestStore(78328, (unsigned long )(& __retres52));
# 706 "xmltok_impl.c"
  __retres52 = 0;
# 706 "xmltok_impl.c"
  goto return_label;
  case_15:
# 708 "xmltok_impl.c"
  tmp___4 = normal_scanPi(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78330, (long long )tmp___4);
  __CrestStore(78329, (unsigned long )(& tmp___4));
  __CrestLoad(78331, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(78332, (unsigned long )(& __retres52));
# 708 "xmltok_impl.c"
  __retres52 = tmp___4;
# 708 "xmltok_impl.c"
  goto return_label;
  case_17:
# 710 "xmltok_impl.c"
  tmp___5 = normal_scanEndTag(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78334, (long long )tmp___5);
  __CrestStore(78333, (unsigned long )(& tmp___5));
  __CrestLoad(78335, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(78336, (unsigned long )(& __retres52));
# 710 "xmltok_impl.c"
  __retres52 = tmp___5;
# 710 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 712 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78337, (unsigned long )0, (long long )0);
  __CrestStore(78338, (unsigned long )(& __retres52));
# 713 "xmltok_impl.c"
  __retres52 = 0;
# 713 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  __CrestLoad(78339, (unsigned long )0, (long long )0);
  __CrestStore(78340, (unsigned long )(& hadColon));
# 716 "xmltok_impl.c"
  hadColon = 0;
  {
# 719 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(78343, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(78342, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(78341, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 719 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(78344, 50128, 1);

    } else {
      __CrestBranch(78345, 50129, 0);
# 719 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 720 "xmltok_impl.c"
    mem_31 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(78348, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78347, (unsigned long )0, (long long )29);
    __CrestApply2(78346, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 29));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(78349, 50134, 1);
# 721 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(78350, 50135, 0);

    }
    }
    {
    __CrestLoad(78353, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78352, (unsigned long )0, (long long )27);
    __CrestApply2(78351, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 27));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(78354, 50137, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(78355, 50138, 0);

    }
    }
    {
    __CrestLoad(78358, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78357, (unsigned long )0, (long long )26);
    __CrestApply2(78356, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 26));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(78359, 50140, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(78360, 50141, 0);

    }
    }
    {
    __CrestLoad(78363, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78362, (unsigned long )0, (long long )25);
    __CrestApply2(78361, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 25));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(78364, 50143, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(78365, 50144, 0);

    }
    }
    {
    __CrestLoad(78368, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78367, (unsigned long )0, (long long )24);
    __CrestApply2(78366, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 24));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(78369, 50146, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(78370, 50147, 0);

    }
    }
    {
    __CrestLoad(78373, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78372, (unsigned long )0, (long long )22);
    __CrestApply2(78371, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 22));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(78374, 50149, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(78375, 50150, 0);

    }
    }
    {
    __CrestLoad(78378, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78377, (unsigned long )0, (long long )5);
    __CrestApply2(78376, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 5));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(78379, 50152, 1);
# 721 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(78380, 50153, 0);

    }
    }
    {
    __CrestLoad(78383, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78382, (unsigned long )0, (long long )6);
    __CrestApply2(78381, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 6));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(78384, 50155, 1);
# 721 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(78385, 50156, 0);

    }
    }
    {
    __CrestLoad(78388, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78387, (unsigned long )0, (long long )7);
    __CrestApply2(78386, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 7));
# 721 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(78389, 50158, 1);
# 721 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(78390, 50159, 0);

    }
    }
    {
    __CrestLoad(78393, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78392, (unsigned long )0, (long long )23);
    __CrestApply2(78391, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 23));
# 723 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(78394, 50161, 1);
# 723 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(78395, 50162, 0);

    }
    }
    {
    __CrestLoad(78398, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78397, (unsigned long )0, (long long )10);
    __CrestApply2(78396, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 10));
# 740 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(78399, 50164, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(78400, 50165, 0);

    }
    }
    {
    __CrestLoad(78403, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78402, (unsigned long )0, (long long )9);
    __CrestApply2(78401, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 9));
# 740 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(78404, 50167, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(78405, 50168, 0);

    }
    }
    {
    __CrestLoad(78408, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78407, (unsigned long )0, (long long )21);
    __CrestApply2(78406, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 21));
# 740 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(78409, 50170, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(78410, 50171, 0);

    }
    }
    {
    __CrestLoad(78413, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78412, (unsigned long )0, (long long )11);
    __CrestApply2(78411, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 11));
# 761 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(78414, 50173, 1);
# 761 "xmltok_impl.c"
      goto gt;
    } else {
      __CrestBranch(78415, 50174, 0);

    }
    }
    {
    __CrestLoad(78418, (unsigned long )(& mem_31->type[(unsigned char )*ptr]), (long long )mem_31->type[(unsigned char )*ptr]);
    __CrestLoad(78417, (unsigned long )0, (long long )17);
    __CrestApply2(78416, 12, (long long )((int )mem_31->type[(unsigned char )*ptr] == 17));
# 765 "xmltok_impl.c"
    if ((int )mem_31->type[(unsigned char )*ptr] == 17) {
      __CrestBranch(78419, 50176, 1);
# 765 "xmltok_impl.c"
      goto sol;
    } else {
      __CrestBranch(78420, 50177, 0);

    }
    }
# 776 "xmltok_impl.c"
    goto switch_default___2;
    case_29___0:
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78421, (unsigned long )0, (long long )0);
    __CrestStore(78422, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
    __retres52 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
    case_27___0:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 721 "xmltok_impl.c"
    ptr ++;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_5___0:
    {
    __CrestLoad(78427, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78426, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78425, 18, (long long )(end - ptr));
    __CrestLoad(78424, (unsigned long )0, (long long )2L);
    __CrestApply2(78423, 16, (long long )(end - ptr < 2L));
# 721 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(78428, 50185, 1);
      __CrestLoad(78430, (unsigned long )0, (long long )-2);
      __CrestStore(78431, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78429, 50187, 0);

    }
    }
# 721 "xmltok_impl.c"
    mem_32 = (struct normal_encoding const *)enc;
# 721 "xmltok_impl.c"
    mem_33 = mem_32->isName2;
# 721 "xmltok_impl.c"
    tmp___6 = (*mem_33)(enc, ptr);
    __CrestHandleReturn(78433, (long long )tmp___6);
    __CrestStore(78432, (unsigned long )(& tmp___6));
    {
    __CrestLoad(78436, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(78435, (unsigned long )0, (long long )0);
    __CrestApply2(78434, 13, (long long )(tmp___6 != 0));
# 721 "xmltok_impl.c"
    if (tmp___6 != 0) {
      __CrestBranch(78437, 50190, 1);

    } else {
      __CrestBranch(78438, 50191, 0);
# 721 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78439, (unsigned long )0, (long long )0);
      __CrestStore(78440, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = 0;
# 721 "xmltok_impl.c"
      goto return_label;
    }
    }
# 721 "xmltok_impl.c"
    ptr += 2;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_6___0:
    {
    __CrestLoad(78445, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78444, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78443, 18, (long long )(end - ptr));
    __CrestLoad(78442, (unsigned long )0, (long long )3L);
    __CrestApply2(78441, 16, (long long )(end - ptr < 3L));
# 721 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(78446, 50197, 1);
      __CrestLoad(78448, (unsigned long )0, (long long )-2);
      __CrestStore(78449, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78447, 50199, 0);

    }
    }
# 721 "xmltok_impl.c"
    mem_34 = (struct normal_encoding const *)enc;
# 721 "xmltok_impl.c"
    mem_35 = mem_34->isName3;
# 721 "xmltok_impl.c"
    tmp___7 = (*mem_35)(enc, ptr);
    __CrestHandleReturn(78451, (long long )tmp___7);
    __CrestStore(78450, (unsigned long )(& tmp___7));
    {
    __CrestLoad(78454, (unsigned long )(& tmp___7), (long long )tmp___7);
    __CrestLoad(78453, (unsigned long )0, (long long )0);
    __CrestApply2(78452, 13, (long long )(tmp___7 != 0));
# 721 "xmltok_impl.c"
    if (tmp___7 != 0) {
      __CrestBranch(78455, 50202, 1);

    } else {
      __CrestBranch(78456, 50203, 0);
# 721 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78457, (unsigned long )0, (long long )0);
      __CrestStore(78458, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = 0;
# 721 "xmltok_impl.c"
      goto return_label;
    }
    }
# 721 "xmltok_impl.c"
    ptr += 3;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_7___0:
    {
    __CrestLoad(78463, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78462, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78461, 18, (long long )(end - ptr));
    __CrestLoad(78460, (unsigned long )0, (long long )4L);
    __CrestApply2(78459, 16, (long long )(end - ptr < 4L));
# 721 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(78464, 50209, 1);
      __CrestLoad(78466, (unsigned long )0, (long long )-2);
      __CrestStore(78467, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78465, 50211, 0);

    }
    }
# 721 "xmltok_impl.c"
    mem_36 = (struct normal_encoding const *)enc;
# 721 "xmltok_impl.c"
    mem_37 = mem_36->isName4;
# 721 "xmltok_impl.c"
    tmp___8 = (*mem_37)(enc, ptr);
    __CrestHandleReturn(78469, (long long )tmp___8);
    __CrestStore(78468, (unsigned long )(& tmp___8));
    {
    __CrestLoad(78472, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(78471, (unsigned long )0, (long long )0);
    __CrestApply2(78470, 13, (long long )(tmp___8 != 0));
# 721 "xmltok_impl.c"
    if (tmp___8 != 0) {
      __CrestBranch(78473, 50214, 1);

    } else {
      __CrestBranch(78474, 50215, 0);
# 721 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78475, (unsigned long )0, (long long )0);
      __CrestStore(78476, (unsigned long )(& __retres52));
# 721 "xmltok_impl.c"
      __retres52 = 0;
# 721 "xmltok_impl.c"
      goto return_label;
    }
    }
# 721 "xmltok_impl.c"
    ptr += 4;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_23:
    {
    __CrestLoad(78479, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(78478, (unsigned long )0, (long long )0);
    __CrestApply2(78477, 13, (long long )(hadColon != 0));
# 724 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(78480, 50221, 1);
# 725 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78482, (unsigned long )0, (long long )0);
      __CrestStore(78483, (unsigned long )(& __retres52));
# 726 "xmltok_impl.c"
      __retres52 = 0;
# 726 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78481, 50224, 0);

    }
    }
    __CrestLoad(78484, (unsigned long )0, (long long )1);
    __CrestStore(78485, (unsigned long )(& hadColon));
# 728 "xmltok_impl.c"
    hadColon = 1;
# 729 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(78488, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(78487, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(78486, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 730 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(78489, 50227, 1);
      __CrestLoad(78491, (unsigned long )0, (long long )-1);
      __CrestStore(78492, (unsigned long )(& __retres52));
# 731 "xmltok_impl.c"
      __retres52 = -1;
# 731 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78490, 50229, 0);

    }
    }
    {
# 732 "xmltok_impl.c"
    mem_38 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(78495, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78494, (unsigned long )0, (long long )29);
    __CrestApply2(78493, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 29));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(78496, 50234, 1);
# 733 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(78497, 50235, 0);

    }
    }
    {
    __CrestLoad(78500, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78499, (unsigned long )0, (long long )24);
    __CrestApply2(78498, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 24));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(78501, 50237, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(78502, 50238, 0);

    }
    }
    {
    __CrestLoad(78505, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78504, (unsigned long )0, (long long )22);
    __CrestApply2(78503, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 22));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(78506, 50240, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(78507, 50241, 0);

    }
    }
    {
    __CrestLoad(78510, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78509, (unsigned long )0, (long long )5);
    __CrestApply2(78508, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 5));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(78511, 50243, 1);
# 733 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(78512, 50244, 0);

    }
    }
    {
    __CrestLoad(78515, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78514, (unsigned long )0, (long long )6);
    __CrestApply2(78513, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 6));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(78516, 50246, 1);
# 733 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(78517, 50247, 0);

    }
    }
    {
    __CrestLoad(78520, (unsigned long )(& mem_38->type[(unsigned char )*ptr]), (long long )mem_38->type[(unsigned char )*ptr]);
    __CrestLoad(78519, (unsigned long )0, (long long )7);
    __CrestApply2(78518, 12, (long long )((int )mem_38->type[(unsigned char )*ptr] == 7));
# 733 "xmltok_impl.c"
    if ((int )mem_38->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(78521, 50249, 1);
# 733 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(78522, 50250, 0);

    }
    }
# 734 "xmltok_impl.c"
    goto switch_default___0;
    case_29___1:
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78523, (unsigned long )0, (long long )0);
    __CrestStore(78524, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
    __retres52 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
    case_24___1:
    case_22___1:
# 733 "xmltok_impl.c"
    ptr ++;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_5___1:
    {
    __CrestLoad(78529, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78528, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78527, 18, (long long )(end - ptr));
    __CrestLoad(78526, (unsigned long )0, (long long )2L);
    __CrestApply2(78525, 16, (long long )(end - ptr < 2L));
# 733 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(78530, 50258, 1);
      __CrestLoad(78532, (unsigned long )0, (long long )-2);
      __CrestStore(78533, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78531, 50260, 0);

    }
    }
# 733 "xmltok_impl.c"
    mem_39 = (struct normal_encoding const *)enc;
# 733 "xmltok_impl.c"
    mem_40 = mem_39->isNmstrt2;
# 733 "xmltok_impl.c"
    tmp___9 = (*mem_40)(enc, ptr);
    __CrestHandleReturn(78535, (long long )tmp___9);
    __CrestStore(78534, (unsigned long )(& tmp___9));
    {
    __CrestLoad(78538, (unsigned long )(& tmp___9), (long long )tmp___9);
    __CrestLoad(78537, (unsigned long )0, (long long )0);
    __CrestApply2(78536, 13, (long long )(tmp___9 != 0));
# 733 "xmltok_impl.c"
    if (tmp___9 != 0) {
      __CrestBranch(78539, 50263, 1);

    } else {
      __CrestBranch(78540, 50264, 0);
# 733 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78541, (unsigned long )0, (long long )0);
      __CrestStore(78542, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = 0;
# 733 "xmltok_impl.c"
      goto return_label;
    }
    }
# 733 "xmltok_impl.c"
    ptr += 2;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_6___1:
    {
    __CrestLoad(78547, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78546, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78545, 18, (long long )(end - ptr));
    __CrestLoad(78544, (unsigned long )0, (long long )3L);
    __CrestApply2(78543, 16, (long long )(end - ptr < 3L));
# 733 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(78548, 50270, 1);
      __CrestLoad(78550, (unsigned long )0, (long long )-2);
      __CrestStore(78551, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78549, 50272, 0);

    }
    }
# 733 "xmltok_impl.c"
    mem_41 = (struct normal_encoding const *)enc;
# 733 "xmltok_impl.c"
    mem_42 = mem_41->isNmstrt3;
# 733 "xmltok_impl.c"
    tmp___10 = (*mem_42)(enc, ptr);
    __CrestHandleReturn(78553, (long long )tmp___10);
    __CrestStore(78552, (unsigned long )(& tmp___10));
    {
    __CrestLoad(78556, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(78555, (unsigned long )0, (long long )0);
    __CrestApply2(78554, 13, (long long )(tmp___10 != 0));
# 733 "xmltok_impl.c"
    if (tmp___10 != 0) {
      __CrestBranch(78557, 50275, 1);

    } else {
      __CrestBranch(78558, 50276, 0);
# 733 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78559, (unsigned long )0, (long long )0);
      __CrestStore(78560, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = 0;
# 733 "xmltok_impl.c"
      goto return_label;
    }
    }
# 733 "xmltok_impl.c"
    ptr += 3;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_7___1:
    {
    __CrestLoad(78565, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78564, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78563, 18, (long long )(end - ptr));
    __CrestLoad(78562, (unsigned long )0, (long long )4L);
    __CrestApply2(78561, 16, (long long )(end - ptr < 4L));
# 733 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(78566, 50282, 1);
      __CrestLoad(78568, (unsigned long )0, (long long )-2);
      __CrestStore(78569, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78567, 50284, 0);

    }
    }
# 733 "xmltok_impl.c"
    mem_43 = (struct normal_encoding const *)enc;
# 733 "xmltok_impl.c"
    mem_44 = mem_43->isNmstrt4;
# 733 "xmltok_impl.c"
    tmp___11 = (*mem_44)(enc, ptr);
    __CrestHandleReturn(78571, (long long )tmp___11);
    __CrestStore(78570, (unsigned long )(& tmp___11));
    {
    __CrestLoad(78574, (unsigned long )(& tmp___11), (long long )tmp___11);
    __CrestLoad(78573, (unsigned long )0, (long long )0);
    __CrestApply2(78572, 13, (long long )(tmp___11 != 0));
# 733 "xmltok_impl.c"
    if (tmp___11 != 0) {
      __CrestBranch(78575, 50287, 1);

    } else {
      __CrestBranch(78576, 50288, 0);
# 733 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78577, (unsigned long )0, (long long )0);
      __CrestStore(78578, (unsigned long )(& __retres52));
# 733 "xmltok_impl.c"
      __retres52 = 0;
# 733 "xmltok_impl.c"
      goto return_label;
    }
    }
# 733 "xmltok_impl.c"
    ptr += 4;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    switch_default___0:
# 735 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78579, (unsigned long )0, (long long )0);
    __CrestStore(78580, (unsigned long )(& __retres52));
# 736 "xmltok_impl.c"
    __retres52 = 0;
# 736 "xmltok_impl.c"
    goto return_label;
    switch_break___2: ;
    }
    }
# 738 "xmltok_impl.c"
    goto switch_break___1;
    case_10:
    case_9:
    case_21:
# 742 "xmltok_impl.c"
    ptr ++;
    {
# 743 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(78583, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(78582, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(78581, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 743 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(78584, 50303, 1);

      } else {
        __CrestBranch(78585, 50304, 0);
# 743 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 744 "xmltok_impl.c"
      mem_45 = (struct normal_encoding *)enc;
      {
      {
      __CrestLoad(78588, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78587, (unsigned long )0, (long long )29);
      __CrestApply2(78586, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 29));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 29) {
        __CrestBranch(78589, 50309, 1);
# 745 "xmltok_impl.c"
        goto case_29___2;
      } else {
        __CrestBranch(78590, 50310, 0);

      }
      }
      {
      __CrestLoad(78593, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78592, (unsigned long )0, (long long )24);
      __CrestApply2(78591, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 24));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 24) {
        __CrestBranch(78594, 50312, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(78595, 50313, 0);

      }
      }
      {
      __CrestLoad(78598, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78597, (unsigned long )0, (long long )22);
      __CrestApply2(78596, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 22));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 22) {
        __CrestBranch(78599, 50315, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(78600, 50316, 0);

      }
      }
      {
      __CrestLoad(78603, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78602, (unsigned long )0, (long long )5);
      __CrestApply2(78601, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 5));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 5) {
        __CrestBranch(78604, 50318, 1);
# 745 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(78605, 50319, 0);

      }
      }
      {
      __CrestLoad(78608, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78607, (unsigned long )0, (long long )6);
      __CrestApply2(78606, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 6));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 6) {
        __CrestBranch(78609, 50321, 1);
# 745 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(78610, 50322, 0);

      }
      }
      {
      __CrestLoad(78613, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78612, (unsigned long )0, (long long )7);
      __CrestApply2(78611, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 7));
# 745 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 7) {
        __CrestBranch(78614, 50324, 1);
# 745 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(78615, 50325, 0);

      }
      }
      {
      __CrestLoad(78618, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78617, (unsigned long )0, (long long )11);
      __CrestApply2(78616, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 11));
# 746 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 11) {
        __CrestBranch(78619, 50327, 1);
# 746 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(78620, 50328, 0);

      }
      }
      {
      __CrestLoad(78623, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78622, (unsigned long )0, (long long )17);
      __CrestApply2(78621, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 17));
# 748 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 17) {
        __CrestBranch(78624, 50330, 1);
# 748 "xmltok_impl.c"
        goto case_17___0;
      } else {
        __CrestBranch(78625, 50331, 0);

      }
      }
      {
      __CrestLoad(78628, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78627, (unsigned long )0, (long long )10);
      __CrestApply2(78626, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 10));
# 750 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(78629, 50333, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(78630, 50334, 0);

      }
      }
      {
      __CrestLoad(78633, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78632, (unsigned long )0, (long long )9);
      __CrestApply2(78631, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 9));
# 750 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 9) {
        __CrestBranch(78634, 50336, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(78635, 50337, 0);

      }
      }
      {
      __CrestLoad(78638, (unsigned long )(& mem_45->type[(unsigned char )*ptr]), (long long )mem_45->type[(unsigned char )*ptr]);
      __CrestLoad(78637, (unsigned long )0, (long long )21);
      __CrestApply2(78636, 12, (long long )((int )mem_45->type[(unsigned char )*ptr] == 21));
# 750 "xmltok_impl.c"
      if ((int )mem_45->type[(unsigned char )*ptr] == 21) {
        __CrestBranch(78639, 50339, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(78640, 50340, 0);

      }
      }
# 753 "xmltok_impl.c"
      goto switch_default___1;
      case_29___2:
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78641, (unsigned long )0, (long long )0);
      __CrestStore(78642, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
      __retres52 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
      case_24___2:
      case_22___2:
# 745 "xmltok_impl.c"
      ptr ++;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_5___2:
      {
      __CrestLoad(78647, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78646, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78645, 18, (long long )(end - ptr));
      __CrestLoad(78644, (unsigned long )0, (long long )2L);
      __CrestApply2(78643, 16, (long long )(end - ptr < 2L));
# 745 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(78648, 50348, 1);
        __CrestLoad(78650, (unsigned long )0, (long long )-2);
        __CrestStore(78651, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78649, 50350, 0);

      }
      }
# 745 "xmltok_impl.c"
      mem_46 = (struct normal_encoding const *)enc;
# 745 "xmltok_impl.c"
      mem_47 = mem_46->isNmstrt2;
# 745 "xmltok_impl.c"
      tmp___12 = (*mem_47)(enc, ptr);
      __CrestHandleReturn(78653, (long long )tmp___12);
      __CrestStore(78652, (unsigned long )(& tmp___12));
      {
      __CrestLoad(78656, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(78655, (unsigned long )0, (long long )0);
      __CrestApply2(78654, 13, (long long )(tmp___12 != 0));
# 745 "xmltok_impl.c"
      if (tmp___12 != 0) {
        __CrestBranch(78657, 50353, 1);

      } else {
        __CrestBranch(78658, 50354, 0);
# 745 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78659, (unsigned long )0, (long long )0);
        __CrestStore(78660, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = 0;
# 745 "xmltok_impl.c"
        goto return_label;
      }
      }
# 745 "xmltok_impl.c"
      ptr += 2;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_6___2:
      {
      __CrestLoad(78665, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78664, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78663, 18, (long long )(end - ptr));
      __CrestLoad(78662, (unsigned long )0, (long long )3L);
      __CrestApply2(78661, 16, (long long )(end - ptr < 3L));
# 745 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(78666, 50360, 1);
        __CrestLoad(78668, (unsigned long )0, (long long )-2);
        __CrestStore(78669, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78667, 50362, 0);

      }
      }
# 745 "xmltok_impl.c"
      mem_48 = (struct normal_encoding const *)enc;
# 745 "xmltok_impl.c"
      mem_49 = mem_48->isNmstrt3;
# 745 "xmltok_impl.c"
      tmp___13 = (*mem_49)(enc, ptr);
      __CrestHandleReturn(78671, (long long )tmp___13);
      __CrestStore(78670, (unsigned long )(& tmp___13));
      {
      __CrestLoad(78674, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestLoad(78673, (unsigned long )0, (long long )0);
      __CrestApply2(78672, 13, (long long )(tmp___13 != 0));
# 745 "xmltok_impl.c"
      if (tmp___13 != 0) {
        __CrestBranch(78675, 50365, 1);

      } else {
        __CrestBranch(78676, 50366, 0);
# 745 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78677, (unsigned long )0, (long long )0);
        __CrestStore(78678, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = 0;
# 745 "xmltok_impl.c"
        goto return_label;
      }
      }
# 745 "xmltok_impl.c"
      ptr += 3;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_7___2:
      {
      __CrestLoad(78683, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(78682, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(78681, 18, (long long )(end - ptr));
      __CrestLoad(78680, (unsigned long )0, (long long )4L);
      __CrestApply2(78679, 16, (long long )(end - ptr < 4L));
# 745 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(78684, 50372, 1);
        __CrestLoad(78686, (unsigned long )0, (long long )-2);
        __CrestStore(78687, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78685, 50374, 0);

      }
      }
# 745 "xmltok_impl.c"
      mem_50 = (struct normal_encoding const *)enc;
# 745 "xmltok_impl.c"
      mem_51 = mem_50->isNmstrt4;
# 745 "xmltok_impl.c"
      tmp___14 = (*mem_51)(enc, ptr);
      __CrestHandleReturn(78689, (long long )tmp___14);
      __CrestStore(78688, (unsigned long )(& tmp___14));
      {
      __CrestLoad(78692, (unsigned long )(& tmp___14), (long long )tmp___14);
      __CrestLoad(78691, (unsigned long )0, (long long )0);
      __CrestApply2(78690, 13, (long long )(tmp___14 != 0));
# 745 "xmltok_impl.c"
      if (tmp___14 != 0) {
        __CrestBranch(78693, 50377, 1);

      } else {
        __CrestBranch(78694, 50378, 0);
# 745 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78695, (unsigned long )0, (long long )0);
        __CrestStore(78696, (unsigned long )(& __retres52));
# 745 "xmltok_impl.c"
        __retres52 = 0;
# 745 "xmltok_impl.c"
        goto return_label;
      }
      }
# 745 "xmltok_impl.c"
      ptr += 4;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_11:
# 747 "xmltok_impl.c"
      goto gt;
      case_17___0:
# 749 "xmltok_impl.c"
      goto sol;
      case_10___0:
      case_9___0:
      case_21___0:
# 751 "xmltok_impl.c"
      ptr ++;
# 752 "xmltok_impl.c"
      goto while_continue___0;
      switch_default___1:
# 754 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78697, (unsigned long )0, (long long )0);
      __CrestStore(78698, (unsigned long )(& __retres52));
# 755 "xmltok_impl.c"
      __retres52 = 0;
# 755 "xmltok_impl.c"
      goto return_label;
      switch_break___3: ;
      }
      }
# 757 "xmltok_impl.c"
      tmp___15 = normal_scanAtts(enc, ptr, end, nextTokPtr);
      __CrestHandleReturn(78700, (long long )tmp___15);
      __CrestStore(78699, (unsigned long )(& tmp___15));
      __CrestLoad(78701, (unsigned long )(& tmp___15), (long long )tmp___15);
      __CrestStore(78702, (unsigned long )(& __retres52));
# 757 "xmltok_impl.c"
      __retres52 = tmp___15;
# 757 "xmltok_impl.c"
      goto return_label;
    }
    while_break___0: ;
    }
    __CrestLoad(78703, (unsigned long )0, (long long )-1);
    __CrestStore(78704, (unsigned long )(& __retres52));
# 759 "xmltok_impl.c"
    __retres52 = -1;
# 759 "xmltok_impl.c"
    goto return_label;
    gt:
    case_11___0:
# 763 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(78705, (unsigned long )0, (long long )2);
    __CrestStore(78706, (unsigned long )(& __retres52));
# 764 "xmltok_impl.c"
    __retres52 = 2;
# 764 "xmltok_impl.c"
    goto return_label;
    sol:
    case_17___1:
# 767 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(78709, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(78708, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(78707, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 768 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(78710, 50402, 1);
      __CrestLoad(78712, (unsigned long )0, (long long )-1);
      __CrestStore(78713, (unsigned long )(& __retres52));
# 769 "xmltok_impl.c"
      __retres52 = -1;
# 769 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78711, 50404, 0);

    }
    }
    {
    __CrestLoad(78716, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(78715, (unsigned long )0, (long long )62);
    __CrestApply2(78714, 13, (long long )((int const )*ptr != 62));
# 770 "xmltok_impl.c"
    if ((int const )*ptr != 62) {
      __CrestBranch(78717, 50406, 1);
# 771 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78719, (unsigned long )0, (long long )0);
      __CrestStore(78720, (unsigned long )(& __retres52));
# 772 "xmltok_impl.c"
      __retres52 = 0;
# 772 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78718, 50409, 0);

    }
    }
# 774 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(78721, (unsigned long )0, (long long )4);
    __CrestStore(78722, (unsigned long )(& __retres52));
# 775 "xmltok_impl.c"
    __retres52 = 4;
# 775 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 777 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78723, (unsigned long )0, (long long )0);
    __CrestStore(78724, (unsigned long )(& __retres52));
# 778 "xmltok_impl.c"
    __retres52 = 0;
# 778 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(78725, (unsigned long )0, (long long )-1);
  __CrestStore(78726, (unsigned long )(& __retres52));
# 781 "xmltok_impl.c"
  __retres52 = -1;
  return_label:
  {
  __CrestLoad(78727, (unsigned long )(& __retres52), (long long )__retres52);
  __CrestReturn(78728);
# 684 "xmltok_impl.c"
  return (__retres52);
  }
}
}
# 784 "xmltok_impl.c"
static int normal_contentTok(ENCODING const *enc , char const *ptr , char const *end ,
                             char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct normal_encoding *mem_14 ;
  struct normal_encoding *mem_15 ;
  struct normal_encoding const *mem_16 ;
  int (*mem_17)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_18 ;
  int (*mem_19)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_20 ;
  int (*mem_21)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_22 ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_25 ;
  int (*mem_26)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_27 ;
  int (*mem_28)(ENCODING const * , char const * ) ;
  char const *mem_29 ;
  char const *mem_30 ;
  int __retres31 ;

  {
  __CrestCall(78729, 845);

  {
  __CrestLoad(78732, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78731, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78730, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 788 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78733, 50421, 1);
    __CrestLoad(78735, (unsigned long )0, (long long )-4);
    __CrestStore(78736, (unsigned long )(& __retres31));
# 789 "xmltok_impl.c"
    __retres31 = -4;
# 789 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78734, 50423, 0);

  }
  }
  {
# 799 "xmltok_impl.c"
  mem_14 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(78739, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78738, (unsigned long )0, (long long )2);
  __CrestApply2(78737, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 2));
# 800 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 2) {
    __CrestBranch(78740, 50428, 1);
# 800 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(78741, 50429, 0);

  }
  }
  {
  __CrestLoad(78744, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78743, (unsigned long )0, (long long )3);
  __CrestApply2(78742, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 3));
# 802 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 3) {
    __CrestBranch(78745, 50431, 1);
# 802 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(78746, 50432, 0);

  }
  }
  {
  __CrestLoad(78749, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78748, (unsigned long )0, (long long )9);
  __CrestApply2(78747, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 9));
# 804 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 9) {
    __CrestBranch(78750, 50434, 1);
# 804 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(78751, 50435, 0);

  }
  }
  {
  __CrestLoad(78754, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78753, (unsigned long )0, (long long )10);
  __CrestApply2(78752, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 10));
# 812 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(78755, 50437, 1);
# 812 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(78756, 50438, 0);

  }
  }
  {
  __CrestLoad(78759, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78758, (unsigned long )0, (long long )4);
  __CrestApply2(78757, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 4));
# 815 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 4) {
    __CrestBranch(78760, 50440, 1);
# 815 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(78761, 50441, 0);

  }
  }
  {
  __CrestLoad(78764, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78763, (unsigned long )0, (long long )5);
  __CrestApply2(78762, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 5));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(78765, 50443, 1);
# 830 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(78766, 50444, 0);

  }
  }
  {
  __CrestLoad(78769, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78768, (unsigned long )0, (long long )6);
  __CrestApply2(78767, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 6));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(78770, 50446, 1);
# 830 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(78771, 50447, 0);

  }
  }
  {
  __CrestLoad(78774, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78773, (unsigned long )0, (long long )7);
  __CrestApply2(78772, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 7));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(78775, 50449, 1);
# 830 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(78776, 50450, 0);

  }
  }
  {
  __CrestLoad(78779, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78778, (unsigned long )0, (long long )8);
  __CrestApply2(78777, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 8));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 8) {
    __CrestBranch(78780, 50452, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(78781, 50453, 0);

  }
  }
  {
  __CrestLoad(78784, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78783, (unsigned long )0, (long long )1);
  __CrestApply2(78782, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 1));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 1) {
    __CrestBranch(78785, 50455, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(78786, 50456, 0);

  }
  }
  {
  __CrestLoad(78789, (unsigned long )(& mem_14->type[(unsigned char )*ptr]), (long long )mem_14->type[(unsigned char )*ptr]);
  __CrestLoad(78788, (unsigned long )0, (long long )0);
  __CrestApply2(78787, 12, (long long )((int )mem_14->type[(unsigned char )*ptr] == 0));
# 830 "xmltok_impl.c"
  if ((int )mem_14->type[(unsigned char )*ptr] == 0) {
    __CrestBranch(78790, 50458, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(78791, 50459, 0);

  }
  }
# 831 "xmltok_impl.c"
  goto switch_default;
  case_2:
# 801 "xmltok_impl.c"
  tmp = normal_scanLt(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78793, (long long )tmp);
  __CrestStore(78792, (unsigned long )(& tmp));
  __CrestLoad(78794, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(78795, (unsigned long )(& __retres31));
# 801 "xmltok_impl.c"
  __retres31 = tmp;
# 801 "xmltok_impl.c"
  goto return_label;
  case_3:
# 803 "xmltok_impl.c"
  tmp___0 = normal_scanRef(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(78797, (long long )tmp___0);
  __CrestStore(78796, (unsigned long )(& tmp___0));
  __CrestLoad(78798, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(78799, (unsigned long )(& __retres31));
# 803 "xmltok_impl.c"
  __retres31 = tmp___0;
# 803 "xmltok_impl.c"
  goto return_label;
  case_9:
# 805 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(78802, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78801, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78800, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 806 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78803, 50469, 1);
    __CrestLoad(78805, (unsigned long )0, (long long )-3);
    __CrestStore(78806, (unsigned long )(& __retres31));
# 807 "xmltok_impl.c"
    __retres31 = -3;
# 807 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78804, 50471, 0);

  }
  }
  {
# 808 "xmltok_impl.c"
  mem_15 = (struct normal_encoding *)enc;
  {
  __CrestLoad(78809, (unsigned long )(& mem_15->type[(unsigned char )*ptr]), (long long )mem_15->type[(unsigned char )*ptr]);
  __CrestLoad(78808, (unsigned long )0, (long long )10);
  __CrestApply2(78807, 12, (long long )((int )mem_15->type[(unsigned char )*ptr] == 10));
# 808 "xmltok_impl.c"
  if ((int )mem_15->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(78810, 50475, 1);
# 809 "xmltok_impl.c"
    ptr ++;
  } else {
    __CrestBranch(78811, 50476, 0);

  }
  }
  }
# 810 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78812, (unsigned long )0, (long long )7);
  __CrestStore(78813, (unsigned long )(& __retres31));
# 811 "xmltok_impl.c"
  __retres31 = 7;
# 811 "xmltok_impl.c"
  goto return_label;
  case_10:
# 813 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(78814, (unsigned long )0, (long long )7);
  __CrestStore(78815, (unsigned long )(& __retres31));
# 814 "xmltok_impl.c"
  __retres31 = 7;
# 814 "xmltok_impl.c"
  goto return_label;
  case_4:
# 816 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(78818, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78817, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78816, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 817 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78819, 50485, 1);
    __CrestLoad(78821, (unsigned long )0, (long long )-5);
    __CrestStore(78822, (unsigned long )(& __retres31));
# 818 "xmltok_impl.c"
    __retres31 = -5;
# 818 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78820, 50487, 0);

  }
  }
  {
  __CrestLoad(78825, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(78824, (unsigned long )0, (long long )93);
  __CrestApply2(78823, 13, (long long )((int const )*ptr != 93));
# 819 "xmltok_impl.c"
  if ((int const )*ptr != 93) {
    __CrestBranch(78826, 50489, 1);
# 820 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(78827, 50490, 0);

  }
  }
# 821 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(78830, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(78829, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(78828, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 822 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(78831, 50493, 1);
    __CrestLoad(78833, (unsigned long )0, (long long )-5);
    __CrestStore(78834, (unsigned long )(& __retres31));
# 823 "xmltok_impl.c"
    __retres31 = -5;
# 823 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78832, 50495, 0);

  }
  }
  {
  __CrestLoad(78837, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(78836, (unsigned long )0, (long long )62);
  __CrestApply2(78835, 13, (long long )((int const )*ptr != 62));
# 824 "xmltok_impl.c"
  if ((int const )*ptr != 62) {
    __CrestBranch(78838, 50497, 1);
# 825 "xmltok_impl.c"
    ptr --;
# 826 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(78839, 50499, 0);

  }
  }
# 828 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78840, (unsigned long )0, (long long )0);
  __CrestStore(78841, (unsigned long )(& __retres31));
# 829 "xmltok_impl.c"
  __retres31 = 0;
# 829 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(78846, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78845, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78844, 18, (long long )(end - ptr));
  __CrestLoad(78843, (unsigned long )0, (long long )2L);
  __CrestApply2(78842, 16, (long long )(end - ptr < 2L));
# 830 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(78847, 50504, 1);
    __CrestLoad(78849, (unsigned long )0, (long long )-2);
    __CrestStore(78850, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78848, 50506, 0);

  }
  }
# 830 "xmltok_impl.c"
  mem_16 = (struct normal_encoding const *)enc;
# 830 "xmltok_impl.c"
  mem_17 = mem_16->isInvalid2;
# 830 "xmltok_impl.c"
  tmp___1 = (*mem_17)(enc, ptr);
  __CrestHandleReturn(78852, (long long )tmp___1);
  __CrestStore(78851, (unsigned long )(& tmp___1));
  {
  __CrestLoad(78855, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(78854, (unsigned long )0, (long long )0);
  __CrestApply2(78853, 13, (long long )(tmp___1 != 0));
# 830 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(78856, 50509, 1);
# 830 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78858, (unsigned long )0, (long long )0);
    __CrestStore(78859, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = 0;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78857, 50512, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 2;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(78864, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78863, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78862, 18, (long long )(end - ptr));
  __CrestLoad(78861, (unsigned long )0, (long long )3L);
  __CrestApply2(78860, 16, (long long )(end - ptr < 3L));
# 830 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(78865, 50516, 1);
    __CrestLoad(78867, (unsigned long )0, (long long )-2);
    __CrestStore(78868, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78866, 50518, 0);

  }
  }
# 830 "xmltok_impl.c"
  mem_18 = (struct normal_encoding const *)enc;
# 830 "xmltok_impl.c"
  mem_19 = mem_18->isInvalid3;
# 830 "xmltok_impl.c"
  tmp___2 = (*mem_19)(enc, ptr);
  __CrestHandleReturn(78870, (long long )tmp___2);
  __CrestStore(78869, (unsigned long )(& tmp___2));
  {
  __CrestLoad(78873, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(78872, (unsigned long )0, (long long )0);
  __CrestApply2(78871, 13, (long long )(tmp___2 != 0));
# 830 "xmltok_impl.c"
  if (tmp___2 != 0) {
    __CrestBranch(78874, 50521, 1);
# 830 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78876, (unsigned long )0, (long long )0);
    __CrestStore(78877, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = 0;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78875, 50524, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 3;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(78882, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(78881, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(78880, 18, (long long )(end - ptr));
  __CrestLoad(78879, (unsigned long )0, (long long )4L);
  __CrestApply2(78878, 16, (long long )(end - ptr < 4L));
# 830 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(78883, 50528, 1);
    __CrestLoad(78885, (unsigned long )0, (long long )-2);
    __CrestStore(78886, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78884, 50530, 0);

  }
  }
# 830 "xmltok_impl.c"
  mem_20 = (struct normal_encoding const *)enc;
# 830 "xmltok_impl.c"
  mem_21 = mem_20->isInvalid4;
# 830 "xmltok_impl.c"
  tmp___3 = (*mem_21)(enc, ptr);
  __CrestHandleReturn(78888, (long long )tmp___3);
  __CrestStore(78887, (unsigned long )(& tmp___3));
  {
  __CrestLoad(78891, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestLoad(78890, (unsigned long )0, (long long )0);
  __CrestApply2(78889, 13, (long long )(tmp___3 != 0));
# 830 "xmltok_impl.c"
  if (tmp___3 != 0) {
    __CrestBranch(78892, 50533, 1);
# 830 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(78894, (unsigned long )0, (long long )0);
    __CrestStore(78895, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
    __retres31 = 0;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(78893, 50536, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 4;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 830 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(78896, (unsigned long )0, (long long )0);
  __CrestStore(78897, (unsigned long )(& __retres31));
# 830 "xmltok_impl.c"
  __retres31 = 0;
# 830 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 832 "xmltok_impl.c"
  ptr ++;
# 833 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  }
  {
# 835 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(78900, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(78899, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(78898, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 835 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(78901, 50549, 1);

    } else {
      __CrestBranch(78902, 50550, 0);
# 835 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 836 "xmltok_impl.c"
    mem_22 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(78905, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78904, (unsigned long )0, (long long )5);
    __CrestApply2(78903, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 5));
# 845 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(78906, 50555, 1);
# 845 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(78907, 50556, 0);

    }
    }
    {
    __CrestLoad(78910, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78909, (unsigned long )0, (long long )6);
    __CrestApply2(78908, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 6));
# 845 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(78911, 50558, 1);
# 845 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(78912, 50559, 0);

    }
    }
    {
    __CrestLoad(78915, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78914, (unsigned long )0, (long long )7);
    __CrestApply2(78913, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 7));
# 845 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(78916, 50561, 1);
# 845 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(78917, 50562, 0);

    }
    }
    {
    __CrestLoad(78920, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78919, (unsigned long )0, (long long )4);
    __CrestApply2(78918, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 4));
# 847 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 4) {
      __CrestBranch(78921, 50564, 1);
# 847 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(78922, 50565, 0);

    }
    }
    {
    __CrestLoad(78925, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78924, (unsigned long )0, (long long )10);
    __CrestApply2(78923, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 10));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(78926, 50567, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78927, 50568, 0);

    }
    }
    {
    __CrestLoad(78930, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78929, (unsigned long )0, (long long )9);
    __CrestApply2(78928, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 9));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(78931, 50570, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78932, 50571, 0);

    }
    }
    {
    __CrestLoad(78935, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78934, (unsigned long )0, (long long )8);
    __CrestApply2(78933, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 8));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 8) {
      __CrestBranch(78936, 50573, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78937, 50574, 0);

    }
    }
    {
    __CrestLoad(78940, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78939, (unsigned long )0, (long long )1);
    __CrestApply2(78938, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 1));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 1) {
      __CrestBranch(78941, 50576, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78942, 50577, 0);

    }
    }
    {
    __CrestLoad(78945, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78944, (unsigned long )0, (long long )0);
    __CrestApply2(78943, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 0));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 0) {
      __CrestBranch(78946, 50579, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78947, 50580, 0);

    }
    }
    {
    __CrestLoad(78950, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78949, (unsigned long )0, (long long )2);
    __CrestApply2(78948, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 2));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 2) {
      __CrestBranch(78951, 50582, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78952, 50583, 0);

    }
    }
    {
    __CrestLoad(78955, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestLoad(78954, (unsigned long )0, (long long )3);
    __CrestApply2(78953, 12, (long long )((int )mem_22->type[(unsigned char )*ptr] == 3));
# 869 "xmltok_impl.c"
    if ((int )mem_22->type[(unsigned char )*ptr] == 3) {
      __CrestBranch(78956, 50585, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(78957, 50586, 0);

    }
    }
# 872 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(78962, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78961, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78960, 18, (long long )(end - ptr));
    __CrestLoad(78959, (unsigned long )0, (long long )2L);
    __CrestApply2(78958, 16, (long long )(end - ptr < 2L));
# 845 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(78963, 50589, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78965, (unsigned long )0, (long long )6);
      __CrestStore(78966, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
      __retres31 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78964, 50592, 0);
# 845 "xmltok_impl.c"
      mem_23 = (struct normal_encoding const *)enc;
# 845 "xmltok_impl.c"
      mem_24 = mem_23->isInvalid2;
# 845 "xmltok_impl.c"
      tmp___4 = (*mem_24)(enc, ptr);
      __CrestHandleReturn(78968, (long long )tmp___4);
      __CrestStore(78967, (unsigned long )(& tmp___4));
      {
      __CrestLoad(78971, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(78970, (unsigned long )0, (long long )0);
      __CrestApply2(78969, 13, (long long )(tmp___4 != 0));
# 845 "xmltok_impl.c"
      if (tmp___4 != 0) {
        __CrestBranch(78972, 50594, 1);
# 845 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78974, (unsigned long )0, (long long )6);
        __CrestStore(78975, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
        __retres31 = 6;
# 845 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78973, 50597, 0);

      }
      }
    }
    }
# 845 "xmltok_impl.c"
    ptr += 2;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(78980, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78979, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78978, 18, (long long )(end - ptr));
    __CrestLoad(78977, (unsigned long )0, (long long )3L);
    __CrestApply2(78976, 16, (long long )(end - ptr < 3L));
# 845 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(78981, 50601, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(78983, (unsigned long )0, (long long )6);
      __CrestStore(78984, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
      __retres31 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(78982, 50604, 0);
# 845 "xmltok_impl.c"
      mem_25 = (struct normal_encoding const *)enc;
# 845 "xmltok_impl.c"
      mem_26 = mem_25->isInvalid3;
# 845 "xmltok_impl.c"
      tmp___5 = (*mem_26)(enc, ptr);
      __CrestHandleReturn(78986, (long long )tmp___5);
      __CrestStore(78985, (unsigned long )(& tmp___5));
      {
      __CrestLoad(78989, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(78988, (unsigned long )0, (long long )0);
      __CrestApply2(78987, 13, (long long )(tmp___5 != 0));
# 845 "xmltok_impl.c"
      if (tmp___5 != 0) {
        __CrestBranch(78990, 50606, 1);
# 845 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(78992, (unsigned long )0, (long long )6);
        __CrestStore(78993, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
        __retres31 = 6;
# 845 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(78991, 50609, 0);

      }
      }
    }
    }
# 845 "xmltok_impl.c"
    ptr += 3;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(78998, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(78997, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(78996, 18, (long long )(end - ptr));
    __CrestLoad(78995, (unsigned long )0, (long long )4L);
    __CrestApply2(78994, 16, (long long )(end - ptr < 4L));
# 845 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(78999, 50613, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79001, (unsigned long )0, (long long )6);
      __CrestStore(79002, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
      __retres31 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79000, 50616, 0);
# 845 "xmltok_impl.c"
      mem_27 = (struct normal_encoding const *)enc;
# 845 "xmltok_impl.c"
      mem_28 = mem_27->isInvalid4;
# 845 "xmltok_impl.c"
      tmp___6 = (*mem_28)(enc, ptr);
      __CrestHandleReturn(79004, (long long )tmp___6);
      __CrestStore(79003, (unsigned long )(& tmp___6));
      {
      __CrestLoad(79007, (unsigned long )(& tmp___6), (long long )tmp___6);
      __CrestLoad(79006, (unsigned long )0, (long long )0);
      __CrestApply2(79005, 13, (long long )(tmp___6 != 0));
# 845 "xmltok_impl.c"
      if (tmp___6 != 0) {
        __CrestBranch(79008, 50618, 1);
# 845 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(79010, (unsigned long )0, (long long )6);
        __CrestStore(79011, (unsigned long )(& __retres31));
# 845 "xmltok_impl.c"
        __retres31 = 6;
# 845 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(79009, 50621, 0);

      }
      }
    }
    }
# 845 "xmltok_impl.c"
    ptr += 4;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    {
    __CrestLoad(79016, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79015, (unsigned long )0, (long long )1);
    __CrestApply2(79014, 18, (long long )((unsigned long )(ptr + 1)));
    __CrestLoad(79013, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79012, 13, (long long )((unsigned long )(ptr + 1) != (unsigned long )end));
# 848 "xmltok_impl.c"
    if ((unsigned long )(ptr + 1) != (unsigned long )end) {
      __CrestBranch(79017, 50625, 1);
      {
# 849 "xmltok_impl.c"
      mem_29 = ptr + 1;
      {
      __CrestLoad(79021, (unsigned long )mem_29, (long long )*mem_29);
      __CrestLoad(79020, (unsigned long )0, (long long )93);
      __CrestApply2(79019, 13, (long long )((int const )*mem_29 != 93));
# 849 "xmltok_impl.c"
      if ((int const )*mem_29 != 93) {
        __CrestBranch(79022, 50628, 1);
# 850 "xmltok_impl.c"
        ptr ++;
# 851 "xmltok_impl.c"
        goto switch_break___0;
      } else {
        __CrestBranch(79023, 50630, 0);

      }
      }
      }
      {
      __CrestLoad(79028, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(79027, (unsigned long )0, (long long )2);
      __CrestApply2(79026, 18, (long long )((unsigned long )(ptr + 2)));
      __CrestLoad(79025, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(79024, 13, (long long )((unsigned long )(ptr + 2) != (unsigned long )end));
# 853 "xmltok_impl.c"
      if ((unsigned long )(ptr + 2) != (unsigned long )end) {
        __CrestBranch(79029, 50632, 1);
        {
# 854 "xmltok_impl.c"
        mem_30 = ptr + 2;
        {
        __CrestLoad(79033, (unsigned long )mem_30, (long long )*mem_30);
        __CrestLoad(79032, (unsigned long )0, (long long )62);
        __CrestApply2(79031, 13, (long long )((int const )*mem_30 != 62));
# 854 "xmltok_impl.c"
        if ((int const )*mem_30 != 62) {
          __CrestBranch(79034, 50635, 1);
# 855 "xmltok_impl.c"
          ptr ++;
# 856 "xmltok_impl.c"
          goto switch_break___0;
        } else {
          __CrestBranch(79035, 50637, 0);

        }
        }
        }
# 858 "xmltok_impl.c"
        *nextTokPtr = ptr + 2;
        __CrestLoad(79036, (unsigned long )0, (long long )0);
        __CrestStore(79037, (unsigned long )(& __retres31));
# 859 "xmltok_impl.c"
        __retres31 = 0;
# 859 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(79030, 50641, 0);

      }
      }
    } else {
      __CrestBranch(79018, 50642, 0);

    }
    }
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
    case_2___0:
    case_3___0:
# 870 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79038, (unsigned long )0, (long long )6);
    __CrestStore(79039, (unsigned long )(& __retres31));
# 871 "xmltok_impl.c"
    __retres31 = 6;
# 871 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 873 "xmltok_impl.c"
    ptr ++;
# 874 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
# 877 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79040, (unsigned long )0, (long long )6);
  __CrestStore(79041, (unsigned long )(& __retres31));
# 878 "xmltok_impl.c"
  __retres31 = 6;
  return_label:
  {
  __CrestLoad(79042, (unsigned long )(& __retres31), (long long )__retres31);
  __CrestReturn(79043);
# 784 "xmltok_impl.c"
  return (__retres31);
  }
}
}
# 883 "xmltok_impl.c"
static int normal_scanPercent(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct normal_encoding *mem_11 ;
  struct normal_encoding const *mem_12 ;
  int (*mem_13)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_14 ;
  int (*mem_15)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_16 ;
  int (*mem_17)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_18 ;
  struct normal_encoding const *mem_19 ;
  int (*mem_20)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  int __retres25 ;

  {
  __CrestCall(79044, 846);

  {
  __CrestLoad(79047, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79046, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79045, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 887 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79048, 50654, 1);
    __CrestLoad(79050, (unsigned long )0, (long long )-1);
    __CrestStore(79051, (unsigned long )(& __retres25));
# 888 "xmltok_impl.c"
    __retres25 = -1;
# 888 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79049, 50656, 0);

  }
  }
  {
# 889 "xmltok_impl.c"
  mem_11 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(79054, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79053, (unsigned long )0, (long long )29);
  __CrestApply2(79052, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 29));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(79055, 50661, 1);
# 890 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(79056, 50662, 0);

  }
  }
  {
  __CrestLoad(79059, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79058, (unsigned long )0, (long long )24);
  __CrestApply2(79057, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 24));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(79060, 50664, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(79061, 50665, 0);

  }
  }
  {
  __CrestLoad(79064, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79063, (unsigned long )0, (long long )22);
  __CrestApply2(79062, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 22));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(79065, 50667, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(79066, 50668, 0);

  }
  }
  {
  __CrestLoad(79069, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79068, (unsigned long )0, (long long )5);
  __CrestApply2(79067, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 5));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(79070, 50670, 1);
# 890 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(79071, 50671, 0);

  }
  }
  {
  __CrestLoad(79074, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79073, (unsigned long )0, (long long )6);
  __CrestApply2(79072, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 6));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(79075, 50673, 1);
# 890 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(79076, 50674, 0);

  }
  }
  {
  __CrestLoad(79079, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79078, (unsigned long )0, (long long )7);
  __CrestApply2(79077, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 7));
# 890 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(79080, 50676, 1);
# 890 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79081, 50677, 0);

  }
  }
  {
  __CrestLoad(79084, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79083, (unsigned long )0, (long long )30);
  __CrestApply2(79082, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 30));
# 891 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 30) {
    __CrestBranch(79085, 50679, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(79086, 50680, 0);

  }
  }
  {
  __CrestLoad(79089, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79088, (unsigned long )0, (long long )9);
  __CrestApply2(79087, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 9));
# 891 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 9) {
    __CrestBranch(79090, 50682, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(79091, 50683, 0);

  }
  }
  {
  __CrestLoad(79094, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79093, (unsigned long )0, (long long )10);
  __CrestApply2(79092, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 10));
# 891 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(79095, 50685, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(79096, 50686, 0);

  }
  }
  {
  __CrestLoad(79099, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79098, (unsigned long )0, (long long )21);
  __CrestApply2(79097, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 21));
# 891 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 21) {
    __CrestBranch(79100, 50688, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(79101, 50689, 0);

  }
  }
# 894 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79102, (unsigned long )0, (long long )0);
  __CrestStore(79103, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
  __retres25 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 890 "xmltok_impl.c"
  ptr ++;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(79108, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79107, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79106, 18, (long long )(end - ptr));
  __CrestLoad(79105, (unsigned long )0, (long long )2L);
  __CrestApply2(79104, 16, (long long )(end - ptr < 2L));
# 890 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(79109, 50697, 1);
    __CrestLoad(79111, (unsigned long )0, (long long )-2);
    __CrestStore(79112, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79110, 50699, 0);

  }
  }
# 890 "xmltok_impl.c"
  mem_12 = (struct normal_encoding const *)enc;
# 890 "xmltok_impl.c"
  mem_13 = mem_12->isNmstrt2;
# 890 "xmltok_impl.c"
  tmp = (*mem_13)(enc, ptr);
  __CrestHandleReturn(79114, (long long )tmp);
  __CrestStore(79113, (unsigned long )(& tmp));
  {
  __CrestLoad(79117, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(79116, (unsigned long )0, (long long )0);
  __CrestApply2(79115, 13, (long long )(tmp != 0));
# 890 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(79118, 50702, 1);

  } else {
    __CrestBranch(79119, 50703, 0);
# 890 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79120, (unsigned long )0, (long long )0);
    __CrestStore(79121, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = 0;
# 890 "xmltok_impl.c"
    goto return_label;
  }
  }
# 890 "xmltok_impl.c"
  ptr += 2;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(79126, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79125, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79124, 18, (long long )(end - ptr));
  __CrestLoad(79123, (unsigned long )0, (long long )3L);
  __CrestApply2(79122, 16, (long long )(end - ptr < 3L));
# 890 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(79127, 50709, 1);
    __CrestLoad(79129, (unsigned long )0, (long long )-2);
    __CrestStore(79130, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79128, 50711, 0);

  }
  }
# 890 "xmltok_impl.c"
  mem_14 = (struct normal_encoding const *)enc;
# 890 "xmltok_impl.c"
  mem_15 = mem_14->isNmstrt3;
# 890 "xmltok_impl.c"
  tmp___0 = (*mem_15)(enc, ptr);
  __CrestHandleReturn(79132, (long long )tmp___0);
  __CrestStore(79131, (unsigned long )(& tmp___0));
  {
  __CrestLoad(79135, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(79134, (unsigned long )0, (long long )0);
  __CrestApply2(79133, 13, (long long )(tmp___0 != 0));
# 890 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(79136, 50714, 1);

  } else {
    __CrestBranch(79137, 50715, 0);
# 890 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79138, (unsigned long )0, (long long )0);
    __CrestStore(79139, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = 0;
# 890 "xmltok_impl.c"
    goto return_label;
  }
  }
# 890 "xmltok_impl.c"
  ptr += 3;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(79144, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79143, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79142, 18, (long long )(end - ptr));
  __CrestLoad(79141, (unsigned long )0, (long long )4L);
  __CrestApply2(79140, 16, (long long )(end - ptr < 4L));
# 890 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(79145, 50721, 1);
    __CrestLoad(79147, (unsigned long )0, (long long )-2);
    __CrestStore(79148, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79146, 50723, 0);

  }
  }
# 890 "xmltok_impl.c"
  mem_16 = (struct normal_encoding const *)enc;
# 890 "xmltok_impl.c"
  mem_17 = mem_16->isNmstrt4;
# 890 "xmltok_impl.c"
  tmp___1 = (*mem_17)(enc, ptr);
  __CrestHandleReturn(79150, (long long )tmp___1);
  __CrestStore(79149, (unsigned long )(& tmp___1));
  {
  __CrestLoad(79153, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(79152, (unsigned long )0, (long long )0);
  __CrestApply2(79151, 13, (long long )(tmp___1 != 0));
# 890 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(79154, 50726, 1);

  } else {
    __CrestBranch(79155, 50727, 0);
# 890 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79156, (unsigned long )0, (long long )0);
    __CrestStore(79157, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = 0;
# 890 "xmltok_impl.c"
    goto return_label;
  }
  }
# 890 "xmltok_impl.c"
  ptr += 4;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_30:
  case_9:
  case_10:
  case_21:
# 892 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79158, (unsigned long )0, (long long )22);
  __CrestStore(79159, (unsigned long )(& __retres25));
# 893 "xmltok_impl.c"
  __retres25 = 22;
# 893 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 895 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79160, (unsigned long )0, (long long )0);
  __CrestStore(79161, (unsigned long )(& __retres25));
# 896 "xmltok_impl.c"
  __retres25 = 0;
# 896 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 898 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(79164, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79163, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79162, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 898 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(79165, 50743, 1);

    } else {
      __CrestBranch(79166, 50744, 0);
# 898 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 899 "xmltok_impl.c"
    mem_18 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(79169, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79168, (unsigned long )0, (long long )29);
    __CrestApply2(79167, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 29));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(79170, 50749, 1);
# 900 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(79171, 50750, 0);

    }
    }
    {
    __CrestLoad(79174, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79173, (unsigned long )0, (long long )27);
    __CrestApply2(79172, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 27));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(79175, 50752, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79176, 50753, 0);

    }
    }
    {
    __CrestLoad(79179, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79178, (unsigned long )0, (long long )26);
    __CrestApply2(79177, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 26));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(79180, 50755, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79181, 50756, 0);

    }
    }
    {
    __CrestLoad(79184, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79183, (unsigned long )0, (long long )25);
    __CrestApply2(79182, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 25));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(79185, 50758, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79186, 50759, 0);

    }
    }
    {
    __CrestLoad(79189, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79188, (unsigned long )0, (long long )24);
    __CrestApply2(79187, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 24));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(79190, 50761, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79191, 50762, 0);

    }
    }
    {
    __CrestLoad(79194, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79193, (unsigned long )0, (long long )22);
    __CrestApply2(79192, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 22));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(79195, 50764, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79196, 50765, 0);

    }
    }
    {
    __CrestLoad(79199, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79198, (unsigned long )0, (long long )5);
    __CrestApply2(79197, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 5));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(79200, 50767, 1);
# 900 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(79201, 50768, 0);

    }
    }
    {
    __CrestLoad(79204, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79203, (unsigned long )0, (long long )6);
    __CrestApply2(79202, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 6));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(79205, 50770, 1);
# 900 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(79206, 50771, 0);

    }
    }
    {
    __CrestLoad(79209, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79208, (unsigned long )0, (long long )7);
    __CrestApply2(79207, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 7));
# 900 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(79210, 50773, 1);
# 900 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(79211, 50774, 0);

    }
    }
    {
    __CrestLoad(79214, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79213, (unsigned long )0, (long long )18);
    __CrestApply2(79212, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 18));
# 901 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 18) {
      __CrestBranch(79215, 50776, 1);
# 901 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(79216, 50777, 0);

    }
    }
# 904 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79217, (unsigned long )0, (long long )0);
    __CrestStore(79218, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
    __retres25 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 900 "xmltok_impl.c"
    ptr ++;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(79223, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79222, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79221, 18, (long long )(end - ptr));
    __CrestLoad(79220, (unsigned long )0, (long long )2L);
    __CrestApply2(79219, 16, (long long )(end - ptr < 2L));
# 900 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(79224, 50785, 1);
      __CrestLoad(79226, (unsigned long )0, (long long )-2);
      __CrestStore(79227, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79225, 50787, 0);

    }
    }
# 900 "xmltok_impl.c"
    mem_19 = (struct normal_encoding const *)enc;
# 900 "xmltok_impl.c"
    mem_20 = mem_19->isName2;
# 900 "xmltok_impl.c"
    tmp___2 = (*mem_20)(enc, ptr);
    __CrestHandleReturn(79229, (long long )tmp___2);
    __CrestStore(79228, (unsigned long )(& tmp___2));
    {
    __CrestLoad(79232, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(79231, (unsigned long )0, (long long )0);
    __CrestApply2(79230, 13, (long long )(tmp___2 != 0));
# 900 "xmltok_impl.c"
    if (tmp___2 != 0) {
      __CrestBranch(79233, 50790, 1);

    } else {
      __CrestBranch(79234, 50791, 0);
# 900 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79235, (unsigned long )0, (long long )0);
      __CrestStore(79236, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = 0;
# 900 "xmltok_impl.c"
      goto return_label;
    }
    }
# 900 "xmltok_impl.c"
    ptr += 2;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(79241, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79240, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79239, 18, (long long )(end - ptr));
    __CrestLoad(79238, (unsigned long )0, (long long )3L);
    __CrestApply2(79237, 16, (long long )(end - ptr < 3L));
# 900 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(79242, 50797, 1);
      __CrestLoad(79244, (unsigned long )0, (long long )-2);
      __CrestStore(79245, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79243, 50799, 0);

    }
    }
# 900 "xmltok_impl.c"
    mem_21 = (struct normal_encoding const *)enc;
# 900 "xmltok_impl.c"
    mem_22 = mem_21->isName3;
# 900 "xmltok_impl.c"
    tmp___3 = (*mem_22)(enc, ptr);
    __CrestHandleReturn(79247, (long long )tmp___3);
    __CrestStore(79246, (unsigned long )(& tmp___3));
    {
    __CrestLoad(79250, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(79249, (unsigned long )0, (long long )0);
    __CrestApply2(79248, 13, (long long )(tmp___3 != 0));
# 900 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(79251, 50802, 1);

    } else {
      __CrestBranch(79252, 50803, 0);
# 900 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79253, (unsigned long )0, (long long )0);
      __CrestStore(79254, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = 0;
# 900 "xmltok_impl.c"
      goto return_label;
    }
    }
# 900 "xmltok_impl.c"
    ptr += 3;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(79259, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79258, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79257, 18, (long long )(end - ptr));
    __CrestLoad(79256, (unsigned long )0, (long long )4L);
    __CrestApply2(79255, 16, (long long )(end - ptr < 4L));
# 900 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(79260, 50809, 1);
      __CrestLoad(79262, (unsigned long )0, (long long )-2);
      __CrestStore(79263, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79261, 50811, 0);

    }
    }
# 900 "xmltok_impl.c"
    mem_23 = (struct normal_encoding const *)enc;
# 900 "xmltok_impl.c"
    mem_24 = mem_23->isName4;
# 900 "xmltok_impl.c"
    tmp___4 = (*mem_24)(enc, ptr);
    __CrestHandleReturn(79265, (long long )tmp___4);
    __CrestStore(79264, (unsigned long )(& tmp___4));
    {
    __CrestLoad(79268, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(79267, (unsigned long )0, (long long )0);
    __CrestApply2(79266, 13, (long long )(tmp___4 != 0));
# 900 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(79269, 50814, 1);

    } else {
      __CrestBranch(79270, 50815, 0);
# 900 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79271, (unsigned long )0, (long long )0);
      __CrestStore(79272, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = 0;
# 900 "xmltok_impl.c"
      goto return_label;
    }
    }
# 900 "xmltok_impl.c"
    ptr += 4;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 902 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(79273, (unsigned long )0, (long long )28);
    __CrestStore(79274, (unsigned long )(& __retres25));
# 903 "xmltok_impl.c"
    __retres25 = 28;
# 903 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 905 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79275, (unsigned long )0, (long long )0);
    __CrestStore(79276, (unsigned long )(& __retres25));
# 906 "xmltok_impl.c"
    __retres25 = 0;
# 906 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(79277, (unsigned long )0, (long long )-1);
  __CrestStore(79278, (unsigned long )(& __retres25));
# 909 "xmltok_impl.c"
  __retres25 = -1;
  return_label:
  {
  __CrestLoad(79279, (unsigned long )(& __retres25), (long long )__retres25);
  __CrestReturn(79280);
# 883 "xmltok_impl.c"
  return (__retres25);
  }
}
}
# 912 "xmltok_impl.c"
static int normal_scanPoundName(ENCODING const *enc , char const *ptr , char const *end ,
                                char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  struct normal_encoding *mem_11 ;
  struct normal_encoding const *mem_12 ;
  int (*mem_13)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_14 ;
  int (*mem_15)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_16 ;
  int (*mem_17)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_18 ;
  struct normal_encoding const *mem_19 ;
  int (*mem_20)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_21 ;
  int (*mem_22)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_23 ;
  int (*mem_24)(ENCODING const * , char const * ) ;
  int __retres25 ;

  {
  __CrestCall(79281, 847);

  {
  __CrestLoad(79284, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79283, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79282, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 916 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79285, 50831, 1);
    __CrestLoad(79287, (unsigned long )0, (long long )-1);
    __CrestStore(79288, (unsigned long )(& __retres25));
# 917 "xmltok_impl.c"
    __retres25 = -1;
# 917 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79286, 50833, 0);

  }
  }
  {
# 918 "xmltok_impl.c"
  mem_11 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(79291, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79290, (unsigned long )0, (long long )29);
  __CrestApply2(79289, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 29));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(79292, 50838, 1);
# 919 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(79293, 50839, 0);

  }
  }
  {
  __CrestLoad(79296, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79295, (unsigned long )0, (long long )24);
  __CrestApply2(79294, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 24));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(79297, 50841, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(79298, 50842, 0);

  }
  }
  {
  __CrestLoad(79301, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79300, (unsigned long )0, (long long )22);
  __CrestApply2(79299, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 22));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(79302, 50844, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(79303, 50845, 0);

  }
  }
  {
  __CrestLoad(79306, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79305, (unsigned long )0, (long long )5);
  __CrestApply2(79304, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 5));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(79307, 50847, 1);
# 919 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(79308, 50848, 0);

  }
  }
  {
  __CrestLoad(79311, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79310, (unsigned long )0, (long long )6);
  __CrestApply2(79309, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 6));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(79312, 50850, 1);
# 919 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(79313, 50851, 0);

  }
  }
  {
  __CrestLoad(79316, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
  __CrestLoad(79315, (unsigned long )0, (long long )7);
  __CrestApply2(79314, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 7));
# 919 "xmltok_impl.c"
  if ((int )mem_11->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(79317, 50853, 1);
# 919 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79318, 50854, 0);

  }
  }
# 920 "xmltok_impl.c"
  goto switch_default;
  case_29:
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79319, (unsigned long )0, (long long )0);
  __CrestStore(79320, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
  __retres25 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 919 "xmltok_impl.c"
  ptr ++;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(79325, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79324, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79323, 18, (long long )(end - ptr));
  __CrestLoad(79322, (unsigned long )0, (long long )2L);
  __CrestApply2(79321, 16, (long long )(end - ptr < 2L));
# 919 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(79326, 50862, 1);
    __CrestLoad(79328, (unsigned long )0, (long long )-2);
    __CrestStore(79329, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79327, 50864, 0);

  }
  }
# 919 "xmltok_impl.c"
  mem_12 = (struct normal_encoding const *)enc;
# 919 "xmltok_impl.c"
  mem_13 = mem_12->isNmstrt2;
# 919 "xmltok_impl.c"
  tmp = (*mem_13)(enc, ptr);
  __CrestHandleReturn(79331, (long long )tmp);
  __CrestStore(79330, (unsigned long )(& tmp));
  {
  __CrestLoad(79334, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(79333, (unsigned long )0, (long long )0);
  __CrestApply2(79332, 13, (long long )(tmp != 0));
# 919 "xmltok_impl.c"
  if (tmp != 0) {
    __CrestBranch(79335, 50867, 1);

  } else {
    __CrestBranch(79336, 50868, 0);
# 919 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79337, (unsigned long )0, (long long )0);
    __CrestStore(79338, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = 0;
# 919 "xmltok_impl.c"
    goto return_label;
  }
  }
# 919 "xmltok_impl.c"
  ptr += 2;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(79343, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79342, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79341, 18, (long long )(end - ptr));
  __CrestLoad(79340, (unsigned long )0, (long long )3L);
  __CrestApply2(79339, 16, (long long )(end - ptr < 3L));
# 919 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(79344, 50874, 1);
    __CrestLoad(79346, (unsigned long )0, (long long )-2);
    __CrestStore(79347, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79345, 50876, 0);

  }
  }
# 919 "xmltok_impl.c"
  mem_14 = (struct normal_encoding const *)enc;
# 919 "xmltok_impl.c"
  mem_15 = mem_14->isNmstrt3;
# 919 "xmltok_impl.c"
  tmp___0 = (*mem_15)(enc, ptr);
  __CrestHandleReturn(79349, (long long )tmp___0);
  __CrestStore(79348, (unsigned long )(& tmp___0));
  {
  __CrestLoad(79352, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(79351, (unsigned long )0, (long long )0);
  __CrestApply2(79350, 13, (long long )(tmp___0 != 0));
# 919 "xmltok_impl.c"
  if (tmp___0 != 0) {
    __CrestBranch(79353, 50879, 1);

  } else {
    __CrestBranch(79354, 50880, 0);
# 919 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79355, (unsigned long )0, (long long )0);
    __CrestStore(79356, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = 0;
# 919 "xmltok_impl.c"
    goto return_label;
  }
  }
# 919 "xmltok_impl.c"
  ptr += 3;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(79361, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(79360, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(79359, 18, (long long )(end - ptr));
  __CrestLoad(79358, (unsigned long )0, (long long )4L);
  __CrestApply2(79357, 16, (long long )(end - ptr < 4L));
# 919 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(79362, 50886, 1);
    __CrestLoad(79364, (unsigned long )0, (long long )-2);
    __CrestStore(79365, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79363, 50888, 0);

  }
  }
# 919 "xmltok_impl.c"
  mem_16 = (struct normal_encoding const *)enc;
# 919 "xmltok_impl.c"
  mem_17 = mem_16->isNmstrt4;
# 919 "xmltok_impl.c"
  tmp___1 = (*mem_17)(enc, ptr);
  __CrestHandleReturn(79367, (long long )tmp___1);
  __CrestStore(79366, (unsigned long )(& tmp___1));
  {
  __CrestLoad(79370, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(79369, (unsigned long )0, (long long )0);
  __CrestApply2(79368, 13, (long long )(tmp___1 != 0));
# 919 "xmltok_impl.c"
  if (tmp___1 != 0) {
    __CrestBranch(79371, 50891, 1);

  } else {
    __CrestBranch(79372, 50892, 0);
# 919 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79373, (unsigned long )0, (long long )0);
    __CrestStore(79374, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = 0;
# 919 "xmltok_impl.c"
    goto return_label;
  }
  }
# 919 "xmltok_impl.c"
  ptr += 4;
# 919 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 921 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79375, (unsigned long )0, (long long )0);
  __CrestStore(79376, (unsigned long )(& __retres25));
# 922 "xmltok_impl.c"
  __retres25 = 0;
# 922 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 924 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(79379, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79378, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79377, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 924 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(79380, 50905, 1);

    } else {
      __CrestBranch(79381, 50906, 0);
# 924 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 925 "xmltok_impl.c"
    mem_18 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(79384, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79383, (unsigned long )0, (long long )29);
    __CrestApply2(79382, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 29));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(79385, 50911, 1);
# 926 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(79386, 50912, 0);

    }
    }
    {
    __CrestLoad(79389, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79388, (unsigned long )0, (long long )27);
    __CrestApply2(79387, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 27));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(79390, 50914, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79391, 50915, 0);

    }
    }
    {
    __CrestLoad(79394, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79393, (unsigned long )0, (long long )26);
    __CrestApply2(79392, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 26));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(79395, 50917, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79396, 50918, 0);

    }
    }
    {
    __CrestLoad(79399, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79398, (unsigned long )0, (long long )25);
    __CrestApply2(79397, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 25));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(79400, 50920, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79401, 50921, 0);

    }
    }
    {
    __CrestLoad(79404, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79403, (unsigned long )0, (long long )24);
    __CrestApply2(79402, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 24));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(79405, 50923, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79406, 50924, 0);

    }
    }
    {
    __CrestLoad(79409, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79408, (unsigned long )0, (long long )22);
    __CrestApply2(79407, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 22));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(79410, 50926, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(79411, 50927, 0);

    }
    }
    {
    __CrestLoad(79414, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79413, (unsigned long )0, (long long )5);
    __CrestApply2(79412, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 5));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(79415, 50929, 1);
# 926 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(79416, 50930, 0);

    }
    }
    {
    __CrestLoad(79419, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79418, (unsigned long )0, (long long )6);
    __CrestApply2(79417, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 6));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(79420, 50932, 1);
# 926 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(79421, 50933, 0);

    }
    }
    {
    __CrestLoad(79424, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79423, (unsigned long )0, (long long )7);
    __CrestApply2(79422, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 7));
# 926 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(79425, 50935, 1);
# 926 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(79426, 50936, 0);

    }
    }
    {
    __CrestLoad(79429, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79428, (unsigned long )0, (long long )36);
    __CrestApply2(79427, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 36));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 36) {
      __CrestBranch(79430, 50938, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79431, 50939, 0);

    }
    }
    {
    __CrestLoad(79434, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79433, (unsigned long )0, (long long )30);
    __CrestApply2(79432, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 30));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(79435, 50941, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79436, 50942, 0);

    }
    }
    {
    __CrestLoad(79439, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79438, (unsigned long )0, (long long )11);
    __CrestApply2(79437, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 11));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(79440, 50944, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79441, 50945, 0);

    }
    }
    {
    __CrestLoad(79444, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79443, (unsigned long )0, (long long )32);
    __CrestApply2(79442, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 32));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 32) {
      __CrestBranch(79445, 50947, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79446, 50948, 0);

    }
    }
    {
    __CrestLoad(79449, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79448, (unsigned long )0, (long long )21);
    __CrestApply2(79447, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 21));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(79450, 50950, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79451, 50951, 0);

    }
    }
    {
    __CrestLoad(79454, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79453, (unsigned long )0, (long long )10);
    __CrestApply2(79452, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 10));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(79455, 50953, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79456, 50954, 0);

    }
    }
    {
    __CrestLoad(79459, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
    __CrestLoad(79458, (unsigned long )0, (long long )9);
    __CrestApply2(79457, 12, (long long )((int )mem_18->type[(unsigned char )*ptr] == 9));
# 928 "xmltok_impl.c"
    if ((int )mem_18->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(79460, 50956, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(79461, 50957, 0);

    }
    }
# 931 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79462, (unsigned long )0, (long long )0);
    __CrestStore(79463, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
    __retres25 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 926 "xmltok_impl.c"
    ptr ++;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(79468, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79467, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79466, 18, (long long )(end - ptr));
    __CrestLoad(79465, (unsigned long )0, (long long )2L);
    __CrestApply2(79464, 16, (long long )(end - ptr < 2L));
# 926 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(79469, 50965, 1);
      __CrestLoad(79471, (unsigned long )0, (long long )-2);
      __CrestStore(79472, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79470, 50967, 0);

    }
    }
# 926 "xmltok_impl.c"
    mem_19 = (struct normal_encoding const *)enc;
# 926 "xmltok_impl.c"
    mem_20 = mem_19->isName2;
# 926 "xmltok_impl.c"
    tmp___2 = (*mem_20)(enc, ptr);
    __CrestHandleReturn(79474, (long long )tmp___2);
    __CrestStore(79473, (unsigned long )(& tmp___2));
    {
    __CrestLoad(79477, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(79476, (unsigned long )0, (long long )0);
    __CrestApply2(79475, 13, (long long )(tmp___2 != 0));
# 926 "xmltok_impl.c"
    if (tmp___2 != 0) {
      __CrestBranch(79478, 50970, 1);

    } else {
      __CrestBranch(79479, 50971, 0);
# 926 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79480, (unsigned long )0, (long long )0);
      __CrestStore(79481, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = 0;
# 926 "xmltok_impl.c"
      goto return_label;
    }
    }
# 926 "xmltok_impl.c"
    ptr += 2;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(79486, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79485, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79484, 18, (long long )(end - ptr));
    __CrestLoad(79483, (unsigned long )0, (long long )3L);
    __CrestApply2(79482, 16, (long long )(end - ptr < 3L));
# 926 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(79487, 50977, 1);
      __CrestLoad(79489, (unsigned long )0, (long long )-2);
      __CrestStore(79490, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79488, 50979, 0);

    }
    }
# 926 "xmltok_impl.c"
    mem_21 = (struct normal_encoding const *)enc;
# 926 "xmltok_impl.c"
    mem_22 = mem_21->isName3;
# 926 "xmltok_impl.c"
    tmp___3 = (*mem_22)(enc, ptr);
    __CrestHandleReturn(79492, (long long )tmp___3);
    __CrestStore(79491, (unsigned long )(& tmp___3));
    {
    __CrestLoad(79495, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(79494, (unsigned long )0, (long long )0);
    __CrestApply2(79493, 13, (long long )(tmp___3 != 0));
# 926 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(79496, 50982, 1);

    } else {
      __CrestBranch(79497, 50983, 0);
# 926 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79498, (unsigned long )0, (long long )0);
      __CrestStore(79499, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = 0;
# 926 "xmltok_impl.c"
      goto return_label;
    }
    }
# 926 "xmltok_impl.c"
    ptr += 3;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(79504, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79503, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79502, 18, (long long )(end - ptr));
    __CrestLoad(79501, (unsigned long )0, (long long )4L);
    __CrestApply2(79500, 16, (long long )(end - ptr < 4L));
# 926 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(79505, 50989, 1);
      __CrestLoad(79507, (unsigned long )0, (long long )-2);
      __CrestStore(79508, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79506, 50991, 0);

    }
    }
# 926 "xmltok_impl.c"
    mem_23 = (struct normal_encoding const *)enc;
# 926 "xmltok_impl.c"
    mem_24 = mem_23->isName4;
# 926 "xmltok_impl.c"
    tmp___4 = (*mem_24)(enc, ptr);
    __CrestHandleReturn(79510, (long long )tmp___4);
    __CrestStore(79509, (unsigned long )(& tmp___4));
    {
    __CrestLoad(79513, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(79512, (unsigned long )0, (long long )0);
    __CrestApply2(79511, 13, (long long )(tmp___4 != 0));
# 926 "xmltok_impl.c"
    if (tmp___4 != 0) {
      __CrestBranch(79514, 50994, 1);

    } else {
      __CrestBranch(79515, 50995, 0);
# 926 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79516, (unsigned long )0, (long long )0);
      __CrestStore(79517, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = 0;
# 926 "xmltok_impl.c"
      goto return_label;
    }
    }
# 926 "xmltok_impl.c"
    ptr += 4;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_36:
    case_30:
    case_11:
    case_32:
    case_21:
    case_10:
    case_9:
# 929 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79518, (unsigned long )0, (long long )20);
    __CrestStore(79519, (unsigned long )(& __retres25));
# 930 "xmltok_impl.c"
    __retres25 = 20;
# 930 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 932 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79520, (unsigned long )0, (long long )0);
    __CrestStore(79521, (unsigned long )(& __retres25));
# 933 "xmltok_impl.c"
    __retres25 = 0;
# 933 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(79522, (unsigned long )0, (long long )-20);
  __CrestStore(79523, (unsigned long )(& __retres25));
# 936 "xmltok_impl.c"
  __retres25 = -20;
  return_label:
  {
  __CrestLoad(79524, (unsigned long )(& __retres25), (long long )__retres25);
  __CrestReturn(79525);
# 912 "xmltok_impl.c"
  return (__retres25);
  }
}
}
# 939 "xmltok_impl.c"
static int normal_scanLit(int open , ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int t ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct normal_encoding *mem_10 ;
  struct normal_encoding const *mem_11 ;
  int (*mem_12)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_13 ;
  int (*mem_14)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_15 ;
  int (*mem_16)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_17 ;
  int __retres18 ;

  {
  __CrestCall(79527, 848);
  __CrestStore(79526, (unsigned long )(& open));
  {
# 944 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(79530, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79529, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79528, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 944 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(79531, 51014, 1);

    } else {
      __CrestBranch(79532, 51015, 0);
# 944 "xmltok_impl.c"
      goto while_break;
    }
    }
# 945 "xmltok_impl.c"
    mem_10 = (struct normal_encoding *)enc;
    __CrestLoad(79533, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestStore(79534, (unsigned long )(& t));
# 945 "xmltok_impl.c"
    t = (int )mem_10->type[(unsigned char )*ptr];
    {
    {
    __CrestLoad(79537, (unsigned long )(& t), (long long )t);
    __CrestLoad(79536, (unsigned long )0, (long long )5);
    __CrestApply2(79535, 12, (long long )(t == 5));
# 947 "xmltok_impl.c"
    if (t == 5) {
      __CrestBranch(79538, 51019, 1);
# 947 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(79539, 51020, 0);

    }
    }
    {
    __CrestLoad(79542, (unsigned long )(& t), (long long )t);
    __CrestLoad(79541, (unsigned long )0, (long long )6);
    __CrestApply2(79540, 12, (long long )(t == 6));
# 947 "xmltok_impl.c"
    if (t == 6) {
      __CrestBranch(79543, 51022, 1);
# 947 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(79544, 51023, 0);

    }
    }
    {
    __CrestLoad(79547, (unsigned long )(& t), (long long )t);
    __CrestLoad(79546, (unsigned long )0, (long long )7);
    __CrestApply2(79545, 12, (long long )(t == 7));
# 947 "xmltok_impl.c"
    if (t == 7) {
      __CrestBranch(79548, 51025, 1);
# 947 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(79549, 51026, 0);

    }
    }
    {
    __CrestLoad(79552, (unsigned long )(& t), (long long )t);
    __CrestLoad(79551, (unsigned long )0, (long long )8);
    __CrestApply2(79550, 12, (long long )(t == 8));
# 947 "xmltok_impl.c"
    if (t == 8) {
      __CrestBranch(79553, 51028, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(79554, 51029, 0);

    }
    }
    {
    __CrestLoad(79557, (unsigned long )(& t), (long long )t);
    __CrestLoad(79556, (unsigned long )0, (long long )1);
    __CrestApply2(79555, 12, (long long )(t == 1));
# 947 "xmltok_impl.c"
    if (t == 1) {
      __CrestBranch(79558, 51031, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(79559, 51032, 0);

    }
    }
    {
    __CrestLoad(79562, (unsigned long )(& t), (long long )t);
    __CrestLoad(79561, (unsigned long )0, (long long )0);
    __CrestApply2(79560, 12, (long long )(t == 0));
# 947 "xmltok_impl.c"
    if (t == 0) {
      __CrestBranch(79563, 51034, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(79564, 51035, 0);

    }
    }
    {
    __CrestLoad(79567, (unsigned long )(& t), (long long )t);
    __CrestLoad(79566, (unsigned long )0, (long long )13);
    __CrestApply2(79565, 12, (long long )(t == 13));
# 949 "xmltok_impl.c"
    if (t == 13) {
      __CrestBranch(79568, 51037, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(79569, 51038, 0);

    }
    }
    {
    __CrestLoad(79572, (unsigned long )(& t), (long long )t);
    __CrestLoad(79571, (unsigned long )0, (long long )12);
    __CrestApply2(79570, 12, (long long )(t == 12));
# 949 "xmltok_impl.c"
    if (t == 12) {
      __CrestBranch(79573, 51040, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(79574, 51041, 0);

    }
    }
# 963 "xmltok_impl.c"
    goto switch_default___0;
    case_5:
    {
    __CrestLoad(79579, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79578, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79577, 18, (long long )(end - ptr));
    __CrestLoad(79576, (unsigned long )0, (long long )2L);
    __CrestApply2(79575, 16, (long long )(end - ptr < 2L));
# 947 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(79580, 51044, 1);
      __CrestLoad(79582, (unsigned long )0, (long long )-2);
      __CrestStore(79583, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79581, 51046, 0);

    }
    }
# 947 "xmltok_impl.c"
    mem_11 = (struct normal_encoding const *)enc;
# 947 "xmltok_impl.c"
    mem_12 = mem_11->isInvalid2;
# 947 "xmltok_impl.c"
    tmp = (*mem_12)(enc, ptr);
    __CrestHandleReturn(79585, (long long )tmp);
    __CrestStore(79584, (unsigned long )(& tmp));
    {
    __CrestLoad(79588, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(79587, (unsigned long )0, (long long )0);
    __CrestApply2(79586, 13, (long long )(tmp != 0));
# 947 "xmltok_impl.c"
    if (tmp != 0) {
      __CrestBranch(79589, 51049, 1);
# 947 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79591, (unsigned long )0, (long long )0);
      __CrestStore(79592, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = 0;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79590, 51052, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 2;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(79597, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79596, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79595, 18, (long long )(end - ptr));
    __CrestLoad(79594, (unsigned long )0, (long long )3L);
    __CrestApply2(79593, 16, (long long )(end - ptr < 3L));
# 947 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(79598, 51056, 1);
      __CrestLoad(79600, (unsigned long )0, (long long )-2);
      __CrestStore(79601, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79599, 51058, 0);

    }
    }
# 947 "xmltok_impl.c"
    mem_13 = (struct normal_encoding const *)enc;
# 947 "xmltok_impl.c"
    mem_14 = mem_13->isInvalid3;
# 947 "xmltok_impl.c"
    tmp___0 = (*mem_14)(enc, ptr);
    __CrestHandleReturn(79603, (long long )tmp___0);
    __CrestStore(79602, (unsigned long )(& tmp___0));
    {
    __CrestLoad(79606, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(79605, (unsigned long )0, (long long )0);
    __CrestApply2(79604, 13, (long long )(tmp___0 != 0));
# 947 "xmltok_impl.c"
    if (tmp___0 != 0) {
      __CrestBranch(79607, 51061, 1);
# 947 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79609, (unsigned long )0, (long long )0);
      __CrestStore(79610, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = 0;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79608, 51064, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 3;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(79615, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(79614, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(79613, 18, (long long )(end - ptr));
    __CrestLoad(79612, (unsigned long )0, (long long )4L);
    __CrestApply2(79611, 16, (long long )(end - ptr < 4L));
# 947 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(79616, 51068, 1);
      __CrestLoad(79618, (unsigned long )0, (long long )-2);
      __CrestStore(79619, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79617, 51070, 0);

    }
    }
# 947 "xmltok_impl.c"
    mem_15 = (struct normal_encoding const *)enc;
# 947 "xmltok_impl.c"
    mem_16 = mem_15->isInvalid4;
# 947 "xmltok_impl.c"
    tmp___1 = (*mem_16)(enc, ptr);
    __CrestHandleReturn(79621, (long long )tmp___1);
    __CrestStore(79620, (unsigned long )(& tmp___1));
    {
    __CrestLoad(79624, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(79623, (unsigned long )0, (long long )0);
    __CrestApply2(79622, 13, (long long )(tmp___1 != 0));
# 947 "xmltok_impl.c"
    if (tmp___1 != 0) {
      __CrestBranch(79625, 51073, 1);
# 947 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(79627, (unsigned long )0, (long long )0);
      __CrestStore(79628, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
      __retres18 = 0;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79626, 51076, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 4;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 947 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79629, (unsigned long )0, (long long )0);
    __CrestStore(79630, (unsigned long )(& __retres18));
# 947 "xmltok_impl.c"
    __retres18 = 0;
# 947 "xmltok_impl.c"
    goto return_label;
    case_13:
    case_12:
# 950 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(79633, (unsigned long )(& t), (long long )t);
    __CrestLoad(79632, (unsigned long )(& open), (long long )open);
    __CrestApply2(79631, 13, (long long )(t != open));
# 951 "xmltok_impl.c"
    if (t != open) {
      __CrestBranch(79634, 51084, 1);
# 952 "xmltok_impl.c"
      goto switch_break;
    } else {
      __CrestBranch(79635, 51085, 0);

    }
    }
    {
    __CrestLoad(79638, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79637, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79636, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 953 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(79639, 51087, 1);
      __CrestLoad(79641, (unsigned long )0, (long long )-27);
      __CrestStore(79642, (unsigned long )(& __retres18));
# 954 "xmltok_impl.c"
      __retres18 = -27;
# 954 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79640, 51089, 0);

    }
    }
# 955 "xmltok_impl.c"
    *nextTokPtr = ptr;
    {
# 956 "xmltok_impl.c"
    mem_17 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(79645, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79644, (unsigned long )0, (long long )20);
    __CrestApply2(79643, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 20));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 20) {
      __CrestBranch(79646, 51095, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79647, 51096, 0);

    }
    }
    {
    __CrestLoad(79650, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79649, (unsigned long )0, (long long )30);
    __CrestApply2(79648, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 30));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(79651, 51098, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79652, 51099, 0);

    }
    }
    {
    __CrestLoad(79655, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79654, (unsigned long )0, (long long )11);
    __CrestApply2(79653, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 11));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(79656, 51101, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79657, 51102, 0);

    }
    }
    {
    __CrestLoad(79660, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79659, (unsigned long )0, (long long )10);
    __CrestApply2(79658, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 10));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(79661, 51104, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79662, 51105, 0);

    }
    }
    {
    __CrestLoad(79665, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79664, (unsigned long )0, (long long )9);
    __CrestApply2(79663, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 9));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(79666, 51107, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79667, 51108, 0);

    }
    }
    {
    __CrestLoad(79670, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
    __CrestLoad(79669, (unsigned long )0, (long long )21);
    __CrestApply2(79668, 12, (long long )((int )mem_17->type[(unsigned char )*ptr] == 21));
# 958 "xmltok_impl.c"
    if ((int )mem_17->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(79671, 51110, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(79672, 51111, 0);

    }
    }
# 960 "xmltok_impl.c"
    goto switch_default;
    case_20:
    case_30:
    case_11:
    case_10:
    case_9:
    case_21:
    __CrestLoad(79673, (unsigned long )0, (long long )27);
    __CrestStore(79674, (unsigned long )(& __retres18));
# 959 "xmltok_impl.c"
    __retres18 = 27;
# 959 "xmltok_impl.c"
    goto return_label;
    switch_default:
    __CrestLoad(79675, (unsigned long )0, (long long )0);
    __CrestStore(79676, (unsigned long )(& __retres18));
# 961 "xmltok_impl.c"
    __retres18 = 0;
# 961 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
    switch_default___0:
# 964 "xmltok_impl.c"
    ptr ++;
# 965 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(79677, (unsigned long )0, (long long )-1);
  __CrestStore(79678, (unsigned long )(& __retres18));
# 968 "xmltok_impl.c"
  __retres18 = -1;
  return_label:
  {
  __CrestLoad(79679, (unsigned long )(& __retres18), (long long )__retres18);
  __CrestReturn(79680);
# 939 "xmltok_impl.c"
  return (__retres18);
  }
}
}
# 971 "xmltok_impl.c"
static int normal_prologTok(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  struct normal_encoding *mem_25 ;
  struct normal_encoding *mem_26 ;
  struct normal_encoding *mem_27 ;
  char const *mem_28 ;
  struct normal_encoding *mem_29 ;
  struct normal_encoding const *mem_30 ;
  int (*mem_31)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_32 ;
  int (*mem_33)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_34 ;
  int (*mem_35)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_36 ;
  int (*mem_37)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_38 ;
  int (*mem_39)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_40 ;
  int (*mem_41)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_42 ;
  struct normal_encoding const *mem_43 ;
  int (*mem_44)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_45 ;
  int (*mem_46)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_47 ;
  int (*mem_48)(ENCODING const * , char const * ) ;
  struct normal_encoding *mem_49 ;
  struct normal_encoding const *mem_50 ;
  int (*mem_51)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_52 ;
  int (*mem_53)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_54 ;
  int (*mem_55)(ENCODING const * , char const * ) ;
  int __retres56 ;

  {
  __CrestCall(79681, 849);

  {
  __CrestLoad(79684, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79683, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79682, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 976 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79685, 51125, 1);
    __CrestLoad(79687, (unsigned long )0, (long long )-4);
    __CrestStore(79688, (unsigned long )(& __retres56));
# 977 "xmltok_impl.c"
    __retres56 = -4;
# 977 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79686, 51127, 0);

  }
  }
  {
# 987 "xmltok_impl.c"
  mem_25 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(79691, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79690, (unsigned long )0, (long long )12);
  __CrestApply2(79689, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 12));
# 988 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 12) {
    __CrestBranch(79692, 51132, 1);
# 988 "xmltok_impl.c"
    goto case_12;
  } else {
    __CrestBranch(79693, 51133, 0);

  }
  }
  {
  __CrestLoad(79696, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79695, (unsigned long )0, (long long )13);
  __CrestApply2(79694, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 13));
# 990 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 13) {
    __CrestBranch(79697, 51135, 1);
# 990 "xmltok_impl.c"
    goto case_13;
  } else {
    __CrestBranch(79698, 51136, 0);

  }
  }
  {
  __CrestLoad(79701, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79700, (unsigned long )0, (long long )2);
  __CrestApply2(79699, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 2));
# 992 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 2) {
    __CrestBranch(79702, 51138, 1);
# 992 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(79703, 51139, 0);

  }
  }
  {
  __CrestLoad(79706, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79705, (unsigned long )0, (long long )9);
  __CrestApply2(79704, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 9));
# 1014 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 9) {
    __CrestBranch(79707, 51141, 1);
# 1014 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(79708, 51142, 0);

  }
  }
  {
  __CrestLoad(79711, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79710, (unsigned long )0, (long long )10);
  __CrestApply2(79709, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 10));
# 1021 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(79712, 51144, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(79713, 51145, 0);

  }
  }
  {
  __CrestLoad(79716, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79715, (unsigned long )0, (long long )21);
  __CrestApply2(79714, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 21));
# 1021 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 21) {
    __CrestBranch(79717, 51147, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(79718, 51148, 0);

  }
  }
  {
  __CrestLoad(79721, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79720, (unsigned long )0, (long long )30);
  __CrestApply2(79719, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 30));
# 1041 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 30) {
    __CrestBranch(79722, 51150, 1);
# 1041 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(79723, 51151, 0);

  }
  }
  {
  __CrestLoad(79726, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79725, (unsigned long )0, (long long )35);
  __CrestApply2(79724, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 35));
# 1043 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 35) {
    __CrestBranch(79727, 51153, 1);
# 1043 "xmltok_impl.c"
    goto case_35;
  } else {
    __CrestBranch(79728, 51154, 0);

  }
  }
  {
  __CrestLoad(79731, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79730, (unsigned long )0, (long long )20);
  __CrestApply2(79729, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 20));
# 1046 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 20) {
    __CrestBranch(79732, 51156, 1);
# 1046 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(79733, 51157, 0);

  }
  }
  {
  __CrestLoad(79736, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79735, (unsigned long )0, (long long )4);
  __CrestApply2(79734, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 4));
# 1049 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 4) {
    __CrestBranch(79737, 51159, 1);
# 1049 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(79738, 51160, 0);

  }
  }
  {
  __CrestLoad(79741, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79740, (unsigned long )0, (long long )31);
  __CrestApply2(79739, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 31));
# 1063 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 31) {
    __CrestBranch(79742, 51162, 1);
# 1063 "xmltok_impl.c"
    goto case_31;
  } else {
    __CrestBranch(79743, 51163, 0);

  }
  }
  {
  __CrestLoad(79746, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79745, (unsigned long )0, (long long )32);
  __CrestApply2(79744, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 32));
# 1066 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 32) {
    __CrestBranch(79747, 51165, 1);
# 1066 "xmltok_impl.c"
    goto case_32;
  } else {
    __CrestBranch(79748, 51166, 0);

  }
  }
  {
  __CrestLoad(79751, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79750, (unsigned long )0, (long long )36);
  __CrestApply2(79749, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 36));
# 1088 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 36) {
    __CrestBranch(79752, 51168, 1);
# 1088 "xmltok_impl.c"
    goto case_36___0;
  } else {
    __CrestBranch(79753, 51169, 0);

  }
  }
  {
  __CrestLoad(79756, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79755, (unsigned long )0, (long long )11);
  __CrestApply2(79754, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 11));
# 1091 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 11) {
    __CrestBranch(79757, 51171, 1);
# 1091 "xmltok_impl.c"
    goto case_11___0;
  } else {
    __CrestBranch(79758, 51172, 0);

  }
  }
  {
  __CrestLoad(79761, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79760, (unsigned long )0, (long long )19);
  __CrestApply2(79759, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 19));
# 1094 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 19) {
    __CrestBranch(79762, 51174, 1);
# 1094 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(79763, 51175, 0);

  }
  }
  {
  __CrestLoad(79766, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79765, (unsigned long )0, (long long )5);
  __CrestApply2(79764, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 5));
# 1112 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(79767, 51177, 1);
# 1112 "xmltok_impl.c"
    goto case_5___0;
  } else {
    __CrestBranch(79768, 51178, 0);

  }
  }
  {
  __CrestLoad(79771, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79770, (unsigned long )0, (long long )6);
  __CrestApply2(79769, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 6));
# 1112 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(79772, 51180, 1);
# 1112 "xmltok_impl.c"
    goto case_6___0;
  } else {
    __CrestBranch(79773, 51181, 0);

  }
  }
  {
  __CrestLoad(79776, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79775, (unsigned long )0, (long long )7);
  __CrestApply2(79774, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 7));
# 1112 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(79777, 51183, 1);
# 1112 "xmltok_impl.c"
    goto case_7___0;
  } else {
    __CrestBranch(79778, 51184, 0);

  }
  }
  {
  __CrestLoad(79781, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79780, (unsigned long )0, (long long )24);
  __CrestApply2(79779, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 24));
# 1115 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(79782, 51186, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(79783, 51187, 0);

  }
  }
  {
  __CrestLoad(79786, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79785, (unsigned long )0, (long long )22);
  __CrestApply2(79784, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 22));
# 1115 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(79787, 51189, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(79788, 51190, 0);

  }
  }
  {
  __CrestLoad(79791, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79790, (unsigned long )0, (long long )23);
  __CrestApply2(79789, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 23));
# 1123 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 23) {
    __CrestBranch(79792, 51192, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(79793, 51193, 0);

  }
  }
  {
  __CrestLoad(79796, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79795, (unsigned long )0, (long long )27);
  __CrestApply2(79794, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 27));
# 1123 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 27) {
    __CrestBranch(79797, 51195, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(79798, 51196, 0);

  }
  }
  {
  __CrestLoad(79801, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79800, (unsigned long )0, (long long )26);
  __CrestApply2(79799, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 26));
# 1123 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 26) {
    __CrestBranch(79802, 51198, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(79803, 51199, 0);

  }
  }
  {
  __CrestLoad(79806, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79805, (unsigned long )0, (long long )25);
  __CrestApply2(79804, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 25));
# 1123 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 25) {
    __CrestBranch(79807, 51201, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(79808, 51202, 0);

  }
  }
  {
  __CrestLoad(79811, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
  __CrestLoad(79810, (unsigned long )0, (long long )29);
  __CrestApply2(79809, 12, (long long )((int )mem_25->type[(unsigned char )*ptr] == 29));
# 1128 "xmltok_impl.c"
  if ((int )mem_25->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(79812, 51204, 1);
# 1128 "xmltok_impl.c"
    goto case_29___0;
  } else {
    __CrestBranch(79813, 51205, 0);

  }
  }
# 1140 "xmltok_impl.c"
  goto switch_default___0;
  case_12:
  __CrestLoad(79814, (unsigned long )0, (long long )12);
# 989 "xmltok_impl.c"
  tmp = normal_scanLit(12, enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(79816, (long long )tmp);
  __CrestStore(79815, (unsigned long )(& tmp));
  __CrestLoad(79817, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(79818, (unsigned long )(& __retres56));
# 989 "xmltok_impl.c"
  __retres56 = tmp;
# 989 "xmltok_impl.c"
  goto return_label;
  case_13:
  __CrestLoad(79819, (unsigned long )0, (long long )13);
# 991 "xmltok_impl.c"
  tmp___0 = normal_scanLit(13, enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(79821, (long long )tmp___0);
  __CrestStore(79820, (unsigned long )(& tmp___0));
  __CrestLoad(79822, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(79823, (unsigned long )(& __retres56));
# 991 "xmltok_impl.c"
  __retres56 = tmp___0;
# 991 "xmltok_impl.c"
  goto return_label;
  case_2:
# 994 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(79826, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79825, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79824, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 995 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79827, 51215, 1);
    __CrestLoad(79829, (unsigned long )0, (long long )-1);
    __CrestStore(79830, (unsigned long )(& __retres56));
# 996 "xmltok_impl.c"
    __retres56 = -1;
# 996 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79828, 51217, 0);

  }
  }
  {
# 997 "xmltok_impl.c"
  mem_26 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(79833, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79832, (unsigned long )0, (long long )16);
  __CrestApply2(79831, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 16));
# 998 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 16) {
    __CrestBranch(79834, 51222, 1);
# 998 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(79835, 51223, 0);

  }
  }
  {
  __CrestLoad(79838, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79837, (unsigned long )0, (long long )15);
  __CrestApply2(79836, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 15));
# 1000 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 15) {
    __CrestBranch(79839, 51225, 1);
# 1000 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(79840, 51226, 0);

  }
  }
  {
  __CrestLoad(79843, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79842, (unsigned long )0, (long long )7);
  __CrestApply2(79841, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 7));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 7) {
    __CrestBranch(79844, 51228, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79845, 51229, 0);

  }
  }
  {
  __CrestLoad(79848, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79847, (unsigned long )0, (long long )6);
  __CrestApply2(79846, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 6));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 6) {
    __CrestBranch(79849, 51231, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79850, 51232, 0);

  }
  }
  {
  __CrestLoad(79853, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79852, (unsigned long )0, (long long )5);
  __CrestApply2(79851, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 5));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 5) {
    __CrestBranch(79854, 51234, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79855, 51235, 0);

  }
  }
  {
  __CrestLoad(79858, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79857, (unsigned long )0, (long long )29);
  __CrestApply2(79856, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 29));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 29) {
    __CrestBranch(79859, 51237, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79860, 51238, 0);

  }
  }
  {
  __CrestLoad(79863, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79862, (unsigned long )0, (long long )24);
  __CrestApply2(79861, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 24));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 24) {
    __CrestBranch(79864, 51240, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79865, 51241, 0);

  }
  }
  {
  __CrestLoad(79868, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
  __CrestLoad(79867, (unsigned long )0, (long long )22);
  __CrestApply2(79866, 12, (long long )((int )mem_26->type[(unsigned char )*ptr] == 22));
# 1007 "xmltok_impl.c"
  if ((int )mem_26->type[(unsigned char )*ptr] == 22) {
    __CrestBranch(79869, 51243, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(79870, 51244, 0);

  }
  }
# 997 "xmltok_impl.c"
  goto switch_break___0;
  case_16:
# 999 "xmltok_impl.c"
  tmp___1 = normal_scanDecl(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(79872, (long long )tmp___1);
  __CrestStore(79871, (unsigned long )(& tmp___1));
  __CrestLoad(79873, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(79874, (unsigned long )(& __retres56));
# 999 "xmltok_impl.c"
  __retres56 = tmp___1;
# 999 "xmltok_impl.c"
  goto return_label;
  case_15:
# 1001 "xmltok_impl.c"
  tmp___2 = normal_scanPi(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(79876, (long long )tmp___2);
  __CrestStore(79875, (unsigned long )(& tmp___2));
  __CrestLoad(79877, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(79878, (unsigned long )(& __retres56));
# 1001 "xmltok_impl.c"
  __retres56 = tmp___2;
# 1001 "xmltok_impl.c"
  goto return_label;
  case_7:
  case_6:
  case_5:
  case_29:
  case_24:
  case_22:
# 1008 "xmltok_impl.c"
  *nextTokPtr = ptr - 1;
  __CrestLoad(79879, (unsigned long )0, (long long )29);
  __CrestStore(79880, (unsigned long )(& __retres56));
# 1009 "xmltok_impl.c"
  __retres56 = 29;
# 1009 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
  }
# 1011 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79881, (unsigned long )0, (long long )0);
  __CrestStore(79882, (unsigned long )(& __retres56));
# 1012 "xmltok_impl.c"
  __retres56 = 0;
# 1012 "xmltok_impl.c"
  goto return_label;
  case_9:
  {
  __CrestLoad(79887, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79886, (unsigned long )0, (long long )1);
  __CrestApply2(79885, 18, (long long )((unsigned long )(ptr + 1)));
  __CrestLoad(79884, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79883, 12, (long long )((unsigned long )(ptr + 1) == (unsigned long )end));
# 1015 "xmltok_impl.c"
  if ((unsigned long )(ptr + 1) == (unsigned long )end) {
    __CrestBranch(79888, 51260, 1);
# 1016 "xmltok_impl.c"
    *nextTokPtr = end;
    __CrestLoad(79890, (unsigned long )0, (long long )-15);
    __CrestStore(79891, (unsigned long )(& __retres56));
# 1018 "xmltok_impl.c"
    __retres56 = -15;
# 1018 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79889, 51263, 0);

  }
  }
  case_10:
  case_21:
  {
# 1022 "xmltok_impl.c"
  while (1) {
    while_continue: ;
# 1023 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(79894, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79893, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79892, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1024 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(79895, 51269, 1);
# 1025 "xmltok_impl.c"
      goto while_break;
    } else {
      __CrestBranch(79896, 51270, 0);

    }
    }
    {
# 1026 "xmltok_impl.c"
    mem_27 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(79899, (unsigned long )(& mem_27->type[(unsigned char )*ptr]), (long long )mem_27->type[(unsigned char )*ptr]);
    __CrestLoad(79898, (unsigned long )0, (long long )10);
    __CrestApply2(79897, 12, (long long )((int )mem_27->type[(unsigned char )*ptr] == 10));
# 1027 "xmltok_impl.c"
    if ((int )mem_27->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(79900, 51275, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(79901, 51276, 0);

    }
    }
    {
    __CrestLoad(79904, (unsigned long )(& mem_27->type[(unsigned char )*ptr]), (long long )mem_27->type[(unsigned char )*ptr]);
    __CrestLoad(79903, (unsigned long )0, (long long )21);
    __CrestApply2(79902, 12, (long long )((int )mem_27->type[(unsigned char )*ptr] == 21));
# 1027 "xmltok_impl.c"
    if ((int )mem_27->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(79905, 51278, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(79906, 51279, 0);

    }
    }
    {
    __CrestLoad(79909, (unsigned long )(& mem_27->type[(unsigned char )*ptr]), (long long )mem_27->type[(unsigned char )*ptr]);
    __CrestLoad(79908, (unsigned long )0, (long long )9);
    __CrestApply2(79907, 12, (long long )((int )mem_27->type[(unsigned char )*ptr] == 9));
# 1029 "xmltok_impl.c"
    if ((int )mem_27->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(79910, 51281, 1);
# 1029 "xmltok_impl.c"
      goto case_9___0;
    } else {
      __CrestBranch(79911, 51282, 0);

    }
    }
# 1034 "xmltok_impl.c"
    goto switch_default;
    case_10___0:
    case_21___0:
# 1028 "xmltok_impl.c"
    goto switch_break___1;
    case_9___0:
    {
    __CrestLoad(79916, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79915, (unsigned long )0, (long long )1);
    __CrestApply2(79914, 18, (long long )((unsigned long )(ptr + 1)));
    __CrestLoad(79913, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79912, 13, (long long )((unsigned long )(ptr + 1) != (unsigned long )end));
# 1031 "xmltok_impl.c"
    if ((unsigned long )(ptr + 1) != (unsigned long )end) {
      __CrestBranch(79917, 51286, 1);
# 1032 "xmltok_impl.c"
      goto switch_break___1;
    } else {
      __CrestBranch(79918, 51287, 0);

    }
    }
    switch_default:
# 1035 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(79919, (unsigned long )0, (long long )15);
    __CrestStore(79920, (unsigned long )(& __retres56));
# 1036 "xmltok_impl.c"
    __retres56 = 15;
# 1036 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
    }
  }
  while_break: ;
  }
# 1039 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79921, (unsigned long )0, (long long )15);
  __CrestStore(79922, (unsigned long )(& __retres56));
# 1040 "xmltok_impl.c"
  __retres56 = 15;
# 1040 "xmltok_impl.c"
  goto return_label;
  case_30:
# 1042 "xmltok_impl.c"
  tmp___3 = normal_scanPercent(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(79924, (long long )tmp___3);
  __CrestStore(79923, (unsigned long )(& tmp___3));
  __CrestLoad(79925, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(79926, (unsigned long )(& __retres56));
# 1042 "xmltok_impl.c"
  __retres56 = tmp___3;
# 1042 "xmltok_impl.c"
  goto return_label;
  case_35:
# 1044 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(79927, (unsigned long )0, (long long )38);
  __CrestStore(79928, (unsigned long )(& __retres56));
# 1045 "xmltok_impl.c"
  __retres56 = 38;
# 1045 "xmltok_impl.c"
  goto return_label;
  case_20:
# 1047 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(79929, (unsigned long )0, (long long )25);
  __CrestStore(79930, (unsigned long )(& __retres56));
# 1048 "xmltok_impl.c"
  __retres56 = 25;
# 1048 "xmltok_impl.c"
  goto return_label;
  case_4:
# 1050 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(79933, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79932, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79931, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1051 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79934, 51307, 1);
    __CrestLoad(79936, (unsigned long )0, (long long )-26);
    __CrestStore(79937, (unsigned long )(& __retres56));
# 1052 "xmltok_impl.c"
    __retres56 = -26;
# 1052 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79935, 51309, 0);

  }
  }
  {
  __CrestLoad(79940, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(79939, (unsigned long )0, (long long )93);
  __CrestApply2(79938, 12, (long long )((int const )*ptr == 93));
# 1053 "xmltok_impl.c"
  if ((int const )*ptr == 93) {
    __CrestBranch(79941, 51311, 1);
    {
    __CrestLoad(79947, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(79946, (unsigned long )0, (long long )1);
    __CrestApply2(79945, 18, (long long )((unsigned long )(ptr + 1)));
    __CrestLoad(79944, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(79943, 12, (long long )((unsigned long )(ptr + 1) == (unsigned long )end));
# 1054 "xmltok_impl.c"
    if ((unsigned long )(ptr + 1) == (unsigned long )end) {
      __CrestBranch(79948, 51312, 1);
      __CrestLoad(79950, (unsigned long )0, (long long )-1);
      __CrestStore(79951, (unsigned long )(& __retres56));
# 1055 "xmltok_impl.c"
      __retres56 = -1;
# 1055 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79949, 51314, 0);

    }
    }
    {
# 1056 "xmltok_impl.c"
    mem_28 = ptr + 1;
    {
    __CrestLoad(79954, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(79953, (unsigned long )0, (long long )62);
    __CrestApply2(79952, 12, (long long )((int const )*mem_28 == 62));
# 1056 "xmltok_impl.c"
    if ((int const )*mem_28 == 62) {
      __CrestBranch(79955, 51318, 1);
# 1057 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(79957, (unsigned long )0, (long long )34);
      __CrestStore(79958, (unsigned long )(& __retres56));
# 1058 "xmltok_impl.c"
      __retres56 = 34;
# 1058 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(79956, 51321, 0);

    }
    }
    }
  } else {
    __CrestBranch(79942, 51322, 0);

  }
  }
# 1061 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(79959, (unsigned long )0, (long long )26);
  __CrestStore(79960, (unsigned long )(& __retres56));
# 1062 "xmltok_impl.c"
  __retres56 = 26;
# 1062 "xmltok_impl.c"
  goto return_label;
  case_31:
# 1064 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(79961, (unsigned long )0, (long long )23);
  __CrestStore(79962, (unsigned long )(& __retres56));
# 1065 "xmltok_impl.c"
  __retres56 = 23;
# 1065 "xmltok_impl.c"
  goto return_label;
  case_32:
# 1067 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(79965, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(79964, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(79963, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1068 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(79966, 51331, 1);
    __CrestLoad(79968, (unsigned long )0, (long long )-24);
    __CrestStore(79969, (unsigned long )(& __retres56));
# 1069 "xmltok_impl.c"
    __retres56 = -24;
# 1069 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(79967, 51333, 0);

  }
  }
  {
# 1070 "xmltok_impl.c"
  mem_29 = (struct normal_encoding *)enc;
  {
  {
  __CrestLoad(79972, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79971, (unsigned long )0, (long long )33);
  __CrestApply2(79970, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 33));
# 1071 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 33) {
    __CrestBranch(79973, 51338, 1);
# 1071 "xmltok_impl.c"
    goto case_33;
  } else {
    __CrestBranch(79974, 51339, 0);

  }
  }
  {
  __CrestLoad(79977, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79976, (unsigned long )0, (long long )15);
  __CrestApply2(79975, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 15));
# 1074 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 15) {
    __CrestBranch(79978, 51341, 1);
# 1074 "xmltok_impl.c"
    goto case_15___0;
  } else {
    __CrestBranch(79979, 51342, 0);

  }
  }
  {
  __CrestLoad(79982, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79981, (unsigned long )0, (long long )34);
  __CrestApply2(79980, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 34));
# 1077 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 34) {
    __CrestBranch(79983, 51344, 1);
# 1077 "xmltok_impl.c"
    goto case_34;
  } else {
    __CrestBranch(79984, 51345, 0);

  }
  }
  {
  __CrestLoad(79987, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79986, (unsigned long )0, (long long )32);
  __CrestApply2(79985, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 32));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 32) {
    __CrestBranch(79988, 51347, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(79989, 51348, 0);

  }
  }
  {
  __CrestLoad(79992, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79991, (unsigned long )0, (long long )36);
  __CrestApply2(79990, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 36));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 36) {
    __CrestBranch(79993, 51350, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(79994, 51351, 0);

  }
  }
  {
  __CrestLoad(79997, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(79996, (unsigned long )0, (long long )35);
  __CrestApply2(79995, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 35));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 35) {
    __CrestBranch(79998, 51353, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(79999, 51354, 0);

  }
  }
  {
  __CrestLoad(80002, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(80001, (unsigned long )0, (long long )11);
  __CrestApply2(80000, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 11));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 11) {
    __CrestBranch(80003, 51356, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(80004, 51357, 0);

  }
  }
  {
  __CrestLoad(80007, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(80006, (unsigned long )0, (long long )21);
  __CrestApply2(80005, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 21));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 21) {
    __CrestBranch(80008, 51359, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(80009, 51360, 0);

  }
  }
  {
  __CrestLoad(80012, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(80011, (unsigned long )0, (long long )10);
  __CrestApply2(80010, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 10));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 10) {
    __CrestBranch(80013, 51362, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(80014, 51363, 0);

  }
  }
  {
  __CrestLoad(80017, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
  __CrestLoad(80016, (unsigned long )0, (long long )9);
  __CrestApply2(80015, 12, (long long )((int )mem_29->type[(unsigned char )*ptr] == 9));
# 1082 "xmltok_impl.c"
  if ((int )mem_29->type[(unsigned char )*ptr] == 9) {
    __CrestBranch(80018, 51365, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(80019, 51366, 0);

  }
  }
# 1070 "xmltok_impl.c"
  goto switch_break___2;
  case_33:
# 1072 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(80020, (unsigned long )0, (long long )36);
  __CrestStore(80021, (unsigned long )(& __retres56));
# 1073 "xmltok_impl.c"
  __retres56 = 36;
# 1073 "xmltok_impl.c"
  goto return_label;
  case_15___0:
# 1075 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(80022, (unsigned long )0, (long long )35);
  __CrestStore(80023, (unsigned long )(& __retres56));
# 1076 "xmltok_impl.c"
  __retres56 = 35;
# 1076 "xmltok_impl.c"
  goto return_label;
  case_34:
# 1078 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(80024, (unsigned long )0, (long long )37);
  __CrestStore(80025, (unsigned long )(& __retres56));
# 1079 "xmltok_impl.c"
  __retres56 = 37;
# 1079 "xmltok_impl.c"
  goto return_label;
  case_32___0:
  case_36:
  case_35___0:
  case_11:
  case_21___1:
  case_10___1:
  case_9___1:
# 1083 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80026, (unsigned long )0, (long long )24);
  __CrestStore(80027, (unsigned long )(& __retres56));
# 1084 "xmltok_impl.c"
  __retres56 = 24;
# 1084 "xmltok_impl.c"
  goto return_label;
  switch_break___2: ;
  }
  }
# 1086 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80028, (unsigned long )0, (long long )0);
  __CrestStore(80029, (unsigned long )(& __retres56));
# 1087 "xmltok_impl.c"
  __retres56 = 0;
# 1087 "xmltok_impl.c"
  goto return_label;
  case_36___0:
# 1089 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(80030, (unsigned long )0, (long long )21);
  __CrestStore(80031, (unsigned long )(& __retres56));
# 1090 "xmltok_impl.c"
  __retres56 = 21;
# 1090 "xmltok_impl.c"
  goto return_label;
  case_11___0:
# 1092 "xmltok_impl.c"
  *nextTokPtr = ptr + 1;
  __CrestLoad(80032, (unsigned long )0, (long long )17);
  __CrestStore(80033, (unsigned long )(& __retres56));
# 1093 "xmltok_impl.c"
  __retres56 = 17;
# 1093 "xmltok_impl.c"
  goto return_label;
  case_19:
# 1095 "xmltok_impl.c"
  tmp___4 = normal_scanPoundName(enc, ptr + 1, end, nextTokPtr);
  __CrestHandleReturn(80035, (long long )tmp___4);
  __CrestStore(80034, (unsigned long )(& tmp___4));
  __CrestLoad(80036, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(80037, (unsigned long )(& __retres56));
# 1095 "xmltok_impl.c"
  __retres56 = tmp___4;
# 1095 "xmltok_impl.c"
  goto return_label;
  case_5___0:
  {
  __CrestLoad(80042, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(80041, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(80040, 18, (long long )(end - ptr));
  __CrestLoad(80039, (unsigned long )0, (long long )2L);
  __CrestApply2(80038, 16, (long long )(end - ptr < 2L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(80043, 51394, 1);
    __CrestLoad(80045, (unsigned long )0, (long long )-2);
    __CrestStore(80046, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
    __retres56 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(80044, 51396, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_30 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_31 = mem_30->isNmstrt2;
# 1112 "xmltok_impl.c"
  tmp___5 = (*mem_31)(enc, ptr);
  __CrestHandleReturn(80048, (long long )tmp___5);
  __CrestStore(80047, (unsigned long )(& tmp___5));
  {
  __CrestLoad(80051, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestLoad(80050, (unsigned long )0, (long long )0);
  __CrestApply2(80049, 13, (long long )(tmp___5 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___5 != 0) {
    __CrestBranch(80052, 51399, 1);
# 1112 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(80054, (unsigned long )0, (long long )18);
    __CrestStore(80055, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 18;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80053, 51401, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_32 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_33 = mem_32->isName2;
# 1112 "xmltok_impl.c"
  tmp___6 = (*mem_33)(enc, ptr);
  __CrestHandleReturn(80057, (long long )tmp___6);
  __CrestStore(80056, (unsigned long )(& tmp___6));
  {
  __CrestLoad(80060, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestLoad(80059, (unsigned long )0, (long long )0);
  __CrestApply2(80058, 13, (long long )(tmp___6 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___6 != 0) {
    __CrestBranch(80061, 51404, 1);
# 1112 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(80063, (unsigned long )0, (long long )19);
    __CrestStore(80064, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 19;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80062, 51406, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80065, (unsigned long )0, (long long )0);
  __CrestStore(80066, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
  __retres56 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_6___0:
  {
  __CrestLoad(80071, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(80070, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(80069, 18, (long long )(end - ptr));
  __CrestLoad(80068, (unsigned long )0, (long long )3L);
  __CrestApply2(80067, 16, (long long )(end - ptr < 3L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(80072, 51411, 1);
    __CrestLoad(80074, (unsigned long )0, (long long )-2);
    __CrestStore(80075, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
    __retres56 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(80073, 51413, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_34 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_35 = mem_34->isNmstrt3;
# 1112 "xmltok_impl.c"
  tmp___7 = (*mem_35)(enc, ptr);
  __CrestHandleReturn(80077, (long long )tmp___7);
  __CrestStore(80076, (unsigned long )(& tmp___7));
  {
  __CrestLoad(80080, (unsigned long )(& tmp___7), (long long )tmp___7);
  __CrestLoad(80079, (unsigned long )0, (long long )0);
  __CrestApply2(80078, 13, (long long )(tmp___7 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___7 != 0) {
    __CrestBranch(80081, 51416, 1);
# 1112 "xmltok_impl.c"
    ptr += 3;
    __CrestLoad(80083, (unsigned long )0, (long long )18);
    __CrestStore(80084, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 18;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80082, 51418, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_36 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_37 = mem_36->isName3;
# 1112 "xmltok_impl.c"
  tmp___8 = (*mem_37)(enc, ptr);
  __CrestHandleReturn(80086, (long long )tmp___8);
  __CrestStore(80085, (unsigned long )(& tmp___8));
  {
  __CrestLoad(80089, (unsigned long )(& tmp___8), (long long )tmp___8);
  __CrestLoad(80088, (unsigned long )0, (long long )0);
  __CrestApply2(80087, 13, (long long )(tmp___8 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___8 != 0) {
    __CrestBranch(80090, 51421, 1);
# 1112 "xmltok_impl.c"
    ptr += 3;
    __CrestLoad(80092, (unsigned long )0, (long long )19);
    __CrestStore(80093, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 19;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80091, 51423, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80094, (unsigned long )0, (long long )0);
  __CrestStore(80095, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
  __retres56 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_7___0:
  {
  __CrestLoad(80100, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(80099, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(80098, 18, (long long )(end - ptr));
  __CrestLoad(80097, (unsigned long )0, (long long )4L);
  __CrestApply2(80096, 16, (long long )(end - ptr < 4L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(80101, 51428, 1);
    __CrestLoad(80103, (unsigned long )0, (long long )-2);
    __CrestStore(80104, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
    __retres56 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(80102, 51430, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_38 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_39 = mem_38->isNmstrt4;
# 1112 "xmltok_impl.c"
  tmp___9 = (*mem_39)(enc, ptr);
  __CrestHandleReturn(80106, (long long )tmp___9);
  __CrestStore(80105, (unsigned long )(& tmp___9));
  {
  __CrestLoad(80109, (unsigned long )(& tmp___9), (long long )tmp___9);
  __CrestLoad(80108, (unsigned long )0, (long long )0);
  __CrestApply2(80107, 13, (long long )(tmp___9 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___9 != 0) {
    __CrestBranch(80110, 51433, 1);
# 1112 "xmltok_impl.c"
    ptr += 4;
    __CrestLoad(80112, (unsigned long )0, (long long )18);
    __CrestStore(80113, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 18;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80111, 51435, 0);

  }
  }
# 1112 "xmltok_impl.c"
  mem_40 = (struct normal_encoding const *)enc;
# 1112 "xmltok_impl.c"
  mem_41 = mem_40->isName4;
# 1112 "xmltok_impl.c"
  tmp___10 = (*mem_41)(enc, ptr);
  __CrestHandleReturn(80115, (long long )tmp___10);
  __CrestStore(80114, (unsigned long )(& tmp___10));
  {
  __CrestLoad(80118, (unsigned long )(& tmp___10), (long long )tmp___10);
  __CrestLoad(80117, (unsigned long )0, (long long )0);
  __CrestApply2(80116, 13, (long long )(tmp___10 != 0));
# 1112 "xmltok_impl.c"
  if (tmp___10 != 0) {
    __CrestBranch(80119, 51438, 1);
# 1112 "xmltok_impl.c"
    ptr += 4;
    __CrestLoad(80121, (unsigned long )0, (long long )19);
    __CrestStore(80122, (unsigned long )(& tok));
# 1112 "xmltok_impl.c"
    tok = 19;
# 1112 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(80120, 51440, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80123, (unsigned long )0, (long long )0);
  __CrestStore(80124, (unsigned long )(& __retres56));
# 1112 "xmltok_impl.c"
  __retres56 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_24___0:
  case_22___0:
  __CrestLoad(80125, (unsigned long )0, (long long )18);
  __CrestStore(80126, (unsigned long )(& tok));
# 1116 "xmltok_impl.c"
  tok = 18;
# 1117 "xmltok_impl.c"
  ptr ++;
# 1118 "xmltok_impl.c"
  goto switch_break;
  case_23:
  case_27:
  case_26:
  case_25:
  __CrestLoad(80127, (unsigned long )0, (long long )19);
  __CrestStore(80128, (unsigned long )(& tok));
# 1125 "xmltok_impl.c"
  tok = 19;
# 1126 "xmltok_impl.c"
  ptr ++;
# 1127 "xmltok_impl.c"
  goto switch_break;
  case_29___0: ;
  switch_default___0:
# 1141 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80129, (unsigned long )0, (long long )0);
  __CrestStore(80130, (unsigned long )(& __retres56));
# 1142 "xmltok_impl.c"
  __retres56 = 0;
# 1142 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  }
  {
# 1144 "xmltok_impl.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(80133, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80132, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80131, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1144 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(80134, 51457, 1);

    } else {
      __CrestBranch(80135, 51458, 0);
# 1144 "xmltok_impl.c"
      goto while_break___0;
    }
    }
    {
# 1145 "xmltok_impl.c"
    mem_42 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80138, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80137, (unsigned long )0, (long long )29);
    __CrestApply2(80136, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 29));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(80139, 51463, 1);
# 1146 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(80140, 51464, 0);

    }
    }
    {
    __CrestLoad(80143, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80142, (unsigned long )0, (long long )27);
    __CrestApply2(80141, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 27));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(80144, 51466, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(80145, 51467, 0);

    }
    }
    {
    __CrestLoad(80148, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80147, (unsigned long )0, (long long )26);
    __CrestApply2(80146, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 26));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(80149, 51469, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(80150, 51470, 0);

    }
    }
    {
    __CrestLoad(80153, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80152, (unsigned long )0, (long long )25);
    __CrestApply2(80151, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 25));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(80154, 51472, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(80155, 51473, 0);

    }
    }
    {
    __CrestLoad(80158, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80157, (unsigned long )0, (long long )24);
    __CrestApply2(80156, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 24));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(80159, 51475, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(80160, 51476, 0);

    }
    }
    {
    __CrestLoad(80163, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80162, (unsigned long )0, (long long )22);
    __CrestApply2(80161, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 22));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(80164, 51478, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(80165, 51479, 0);

    }
    }
    {
    __CrestLoad(80168, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80167, (unsigned long )0, (long long )5);
    __CrestApply2(80166, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 5));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(80169, 51481, 1);
# 1146 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(80170, 51482, 0);

    }
    }
    {
    __CrestLoad(80173, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80172, (unsigned long )0, (long long )6);
    __CrestApply2(80171, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 6));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(80174, 51484, 1);
# 1146 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(80175, 51485, 0);

    }
    }
    {
    __CrestLoad(80178, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80177, (unsigned long )0, (long long )7);
    __CrestApply2(80176, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 7));
# 1146 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(80179, 51487, 1);
# 1146 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(80180, 51488, 0);

    }
    }
    {
    __CrestLoad(80183, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80182, (unsigned long )0, (long long )10);
    __CrestApply2(80181, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 10));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(80184, 51490, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80185, 51491, 0);

    }
    }
    {
    __CrestLoad(80188, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80187, (unsigned long )0, (long long )9);
    __CrestApply2(80186, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 9));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(80189, 51493, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80190, 51494, 0);

    }
    }
    {
    __CrestLoad(80193, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80192, (unsigned long )0, (long long )21);
    __CrestApply2(80191, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 21));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(80194, 51496, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80195, 51497, 0);

    }
    }
    {
    __CrestLoad(80198, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80197, (unsigned long )0, (long long )30);
    __CrestApply2(80196, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 30));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(80199, 51499, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80200, 51500, 0);

    }
    }
    {
    __CrestLoad(80203, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80202, (unsigned long )0, (long long )20);
    __CrestApply2(80201, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 20));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 20) {
      __CrestBranch(80204, 51502, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80205, 51503, 0);

    }
    }
    {
    __CrestLoad(80208, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80207, (unsigned long )0, (long long )36);
    __CrestApply2(80206, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 36));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 36) {
      __CrestBranch(80209, 51505, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80210, 51506, 0);

    }
    }
    {
    __CrestLoad(80213, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80212, (unsigned long )0, (long long )35);
    __CrestApply2(80211, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 35));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 35) {
      __CrestBranch(80214, 51508, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80215, 51509, 0);

    }
    }
    {
    __CrestLoad(80218, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80217, (unsigned long )0, (long long )32);
    __CrestApply2(80216, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 32));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 32) {
      __CrestBranch(80219, 51511, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80220, 51512, 0);

    }
    }
    {
    __CrestLoad(80223, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80222, (unsigned long )0, (long long )11);
    __CrestApply2(80221, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 11));
# 1149 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(80224, 51514, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(80225, 51515, 0);

    }
    }
    {
    __CrestLoad(80228, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80227, (unsigned long )0, (long long )23);
    __CrestApply2(80226, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 23));
# 1153 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(80229, 51517, 1);
# 1153 "xmltok_impl.c"
      goto case_23___0;
    } else {
      __CrestBranch(80230, 51518, 0);

    }
    }
    {
    __CrestLoad(80233, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80232, (unsigned long )0, (long long )34);
    __CrestApply2(80231, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 34));
# 1173 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 34) {
      __CrestBranch(80234, 51520, 1);
# 1173 "xmltok_impl.c"
      goto case_34___0;
    } else {
      __CrestBranch(80235, 51521, 0);

    }
    }
    {
    __CrestLoad(80238, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80237, (unsigned long )0, (long long )33);
    __CrestApply2(80236, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 33));
# 1180 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 33) {
      __CrestBranch(80239, 51523, 1);
# 1180 "xmltok_impl.c"
      goto case_33___0;
    } else {
      __CrestBranch(80240, 51524, 0);

    }
    }
    {
    __CrestLoad(80243, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestLoad(80242, (unsigned long )0, (long long )15);
    __CrestApply2(80241, 12, (long long )((int )mem_42->type[(unsigned char )*ptr] == 15));
# 1187 "xmltok_impl.c"
    if ((int )mem_42->type[(unsigned char )*ptr] == 15) {
      __CrestBranch(80244, 51526, 1);
# 1187 "xmltok_impl.c"
      goto case_15___1;
    } else {
      __CrestBranch(80245, 51527, 0);

    }
    }
# 1194 "xmltok_impl.c"
    goto switch_default___2;
    case_29___1:
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80246, (unsigned long )0, (long long )0);
    __CrestStore(80247, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
    __retres56 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___1:
    case_22___1:
# 1146 "xmltok_impl.c"
    ptr ++;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_5___1:
    {
    __CrestLoad(80252, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80251, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80250, 18, (long long )(end - ptr));
    __CrestLoad(80249, (unsigned long )0, (long long )2L);
    __CrestApply2(80248, 16, (long long )(end - ptr < 2L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(80253, 51535, 1);
      __CrestLoad(80255, (unsigned long )0, (long long )-2);
      __CrestStore(80256, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80254, 51537, 0);

    }
    }
# 1146 "xmltok_impl.c"
    mem_43 = (struct normal_encoding const *)enc;
# 1146 "xmltok_impl.c"
    mem_44 = mem_43->isName2;
# 1146 "xmltok_impl.c"
    tmp___11 = (*mem_44)(enc, ptr);
    __CrestHandleReturn(80258, (long long )tmp___11);
    __CrestStore(80257, (unsigned long )(& tmp___11));
    {
    __CrestLoad(80261, (unsigned long )(& tmp___11), (long long )tmp___11);
    __CrestLoad(80260, (unsigned long )0, (long long )0);
    __CrestApply2(80259, 13, (long long )(tmp___11 != 0));
# 1146 "xmltok_impl.c"
    if (tmp___11 != 0) {
      __CrestBranch(80262, 51540, 1);

    } else {
      __CrestBranch(80263, 51541, 0);
# 1146 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80264, (unsigned long )0, (long long )0);
      __CrestStore(80265, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = 0;
# 1146 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1146 "xmltok_impl.c"
    ptr += 2;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_6___1:
    {
    __CrestLoad(80270, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80269, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80268, 18, (long long )(end - ptr));
    __CrestLoad(80267, (unsigned long )0, (long long )3L);
    __CrestApply2(80266, 16, (long long )(end - ptr < 3L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(80271, 51547, 1);
      __CrestLoad(80273, (unsigned long )0, (long long )-2);
      __CrestStore(80274, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80272, 51549, 0);

    }
    }
# 1146 "xmltok_impl.c"
    mem_45 = (struct normal_encoding const *)enc;
# 1146 "xmltok_impl.c"
    mem_46 = mem_45->isName3;
# 1146 "xmltok_impl.c"
    tmp___12 = (*mem_46)(enc, ptr);
    __CrestHandleReturn(80276, (long long )tmp___12);
    __CrestStore(80275, (unsigned long )(& tmp___12));
    {
    __CrestLoad(80279, (unsigned long )(& tmp___12), (long long )tmp___12);
    __CrestLoad(80278, (unsigned long )0, (long long )0);
    __CrestApply2(80277, 13, (long long )(tmp___12 != 0));
# 1146 "xmltok_impl.c"
    if (tmp___12 != 0) {
      __CrestBranch(80280, 51552, 1);

    } else {
      __CrestBranch(80281, 51553, 0);
# 1146 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80282, (unsigned long )0, (long long )0);
      __CrestStore(80283, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = 0;
# 1146 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1146 "xmltok_impl.c"
    ptr += 3;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_7___1:
    {
    __CrestLoad(80288, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80287, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80286, 18, (long long )(end - ptr));
    __CrestLoad(80285, (unsigned long )0, (long long )4L);
    __CrestApply2(80284, 16, (long long )(end - ptr < 4L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(80289, 51559, 1);
      __CrestLoad(80291, (unsigned long )0, (long long )-2);
      __CrestStore(80292, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80290, 51561, 0);

    }
    }
# 1146 "xmltok_impl.c"
    mem_47 = (struct normal_encoding const *)enc;
# 1146 "xmltok_impl.c"
    mem_48 = mem_47->isName4;
# 1146 "xmltok_impl.c"
    tmp___13 = (*mem_48)(enc, ptr);
    __CrestHandleReturn(80294, (long long )tmp___13);
    __CrestStore(80293, (unsigned long )(& tmp___13));
    {
    __CrestLoad(80297, (unsigned long )(& tmp___13), (long long )tmp___13);
    __CrestLoad(80296, (unsigned long )0, (long long )0);
    __CrestApply2(80295, 13, (long long )(tmp___13 != 0));
# 1146 "xmltok_impl.c"
    if (tmp___13 != 0) {
      __CrestBranch(80298, 51564, 1);

    } else {
      __CrestBranch(80299, 51565, 0);
# 1146 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80300, (unsigned long )0, (long long )0);
      __CrestStore(80301, (unsigned long )(& __retres56));
# 1146 "xmltok_impl.c"
      __retres56 = 0;
# 1146 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1146 "xmltok_impl.c"
    ptr += 4;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_10___2:
    case_9___2:
    case_21___2:
    case_30___0:
    case_20___0:
    case_36___1:
    case_35___1:
    case_32___1:
    case_11___1:
# 1150 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80302, (unsigned long )(& tok), (long long )tok);
    __CrestStore(80303, (unsigned long )(& __retres56));
# 1151 "xmltok_impl.c"
    __retres56 = tok;
# 1151 "xmltok_impl.c"
    goto return_label;
    case_23___0:
# 1154 "xmltok_impl.c"
    ptr ++;
    {
    {
    __CrestLoad(80306, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(80305, (unsigned long )0, (long long )18);
    __CrestApply2(80304, 12, (long long )(tok == 18));
# 1156 "xmltok_impl.c"
    if (tok == 18) {
      __CrestBranch(80307, 51576, 1);
# 1156 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(80308, 51577, 0);

    }
    }
    {
    __CrestLoad(80311, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(80310, (unsigned long )0, (long long )41);
    __CrestApply2(80309, 12, (long long )(tok == 41));
# 1167 "xmltok_impl.c"
    if (tok == 41) {
      __CrestBranch(80312, 51579, 1);
# 1167 "xmltok_impl.c"
      goto case_41;
    } else {
      __CrestBranch(80313, 51580, 0);

    }
    }
# 1155 "xmltok_impl.c"
    goto switch_break___4;
    case_18:
    {
    __CrestLoad(80316, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80315, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80314, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1157 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(80317, 51583, 1);
      __CrestLoad(80319, (unsigned long )0, (long long )-1);
      __CrestStore(80320, (unsigned long )(& __retres56));
# 1158 "xmltok_impl.c"
      __retres56 = -1;
# 1158 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80318, 51585, 0);

    }
    }
    __CrestLoad(80321, (unsigned long )0, (long long )41);
    __CrestStore(80322, (unsigned long )(& tok));
# 1159 "xmltok_impl.c"
    tok = 41;
    {
# 1160 "xmltok_impl.c"
    mem_49 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80325, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80324, (unsigned long )0, (long long )29);
    __CrestApply2(80323, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 29));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(80326, 51591, 1);
# 1161 "xmltok_impl.c"
      goto case_29___2;
    } else {
      __CrestBranch(80327, 51592, 0);

    }
    }
    {
    __CrestLoad(80330, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80329, (unsigned long )0, (long long )27);
    __CrestApply2(80328, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 27));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(80331, 51594, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(80332, 51595, 0);

    }
    }
    {
    __CrestLoad(80335, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80334, (unsigned long )0, (long long )26);
    __CrestApply2(80333, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 26));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(80336, 51597, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(80337, 51598, 0);

    }
    }
    {
    __CrestLoad(80340, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80339, (unsigned long )0, (long long )25);
    __CrestApply2(80338, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 25));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(80341, 51600, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(80342, 51601, 0);

    }
    }
    {
    __CrestLoad(80345, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80344, (unsigned long )0, (long long )24);
    __CrestApply2(80343, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 24));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(80346, 51603, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(80347, 51604, 0);

    }
    }
    {
    __CrestLoad(80350, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80349, (unsigned long )0, (long long )22);
    __CrestApply2(80348, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 22));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(80351, 51606, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(80352, 51607, 0);

    }
    }
    {
    __CrestLoad(80355, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80354, (unsigned long )0, (long long )5);
    __CrestApply2(80353, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 5));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(80356, 51609, 1);
# 1161 "xmltok_impl.c"
      goto case_5___2;
    } else {
      __CrestBranch(80357, 51610, 0);

    }
    }
    {
    __CrestLoad(80360, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80359, (unsigned long )0, (long long )6);
    __CrestApply2(80358, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 6));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(80361, 51612, 1);
# 1161 "xmltok_impl.c"
      goto case_6___2;
    } else {
      __CrestBranch(80362, 51613, 0);

    }
    }
    {
    __CrestLoad(80365, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
    __CrestLoad(80364, (unsigned long )0, (long long )7);
    __CrestApply2(80363, 12, (long long )((int )mem_49->type[(unsigned char )*ptr] == 7));
# 1161 "xmltok_impl.c"
    if ((int )mem_49->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(80366, 51615, 1);
# 1161 "xmltok_impl.c"
      goto case_7___2;
    } else {
      __CrestBranch(80367, 51616, 0);

    }
    }
# 1162 "xmltok_impl.c"
    goto switch_default___1;
    case_29___2:
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80368, (unsigned long )0, (long long )0);
    __CrestStore(80369, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
    __retres56 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
    case_27___1:
    case_26___1:
    case_25___1:
    case_24___2:
    case_22___2:
# 1161 "xmltok_impl.c"
    ptr ++;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_5___2:
    {
    __CrestLoad(80374, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80373, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80372, 18, (long long )(end - ptr));
    __CrestLoad(80371, (unsigned long )0, (long long )2L);
    __CrestApply2(80370, 16, (long long )(end - ptr < 2L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(80375, 51624, 1);
      __CrestLoad(80377, (unsigned long )0, (long long )-2);
      __CrestStore(80378, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80376, 51626, 0);

    }
    }
# 1161 "xmltok_impl.c"
    mem_50 = (struct normal_encoding const *)enc;
# 1161 "xmltok_impl.c"
    mem_51 = mem_50->isName2;
# 1161 "xmltok_impl.c"
    tmp___14 = (*mem_51)(enc, ptr);
    __CrestHandleReturn(80380, (long long )tmp___14);
    __CrestStore(80379, (unsigned long )(& tmp___14));
    {
    __CrestLoad(80383, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(80382, (unsigned long )0, (long long )0);
    __CrestApply2(80381, 13, (long long )(tmp___14 != 0));
# 1161 "xmltok_impl.c"
    if (tmp___14 != 0) {
      __CrestBranch(80384, 51629, 1);

    } else {
      __CrestBranch(80385, 51630, 0);
# 1161 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80386, (unsigned long )0, (long long )0);
      __CrestStore(80387, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = 0;
# 1161 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1161 "xmltok_impl.c"
    ptr += 2;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_6___2:
    {
    __CrestLoad(80392, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80391, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80390, 18, (long long )(end - ptr));
    __CrestLoad(80389, (unsigned long )0, (long long )3L);
    __CrestApply2(80388, 16, (long long )(end - ptr < 3L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(80393, 51636, 1);
      __CrestLoad(80395, (unsigned long )0, (long long )-2);
      __CrestStore(80396, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80394, 51638, 0);

    }
    }
# 1161 "xmltok_impl.c"
    mem_52 = (struct normal_encoding const *)enc;
# 1161 "xmltok_impl.c"
    mem_53 = mem_52->isName3;
# 1161 "xmltok_impl.c"
    tmp___15 = (*mem_53)(enc, ptr);
    __CrestHandleReturn(80398, (long long )tmp___15);
    __CrestStore(80397, (unsigned long )(& tmp___15));
    {
    __CrestLoad(80401, (unsigned long )(& tmp___15), (long long )tmp___15);
    __CrestLoad(80400, (unsigned long )0, (long long )0);
    __CrestApply2(80399, 13, (long long )(tmp___15 != 0));
# 1161 "xmltok_impl.c"
    if (tmp___15 != 0) {
      __CrestBranch(80402, 51641, 1);

    } else {
      __CrestBranch(80403, 51642, 0);
# 1161 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80404, (unsigned long )0, (long long )0);
      __CrestStore(80405, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = 0;
# 1161 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1161 "xmltok_impl.c"
    ptr += 3;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_7___2:
    {
    __CrestLoad(80410, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80409, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80408, 18, (long long )(end - ptr));
    __CrestLoad(80407, (unsigned long )0, (long long )4L);
    __CrestApply2(80406, 16, (long long )(end - ptr < 4L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(80411, 51648, 1);
      __CrestLoad(80413, (unsigned long )0, (long long )-2);
      __CrestStore(80414, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80412, 51650, 0);

    }
    }
# 1161 "xmltok_impl.c"
    mem_54 = (struct normal_encoding const *)enc;
# 1161 "xmltok_impl.c"
    mem_55 = mem_54->isName4;
# 1161 "xmltok_impl.c"
    tmp___16 = (*mem_55)(enc, ptr);
    __CrestHandleReturn(80416, (long long )tmp___16);
    __CrestStore(80415, (unsigned long )(& tmp___16));
    {
    __CrestLoad(80419, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(80418, (unsigned long )0, (long long )0);
    __CrestApply2(80417, 13, (long long )(tmp___16 != 0));
# 1161 "xmltok_impl.c"
    if (tmp___16 != 0) {
      __CrestBranch(80420, 51653, 1);

    } else {
      __CrestBranch(80421, 51654, 0);
# 1161 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80422, (unsigned long )0, (long long )0);
      __CrestStore(80423, (unsigned long )(& __retres56));
# 1161 "xmltok_impl.c"
      __retres56 = 0;
# 1161 "xmltok_impl.c"
      goto return_label;
    }
    }
# 1161 "xmltok_impl.c"
    ptr += 4;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    switch_default___1:
    __CrestLoad(80424, (unsigned long )0, (long long )19);
    __CrestStore(80425, (unsigned long )(& tok));
# 1163 "xmltok_impl.c"
    tok = 19;
# 1164 "xmltok_impl.c"
    goto switch_break___5;
    switch_break___5: ;
    }
    }
# 1166 "xmltok_impl.c"
    goto switch_break___4;
    case_41:
    __CrestLoad(80426, (unsigned long )0, (long long )19);
    __CrestStore(80427, (unsigned long )(& tok));
# 1168 "xmltok_impl.c"
    tok = 19;
# 1169 "xmltok_impl.c"
    goto switch_break___4;
    switch_break___4: ;
    }
# 1171 "xmltok_impl.c"
    goto switch_break___3;
    case_34___0:
    {
    __CrestLoad(80430, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(80429, (unsigned long )0, (long long )19);
    __CrestApply2(80428, 12, (long long )(tok == 19));
# 1174 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(80431, 51668, 1);
# 1175 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80433, (unsigned long )0, (long long )0);
      __CrestStore(80434, (unsigned long )(& __retres56));
# 1176 "xmltok_impl.c"
      __retres56 = 0;
# 1176 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80432, 51671, 0);

    }
    }
# 1178 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(80435, (unsigned long )0, (long long )32);
    __CrestStore(80436, (unsigned long )(& __retres56));
# 1179 "xmltok_impl.c"
    __retres56 = 32;
# 1179 "xmltok_impl.c"
    goto return_label;
    case_33___0:
    {
    __CrestLoad(80439, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(80438, (unsigned long )0, (long long )19);
    __CrestApply2(80437, 12, (long long )(tok == 19));
# 1181 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(80440, 51676, 1);
# 1182 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80442, (unsigned long )0, (long long )0);
      __CrestStore(80443, (unsigned long )(& __retres56));
# 1183 "xmltok_impl.c"
      __retres56 = 0;
# 1183 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80441, 51679, 0);

    }
    }
# 1185 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(80444, (unsigned long )0, (long long )31);
    __CrestStore(80445, (unsigned long )(& __retres56));
# 1186 "xmltok_impl.c"
    __retres56 = 31;
# 1186 "xmltok_impl.c"
    goto return_label;
    case_15___1:
    {
    __CrestLoad(80448, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(80447, (unsigned long )0, (long long )19);
    __CrestApply2(80446, 12, (long long )(tok == 19));
# 1188 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(80449, 51684, 1);
# 1189 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80451, (unsigned long )0, (long long )0);
      __CrestStore(80452, (unsigned long )(& __retres56));
# 1190 "xmltok_impl.c"
      __retres56 = 0;
# 1190 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80450, 51687, 0);

    }
    }
# 1192 "xmltok_impl.c"
    *nextTokPtr = ptr + 1;
    __CrestLoad(80453, (unsigned long )0, (long long )30);
    __CrestStore(80454, (unsigned long )(& __retres56));
# 1193 "xmltok_impl.c"
    __retres56 = 30;
# 1193 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 1195 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80455, (unsigned long )0, (long long )0);
    __CrestStore(80456, (unsigned long )(& __retres56));
# 1196 "xmltok_impl.c"
    __retres56 = 0;
# 1196 "xmltok_impl.c"
    goto return_label;
    switch_break___3: ;
    }
    }
  }
  while_break___0: ;
  }
  __CrestLoad(80458, (unsigned long )(& tok), (long long )tok);
  __CrestApply1(80457, 19, (long long )(- tok));
  __CrestStore(80459, (unsigned long )(& __retres56));
# 1199 "xmltok_impl.c"
  __retres56 = - tok;
  return_label:
  {
  __CrestLoad(80460, (unsigned long )(& __retres56), (long long )__retres56);
  __CrestReturn(80461);
# 971 "xmltok_impl.c"
  return (__retres56);
  }
}
}
# 1202 "xmltok_impl.c"
static int normal_attributeValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                                    char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  struct normal_encoding *mem_7 ;
  struct normal_encoding *mem_8 ;
  int __retres9 ;

  {
  __CrestCall(80462, 850);

  {
  __CrestLoad(80465, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(80464, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(80463, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1207 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(80466, 51699, 1);
    __CrestLoad(80468, (unsigned long )0, (long long )-4);
    __CrestStore(80469, (unsigned long )(& __retres9));
# 1208 "xmltok_impl.c"
    __retres9 = -4;
# 1208 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(80467, 51701, 0);

  }
  }
# 1209 "xmltok_impl.c"
  start = ptr;
  {
# 1210 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(80472, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80471, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80470, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1210 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(80473, 51707, 1);

    } else {
      __CrestBranch(80474, 51708, 0);
# 1210 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1211 "xmltok_impl.c"
    mem_7 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80477, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80476, (unsigned long )0, (long long )5);
    __CrestApply2(80475, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 5));
# 1214 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(80478, 51713, 1);
# 1214 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(80479, 51714, 0);

    }
    }
    {
    __CrestLoad(80482, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80481, (unsigned long )0, (long long )6);
    __CrestApply2(80480, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 6));
# 1214 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(80483, 51716, 1);
# 1214 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(80484, 51717, 0);

    }
    }
    {
    __CrestLoad(80487, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80486, (unsigned long )0, (long long )7);
    __CrestApply2(80485, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 7));
# 1214 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(80488, 51719, 1);
# 1214 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(80489, 51720, 0);

    }
    }
    {
    __CrestLoad(80492, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80491, (unsigned long )0, (long long )3);
    __CrestApply2(80490, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 3));
# 1216 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 3) {
      __CrestBranch(80493, 51722, 1);
# 1216 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(80494, 51723, 0);

    }
    }
    {
    __CrestLoad(80497, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80496, (unsigned long )0, (long long )2);
    __CrestApply2(80495, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 2));
# 1221 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 2) {
      __CrestBranch(80498, 51725, 1);
# 1221 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(80499, 51726, 0);

    }
    }
    {
    __CrestLoad(80502, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80501, (unsigned long )0, (long long )10);
    __CrestApply2(80500, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 10));
# 1225 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(80503, 51728, 1);
# 1225 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(80504, 51729, 0);

    }
    }
    {
    __CrestLoad(80507, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80506, (unsigned long )0, (long long )9);
    __CrestApply2(80505, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 9));
# 1232 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(80508, 51731, 1);
# 1232 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(80509, 51732, 0);

    }
    }
    {
    __CrestLoad(80512, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
    __CrestLoad(80511, (unsigned long )0, (long long )21);
    __CrestApply2(80510, 12, (long long )((int )mem_7->type[(unsigned char )*ptr] == 21));
# 1244 "xmltok_impl.c"
    if ((int )mem_7->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(80513, 51734, 1);
# 1244 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(80514, 51735, 0);

    }
    }
# 1251 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1214 "xmltok_impl.c"
    ptr += 2;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1214 "xmltok_impl.c"
    ptr += 3;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1214 "xmltok_impl.c"
    ptr += 4;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(80517, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80516, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80515, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1217 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80518, 51744, 1);
# 1218 "xmltok_impl.c"
      tmp = normal_scanRef(enc, ptr + 1, end, nextTokPtr);
      __CrestHandleReturn(80521, (long long )tmp);
      __CrestStore(80520, (unsigned long )(& tmp));
      __CrestLoad(80522, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(80523, (unsigned long )(& __retres9));
# 1218 "xmltok_impl.c"
      __retres9 = tmp;
# 1218 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80519, 51747, 0);

    }
    }
# 1219 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80524, (unsigned long )0, (long long )6);
    __CrestStore(80525, (unsigned long )(& __retres9));
# 1220 "xmltok_impl.c"
    __retres9 = 6;
# 1220 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1223 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80526, (unsigned long )0, (long long )0);
    __CrestStore(80527, (unsigned long )(& __retres9));
# 1224 "xmltok_impl.c"
    __retres9 = 0;
# 1224 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(80530, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80529, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80528, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1226 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80531, 51755, 1);
# 1227 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(80533, (unsigned long )0, (long long )7);
      __CrestStore(80534, (unsigned long )(& __retres9));
# 1228 "xmltok_impl.c"
      __retres9 = 7;
# 1228 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80532, 51758, 0);

    }
    }
# 1230 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80535, (unsigned long )0, (long long )6);
    __CrestStore(80536, (unsigned long )(& __retres9));
# 1231 "xmltok_impl.c"
    __retres9 = 6;
# 1231 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(80539, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80538, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80537, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1233 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80540, 51763, 1);
# 1234 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(80544, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(80543, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(80542, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1235 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(80545, 51765, 1);
        __CrestLoad(80547, (unsigned long )0, (long long )-3);
        __CrestStore(80548, (unsigned long )(& __retres9));
# 1236 "xmltok_impl.c"
        __retres9 = -3;
# 1236 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(80546, 51767, 0);

      }
      }
      {
# 1237 "xmltok_impl.c"
      mem_8 = (struct normal_encoding *)enc;
      {
      __CrestLoad(80551, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
      __CrestLoad(80550, (unsigned long )0, (long long )10);
      __CrestApply2(80549, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 10));
# 1237 "xmltok_impl.c"
      if ((int )mem_8->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(80552, 51771, 1);
# 1238 "xmltok_impl.c"
        ptr ++;
      } else {
        __CrestBranch(80553, 51772, 0);

      }
      }
      }
# 1239 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80554, (unsigned long )0, (long long )7);
      __CrestStore(80555, (unsigned long )(& __retres9));
# 1240 "xmltok_impl.c"
      __retres9 = 7;
# 1240 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80541, 51776, 0);

    }
    }
# 1242 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80556, (unsigned long )0, (long long )6);
    __CrestStore(80557, (unsigned long )(& __retres9));
# 1243 "xmltok_impl.c"
    __retres9 = 6;
# 1243 "xmltok_impl.c"
    goto return_label;
    case_21:
    {
    __CrestLoad(80560, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80559, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80558, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1245 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80561, 51781, 1);
# 1246 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(80563, (unsigned long )0, (long long )39);
      __CrestStore(80564, (unsigned long )(& __retres9));
# 1247 "xmltok_impl.c"
      __retres9 = 39;
# 1247 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80562, 51784, 0);

    }
    }
# 1249 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80565, (unsigned long )0, (long long )6);
    __CrestStore(80566, (unsigned long )(& __retres9));
# 1250 "xmltok_impl.c"
    __retres9 = 6;
# 1250 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1252 "xmltok_impl.c"
    ptr ++;
# 1253 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
# 1256 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80567, (unsigned long )0, (long long )6);
  __CrestStore(80568, (unsigned long )(& __retres9));
# 1257 "xmltok_impl.c"
  __retres9 = 6;
  return_label:
  {
  __CrestLoad(80569, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(80570);
# 1202 "xmltok_impl.c"
  return (__retres9);
  }
}
}
# 1260 "xmltok_impl.c"
static int normal_entityValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  int tok ;
  int tmp___0 ;
  int tmp___1 ;
  struct normal_encoding *mem_10 ;
  struct normal_encoding *mem_11 ;
  int __retres12 ;

  {
  __CrestCall(80571, 851);

  {
  __CrestLoad(80574, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(80573, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(80572, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1265 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(80575, 51796, 1);
    __CrestLoad(80577, (unsigned long )0, (long long )-4);
    __CrestStore(80578, (unsigned long )(& __retres12));
# 1266 "xmltok_impl.c"
    __retres12 = -4;
# 1266 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(80576, 51798, 0);

  }
  }
# 1267 "xmltok_impl.c"
  start = ptr;
  {
# 1268 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(80581, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80580, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80579, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1268 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(80582, 51804, 1);

    } else {
      __CrestBranch(80583, 51805, 0);
# 1268 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1269 "xmltok_impl.c"
    mem_10 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80586, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80585, (unsigned long )0, (long long )5);
    __CrestApply2(80584, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 5));
# 1272 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(80587, 51810, 1);
# 1272 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(80588, 51811, 0);

    }
    }
    {
    __CrestLoad(80591, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80590, (unsigned long )0, (long long )6);
    __CrestApply2(80589, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 6));
# 1272 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(80592, 51813, 1);
# 1272 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(80593, 51814, 0);

    }
    }
    {
    __CrestLoad(80596, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80595, (unsigned long )0, (long long )7);
    __CrestApply2(80594, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 7));
# 1272 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(80597, 51816, 1);
# 1272 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(80598, 51817, 0);

    }
    }
    {
    __CrestLoad(80601, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80600, (unsigned long )0, (long long )3);
    __CrestApply2(80599, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 3));
# 1274 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 3) {
      __CrestBranch(80602, 51819, 1);
# 1274 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(80603, 51820, 0);

    }
    }
    {
    __CrestLoad(80606, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80605, (unsigned long )0, (long long )30);
    __CrestApply2(80604, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 30));
# 1279 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(80607, 51822, 1);
# 1279 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(80608, 51823, 0);

    }
    }
    {
    __CrestLoad(80611, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80610, (unsigned long )0, (long long )10);
    __CrestApply2(80609, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 10));
# 1287 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(80612, 51825, 1);
# 1287 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(80613, 51826, 0);

    }
    }
    {
    __CrestLoad(80616, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80615, (unsigned long )0, (long long )9);
    __CrestApply2(80614, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 9));
# 1294 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(80617, 51828, 1);
# 1294 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(80618, 51829, 0);

    }
    }
# 1306 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1272 "xmltok_impl.c"
    ptr += 2;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1272 "xmltok_impl.c"
    ptr += 3;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1272 "xmltok_impl.c"
    ptr += 4;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(80621, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80620, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80619, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1275 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80622, 51838, 1);
# 1276 "xmltok_impl.c"
      tmp = normal_scanRef(enc, ptr + 1, end, nextTokPtr);
      __CrestHandleReturn(80625, (long long )tmp);
      __CrestStore(80624, (unsigned long )(& tmp));
      __CrestLoad(80626, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(80627, (unsigned long )(& __retres12));
# 1276 "xmltok_impl.c"
      __retres12 = tmp;
# 1276 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80623, 51841, 0);

    }
    }
# 1277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80628, (unsigned long )0, (long long )6);
    __CrestStore(80629, (unsigned long )(& __retres12));
# 1278 "xmltok_impl.c"
    __retres12 = 6;
# 1278 "xmltok_impl.c"
    goto return_label;
    case_30:
    {
    __CrestLoad(80632, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80631, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80630, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1280 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80633, 51846, 1);
# 1281 "xmltok_impl.c"
      tmp___0 = normal_scanPercent(enc, ptr + 1, end, nextTokPtr);
      __CrestHandleReturn(80636, (long long )tmp___0);
      __CrestStore(80635, (unsigned long )(& tmp___0));
      __CrestLoad(80637, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(80638, (unsigned long )(& tok));
# 1281 "xmltok_impl.c"
      tok = tmp___0;
      {
      __CrestLoad(80641, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(80640, (unsigned long )0, (long long )22);
      __CrestApply2(80639, 12, (long long )(tok == 22));
# 1283 "xmltok_impl.c"
      if (tok == 22) {
        __CrestBranch(80642, 51848, 1);
        __CrestLoad(80644, (unsigned long )0, (long long )0);
        __CrestStore(80645, (unsigned long )(& tmp___1));
# 1283 "xmltok_impl.c"
        tmp___1 = 0;
      } else {
        __CrestBranch(80643, 51849, 0);
        __CrestLoad(80646, (unsigned long )(& tok), (long long )tok);
        __CrestStore(80647, (unsigned long )(& tmp___1));
# 1283 "xmltok_impl.c"
        tmp___1 = tok;
      }
      }
      __CrestLoad(80648, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(80649, (unsigned long )(& __retres12));
# 1283 "xmltok_impl.c"
      __retres12 = tmp___1;
# 1283 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80634, 51852, 0);

    }
    }
# 1285 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80650, (unsigned long )0, (long long )6);
    __CrestStore(80651, (unsigned long )(& __retres12));
# 1286 "xmltok_impl.c"
    __retres12 = 6;
# 1286 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(80654, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80653, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80652, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1288 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80655, 51857, 1);
# 1289 "xmltok_impl.c"
      *nextTokPtr = ptr + 1;
      __CrestLoad(80657, (unsigned long )0, (long long )7);
      __CrestStore(80658, (unsigned long )(& __retres12));
# 1290 "xmltok_impl.c"
      __retres12 = 7;
# 1290 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80656, 51860, 0);

    }
    }
# 1292 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80659, (unsigned long )0, (long long )6);
    __CrestStore(80660, (unsigned long )(& __retres12));
# 1293 "xmltok_impl.c"
    __retres12 = 6;
# 1293 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(80663, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80662, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(80661, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1295 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(80664, 51865, 1);
# 1296 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(80668, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(80667, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(80666, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1297 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(80669, 51867, 1);
        __CrestLoad(80671, (unsigned long )0, (long long )-3);
        __CrestStore(80672, (unsigned long )(& __retres12));
# 1298 "xmltok_impl.c"
        __retres12 = -3;
# 1298 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(80670, 51869, 0);

      }
      }
      {
# 1299 "xmltok_impl.c"
      mem_11 = (struct normal_encoding *)enc;
      {
      __CrestLoad(80675, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
      __CrestLoad(80674, (unsigned long )0, (long long )10);
      __CrestApply2(80673, 12, (long long )((int )mem_11->type[(unsigned char )*ptr] == 10));
# 1299 "xmltok_impl.c"
      if ((int )mem_11->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(80676, 51873, 1);
# 1300 "xmltok_impl.c"
        ptr ++;
      } else {
        __CrestBranch(80677, 51874, 0);

      }
      }
      }
# 1301 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80678, (unsigned long )0, (long long )7);
      __CrestStore(80679, (unsigned long )(& __retres12));
# 1302 "xmltok_impl.c"
      __retres12 = 7;
# 1302 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80665, 51878, 0);

    }
    }
# 1304 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80680, (unsigned long )0, (long long )6);
    __CrestStore(80681, (unsigned long )(& __retres12));
# 1305 "xmltok_impl.c"
    __retres12 = 6;
# 1305 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1307 "xmltok_impl.c"
    ptr ++;
# 1308 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
# 1311 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(80682, (unsigned long )0, (long long )6);
  __CrestStore(80683, (unsigned long )(& __retres12));
# 1312 "xmltok_impl.c"
  __retres12 = 6;
  return_label:
  {
  __CrestLoad(80684, (unsigned long )(& __retres12), (long long )__retres12);
  __CrestReturn(80685);
# 1260 "xmltok_impl.c"
  return (__retres12);
  }
}
}
# 1317 "xmltok_impl.c"
static int normal_ignoreSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                   char const **nextTokPtr )
{
  int level ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct normal_encoding *mem_10 ;
  struct normal_encoding const *mem_11 ;
  int (*mem_12)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_13 ;
  int (*mem_14)(ENCODING const * , char const * ) ;
  struct normal_encoding const *mem_15 ;
  int (*mem_16)(ENCODING const * , char const * ) ;
  int __retres17 ;

  {
  __CrestCall(80686, 852);

  __CrestLoad(80687, (unsigned long )0, (long long )0);
  __CrestStore(80688, (unsigned long )(& level));
# 1321 "xmltok_impl.c"
  level = 0;
  {
# 1329 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(80691, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80690, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80689, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1329 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(80692, 51894, 1);

    } else {
      __CrestBranch(80693, 51895, 0);
# 1329 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1330 "xmltok_impl.c"
    mem_10 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80696, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80695, (unsigned long )0, (long long )5);
    __CrestApply2(80694, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 5));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(80697, 51900, 1);
# 1331 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(80698, 51901, 0);

    }
    }
    {
    __CrestLoad(80701, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80700, (unsigned long )0, (long long )6);
    __CrestApply2(80699, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 6));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(80702, 51903, 1);
# 1331 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(80703, 51904, 0);

    }
    }
    {
    __CrestLoad(80706, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80705, (unsigned long )0, (long long )7);
    __CrestApply2(80704, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 7));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(80707, 51906, 1);
# 1331 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(80708, 51907, 0);

    }
    }
    {
    __CrestLoad(80711, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80710, (unsigned long )0, (long long )8);
    __CrestApply2(80709, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 8));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 8) {
      __CrestBranch(80712, 51909, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(80713, 51910, 0);

    }
    }
    {
    __CrestLoad(80716, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80715, (unsigned long )0, (long long )1);
    __CrestApply2(80714, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 1));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 1) {
      __CrestBranch(80717, 51912, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(80718, 51913, 0);

    }
    }
    {
    __CrestLoad(80721, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80720, (unsigned long )0, (long long )0);
    __CrestApply2(80719, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 0));
# 1331 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 0) {
      __CrestBranch(80722, 51915, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(80723, 51916, 0);

    }
    }
    {
    __CrestLoad(80726, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80725, (unsigned long )0, (long long )2);
    __CrestApply2(80724, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 2));
# 1332 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 2) {
      __CrestBranch(80727, 51918, 1);
# 1332 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(80728, 51919, 0);

    }
    }
    {
    __CrestLoad(80731, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestLoad(80730, (unsigned long )0, (long long )4);
    __CrestApply2(80729, 12, (long long )((int )mem_10->type[(unsigned char )*ptr] == 4));
# 1344 "xmltok_impl.c"
    if ((int )mem_10->type[(unsigned char )*ptr] == 4) {
      __CrestBranch(80732, 51921, 1);
# 1344 "xmltok_impl.c"
      goto case_4;
    } else {
      __CrestBranch(80733, 51922, 0);

    }
    }
# 1360 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(80738, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80737, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80736, 18, (long long )(end - ptr));
    __CrestLoad(80735, (unsigned long )0, (long long )2L);
    __CrestApply2(80734, 16, (long long )(end - ptr < 2L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(80739, 51925, 1);
      __CrestLoad(80741, (unsigned long )0, (long long )-2);
      __CrestStore(80742, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80740, 51927, 0);

    }
    }
# 1331 "xmltok_impl.c"
    mem_11 = (struct normal_encoding const *)enc;
# 1331 "xmltok_impl.c"
    mem_12 = mem_11->isInvalid2;
# 1331 "xmltok_impl.c"
    tmp = (*mem_12)(enc, ptr);
    __CrestHandleReturn(80744, (long long )tmp);
    __CrestStore(80743, (unsigned long )(& tmp));
    {
    __CrestLoad(80747, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(80746, (unsigned long )0, (long long )0);
    __CrestApply2(80745, 13, (long long )(tmp != 0));
# 1331 "xmltok_impl.c"
    if (tmp != 0) {
      __CrestBranch(80748, 51930, 1);
# 1331 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80750, (unsigned long )0, (long long )0);
      __CrestStore(80751, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = 0;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80749, 51933, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 2;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(80756, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80755, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80754, 18, (long long )(end - ptr));
    __CrestLoad(80753, (unsigned long )0, (long long )3L);
    __CrestApply2(80752, 16, (long long )(end - ptr < 3L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(80757, 51937, 1);
      __CrestLoad(80759, (unsigned long )0, (long long )-2);
      __CrestStore(80760, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80758, 51939, 0);

    }
    }
# 1331 "xmltok_impl.c"
    mem_13 = (struct normal_encoding const *)enc;
# 1331 "xmltok_impl.c"
    mem_14 = mem_13->isInvalid3;
# 1331 "xmltok_impl.c"
    tmp___0 = (*mem_14)(enc, ptr);
    __CrestHandleReturn(80762, (long long )tmp___0);
    __CrestStore(80761, (unsigned long )(& tmp___0));
    {
    __CrestLoad(80765, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(80764, (unsigned long )0, (long long )0);
    __CrestApply2(80763, 13, (long long )(tmp___0 != 0));
# 1331 "xmltok_impl.c"
    if (tmp___0 != 0) {
      __CrestBranch(80766, 51942, 1);
# 1331 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80768, (unsigned long )0, (long long )0);
      __CrestStore(80769, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = 0;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80767, 51945, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 3;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(80774, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(80773, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(80772, 18, (long long )(end - ptr));
    __CrestLoad(80771, (unsigned long )0, (long long )4L);
    __CrestApply2(80770, 16, (long long )(end - ptr < 4L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(80775, 51949, 1);
      __CrestLoad(80777, (unsigned long )0, (long long )-2);
      __CrestStore(80778, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80776, 51951, 0);

    }
    }
# 1331 "xmltok_impl.c"
    mem_15 = (struct normal_encoding const *)enc;
# 1331 "xmltok_impl.c"
    mem_16 = mem_15->isInvalid4;
# 1331 "xmltok_impl.c"
    tmp___1 = (*mem_16)(enc, ptr);
    __CrestHandleReturn(80780, (long long )tmp___1);
    __CrestStore(80779, (unsigned long )(& tmp___1));
    {
    __CrestLoad(80783, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(80782, (unsigned long )0, (long long )0);
    __CrestApply2(80781, 13, (long long )(tmp___1 != 0));
# 1331 "xmltok_impl.c"
    if (tmp___1 != 0) {
      __CrestBranch(80784, 51954, 1);
# 1331 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(80786, (unsigned long )0, (long long )0);
      __CrestStore(80787, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
      __retres17 = 0;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80785, 51957, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 4;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 1331 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(80788, (unsigned long )0, (long long )0);
    __CrestStore(80789, (unsigned long )(& __retres17));
# 1331 "xmltok_impl.c"
    __retres17 = 0;
# 1331 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1333 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(80792, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80791, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80790, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1333 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(80793, 51965, 1);
      __CrestLoad(80795, (unsigned long )0, (long long )-1);
      __CrestStore(80796, (unsigned long )(& __retres17));
# 1334 "xmltok_impl.c"
      __retres17 = -1;
# 1334 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80794, 51967, 0);

    }
    }
    {
    __CrestLoad(80799, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80798, (unsigned long )0, (long long )33);
    __CrestApply2(80797, 12, (long long )((int const )*ptr == 33));
# 1335 "xmltok_impl.c"
    if ((int const )*ptr == 33) {
      __CrestBranch(80800, 51969, 1);
# 1336 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(80804, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(80803, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(80802, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1336 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(80805, 51971, 1);
        __CrestLoad(80807, (unsigned long )0, (long long )-1);
        __CrestStore(80808, (unsigned long )(& __retres17));
# 1337 "xmltok_impl.c"
        __retres17 = -1;
# 1337 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(80806, 51973, 0);

      }
      }
      {
      __CrestLoad(80811, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(80810, (unsigned long )0, (long long )91);
      __CrestApply2(80809, 12, (long long )((int const )*ptr == 91));
# 1338 "xmltok_impl.c"
      if ((int const )*ptr == 91) {
        __CrestBranch(80812, 51975, 1);
        __CrestLoad(80816, (unsigned long )(& level), (long long )level);
        __CrestLoad(80815, (unsigned long )0, (long long )1);
        __CrestApply2(80814, 0, (long long )(level + 1));
        __CrestStore(80817, (unsigned long )(& level));
# 1339 "xmltok_impl.c"
        level ++;
# 1340 "xmltok_impl.c"
        ptr ++;
      } else {
        __CrestBranch(80813, 51976, 0);

      }
      }
    } else {
      __CrestBranch(80801, 51977, 0);

    }
    }
# 1343 "xmltok_impl.c"
    goto switch_break;
    case_4:
# 1345 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(80820, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80819, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80818, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1345 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(80821, 51981, 1);
      __CrestLoad(80823, (unsigned long )0, (long long )-1);
      __CrestStore(80824, (unsigned long )(& __retres17));
# 1346 "xmltok_impl.c"
      __retres17 = -1;
# 1346 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80822, 51983, 0);

    }
    }
    {
    __CrestLoad(80827, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80826, (unsigned long )0, (long long )93);
    __CrestApply2(80825, 12, (long long )((int const )*ptr == 93));
# 1347 "xmltok_impl.c"
    if ((int const )*ptr == 93) {
      __CrestBranch(80828, 51985, 1);
# 1348 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(80832, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(80831, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(80830, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1348 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(80833, 51987, 1);
        __CrestLoad(80835, (unsigned long )0, (long long )-1);
        __CrestStore(80836, (unsigned long )(& __retres17));
# 1349 "xmltok_impl.c"
        __retres17 = -1;
# 1349 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(80834, 51989, 0);

      }
      }
      {
      __CrestLoad(80839, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(80838, (unsigned long )0, (long long )62);
      __CrestApply2(80837, 12, (long long )((int const )*ptr == 62));
# 1350 "xmltok_impl.c"
      if ((int const )*ptr == 62) {
        __CrestBranch(80840, 51991, 1);
# 1351 "xmltok_impl.c"
        ptr ++;
        {
        __CrestLoad(80844, (unsigned long )(& level), (long long )level);
        __CrestLoad(80843, (unsigned long )0, (long long )0);
        __CrestApply2(80842, 12, (long long )(level == 0));
# 1352 "xmltok_impl.c"
        if (level == 0) {
          __CrestBranch(80845, 51993, 1);
# 1353 "xmltok_impl.c"
          *nextTokPtr = ptr;
          __CrestLoad(80847, (unsigned long )0, (long long )42);
          __CrestStore(80848, (unsigned long )(& __retres17));
# 1354 "xmltok_impl.c"
          __retres17 = 42;
# 1354 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(80846, 51996, 0);

        }
        }
        __CrestLoad(80851, (unsigned long )(& level), (long long )level);
        __CrestLoad(80850, (unsigned long )0, (long long )1);
        __CrestApply2(80849, 1, (long long )(level - 1));
        __CrestStore(80852, (unsigned long )(& level));
# 1356 "xmltok_impl.c"
        level --;
      } else {
        __CrestBranch(80841, 51998, 0);

      }
      }
    } else {
      __CrestBranch(80829, 51999, 0);

    }
    }
# 1359 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1361 "xmltok_impl.c"
    ptr ++;
# 1362 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(80853, (unsigned long )0, (long long )-1);
  __CrestStore(80854, (unsigned long )(& __retres17));
# 1365 "xmltok_impl.c"
  __retres17 = -1;
  return_label:
  {
  __CrestLoad(80855, (unsigned long )(& __retres17), (long long )__retres17);
  __CrestReturn(80856);
# 1317 "xmltok_impl.c"
  return (__retres17);
  }
}
}
# 1370 "xmltok_impl.c"
static int normal_isPublicId(ENCODING const *enc , char const *ptr , char const *end ,
                             char const **badPtr )
{
  struct normal_encoding *mem_5 ;
  int __retres6 ;

  {
  __CrestCall(80857, 853);
# 1374 "xmltok_impl.c"
  ptr ++;
# 1375 "xmltok_impl.c"
  end --;
  {
# 1376 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(80860, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(80859, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(80858, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1376 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(80861, 52012, 1);

    } else {
      __CrestBranch(80862, 52013, 0);
# 1376 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1377 "xmltok_impl.c"
    mem_5 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(80865, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80864, (unsigned long )0, (long long )23);
    __CrestApply2(80863, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 23));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(80866, 52018, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80867, 52019, 0);

    }
    }
    {
    __CrestLoad(80870, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80869, (unsigned long )0, (long long )19);
    __CrestApply2(80868, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 19));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 19) {
      __CrestBranch(80871, 52021, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80872, 52022, 0);

    }
    }
    {
    __CrestLoad(80875, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80874, (unsigned long )0, (long long )30);
    __CrestApply2(80873, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 30));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 30) {
      __CrestBranch(80876, 52024, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80877, 52025, 0);

    }
    }
    {
    __CrestLoad(80880, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80879, (unsigned long )0, (long long )33);
    __CrestApply2(80878, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 33));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 33) {
      __CrestBranch(80881, 52027, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80882, 52028, 0);

    }
    }
    {
    __CrestLoad(80885, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80884, (unsigned long )0, (long long )16);
    __CrestApply2(80883, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 16));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 16) {
      __CrestBranch(80886, 52030, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80887, 52031, 0);

    }
    }
    {
    __CrestLoad(80890, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80889, (unsigned long )0, (long long )18);
    __CrestApply2(80888, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 18));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 18) {
      __CrestBranch(80891, 52033, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80892, 52034, 0);

    }
    }
    {
    __CrestLoad(80895, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80894, (unsigned long )0, (long long )10);
    __CrestApply2(80893, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 10));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(80896, 52036, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80897, 52037, 0);

    }
    }
    {
    __CrestLoad(80900, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80899, (unsigned long )0, (long long )9);
    __CrestApply2(80898, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 9));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(80901, 52039, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80902, 52040, 0);

    }
    }
    {
    __CrestLoad(80905, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80904, (unsigned long )0, (long long )15);
    __CrestApply2(80903, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 15));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 15) {
      __CrestBranch(80906, 52042, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80907, 52043, 0);

    }
    }
    {
    __CrestLoad(80910, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80909, (unsigned long )0, (long long )14);
    __CrestApply2(80908, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 14));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 14) {
      __CrestBranch(80911, 52045, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80912, 52046, 0);

    }
    }
    {
    __CrestLoad(80915, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80914, (unsigned long )0, (long long )17);
    __CrestApply2(80913, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 17));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 17) {
      __CrestBranch(80916, 52048, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80917, 52049, 0);

    }
    }
    {
    __CrestLoad(80920, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80919, (unsigned long )0, (long long )35);
    __CrestApply2(80918, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 35));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 35) {
      __CrestBranch(80921, 52051, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80922, 52052, 0);

    }
    }
    {
    __CrestLoad(80925, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80924, (unsigned long )0, (long long )34);
    __CrestApply2(80923, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 34));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 34) {
      __CrestBranch(80926, 52054, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80927, 52055, 0);

    }
    }
    {
    __CrestLoad(80930, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80929, (unsigned long )0, (long long )32);
    __CrestApply2(80928, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 32));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 32) {
      __CrestBranch(80931, 52057, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80932, 52058, 0);

    }
    }
    {
    __CrestLoad(80935, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80934, (unsigned long )0, (long long )31);
    __CrestApply2(80933, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 31));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 31) {
      __CrestBranch(80936, 52060, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80937, 52061, 0);

    }
    }
    {
    __CrestLoad(80940, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80939, (unsigned long )0, (long long )13);
    __CrestApply2(80938, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 13));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 13) {
      __CrestBranch(80941, 52063, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80942, 52064, 0);

    }
    }
    {
    __CrestLoad(80945, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80944, (unsigned long )0, (long long )27);
    __CrestApply2(80943, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 27));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(80946, 52066, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80947, 52067, 0);

    }
    }
    {
    __CrestLoad(80950, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80949, (unsigned long )0, (long long )24);
    __CrestApply2(80948, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 24));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(80951, 52069, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80952, 52070, 0);

    }
    }
    {
    __CrestLoad(80955, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80954, (unsigned long )0, (long long )25);
    __CrestApply2(80953, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 25));
# 1397 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(80956, 52072, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(80957, 52073, 0);

    }
    }
    {
    __CrestLoad(80960, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80959, (unsigned long )0, (long long )21);
    __CrestApply2(80958, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 21));
# 1400 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(80961, 52075, 1);
# 1400 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(80962, 52076, 0);

    }
    }
    {
    __CrestLoad(80965, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80964, (unsigned long )0, (long long )22);
    __CrestApply2(80963, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 22));
# 1407 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(80966, 52078, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(80967, 52079, 0);

    }
    }
    {
    __CrestLoad(80970, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(80969, (unsigned long )0, (long long )26);
    __CrestApply2(80968, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 26));
# 1407 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(80971, 52081, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(80972, 52082, 0);

    }
    }
# 1410 "xmltok_impl.c"
    goto switch_default;
    case_23:
    case_19:
    case_30:
    case_33:
    case_16:
    case_18:
    case_10:
    case_9:
    case_15:
    case_14:
    case_17:
    case_35:
    case_34:
    case_32:
    case_31:
    case_13:
    case_27:
    case_24:
    case_25:
# 1399 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
    __CrestLoad(80975, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80974, (unsigned long )0, (long long )9);
    __CrestApply2(80973, 12, (long long )((int const )*ptr == 9));
# 1401 "xmltok_impl.c"
    if ((int const )*ptr == 9) {
      __CrestBranch(80976, 52086, 1);
# 1402 "xmltok_impl.c"
      *badPtr = ptr;
      __CrestLoad(80978, (unsigned long )0, (long long )0);
      __CrestStore(80979, (unsigned long )(& __retres6));
# 1403 "xmltok_impl.c"
      __retres6 = 0;
# 1403 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(80977, 52089, 0);

    }
    }
# 1405 "xmltok_impl.c"
    goto switch_break;
    case_22:
    case_26:
    {
    __CrestLoad(80984, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80983, (unsigned long )0, (long long )-128);
    __CrestApply2(80982, 5, (long long )((int const )*ptr & -128));
    __CrestLoad(80981, (unsigned long )0, (long long )0);
    __CrestApply2(80980, 12, (long long )(((int const )*ptr & -128) == 0));
# 1408 "xmltok_impl.c"
    if (((int const )*ptr & -128) == 0) {
      __CrestBranch(80985, 52092, 1);
# 1409 "xmltok_impl.c"
      goto switch_break;
    } else {
      __CrestBranch(80986, 52093, 0);

    }
    }
    switch_default:
    {
    {
    __CrestLoad(80989, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80988, (unsigned long )0, (long long )64);
    __CrestApply2(80987, 12, (long long )((int const )*ptr == 64));
# 1413 "xmltok_impl.c"
    if ((int const )*ptr == 64) {
      __CrestBranch(80990, 52096, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(80991, 52097, 0);

    }
    }
    {
    __CrestLoad(80994, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(80993, (unsigned long )0, (long long )36);
    __CrestApply2(80992, 12, (long long )((int const )*ptr == 36));
# 1413 "xmltok_impl.c"
    if ((int const )*ptr == 36) {
      __CrestBranch(80995, 52099, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(80996, 52100, 0);

    }
    }
# 1415 "xmltok_impl.c"
    goto switch_default___0;
    case_64:
    case_36:
# 1414 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 1416 "xmltok_impl.c"
    *badPtr = ptr;
    __CrestLoad(80997, (unsigned long )0, (long long )0);
    __CrestStore(80998, (unsigned long )(& __retres6));
# 1417 "xmltok_impl.c"
    __retres6 = 0;
# 1417 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
# 1419 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
# 1376 "xmltok_impl.c"
    ptr ++;
  }
  while_break: ;
  }
  __CrestLoad(80999, (unsigned long )0, (long long )1);
  __CrestStore(81000, (unsigned long )(& __retres6));
# 1422 "xmltok_impl.c"
  __retres6 = 1;
  return_label:
  {
  __CrestLoad(81001, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(81002);
# 1370 "xmltok_impl.c"
  return (__retres6);
  }
}
}
# 1430 "xmltok_impl.c"
static int normal_getAtts(ENCODING const *enc , char const *ptr , int attsMax ,
                          ATTRIBUTE *atts )
{
  enum __anonenum_state_81194955 state ;
  int nAtts ;
  int open ;
  struct normal_encoding *mem_8 ;
  ATTRIBUTE *mem_9 ;
  ATTRIBUTE *mem_10 ;
  ATTRIBUTE *mem_11 ;
  ATTRIBUTE *mem_12 ;
  ATTRIBUTE *mem_13 ;
  ATTRIBUTE *mem_14 ;
  ATTRIBUTE *mem_15 ;
  ATTRIBUTE *mem_16 ;
  ATTRIBUTE *mem_17 ;
  ATTRIBUTE *mem_18 ;
  ATTRIBUTE *mem_19 ;
  ATTRIBUTE *mem_20 ;
  ATTRIBUTE *mem_21 ;
  ATTRIBUTE *mem_22 ;
  ATTRIBUTE *mem_23 ;
  ATTRIBUTE *mem_24 ;
  ATTRIBUTE *mem_25 ;
  char const *mem_26 ;
  ATTRIBUTE *mem_27 ;
  char const *mem_28 ;
  struct normal_encoding *mem_29 ;
  ATTRIBUTE *mem_30 ;
  ATTRIBUTE *mem_31 ;
  int __retres32 ;

  {
  __CrestCall(81004, 854);
  __CrestStore(81003, (unsigned long )(& attsMax));
  __CrestLoad(81005, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )1));
  __CrestStore(81006, (unsigned long )(& state));
# 1434 "xmltok_impl.c"
  state = (enum __anonenum_state_81194955 )1;
  __CrestLoad(81007, (unsigned long )0, (long long )0);
  __CrestStore(81008, (unsigned long )(& nAtts));
# 1435 "xmltok_impl.c"
  nAtts = 0;
  __CrestLoad(81009, (unsigned long )0, (long long )0);
  __CrestStore(81010, (unsigned long )(& open));
# 1436 "xmltok_impl.c"
  open = 0;
# 1439 "xmltok_impl.c"
  ptr ++;
  {
# 1439 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1440 "xmltok_impl.c"
    mem_8 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81013, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81012, (unsigned long )0, (long long )5);
    __CrestApply2(81011, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 5));
# 1451 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(81014, 52121, 1);
# 1451 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(81015, 52122, 0);

    }
    }
    {
    __CrestLoad(81018, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81017, (unsigned long )0, (long long )6);
    __CrestApply2(81016, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 6));
# 1451 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(81019, 52124, 1);
# 1451 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(81020, 52125, 0);

    }
    }
    {
    __CrestLoad(81023, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81022, (unsigned long )0, (long long )7);
    __CrestApply2(81021, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 7));
# 1451 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(81024, 52127, 1);
# 1451 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(81025, 52128, 0);

    }
    }
    {
    __CrestLoad(81028, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81027, (unsigned long )0, (long long )24);
    __CrestApply2(81026, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 24));
# 1455 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(81029, 52130, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(81030, 52131, 0);

    }
    }
    {
    __CrestLoad(81033, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81032, (unsigned long )0, (long long )22);
    __CrestApply2(81031, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 22));
# 1455 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(81034, 52133, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(81035, 52134, 0);

    }
    }
    {
    __CrestLoad(81038, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81037, (unsigned long )0, (long long )29);
    __CrestApply2(81036, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 29));
# 1455 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(81039, 52136, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(81040, 52137, 0);

    }
    }
    {
    __CrestLoad(81043, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81042, (unsigned long )0, (long long )12);
    __CrestApply2(81041, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 12));
# 1459 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 12) {
      __CrestBranch(81044, 52139, 1);
# 1459 "xmltok_impl.c"
      goto case_12;
    } else {
      __CrestBranch(81045, 52140, 0);

    }
    }
    {
    __CrestLoad(81048, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81047, (unsigned long )0, (long long )13);
    __CrestApply2(81046, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 13));
# 1473 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 13) {
      __CrestBranch(81049, 52142, 1);
# 1473 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(81050, 52143, 0);

    }
    }
    {
    __CrestLoad(81053, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81052, (unsigned long )0, (long long )3);
    __CrestApply2(81051, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 3));
# 1487 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 3) {
      __CrestBranch(81054, 52145, 1);
# 1487 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(81055, 52146, 0);

    }
    }
    {
    __CrestLoad(81058, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81057, (unsigned long )0, (long long )21);
    __CrestApply2(81056, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 21));
# 1491 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(81059, 52148, 1);
# 1491 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(81060, 52149, 0);

    }
    }
    {
    __CrestLoad(81063, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81062, (unsigned long )0, (long long )10);
    __CrestApply2(81061, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 10));
# 1503 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(81064, 52151, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(81065, 52152, 0);

    }
    }
    {
    __CrestLoad(81068, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81067, (unsigned long )0, (long long )9);
    __CrestApply2(81066, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 9));
# 1503 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(81069, 52154, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(81070, 52155, 0);

    }
    }
    {
    __CrestLoad(81073, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81072, (unsigned long )0, (long long )17);
    __CrestApply2(81071, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 17));
# 1512 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 17) {
      __CrestBranch(81074, 52157, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(81075, 52158, 0);

    }
    }
    {
    __CrestLoad(81078, (unsigned long )(& mem_8->type[(unsigned char )*ptr]), (long long )mem_8->type[(unsigned char )*ptr]);
    __CrestLoad(81077, (unsigned long )0, (long long )11);
    __CrestApply2(81076, 12, (long long )((int )mem_8->type[(unsigned char )*ptr] == 11));
# 1512 "xmltok_impl.c"
    if ((int )mem_8->type[(unsigned char )*ptr] == 11) {
      __CrestBranch(81079, 52160, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(81080, 52161, 0);

    }
    }
# 1516 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(81083, (unsigned long )(& state), (long long )state);
    __CrestLoad(81082, (unsigned long )0, (long long )0U);
    __CrestApply2(81081, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(81084, 52164, 1);
      {
      __CrestLoad(81088, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81087, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81086, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81089, 52165, 1);
# 1451 "xmltok_impl.c"
        mem_9 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_9->name = ptr;
# 1451 "xmltok_impl.c"
        mem_10 = atts + nAtts;
        __CrestLoad(81091, (unsigned long )0, (long long )(char)1);
        __CrestStore(81092, (unsigned long )(& mem_10->normalized));
# 1451 "xmltok_impl.c"
        mem_10->normalized = (char)1;
      } else {
        __CrestBranch(81090, 52166, 0);

      }
      }
      __CrestLoad(81093, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )1));
      __CrestStore(81094, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )1;
    } else {
      __CrestBranch(81085, 52168, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr ++;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(81097, (unsigned long )(& state), (long long )state);
    __CrestLoad(81096, (unsigned long )0, (long long )0U);
    __CrestApply2(81095, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(81098, 52172, 1);
      {
      __CrestLoad(81102, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81101, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81100, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81103, 52173, 1);
# 1451 "xmltok_impl.c"
        mem_11 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_11->name = ptr;
# 1451 "xmltok_impl.c"
        mem_12 = atts + nAtts;
        __CrestLoad(81105, (unsigned long )0, (long long )(char)1);
        __CrestStore(81106, (unsigned long )(& mem_12->normalized));
# 1451 "xmltok_impl.c"
        mem_12->normalized = (char)1;
      } else {
        __CrestBranch(81104, 52174, 0);

      }
      }
      __CrestLoad(81107, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )1));
      __CrestStore(81108, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )1;
    } else {
      __CrestBranch(81099, 52176, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 2;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(81111, (unsigned long )(& state), (long long )state);
    __CrestLoad(81110, (unsigned long )0, (long long )0U);
    __CrestApply2(81109, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(81112, 52180, 1);
      {
      __CrestLoad(81116, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81115, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81114, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81117, 52181, 1);
# 1451 "xmltok_impl.c"
        mem_13 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_13->name = ptr;
# 1451 "xmltok_impl.c"
        mem_14 = atts + nAtts;
        __CrestLoad(81119, (unsigned long )0, (long long )(char)1);
        __CrestStore(81120, (unsigned long )(& mem_14->normalized));
# 1451 "xmltok_impl.c"
        mem_14->normalized = (char)1;
      } else {
        __CrestBranch(81118, 52182, 0);

      }
      }
      __CrestLoad(81121, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )1));
      __CrestStore(81122, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )1;
    } else {
      __CrestBranch(81113, 52184, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 3;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_24:
    case_22:
    case_29:
    {
    __CrestLoad(81125, (unsigned long )(& state), (long long )state);
    __CrestLoad(81124, (unsigned long )0, (long long )0U);
    __CrestApply2(81123, 12, (long long )((unsigned int )state == 0U));
# 1456 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(81126, 52188, 1);
      {
      __CrestLoad(81130, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81129, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81128, 16, (long long )(nAtts < attsMax));
# 1456 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81131, 52189, 1);
# 1456 "xmltok_impl.c"
        mem_15 = atts + nAtts;
# 1456 "xmltok_impl.c"
        mem_15->name = ptr;
# 1456 "xmltok_impl.c"
        mem_16 = atts + nAtts;
        __CrestLoad(81133, (unsigned long )0, (long long )(char)1);
        __CrestStore(81134, (unsigned long )(& mem_16->normalized));
# 1456 "xmltok_impl.c"
        mem_16->normalized = (char)1;
      } else {
        __CrestBranch(81132, 52190, 0);

      }
      }
      __CrestLoad(81135, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )1));
      __CrestStore(81136, (unsigned long )(& state));
# 1456 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )1;
    } else {
      __CrestBranch(81127, 52192, 0);

    }
    }
# 1457 "xmltok_impl.c"
    goto switch_break;
    case_12:
    {
    __CrestLoad(81139, (unsigned long )(& state), (long long )state);
    __CrestLoad(81138, (unsigned long )0, (long long )2U);
    __CrestApply2(81137, 13, (long long )((unsigned int )state != 2U));
# 1460 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(81140, 52195, 1);
      {
      __CrestLoad(81144, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81143, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81142, 16, (long long )(nAtts < attsMax));
# 1461 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81145, 52196, 1);
# 1462 "xmltok_impl.c"
        mem_17 = atts + nAtts;
# 1462 "xmltok_impl.c"
        mem_17->valuePtr = ptr + 1;
      } else {
        __CrestBranch(81146, 52197, 0);

      }
      }
      __CrestLoad(81147, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )2));
      __CrestStore(81148, (unsigned long )(& state));
# 1463 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )2;
      __CrestLoad(81149, (unsigned long )0, (long long )12);
      __CrestStore(81150, (unsigned long )(& open));
# 1464 "xmltok_impl.c"
      open = 12;
    } else {
      __CrestBranch(81141, 52199, 0);
      {
      __CrestLoad(81153, (unsigned long )(& open), (long long )open);
      __CrestLoad(81152, (unsigned long )0, (long long )12);
      __CrestApply2(81151, 12, (long long )(open == 12));
# 1466 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(81154, 52200, 1);
        __CrestLoad(81156, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )0));
        __CrestStore(81157, (unsigned long )(& state));
# 1467 "xmltok_impl.c"
        state = (enum __anonenum_state_81194955 )0;
        {
        __CrestLoad(81160, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81159, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(81158, 16, (long long )(nAtts < attsMax));
# 1468 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(81161, 52202, 1);
# 1469 "xmltok_impl.c"
          mem_18 = atts + nAtts;
# 1469 "xmltok_impl.c"
          mem_18->valueEnd = ptr;
        } else {
          __CrestBranch(81162, 52203, 0);

        }
        }
        __CrestLoad(81165, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81164, (unsigned long )0, (long long )1);
        __CrestApply2(81163, 0, (long long )(nAtts + 1));
        __CrestStore(81166, (unsigned long )(& nAtts));
# 1470 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(81155, 52205, 0);

      }
      }
    }
    }
# 1472 "xmltok_impl.c"
    goto switch_break;
    case_13:
    {
    __CrestLoad(81169, (unsigned long )(& state), (long long )state);
    __CrestLoad(81168, (unsigned long )0, (long long )2U);
    __CrestApply2(81167, 13, (long long )((unsigned int )state != 2U));
# 1474 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(81170, 52208, 1);
      {
      __CrestLoad(81174, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(81173, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(81172, 16, (long long )(nAtts < attsMax));
# 1475 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(81175, 52209, 1);
# 1476 "xmltok_impl.c"
        mem_19 = atts + nAtts;
# 1476 "xmltok_impl.c"
        mem_19->valuePtr = ptr + 1;
      } else {
        __CrestBranch(81176, 52210, 0);

      }
      }
      __CrestLoad(81177, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )2));
      __CrestStore(81178, (unsigned long )(& state));
# 1477 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )2;
      __CrestLoad(81179, (unsigned long )0, (long long )13);
      __CrestStore(81180, (unsigned long )(& open));
# 1478 "xmltok_impl.c"
      open = 13;
    } else {
      __CrestBranch(81171, 52212, 0);
      {
      __CrestLoad(81183, (unsigned long )(& open), (long long )open);
      __CrestLoad(81182, (unsigned long )0, (long long )13);
      __CrestApply2(81181, 12, (long long )(open == 13));
# 1480 "xmltok_impl.c"
      if (open == 13) {
        __CrestBranch(81184, 52213, 1);
        __CrestLoad(81186, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )0));
        __CrestStore(81187, (unsigned long )(& state));
# 1481 "xmltok_impl.c"
        state = (enum __anonenum_state_81194955 )0;
        {
        __CrestLoad(81190, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81189, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(81188, 16, (long long )(nAtts < attsMax));
# 1482 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(81191, 52215, 1);
# 1483 "xmltok_impl.c"
          mem_20 = atts + nAtts;
# 1483 "xmltok_impl.c"
          mem_20->valueEnd = ptr;
        } else {
          __CrestBranch(81192, 52216, 0);

        }
        }
        __CrestLoad(81195, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81194, (unsigned long )0, (long long )1);
        __CrestApply2(81193, 0, (long long )(nAtts + 1));
        __CrestStore(81196, (unsigned long )(& nAtts));
# 1484 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(81185, 52218, 0);

      }
      }
    }
    }
# 1486 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(81199, (unsigned long )(& nAtts), (long long )nAtts);
    __CrestLoad(81198, (unsigned long )(& attsMax), (long long )attsMax);
    __CrestApply2(81197, 16, (long long )(nAtts < attsMax));
# 1488 "xmltok_impl.c"
    if (nAtts < attsMax) {
      __CrestBranch(81200, 52221, 1);
# 1489 "xmltok_impl.c"
      mem_21 = atts + nAtts;
      __CrestLoad(81202, (unsigned long )0, (long long )(char)0);
      __CrestStore(81203, (unsigned long )(& mem_21->normalized));
# 1489 "xmltok_impl.c"
      mem_21->normalized = (char)0;
    } else {
      __CrestBranch(81201, 52222, 0);

    }
    }
# 1490 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
    __CrestLoad(81206, (unsigned long )(& state), (long long )state);
    __CrestLoad(81205, (unsigned long )0, (long long )1U);
    __CrestApply2(81204, 12, (long long )((unsigned int )state == 1U));
# 1492 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(81207, 52225, 1);
      __CrestLoad(81209, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )0));
      __CrestStore(81210, (unsigned long )(& state));
# 1493 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )0;
    } else {
      __CrestBranch(81208, 52226, 0);
      {
      __CrestLoad(81213, (unsigned long )(& state), (long long )state);
      __CrestLoad(81212, (unsigned long )0, (long long )2U);
      __CrestApply2(81211, 12, (long long )((unsigned int )state == 2U));
# 1494 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(81214, 52227, 1);
        {
        __CrestLoad(81218, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81217, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(81216, 16, (long long )(nAtts < attsMax));
# 1494 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(81219, 52228, 1);
          {
# 1494 "xmltok_impl.c"
          mem_22 = atts + nAtts;
          {
          __CrestLoad(81223, (unsigned long )(& mem_22->normalized), (long long )mem_22->normalized);
          __CrestLoad(81222, (unsigned long )0, (long long )0);
          __CrestApply2(81221, 13, (long long )(mem_22->normalized != 0));
# 1494 "xmltok_impl.c"
          if (mem_22->normalized != 0) {
            __CrestBranch(81224, 52231, 1);
            {
# 1494 "xmltok_impl.c"
            mem_23 = atts + nAtts;
            {
            __CrestLoad(81228, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
            __CrestLoad(81227, (unsigned long )(& mem_23->valuePtr), (long long )((unsigned long )mem_23->valuePtr));
            __CrestApply2(81226, 12, (long long )((unsigned long )ptr == (unsigned long )mem_23->valuePtr));
# 1494 "xmltok_impl.c"
            if ((unsigned long )ptr == (unsigned long )mem_23->valuePtr) {
              __CrestBranch(81229, 52234, 1);
# 1501 "xmltok_impl.c"
              mem_24 = atts + nAtts;
              __CrestLoad(81231, (unsigned long )0, (long long )(char)0);
              __CrestStore(81232, (unsigned long )(& mem_24->normalized));
# 1501 "xmltok_impl.c"
              mem_24->normalized = (char)0;
            } else {
              __CrestBranch(81230, 52235, 0);
              {
              __CrestLoad(81235, (unsigned long )ptr, (long long )*ptr);
              __CrestLoad(81234, (unsigned long )0, (long long )32);
              __CrestApply2(81233, 13, (long long )((int const )*ptr != 32));
# 1494 "xmltok_impl.c"
              if ((int const )*ptr != 32) {
                __CrestBranch(81236, 52236, 1);
# 1501 "xmltok_impl.c"
                mem_25 = atts + nAtts;
                __CrestLoad(81238, (unsigned long )0, (long long )(char)0);
                __CrestStore(81239, (unsigned long )(& mem_25->normalized));
# 1501 "xmltok_impl.c"
                mem_25->normalized = (char)0;
              } else {
                __CrestBranch(81237, 52237, 0);
                {
# 1494 "xmltok_impl.c"
                mem_26 = ptr + 1;
                {
                __CrestLoad(81242, (unsigned long )mem_26, (long long )*mem_26);
                __CrestLoad(81241, (unsigned long )0, (long long )32);
                __CrestApply2(81240, 12, (long long )((int const )*mem_26 == 32));
# 1494 "xmltok_impl.c"
                if ((int const )*mem_26 == 32) {
                  __CrestBranch(81243, 52240, 1);
# 1501 "xmltok_impl.c"
                  mem_27 = atts + nAtts;
                  __CrestLoad(81245, (unsigned long )0, (long long )(char)0);
                  __CrestStore(81246, (unsigned long )(& mem_27->normalized));
# 1501 "xmltok_impl.c"
                  mem_27->normalized = (char)0;
                } else {
                  __CrestBranch(81244, 52241, 0);
                  {
# 1494 "xmltok_impl.c"
                  mem_28 = ptr + 1;
# 1494 "xmltok_impl.c"
                  mem_29 = (struct normal_encoding *)enc;
                  {
                  __CrestLoad(81249, (unsigned long )(& mem_29->type[(unsigned char )*mem_28]),
                              (long long )mem_29->type[(unsigned char )*mem_28]);
                  __CrestLoad(81248, (unsigned long )(& open), (long long )open);
                  __CrestApply2(81247, 12, (long long )((int )mem_29->type[(unsigned char )*mem_28] == open));
# 1494 "xmltok_impl.c"
                  if ((int )mem_29->type[(unsigned char )*mem_28] == open) {
                    __CrestBranch(81250, 52244, 1);
# 1501 "xmltok_impl.c"
                    mem_30 = atts + nAtts;
                    __CrestLoad(81252, (unsigned long )0, (long long )(char)0);
                    __CrestStore(81253, (unsigned long )(& mem_30->normalized));
# 1501 "xmltok_impl.c"
                    mem_30->normalized = (char)0;
                  } else {
                    __CrestBranch(81251, 52245, 0);

                  }
                  }
                  }
                }
                }
                }
              }
              }
            }
            }
            }
          } else {
            __CrestBranch(81225, 52246, 0);

          }
          }
          }
        } else {
          __CrestBranch(81220, 52247, 0);

        }
        }
      } else {
        __CrestBranch(81215, 52248, 0);

      }
      }
    }
    }
# 1502 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    {
    __CrestLoad(81256, (unsigned long )(& state), (long long )state);
    __CrestLoad(81255, (unsigned long )0, (long long )1U);
    __CrestApply2(81254, 12, (long long )((unsigned int )state == 1U));
# 1506 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(81257, 52251, 1);
      __CrestLoad(81259, (unsigned long )0, (long long )((enum __anonenum_state_81194955 )0));
      __CrestStore(81260, (unsigned long )(& state));
# 1507 "xmltok_impl.c"
      state = (enum __anonenum_state_81194955 )0;
    } else {
      __CrestBranch(81258, 52252, 0);
      {
      __CrestLoad(81263, (unsigned long )(& state), (long long )state);
      __CrestLoad(81262, (unsigned long )0, (long long )2U);
      __CrestApply2(81261, 12, (long long )((unsigned int )state == 2U));
# 1508 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(81264, 52253, 1);
        {
        __CrestLoad(81268, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(81267, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(81266, 16, (long long )(nAtts < attsMax));
# 1508 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(81269, 52254, 1);
# 1509 "xmltok_impl.c"
          mem_31 = atts + nAtts;
          __CrestLoad(81271, (unsigned long )0, (long long )(char)0);
          __CrestStore(81272, (unsigned long )(& mem_31->normalized));
# 1509 "xmltok_impl.c"
          mem_31->normalized = (char)0;
        } else {
          __CrestBranch(81270, 52255, 0);

        }
        }
      } else {
        __CrestBranch(81265, 52256, 0);

      }
      }
    }
    }
# 1510 "xmltok_impl.c"
    goto switch_break;
    case_17:
    case_11:
    {
    __CrestLoad(81275, (unsigned long )(& state), (long long )state);
    __CrestLoad(81274, (unsigned long )0, (long long )2U);
    __CrestApply2(81273, 13, (long long )((unsigned int )state != 2U));
# 1513 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(81276, 52259, 1);
      __CrestLoad(81278, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestStore(81279, (unsigned long )(& __retres32));
# 1514 "xmltok_impl.c"
      __retres32 = nAtts;
# 1514 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81277, 52261, 0);

    }
    }
# 1515 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1517 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
# 1439 "xmltok_impl.c"
    ptr ++;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(81280, (unsigned long )(& __retres32), (long long )__retres32);
  __CrestReturn(81281);
# 1430 "xmltok_impl.c"
  return (__retres32);
  }
}
}
# 1523 "xmltok_impl.c"
static int normal_charRefNumber(ENCODING const *enc , char const *ptr )
{
  int result ;
  int c ;
  int c___0 ;
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(81282, 855);

  __CrestLoad(81283, (unsigned long )0, (long long )0);
  __CrestStore(81284, (unsigned long )(& result));
# 1526 "xmltok_impl.c"
  result = 0;
# 1528 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(81287, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81286, (unsigned long )0, (long long )120);
  __CrestApply2(81285, 12, (long long )((int const )*ptr == 120));
# 1529 "xmltok_impl.c"
  if ((int const )*ptr == 120) {
    __CrestBranch(81288, 52270, 1);
# 1530 "xmltok_impl.c"
    ptr ++;
    {
# 1530 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(81292, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(81291, (unsigned long )0, (long long )59);
      __CrestApply2(81290, 13, (long long )((int const )*ptr != 59));
# 1530 "xmltok_impl.c"
      if ((int const )*ptr != 59) {
        __CrestBranch(81293, 52275, 1);

      } else {
        __CrestBranch(81294, 52276, 0);
# 1530 "xmltok_impl.c"
        goto while_break;
      }
      }
      __CrestLoad(81295, (unsigned long )ptr, (long long )*ptr);
      __CrestStore(81296, (unsigned long )(& c));
# 1533 "xmltok_impl.c"
      c = (int )*ptr;
      {
      {
      __CrestLoad(81299, (unsigned long )(& c), (long long )c);
      __CrestLoad(81298, (unsigned long )0, (long long )57);
      __CrestApply2(81297, 12, (long long )(c == 57));
# 1536 "xmltok_impl.c"
      if (c == 57) {
        __CrestBranch(81300, 52280, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81301, 52281, 0);

      }
      }
      {
      __CrestLoad(81304, (unsigned long )(& c), (long long )c);
      __CrestLoad(81303, (unsigned long )0, (long long )56);
      __CrestApply2(81302, 12, (long long )(c == 56));
# 1536 "xmltok_impl.c"
      if (c == 56) {
        __CrestBranch(81305, 52283, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81306, 52284, 0);

      }
      }
      {
      __CrestLoad(81309, (unsigned long )(& c), (long long )c);
      __CrestLoad(81308, (unsigned long )0, (long long )55);
      __CrestApply2(81307, 12, (long long )(c == 55));
# 1536 "xmltok_impl.c"
      if (c == 55) {
        __CrestBranch(81310, 52286, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81311, 52287, 0);

      }
      }
      {
      __CrestLoad(81314, (unsigned long )(& c), (long long )c);
      __CrestLoad(81313, (unsigned long )0, (long long )54);
      __CrestApply2(81312, 12, (long long )(c == 54));
# 1536 "xmltok_impl.c"
      if (c == 54) {
        __CrestBranch(81315, 52289, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81316, 52290, 0);

      }
      }
      {
      __CrestLoad(81319, (unsigned long )(& c), (long long )c);
      __CrestLoad(81318, (unsigned long )0, (long long )53);
      __CrestApply2(81317, 12, (long long )(c == 53));
# 1536 "xmltok_impl.c"
      if (c == 53) {
        __CrestBranch(81320, 52292, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81321, 52293, 0);

      }
      }
      {
      __CrestLoad(81324, (unsigned long )(& c), (long long )c);
      __CrestLoad(81323, (unsigned long )0, (long long )52);
      __CrestApply2(81322, 12, (long long )(c == 52));
# 1536 "xmltok_impl.c"
      if (c == 52) {
        __CrestBranch(81325, 52295, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81326, 52296, 0);

      }
      }
      {
      __CrestLoad(81329, (unsigned long )(& c), (long long )c);
      __CrestLoad(81328, (unsigned long )0, (long long )51);
      __CrestApply2(81327, 12, (long long )(c == 51));
# 1536 "xmltok_impl.c"
      if (c == 51) {
        __CrestBranch(81330, 52298, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81331, 52299, 0);

      }
      }
      {
      __CrestLoad(81334, (unsigned long )(& c), (long long )c);
      __CrestLoad(81333, (unsigned long )0, (long long )50);
      __CrestApply2(81332, 12, (long long )(c == 50));
# 1536 "xmltok_impl.c"
      if (c == 50) {
        __CrestBranch(81335, 52301, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81336, 52302, 0);

      }
      }
      {
      __CrestLoad(81339, (unsigned long )(& c), (long long )c);
      __CrestLoad(81338, (unsigned long )0, (long long )49);
      __CrestApply2(81337, 12, (long long )(c == 49));
# 1536 "xmltok_impl.c"
      if (c == 49) {
        __CrestBranch(81340, 52304, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81341, 52305, 0);

      }
      }
      {
      __CrestLoad(81344, (unsigned long )(& c), (long long )c);
      __CrestLoad(81343, (unsigned long )0, (long long )48);
      __CrestApply2(81342, 12, (long long )(c == 48));
# 1536 "xmltok_impl.c"
      if (c == 48) {
        __CrestBranch(81345, 52307, 1);
# 1536 "xmltok_impl.c"
        goto case_57;
      } else {
        __CrestBranch(81346, 52308, 0);

      }
      }
      {
      __CrestLoad(81349, (unsigned long )(& c), (long long )c);
      __CrestLoad(81348, (unsigned long )0, (long long )70);
      __CrestApply2(81347, 12, (long long )(c == 70));
# 1541 "xmltok_impl.c"
      if (c == 70) {
        __CrestBranch(81350, 52310, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81351, 52311, 0);

      }
      }
      {
      __CrestLoad(81354, (unsigned long )(& c), (long long )c);
      __CrestLoad(81353, (unsigned long )0, (long long )69);
      __CrestApply2(81352, 12, (long long )(c == 69));
# 1541 "xmltok_impl.c"
      if (c == 69) {
        __CrestBranch(81355, 52313, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81356, 52314, 0);

      }
      }
      {
      __CrestLoad(81359, (unsigned long )(& c), (long long )c);
      __CrestLoad(81358, (unsigned long )0, (long long )68);
      __CrestApply2(81357, 12, (long long )(c == 68));
# 1541 "xmltok_impl.c"
      if (c == 68) {
        __CrestBranch(81360, 52316, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81361, 52317, 0);

      }
      }
      {
      __CrestLoad(81364, (unsigned long )(& c), (long long )c);
      __CrestLoad(81363, (unsigned long )0, (long long )67);
      __CrestApply2(81362, 12, (long long )(c == 67));
# 1541 "xmltok_impl.c"
      if (c == 67) {
        __CrestBranch(81365, 52319, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81366, 52320, 0);

      }
      }
      {
      __CrestLoad(81369, (unsigned long )(& c), (long long )c);
      __CrestLoad(81368, (unsigned long )0, (long long )66);
      __CrestApply2(81367, 12, (long long )(c == 66));
# 1541 "xmltok_impl.c"
      if (c == 66) {
        __CrestBranch(81370, 52322, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81371, 52323, 0);

      }
      }
      {
      __CrestLoad(81374, (unsigned long )(& c), (long long )c);
      __CrestLoad(81373, (unsigned long )0, (long long )65);
      __CrestApply2(81372, 12, (long long )(c == 65));
# 1541 "xmltok_impl.c"
      if (c == 65) {
        __CrestBranch(81375, 52325, 1);
# 1541 "xmltok_impl.c"
        goto case_70;
      } else {
        __CrestBranch(81376, 52326, 0);

      }
      }
      {
      __CrestLoad(81379, (unsigned long )(& c), (long long )c);
      __CrestLoad(81378, (unsigned long )0, (long long )102);
      __CrestApply2(81377, 12, (long long )(c == 102));
# 1546 "xmltok_impl.c"
      if (c == 102) {
        __CrestBranch(81380, 52328, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81381, 52329, 0);

      }
      }
      {
      __CrestLoad(81384, (unsigned long )(& c), (long long )c);
      __CrestLoad(81383, (unsigned long )0, (long long )101);
      __CrestApply2(81382, 12, (long long )(c == 101));
# 1546 "xmltok_impl.c"
      if (c == 101) {
        __CrestBranch(81385, 52331, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81386, 52332, 0);

      }
      }
      {
      __CrestLoad(81389, (unsigned long )(& c), (long long )c);
      __CrestLoad(81388, (unsigned long )0, (long long )100);
      __CrestApply2(81387, 12, (long long )(c == 100));
# 1546 "xmltok_impl.c"
      if (c == 100) {
        __CrestBranch(81390, 52334, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81391, 52335, 0);

      }
      }
      {
      __CrestLoad(81394, (unsigned long )(& c), (long long )c);
      __CrestLoad(81393, (unsigned long )0, (long long )99);
      __CrestApply2(81392, 12, (long long )(c == 99));
# 1546 "xmltok_impl.c"
      if (c == 99) {
        __CrestBranch(81395, 52337, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81396, 52338, 0);

      }
      }
      {
      __CrestLoad(81399, (unsigned long )(& c), (long long )c);
      __CrestLoad(81398, (unsigned long )0, (long long )98);
      __CrestApply2(81397, 12, (long long )(c == 98));
# 1546 "xmltok_impl.c"
      if (c == 98) {
        __CrestBranch(81400, 52340, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81401, 52341, 0);

      }
      }
      {
      __CrestLoad(81404, (unsigned long )(& c), (long long )c);
      __CrestLoad(81403, (unsigned long )0, (long long )97);
      __CrestApply2(81402, 12, (long long )(c == 97));
# 1546 "xmltok_impl.c"
      if (c == 97) {
        __CrestBranch(81405, 52343, 1);
# 1546 "xmltok_impl.c"
        goto case_102;
      } else {
        __CrestBranch(81406, 52344, 0);

      }
      }
# 1534 "xmltok_impl.c"
      goto switch_break;
      case_57:
      case_56:
      case_55:
      case_54:
      case_53:
      case_52:
      case_51:
      case_50:
      case_49:
      case_48:
      __CrestLoad(81409, (unsigned long )(& result), (long long )result);
      __CrestLoad(81408, (unsigned long )0, (long long )4);
      __CrestApply2(81407, 8, (long long )(result << 4));
      __CrestStore(81410, (unsigned long )(& result));
# 1537 "xmltok_impl.c"
      result <<= 4;
      __CrestLoad(81415, (unsigned long )(& result), (long long )result);
      __CrestLoad(81414, (unsigned long )(& c), (long long )c);
      __CrestLoad(81413, (unsigned long )0, (long long )48);
      __CrestApply2(81412, 1, (long long )(c - 48));
      __CrestApply2(81411, 6, (long long )(result | (c - 48)));
      __CrestStore(81416, (unsigned long )(& result));
# 1538 "xmltok_impl.c"
      result |= c - 48;
# 1539 "xmltok_impl.c"
      goto switch_break;
      case_70:
      case_69:
      case_68:
      case_67:
      case_66:
      case_65:
      __CrestLoad(81419, (unsigned long )(& result), (long long )result);
      __CrestLoad(81418, (unsigned long )0, (long long )4);
      __CrestApply2(81417, 8, (long long )(result << 4));
      __CrestStore(81420, (unsigned long )(& result));
# 1542 "xmltok_impl.c"
      result <<= 4;
      __CrestLoad(81427, (unsigned long )(& result), (long long )result);
      __CrestLoad(81426, (unsigned long )0, (long long )10);
      __CrestLoad(81425, (unsigned long )(& c), (long long )c);
      __CrestLoad(81424, (unsigned long )0, (long long )65);
      __CrestApply2(81423, 1, (long long )(c - 65));
      __CrestApply2(81422, 0, (long long )(10 + (c - 65)));
      __CrestApply2(81421, 0, (long long )(result + (10 + (c - 65))));
      __CrestStore(81428, (unsigned long )(& result));
# 1543 "xmltok_impl.c"
      result += 10 + (c - 65);
# 1544 "xmltok_impl.c"
      goto switch_break;
      case_102:
      case_101:
      case_100:
      case_99:
      case_98:
      case_97:
      __CrestLoad(81431, (unsigned long )(& result), (long long )result);
      __CrestLoad(81430, (unsigned long )0, (long long )4);
      __CrestApply2(81429, 8, (long long )(result << 4));
      __CrestStore(81432, (unsigned long )(& result));
# 1547 "xmltok_impl.c"
      result <<= 4;
      __CrestLoad(81439, (unsigned long )(& result), (long long )result);
      __CrestLoad(81438, (unsigned long )0, (long long )10);
      __CrestLoad(81437, (unsigned long )(& c), (long long )c);
      __CrestLoad(81436, (unsigned long )0, (long long )97);
      __CrestApply2(81435, 1, (long long )(c - 97));
      __CrestApply2(81434, 0, (long long )(10 + (c - 97)));
      __CrestApply2(81433, 0, (long long )(result + (10 + (c - 97))));
      __CrestStore(81440, (unsigned long )(& result));
# 1548 "xmltok_impl.c"
      result += 10 + (c - 97);
# 1549 "xmltok_impl.c"
      goto switch_break;
      switch_break: ;
      }
      {
      __CrestLoad(81443, (unsigned long )(& result), (long long )result);
      __CrestLoad(81442, (unsigned long )0, (long long )1114112);
      __CrestApply2(81441, 17, (long long )(result >= 1114112));
# 1551 "xmltok_impl.c"
      if (result >= 1114112) {
        __CrestBranch(81444, 52354, 1);
        __CrestLoad(81446, (unsigned long )0, (long long )-1);
        __CrestStore(81447, (unsigned long )(& __retres7));
# 1552 "xmltok_impl.c"
        __retres7 = -1;
# 1552 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(81445, 52356, 0);

      }
      }
# 1530 "xmltok_impl.c"
      ptr ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(81289, 52359, 0);
    {
# 1556 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(81450, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(81449, (unsigned long )0, (long long )59);
      __CrestApply2(81448, 13, (long long )((int const )*ptr != 59));
# 1556 "xmltok_impl.c"
      if ((int const )*ptr != 59) {
        __CrestBranch(81451, 52363, 1);

      } else {
        __CrestBranch(81452, 52364, 0);
# 1556 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      __CrestLoad(81453, (unsigned long )ptr, (long long )*ptr);
      __CrestStore(81454, (unsigned long )(& c___0));
# 1557 "xmltok_impl.c"
      c___0 = (int )*ptr;
      __CrestLoad(81457, (unsigned long )(& result), (long long )result);
      __CrestLoad(81456, (unsigned long )0, (long long )10);
      __CrestApply2(81455, 2, (long long )(result * 10));
      __CrestStore(81458, (unsigned long )(& result));
# 1558 "xmltok_impl.c"
      result *= 10;
      __CrestLoad(81463, (unsigned long )(& result), (long long )result);
      __CrestLoad(81462, (unsigned long )(& c___0), (long long )c___0);
      __CrestLoad(81461, (unsigned long )0, (long long )48);
      __CrestApply2(81460, 1, (long long )(c___0 - 48));
      __CrestApply2(81459, 0, (long long )(result + (c___0 - 48)));
      __CrestStore(81464, (unsigned long )(& result));
# 1559 "xmltok_impl.c"
      result += c___0 - 48;
      {
      __CrestLoad(81467, (unsigned long )(& result), (long long )result);
      __CrestLoad(81466, (unsigned long )0, (long long )1114112);
      __CrestApply2(81465, 17, (long long )(result >= 1114112));
# 1560 "xmltok_impl.c"
      if (result >= 1114112) {
        __CrestBranch(81468, 52367, 1);
        __CrestLoad(81470, (unsigned long )0, (long long )-1);
        __CrestStore(81471, (unsigned long )(& __retres7));
# 1561 "xmltok_impl.c"
        __retres7 = -1;
# 1561 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(81469, 52369, 0);

      }
      }
# 1556 "xmltok_impl.c"
      ptr ++;
    }
    while_break___0: ;
    }
  }
  }
  __CrestLoad(81472, (unsigned long )(& result), (long long )result);
# 1564 "xmltok_impl.c"
  tmp = checkCharRefNumber(result);
  __CrestHandleReturn(81474, (long long )tmp);
  __CrestStore(81473, (unsigned long )(& tmp));
  __CrestLoad(81475, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(81476, (unsigned long )(& __retres7));
# 1564 "xmltok_impl.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(81477, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(81478);
# 1523 "xmltok_impl.c"
  return (__retres7);
  }
}
}
# 1567 "xmltok_impl.c"
static int normal_predefinedEntityName(ENCODING const *enc , char const *ptr ,
                                       char const *end )
{
  char const *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(81479, 856);

  {
  {
  __CrestLoad(81484, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(81483, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(81482, 18, (long long )(end - ptr));
  __CrestLoad(81481, (unsigned long )0, (long long )2L);
  __CrestApply2(81480, 12, (long long )(end - ptr == 2L));
# 1572 "xmltok_impl.c"
  if (end - ptr == 2L) {
    __CrestBranch(81485, 52377, 1);
# 1572 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(81486, 52378, 0);

  }
  }
  {
  __CrestLoad(81491, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(81490, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(81489, 18, (long long )(end - ptr));
  __CrestLoad(81488, (unsigned long )0, (long long )3L);
  __CrestApply2(81487, 12, (long long )(end - ptr == 3L));
# 1582 "xmltok_impl.c"
  if (end - ptr == 3L) {
    __CrestBranch(81492, 52380, 1);
# 1582 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(81493, 52381, 0);

  }
  }
  {
  __CrestLoad(81498, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(81497, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(81496, 18, (long long )(end - ptr));
  __CrestLoad(81495, (unsigned long )0, (long long )4L);
  __CrestApply2(81494, 12, (long long )(end - ptr == 4L));
# 1592 "xmltok_impl.c"
  if (end - ptr == 4L) {
    __CrestBranch(81499, 52383, 1);
# 1592 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(81500, 52384, 0);

  }
  }
# 1571 "xmltok_impl.c"
  goto switch_break;
  case_2:
  {
# 1573 "xmltok_impl.c"
  mem_4 = ptr + 1;
  {
  __CrestLoad(81503, (unsigned long )mem_4, (long long )*mem_4);
  __CrestLoad(81502, (unsigned long )0, (long long )116);
  __CrestApply2(81501, 12, (long long )((int const )*mem_4 == 116));
# 1573 "xmltok_impl.c"
  if ((int const )*mem_4 == 116) {
    __CrestBranch(81504, 52389, 1);
    {
    {
    __CrestLoad(81508, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(81507, (unsigned long )0, (long long )108);
    __CrestApply2(81506, 12, (long long )((int const )*ptr == 108));
# 1575 "xmltok_impl.c"
    if ((int const )*ptr == 108) {
      __CrestBranch(81509, 52391, 1);
# 1575 "xmltok_impl.c"
      goto case_108;
    } else {
      __CrestBranch(81510, 52392, 0);

    }
    }
    {
    __CrestLoad(81513, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(81512, (unsigned long )0, (long long )103);
    __CrestApply2(81511, 12, (long long )((int const )*ptr == 103));
# 1577 "xmltok_impl.c"
    if ((int const )*ptr == 103) {
      __CrestBranch(81514, 52394, 1);
# 1577 "xmltok_impl.c"
      goto case_103;
    } else {
      __CrestBranch(81515, 52395, 0);

    }
    }
# 1574 "xmltok_impl.c"
    goto switch_break___0;
    case_108:
    __CrestLoad(81516, (unsigned long )0, (long long )60);
    __CrestStore(81517, (unsigned long )(& __retres5));
# 1576 "xmltok_impl.c"
    __retres5 = 60;
# 1576 "xmltok_impl.c"
    goto return_label;
    case_103:
    __CrestLoad(81518, (unsigned long )0, (long long )62);
    __CrestStore(81519, (unsigned long )(& __retres5));
# 1578 "xmltok_impl.c"
    __retres5 = 62;
# 1578 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  } else {
    __CrestBranch(81505, 52402, 0);

  }
  }
  }
# 1581 "xmltok_impl.c"
  goto switch_break;
  case_3:
  {
  __CrestLoad(81522, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81521, (unsigned long )0, (long long )97);
  __CrestApply2(81520, 12, (long long )((int const )*ptr == 97));
# 1583 "xmltok_impl.c"
  if ((int const )*ptr == 97) {
    __CrestBranch(81523, 52405, 1);
# 1584 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(81527, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(81526, (unsigned long )0, (long long )109);
    __CrestApply2(81525, 12, (long long )((int const )*ptr == 109));
# 1585 "xmltok_impl.c"
    if ((int const )*ptr == 109) {
      __CrestBranch(81528, 52407, 1);
# 1586 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(81532, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(81531, (unsigned long )0, (long long )112);
      __CrestApply2(81530, 12, (long long )((int const )*ptr == 112));
# 1587 "xmltok_impl.c"
      if ((int const )*ptr == 112) {
        __CrestBranch(81533, 52409, 1);
        __CrestLoad(81535, (unsigned long )0, (long long )38);
        __CrestStore(81536, (unsigned long )(& __retres5));
# 1588 "xmltok_impl.c"
        __retres5 = 38;
# 1588 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(81534, 52411, 0);

      }
      }
    } else {
      __CrestBranch(81529, 52412, 0);

    }
    }
  } else {
    __CrestBranch(81524, 52413, 0);

  }
  }
# 1591 "xmltok_impl.c"
  goto switch_break;
  case_4:
  {
  {
  __CrestLoad(81539, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81538, (unsigned long )0, (long long )113);
  __CrestApply2(81537, 12, (long long )((int const )*ptr == 113));
# 1594 "xmltok_impl.c"
  if ((int const )*ptr == 113) {
    __CrestBranch(81540, 52417, 1);
# 1594 "xmltok_impl.c"
    goto case_113;
  } else {
    __CrestBranch(81541, 52418, 0);

  }
  }
  {
  __CrestLoad(81544, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81543, (unsigned long )0, (long long )97);
  __CrestApply2(81542, 12, (long long )((int const )*ptr == 97));
# 1605 "xmltok_impl.c"
  if ((int const )*ptr == 97) {
    __CrestBranch(81545, 52420, 1);
# 1605 "xmltok_impl.c"
    goto case_97;
  } else {
    __CrestBranch(81546, 52421, 0);

  }
  }
# 1593 "xmltok_impl.c"
  goto switch_break___1;
  case_113:
# 1595 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(81549, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81548, (unsigned long )0, (long long )117);
  __CrestApply2(81547, 12, (long long )((int const )*ptr == 117));
# 1596 "xmltok_impl.c"
  if ((int const )*ptr == 117) {
    __CrestBranch(81550, 52425, 1);
# 1597 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(81554, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(81553, (unsigned long )0, (long long )111);
    __CrestApply2(81552, 12, (long long )((int const )*ptr == 111));
# 1598 "xmltok_impl.c"
    if ((int const )*ptr == 111) {
      __CrestBranch(81555, 52427, 1);
# 1599 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(81559, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(81558, (unsigned long )0, (long long )116);
      __CrestApply2(81557, 12, (long long )((int const )*ptr == 116));
# 1600 "xmltok_impl.c"
      if ((int const )*ptr == 116) {
        __CrestBranch(81560, 52429, 1);
        __CrestLoad(81562, (unsigned long )0, (long long )34);
        __CrestStore(81563, (unsigned long )(& __retres5));
# 1601 "xmltok_impl.c"
        __retres5 = 34;
# 1601 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(81561, 52431, 0);

      }
      }
    } else {
      __CrestBranch(81556, 52432, 0);

    }
    }
  } else {
    __CrestBranch(81551, 52433, 0);

  }
  }
# 1604 "xmltok_impl.c"
  goto switch_break___1;
  case_97:
# 1606 "xmltok_impl.c"
  ptr ++;
  {
  __CrestLoad(81566, (unsigned long )ptr, (long long )*ptr);
  __CrestLoad(81565, (unsigned long )0, (long long )112);
  __CrestApply2(81564, 12, (long long )((int const )*ptr == 112));
# 1607 "xmltok_impl.c"
  if ((int const )*ptr == 112) {
    __CrestBranch(81567, 52437, 1);
# 1608 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(81571, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(81570, (unsigned long )0, (long long )111);
    __CrestApply2(81569, 12, (long long )((int const )*ptr == 111));
# 1609 "xmltok_impl.c"
    if ((int const )*ptr == 111) {
      __CrestBranch(81572, 52439, 1);
# 1610 "xmltok_impl.c"
      ptr ++;
      {
      __CrestLoad(81576, (unsigned long )ptr, (long long )*ptr);
      __CrestLoad(81575, (unsigned long )0, (long long )115);
      __CrestApply2(81574, 12, (long long )((int const )*ptr == 115));
# 1611 "xmltok_impl.c"
      if ((int const )*ptr == 115) {
        __CrestBranch(81577, 52441, 1);
        __CrestLoad(81579, (unsigned long )0, (long long )39);
        __CrestStore(81580, (unsigned long )(& __retres5));
# 1612 "xmltok_impl.c"
        __retres5 = 39;
# 1612 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(81578, 52443, 0);

      }
      }
    } else {
      __CrestBranch(81573, 52444, 0);

    }
    }
  } else {
    __CrestBranch(81568, 52445, 0);

  }
  }
# 1615 "xmltok_impl.c"
  goto switch_break___1;
  switch_break___1: ;
  }
  switch_break: ;
  }
  __CrestLoad(81581, (unsigned long )0, (long long )0);
  __CrestStore(81582, (unsigned long )(& __retres5));
# 1618 "xmltok_impl.c"
  __retres5 = 0;
  return_label:
  {
  __CrestLoad(81583, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(81584);
# 1567 "xmltok_impl.c"
  return (__retres5);
  }
}
}
# 1621 "xmltok_impl.c"
static int normal_sameName(ENCODING const *enc , char const *ptr1 , char const *ptr2 )
{
  char const *tmp ;
  char const *tmp___0 ;
  char const *tmp___1 ;
  char const *tmp___2 ;
  char const *tmp___3 ;
  char const *tmp___4 ;
  char const *tmp___5 ;
  char const *tmp___6 ;
  char const *tmp___7 ;
  char const *tmp___8 ;
  struct normal_encoding *mem_20 ;
  struct normal_encoding *mem_21 ;
  int __retres22 ;

  {
  __CrestCall(81585, 857);

  {
# 1624 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1625 "xmltok_impl.c"
    mem_20 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81588, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81587, (unsigned long )0, (long long )7);
    __CrestApply2(81586, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 7));
# 1630 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 7) {
      __CrestBranch(81589, 52458, 1);
# 1630 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(81590, 52459, 0);

    }
    }
    {
    __CrestLoad(81593, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81592, (unsigned long )0, (long long )6);
    __CrestApply2(81591, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 6));
# 1630 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 6) {
      __CrestBranch(81594, 52461, 1);
# 1630 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(81595, 52462, 0);

    }
    }
    {
    __CrestLoad(81598, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81597, (unsigned long )0, (long long )5);
    __CrestApply2(81596, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 5));
# 1630 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 5) {
      __CrestBranch(81599, 52464, 1);
# 1630 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(81600, 52465, 0);

    }
    }
    {
    __CrestLoad(81603, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81602, (unsigned long )0, (long long )27);
    __CrestApply2(81601, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 27));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 27) {
      __CrestBranch(81604, 52467, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81605, 52468, 0);

    }
    }
    {
    __CrestLoad(81608, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81607, (unsigned long )0, (long long )26);
    __CrestApply2(81606, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 26));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 26) {
      __CrestBranch(81609, 52470, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81610, 52471, 0);

    }
    }
    {
    __CrestLoad(81613, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81612, (unsigned long )0, (long long )25);
    __CrestApply2(81611, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 25));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 25) {
      __CrestBranch(81614, 52473, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81615, 52474, 0);

    }
    }
    {
    __CrestLoad(81618, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81617, (unsigned long )0, (long long )24);
    __CrestApply2(81616, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 24));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 24) {
      __CrestBranch(81619, 52476, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81620, 52477, 0);

    }
    }
    {
    __CrestLoad(81623, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81622, (unsigned long )0, (long long )23);
    __CrestApply2(81621, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 23));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 23) {
      __CrestBranch(81624, 52479, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81625, 52480, 0);

    }
    }
    {
    __CrestLoad(81628, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81627, (unsigned long )0, (long long )22);
    __CrestApply2(81626, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 22));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 22) {
      __CrestBranch(81629, 52482, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81630, 52483, 0);

    }
    }
    {
    __CrestLoad(81633, (unsigned long )(& mem_20->type[(unsigned char )*ptr1]), (long long )mem_20->type[(unsigned char )*ptr1]);
    __CrestLoad(81632, (unsigned long )0, (long long )29);
    __CrestApply2(81631, 12, (long long )((int )mem_20->type[(unsigned char )*ptr1] == 29));
# 1644 "xmltok_impl.c"
    if ((int )mem_20->type[(unsigned char )*ptr1] == 29) {
      __CrestBranch(81634, 52485, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81635, 52486, 0);

    }
    }
# 1660 "xmltok_impl.c"
    goto switch_default;
    case_7:
# 1630 "xmltok_impl.c"
    tmp = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___0 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(81638, (unsigned long )tmp, (long long )*tmp);
    __CrestLoad(81637, (unsigned long )tmp___0, (long long )*tmp___0);
    __CrestApply2(81636, 13, (long long )((int const )*tmp != (int const )*tmp___0));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp != (int const )*tmp___0) {
      __CrestBranch(81639, 52490, 1);
      __CrestLoad(81641, (unsigned long )0, (long long )0);
      __CrestStore(81642, (unsigned long )(& __retres22));
# 1630 "xmltok_impl.c"
      __retres22 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81640, 52492, 0);

    }
    }
    case_6:
# 1630 "xmltok_impl.c"
    tmp___1 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___2 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(81645, (unsigned long )tmp___1, (long long )*tmp___1);
    __CrestLoad(81644, (unsigned long )tmp___2, (long long )*tmp___2);
    __CrestApply2(81643, 13, (long long )((int const )*tmp___1 != (int const )*tmp___2));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___1 != (int const )*tmp___2) {
      __CrestBranch(81646, 52495, 1);
      __CrestLoad(81648, (unsigned long )0, (long long )0);
      __CrestStore(81649, (unsigned long )(& __retres22));
# 1630 "xmltok_impl.c"
      __retres22 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81647, 52497, 0);

    }
    }
    case_5:
# 1630 "xmltok_impl.c"
    tmp___3 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___4 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(81652, (unsigned long )tmp___3, (long long )*tmp___3);
    __CrestLoad(81651, (unsigned long )tmp___4, (long long )*tmp___4);
    __CrestApply2(81650, 13, (long long )((int const )*tmp___3 != (int const )*tmp___4));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___3 != (int const )*tmp___4) {
      __CrestBranch(81653, 52500, 1);
      __CrestLoad(81655, (unsigned long )0, (long long )0);
      __CrestStore(81656, (unsigned long )(& __retres22));
# 1630 "xmltok_impl.c"
      __retres22 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81654, 52502, 0);

    }
    }
# 1633 "xmltok_impl.c"
    tmp___5 = ptr1;
# 1633 "xmltok_impl.c"
    ptr1 ++;
# 1633 "xmltok_impl.c"
    tmp___6 = ptr2;
# 1633 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(81659, (unsigned long )tmp___5, (long long )*tmp___5);
    __CrestLoad(81658, (unsigned long )tmp___6, (long long )*tmp___6);
    __CrestApply2(81657, 13, (long long )((int const )*tmp___5 != (int const )*tmp___6));
# 1633 "xmltok_impl.c"
    if ((int const )*tmp___5 != (int const )*tmp___6) {
      __CrestBranch(81660, 52505, 1);
      __CrestLoad(81662, (unsigned long )0, (long long )0);
      __CrestStore(81663, (unsigned long )(& __retres22));
# 1634 "xmltok_impl.c"
      __retres22 = 0;
# 1634 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81661, 52507, 0);

    }
    }
# 1635 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1645 "xmltok_impl.c"
    tmp___7 = ptr2;
# 1645 "xmltok_impl.c"
    ptr2 ++;
# 1645 "xmltok_impl.c"
    tmp___8 = ptr1;
# 1645 "xmltok_impl.c"
    ptr1 ++;
    {
    __CrestLoad(81666, (unsigned long )tmp___7, (long long )*tmp___7);
    __CrestLoad(81665, (unsigned long )tmp___8, (long long )*tmp___8);
    __CrestApply2(81664, 13, (long long )((int const )*tmp___7 != (int const )*tmp___8));
# 1645 "xmltok_impl.c"
    if ((int const )*tmp___7 != (int const )*tmp___8) {
      __CrestBranch(81667, 52511, 1);
      __CrestLoad(81669, (unsigned long )0, (long long )0);
      __CrestStore(81670, (unsigned long )(& __retres22));
# 1646 "xmltok_impl.c"
      __retres22 = 0;
# 1646 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81668, 52513, 0);

    }
    }
# 1659 "xmltok_impl.c"
    goto switch_break;
    switch_default:
    {
    __CrestLoad(81673, (unsigned long )ptr1, (long long )*ptr1);
    __CrestLoad(81672, (unsigned long )ptr2, (long long )*ptr2);
    __CrestApply2(81671, 12, (long long )((int const )*ptr1 == (int const )*ptr2));
# 1661 "xmltok_impl.c"
    if ((int const )*ptr1 == (int const )*ptr2) {
      __CrestBranch(81674, 52516, 1);
      __CrestLoad(81676, (unsigned long )0, (long long )1);
      __CrestStore(81677, (unsigned long )(& __retres22));
# 1662 "xmltok_impl.c"
      __retres22 = 1;
# 1662 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81675, 52518, 0);

    }
    }
    {
# 1663 "xmltok_impl.c"
    mem_21 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81680, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81679, (unsigned long )0, (long long )27);
    __CrestApply2(81678, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 27));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 27) {
      __CrestBranch(81681, 52523, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81682, 52524, 0);

    }
    }
    {
    __CrestLoad(81685, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81684, (unsigned long )0, (long long )26);
    __CrestApply2(81683, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 26));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 26) {
      __CrestBranch(81686, 52526, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81687, 52527, 0);

    }
    }
    {
    __CrestLoad(81690, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81689, (unsigned long )0, (long long )25);
    __CrestApply2(81688, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 25));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 25) {
      __CrestBranch(81691, 52529, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81692, 52530, 0);

    }
    }
    {
    __CrestLoad(81695, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81694, (unsigned long )0, (long long )24);
    __CrestApply2(81693, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 24));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 24) {
      __CrestBranch(81696, 52532, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81697, 52533, 0);

    }
    }
    {
    __CrestLoad(81700, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81699, (unsigned long )0, (long long )23);
    __CrestApply2(81698, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 23));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 23) {
      __CrestBranch(81701, 52535, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81702, 52536, 0);

    }
    }
    {
    __CrestLoad(81705, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81704, (unsigned long )0, (long long )22);
    __CrestApply2(81703, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 22));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 22) {
      __CrestBranch(81706, 52538, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81707, 52539, 0);

    }
    }
    {
    __CrestLoad(81710, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81709, (unsigned long )0, (long long )29);
    __CrestApply2(81708, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 29));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 29) {
      __CrestBranch(81711, 52541, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81712, 52542, 0);

    }
    }
    {
    __CrestLoad(81715, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81714, (unsigned long )0, (long long )7);
    __CrestApply2(81713, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 7));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 7) {
      __CrestBranch(81716, 52544, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81717, 52545, 0);

    }
    }
    {
    __CrestLoad(81720, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81719, (unsigned long )0, (long long )6);
    __CrestApply2(81718, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 6));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 6) {
      __CrestBranch(81721, 52547, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81722, 52548, 0);

    }
    }
    {
    __CrestLoad(81725, (unsigned long )(& mem_21->type[(unsigned char )*ptr2]), (long long )mem_21->type[(unsigned char )*ptr2]);
    __CrestLoad(81724, (unsigned long )0, (long long )5);
    __CrestApply2(81723, 12, (long long )((int )mem_21->type[(unsigned char )*ptr2] == 5));
# 1675 "xmltok_impl.c"
    if ((int )mem_21->type[(unsigned char )*ptr2] == 5) {
      __CrestBranch(81726, 52550, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(81727, 52551, 0);

    }
    }
# 1677 "xmltok_impl.c"
    goto switch_default___0;
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___0:
    case_23___0:
    case_22___0:
    case_29___0:
    case_7___0:
    case_6___0:
    case_5___0:
    __CrestLoad(81728, (unsigned long )0, (long long )0);
    __CrestStore(81729, (unsigned long )(& __retres22));
# 1676 "xmltok_impl.c"
    __retres22 = 0;
# 1676 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
    __CrestLoad(81730, (unsigned long )0, (long long )1);
    __CrestStore(81731, (unsigned long )(& __retres22));
# 1678 "xmltok_impl.c"
    __retres22 = 1;
# 1678 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    }
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(81732, (unsigned long )(& __retres22), (long long )__retres22);
  __CrestReturn(81733);
# 1621 "xmltok_impl.c"
  return (__retres22);
  }
}
}
# 1685 "xmltok_impl.c"
static int normal_nameMatchesAscii(ENCODING const *enc , char const *ptr1 , char const *end1 ,
                                   char const *ptr2 )
{
  int __retres5 ;

  {
  __CrestCall(81734, 858);

  {
# 1689 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(81737, (unsigned long )ptr2, (long long )*ptr2);
    __CrestLoad(81736, (unsigned long )0, (long long )0);
    __CrestApply2(81735, 13, (long long )(*ptr2 != 0));
# 1689 "xmltok_impl.c"
    if (*ptr2 != 0) {
      __CrestBranch(81738, 52565, 1);

    } else {
      __CrestBranch(81739, 52566, 0);
# 1689 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(81742, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
    __CrestLoad(81741, (unsigned long )(& end1), (long long )((unsigned long )end1));
    __CrestApply2(81740, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
# 1690 "xmltok_impl.c"
    if ((unsigned long )ptr1 == (unsigned long )end1) {
      __CrestBranch(81743, 52568, 1);
      __CrestLoad(81745, (unsigned long )0, (long long )0);
      __CrestStore(81746, (unsigned long )(& __retres5));
# 1691 "xmltok_impl.c"
      __retres5 = 0;
# 1691 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81744, 52570, 0);

    }
    }
    {
    __CrestLoad(81749, (unsigned long )ptr1, (long long )*ptr1);
    __CrestLoad(81748, (unsigned long )ptr2, (long long )*ptr2);
    __CrestApply2(81747, 13, (long long )((int const )*ptr1 != (int const )*ptr2));
# 1692 "xmltok_impl.c"
    if ((int const )*ptr1 != (int const )*ptr2) {
      __CrestBranch(81750, 52572, 1);
      __CrestLoad(81752, (unsigned long )0, (long long )0);
      __CrestStore(81753, (unsigned long )(& __retres5));
# 1693 "xmltok_impl.c"
      __retres5 = 0;
# 1693 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(81751, 52574, 0);

    }
    }
# 1689 "xmltok_impl.c"
    ptr1 ++;
# 1689 "xmltok_impl.c"
    ptr2 ++;
  }
  while_break: ;
  }
  __CrestLoad(81756, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
  __CrestLoad(81755, (unsigned long )(& end1), (long long )((unsigned long )end1));
  __CrestApply2(81754, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
  __CrestStore(81757, (unsigned long )(& __retres5));
# 1695 "xmltok_impl.c"
  __retres5 = (unsigned long )ptr1 == (unsigned long )end1;
  return_label:
  {
  __CrestLoad(81758, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(81759);
# 1685 "xmltok_impl.c"
  return (__retres5);
  }
}
}
# 1698 "xmltok_impl.c"
static int normal_nameLength(ENCODING const *enc , char const *ptr )
{
  char const *start ;
  struct normal_encoding *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(81760, 859);
# 1701 "xmltok_impl.c"
  start = ptr;
  {
# 1702 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1703 "xmltok_impl.c"
    mem_4 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81763, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81762, (unsigned long )0, (long long )5);
    __CrestApply2(81761, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 5));
# 1706 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(81764, 52587, 1);
# 1706 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(81765, 52588, 0);

    }
    }
    {
    __CrestLoad(81768, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81767, (unsigned long )0, (long long )6);
    __CrestApply2(81766, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 6));
# 1706 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(81769, 52590, 1);
# 1706 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(81770, 52591, 0);

    }
    }
    {
    __CrestLoad(81773, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81772, (unsigned long )0, (long long )7);
    __CrestApply2(81771, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 7));
# 1706 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(81774, 52593, 1);
# 1706 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(81775, 52594, 0);

    }
    }
    {
    __CrestLoad(81778, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81777, (unsigned long )0, (long long )27);
    __CrestApply2(81776, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 27));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 27) {
      __CrestBranch(81779, 52596, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81780, 52597, 0);

    }
    }
    {
    __CrestLoad(81783, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81782, (unsigned long )0, (long long )26);
    __CrestApply2(81781, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 26));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 26) {
      __CrestBranch(81784, 52599, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81785, 52600, 0);

    }
    }
    {
    __CrestLoad(81788, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81787, (unsigned long )0, (long long )25);
    __CrestApply2(81786, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 25));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 25) {
      __CrestBranch(81789, 52602, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81790, 52603, 0);

    }
    }
    {
    __CrestLoad(81793, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81792, (unsigned long )0, (long long )24);
    __CrestApply2(81791, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 24));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 24) {
      __CrestBranch(81794, 52605, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81795, 52606, 0);

    }
    }
    {
    __CrestLoad(81798, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81797, (unsigned long )0, (long long )23);
    __CrestApply2(81796, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 23));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 23) {
      __CrestBranch(81799, 52608, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81800, 52609, 0);

    }
    }
    {
    __CrestLoad(81803, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81802, (unsigned long )0, (long long )22);
    __CrestApply2(81801, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 22));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 22) {
      __CrestBranch(81804, 52611, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81805, 52612, 0);

    }
    }
    {
    __CrestLoad(81808, (unsigned long )(& mem_4->type[(unsigned char )*ptr]), (long long )mem_4->type[(unsigned char )*ptr]);
    __CrestLoad(81807, (unsigned long )0, (long long )29);
    __CrestApply2(81806, 12, (long long )((int )mem_4->type[(unsigned char )*ptr] == 29));
# 1716 "xmltok_impl.c"
    if ((int )mem_4->type[(unsigned char )*ptr] == 29) {
      __CrestBranch(81809, 52614, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(81810, 52615, 0);

    }
    }
# 1719 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1706 "xmltok_impl.c"
    ptr += 2;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1706 "xmltok_impl.c"
    ptr += 3;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1706 "xmltok_impl.c"
    ptr += 4;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1717 "xmltok_impl.c"
    ptr ++;
# 1718 "xmltok_impl.c"
    goto switch_break;
    switch_default:
    __CrestLoad(81813, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(81812, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(81811, 18, (long long )(ptr - start));
    __CrestStore(81814, (unsigned long )(& __retres5));
# 1720 "xmltok_impl.c"
    __retres5 = (int )(ptr - start);
# 1720 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(81815, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(81816);
# 1698 "xmltok_impl.c"
  return (__retres5);
  }
}
}
# 1725 "xmltok_impl.c"
static char const *normal_skipS(ENCODING const *enc , char const *ptr )
{
  struct normal_encoding *mem_3 ;
  char const *__retres4 ;

  {
  __CrestCall(81817, 860);

  {
# 1728 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1729 "xmltok_impl.c"
    mem_3 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81820, (unsigned long )(& mem_3->type[(unsigned char )*ptr]), (long long )mem_3->type[(unsigned char )*ptr]);
    __CrestLoad(81819, (unsigned long )0, (long long )21);
    __CrestApply2(81818, 12, (long long )((int )mem_3->type[(unsigned char )*ptr] == 21));
# 1732 "xmltok_impl.c"
    if ((int )mem_3->type[(unsigned char )*ptr] == 21) {
      __CrestBranch(81821, 52637, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(81822, 52638, 0);

    }
    }
    {
    __CrestLoad(81825, (unsigned long )(& mem_3->type[(unsigned char )*ptr]), (long long )mem_3->type[(unsigned char )*ptr]);
    __CrestLoad(81824, (unsigned long )0, (long long )9);
    __CrestApply2(81823, 12, (long long )((int )mem_3->type[(unsigned char )*ptr] == 9));
# 1732 "xmltok_impl.c"
    if ((int )mem_3->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(81826, 52640, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(81827, 52641, 0);

    }
    }
    {
    __CrestLoad(81830, (unsigned long )(& mem_3->type[(unsigned char )*ptr]), (long long )mem_3->type[(unsigned char )*ptr]);
    __CrestLoad(81829, (unsigned long )0, (long long )10);
    __CrestApply2(81828, 12, (long long )((int )mem_3->type[(unsigned char )*ptr] == 10));
# 1732 "xmltok_impl.c"
    if ((int )mem_3->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(81831, 52643, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(81832, 52644, 0);

    }
    }
# 1735 "xmltok_impl.c"
    goto switch_default;
    case_21:
    case_9:
    case_10:
# 1733 "xmltok_impl.c"
    ptr ++;
# 1734 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1736 "xmltok_impl.c"
    __retres4 = ptr;
# 1736 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestReturn(81833);
# 1725 "xmltok_impl.c"
  return (__retres4);
  }
}
}
# 1741 "xmltok_impl.c"
static void normal_updatePosition(ENCODING const *enc , char const *ptr , char const *end ,
                                  POSITION *pos )
{
  struct normal_encoding *mem_5 ;
  struct normal_encoding *mem_6 ;

  {
  __CrestCall(81834, 861);

  {
# 1747 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(81837, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(81836, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(81835, 16, (long long )((unsigned long )ptr < (unsigned long )end));
# 1747 "xmltok_impl.c"
    if ((unsigned long )ptr < (unsigned long )end) {
      __CrestBranch(81838, 52657, 1);

    } else {
      __CrestBranch(81839, 52658, 0);
# 1747 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1748 "xmltok_impl.c"
    mem_5 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81842, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(81841, (unsigned long )0, (long long )5);
    __CrestApply2(81840, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 5));
# 1753 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 5) {
      __CrestBranch(81843, 52663, 1);
# 1753 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(81844, 52664, 0);

    }
    }
    {
    __CrestLoad(81847, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(81846, (unsigned long )0, (long long )6);
    __CrestApply2(81845, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 6));
# 1753 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 6) {
      __CrestBranch(81848, 52666, 1);
# 1753 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(81849, 52667, 0);

    }
    }
    {
    __CrestLoad(81852, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(81851, (unsigned long )0, (long long )7);
    __CrestApply2(81850, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 7));
# 1753 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 7) {
      __CrestBranch(81853, 52669, 1);
# 1753 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(81854, 52670, 0);

    }
    }
    {
    __CrestLoad(81857, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(81856, (unsigned long )0, (long long )10);
    __CrestApply2(81855, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 10));
# 1755 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 10) {
      __CrestBranch(81858, 52672, 1);
# 1755 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(81859, 52673, 0);

    }
    }
    {
    __CrestLoad(81862, (unsigned long )(& mem_5->type[(unsigned char )*ptr]), (long long )mem_5->type[(unsigned char )*ptr]);
    __CrestLoad(81861, (unsigned long )0, (long long )9);
    __CrestApply2(81860, 12, (long long )((int )mem_5->type[(unsigned char )*ptr] == 9));
# 1760 "xmltok_impl.c"
    if ((int )mem_5->type[(unsigned char )*ptr] == 9) {
      __CrestBranch(81863, 52675, 1);
# 1760 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(81864, 52676, 0);

    }
    }
# 1767 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1753 "xmltok_impl.c"
    ptr += 2;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1753 "xmltok_impl.c"
    ptr += 3;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1753 "xmltok_impl.c"
    ptr += 4;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_10:
    __CrestLoad(81865, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(81866, (unsigned long )(& pos->columnNumber));
# 1756 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
    __CrestLoad(81869, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(81868, (unsigned long )0, (long long )1UL);
    __CrestApply2(81867, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(81870, (unsigned long )(& pos->lineNumber));
# 1757 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1758 "xmltok_impl.c"
    ptr ++;
# 1759 "xmltok_impl.c"
    goto switch_break;
    case_9:
    __CrestLoad(81873, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(81872, (unsigned long )0, (long long )1UL);
    __CrestApply2(81871, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(81874, (unsigned long )(& pos->lineNumber));
# 1761 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1762 "xmltok_impl.c"
    ptr ++;
    {
    __CrestLoad(81877, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(81876, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(81875, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1763 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(81878, 52688, 1);
      {
# 1763 "xmltok_impl.c"
      mem_6 = (struct normal_encoding *)enc;
      {
      __CrestLoad(81882, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
      __CrestLoad(81881, (unsigned long )0, (long long )10);
      __CrestApply2(81880, 12, (long long )((int )mem_6->type[(unsigned char )*ptr] == 10));
# 1763 "xmltok_impl.c"
      if ((int )mem_6->type[(unsigned char )*ptr] == 10) {
        __CrestBranch(81883, 52691, 1);
# 1764 "xmltok_impl.c"
        ptr ++;
      } else {
        __CrestBranch(81884, 52692, 0);

      }
      }
      }
    } else {
      __CrestBranch(81879, 52693, 0);

    }
    }
    __CrestLoad(81885, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(81886, (unsigned long )(& pos->columnNumber));
# 1765 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
# 1766 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1768 "xmltok_impl.c"
    ptr ++;
# 1769 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    }
    __CrestLoad(81889, (unsigned long )(& pos->columnNumber), (long long )pos->columnNumber);
    __CrestLoad(81888, (unsigned long )0, (long long )1UL);
    __CrestApply2(81887, 0, (long long )(pos->columnNumber + 1UL));
    __CrestStore(81890, (unsigned long )(& pos->columnNumber));
# 1771 "xmltok_impl.c"
    (pos->columnNumber) ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(81891);
# 1741 "xmltok_impl.c"
  return;
  }
}
}
# 321 "xmltok.c"
static void utf8_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                        char **toP , char const *toLim )
{
  char *to ;
  char const *from ;
  char const *mem_8 ;

  {
  __CrestCall(81892, 862);

  {
  __CrestLoad(81899, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
  __CrestLoad(81898, (unsigned long )fromP, (long long )((unsigned long )*fromP));
  __CrestApply2(81897, 18, (long long )(fromLim - *fromP));
  __CrestLoad(81896, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
  __CrestLoad(81895, (unsigned long )toP, (long long )((unsigned long )*toP));
  __CrestApply2(81894, 18, (long long )(toLim - (char const *)*toP));
  __CrestApply2(81893, 14, (long long )(fromLim - *fromP > toLim - (char const *)*toP));
# 328 "xmltok.c"
  if (fromLim - *fromP > toLim - (char const *)*toP) {
    __CrestBranch(81900, 52704, 1);
# 330 "xmltok.c"
    fromLim = *fromP + (toLim - (char const *)*toP);
    {
# 330 "xmltok.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(81904, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
      __CrestLoad(81903, (unsigned long )fromP, (long long )((unsigned long )*fromP));
      __CrestApply2(81902, 14, (long long )((unsigned long )fromLim > (unsigned long )*fromP));
# 330 "xmltok.c"
      if ((unsigned long )fromLim > (unsigned long )*fromP) {
        __CrestBranch(81905, 52709, 1);

      } else {
        __CrestBranch(81906, 52710, 0);
# 330 "xmltok.c"
        goto while_break;
      }
      }
      {
# 331 "xmltok.c"
      mem_8 = fromLim + -1;
      {
      __CrestLoad(81911, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(81910, (unsigned long )0, (long long )192);
      __CrestApply2(81909, 5, (long long )((int )((unsigned char )*mem_8) & 192));
      __CrestLoad(81908, (unsigned long )0, (long long )128);
      __CrestApply2(81907, 13, (long long )(((int )((unsigned char )*mem_8) & 192) != 128));
# 331 "xmltok.c"
      if (((int )((unsigned char )*mem_8) & 192) != 128) {
        __CrestBranch(81912, 52714, 1);
# 332 "xmltok.c"
        goto while_break;
      } else {
        __CrestBranch(81913, 52715, 0);

      }
      }
      }
# 330 "xmltok.c"
      fromLim --;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(81901, 52718, 0);

  }
  }
# 334 "xmltok.c"
  to = *toP;
# 334 "xmltok.c"
  from = *fromP;
  {
# 334 "xmltok.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(81916, (unsigned long )(& from), (long long )((unsigned long )from));
    __CrestLoad(81915, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(81914, 13, (long long )((unsigned long )from != (unsigned long )fromLim));
# 334 "xmltok.c"
    if ((unsigned long )from != (unsigned long )fromLim) {
      __CrestBranch(81917, 52724, 1);

    } else {
      __CrestBranch(81918, 52725, 0);
# 334 "xmltok.c"
      goto while_break___0;
    }
    }
    __CrestLoad(81919, (unsigned long )from, (long long )*from);
    __CrestStore(81920, (unsigned long )to);
# 335 "xmltok.c"
    *to = (char )*from;
# 334 "xmltok.c"
    from ++;
# 334 "xmltok.c"
    to ++;
  }
  while_break___0: ;
  }
# 336 "xmltok.c"
  *fromP = from;
# 337 "xmltok.c"
  *toP = to;

  {
  __CrestReturn(81921);
# 321 "xmltok.c"
  return;
  }
}
}
# 340 "xmltok.c"
static void utf8_toUtf16(ENCODING const *enc , char const **fromP , char const *fromLim ,
                         unsigned short **toP , unsigned short const *toLim )
{
  unsigned short *to ;
  char const *from ;
  unsigned short *tmp ;
  unsigned short *tmp___0 ;
  unsigned long n ;
  unsigned short *tmp___1 ;
  char const *tmp___2 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  unsigned short *mem_23 ;
  unsigned short *mem_24 ;

  {
  __CrestCall(81922, 863);
# 345 "xmltok.c"
  to = *toP;
# 346 "xmltok.c"
  from = *fromP;
  {
# 347 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(81925, (unsigned long )(& from), (long long )((unsigned long )from));
    __CrestLoad(81924, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(81923, 13, (long long )((unsigned long )from != (unsigned long )fromLim));
# 347 "xmltok.c"
    if ((unsigned long )from != (unsigned long )fromLim) {
      __CrestBranch(81926, 52736, 1);
      {
      __CrestLoad(81930, (unsigned long )(& to), (long long )((unsigned long )to));
      __CrestLoad(81929, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(81928, 13, (long long )((unsigned long )to != (unsigned long )toLim));
# 347 "xmltok.c"
      if ((unsigned long )to != (unsigned long )toLim) {
        __CrestBranch(81931, 52737, 1);

      } else {
        __CrestBranch(81932, 52738, 0);
# 347 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(81927, 52739, 0);
# 347 "xmltok.c"
      goto while_break;
    }
    }
    {
# 348 "xmltok.c"
    mem_13 = (struct normal_encoding *)enc;
    {
    {
    __CrestLoad(81935, (unsigned long )(& mem_13->type[(unsigned char )*from]), (long long )mem_13->type[(unsigned char )*from]);
    __CrestLoad(81934, (unsigned long )0, (long long )5);
    __CrestApply2(81933, 12, (long long )((int )mem_13->type[(unsigned char )*from] == 5));
# 349 "xmltok.c"
    if ((int )mem_13->type[(unsigned char )*from] == 5) {
      __CrestBranch(81936, 52744, 1);
# 349 "xmltok.c"
      goto case_5;
    } else {
      __CrestBranch(81937, 52745, 0);

    }
    }
    {
    __CrestLoad(81940, (unsigned long )(& mem_13->type[(unsigned char )*from]), (long long )mem_13->type[(unsigned char )*from]);
    __CrestLoad(81939, (unsigned long )0, (long long )6);
    __CrestApply2(81938, 12, (long long )((int )mem_13->type[(unsigned char )*from] == 6));
# 353 "xmltok.c"
    if ((int )mem_13->type[(unsigned char )*from] == 6) {
      __CrestBranch(81941, 52747, 1);
# 353 "xmltok.c"
      goto case_6;
    } else {
      __CrestBranch(81942, 52748, 0);

    }
    }
    {
    __CrestLoad(81945, (unsigned long )(& mem_13->type[(unsigned char )*from]), (long long )mem_13->type[(unsigned char )*from]);
    __CrestLoad(81944, (unsigned long )0, (long long )7);
    __CrestApply2(81943, 12, (long long )((int )mem_13->type[(unsigned char )*from] == 7));
# 358 "xmltok.c"
    if ((int )mem_13->type[(unsigned char )*from] == 7) {
      __CrestBranch(81946, 52750, 1);
# 358 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(81947, 52751, 0);

    }
    }
# 372 "xmltok.c"
    goto switch_default;
    case_5:
# 350 "xmltok.c"
    tmp = to;
# 350 "xmltok.c"
    to ++;
# 350 "xmltok.c"
    mem_14 = from + 0;
# 350 "xmltok.c"
    mem_15 = from + 1;
    __CrestLoad(81956, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(81955, (unsigned long )0, (long long )31);
    __CrestApply2(81954, 5, (long long )((int const )*mem_14 & 31));
    __CrestLoad(81953, (unsigned long )0, (long long )6);
    __CrestApply2(81952, 8, (long long )(((int const )*mem_14 & 31) << 6));
    __CrestLoad(81951, (unsigned long )mem_15, (long long )*mem_15);
    __CrestLoad(81950, (unsigned long )0, (long long )63);
    __CrestApply2(81949, 5, (long long )((int const )*mem_15 & 63));
    __CrestApply2(81948, 6, (long long )((((int const )*mem_14 & 31) << 6) | ((int const )*mem_15 & 63)));
    __CrestStore(81957, (unsigned long )tmp);
# 350 "xmltok.c"
    *tmp = (unsigned short )((((int const )*mem_14 & 31) << 6) | ((int const )*mem_15 & 63));
# 351 "xmltok.c"
    from += 2;
# 352 "xmltok.c"
    goto switch_break;
    case_6:
# 354 "xmltok.c"
    tmp___0 = to;
# 354 "xmltok.c"
    to ++;
# 354 "xmltok.c"
    mem_16 = from + 0;
# 354 "xmltok.c"
    mem_17 = from + 1;
# 354 "xmltok.c"
    mem_18 = from + 2;
    __CrestLoad(81972, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(81971, (unsigned long )0, (long long )15);
    __CrestApply2(81970, 5, (long long )((int const )*mem_16 & 15));
    __CrestLoad(81969, (unsigned long )0, (long long )12);
    __CrestApply2(81968, 8, (long long )(((int const )*mem_16 & 15) << 12));
    __CrestLoad(81967, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(81966, (unsigned long )0, (long long )63);
    __CrestApply2(81965, 5, (long long )((int const )*mem_17 & 63));
    __CrestLoad(81964, (unsigned long )0, (long long )6);
    __CrestApply2(81963, 8, (long long )(((int const )*mem_17 & 63) << 6));
    __CrestApply2(81962, 6, (long long )((((int const )*mem_16 & 15) << 12) | (((int const )*mem_17 & 63) << 6)));
    __CrestLoad(81961, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(81960, (unsigned long )0, (long long )63);
    __CrestApply2(81959, 5, (long long )((int const )*mem_18 & 63));
    __CrestApply2(81958, 6, (long long )(((((int const )*mem_16 & 15) << 12) | (((int const )*mem_17 & 63) << 6)) | ((int const )*mem_18 & 63)));
    __CrestStore(81973, (unsigned long )tmp___0);
# 354 "xmltok.c"
    *tmp___0 = (unsigned short )(((((int const )*mem_16 & 15) << 12) | (((int const )*mem_17 & 63) << 6)) | ((int const )*mem_18 & 63));
# 356 "xmltok.c"
    from += 3;
# 357 "xmltok.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(81978, (unsigned long )(& to), (long long )((unsigned long )to));
    __CrestLoad(81977, (unsigned long )0, (long long )1);
    __CrestApply2(81976, 18, (long long )((unsigned long )(to + 1)));
    __CrestLoad(81975, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestApply2(81974, 12, (long long )((unsigned long )(to + 1) == (unsigned long )toLim));
# 361 "xmltok.c"
    if ((unsigned long )(to + 1) == (unsigned long )toLim) {
      __CrestBranch(81979, 52758, 1);
# 362 "xmltok.c"
      goto after;
    } else {
      __CrestBranch(81980, 52759, 0);

    }
    }
# 363 "xmltok.c"
    mem_19 = from + 0;
# 363 "xmltok.c"
    mem_20 = from + 1;
# 363 "xmltok.c"
    mem_21 = from + 2;
# 363 "xmltok.c"
    mem_22 = from + 3;
    __CrestLoad(82001, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(82000, (unsigned long )0, (long long )7);
    __CrestApply2(81999, 5, (long long )((int const )*mem_19 & 7));
    __CrestLoad(81998, (unsigned long )0, (long long )18);
    __CrestApply2(81997, 8, (long long )(((int const )*mem_19 & 7) << 18));
    __CrestLoad(81996, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(81995, (unsigned long )0, (long long )63);
    __CrestApply2(81994, 5, (long long )((int const )*mem_20 & 63));
    __CrestLoad(81993, (unsigned long )0, (long long )12);
    __CrestApply2(81992, 8, (long long )(((int const )*mem_20 & 63) << 12));
    __CrestApply2(81991, 6, (long long )((((int const )*mem_19 & 7) << 18) | (((int const )*mem_20 & 63) << 12)));
    __CrestLoad(81990, (unsigned long )mem_21, (long long )*mem_21);
    __CrestLoad(81989, (unsigned long )0, (long long )63);
    __CrestApply2(81988, 5, (long long )((int const )*mem_21 & 63));
    __CrestLoad(81987, (unsigned long )0, (long long )6);
    __CrestApply2(81986, 8, (long long )(((int const )*mem_21 & 63) << 6));
    __CrestApply2(81985, 6, (long long )(((((int const )*mem_19 & 7) << 18) | (((int const )*mem_20 & 63) << 12)) | (((int const )*mem_21 & 63) << 6)));
    __CrestLoad(81984, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(81983, (unsigned long )0, (long long )63);
    __CrestApply2(81982, 5, (long long )((int const )*mem_22 & 63));
    __CrestApply2(81981, 6, (long long )((((((int const )*mem_19 & 7) << 18) | (((int const )*mem_20 & 63) << 12)) | (((int const )*mem_21 & 63) << 6)) | ((int const )*mem_22 & 63)));
    __CrestStore(82002, (unsigned long )(& n));
# 363 "xmltok.c"
    n = (unsigned long )((((((int const )*mem_19 & 7) << 18) | (((int const )*mem_20 & 63) << 12)) | (((int const )*mem_21 & 63) << 6)) | ((int const )*mem_22 & 63));
    __CrestLoad(82005, (unsigned long )(& n), (long long )n);
    __CrestLoad(82004, (unsigned long )0, (long long )65536UL);
    __CrestApply2(82003, 1, (long long )(n - 65536UL));
    __CrestStore(82006, (unsigned long )(& n));
# 365 "xmltok.c"
    n -= 65536UL;
# 366 "xmltok.c"
    mem_23 = to + 0;
    __CrestLoad(82011, (unsigned long )(& n), (long long )n);
    __CrestLoad(82010, (unsigned long )0, (long long )10);
    __CrestApply2(82009, 9, (long long )(n >> 10));
    __CrestLoad(82008, (unsigned long )0, (long long )55296UL);
    __CrestApply2(82007, 6, (long long )((n >> 10) | 55296UL));
    __CrestStore(82012, (unsigned long )mem_23);
# 366 "xmltok.c"
    *mem_23 = (unsigned short )((n >> 10) | 55296UL);
# 367 "xmltok.c"
    mem_24 = to + 1;
    __CrestLoad(82017, (unsigned long )(& n), (long long )n);
    __CrestLoad(82016, (unsigned long )0, (long long )1023UL);
    __CrestApply2(82015, 5, (long long )(n & 1023UL));
    __CrestLoad(82014, (unsigned long )0, (long long )56320UL);
    __CrestApply2(82013, 6, (long long )((n & 1023UL) | 56320UL));
    __CrestStore(82018, (unsigned long )mem_24);
# 367 "xmltok.c"
    *mem_24 = (unsigned short )((n & 1023UL) | 56320UL);
# 368 "xmltok.c"
    to += 2;
# 369 "xmltok.c"
    from += 4;
# 371 "xmltok.c"
    goto switch_break;
    switch_default:
# 373 "xmltok.c"
    tmp___1 = to;
# 373 "xmltok.c"
    to ++;
# 373 "xmltok.c"
    tmp___2 = from;
# 373 "xmltok.c"
    from ++;
    __CrestLoad(82019, (unsigned long )tmp___2, (long long )*tmp___2);
    __CrestStore(82020, (unsigned long )tmp___1);
# 373 "xmltok.c"
    *tmp___1 = (unsigned short )*tmp___2;
# 374 "xmltok.c"
    goto switch_break;
    switch_break: ;
    }
    }
  }
  while_break: ;
  }
  after:
# 378 "xmltok.c"
  *fromP = from;
# 379 "xmltok.c"
  *toP = to;

  {
  __CrestReturn(82021);
# 340 "xmltok.c"
  return;
  }
}
}
# 383 "xmltok.c"
static struct normal_encoding const utf8_encoding_ns =
# 383 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & utf8_toUtf8, & utf8_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)10, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)9,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)21, (unsigned char)16,
                                                           (unsigned char)12, (unsigned char)19,
                                                           (unsigned char)28, (unsigned char)30,
                                                           (unsigned char)3, (unsigned char)13,
                                                           (unsigned char)31, (unsigned char)32,
                                                           (unsigned char)33, (unsigned char)34,
                                                           (unsigned char)35, (unsigned char)27,
                                                           (unsigned char)26, (unsigned char)17,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)23, (unsigned char)18,
                                                           (unsigned char)2, (unsigned char)14,
                                                           (unsigned char)11, (unsigned char)15,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)20,
                                                           (unsigned char)28, (unsigned char)4,
                                                           (unsigned char)28, (unsigned char)22,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)28,
                                                           (unsigned char)36, (unsigned char)28,
                                                           (unsigned char)28, (unsigned char)28,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)1, (unsigned char)1},
    & utf8_isName2, & utf8_isName3, & isNever, & utf8_isNmstrt2, & utf8_isNmstrt3,
    & isNever, & utf8_isInvalid2, & utf8_isInvalid3, & utf8_isInvalid4};
# 393 "xmltok.c"
static struct normal_encoding const utf8_encoding =
# 393 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & utf8_toUtf8, & utf8_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)10, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)9,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)21, (unsigned char)16,
                                                           (unsigned char)12, (unsigned char)19,
                                                           (unsigned char)28, (unsigned char)30,
                                                           (unsigned char)3, (unsigned char)13,
                                                           (unsigned char)31, (unsigned char)32,
                                                           (unsigned char)33, (unsigned char)34,
                                                           (unsigned char)35, (unsigned char)27,
                                                           (unsigned char)26, (unsigned char)17,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)22, (unsigned char)18,
                                                           (unsigned char)2, (unsigned char)14,
                                                           (unsigned char)11, (unsigned char)15,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)20,
                                                           (unsigned char)28, (unsigned char)4,
                                                           (unsigned char)28, (unsigned char)22,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)28,
                                                           (unsigned char)36, (unsigned char)28,
                                                           (unsigned char)28, (unsigned char)28,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)1, (unsigned char)1},
    & utf8_isName2, & utf8_isName3, & isNever, & utf8_isNmstrt2, & utf8_isNmstrt3,
    & isNever, & utf8_isInvalid2, & utf8_isInvalid3, & utf8_isInvalid4};
# 406 "xmltok.c"
static struct normal_encoding const internal_utf8_encoding_ns =
# 406 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & utf8_toUtf8, & utf8_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)10, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)21, (unsigned char)16,
                                                           (unsigned char)12, (unsigned char)19,
                                                           (unsigned char)28, (unsigned char)30,
                                                           (unsigned char)3, (unsigned char)13,
                                                           (unsigned char)31, (unsigned char)32,
                                                           (unsigned char)33, (unsigned char)34,
                                                           (unsigned char)35, (unsigned char)27,
                                                           (unsigned char)26, (unsigned char)17,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)23, (unsigned char)18,
                                                           (unsigned char)2, (unsigned char)14,
                                                           (unsigned char)11, (unsigned char)15,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)20,
                                                           (unsigned char)28, (unsigned char)4,
                                                           (unsigned char)28, (unsigned char)22,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)28,
                                                           (unsigned char)36, (unsigned char)28,
                                                           (unsigned char)28, (unsigned char)28,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)1, (unsigned char)1},
    & utf8_isName2, & utf8_isName3, & isNever, & utf8_isNmstrt2, & utf8_isNmstrt3,
    & isNever, & utf8_isInvalid2, & utf8_isInvalid3, & utf8_isInvalid4};
# 417 "xmltok.c"
static struct normal_encoding const internal_utf8_encoding =
# 417 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & utf8_toUtf8, & utf8_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)10, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)21,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)21, (unsigned char)16,
                                                           (unsigned char)12, (unsigned char)19,
                                                           (unsigned char)28, (unsigned char)30,
                                                           (unsigned char)3, (unsigned char)13,
                                                           (unsigned char)31, (unsigned char)32,
                                                           (unsigned char)33, (unsigned char)34,
                                                           (unsigned char)35, (unsigned char)27,
                                                           (unsigned char)26, (unsigned char)17,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)25, (unsigned char)25,
                                                           (unsigned char)22, (unsigned char)18,
                                                           (unsigned char)2, (unsigned char)14,
                                                           (unsigned char)11, (unsigned char)15,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)20,
                                                           (unsigned char)28, (unsigned char)4,
                                                           (unsigned char)28, (unsigned char)22,
                                                           (unsigned char)28, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)24,
                                                           (unsigned char)24, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)22,
                                                           (unsigned char)22, (unsigned char)28,
                                                           (unsigned char)36, (unsigned char)28,
                                                           (unsigned char)28, (unsigned char)28,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)8, (unsigned char)8,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)5, (unsigned char)5,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)6, (unsigned char)6,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)7,
                                                           (unsigned char)7, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)0, (unsigned char)0,
                                                           (unsigned char)1, (unsigned char)1},
    & utf8_isName2, & utf8_isName3, & isNever, & utf8_isNmstrt2, & utf8_isNmstrt3,
    & isNever, & utf8_isInvalid2, & utf8_isInvalid3, & utf8_isInvalid4};
# 428 "xmltok.c"
static void latin1_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                          char **toP , char const *toLim )
{
  unsigned char c ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char const *tmp___2 ;
  char const *mem_11 ;

  {
  __CrestCall(82022, 864);

  {
# 433 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82025, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(82024, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82023, 12, (long long )((unsigned long )*fromP == (unsigned long )fromLim));
# 435 "xmltok.c"
    if ((unsigned long )*fromP == (unsigned long )fromLim) {
      __CrestBranch(82026, 52773, 1);
# 436 "xmltok.c"
      goto while_break;
    } else {
      __CrestBranch(82027, 52774, 0);

    }
    }
# 437 "xmltok.c"
    mem_11 = *fromP;
    __CrestLoad(82028, (unsigned long )mem_11, (long long )*mem_11);
    __CrestStore(82029, (unsigned long )(& c));
# 437 "xmltok.c"
    c = (unsigned char )*mem_11;
    {
    __CrestLoad(82034, (unsigned long )(& c), (long long )c);
    __CrestLoad(82033, (unsigned long )0, (long long )128);
    __CrestApply2(82032, 5, (long long )((int )c & 128));
    __CrestLoad(82031, (unsigned long )0, (long long )0);
    __CrestApply2(82030, 13, (long long )(((int )c & 128) != 0));
# 438 "xmltok.c"
    if (((int )c & 128) != 0) {
      __CrestBranch(82035, 52777, 1);
      {
      __CrestLoad(82041, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestLoad(82040, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestApply2(82039, 18, (long long )(toLim - (char const *)*toP));
      __CrestLoad(82038, (unsigned long )0, (long long )2L);
      __CrestApply2(82037, 16, (long long )(toLim - (char const *)*toP < 2L));
# 439 "xmltok.c"
      if (toLim - (char const *)*toP < 2L) {
        __CrestBranch(82042, 52778, 1);
# 440 "xmltok.c"
        goto while_break;
      } else {
        __CrestBranch(82043, 52779, 0);

      }
      }
# 441 "xmltok.c"
      tmp = *toP;
# 441 "xmltok.c"
      (*toP) ++;
      __CrestLoad(82048, (unsigned long )(& c), (long long )c);
      __CrestLoad(82047, (unsigned long )0, (long long )6);
      __CrestApply2(82046, 9, (long long )((int )c >> 6));
      __CrestLoad(82045, (unsigned long )0, (long long )192);
      __CrestApply2(82044, 6, (long long )(((int )c >> 6) | 192));
      __CrestStore(82049, (unsigned long )tmp);
# 441 "xmltok.c"
      *tmp = (char )(((int )c >> 6) | 192);
# 442 "xmltok.c"
      tmp___0 = *toP;
# 442 "xmltok.c"
      (*toP) ++;
      __CrestLoad(82054, (unsigned long )(& c), (long long )c);
      __CrestLoad(82053, (unsigned long )0, (long long )63);
      __CrestApply2(82052, 5, (long long )((int )c & 63));
      __CrestLoad(82051, (unsigned long )0, (long long )128);
      __CrestApply2(82050, 6, (long long )(((int )c & 63) | 128));
      __CrestStore(82055, (unsigned long )tmp___0);
# 442 "xmltok.c"
      *tmp___0 = (char )(((int )c & 63) | 128);
# 443 "xmltok.c"
      (*fromP) ++;
    } else {
      __CrestBranch(82036, 52781, 0);
      {
      __CrestLoad(82058, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82057, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82056, 12, (long long )((unsigned long )*toP == (unsigned long )toLim));
# 446 "xmltok.c"
      if ((unsigned long )*toP == (unsigned long )toLim) {
        __CrestBranch(82059, 52782, 1);
# 447 "xmltok.c"
        goto while_break;
      } else {
        __CrestBranch(82060, 52783, 0);

      }
      }
# 448 "xmltok.c"
      tmp___1 = *toP;
# 448 "xmltok.c"
      (*toP) ++;
# 448 "xmltok.c"
      tmp___2 = *fromP;
# 448 "xmltok.c"
      (*fromP) ++;
      __CrestLoad(82061, (unsigned long )tmp___2, (long long )*tmp___2);
      __CrestStore(82062, (unsigned long )tmp___1);
# 448 "xmltok.c"
      *tmp___1 = (char )*tmp___2;
    }
    }
  }
  while_break: ;
  }

  {
  __CrestReturn(82063);
# 428 "xmltok.c"
  return;
  }
}
}
# 453 "xmltok.c"
static void latin1_toUtf16(ENCODING const *enc , char const **fromP , char const *fromLim ,
                           unsigned short **toP , unsigned short const *toLim )
{
  unsigned short *tmp ;
  char const *tmp___0 ;

  {
  __CrestCall(82064, 865);

  {
# 458 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82067, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(82066, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82065, 13, (long long )((unsigned long )*fromP != (unsigned long )fromLim));
# 458 "xmltok.c"
    if ((unsigned long )*fromP != (unsigned long )fromLim) {
      __CrestBranch(82068, 52792, 1);
      {
      __CrestLoad(82072, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82071, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82070, 13, (long long )((unsigned long )*toP != (unsigned long )toLim));
# 458 "xmltok.c"
      if ((unsigned long )*toP != (unsigned long )toLim) {
        __CrestBranch(82073, 52793, 1);

      } else {
        __CrestBranch(82074, 52794, 0);
# 458 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(82069, 52795, 0);
# 458 "xmltok.c"
      goto while_break;
    }
    }
# 459 "xmltok.c"
    tmp = *toP;
# 459 "xmltok.c"
    (*toP) ++;
# 459 "xmltok.c"
    tmp___0 = *fromP;
# 459 "xmltok.c"
    (*fromP) ++;
    __CrestLoad(82075, (unsigned long )tmp___0, (long long )*tmp___0);
    __CrestStore(82076, (unsigned long )tmp);
# 459 "xmltok.c"
    *tmp = (unsigned short )((unsigned char )*tmp___0);
  }
  while_break: ;
  }

  {
  __CrestReturn(82077);
# 453 "xmltok.c"
  return;
  }
}
}
# 464 "xmltok.c"
static struct normal_encoding const latin1_encoding_ns =
# 464 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & latin1_toUtf8, & latin1_toUtf16, 1, (char)0, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)21,
                                                               (unsigned char)10,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)9, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)21,
                                                               (unsigned char)16,
                                                               (unsigned char)12,
                                                               (unsigned char)19,
                                                               (unsigned char)28,
                                                               (unsigned char)30,
                                                               (unsigned char)3, (unsigned char)13,
                                                               (unsigned char)31,
                                                               (unsigned char)32,
                                                               (unsigned char)33,
                                                               (unsigned char)34,
                                                               (unsigned char)35,
                                                               (unsigned char)27,
                                                               (unsigned char)26,
                                                               (unsigned char)17,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)23,
                                                               (unsigned char)18,
                                                               (unsigned char)2, (unsigned char)14,
                                                               (unsigned char)11,
                                                               (unsigned char)15,
                                                               (unsigned char)28,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)20,
                                                               (unsigned char)28,
                                                               (unsigned char)4, (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)36,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)26,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 475 "xmltok.c"
static struct normal_encoding const latin1_encoding =
# 475 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & latin1_toUtf8, & latin1_toUtf16, 1, (char)0, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)21,
                                                               (unsigned char)10,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)9, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)0,
                                                               (unsigned char)0, (unsigned char)21,
                                                               (unsigned char)16,
                                                               (unsigned char)12,
                                                               (unsigned char)19,
                                                               (unsigned char)28,
                                                               (unsigned char)30,
                                                               (unsigned char)3, (unsigned char)13,
                                                               (unsigned char)31,
                                                               (unsigned char)32,
                                                               (unsigned char)33,
                                                               (unsigned char)34,
                                                               (unsigned char)35,
                                                               (unsigned char)27,
                                                               (unsigned char)26,
                                                               (unsigned char)17,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)25,
                                                               (unsigned char)22,
                                                               (unsigned char)18,
                                                               (unsigned char)2, (unsigned char)14,
                                                               (unsigned char)11,
                                                               (unsigned char)15,
                                                               (unsigned char)28,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)20,
                                                               (unsigned char)28,
                                                               (unsigned char)4, (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)24,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)36,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)26,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)28,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22,
                                                               (unsigned char)22},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 486 "xmltok.c"
static void ascii_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                         char **toP , char const *toLim )
{
  char *tmp ;
  char const *tmp___0 ;

  {
  __CrestCall(82078, 866);

  {
# 491 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82081, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(82080, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82079, 13, (long long )((unsigned long )*fromP != (unsigned long )fromLim));
# 491 "xmltok.c"
    if ((unsigned long )*fromP != (unsigned long )fromLim) {
      __CrestBranch(82082, 52804, 1);
      {
      __CrestLoad(82086, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82085, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82084, 13, (long long )((unsigned long )*toP != (unsigned long )toLim));
# 491 "xmltok.c"
      if ((unsigned long )*toP != (unsigned long )toLim) {
        __CrestBranch(82087, 52805, 1);

      } else {
        __CrestBranch(82088, 52806, 0);
# 491 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(82083, 52807, 0);
# 491 "xmltok.c"
      goto while_break;
    }
    }
# 492 "xmltok.c"
    tmp = *toP;
# 492 "xmltok.c"
    (*toP) ++;
# 492 "xmltok.c"
    tmp___0 = *fromP;
# 492 "xmltok.c"
    (*fromP) ++;
    __CrestLoad(82089, (unsigned long )tmp___0, (long long )*tmp___0);
    __CrestStore(82090, (unsigned long )tmp);
# 492 "xmltok.c"
    *tmp = (char )*tmp___0;
  }
  while_break: ;
  }

  {
  __CrestReturn(82091);
# 486 "xmltok.c"
  return;
  }
}
}
# 497 "xmltok.c"
static struct normal_encoding const ascii_encoding_ns =
# 497 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & ascii_toUtf8, & latin1_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)21,
                                                              (unsigned char)10, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)9,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)21, (unsigned char)16,
                                                              (unsigned char)12, (unsigned char)19,
                                                              (unsigned char)28, (unsigned char)30,
                                                              (unsigned char)3, (unsigned char)13,
                                                              (unsigned char)31, (unsigned char)32,
                                                              (unsigned char)33, (unsigned char)34,
                                                              (unsigned char)35, (unsigned char)27,
                                                              (unsigned char)26, (unsigned char)17,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)23, (unsigned char)18,
                                                              (unsigned char)2, (unsigned char)14,
                                                              (unsigned char)11, (unsigned char)15,
                                                              (unsigned char)28, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)20,
                                                              (unsigned char)28, (unsigned char)4,
                                                              (unsigned char)28, (unsigned char)22,
                                                              (unsigned char)28, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)28,
                                                              (unsigned char)36, (unsigned char)28,
                                                              (unsigned char)28, (unsigned char)28},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 508 "xmltok.c"
static struct normal_encoding const ascii_encoding =
# 508 "xmltok.c"
     {{{& normal_prologTok, & normal_contentTok, & normal_cdataSectionTok, & normal_ignoreSectionTok},
     {& normal_attributeValueTok, & normal_entityValueTok}, & normal_sameName, & normal_nameMatchesAscii,
     & normal_nameLength, & normal_skipS, & normal_getAtts, & normal_charRefNumber,
     & normal_predefinedEntityName, & normal_updatePosition, & normal_isPublicId,
     & ascii_toUtf8, & latin1_toUtf16, 1, (char)1, (char)0}, {(unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)21,
                                                              (unsigned char)10, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)9,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)0, (unsigned char)0,
                                                              (unsigned char)21, (unsigned char)16,
                                                              (unsigned char)12, (unsigned char)19,
                                                              (unsigned char)28, (unsigned char)30,
                                                              (unsigned char)3, (unsigned char)13,
                                                              (unsigned char)31, (unsigned char)32,
                                                              (unsigned char)33, (unsigned char)34,
                                                              (unsigned char)35, (unsigned char)27,
                                                              (unsigned char)26, (unsigned char)17,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)25, (unsigned char)25,
                                                              (unsigned char)22, (unsigned char)18,
                                                              (unsigned char)2, (unsigned char)14,
                                                              (unsigned char)11, (unsigned char)15,
                                                              (unsigned char)28, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)20,
                                                              (unsigned char)28, (unsigned char)4,
                                                              (unsigned char)28, (unsigned char)22,
                                                              (unsigned char)28, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)24,
                                                              (unsigned char)24, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)22,
                                                              (unsigned char)22, (unsigned char)28,
                                                              (unsigned char)36, (unsigned char)28,
                                                              (unsigned char)28, (unsigned char)28},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 519 "xmltok.c"
static int unicode_byte_type(char hi , char lo )
{
  int __retres3 ;

  {
  __CrestCall(82094, 867);
  __CrestStore(82093, (unsigned long )(& lo));
  __CrestStore(82092, (unsigned long )(& hi));
  {
  {
  __CrestLoad(82097, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82096, (unsigned long )0, (long long )219);
  __CrestApply2(82095, 12, (long long )((int )((unsigned char )hi) == 219));
# 523 "xmltok.c"
  if ((int )((unsigned char )hi) == 219) {
    __CrestBranch(82098, 52814, 1);
# 523 "xmltok.c"
    goto case_219;
  } else {
    __CrestBranch(82099, 52815, 0);

  }
  }
  {
  __CrestLoad(82102, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82101, (unsigned long )0, (long long )218);
  __CrestApply2(82100, 12, (long long )((int )((unsigned char )hi) == 218));
# 523 "xmltok.c"
  if ((int )((unsigned char )hi) == 218) {
    __CrestBranch(82103, 52817, 1);
# 523 "xmltok.c"
    goto case_219;
  } else {
    __CrestBranch(82104, 52818, 0);

  }
  }
  {
  __CrestLoad(82107, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82106, (unsigned long )0, (long long )217);
  __CrestApply2(82105, 12, (long long )((int )((unsigned char )hi) == 217));
# 523 "xmltok.c"
  if ((int )((unsigned char )hi) == 217) {
    __CrestBranch(82108, 52820, 1);
# 523 "xmltok.c"
    goto case_219;
  } else {
    __CrestBranch(82109, 52821, 0);

  }
  }
  {
  __CrestLoad(82112, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82111, (unsigned long )0, (long long )216);
  __CrestApply2(82110, 12, (long long )((int )((unsigned char )hi) == 216));
# 523 "xmltok.c"
  if ((int )((unsigned char )hi) == 216) {
    __CrestBranch(82113, 52823, 1);
# 523 "xmltok.c"
    goto case_219;
  } else {
    __CrestBranch(82114, 52824, 0);

  }
  }
  {
  __CrestLoad(82117, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82116, (unsigned long )0, (long long )223);
  __CrestApply2(82115, 12, (long long )((int )((unsigned char )hi) == 223));
# 525 "xmltok.c"
  if ((int )((unsigned char )hi) == 223) {
    __CrestBranch(82118, 52826, 1);
# 525 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(82119, 52827, 0);

  }
  }
  {
  __CrestLoad(82122, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82121, (unsigned long )0, (long long )222);
  __CrestApply2(82120, 12, (long long )((int )((unsigned char )hi) == 222));
# 525 "xmltok.c"
  if ((int )((unsigned char )hi) == 222) {
    __CrestBranch(82123, 52829, 1);
# 525 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(82124, 52830, 0);

  }
  }
  {
  __CrestLoad(82127, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82126, (unsigned long )0, (long long )221);
  __CrestApply2(82125, 12, (long long )((int )((unsigned char )hi) == 221));
# 525 "xmltok.c"
  if ((int )((unsigned char )hi) == 221) {
    __CrestBranch(82128, 52832, 1);
# 525 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(82129, 52833, 0);

  }
  }
  {
  __CrestLoad(82132, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82131, (unsigned long )0, (long long )220);
  __CrestApply2(82130, 12, (long long )((int )((unsigned char )hi) == 220));
# 525 "xmltok.c"
  if ((int )((unsigned char )hi) == 220) {
    __CrestBranch(82133, 52835, 1);
# 525 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(82134, 52836, 0);

  }
  }
  {
  __CrestLoad(82137, (unsigned long )(& hi), (long long )hi);
  __CrestLoad(82136, (unsigned long )0, (long long )255);
  __CrestApply2(82135, 12, (long long )((int )((unsigned char )hi) == 255));
# 527 "xmltok.c"
  if ((int )((unsigned char )hi) == 255) {
    __CrestBranch(82138, 52838, 1);
# 527 "xmltok.c"
    goto case_255;
  } else {
    __CrestBranch(82139, 52839, 0);

  }
  }
# 522 "xmltok.c"
  goto switch_break;
  case_219:
  case_218:
  case_217:
  case_216:
  __CrestLoad(82140, (unsigned long )0, (long long )7);
  __CrestStore(82141, (unsigned long )(& __retres3));
# 524 "xmltok.c"
  __retres3 = 7;
# 524 "xmltok.c"
  goto return_label;
  case_223:
  case_222:
  case_221:
  case_220:
  __CrestLoad(82142, (unsigned long )0, (long long )8);
  __CrestStore(82143, (unsigned long )(& __retres3));
# 526 "xmltok.c"
  __retres3 = 8;
# 526 "xmltok.c"
  goto return_label;
  case_255:
  {
  {
  __CrestLoad(82146, (unsigned long )(& lo), (long long )lo);
  __CrestLoad(82145, (unsigned long )0, (long long )254);
  __CrestApply2(82144, 12, (long long )((int )((unsigned char )lo) == 254));
# 530 "xmltok.c"
  if ((int )((unsigned char )lo) == 254) {
    __CrestBranch(82147, 52847, 1);
# 530 "xmltok.c"
    goto case_254;
  } else {
    __CrestBranch(82148, 52848, 0);

  }
  }
  {
  __CrestLoad(82151, (unsigned long )(& lo), (long long )lo);
  __CrestLoad(82150, (unsigned long )0, (long long )255);
  __CrestApply2(82149, 12, (long long )((int )((unsigned char )lo) == 255));
# 530 "xmltok.c"
  if ((int )((unsigned char )lo) == 255) {
    __CrestBranch(82152, 52850, 1);
# 530 "xmltok.c"
    goto case_254;
  } else {
    __CrestBranch(82153, 52851, 0);

  }
  }
# 528 "xmltok.c"
  goto switch_break___0;
  case_254:
  case_255___0:
  __CrestLoad(82154, (unsigned long )0, (long long )0);
  __CrestStore(82155, (unsigned long )(& __retres3));
# 531 "xmltok.c"
  __retres3 = 0;
# 531 "xmltok.c"
  goto return_label;
  switch_break___0: ;
  }
# 533 "xmltok.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(82156, (unsigned long )0, (long long )29);
  __CrestStore(82157, (unsigned long )(& __retres3));
# 535 "xmltok.c"
  __retres3 = 29;
  return_label:
  {
  __CrestLoad(82158, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(82159);
# 519 "xmltok.c"
  return (__retres3);
  }
}
}
# 620 "xmltok.c"
static void little2_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                           char **toP , char const *toLim )
{
  char const *from ;
  int plane ;
  unsigned char lo2 ;
  unsigned char lo ;
  unsigned char hi ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  char *tmp___6 ;
  char *tmp___7 ;
  char *tmp___8 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;

  {
  __CrestCall(82160, 868);
# 620 "xmltok.c"
  from = *fromP;
  {
# 620 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82163, (unsigned long )(& from), (long long )((unsigned long )from));
    __CrestLoad(82162, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82161, 13, (long long )((unsigned long )from != (unsigned long )fromLim));
# 620 "xmltok.c"
    if ((unsigned long )from != (unsigned long )fromLim) {
      __CrestBranch(82164, 52865, 1);

    } else {
      __CrestBranch(82165, 52866, 0);
# 620 "xmltok.c"
      goto while_break;
    }
    }
# 620 "xmltok.c"
    mem_21 = from + 0;
    __CrestLoad(82166, (unsigned long )mem_21, (long long )*mem_21);
    __CrestStore(82167, (unsigned long )(& lo));
# 620 "xmltok.c"
    lo = (unsigned char )*mem_21;
# 620 "xmltok.c"
    mem_22 = from + 1;
    __CrestLoad(82168, (unsigned long )mem_22, (long long )*mem_22);
    __CrestStore(82169, (unsigned long )(& hi));
# 620 "xmltok.c"
    hi = (unsigned char )*mem_22;
    {
    {
    __CrestLoad(82172, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82171, (unsigned long )0, (long long )0);
    __CrestApply2(82170, 12, (long long )((int )hi == 0));
# 620 "xmltok.c"
    if ((int )hi == 0) {
      __CrestBranch(82173, 52870, 1);
# 620 "xmltok.c"
      goto case_0;
    } else {
      __CrestBranch(82174, 52871, 0);

    }
    }
    {
    __CrestLoad(82177, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82176, (unsigned long )0, (long long )7);
    __CrestApply2(82175, 12, (long long )((int )hi == 7));
# 620 "xmltok.c"
    if ((int )hi == 7) {
      __CrestBranch(82178, 52873, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82179, 52874, 0);

    }
    }
    {
    __CrestLoad(82182, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82181, (unsigned long )0, (long long )6);
    __CrestApply2(82180, 12, (long long )((int )hi == 6));
# 620 "xmltok.c"
    if ((int )hi == 6) {
      __CrestBranch(82183, 52876, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82184, 52877, 0);

    }
    }
    {
    __CrestLoad(82187, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82186, (unsigned long )0, (long long )5);
    __CrestApply2(82185, 12, (long long )((int )hi == 5));
# 620 "xmltok.c"
    if ((int )hi == 5) {
      __CrestBranch(82188, 52879, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82189, 52880, 0);

    }
    }
    {
    __CrestLoad(82192, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82191, (unsigned long )0, (long long )4);
    __CrestApply2(82190, 12, (long long )((int )hi == 4));
# 620 "xmltok.c"
    if ((int )hi == 4) {
      __CrestBranch(82193, 52882, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82194, 52883, 0);

    }
    }
    {
    __CrestLoad(82197, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82196, (unsigned long )0, (long long )3);
    __CrestApply2(82195, 12, (long long )((int )hi == 3));
# 620 "xmltok.c"
    if ((int )hi == 3) {
      __CrestBranch(82198, 52885, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82199, 52886, 0);

    }
    }
    {
    __CrestLoad(82202, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82201, (unsigned long )0, (long long )2);
    __CrestApply2(82200, 12, (long long )((int )hi == 2));
# 620 "xmltok.c"
    if ((int )hi == 2) {
      __CrestBranch(82203, 52888, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82204, 52889, 0);

    }
    }
    {
    __CrestLoad(82207, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82206, (unsigned long )0, (long long )1);
    __CrestApply2(82205, 12, (long long )((int )hi == 1));
# 620 "xmltok.c"
    if ((int )hi == 1) {
      __CrestBranch(82208, 52891, 1);
# 620 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82209, 52892, 0);

    }
    }
    {
    __CrestLoad(82212, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82211, (unsigned long )0, (long long )219);
    __CrestApply2(82210, 12, (long long )((int )hi == 219));
# 620 "xmltok.c"
    if ((int )hi == 219) {
      __CrestBranch(82213, 52894, 1);
# 620 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82214, 52895, 0);

    }
    }
    {
    __CrestLoad(82217, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82216, (unsigned long )0, (long long )218);
    __CrestApply2(82215, 12, (long long )((int )hi == 218));
# 620 "xmltok.c"
    if ((int )hi == 218) {
      __CrestBranch(82218, 52897, 1);
# 620 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82219, 52898, 0);

    }
    }
    {
    __CrestLoad(82222, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82221, (unsigned long )0, (long long )217);
    __CrestApply2(82220, 12, (long long )((int )hi == 217));
# 620 "xmltok.c"
    if ((int )hi == 217) {
      __CrestBranch(82223, 52900, 1);
# 620 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82224, 52901, 0);

    }
    }
    {
    __CrestLoad(82227, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82226, (unsigned long )0, (long long )216);
    __CrestApply2(82225, 12, (long long )((int )hi == 216));
# 620 "xmltok.c"
    if ((int )hi == 216) {
      __CrestBranch(82228, 52903, 1);
# 620 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82229, 52904, 0);

    }
    }
# 620 "xmltok.c"
    goto switch_default;
    case_0:
    {
    __CrestLoad(82232, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82231, (unsigned long )0, (long long )128);
    __CrestApply2(82230, 16, (long long )((int )lo < 128));
# 620 "xmltok.c"
    if ((int )lo < 128) {
      __CrestBranch(82233, 52907, 1);
      {
      __CrestLoad(82237, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82236, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82235, 12, (long long )((unsigned long )*toP == (unsigned long )toLim));
# 620 "xmltok.c"
      if ((unsigned long )*toP == (unsigned long )toLim) {
        __CrestBranch(82238, 52908, 1);
# 620 "xmltok.c"
        *fromP = from;
# 620 "xmltok.c"
        goto return_label;
      } else {
        __CrestBranch(82239, 52911, 0);

      }
      }
# 620 "xmltok.c"
      tmp = *toP;
# 620 "xmltok.c"
      (*toP) ++;
      __CrestLoad(82240, (unsigned long )(& lo), (long long )lo);
      __CrestStore(82241, (unsigned long )tmp);
# 620 "xmltok.c"
      *tmp = (char )lo;
# 620 "xmltok.c"
      goto switch_break;
    } else {
      __CrestBranch(82234, 52914, 0);

    }
    }
    case_7:
    case_6:
    case_5:
    case_4:
    case_3:
    case_2:
    case_1:
    {
    __CrestLoad(82246, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82245, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82244, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82243, (unsigned long )0, (long long )2L);
    __CrestApply2(82242, 16, (long long )(toLim - (char const *)*toP < 2L));
# 620 "xmltok.c"
    if (toLim - (char const *)*toP < 2L) {
      __CrestBranch(82247, 52916, 1);
# 620 "xmltok.c"
      *fromP = from;
# 620 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82248, 52919, 0);

    }
    }
# 620 "xmltok.c"
    tmp___0 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82257, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82256, (unsigned long )0, (long long )6);
    __CrestApply2(82255, 9, (long long )((int )lo >> 6));
    __CrestLoad(82254, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82253, (unsigned long )0, (long long )2);
    __CrestApply2(82252, 8, (long long )((int )hi << 2));
    __CrestApply2(82251, 6, (long long )(((int )lo >> 6) | ((int )hi << 2)));
    __CrestLoad(82250, (unsigned long )0, (long long )192);
    __CrestApply2(82249, 6, (long long )((((int )lo >> 6) | ((int )hi << 2)) | 192));
    __CrestStore(82258, (unsigned long )tmp___0);
# 620 "xmltok.c"
    *tmp___0 = (char )((((int )lo >> 6) | ((int )hi << 2)) | 192);
# 620 "xmltok.c"
    tmp___1 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82263, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82262, (unsigned long )0, (long long )63);
    __CrestApply2(82261, 5, (long long )((int )lo & 63));
    __CrestLoad(82260, (unsigned long )0, (long long )128);
    __CrestApply2(82259, 6, (long long )(((int )lo & 63) | 128));
    __CrestStore(82264, (unsigned long )tmp___1);
# 620 "xmltok.c"
    *tmp___1 = (char )(((int )lo & 63) | 128);
# 620 "xmltok.c"
    goto switch_break;
    switch_default:
    {
    __CrestLoad(82269, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82268, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82267, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82266, (unsigned long )0, (long long )3L);
    __CrestApply2(82265, 16, (long long )(toLim - (char const *)*toP < 3L));
# 620 "xmltok.c"
    if (toLim - (char const *)*toP < 3L) {
      __CrestBranch(82270, 52923, 1);
# 620 "xmltok.c"
      *fromP = from;
# 620 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82271, 52926, 0);

    }
    }
# 620 "xmltok.c"
    tmp___2 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82276, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82275, (unsigned long )0, (long long )4);
    __CrestApply2(82274, 9, (long long )((int )hi >> 4));
    __CrestLoad(82273, (unsigned long )0, (long long )224);
    __CrestApply2(82272, 6, (long long )(((int )hi >> 4) | 224));
    __CrestStore(82277, (unsigned long )tmp___2);
# 620 "xmltok.c"
    *tmp___2 = (char )(((int )hi >> 4) | 224);
# 620 "xmltok.c"
    tmp___3 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82288, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82287, (unsigned long )0, (long long )15);
    __CrestApply2(82286, 5, (long long )((int )hi & 15));
    __CrestLoad(82285, (unsigned long )0, (long long )2);
    __CrestApply2(82284, 8, (long long )(((int )hi & 15) << 2));
    __CrestLoad(82283, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82282, (unsigned long )0, (long long )6);
    __CrestApply2(82281, 9, (long long )((int )lo >> 6));
    __CrestApply2(82280, 6, (long long )((((int )hi & 15) << 2) | ((int )lo >> 6)));
    __CrestLoad(82279, (unsigned long )0, (long long )128);
    __CrestApply2(82278, 6, (long long )(((((int )hi & 15) << 2) | ((int )lo >> 6)) | 128));
    __CrestStore(82289, (unsigned long )tmp___3);
# 620 "xmltok.c"
    *tmp___3 = (char )(((((int )hi & 15) << 2) | ((int )lo >> 6)) | 128);
# 620 "xmltok.c"
    tmp___4 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82294, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82293, (unsigned long )0, (long long )63);
    __CrestApply2(82292, 5, (long long )((int )lo & 63));
    __CrestLoad(82291, (unsigned long )0, (long long )128);
    __CrestApply2(82290, 6, (long long )(((int )lo & 63) | 128));
    __CrestStore(82295, (unsigned long )tmp___4);
# 620 "xmltok.c"
    *tmp___4 = (char )(((int )lo & 63) | 128);
# 620 "xmltok.c"
    goto switch_break;
    case_219:
    case_218:
    case_217:
    case_216:
    {
    __CrestLoad(82300, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82299, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82298, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82297, (unsigned long )0, (long long )4L);
    __CrestApply2(82296, 16, (long long )(toLim - (char const *)*toP < 4L));
# 620 "xmltok.c"
    if (toLim - (char const *)*toP < 4L) {
      __CrestBranch(82301, 52930, 1);
# 620 "xmltok.c"
      *fromP = from;
# 620 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82302, 52933, 0);

    }
    }
    __CrestLoad(82315, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82314, (unsigned long )0, (long long )3);
    __CrestApply2(82313, 5, (long long )((int )hi & 3));
    __CrestLoad(82312, (unsigned long )0, (long long )2);
    __CrestApply2(82311, 8, (long long )(((int )hi & 3) << 2));
    __CrestLoad(82310, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82309, (unsigned long )0, (long long )6);
    __CrestApply2(82308, 9, (long long )((int )lo >> 6));
    __CrestLoad(82307, (unsigned long )0, (long long )3);
    __CrestApply2(82306, 5, (long long )(((int )lo >> 6) & 3));
    __CrestApply2(82305, 6, (long long )((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)));
    __CrestLoad(82304, (unsigned long )0, (long long )1);
    __CrestApply2(82303, 0, (long long )(((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)) + 1));
    __CrestStore(82316, (unsigned long )(& plane));
# 620 "xmltok.c"
    plane = ((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)) + 1;
# 620 "xmltok.c"
    tmp___5 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82321, (unsigned long )(& plane), (long long )plane);
    __CrestLoad(82320, (unsigned long )0, (long long )2);
    __CrestApply2(82319, 9, (long long )(plane >> 2));
    __CrestLoad(82318, (unsigned long )0, (long long )240);
    __CrestApply2(82317, 6, (long long )((plane >> 2) | 240));
    __CrestStore(82322, (unsigned long )tmp___5);
# 620 "xmltok.c"
    *tmp___5 = (char )((plane >> 2) | 240);
# 620 "xmltok.c"
    tmp___6 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82335, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82334, (unsigned long )0, (long long )2);
    __CrestApply2(82333, 9, (long long )((int )lo >> 2));
    __CrestLoad(82332, (unsigned long )0, (long long )15);
    __CrestApply2(82331, 5, (long long )(((int )lo >> 2) & 15));
    __CrestLoad(82330, (unsigned long )(& plane), (long long )plane);
    __CrestLoad(82329, (unsigned long )0, (long long )3);
    __CrestApply2(82328, 5, (long long )(plane & 3));
    __CrestLoad(82327, (unsigned long )0, (long long )4);
    __CrestApply2(82326, 8, (long long )((plane & 3) << 4));
    __CrestApply2(82325, 6, (long long )((((int )lo >> 2) & 15) | ((plane & 3) << 4)));
    __CrestLoad(82324, (unsigned long )0, (long long )128);
    __CrestApply2(82323, 6, (long long )(((((int )lo >> 2) & 15) | ((plane & 3) << 4)) | 128));
    __CrestStore(82336, (unsigned long )tmp___6);
# 620 "xmltok.c"
    *tmp___6 = (char )(((((int )lo >> 2) & 15) | ((plane & 3) << 4)) | 128);
# 620 "xmltok.c"
    from += 2;
# 620 "xmltok.c"
    mem_23 = from + 0;
    __CrestLoad(82337, (unsigned long )mem_23, (long long )*mem_23);
    __CrestStore(82338, (unsigned long )(& lo2));
# 620 "xmltok.c"
    lo2 = (unsigned char )*mem_23;
# 620 "xmltok.c"
    tmp___7 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
# 620 "xmltok.c"
    mem_24 = from + 1;
    __CrestLoad(82355, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82354, (unsigned long )0, (long long )3);
    __CrestApply2(82353, 5, (long long )((int )lo & 3));
    __CrestLoad(82352, (unsigned long )0, (long long )4);
    __CrestApply2(82351, 8, (long long )(((int )lo & 3) << 4));
    __CrestLoad(82350, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(82349, (unsigned long )0, (long long )3);
    __CrestApply2(82348, 5, (long long )((int )((unsigned char )*mem_24) & 3));
    __CrestLoad(82347, (unsigned long )0, (long long )2);
    __CrestApply2(82346, 8, (long long )(((int )((unsigned char )*mem_24) & 3) << 2));
    __CrestApply2(82345, 6, (long long )((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)));
    __CrestLoad(82344, (unsigned long )(& lo2), (long long )lo2);
    __CrestLoad(82343, (unsigned long )0, (long long )6);
    __CrestApply2(82342, 9, (long long )((int )lo2 >> 6));
    __CrestApply2(82341, 6, (long long )(((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)));
    __CrestLoad(82340, (unsigned long )0, (long long )128);
    __CrestApply2(82339, 6, (long long )((((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)) | 128));
    __CrestStore(82356, (unsigned long )tmp___7);
# 620 "xmltok.c"
    *tmp___7 = (char )((((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)) | 128);
# 620 "xmltok.c"
    tmp___8 = *toP;
# 620 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82361, (unsigned long )(& lo2), (long long )lo2);
    __CrestLoad(82360, (unsigned long )0, (long long )63);
    __CrestApply2(82359, 5, (long long )((int )lo2 & 63));
    __CrestLoad(82358, (unsigned long )0, (long long )128);
    __CrestApply2(82357, 6, (long long )(((int )lo2 & 63) | 128));
    __CrestStore(82362, (unsigned long )tmp___8);
# 620 "xmltok.c"
    *tmp___8 = (char )(((int )lo2 & 63) | 128);
# 620 "xmltok.c"
    goto switch_break;
    switch_break: ;
    }
# 620 "xmltok.c"
    from += 2;
  }
  while_break: ;
  }
# 620 "xmltok.c"
  *fromP = from;

  return_label:
  {
  __CrestReturn(82363);
# 620 "xmltok.c"
  return;
  }
}
}
# 621 "xmltok.c"
static void little2_toUtf16(ENCODING const *enc , char const **fromP , char const *fromLim ,
                            unsigned short **toP , unsigned short const *toLim )
{
  unsigned short *tmp ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;

  {
  __CrestCall(82364, 869);

  {
  __CrestLoad(82373, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
  __CrestLoad(82372, (unsigned long )fromP, (long long )((unsigned long )*fromP));
  __CrestApply2(82371, 18, (long long )(fromLim - *fromP));
  __CrestLoad(82370, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
  __CrestLoad(82369, (unsigned long )toP, (long long )((unsigned long )*toP));
  __CrestApply2(82368, 18, (long long )(toLim - (unsigned short const *)*toP));
  __CrestLoad(82367, (unsigned long )0, (long long )1);
  __CrestApply2(82366, 8, (long long )((toLim - (unsigned short const *)*toP) << 1));
  __CrestApply2(82365, 14, (long long )(fromLim - *fromP > (toLim - (unsigned short const *)*toP) << 1));
# 621 "xmltok.c"
  if (fromLim - *fromP > (toLim - (unsigned short const *)*toP) << 1) {
    __CrestBranch(82374, 52943, 1);
    {
# 621 "xmltok.c"
    mem_7 = (fromLim - 2) + 1;
    {
    __CrestLoad(82380, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(82379, (unsigned long )0, (long long )248);
    __CrestApply2(82378, 5, (long long )((int )((unsigned char )*mem_7) & 248));
    __CrestLoad(82377, (unsigned long )0, (long long )216);
    __CrestApply2(82376, 12, (long long )(((int )((unsigned char )*mem_7) & 248) == 216));
# 621 "xmltok.c"
    if (((int )((unsigned char )*mem_7) & 248) == 216) {
      __CrestBranch(82381, 52946, 1);
# 621 "xmltok.c"
      fromLim -= 2;
    } else {
      __CrestBranch(82382, 52947, 0);

    }
    }
    }
  } else {
    __CrestBranch(82375, 52948, 0);

  }
  }
  {
# 621 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82385, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(82384, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82383, 13, (long long )((unsigned long )*fromP != (unsigned long )fromLim));
# 621 "xmltok.c"
    if ((unsigned long )*fromP != (unsigned long )fromLim) {
      __CrestBranch(82386, 52953, 1);
      {
      __CrestLoad(82390, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82389, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82388, 13, (long long )((unsigned long )*toP != (unsigned long )toLim));
# 621 "xmltok.c"
      if ((unsigned long )*toP != (unsigned long )toLim) {
        __CrestBranch(82391, 52954, 1);

      } else {
        __CrestBranch(82392, 52955, 0);
# 621 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(82387, 52956, 0);
# 621 "xmltok.c"
      goto while_break;
    }
    }
# 621 "xmltok.c"
    tmp = *toP;
# 621 "xmltok.c"
    (*toP) ++;
# 621 "xmltok.c"
    mem_8 = *fromP + 1;
# 621 "xmltok.c"
    mem_9 = *fromP + 0;
    __CrestLoad(82397, (unsigned long )mem_8, (long long )*mem_8);
    __CrestLoad(82396, (unsigned long )0, (long long )8);
    __CrestApply2(82395, 8, (long long )((int )((unsigned char )*mem_8) << 8));
    __CrestLoad(82394, (unsigned long )mem_9, (long long )*mem_9);
    __CrestApply2(82393, 6, (long long )(((int )((unsigned char )*mem_8) << 8) | (int )((unsigned char )*mem_9)));
    __CrestStore(82398, (unsigned long )tmp);
# 621 "xmltok.c"
    *tmp = (unsigned short )(((int )((unsigned char )*mem_8) << 8) | (int )((unsigned char )*mem_9));
# 621 "xmltok.c"
    *fromP += 2;
  }
  while_break: ;
  }

  {
  __CrestReturn(82399);
# 621 "xmltok.c"
  return;
  }
}
}
# 632 "xmltok.c"
static void big2_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                        char **toP , char const *toLim )
{
  char const *from ;
  int plane ;
  unsigned char lo2 ;
  unsigned char lo ;
  unsigned char hi ;
  char *tmp ;
  char *tmp___0 ;
  char *tmp___1 ;
  char *tmp___2 ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  char *tmp___6 ;
  char *tmp___7 ;
  char *tmp___8 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;

  {
  __CrestCall(82400, 870);
# 632 "xmltok.c"
  from = *fromP;
  {
# 632 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82403, (unsigned long )(& from), (long long )((unsigned long )from));
    __CrestLoad(82402, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82401, 13, (long long )((unsigned long )from != (unsigned long )fromLim));
# 632 "xmltok.c"
    if ((unsigned long )from != (unsigned long )fromLim) {
      __CrestBranch(82404, 52966, 1);

    } else {
      __CrestBranch(82405, 52967, 0);
# 632 "xmltok.c"
      goto while_break;
    }
    }
# 632 "xmltok.c"
    mem_21 = from + 1;
    __CrestLoad(82406, (unsigned long )mem_21, (long long )*mem_21);
    __CrestStore(82407, (unsigned long )(& lo));
# 632 "xmltok.c"
    lo = (unsigned char )*mem_21;
# 632 "xmltok.c"
    mem_22 = from + 0;
    __CrestLoad(82408, (unsigned long )mem_22, (long long )*mem_22);
    __CrestStore(82409, (unsigned long )(& hi));
# 632 "xmltok.c"
    hi = (unsigned char )*mem_22;
    {
    {
    __CrestLoad(82412, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82411, (unsigned long )0, (long long )0);
    __CrestApply2(82410, 12, (long long )((int )hi == 0));
# 632 "xmltok.c"
    if ((int )hi == 0) {
      __CrestBranch(82413, 52971, 1);
# 632 "xmltok.c"
      goto case_0;
    } else {
      __CrestBranch(82414, 52972, 0);

    }
    }
    {
    __CrestLoad(82417, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82416, (unsigned long )0, (long long )7);
    __CrestApply2(82415, 12, (long long )((int )hi == 7));
# 632 "xmltok.c"
    if ((int )hi == 7) {
      __CrestBranch(82418, 52974, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82419, 52975, 0);

    }
    }
    {
    __CrestLoad(82422, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82421, (unsigned long )0, (long long )6);
    __CrestApply2(82420, 12, (long long )((int )hi == 6));
# 632 "xmltok.c"
    if ((int )hi == 6) {
      __CrestBranch(82423, 52977, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82424, 52978, 0);

    }
    }
    {
    __CrestLoad(82427, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82426, (unsigned long )0, (long long )5);
    __CrestApply2(82425, 12, (long long )((int )hi == 5));
# 632 "xmltok.c"
    if ((int )hi == 5) {
      __CrestBranch(82428, 52980, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82429, 52981, 0);

    }
    }
    {
    __CrestLoad(82432, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82431, (unsigned long )0, (long long )4);
    __CrestApply2(82430, 12, (long long )((int )hi == 4));
# 632 "xmltok.c"
    if ((int )hi == 4) {
      __CrestBranch(82433, 52983, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82434, 52984, 0);

    }
    }
    {
    __CrestLoad(82437, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82436, (unsigned long )0, (long long )3);
    __CrestApply2(82435, 12, (long long )((int )hi == 3));
# 632 "xmltok.c"
    if ((int )hi == 3) {
      __CrestBranch(82438, 52986, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82439, 52987, 0);

    }
    }
    {
    __CrestLoad(82442, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82441, (unsigned long )0, (long long )2);
    __CrestApply2(82440, 12, (long long )((int )hi == 2));
# 632 "xmltok.c"
    if ((int )hi == 2) {
      __CrestBranch(82443, 52989, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82444, 52990, 0);

    }
    }
    {
    __CrestLoad(82447, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82446, (unsigned long )0, (long long )1);
    __CrestApply2(82445, 12, (long long )((int )hi == 1));
# 632 "xmltok.c"
    if ((int )hi == 1) {
      __CrestBranch(82448, 52992, 1);
# 632 "xmltok.c"
      goto case_7;
    } else {
      __CrestBranch(82449, 52993, 0);

    }
    }
    {
    __CrestLoad(82452, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82451, (unsigned long )0, (long long )219);
    __CrestApply2(82450, 12, (long long )((int )hi == 219));
# 632 "xmltok.c"
    if ((int )hi == 219) {
      __CrestBranch(82453, 52995, 1);
# 632 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82454, 52996, 0);

    }
    }
    {
    __CrestLoad(82457, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82456, (unsigned long )0, (long long )218);
    __CrestApply2(82455, 12, (long long )((int )hi == 218));
# 632 "xmltok.c"
    if ((int )hi == 218) {
      __CrestBranch(82458, 52998, 1);
# 632 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82459, 52999, 0);

    }
    }
    {
    __CrestLoad(82462, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82461, (unsigned long )0, (long long )217);
    __CrestApply2(82460, 12, (long long )((int )hi == 217));
# 632 "xmltok.c"
    if ((int )hi == 217) {
      __CrestBranch(82463, 53001, 1);
# 632 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82464, 53002, 0);

    }
    }
    {
    __CrestLoad(82467, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82466, (unsigned long )0, (long long )216);
    __CrestApply2(82465, 12, (long long )((int )hi == 216));
# 632 "xmltok.c"
    if ((int )hi == 216) {
      __CrestBranch(82468, 53004, 1);
# 632 "xmltok.c"
      goto case_219;
    } else {
      __CrestBranch(82469, 53005, 0);

    }
    }
# 632 "xmltok.c"
    goto switch_default;
    case_0:
    {
    __CrestLoad(82472, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82471, (unsigned long )0, (long long )128);
    __CrestApply2(82470, 16, (long long )((int )lo < 128));
# 632 "xmltok.c"
    if ((int )lo < 128) {
      __CrestBranch(82473, 53008, 1);
      {
      __CrestLoad(82477, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82476, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82475, 12, (long long )((unsigned long )*toP == (unsigned long )toLim));
# 632 "xmltok.c"
      if ((unsigned long )*toP == (unsigned long )toLim) {
        __CrestBranch(82478, 53009, 1);
# 632 "xmltok.c"
        *fromP = from;
# 632 "xmltok.c"
        goto return_label;
      } else {
        __CrestBranch(82479, 53012, 0);

      }
      }
# 632 "xmltok.c"
      tmp = *toP;
# 632 "xmltok.c"
      (*toP) ++;
      __CrestLoad(82480, (unsigned long )(& lo), (long long )lo);
      __CrestStore(82481, (unsigned long )tmp);
# 632 "xmltok.c"
      *tmp = (char )lo;
# 632 "xmltok.c"
      goto switch_break;
    } else {
      __CrestBranch(82474, 53015, 0);

    }
    }
    case_7:
    case_6:
    case_5:
    case_4:
    case_3:
    case_2:
    case_1:
    {
    __CrestLoad(82486, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82485, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82484, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82483, (unsigned long )0, (long long )2L);
    __CrestApply2(82482, 16, (long long )(toLim - (char const *)*toP < 2L));
# 632 "xmltok.c"
    if (toLim - (char const *)*toP < 2L) {
      __CrestBranch(82487, 53017, 1);
# 632 "xmltok.c"
      *fromP = from;
# 632 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82488, 53020, 0);

    }
    }
# 632 "xmltok.c"
    tmp___0 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82497, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82496, (unsigned long )0, (long long )6);
    __CrestApply2(82495, 9, (long long )((int )lo >> 6));
    __CrestLoad(82494, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82493, (unsigned long )0, (long long )2);
    __CrestApply2(82492, 8, (long long )((int )hi << 2));
    __CrestApply2(82491, 6, (long long )(((int )lo >> 6) | ((int )hi << 2)));
    __CrestLoad(82490, (unsigned long )0, (long long )192);
    __CrestApply2(82489, 6, (long long )((((int )lo >> 6) | ((int )hi << 2)) | 192));
    __CrestStore(82498, (unsigned long )tmp___0);
# 632 "xmltok.c"
    *tmp___0 = (char )((((int )lo >> 6) | ((int )hi << 2)) | 192);
# 632 "xmltok.c"
    tmp___1 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82503, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82502, (unsigned long )0, (long long )63);
    __CrestApply2(82501, 5, (long long )((int )lo & 63));
    __CrestLoad(82500, (unsigned long )0, (long long )128);
    __CrestApply2(82499, 6, (long long )(((int )lo & 63) | 128));
    __CrestStore(82504, (unsigned long )tmp___1);
# 632 "xmltok.c"
    *tmp___1 = (char )(((int )lo & 63) | 128);
# 632 "xmltok.c"
    goto switch_break;
    switch_default:
    {
    __CrestLoad(82509, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82508, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82507, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82506, (unsigned long )0, (long long )3L);
    __CrestApply2(82505, 16, (long long )(toLim - (char const *)*toP < 3L));
# 632 "xmltok.c"
    if (toLim - (char const *)*toP < 3L) {
      __CrestBranch(82510, 53024, 1);
# 632 "xmltok.c"
      *fromP = from;
# 632 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82511, 53027, 0);

    }
    }
# 632 "xmltok.c"
    tmp___2 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82516, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82515, (unsigned long )0, (long long )4);
    __CrestApply2(82514, 9, (long long )((int )hi >> 4));
    __CrestLoad(82513, (unsigned long )0, (long long )224);
    __CrestApply2(82512, 6, (long long )(((int )hi >> 4) | 224));
    __CrestStore(82517, (unsigned long )tmp___2);
# 632 "xmltok.c"
    *tmp___2 = (char )(((int )hi >> 4) | 224);
# 632 "xmltok.c"
    tmp___3 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82528, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82527, (unsigned long )0, (long long )15);
    __CrestApply2(82526, 5, (long long )((int )hi & 15));
    __CrestLoad(82525, (unsigned long )0, (long long )2);
    __CrestApply2(82524, 8, (long long )(((int )hi & 15) << 2));
    __CrestLoad(82523, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82522, (unsigned long )0, (long long )6);
    __CrestApply2(82521, 9, (long long )((int )lo >> 6));
    __CrestApply2(82520, 6, (long long )((((int )hi & 15) << 2) | ((int )lo >> 6)));
    __CrestLoad(82519, (unsigned long )0, (long long )128);
    __CrestApply2(82518, 6, (long long )(((((int )hi & 15) << 2) | ((int )lo >> 6)) | 128));
    __CrestStore(82529, (unsigned long )tmp___3);
# 632 "xmltok.c"
    *tmp___3 = (char )(((((int )hi & 15) << 2) | ((int )lo >> 6)) | 128);
# 632 "xmltok.c"
    tmp___4 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82534, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82533, (unsigned long )0, (long long )63);
    __CrestApply2(82532, 5, (long long )((int )lo & 63));
    __CrestLoad(82531, (unsigned long )0, (long long )128);
    __CrestApply2(82530, 6, (long long )(((int )lo & 63) | 128));
    __CrestStore(82535, (unsigned long )tmp___4);
# 632 "xmltok.c"
    *tmp___4 = (char )(((int )lo & 63) | 128);
# 632 "xmltok.c"
    goto switch_break;
    case_219:
    case_218:
    case_217:
    case_216:
    {
    __CrestLoad(82540, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
    __CrestLoad(82539, (unsigned long )toP, (long long )((unsigned long )*toP));
    __CrestApply2(82538, 18, (long long )(toLim - (char const *)*toP));
    __CrestLoad(82537, (unsigned long )0, (long long )4L);
    __CrestApply2(82536, 16, (long long )(toLim - (char const *)*toP < 4L));
# 632 "xmltok.c"
    if (toLim - (char const *)*toP < 4L) {
      __CrestBranch(82541, 53031, 1);
# 632 "xmltok.c"
      *fromP = from;
# 632 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(82542, 53034, 0);

    }
    }
    __CrestLoad(82555, (unsigned long )(& hi), (long long )hi);
    __CrestLoad(82554, (unsigned long )0, (long long )3);
    __CrestApply2(82553, 5, (long long )((int )hi & 3));
    __CrestLoad(82552, (unsigned long )0, (long long )2);
    __CrestApply2(82551, 8, (long long )(((int )hi & 3) << 2));
    __CrestLoad(82550, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82549, (unsigned long )0, (long long )6);
    __CrestApply2(82548, 9, (long long )((int )lo >> 6));
    __CrestLoad(82547, (unsigned long )0, (long long )3);
    __CrestApply2(82546, 5, (long long )(((int )lo >> 6) & 3));
    __CrestApply2(82545, 6, (long long )((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)));
    __CrestLoad(82544, (unsigned long )0, (long long )1);
    __CrestApply2(82543, 0, (long long )(((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)) + 1));
    __CrestStore(82556, (unsigned long )(& plane));
# 632 "xmltok.c"
    plane = ((((int )hi & 3) << 2) | (((int )lo >> 6) & 3)) + 1;
# 632 "xmltok.c"
    tmp___5 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82561, (unsigned long )(& plane), (long long )plane);
    __CrestLoad(82560, (unsigned long )0, (long long )2);
    __CrestApply2(82559, 9, (long long )(plane >> 2));
    __CrestLoad(82558, (unsigned long )0, (long long )240);
    __CrestApply2(82557, 6, (long long )((plane >> 2) | 240));
    __CrestStore(82562, (unsigned long )tmp___5);
# 632 "xmltok.c"
    *tmp___5 = (char )((plane >> 2) | 240);
# 632 "xmltok.c"
    tmp___6 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82575, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82574, (unsigned long )0, (long long )2);
    __CrestApply2(82573, 9, (long long )((int )lo >> 2));
    __CrestLoad(82572, (unsigned long )0, (long long )15);
    __CrestApply2(82571, 5, (long long )(((int )lo >> 2) & 15));
    __CrestLoad(82570, (unsigned long )(& plane), (long long )plane);
    __CrestLoad(82569, (unsigned long )0, (long long )3);
    __CrestApply2(82568, 5, (long long )(plane & 3));
    __CrestLoad(82567, (unsigned long )0, (long long )4);
    __CrestApply2(82566, 8, (long long )((plane & 3) << 4));
    __CrestApply2(82565, 6, (long long )((((int )lo >> 2) & 15) | ((plane & 3) << 4)));
    __CrestLoad(82564, (unsigned long )0, (long long )128);
    __CrestApply2(82563, 6, (long long )(((((int )lo >> 2) & 15) | ((plane & 3) << 4)) | 128));
    __CrestStore(82576, (unsigned long )tmp___6);
# 632 "xmltok.c"
    *tmp___6 = (char )(((((int )lo >> 2) & 15) | ((plane & 3) << 4)) | 128);
# 632 "xmltok.c"
    from += 2;
# 632 "xmltok.c"
    mem_23 = from + 1;
    __CrestLoad(82577, (unsigned long )mem_23, (long long )*mem_23);
    __CrestStore(82578, (unsigned long )(& lo2));
# 632 "xmltok.c"
    lo2 = (unsigned char )*mem_23;
# 632 "xmltok.c"
    tmp___7 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
# 632 "xmltok.c"
    mem_24 = from + 0;
    __CrestLoad(82595, (unsigned long )(& lo), (long long )lo);
    __CrestLoad(82594, (unsigned long )0, (long long )3);
    __CrestApply2(82593, 5, (long long )((int )lo & 3));
    __CrestLoad(82592, (unsigned long )0, (long long )4);
    __CrestApply2(82591, 8, (long long )(((int )lo & 3) << 4));
    __CrestLoad(82590, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(82589, (unsigned long )0, (long long )3);
    __CrestApply2(82588, 5, (long long )((int )((unsigned char )*mem_24) & 3));
    __CrestLoad(82587, (unsigned long )0, (long long )2);
    __CrestApply2(82586, 8, (long long )(((int )((unsigned char )*mem_24) & 3) << 2));
    __CrestApply2(82585, 6, (long long )((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)));
    __CrestLoad(82584, (unsigned long )(& lo2), (long long )lo2);
    __CrestLoad(82583, (unsigned long )0, (long long )6);
    __CrestApply2(82582, 9, (long long )((int )lo2 >> 6));
    __CrestApply2(82581, 6, (long long )(((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)));
    __CrestLoad(82580, (unsigned long )0, (long long )128);
    __CrestApply2(82579, 6, (long long )((((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)) | 128));
    __CrestStore(82596, (unsigned long )tmp___7);
# 632 "xmltok.c"
    *tmp___7 = (char )((((((int )lo & 3) << 4) | (((int )((unsigned char )*mem_24) & 3) << 2)) | ((int )lo2 >> 6)) | 128);
# 632 "xmltok.c"
    tmp___8 = *toP;
# 632 "xmltok.c"
    (*toP) ++;
    __CrestLoad(82601, (unsigned long )(& lo2), (long long )lo2);
    __CrestLoad(82600, (unsigned long )0, (long long )63);
    __CrestApply2(82599, 5, (long long )((int )lo2 & 63));
    __CrestLoad(82598, (unsigned long )0, (long long )128);
    __CrestApply2(82597, 6, (long long )(((int )lo2 & 63) | 128));
    __CrestStore(82602, (unsigned long )tmp___8);
# 632 "xmltok.c"
    *tmp___8 = (char )(((int )lo2 & 63) | 128);
# 632 "xmltok.c"
    goto switch_break;
    switch_break: ;
    }
# 632 "xmltok.c"
    from += 2;
  }
  while_break: ;
  }
# 632 "xmltok.c"
  *fromP = from;

  return_label:
  {
  __CrestReturn(82603);
# 632 "xmltok.c"
  return;
  }
}
}
# 633 "xmltok.c"
static void big2_toUtf16(ENCODING const *enc , char const **fromP , char const *fromLim ,
                         unsigned short **toP , unsigned short const *toLim )
{
  unsigned short *tmp ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;

  {
  __CrestCall(82604, 871);

  {
  __CrestLoad(82613, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
  __CrestLoad(82612, (unsigned long )fromP, (long long )((unsigned long )*fromP));
  __CrestApply2(82611, 18, (long long )(fromLim - *fromP));
  __CrestLoad(82610, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
  __CrestLoad(82609, (unsigned long )toP, (long long )((unsigned long )*toP));
  __CrestApply2(82608, 18, (long long )(toLim - (unsigned short const *)*toP));
  __CrestLoad(82607, (unsigned long )0, (long long )1);
  __CrestApply2(82606, 8, (long long )((toLim - (unsigned short const *)*toP) << 1));
  __CrestApply2(82605, 14, (long long )(fromLim - *fromP > (toLim - (unsigned short const *)*toP) << 1));
# 633 "xmltok.c"
  if (fromLim - *fromP > (toLim - (unsigned short const *)*toP) << 1) {
    __CrestBranch(82614, 53044, 1);
    {
# 633 "xmltok.c"
    mem_7 = (fromLim - 2) + 0;
    {
    __CrestLoad(82620, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(82619, (unsigned long )0, (long long )248);
    __CrestApply2(82618, 5, (long long )((int )((unsigned char )*mem_7) & 248));
    __CrestLoad(82617, (unsigned long )0, (long long )216);
    __CrestApply2(82616, 12, (long long )(((int )((unsigned char )*mem_7) & 248) == 216));
# 633 "xmltok.c"
    if (((int )((unsigned char )*mem_7) & 248) == 216) {
      __CrestBranch(82621, 53047, 1);
# 633 "xmltok.c"
      fromLim -= 2;
    } else {
      __CrestBranch(82622, 53048, 0);

    }
    }
    }
  } else {
    __CrestBranch(82615, 53049, 0);

  }
  }
  {
# 633 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82625, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(82624, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(82623, 13, (long long )((unsigned long )*fromP != (unsigned long )fromLim));
# 633 "xmltok.c"
    if ((unsigned long )*fromP != (unsigned long )fromLim) {
      __CrestBranch(82626, 53054, 1);
      {
      __CrestLoad(82630, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(82629, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(82628, 13, (long long )((unsigned long )*toP != (unsigned long )toLim));
# 633 "xmltok.c"
      if ((unsigned long )*toP != (unsigned long )toLim) {
        __CrestBranch(82631, 53055, 1);

      } else {
        __CrestBranch(82632, 53056, 0);
# 633 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(82627, 53057, 0);
# 633 "xmltok.c"
      goto while_break;
    }
    }
# 633 "xmltok.c"
    tmp = *toP;
# 633 "xmltok.c"
    (*toP) ++;
# 633 "xmltok.c"
    mem_8 = *fromP + 0;
# 633 "xmltok.c"
    mem_9 = *fromP + 1;
    __CrestLoad(82637, (unsigned long )mem_8, (long long )*mem_8);
    __CrestLoad(82636, (unsigned long )0, (long long )8);
    __CrestApply2(82635, 8, (long long )((int )((unsigned char )*mem_8) << 8));
    __CrestLoad(82634, (unsigned long )mem_9, (long long )*mem_9);
    __CrestApply2(82633, 6, (long long )(((int )((unsigned char )*mem_8) << 8) | (int )((unsigned char )*mem_9)));
    __CrestStore(82638, (unsigned long )tmp);
# 633 "xmltok.c"
    *tmp = (unsigned short )(((int )((unsigned char )*mem_8) << 8) | (int )((unsigned char )*mem_9));
# 633 "xmltok.c"
    *fromP += 2;
  }
  while_break: ;
  }

  {
  __CrestReturn(82639);
# 633 "xmltok.c"
  return;
  }
}
}
# 92 "xmltok_impl.c"
static int little2_scanComment(ENCODING const *enc , char const *ptr , char const *end ,
                               char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  int __retres17 ;

  {
  __CrestCall(82640, 872);

  {
  __CrestLoad(82643, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(82642, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(82641, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 96 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(82644, 53063, 1);
    {
# 97 "xmltok_impl.c"
    mem_7 = ptr + 1;
    {
    __CrestLoad(82648, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(82647, (unsigned long )0, (long long )0);
    __CrestApply2(82646, 12, (long long )((int const )*mem_7 == 0));
# 97 "xmltok_impl.c"
    if ((int const )*mem_7 == 0) {
      __CrestBranch(82649, 53066, 1);
      {
# 97 "xmltok_impl.c"
      mem_8 = ptr + 0;
      {
      __CrestLoad(82653, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(82652, (unsigned long )0, (long long )45);
      __CrestApply2(82651, 12, (long long )((int const )*mem_8 == 45));
# 97 "xmltok_impl.c"
      if ((int const )*mem_8 == 45) {
        __CrestBranch(82654, 53069, 1);

      } else {
        __CrestBranch(82655, 53070, 0);
# 98 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(82656, (unsigned long )0, (long long )0);
        __CrestStore(82657, (unsigned long )(& __retres17));
# 99 "xmltok_impl.c"
        __retres17 = 0;
# 99 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(82650, 53073, 0);
# 98 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(82658, (unsigned long )0, (long long )0);
      __CrestStore(82659, (unsigned long )(& __retres17));
# 99 "xmltok_impl.c"
      __retres17 = 0;
# 99 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 101 "xmltok_impl.c"
    ptr += 2;
    {
# 102 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(82662, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(82661, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(82660, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 102 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(82663, 53081, 1);

      } else {
        __CrestBranch(82664, 53082, 0);
# 102 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 103 "xmltok_impl.c"
      mem_9 = ptr + 1;
      {
      __CrestLoad(82667, (unsigned long )mem_9, (long long )*mem_9);
      __CrestLoad(82666, (unsigned long )0, (long long )0);
      __CrestApply2(82665, 12, (long long )((int const )*mem_9 == 0));
# 103 "xmltok_impl.c"
      if ((int const )*mem_9 == 0) {
        __CrestBranch(82668, 53086, 1);
# 103 "xmltok_impl.c"
        mem_10 = (struct normal_encoding *)enc;
        __CrestLoad(82670, (unsigned long )(& mem_10->type[(unsigned char )*ptr]),
                    (long long )mem_10->type[(unsigned char )*ptr]);
        __CrestStore(82671, (unsigned long )(& tmp___0));
# 103 "xmltok_impl.c"
        tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(82669, 53087, 0);
# 103 "xmltok_impl.c"
        mem_11 = ptr + 1;
# 103 "xmltok_impl.c"
        mem_12 = ptr + 0;
        __CrestLoad(82672, (unsigned long )mem_11, (long long )*mem_11);
        __CrestLoad(82673, (unsigned long )mem_12, (long long )*mem_12);
# 103 "xmltok_impl.c"
        tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
        __CrestHandleReturn(82675, (long long )tmp);
        __CrestStore(82674, (unsigned long )(& tmp));
        __CrestLoad(82676, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(82677, (unsigned long )(& tmp___0));
# 103 "xmltok_impl.c"
        tmp___0 = tmp;
      }
      }
      }
      {
      {
      __CrestLoad(82680, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82679, (unsigned long )0, (long long )5);
      __CrestApply2(82678, 12, (long long )(tmp___0 == 5));
# 104 "xmltok_impl.c"
      if (tmp___0 == 5) {
        __CrestBranch(82681, 53090, 1);
# 104 "xmltok_impl.c"
        goto case_5;
      } else {
        __CrestBranch(82682, 53091, 0);

      }
      }
      {
      __CrestLoad(82685, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82684, (unsigned long )0, (long long )6);
      __CrestApply2(82683, 12, (long long )(tmp___0 == 6));
# 104 "xmltok_impl.c"
      if (tmp___0 == 6) {
        __CrestBranch(82686, 53093, 1);
# 104 "xmltok_impl.c"
        goto case_6;
      } else {
        __CrestBranch(82687, 53094, 0);

      }
      }
      {
      __CrestLoad(82690, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82689, (unsigned long )0, (long long )7);
      __CrestApply2(82688, 12, (long long )(tmp___0 == 7));
# 104 "xmltok_impl.c"
      if (tmp___0 == 7) {
        __CrestBranch(82691, 53096, 1);
# 104 "xmltok_impl.c"
        goto case_7;
      } else {
        __CrestBranch(82692, 53097, 0);

      }
      }
      {
      __CrestLoad(82695, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82694, (unsigned long )0, (long long )8);
      __CrestApply2(82693, 12, (long long )(tmp___0 == 8));
# 104 "xmltok_impl.c"
      if (tmp___0 == 8) {
        __CrestBranch(82696, 53099, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(82697, 53100, 0);

      }
      }
      {
      __CrestLoad(82700, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82699, (unsigned long )0, (long long )1);
      __CrestApply2(82698, 12, (long long )(tmp___0 == 1));
# 104 "xmltok_impl.c"
      if (tmp___0 == 1) {
        __CrestBranch(82701, 53102, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(82702, 53103, 0);

      }
      }
      {
      __CrestLoad(82705, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82704, (unsigned long )0, (long long )0);
      __CrestApply2(82703, 12, (long long )(tmp___0 == 0));
# 104 "xmltok_impl.c"
      if (tmp___0 == 0) {
        __CrestBranch(82706, 53105, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(82707, 53106, 0);

      }
      }
      {
      __CrestLoad(82710, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(82709, (unsigned long )0, (long long )27);
      __CrestApply2(82708, 12, (long long )(tmp___0 == 27));
# 105 "xmltok_impl.c"
      if (tmp___0 == 27) {
        __CrestBranch(82711, 53108, 1);
# 105 "xmltok_impl.c"
        goto case_27;
      } else {
        __CrestBranch(82712, 53109, 0);

      }
      }
# 119 "xmltok_impl.c"
      goto switch_default;
      case_5:
      {
      __CrestLoad(82717, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(82716, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(82715, 18, (long long )(end - ptr));
      __CrestLoad(82714, (unsigned long )0, (long long )2L);
      __CrestApply2(82713, 16, (long long )(end - ptr < 2L));
# 104 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(82718, 53112, 1);
        __CrestLoad(82720, (unsigned long )0, (long long )-2);
        __CrestStore(82721, (unsigned long )(& __retres17));
# 104 "xmltok_impl.c"
        __retres17 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(82719, 53114, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 2;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_6:
      {
      __CrestLoad(82726, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(82725, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(82724, 18, (long long )(end - ptr));
      __CrestLoad(82723, (unsigned long )0, (long long )3L);
      __CrestApply2(82722, 16, (long long )(end - ptr < 3L));
# 104 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(82727, 53118, 1);
        __CrestLoad(82729, (unsigned long )0, (long long )-2);
        __CrestStore(82730, (unsigned long )(& __retres17));
# 104 "xmltok_impl.c"
        __retres17 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(82728, 53120, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 3;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_7:
      {
      __CrestLoad(82735, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(82734, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(82733, 18, (long long )(end - ptr));
      __CrestLoad(82732, (unsigned long )0, (long long )4L);
      __CrestApply2(82731, 16, (long long )(end - ptr < 4L));
# 104 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(82736, 53124, 1);
        __CrestLoad(82738, (unsigned long )0, (long long )-2);
        __CrestStore(82739, (unsigned long )(& __retres17));
# 104 "xmltok_impl.c"
        __retres17 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(82737, 53126, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 4;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_8:
      case_1:
      case_0:
# 104 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(82740, (unsigned long )0, (long long )0);
      __CrestStore(82741, (unsigned long )(& __retres17));
# 104 "xmltok_impl.c"
      __retres17 = 0;
# 104 "xmltok_impl.c"
      goto return_label;
      case_27:
# 106 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(82744, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(82743, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(82742, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 106 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(82745, 53134, 1);
        __CrestLoad(82747, (unsigned long )0, (long long )-1);
        __CrestStore(82748, (unsigned long )(& __retres17));
# 107 "xmltok_impl.c"
        __retres17 = -1;
# 107 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(82746, 53136, 0);

      }
      }
      {
# 108 "xmltok_impl.c"
      mem_13 = ptr + 1;
      {
      __CrestLoad(82751, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(82750, (unsigned long )0, (long long )0);
      __CrestApply2(82749, 12, (long long )((int const )*mem_13 == 0));
# 108 "xmltok_impl.c"
      if ((int const )*mem_13 == 0) {
        __CrestBranch(82752, 53140, 1);
        {
# 108 "xmltok_impl.c"
        mem_14 = ptr + 0;
        {
        __CrestLoad(82756, (unsigned long )mem_14, (long long )*mem_14);
        __CrestLoad(82755, (unsigned long )0, (long long )45);
        __CrestApply2(82754, 12, (long long )((int const )*mem_14 == 45));
# 108 "xmltok_impl.c"
        if ((int const )*mem_14 == 45) {
          __CrestBranch(82757, 53143, 1);
# 109 "xmltok_impl.c"
          ptr += 2;
          {
          __CrestLoad(82761, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
          __CrestLoad(82760, (unsigned long )(& end), (long long )((unsigned long )end));
          __CrestApply2(82759, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 109 "xmltok_impl.c"
          if ((unsigned long )ptr == (unsigned long )end) {
            __CrestBranch(82762, 53145, 1);
            __CrestLoad(82764, (unsigned long )0, (long long )-1);
            __CrestStore(82765, (unsigned long )(& __retres17));
# 110 "xmltok_impl.c"
            __retres17 = -1;
# 110 "xmltok_impl.c"
            goto return_label;
          } else {
            __CrestBranch(82763, 53147, 0);

          }
          }
          {
# 111 "xmltok_impl.c"
          mem_15 = ptr + 1;
          {
          __CrestLoad(82768, (unsigned long )mem_15, (long long )*mem_15);
          __CrestLoad(82767, (unsigned long )0, (long long )0);
          __CrestApply2(82766, 12, (long long )((int const )*mem_15 == 0));
# 111 "xmltok_impl.c"
          if ((int const )*mem_15 == 0) {
            __CrestBranch(82769, 53151, 1);
            {
# 111 "xmltok_impl.c"
            mem_16 = ptr + 0;
            {
            __CrestLoad(82773, (unsigned long )mem_16, (long long )*mem_16);
            __CrestLoad(82772, (unsigned long )0, (long long )62);
            __CrestApply2(82771, 12, (long long )((int const )*mem_16 == 62));
# 111 "xmltok_impl.c"
            if ((int const )*mem_16 == 62) {
              __CrestBranch(82774, 53154, 1);

            } else {
              __CrestBranch(82775, 53155, 0);
# 112 "xmltok_impl.c"
              *nextTokPtr = ptr;
              __CrestLoad(82776, (unsigned long )0, (long long )0);
              __CrestStore(82777, (unsigned long )(& __retres17));
# 113 "xmltok_impl.c"
              __retres17 = 0;
# 113 "xmltok_impl.c"
              goto return_label;
            }
            }
            }
          } else {
            __CrestBranch(82770, 53158, 0);
# 112 "xmltok_impl.c"
            *nextTokPtr = ptr;
            __CrestLoad(82778, (unsigned long )0, (long long )0);
            __CrestStore(82779, (unsigned long )(& __retres17));
# 113 "xmltok_impl.c"
            __retres17 = 0;
# 113 "xmltok_impl.c"
            goto return_label;
          }
          }
          }
# 115 "xmltok_impl.c"
          *nextTokPtr = ptr + 2;
          __CrestLoad(82780, (unsigned long )0, (long long )13);
          __CrestStore(82781, (unsigned long )(& __retres17));
# 116 "xmltok_impl.c"
          __retres17 = 13;
# 116 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(82758, 53164, 0);

        }
        }
        }
      } else {
        __CrestBranch(82753, 53165, 0);

      }
      }
      }
# 118 "xmltok_impl.c"
      goto switch_break;
      switch_default:
# 120 "xmltok_impl.c"
      ptr += 2;
# 121 "xmltok_impl.c"
      goto switch_break;
      switch_break: ;
      }
    }
    while_break: ;
    }
  } else {
    __CrestBranch(82645, 53171, 0);

  }
  }
  __CrestLoad(82782, (unsigned long )0, (long long )-1);
  __CrestStore(82783, (unsigned long )(& __retres17));
# 125 "xmltok_impl.c"
  __retres17 = -1;
  return_label:
  {
  __CrestLoad(82784, (unsigned long )(& __retres17), (long long )__retres17);
  __CrestReturn(82785);
# 92 "xmltok_impl.c"
  return (__retres17);
  }
}
}
# 130 "xmltok_impl.c"
static int little2_scanDecl(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  struct normal_encoding *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  struct normal_encoding *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  int __retres25 ;

  {
  __CrestCall(82786, 873);

  {
  __CrestLoad(82789, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(82788, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(82787, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 134 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(82790, 53175, 1);
    __CrestLoad(82792, (unsigned long )0, (long long )-1);
    __CrestStore(82793, (unsigned long )(& __retres25));
# 135 "xmltok_impl.c"
    __retres25 = -1;
# 135 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(82791, 53177, 0);

  }
  }
  {
# 136 "xmltok_impl.c"
  mem_12 = ptr + 1;
  {
  __CrestLoad(82796, (unsigned long )mem_12, (long long )*mem_12);
  __CrestLoad(82795, (unsigned long )0, (long long )0);
  __CrestApply2(82794, 12, (long long )((int const )*mem_12 == 0));
# 136 "xmltok_impl.c"
  if ((int const )*mem_12 == 0) {
    __CrestBranch(82797, 53181, 1);
# 136 "xmltok_impl.c"
    mem_13 = (struct normal_encoding *)enc;
    __CrestLoad(82799, (unsigned long )(& mem_13->type[(unsigned char )*ptr]), (long long )mem_13->type[(unsigned char )*ptr]);
    __CrestStore(82800, (unsigned long )(& tmp___0));
# 136 "xmltok_impl.c"
    tmp___0 = (int )mem_13->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(82798, 53182, 0);
# 136 "xmltok_impl.c"
    mem_14 = ptr + 1;
# 136 "xmltok_impl.c"
    mem_15 = ptr + 0;
    __CrestLoad(82801, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(82802, (unsigned long )mem_15, (long long )*mem_15);
# 136 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_14, (char )*mem_15);
    __CrestHandleReturn(82804, (long long )tmp);
    __CrestStore(82803, (unsigned long )(& tmp));
    __CrestLoad(82805, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(82806, (unsigned long )(& tmp___0));
# 136 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(82809, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82808, (unsigned long )0, (long long )27);
  __CrestApply2(82807, 12, (long long )(tmp___0 == 27));
# 137 "xmltok_impl.c"
  if (tmp___0 == 27) {
    __CrestBranch(82810, 53185, 1);
# 137 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(82811, 53186, 0);

  }
  }
  {
  __CrestLoad(82814, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82813, (unsigned long )0, (long long )20);
  __CrestApply2(82812, 12, (long long )(tmp___0 == 20));
# 139 "xmltok_impl.c"
  if (tmp___0 == 20) {
    __CrestBranch(82815, 53188, 1);
# 139 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(82816, 53189, 0);

  }
  }
  {
  __CrestLoad(82819, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82818, (unsigned long )0, (long long )24);
  __CrestApply2(82817, 12, (long long )(tmp___0 == 24));
# 143 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(82820, 53191, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(82821, 53192, 0);

  }
  }
  {
  __CrestLoad(82824, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82823, (unsigned long )0, (long long )22);
  __CrestApply2(82822, 12, (long long )(tmp___0 == 22));
# 143 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(82825, 53194, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(82826, 53195, 0);

  }
  }
# 146 "xmltok_impl.c"
  goto switch_default;
  case_27:
# 138 "xmltok_impl.c"
  tmp___1 = little2_scanComment(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(82828, (long long )tmp___1);
  __CrestStore(82827, (unsigned long )(& tmp___1));
  __CrestLoad(82829, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(82830, (unsigned long )(& __retres25));
# 138 "xmltok_impl.c"
  __retres25 = tmp___1;
# 138 "xmltok_impl.c"
  goto return_label;
  case_20:
# 140 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(82831, (unsigned long )0, (long long )33);
  __CrestStore(82832, (unsigned long )(& __retres25));
# 141 "xmltok_impl.c"
  __retres25 = 33;
# 141 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 144 "xmltok_impl.c"
  ptr += 2;
# 145 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 147 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(82833, (unsigned long )0, (long long )0);
  __CrestStore(82834, (unsigned long )(& __retres25));
# 148 "xmltok_impl.c"
  __retres25 = 0;
# 148 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 150 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(82837, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(82836, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(82835, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 150 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(82838, 53213, 1);

    } else {
      __CrestBranch(82839, 53214, 0);
# 150 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 151 "xmltok_impl.c"
    mem_16 = ptr + 1;
    {
    __CrestLoad(82842, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(82841, (unsigned long )0, (long long )0);
    __CrestApply2(82840, 12, (long long )((int const )*mem_16 == 0));
# 151 "xmltok_impl.c"
    if ((int const )*mem_16 == 0) {
      __CrestBranch(82843, 53218, 1);
# 151 "xmltok_impl.c"
      mem_17 = (struct normal_encoding *)enc;
      __CrestLoad(82845, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
      __CrestStore(82846, (unsigned long )(& tmp___3));
# 151 "xmltok_impl.c"
      tmp___3 = (int )mem_17->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(82844, 53219, 0);
# 151 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 151 "xmltok_impl.c"
      mem_19 = ptr + 0;
      __CrestLoad(82847, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(82848, (unsigned long )mem_19, (long long )*mem_19);
# 151 "xmltok_impl.c"
      tmp___2 = unicode_byte_type((char )*mem_18, (char )*mem_19);
      __CrestHandleReturn(82850, (long long )tmp___2);
      __CrestStore(82849, (unsigned long )(& tmp___2));
      __CrestLoad(82851, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(82852, (unsigned long )(& tmp___3));
# 151 "xmltok_impl.c"
      tmp___3 = tmp___2;
    }
    }
    }
    {
    {
    __CrestLoad(82855, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82854, (unsigned long )0, (long long )30);
    __CrestApply2(82853, 12, (long long )(tmp___3 == 30));
# 152 "xmltok_impl.c"
    if (tmp___3 == 30) {
      __CrestBranch(82856, 53222, 1);
# 152 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(82857, 53223, 0);

    }
    }
    {
    __CrestLoad(82860, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82859, (unsigned long )0, (long long )10);
    __CrestApply2(82858, 12, (long long )(tmp___3 == 10));
# 162 "xmltok_impl.c"
    if (tmp___3 == 10) {
      __CrestBranch(82861, 53225, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(82862, 53226, 0);

    }
    }
    {
    __CrestLoad(82865, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82864, (unsigned long )0, (long long )9);
    __CrestApply2(82863, 12, (long long )(tmp___3 == 9));
# 162 "xmltok_impl.c"
    if (tmp___3 == 9) {
      __CrestBranch(82866, 53228, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(82867, 53229, 0);

    }
    }
    {
    __CrestLoad(82870, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82869, (unsigned long )0, (long long )21);
    __CrestApply2(82868, 12, (long long )(tmp___3 == 21));
# 162 "xmltok_impl.c"
    if (tmp___3 == 21) {
      __CrestBranch(82871, 53231, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(82872, 53232, 0);

    }
    }
    {
    __CrestLoad(82875, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82874, (unsigned long )0, (long long )24);
    __CrestApply2(82873, 12, (long long )(tmp___3 == 24));
# 166 "xmltok_impl.c"
    if (tmp___3 == 24) {
      __CrestBranch(82876, 53234, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(82877, 53235, 0);

    }
    }
    {
    __CrestLoad(82880, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(82879, (unsigned long )0, (long long )22);
    __CrestApply2(82878, 12, (long long )(tmp___3 == 22));
# 166 "xmltok_impl.c"
    if (tmp___3 == 22) {
      __CrestBranch(82881, 53237, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(82882, 53238, 0);

    }
    }
# 169 "xmltok_impl.c"
    goto switch_default___0;
    case_30:
    {
    __CrestLoad(82887, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(82886, (unsigned long )0, (long long )2);
    __CrestApply2(82885, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(82884, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(82883, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 153 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) == (unsigned long )end) {
      __CrestBranch(82888, 53241, 1);
      __CrestLoad(82890, (unsigned long )0, (long long )-1);
      __CrestStore(82891, (unsigned long )(& __retres25));
# 154 "xmltok_impl.c"
      __retres25 = -1;
# 154 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(82889, 53243, 0);

    }
    }
    {
# 156 "xmltok_impl.c"
    mem_20 = (ptr + 2) + 1;
    {
    __CrestLoad(82894, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(82893, (unsigned long )0, (long long )0);
    __CrestApply2(82892, 12, (long long )((int const )*mem_20 == 0));
# 156 "xmltok_impl.c"
    if ((int const )*mem_20 == 0) {
      __CrestBranch(82895, 53247, 1);
# 156 "xmltok_impl.c"
      mem_21 = ptr + 2;
# 156 "xmltok_impl.c"
      mem_22 = (struct normal_encoding *)enc;
      __CrestLoad(82897, (unsigned long )(& mem_22->type[(unsigned char )*mem_21]),
                  (long long )mem_22->type[(unsigned char )*mem_21]);
      __CrestStore(82898, (unsigned long )(& tmp___5));
# 156 "xmltok_impl.c"
      tmp___5 = (int )mem_22->type[(unsigned char )*mem_21];
    } else {
      __CrestBranch(82896, 53248, 0);
# 156 "xmltok_impl.c"
      mem_23 = (ptr + 2) + 1;
# 156 "xmltok_impl.c"
      mem_24 = (ptr + 2) + 0;
      __CrestLoad(82899, (unsigned long )mem_23, (long long )*mem_23);
      __CrestLoad(82900, (unsigned long )mem_24, (long long )*mem_24);
# 156 "xmltok_impl.c"
      tmp___4 = unicode_byte_type((char )*mem_23, (char )*mem_24);
      __CrestHandleReturn(82902, (long long )tmp___4);
      __CrestStore(82901, (unsigned long )(& tmp___4));
      __CrestLoad(82903, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestStore(82904, (unsigned long )(& tmp___5));
# 156 "xmltok_impl.c"
      tmp___5 = tmp___4;
    }
    }
    }
    {
    {
    __CrestLoad(82907, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(82906, (unsigned long )0, (long long )30);
    __CrestApply2(82905, 12, (long long )(tmp___5 == 30));
# 157 "xmltok_impl.c"
    if (tmp___5 == 30) {
      __CrestBranch(82908, 53251, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(82909, 53252, 0);

    }
    }
    {
    __CrestLoad(82912, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(82911, (unsigned long )0, (long long )10);
    __CrestApply2(82910, 12, (long long )(tmp___5 == 10));
# 157 "xmltok_impl.c"
    if (tmp___5 == 10) {
      __CrestBranch(82913, 53254, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(82914, 53255, 0);

    }
    }
    {
    __CrestLoad(82917, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(82916, (unsigned long )0, (long long )9);
    __CrestApply2(82915, 12, (long long )(tmp___5 == 9));
# 157 "xmltok_impl.c"
    if (tmp___5 == 9) {
      __CrestBranch(82918, 53257, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(82919, 53258, 0);

    }
    }
    {
    __CrestLoad(82922, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(82921, (unsigned long )0, (long long )21);
    __CrestApply2(82920, 12, (long long )(tmp___5 == 21));
# 157 "xmltok_impl.c"
    if (tmp___5 == 21) {
      __CrestBranch(82923, 53260, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(82924, 53261, 0);

    }
    }
# 156 "xmltok_impl.c"
    goto switch_break___1;
    case_30___0:
    case_10:
    case_9:
    case_21:
# 158 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(82925, (unsigned long )0, (long long )0);
    __CrestStore(82926, (unsigned long )(& __retres25));
# 159 "xmltok_impl.c"
    __retres25 = 0;
# 159 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
    case_10___0:
    case_9___0:
    case_21___0:
# 163 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(82927, (unsigned long )0, (long long )16);
    __CrestStore(82928, (unsigned long )(& __retres25));
# 164 "xmltok_impl.c"
    __retres25 = 16;
# 164 "xmltok_impl.c"
    goto return_label;
    case_24___0:
    case_22___0:
# 167 "xmltok_impl.c"
    ptr += 2;
# 168 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 170 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(82929, (unsigned long )0, (long long )0);
    __CrestStore(82930, (unsigned long )(& __retres25));
# 171 "xmltok_impl.c"
    __retres25 = 0;
# 171 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(82931, (unsigned long )0, (long long )-1);
  __CrestStore(82932, (unsigned long )(& __retres25));
# 174 "xmltok_impl.c"
  __retres25 = -1;
  return_label:
  {
  __CrestLoad(82933, (unsigned long )(& __retres25), (long long )__retres25);
  __CrestReturn(82934);
# 130 "xmltok_impl.c"
  return (__retres25);
  }
}
}
# 177 "xmltok_impl.c"
static int little2_checkPiTarget(ENCODING const *enc , char const *ptr , char const *end ,
                                 int *tokPtr )
{
  int upper ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  int __retres15 ;

  {
  __CrestCall(82935, 874);

  __CrestLoad(82936, (unsigned long )0, (long long )0);
  __CrestStore(82937, (unsigned long )(& upper));
# 181 "xmltok_impl.c"
  upper = 0;
  __CrestLoad(82938, (unsigned long )0, (long long )11);
  __CrestStore(82939, (unsigned long )tokPtr);
# 182 "xmltok_impl.c"
  *tokPtr = 11;
  {
  __CrestLoad(82944, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(82943, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(82942, 18, (long long )(end - ptr));
  __CrestLoad(82941, (unsigned long )0, (long long )6L);
  __CrestApply2(82940, 13, (long long )(end - ptr != 6L));
# 183 "xmltok_impl.c"
  if (end - ptr != 6L) {
    __CrestBranch(82945, 53281, 1);
    __CrestLoad(82947, (unsigned long )0, (long long )1);
    __CrestStore(82948, (unsigned long )(& __retres15));
# 184 "xmltok_impl.c"
    __retres15 = 1;
# 184 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(82946, 53283, 0);

  }
  }
  {
# 185 "xmltok_impl.c"
  mem_9 = ptr + 1;
  {
  __CrestLoad(82951, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(82950, (unsigned long )0, (long long )0);
  __CrestApply2(82949, 12, (long long )((int const )*mem_9 == 0));
# 185 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(82952, 53287, 1);
# 185 "xmltok_impl.c"
    mem_10 = ptr + 0;
    __CrestLoad(82954, (unsigned long )mem_10, (long long )*mem_10);
    __CrestStore(82955, (unsigned long )(& tmp));
# 185 "xmltok_impl.c"
    tmp = (int const )*mem_10;
  } else {
    __CrestBranch(82953, 53288, 0);
    __CrestLoad(82956, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(82957, (unsigned long )(& tmp));
# 185 "xmltok_impl.c"
    tmp = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(82960, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(82959, (unsigned long )0, (long long )120);
  __CrestApply2(82958, 12, (long long )(tmp == 120));
# 186 "xmltok_impl.c"
  if (tmp == 120) {
    __CrestBranch(82961, 53291, 1);
# 186 "xmltok_impl.c"
    goto case_120;
  } else {
    __CrestBranch(82962, 53292, 0);

  }
  }
  {
  __CrestLoad(82965, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(82964, (unsigned long )0, (long long )88);
  __CrestApply2(82963, 12, (long long )(tmp == 88));
# 188 "xmltok_impl.c"
  if (tmp == 88) {
    __CrestBranch(82966, 53294, 1);
# 188 "xmltok_impl.c"
    goto case_88;
  } else {
    __CrestBranch(82967, 53295, 0);

  }
  }
# 191 "xmltok_impl.c"
  goto switch_default;
  case_120:
# 187 "xmltok_impl.c"
  goto switch_break;
  case_88:
  __CrestLoad(82968, (unsigned long )0, (long long )1);
  __CrestStore(82969, (unsigned long )(& upper));
# 189 "xmltok_impl.c"
  upper = 1;
# 190 "xmltok_impl.c"
  goto switch_break;
  switch_default:
  __CrestLoad(82970, (unsigned long )0, (long long )1);
  __CrestStore(82971, (unsigned long )(& __retres15));
# 192 "xmltok_impl.c"
  __retres15 = 1;
# 192 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
# 194 "xmltok_impl.c"
  ptr += 2;
  {
# 195 "xmltok_impl.c"
  mem_11 = ptr + 1;
  {
  __CrestLoad(82974, (unsigned long )mem_11, (long long )*mem_11);
  __CrestLoad(82973, (unsigned long )0, (long long )0);
  __CrestApply2(82972, 12, (long long )((int const )*mem_11 == 0));
# 195 "xmltok_impl.c"
  if ((int const )*mem_11 == 0) {
    __CrestBranch(82975, 53307, 1);
# 195 "xmltok_impl.c"
    mem_12 = ptr + 0;
    __CrestLoad(82977, (unsigned long )mem_12, (long long )*mem_12);
    __CrestStore(82978, (unsigned long )(& tmp___0));
# 195 "xmltok_impl.c"
    tmp___0 = (int const )*mem_12;
  } else {
    __CrestBranch(82976, 53308, 0);
    __CrestLoad(82979, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(82980, (unsigned long )(& tmp___0));
# 195 "xmltok_impl.c"
    tmp___0 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(82983, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82982, (unsigned long )0, (long long )109);
  __CrestApply2(82981, 12, (long long )(tmp___0 == 109));
# 196 "xmltok_impl.c"
  if (tmp___0 == 109) {
    __CrestBranch(82984, 53311, 1);
# 196 "xmltok_impl.c"
    goto case_109;
  } else {
    __CrestBranch(82985, 53312, 0);

  }
  }
  {
  __CrestLoad(82988, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(82987, (unsigned long )0, (long long )77);
  __CrestApply2(82986, 12, (long long )(tmp___0 == 77));
# 198 "xmltok_impl.c"
  if (tmp___0 == 77) {
    __CrestBranch(82989, 53314, 1);
# 198 "xmltok_impl.c"
    goto case_77;
  } else {
    __CrestBranch(82990, 53315, 0);

  }
  }
# 201 "xmltok_impl.c"
  goto switch_default___0;
  case_109:
# 197 "xmltok_impl.c"
  goto switch_break___0;
  case_77:
  __CrestLoad(82991, (unsigned long )0, (long long )1);
  __CrestStore(82992, (unsigned long )(& upper));
# 199 "xmltok_impl.c"
  upper = 1;
# 200 "xmltok_impl.c"
  goto switch_break___0;
  switch_default___0:
  __CrestLoad(82993, (unsigned long )0, (long long )1);
  __CrestStore(82994, (unsigned long )(& __retres15));
# 202 "xmltok_impl.c"
  __retres15 = 1;
# 202 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 204 "xmltok_impl.c"
  ptr += 2;
  {
# 205 "xmltok_impl.c"
  mem_13 = ptr + 1;
  {
  __CrestLoad(82997, (unsigned long )mem_13, (long long )*mem_13);
  __CrestLoad(82996, (unsigned long )0, (long long )0);
  __CrestApply2(82995, 12, (long long )((int const )*mem_13 == 0));
# 205 "xmltok_impl.c"
  if ((int const )*mem_13 == 0) {
    __CrestBranch(82998, 53327, 1);
# 205 "xmltok_impl.c"
    mem_14 = ptr + 0;
    __CrestLoad(83000, (unsigned long )mem_14, (long long )*mem_14);
    __CrestStore(83001, (unsigned long )(& tmp___1));
# 205 "xmltok_impl.c"
    tmp___1 = (int const )*mem_14;
  } else {
    __CrestBranch(82999, 53328, 0);
    __CrestLoad(83002, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(83003, (unsigned long )(& tmp___1));
# 205 "xmltok_impl.c"
    tmp___1 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(83006, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(83005, (unsigned long )0, (long long )108);
  __CrestApply2(83004, 12, (long long )(tmp___1 == 108));
# 206 "xmltok_impl.c"
  if (tmp___1 == 108) {
    __CrestBranch(83007, 53331, 1);
# 206 "xmltok_impl.c"
    goto case_108;
  } else {
    __CrestBranch(83008, 53332, 0);

  }
  }
  {
  __CrestLoad(83011, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(83010, (unsigned long )0, (long long )76);
  __CrestApply2(83009, 12, (long long )(tmp___1 == 76));
# 208 "xmltok_impl.c"
  if (tmp___1 == 76) {
    __CrestBranch(83012, 53334, 1);
# 208 "xmltok_impl.c"
    goto case_76;
  } else {
    __CrestBranch(83013, 53335, 0);

  }
  }
# 211 "xmltok_impl.c"
  goto switch_default___1;
  case_108:
# 207 "xmltok_impl.c"
  goto switch_break___1;
  case_76:
  __CrestLoad(83014, (unsigned long )0, (long long )1);
  __CrestStore(83015, (unsigned long )(& upper));
# 209 "xmltok_impl.c"
  upper = 1;
# 210 "xmltok_impl.c"
  goto switch_break___1;
  switch_default___1:
  __CrestLoad(83016, (unsigned long )0, (long long )1);
  __CrestStore(83017, (unsigned long )(& __retres15));
# 212 "xmltok_impl.c"
  __retres15 = 1;
# 212 "xmltok_impl.c"
  goto return_label;
  switch_break___1: ;
  }
  {
  __CrestLoad(83020, (unsigned long )(& upper), (long long )upper);
  __CrestLoad(83019, (unsigned long )0, (long long )0);
  __CrestApply2(83018, 13, (long long )(upper != 0));
# 214 "xmltok_impl.c"
  if (upper != 0) {
    __CrestBranch(83021, 53344, 1);
    __CrestLoad(83023, (unsigned long )0, (long long )0);
    __CrestStore(83024, (unsigned long )(& __retres15));
# 215 "xmltok_impl.c"
    __retres15 = 0;
# 215 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83022, 53346, 0);

  }
  }
  __CrestLoad(83025, (unsigned long )0, (long long )12);
  __CrestStore(83026, (unsigned long )tokPtr);
# 216 "xmltok_impl.c"
  *tokPtr = 12;
  __CrestLoad(83027, (unsigned long )0, (long long )1);
  __CrestStore(83028, (unsigned long )(& __retres15));
# 217 "xmltok_impl.c"
  __retres15 = 1;
  return_label:
  {
  __CrestLoad(83029, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(83030);
# 177 "xmltok_impl.c"
  return (__retres15);
  }
}
}
# 222 "xmltok_impl.c"
static int little2_scanPi(ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int tok ;
  char const *target ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  struct normal_encoding *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  struct normal_encoding *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  int __retres37 ;

  {
  __CrestCall(83031, 875);
# 227 "xmltok_impl.c"
  target = ptr;
  {
  __CrestLoad(83034, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83033, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83032, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 228 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83035, 53352, 1);
    __CrestLoad(83037, (unsigned long )0, (long long )-1);
    __CrestStore(83038, (unsigned long )(& __retres37));
# 229 "xmltok_impl.c"
    __retres37 = -1;
# 229 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83036, 53354, 0);

  }
  }
  {
# 230 "xmltok_impl.c"
  mem_15 = ptr + 1;
  {
  __CrestLoad(83041, (unsigned long )mem_15, (long long )*mem_15);
  __CrestLoad(83040, (unsigned long )0, (long long )0);
  __CrestApply2(83039, 12, (long long )((int const )*mem_15 == 0));
# 230 "xmltok_impl.c"
  if ((int const )*mem_15 == 0) {
    __CrestBranch(83042, 53358, 1);
# 230 "xmltok_impl.c"
    mem_16 = (struct normal_encoding *)enc;
    __CrestLoad(83044, (unsigned long )(& mem_16->type[(unsigned char )*ptr]), (long long )mem_16->type[(unsigned char )*ptr]);
    __CrestStore(83045, (unsigned long )(& tmp___0));
# 230 "xmltok_impl.c"
    tmp___0 = (int )mem_16->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(83043, 53359, 0);
# 230 "xmltok_impl.c"
    mem_17 = ptr + 1;
# 230 "xmltok_impl.c"
    mem_18 = ptr + 0;
    __CrestLoad(83046, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(83047, (unsigned long )mem_18, (long long )*mem_18);
# 230 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_17, (char )*mem_18);
    __CrestHandleReturn(83049, (long long )tmp);
    __CrestStore(83048, (unsigned long )(& tmp));
    __CrestLoad(83050, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(83051, (unsigned long )(& tmp___0));
# 230 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(83054, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83053, (unsigned long )0, (long long )29);
  __CrestApply2(83052, 12, (long long )(tmp___0 == 29));
# 231 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(83055, 53362, 1);
# 231 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(83056, 53363, 0);

  }
  }
  {
  __CrestLoad(83059, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83058, (unsigned long )0, (long long )24);
  __CrestApply2(83057, 12, (long long )(tmp___0 == 24));
# 231 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(83060, 53365, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(83061, 53366, 0);

  }
  }
  {
  __CrestLoad(83064, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83063, (unsigned long )0, (long long )22);
  __CrestApply2(83062, 12, (long long )(tmp___0 == 22));
# 231 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(83065, 53368, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(83066, 53369, 0);

  }
  }
  {
  __CrestLoad(83069, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83068, (unsigned long )0, (long long )5);
  __CrestApply2(83067, 12, (long long )(tmp___0 == 5));
# 231 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(83070, 53371, 1);
# 231 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(83071, 53372, 0);

  }
  }
  {
  __CrestLoad(83074, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83073, (unsigned long )0, (long long )6);
  __CrestApply2(83072, 12, (long long )(tmp___0 == 6));
# 231 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(83075, 53374, 1);
# 231 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(83076, 53375, 0);

  }
  }
  {
  __CrestLoad(83079, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83078, (unsigned long )0, (long long )7);
  __CrestApply2(83077, 12, (long long )(tmp___0 == 7));
# 231 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(83080, 53377, 1);
# 231 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(83081, 53378, 0);

  }
  }
# 232 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 231 "xmltok_impl.c"
  mem_19 = ptr + 1;
# 231 "xmltok_impl.c"
  mem_20 = ptr + 0;
# 231 "xmltok_impl.c"
  mem_21 = ptr + 0;
  {
  __CrestLoad(83090, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_19] << 3) + (int const )((int )((unsigned char )*mem_20) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_19] << 3) + (int const )((int )((unsigned char )*mem_20) >> 5)]);
  __CrestLoad(83089, (unsigned long )0, (long long )1);
  __CrestLoad(83088, (unsigned long )mem_21, (long long )*mem_21);
  __CrestLoad(83087, (unsigned long )0, (long long )31);
  __CrestApply2(83086, 5, (long long )((int )((unsigned char )*mem_21) & 31));
  __CrestApply2(83085, 8, (long long )(1 << ((int )((unsigned char )*mem_21) & 31)));
  __CrestApply2(83084, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_19] << 3) + (int const )((int )((unsigned char )*mem_20) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_21) & 31))));
  __CrestLoad(83083, (unsigned long )0, (long long )0);
  __CrestApply2(83082, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_19] << 3) + (int const )((int )((unsigned char )*mem_20) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_21) & 31))) == 0));
# 231 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_19] << 3) + (int const )((int )((unsigned char )*mem_20) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_21) & 31))) == 0) {
    __CrestBranch(83091, 53383, 1);
# 231 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83093, (unsigned long )0, (long long )0);
    __CrestStore(83094, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
    __retres37 = 0;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83092, 53386, 0);

  }
  }
  }
  case_24:
  case_22:
# 231 "xmltok_impl.c"
  ptr += 2;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(83099, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83098, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83097, 18, (long long )(end - ptr));
  __CrestLoad(83096, (unsigned long )0, (long long )2L);
  __CrestApply2(83095, 16, (long long )(end - ptr < 2L));
# 231 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(83100, 53390, 1);
    __CrestLoad(83102, (unsigned long )0, (long long )-2);
    __CrestStore(83103, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
    __retres37 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83101, 53392, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83104, (unsigned long )0, (long long )0);
  __CrestStore(83105, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
  __retres37 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 2;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(83110, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83109, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83108, 18, (long long )(end - ptr));
  __CrestLoad(83107, (unsigned long )0, (long long )3L);
  __CrestApply2(83106, 16, (long long )(end - ptr < 3L));
# 231 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(83111, 53399, 1);
    __CrestLoad(83113, (unsigned long )0, (long long )-2);
    __CrestStore(83114, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
    __retres37 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83112, 53401, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83115, (unsigned long )0, (long long )0);
  __CrestStore(83116, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
  __retres37 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 3;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(83121, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83120, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83119, 18, (long long )(end - ptr));
  __CrestLoad(83118, (unsigned long )0, (long long )4L);
  __CrestApply2(83117, 16, (long long )(end - ptr < 4L));
# 231 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(83122, 53408, 1);
    __CrestLoad(83124, (unsigned long )0, (long long )-2);
    __CrestStore(83125, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
    __retres37 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83123, 53410, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83126, (unsigned long )0, (long long )0);
  __CrestStore(83127, (unsigned long )(& __retres37));
# 231 "xmltok_impl.c"
  __retres37 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 4;
# 231 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 233 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83128, (unsigned long )0, (long long )0);
  __CrestStore(83129, (unsigned long )(& __retres37));
# 234 "xmltok_impl.c"
  __retres37 = 0;
# 234 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 236 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(83132, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(83131, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(83130, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 236 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(83133, 53424, 1);

    } else {
      __CrestBranch(83134, 53425, 0);
# 236 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 237 "xmltok_impl.c"
    mem_22 = ptr + 1;
    {
    __CrestLoad(83137, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(83136, (unsigned long )0, (long long )0);
    __CrestApply2(83135, 12, (long long )((int const )*mem_22 == 0));
# 237 "xmltok_impl.c"
    if ((int const )*mem_22 == 0) {
      __CrestBranch(83138, 53429, 1);
# 237 "xmltok_impl.c"
      mem_23 = (struct normal_encoding *)enc;
      __CrestLoad(83140, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
      __CrestStore(83141, (unsigned long )(& tmp___2));
# 237 "xmltok_impl.c"
      tmp___2 = (int )mem_23->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(83139, 53430, 0);
# 237 "xmltok_impl.c"
      mem_24 = ptr + 1;
# 237 "xmltok_impl.c"
      mem_25 = ptr + 0;
      __CrestLoad(83142, (unsigned long )mem_24, (long long )*mem_24);
      __CrestLoad(83143, (unsigned long )mem_25, (long long )*mem_25);
# 237 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_24, (char )*mem_25);
      __CrestHandleReturn(83145, (long long )tmp___1);
      __CrestStore(83144, (unsigned long )(& tmp___1));
      __CrestLoad(83146, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(83147, (unsigned long )(& tmp___2));
# 237 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(83150, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83149, (unsigned long )0, (long long )29);
    __CrestApply2(83148, 12, (long long )(tmp___2 == 29));
# 238 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(83151, 53433, 1);
# 238 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(83152, 53434, 0);

    }
    }
    {
    __CrestLoad(83155, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83154, (unsigned long )0, (long long )27);
    __CrestApply2(83153, 12, (long long )(tmp___2 == 27));
# 238 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(83156, 53436, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83157, 53437, 0);

    }
    }
    {
    __CrestLoad(83160, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83159, (unsigned long )0, (long long )26);
    __CrestApply2(83158, 12, (long long )(tmp___2 == 26));
# 238 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(83161, 53439, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83162, 53440, 0);

    }
    }
    {
    __CrestLoad(83165, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83164, (unsigned long )0, (long long )25);
    __CrestApply2(83163, 12, (long long )(tmp___2 == 25));
# 238 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(83166, 53442, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83167, 53443, 0);

    }
    }
    {
    __CrestLoad(83170, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83169, (unsigned long )0, (long long )24);
    __CrestApply2(83168, 12, (long long )(tmp___2 == 24));
# 238 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(83171, 53445, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83172, 53446, 0);

    }
    }
    {
    __CrestLoad(83175, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83174, (unsigned long )0, (long long )22);
    __CrestApply2(83173, 12, (long long )(tmp___2 == 22));
# 238 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(83176, 53448, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83177, 53449, 0);

    }
    }
    {
    __CrestLoad(83180, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83179, (unsigned long )0, (long long )5);
    __CrestApply2(83178, 12, (long long )(tmp___2 == 5));
# 238 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(83181, 53451, 1);
# 238 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(83182, 53452, 0);

    }
    }
    {
    __CrestLoad(83185, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83184, (unsigned long )0, (long long )6);
    __CrestApply2(83183, 12, (long long )(tmp___2 == 6));
# 238 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(83186, 53454, 1);
# 238 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(83187, 53455, 0);

    }
    }
    {
    __CrestLoad(83190, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83189, (unsigned long )0, (long long )7);
    __CrestApply2(83188, 12, (long long )(tmp___2 == 7));
# 238 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(83191, 53457, 1);
# 238 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(83192, 53458, 0);

    }
    }
    {
    __CrestLoad(83195, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83194, (unsigned long )0, (long long )10);
    __CrestApply2(83193, 12, (long long )(tmp___2 == 10));
# 239 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(83196, 53460, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83197, 53461, 0);

    }
    }
    {
    __CrestLoad(83200, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83199, (unsigned long )0, (long long )9);
    __CrestApply2(83198, 12, (long long )(tmp___2 == 9));
# 239 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(83201, 53463, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83202, 53464, 0);

    }
    }
    {
    __CrestLoad(83205, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83204, (unsigned long )0, (long long )21);
    __CrestApply2(83203, 12, (long long )(tmp___2 == 21));
# 239 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(83206, 53466, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83207, 53467, 0);

    }
    }
    {
    __CrestLoad(83210, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83209, (unsigned long )0, (long long )15);
    __CrestApply2(83208, 12, (long long )(tmp___2 == 15));
# 263 "xmltok_impl.c"
    if (tmp___2 == 15) {
      __CrestBranch(83211, 53469, 1);
# 263 "xmltok_impl.c"
      goto case_15___0;
    } else {
      __CrestBranch(83212, 53470, 0);

    }
    }
# 276 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
    {
# 238 "xmltok_impl.c"
    mem_26 = ptr + 1;
# 238 "xmltok_impl.c"
    mem_27 = ptr + 0;
# 238 "xmltok_impl.c"
    mem_28 = ptr + 0;
    {
    __CrestLoad(83221, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]);
    __CrestLoad(83220, (unsigned long )0, (long long )1);
    __CrestLoad(83219, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(83218, (unsigned long )0, (long long )31);
    __CrestApply2(83217, 5, (long long )((int )((unsigned char )*mem_28) & 31));
    __CrestApply2(83216, 8, (long long )(1 << ((int )((unsigned char )*mem_28) & 31)));
    __CrestApply2(83215, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))));
    __CrestLoad(83214, (unsigned long )0, (long long )0);
    __CrestApply2(83213, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0));
# 238 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0) {
      __CrestBranch(83222, 53475, 1);
# 238 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83224, (unsigned long )0, (long long )0);
      __CrestStore(83225, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
      __retres37 = 0;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83223, 53478, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 238 "xmltok_impl.c"
    ptr += 2;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(83230, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83229, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83228, 18, (long long )(end - ptr));
    __CrestLoad(83227, (unsigned long )0, (long long )2L);
    __CrestApply2(83226, 16, (long long )(end - ptr < 2L));
# 238 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(83231, 53482, 1);
      __CrestLoad(83233, (unsigned long )0, (long long )-2);
      __CrestStore(83234, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
      __retres37 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83232, 53484, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83235, (unsigned long )0, (long long )0);
    __CrestStore(83236, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
    __retres37 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 2;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(83241, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83240, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83239, 18, (long long )(end - ptr));
    __CrestLoad(83238, (unsigned long )0, (long long )3L);
    __CrestApply2(83237, 16, (long long )(end - ptr < 3L));
# 238 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(83242, 53491, 1);
      __CrestLoad(83244, (unsigned long )0, (long long )-2);
      __CrestStore(83245, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
      __retres37 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83243, 53493, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83246, (unsigned long )0, (long long )0);
    __CrestStore(83247, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
    __retres37 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 3;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(83252, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83251, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83250, 18, (long long )(end - ptr));
    __CrestLoad(83249, (unsigned long )0, (long long )4L);
    __CrestApply2(83248, 16, (long long )(end - ptr < 4L));
# 238 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(83253, 53500, 1);
      __CrestLoad(83255, (unsigned long )0, (long long )-2);
      __CrestStore(83256, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
      __retres37 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83254, 53502, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83257, (unsigned long )0, (long long )0);
    __CrestStore(83258, (unsigned long )(& __retres37));
# 238 "xmltok_impl.c"
    __retres37 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 4;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 240 "xmltok_impl.c"
    tmp___3 = little2_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(83260, (long long )tmp___3);
    __CrestStore(83259, (unsigned long )(& tmp___3));
    {
    __CrestLoad(83263, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(83262, (unsigned long )0, (long long )0);
    __CrestApply2(83261, 13, (long long )(tmp___3 != 0));
# 240 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(83264, 53510, 1);

    } else {
      __CrestBranch(83265, 53511, 0);
# 241 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83266, (unsigned long )0, (long long )0);
      __CrestStore(83267, (unsigned long )(& __retres37));
# 242 "xmltok_impl.c"
      __retres37 = 0;
# 242 "xmltok_impl.c"
      goto return_label;
    }
    }
# 244 "xmltok_impl.c"
    ptr += 2;
    {
# 245 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(83270, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(83269, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(83268, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 245 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(83271, 53519, 1);

      } else {
        __CrestBranch(83272, 53520, 0);
# 245 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 246 "xmltok_impl.c"
      mem_29 = ptr + 1;
      {
      __CrestLoad(83275, (unsigned long )mem_29, (long long )*mem_29);
      __CrestLoad(83274, (unsigned long )0, (long long )0);
      __CrestApply2(83273, 12, (long long )((int const )*mem_29 == 0));
# 246 "xmltok_impl.c"
      if ((int const )*mem_29 == 0) {
        __CrestBranch(83276, 53524, 1);
# 246 "xmltok_impl.c"
        mem_30 = (struct normal_encoding *)enc;
        __CrestLoad(83278, (unsigned long )(& mem_30->type[(unsigned char )*ptr]),
                    (long long )mem_30->type[(unsigned char )*ptr]);
        __CrestStore(83279, (unsigned long )(& tmp___5));
# 246 "xmltok_impl.c"
        tmp___5 = (int )mem_30->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(83277, 53525, 0);
# 246 "xmltok_impl.c"
        mem_31 = ptr + 1;
# 246 "xmltok_impl.c"
        mem_32 = ptr + 0;
        __CrestLoad(83280, (unsigned long )mem_31, (long long )*mem_31);
        __CrestLoad(83281, (unsigned long )mem_32, (long long )*mem_32);
# 246 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_31, (char )*mem_32);
        __CrestHandleReturn(83283, (long long )tmp___4);
        __CrestStore(83282, (unsigned long )(& tmp___4));
        __CrestLoad(83284, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(83285, (unsigned long )(& tmp___5));
# 246 "xmltok_impl.c"
        tmp___5 = tmp___4;
      }
      }
      }
      {
      {
      __CrestLoad(83288, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83287, (unsigned long )0, (long long )5);
      __CrestApply2(83286, 12, (long long )(tmp___5 == 5));
# 247 "xmltok_impl.c"
      if (tmp___5 == 5) {
        __CrestBranch(83289, 53528, 1);
# 247 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(83290, 53529, 0);

      }
      }
      {
      __CrestLoad(83293, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83292, (unsigned long )0, (long long )6);
      __CrestApply2(83291, 12, (long long )(tmp___5 == 6));
# 247 "xmltok_impl.c"
      if (tmp___5 == 6) {
        __CrestBranch(83294, 53531, 1);
# 247 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(83295, 53532, 0);

      }
      }
      {
      __CrestLoad(83298, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83297, (unsigned long )0, (long long )7);
      __CrestApply2(83296, 12, (long long )(tmp___5 == 7));
# 247 "xmltok_impl.c"
      if (tmp___5 == 7) {
        __CrestBranch(83299, 53534, 1);
# 247 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(83300, 53535, 0);

      }
      }
      {
      __CrestLoad(83303, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83302, (unsigned long )0, (long long )8);
      __CrestApply2(83301, 12, (long long )(tmp___5 == 8));
# 247 "xmltok_impl.c"
      if (tmp___5 == 8) {
        __CrestBranch(83304, 53537, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(83305, 53538, 0);

      }
      }
      {
      __CrestLoad(83308, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83307, (unsigned long )0, (long long )1);
      __CrestApply2(83306, 12, (long long )(tmp___5 == 1));
# 247 "xmltok_impl.c"
      if (tmp___5 == 1) {
        __CrestBranch(83309, 53540, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(83310, 53541, 0);

      }
      }
      {
      __CrestLoad(83313, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83312, (unsigned long )0, (long long )0);
      __CrestApply2(83311, 12, (long long )(tmp___5 == 0));
# 247 "xmltok_impl.c"
      if (tmp___5 == 0) {
        __CrestBranch(83314, 53543, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(83315, 53544, 0);

      }
      }
      {
      __CrestLoad(83318, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(83317, (unsigned long )0, (long long )15);
      __CrestApply2(83316, 12, (long long )(tmp___5 == 15));
# 248 "xmltok_impl.c"
      if (tmp___5 == 15) {
        __CrestBranch(83319, 53546, 1);
# 248 "xmltok_impl.c"
        goto case_15;
      } else {
        __CrestBranch(83320, 53547, 0);

      }
      }
# 257 "xmltok_impl.c"
      goto switch_default___0;
      case_5___1:
      {
      __CrestLoad(83325, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(83324, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(83323, 18, (long long )(end - ptr));
      __CrestLoad(83322, (unsigned long )0, (long long )2L);
      __CrestApply2(83321, 16, (long long )(end - ptr < 2L));
# 247 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(83326, 53550, 1);
        __CrestLoad(83328, (unsigned long )0, (long long )-2);
        __CrestStore(83329, (unsigned long )(& __retres37));
# 247 "xmltok_impl.c"
        __retres37 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(83327, 53552, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 2;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_6___1:
      {
      __CrestLoad(83334, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(83333, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(83332, 18, (long long )(end - ptr));
      __CrestLoad(83331, (unsigned long )0, (long long )3L);
      __CrestApply2(83330, 16, (long long )(end - ptr < 3L));
# 247 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(83335, 53556, 1);
        __CrestLoad(83337, (unsigned long )0, (long long )-2);
        __CrestStore(83338, (unsigned long )(& __retres37));
# 247 "xmltok_impl.c"
        __retres37 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(83336, 53558, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 3;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_7___1:
      {
      __CrestLoad(83343, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(83342, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(83341, 18, (long long )(end - ptr));
      __CrestLoad(83340, (unsigned long )0, (long long )4L);
      __CrestApply2(83339, 16, (long long )(end - ptr < 4L));
# 247 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(83344, 53562, 1);
        __CrestLoad(83346, (unsigned long )0, (long long )-2);
        __CrestStore(83347, (unsigned long )(& __retres37));
# 247 "xmltok_impl.c"
        __retres37 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(83345, 53564, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 4;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_8:
      case_1:
      case_0:
# 247 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83348, (unsigned long )0, (long long )0);
      __CrestStore(83349, (unsigned long )(& __retres37));
# 247 "xmltok_impl.c"
      __retres37 = 0;
# 247 "xmltok_impl.c"
      goto return_label;
      case_15:
# 249 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(83352, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(83351, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(83350, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 250 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(83353, 53572, 1);
        __CrestLoad(83355, (unsigned long )0, (long long )-1);
        __CrestStore(83356, (unsigned long )(& __retres37));
# 251 "xmltok_impl.c"
        __retres37 = -1;
# 251 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(83354, 53574, 0);

      }
      }
      {
# 252 "xmltok_impl.c"
      mem_33 = ptr + 1;
      {
      __CrestLoad(83359, (unsigned long )mem_33, (long long )*mem_33);
      __CrestLoad(83358, (unsigned long )0, (long long )0);
      __CrestApply2(83357, 12, (long long )((int const )*mem_33 == 0));
# 252 "xmltok_impl.c"
      if ((int const )*mem_33 == 0) {
        __CrestBranch(83360, 53578, 1);
        {
# 252 "xmltok_impl.c"
        mem_34 = ptr + 0;
        {
        __CrestLoad(83364, (unsigned long )mem_34, (long long )*mem_34);
        __CrestLoad(83363, (unsigned long )0, (long long )62);
        __CrestApply2(83362, 12, (long long )((int const )*mem_34 == 62));
# 252 "xmltok_impl.c"
        if ((int const )*mem_34 == 62) {
          __CrestBranch(83365, 53581, 1);
# 253 "xmltok_impl.c"
          *nextTokPtr = ptr + 2;
          __CrestLoad(83367, (unsigned long )(& tok), (long long )tok);
          __CrestStore(83368, (unsigned long )(& __retres37));
# 254 "xmltok_impl.c"
          __retres37 = tok;
# 254 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(83366, 53584, 0);

        }
        }
        }
      } else {
        __CrestBranch(83361, 53585, 0);

      }
      }
      }
# 256 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 258 "xmltok_impl.c"
      ptr += 2;
# 259 "xmltok_impl.c"
      goto switch_break___1;
      switch_break___1: ;
      }
    }
    while_break___0: ;
    }
    __CrestLoad(83369, (unsigned long )0, (long long )-1);
    __CrestStore(83370, (unsigned long )(& __retres37));
# 262 "xmltok_impl.c"
    __retres37 = -1;
# 262 "xmltok_impl.c"
    goto return_label;
    case_15___0:
# 264 "xmltok_impl.c"
    tmp___6 = little2_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(83372, (long long )tmp___6);
    __CrestStore(83371, (unsigned long )(& tmp___6));
    {
    __CrestLoad(83375, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(83374, (unsigned long )0, (long long )0);
    __CrestApply2(83373, 13, (long long )(tmp___6 != 0));
# 264 "xmltok_impl.c"
    if (tmp___6 != 0) {
      __CrestBranch(83376, 53595, 1);

    } else {
      __CrestBranch(83377, 53596, 0);
# 265 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83378, (unsigned long )0, (long long )0);
      __CrestStore(83379, (unsigned long )(& __retres37));
# 266 "xmltok_impl.c"
      __retres37 = 0;
# 266 "xmltok_impl.c"
      goto return_label;
    }
    }
# 268 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(83382, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(83381, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(83380, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 269 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(83383, 53601, 1);
      __CrestLoad(83385, (unsigned long )0, (long long )-1);
      __CrestStore(83386, (unsigned long )(& __retres37));
# 270 "xmltok_impl.c"
      __retres37 = -1;
# 270 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83384, 53603, 0);

    }
    }
    {
# 271 "xmltok_impl.c"
    mem_35 = ptr + 1;
    {
    __CrestLoad(83389, (unsigned long )mem_35, (long long )*mem_35);
    __CrestLoad(83388, (unsigned long )0, (long long )0);
    __CrestApply2(83387, 12, (long long )((int const )*mem_35 == 0));
# 271 "xmltok_impl.c"
    if ((int const )*mem_35 == 0) {
      __CrestBranch(83390, 53607, 1);
      {
# 271 "xmltok_impl.c"
      mem_36 = ptr + 0;
      {
      __CrestLoad(83394, (unsigned long )mem_36, (long long )*mem_36);
      __CrestLoad(83393, (unsigned long )0, (long long )62);
      __CrestApply2(83392, 12, (long long )((int const )*mem_36 == 62));
# 271 "xmltok_impl.c"
      if ((int const )*mem_36 == 62) {
        __CrestBranch(83395, 53610, 1);
# 272 "xmltok_impl.c"
        *nextTokPtr = ptr + 2;
        __CrestLoad(83397, (unsigned long )(& tok), (long long )tok);
        __CrestStore(83398, (unsigned long )(& __retres37));
# 273 "xmltok_impl.c"
        __retres37 = tok;
# 273 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(83396, 53613, 0);

      }
      }
      }
    } else {
      __CrestBranch(83391, 53614, 0);

    }
    }
    }
    switch_default___1:
# 277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83399, (unsigned long )0, (long long )0);
    __CrestStore(83400, (unsigned long )(& __retres37));
# 278 "xmltok_impl.c"
    __retres37 = 0;
# 278 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(83401, (unsigned long )0, (long long )-1);
  __CrestStore(83402, (unsigned long )(& __retres37));
# 281 "xmltok_impl.c"
  __retres37 = -1;
  return_label:
  {
  __CrestLoad(83403, (unsigned long )(& __retres37), (long long )__retres37);
  __CrestReturn(83404);
# 222 "xmltok_impl.c"
  return (__retres37);
  }
}
}
# 288 "xmltok_impl.c"
static int little2_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                    char const **nextTokPtr ) ;
# 288 "xmltok_impl.c"
static char const CDATA_LSQB___0[6] = { (char const )67, (char const )68, (char const )65, (char const )84,
        (char const )65, (char const )91};
# 284 "xmltok_impl.c"
static int little2_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                    char const **nextTokPtr )
{
  int i ;
  char const *mem_6 ;
  char const *mem_7 ;
  int __retres8 ;

  {
  __CrestCall(83405, 876);

  {
  __CrestLoad(83410, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83409, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83408, 18, (long long )(end - ptr));
  __CrestLoad(83407, (unsigned long )0, (long long )12L);
  __CrestApply2(83406, 16, (long long )(end - ptr < 12L));
# 292 "xmltok_impl.c"
  if (end - ptr < 12L) {
    __CrestBranch(83411, 53623, 1);
    __CrestLoad(83413, (unsigned long )0, (long long )-1);
    __CrestStore(83414, (unsigned long )(& __retres8));
# 293 "xmltok_impl.c"
    __retres8 = -1;
# 293 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83412, 53625, 0);

  }
  }
  __CrestLoad(83415, (unsigned long )0, (long long )0);
  __CrestStore(83416, (unsigned long )(& i));
# 294 "xmltok_impl.c"
  i = 0;
  {
# 294 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(83419, (unsigned long )(& i), (long long )i);
    __CrestLoad(83418, (unsigned long )0, (long long )6);
    __CrestApply2(83417, 16, (long long )(i < 6));
# 294 "xmltok_impl.c"
    if (i < 6) {
      __CrestBranch(83420, 53631, 1);

    } else {
      __CrestBranch(83421, 53632, 0);
# 294 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 295 "xmltok_impl.c"
    mem_6 = ptr + 1;
    {
    __CrestLoad(83424, (unsigned long )mem_6, (long long )*mem_6);
    __CrestLoad(83423, (unsigned long )0, (long long )0);
    __CrestApply2(83422, 12, (long long )((int const )*mem_6 == 0));
# 295 "xmltok_impl.c"
    if ((int const )*mem_6 == 0) {
      __CrestBranch(83425, 53636, 1);
      {
# 295 "xmltok_impl.c"
      mem_7 = ptr + 0;
      {
      __CrestLoad(83429, (unsigned long )mem_7, (long long )*mem_7);
      __CrestLoad(83428, (unsigned long )(& CDATA_LSQB___0[i]), (long long )CDATA_LSQB___0[i]);
      __CrestApply2(83427, 12, (long long )((int const )*mem_7 == (int const )CDATA_LSQB___0[i]));
# 295 "xmltok_impl.c"
      if ((int const )*mem_7 == (int const )CDATA_LSQB___0[i]) {
        __CrestBranch(83430, 53639, 1);

      } else {
        __CrestBranch(83431, 53640, 0);
# 296 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(83432, (unsigned long )0, (long long )0);
        __CrestStore(83433, (unsigned long )(& __retres8));
# 297 "xmltok_impl.c"
        __retres8 = 0;
# 297 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(83426, 53643, 0);
# 296 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83434, (unsigned long )0, (long long )0);
      __CrestStore(83435, (unsigned long )(& __retres8));
# 297 "xmltok_impl.c"
      __retres8 = 0;
# 297 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
    __CrestLoad(83438, (unsigned long )(& i), (long long )i);
    __CrestLoad(83437, (unsigned long )0, (long long )1);
    __CrestApply2(83436, 0, (long long )(i + 1));
    __CrestStore(83439, (unsigned long )(& i));
# 294 "xmltok_impl.c"
    i ++;
# 294 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
# 300 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83440, (unsigned long )0, (long long )8);
  __CrestStore(83441, (unsigned long )(& __retres8));
# 301 "xmltok_impl.c"
  __retres8 = 8;
  return_label:
  {
  __CrestLoad(83442, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(83443);
# 284 "xmltok_impl.c"
  return (__retres8);
  }
}
}
# 304 "xmltok_impl.c"
static int little2_cdataSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                   char const **nextTokPtr )
{
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  struct normal_encoding *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  struct normal_encoding *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  int __retres28 ;

  {
  __CrestCall(83444, 877);

  {
  __CrestLoad(83447, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83446, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83445, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 308 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83448, 53652, 1);
    __CrestLoad(83450, (unsigned long )0, (long long )-4);
    __CrestStore(83451, (unsigned long )(& __retres28));
# 309 "xmltok_impl.c"
    __retres28 = -4;
# 309 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83449, 53654, 0);

  }
  }
  __CrestLoad(83454, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83453, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83452, 18, (long long )(end - ptr));
  __CrestStore(83455, (unsigned long )(& n));
# 311 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(83460, (unsigned long )(& n), (long long )n);
  __CrestLoad(83459, (unsigned long )0, (long long )1UL);
  __CrestApply2(83458, 5, (long long )(n & 1UL));
  __CrestLoad(83457, (unsigned long )0, (long long )0);
  __CrestApply2(83456, 13, (long long )((n & 1UL) != 0));
# 312 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(83461, 53657, 1);
    __CrestLoad(83465, (unsigned long )(& n), (long long )n);
    __CrestLoad(83464, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(83463, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(83466, (unsigned long )(& n));
# 313 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(83469, (unsigned long )(& n), (long long )n);
    __CrestLoad(83468, (unsigned long )0, (long long )0UL);
    __CrestApply2(83467, 12, (long long )(n == 0UL));
# 314 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(83470, 53659, 1);
      __CrestLoad(83472, (unsigned long )0, (long long )-1);
      __CrestStore(83473, (unsigned long )(& __retres28));
# 315 "xmltok_impl.c"
      __retres28 = -1;
# 315 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83471, 53661, 0);

    }
    }
# 316 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(83462, 53663, 0);

  }
  }
  {
# 319 "xmltok_impl.c"
  mem_12 = ptr + 1;
  {
  __CrestLoad(83476, (unsigned long )mem_12, (long long )*mem_12);
  __CrestLoad(83475, (unsigned long )0, (long long )0);
  __CrestApply2(83474, 12, (long long )((int const )*mem_12 == 0));
# 319 "xmltok_impl.c"
  if ((int const )*mem_12 == 0) {
    __CrestBranch(83477, 53667, 1);
# 319 "xmltok_impl.c"
    mem_13 = (struct normal_encoding *)enc;
    __CrestLoad(83479, (unsigned long )(& mem_13->type[(unsigned char )*ptr]), (long long )mem_13->type[(unsigned char )*ptr]);
    __CrestStore(83480, (unsigned long )(& tmp___0));
# 319 "xmltok_impl.c"
    tmp___0 = (int )mem_13->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(83478, 53668, 0);
# 319 "xmltok_impl.c"
    mem_14 = ptr + 1;
# 319 "xmltok_impl.c"
    mem_15 = ptr + 0;
    __CrestLoad(83481, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(83482, (unsigned long )mem_15, (long long )*mem_15);
# 319 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_14, (char )*mem_15);
    __CrestHandleReturn(83484, (long long )tmp);
    __CrestStore(83483, (unsigned long )(& tmp));
    __CrestLoad(83485, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(83486, (unsigned long )(& tmp___0));
# 319 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(83489, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83488, (unsigned long )0, (long long )4);
  __CrestApply2(83487, 12, (long long )(tmp___0 == 4));
# 320 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(83490, 53671, 1);
# 320 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(83491, 53672, 0);

  }
  }
  {
  __CrestLoad(83494, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83493, (unsigned long )0, (long long )9);
  __CrestApply2(83492, 12, (long long )(tmp___0 == 9));
# 335 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(83495, 53674, 1);
# 335 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(83496, 53675, 0);

  }
  }
  {
  __CrestLoad(83499, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83498, (unsigned long )0, (long long )10);
  __CrestApply2(83497, 12, (long long )(tmp___0 == 10));
# 343 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(83500, 53677, 1);
# 343 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(83501, 53678, 0);

  }
  }
  {
  __CrestLoad(83504, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83503, (unsigned long )0, (long long )5);
  __CrestApply2(83502, 12, (long long )(tmp___0 == 5));
# 346 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(83505, 53680, 1);
# 346 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(83506, 53681, 0);

  }
  }
  {
  __CrestLoad(83509, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83508, (unsigned long )0, (long long )6);
  __CrestApply2(83507, 12, (long long )(tmp___0 == 6));
# 346 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(83510, 53683, 1);
# 346 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(83511, 53684, 0);

  }
  }
  {
  __CrestLoad(83514, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83513, (unsigned long )0, (long long )7);
  __CrestApply2(83512, 12, (long long )(tmp___0 == 7));
# 346 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(83515, 53686, 1);
# 346 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(83516, 53687, 0);

  }
  }
  {
  __CrestLoad(83519, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83518, (unsigned long )0, (long long )8);
  __CrestApply2(83517, 12, (long long )(tmp___0 == 8));
# 346 "xmltok_impl.c"
  if (tmp___0 == 8) {
    __CrestBranch(83520, 53689, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(83521, 53690, 0);

  }
  }
  {
  __CrestLoad(83524, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83523, (unsigned long )0, (long long )1);
  __CrestApply2(83522, 12, (long long )(tmp___0 == 1));
# 346 "xmltok_impl.c"
  if (tmp___0 == 1) {
    __CrestBranch(83525, 53692, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(83526, 53693, 0);

  }
  }
  {
  __CrestLoad(83529, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83528, (unsigned long )0, (long long )0);
  __CrestApply2(83527, 12, (long long )(tmp___0 == 0));
# 346 "xmltok_impl.c"
  if (tmp___0 == 0) {
    __CrestBranch(83530, 53695, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(83531, 53696, 0);

  }
  }
# 347 "xmltok_impl.c"
  goto switch_default;
  case_4:
# 321 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(83534, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83533, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83532, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 322 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83535, 53700, 1);
    __CrestLoad(83537, (unsigned long )0, (long long )-1);
    __CrestStore(83538, (unsigned long )(& __retres28));
# 323 "xmltok_impl.c"
    __retres28 = -1;
# 323 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83536, 53702, 0);

  }
  }
  {
# 324 "xmltok_impl.c"
  mem_16 = ptr + 1;
  {
  __CrestLoad(83541, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(83540, (unsigned long )0, (long long )0);
  __CrestApply2(83539, 12, (long long )((int const )*mem_16 == 0));
# 324 "xmltok_impl.c"
  if ((int const )*mem_16 == 0) {
    __CrestBranch(83542, 53706, 1);
    {
# 324 "xmltok_impl.c"
    mem_17 = ptr + 0;
    {
    __CrestLoad(83546, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(83545, (unsigned long )0, (long long )93);
    __CrestApply2(83544, 12, (long long )((int const )*mem_17 == 93));
# 324 "xmltok_impl.c"
    if ((int const )*mem_17 == 93) {
      __CrestBranch(83547, 53709, 1);

    } else {
      __CrestBranch(83548, 53710, 0);
# 325 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(83543, 53711, 0);
# 325 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 326 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(83551, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83550, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83549, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 327 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83552, 53714, 1);
    __CrestLoad(83554, (unsigned long )0, (long long )-1);
    __CrestStore(83555, (unsigned long )(& __retres28));
# 328 "xmltok_impl.c"
    __retres28 = -1;
# 328 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83553, 53716, 0);

  }
  }
  {
# 329 "xmltok_impl.c"
  mem_18 = ptr + 1;
  {
  __CrestLoad(83558, (unsigned long )mem_18, (long long )*mem_18);
  __CrestLoad(83557, (unsigned long )0, (long long )0);
  __CrestApply2(83556, 12, (long long )((int const )*mem_18 == 0));
# 329 "xmltok_impl.c"
  if ((int const )*mem_18 == 0) {
    __CrestBranch(83559, 53720, 1);
    {
# 329 "xmltok_impl.c"
    mem_19 = ptr + 0;
    {
    __CrestLoad(83563, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(83562, (unsigned long )0, (long long )62);
    __CrestApply2(83561, 12, (long long )((int const )*mem_19 == 62));
# 329 "xmltok_impl.c"
    if ((int const )*mem_19 == 62) {
      __CrestBranch(83564, 53723, 1);

    } else {
      __CrestBranch(83565, 53724, 0);
# 330 "xmltok_impl.c"
      ptr -= 2;
# 331 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(83560, 53726, 0);
# 330 "xmltok_impl.c"
    ptr -= 2;
# 331 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 333 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(83566, (unsigned long )0, (long long )40);
  __CrestStore(83567, (unsigned long )(& __retres28));
# 334 "xmltok_impl.c"
  __retres28 = 40;
# 334 "xmltok_impl.c"
  goto return_label;
  case_9:
# 336 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(83570, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83569, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83568, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 337 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83571, 53733, 1);
    __CrestLoad(83573, (unsigned long )0, (long long )-1);
    __CrestStore(83574, (unsigned long )(& __retres28));
# 338 "xmltok_impl.c"
    __retres28 = -1;
# 338 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83572, 53735, 0);

  }
  }
  {
# 339 "xmltok_impl.c"
  mem_20 = ptr + 1;
  {
  __CrestLoad(83577, (unsigned long )mem_20, (long long )*mem_20);
  __CrestLoad(83576, (unsigned long )0, (long long )0);
  __CrestApply2(83575, 12, (long long )((int const )*mem_20 == 0));
# 339 "xmltok_impl.c"
  if ((int const )*mem_20 == 0) {
    __CrestBranch(83578, 53739, 1);
# 339 "xmltok_impl.c"
    mem_21 = (struct normal_encoding *)enc;
    __CrestLoad(83580, (unsigned long )(& mem_21->type[(unsigned char )*ptr]), (long long )mem_21->type[(unsigned char )*ptr]);
    __CrestStore(83581, (unsigned long )(& tmp___2));
# 339 "xmltok_impl.c"
    tmp___2 = (int )mem_21->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(83579, 53740, 0);
# 339 "xmltok_impl.c"
    mem_22 = ptr + 1;
# 339 "xmltok_impl.c"
    mem_23 = ptr + 0;
    __CrestLoad(83582, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(83583, (unsigned long )mem_23, (long long )*mem_23);
# 339 "xmltok_impl.c"
    tmp___1 = unicode_byte_type((char )*mem_22, (char )*mem_23);
    __CrestHandleReturn(83585, (long long )tmp___1);
    __CrestStore(83584, (unsigned long )(& tmp___1));
    __CrestLoad(83586, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(83587, (unsigned long )(& tmp___2));
# 339 "xmltok_impl.c"
    tmp___2 = tmp___1;
  }
  }
  }
  {
  __CrestLoad(83590, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(83589, (unsigned long )0, (long long )10);
  __CrestApply2(83588, 12, (long long )(tmp___2 == 10));
# 339 "xmltok_impl.c"
  if (tmp___2 == 10) {
    __CrestBranch(83591, 53742, 1);
# 340 "xmltok_impl.c"
    ptr += 2;
  } else {
    __CrestBranch(83592, 53743, 0);

  }
  }
# 341 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83593, (unsigned long )0, (long long )7);
  __CrestStore(83594, (unsigned long )(& __retres28));
# 342 "xmltok_impl.c"
  __retres28 = 7;
# 342 "xmltok_impl.c"
  goto return_label;
  case_10:
# 344 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(83595, (unsigned long )0, (long long )7);
  __CrestStore(83596, (unsigned long )(& __retres28));
# 345 "xmltok_impl.c"
  __retres28 = 7;
# 345 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(83601, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83600, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83599, 18, (long long )(end - ptr));
  __CrestLoad(83598, (unsigned long )0, (long long )2L);
  __CrestApply2(83597, 16, (long long )(end - ptr < 2L));
# 346 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(83602, 53751, 1);
    __CrestLoad(83604, (unsigned long )0, (long long )-2);
    __CrestStore(83605, (unsigned long )(& __retres28));
# 346 "xmltok_impl.c"
    __retres28 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83603, 53753, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 2;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(83610, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83609, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83608, 18, (long long )(end - ptr));
  __CrestLoad(83607, (unsigned long )0, (long long )3L);
  __CrestApply2(83606, 16, (long long )(end - ptr < 3L));
# 346 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(83611, 53757, 1);
    __CrestLoad(83613, (unsigned long )0, (long long )-2);
    __CrestStore(83614, (unsigned long )(& __retres28));
# 346 "xmltok_impl.c"
    __retres28 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83612, 53759, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 3;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(83619, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83618, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83617, 18, (long long )(end - ptr));
  __CrestLoad(83616, (unsigned long )0, (long long )4L);
  __CrestApply2(83615, 16, (long long )(end - ptr < 4L));
# 346 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(83620, 53763, 1);
    __CrestLoad(83622, (unsigned long )0, (long long )-2);
    __CrestStore(83623, (unsigned long )(& __retres28));
# 346 "xmltok_impl.c"
    __retres28 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83621, 53765, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 4;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 346 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83624, (unsigned long )0, (long long )0);
  __CrestStore(83625, (unsigned long )(& __retres28));
# 346 "xmltok_impl.c"
  __retres28 = 0;
# 346 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 348 "xmltok_impl.c"
  ptr += 2;
# 349 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  {
# 351 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(83628, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(83627, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(83626, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 351 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(83629, 53778, 1);

    } else {
      __CrestBranch(83630, 53779, 0);
# 351 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 352 "xmltok_impl.c"
    mem_24 = ptr + 1;
    {
    __CrestLoad(83633, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(83632, (unsigned long )0, (long long )0);
    __CrestApply2(83631, 12, (long long )((int const )*mem_24 == 0));
# 352 "xmltok_impl.c"
    if ((int const )*mem_24 == 0) {
      __CrestBranch(83634, 53783, 1);
# 352 "xmltok_impl.c"
      mem_25 = (struct normal_encoding *)enc;
      __CrestLoad(83636, (unsigned long )(& mem_25->type[(unsigned char )*ptr]), (long long )mem_25->type[(unsigned char )*ptr]);
      __CrestStore(83637, (unsigned long )(& tmp___4));
# 352 "xmltok_impl.c"
      tmp___4 = (int )mem_25->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(83635, 53784, 0);
# 352 "xmltok_impl.c"
      mem_26 = ptr + 1;
# 352 "xmltok_impl.c"
      mem_27 = ptr + 0;
      __CrestLoad(83638, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(83639, (unsigned long )mem_27, (long long )*mem_27);
# 352 "xmltok_impl.c"
      tmp___3 = unicode_byte_type((char )*mem_26, (char )*mem_27);
      __CrestHandleReturn(83641, (long long )tmp___3);
      __CrestStore(83640, (unsigned long )(& tmp___3));
      __CrestLoad(83642, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestStore(83643, (unsigned long )(& tmp___4));
# 352 "xmltok_impl.c"
      tmp___4 = tmp___3;
    }
    }
    }
    {
    {
    __CrestLoad(83646, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83645, (unsigned long )0, (long long )5);
    __CrestApply2(83644, 12, (long long )(tmp___4 == 5));
# 361 "xmltok_impl.c"
    if (tmp___4 == 5) {
      __CrestBranch(83647, 53787, 1);
# 361 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(83648, 53788, 0);

    }
    }
    {
    __CrestLoad(83651, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83650, (unsigned long )0, (long long )6);
    __CrestApply2(83649, 12, (long long )(tmp___4 == 6));
# 361 "xmltok_impl.c"
    if (tmp___4 == 6) {
      __CrestBranch(83652, 53790, 1);
# 361 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(83653, 53791, 0);

    }
    }
    {
    __CrestLoad(83656, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83655, (unsigned long )0, (long long )7);
    __CrestApply2(83654, 12, (long long )(tmp___4 == 7));
# 361 "xmltok_impl.c"
    if (tmp___4 == 7) {
      __CrestBranch(83657, 53793, 1);
# 361 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(83658, 53794, 0);

    }
    }
    {
    __CrestLoad(83661, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83660, (unsigned long )0, (long long )4);
    __CrestApply2(83659, 12, (long long )(tmp___4 == 4));
# 368 "xmltok_impl.c"
    if (tmp___4 == 4) {
      __CrestBranch(83662, 53796, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83663, 53797, 0);

    }
    }
    {
    __CrestLoad(83666, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83665, (unsigned long )0, (long long )10);
    __CrestApply2(83664, 12, (long long )(tmp___4 == 10));
# 368 "xmltok_impl.c"
    if (tmp___4 == 10) {
      __CrestBranch(83667, 53799, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83668, 53800, 0);

    }
    }
    {
    __CrestLoad(83671, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83670, (unsigned long )0, (long long )9);
    __CrestApply2(83669, 12, (long long )(tmp___4 == 9));
# 368 "xmltok_impl.c"
    if (tmp___4 == 9) {
      __CrestBranch(83672, 53802, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83673, 53803, 0);

    }
    }
    {
    __CrestLoad(83676, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83675, (unsigned long )0, (long long )8);
    __CrestApply2(83674, 12, (long long )(tmp___4 == 8));
# 368 "xmltok_impl.c"
    if (tmp___4 == 8) {
      __CrestBranch(83677, 53805, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83678, 53806, 0);

    }
    }
    {
    __CrestLoad(83681, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83680, (unsigned long )0, (long long )1);
    __CrestApply2(83679, 12, (long long )(tmp___4 == 1));
# 368 "xmltok_impl.c"
    if (tmp___4 == 1) {
      __CrestBranch(83682, 53808, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83683, 53809, 0);

    }
    }
    {
    __CrestLoad(83686, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(83685, (unsigned long )0, (long long )0);
    __CrestApply2(83684, 12, (long long )(tmp___4 == 0));
# 368 "xmltok_impl.c"
    if (tmp___4 == 0) {
      __CrestBranch(83687, 53811, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(83688, 53812, 0);

    }
    }
# 371 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(83693, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83692, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83691, 18, (long long )(end - ptr));
    __CrestLoad(83690, (unsigned long )0, (long long )2L);
    __CrestApply2(83689, 16, (long long )(end - ptr < 2L));
# 361 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(83694, 53815, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83696, (unsigned long )0, (long long )6);
      __CrestStore(83697, (unsigned long )(& __retres28));
# 361 "xmltok_impl.c"
      __retres28 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83695, 53818, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 2;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(83702, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83701, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83700, 18, (long long )(end - ptr));
    __CrestLoad(83699, (unsigned long )0, (long long )3L);
    __CrestApply2(83698, 16, (long long )(end - ptr < 3L));
# 361 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(83703, 53822, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83705, (unsigned long )0, (long long )6);
      __CrestStore(83706, (unsigned long )(& __retres28));
# 361 "xmltok_impl.c"
      __retres28 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83704, 53825, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 3;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(83711, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83710, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83709, 18, (long long )(end - ptr));
    __CrestLoad(83708, (unsigned long )0, (long long )4L);
    __CrestApply2(83707, 16, (long long )(end - ptr < 4L));
# 361 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(83712, 53829, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83714, (unsigned long )0, (long long )6);
      __CrestStore(83715, (unsigned long )(& __retres28));
# 361 "xmltok_impl.c"
      __retres28 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83713, 53832, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 4;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
# 369 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83716, (unsigned long )0, (long long )6);
    __CrestStore(83717, (unsigned long )(& __retres28));
# 370 "xmltok_impl.c"
    __retres28 = 6;
# 370 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 372 "xmltok_impl.c"
    ptr += 2;
# 373 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
# 376 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83718, (unsigned long )0, (long long )6);
  __CrestStore(83719, (unsigned long )(& __retres28));
# 377 "xmltok_impl.c"
  __retres28 = 6;
  return_label:
  {
  __CrestLoad(83720, (unsigned long )(& __retres28), (long long )__retres28);
  __CrestReturn(83721);
# 304 "xmltok_impl.c"
  return (__retres28);
  }
}
}
# 382 "xmltok_impl.c"
static int little2_scanEndTag(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_11 ;
  struct normal_encoding *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  struct normal_encoding *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  int __retres29 ;

  {
  __CrestCall(83722, 878);

  {
  __CrestLoad(83725, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(83724, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(83723, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 386 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(83726, 53846, 1);
    __CrestLoad(83728, (unsigned long )0, (long long )-1);
    __CrestStore(83729, (unsigned long )(& __retres29));
# 387 "xmltok_impl.c"
    __retres29 = -1;
# 387 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83727, 53848, 0);

  }
  }
  {
# 388 "xmltok_impl.c"
  mem_11 = ptr + 1;
  {
  __CrestLoad(83732, (unsigned long )mem_11, (long long )*mem_11);
  __CrestLoad(83731, (unsigned long )0, (long long )0);
  __CrestApply2(83730, 12, (long long )((int const )*mem_11 == 0));
# 388 "xmltok_impl.c"
  if ((int const )*mem_11 == 0) {
    __CrestBranch(83733, 53852, 1);
# 388 "xmltok_impl.c"
    mem_12 = (struct normal_encoding *)enc;
    __CrestLoad(83735, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
    __CrestStore(83736, (unsigned long )(& tmp___0));
# 388 "xmltok_impl.c"
    tmp___0 = (int )mem_12->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(83734, 53853, 0);
# 388 "xmltok_impl.c"
    mem_13 = ptr + 1;
# 388 "xmltok_impl.c"
    mem_14 = ptr + 0;
    __CrestLoad(83737, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(83738, (unsigned long )mem_14, (long long )*mem_14);
# 388 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_13, (char )*mem_14);
    __CrestHandleReturn(83740, (long long )tmp);
    __CrestStore(83739, (unsigned long )(& tmp));
    __CrestLoad(83741, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(83742, (unsigned long )(& tmp___0));
# 388 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(83745, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83744, (unsigned long )0, (long long )29);
  __CrestApply2(83743, 12, (long long )(tmp___0 == 29));
# 389 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(83746, 53856, 1);
# 389 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(83747, 53857, 0);

  }
  }
  {
  __CrestLoad(83750, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83749, (unsigned long )0, (long long )24);
  __CrestApply2(83748, 12, (long long )(tmp___0 == 24));
# 389 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(83751, 53859, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(83752, 53860, 0);

  }
  }
  {
  __CrestLoad(83755, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83754, (unsigned long )0, (long long )22);
  __CrestApply2(83753, 12, (long long )(tmp___0 == 22));
# 389 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(83756, 53862, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(83757, 53863, 0);

  }
  }
  {
  __CrestLoad(83760, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83759, (unsigned long )0, (long long )5);
  __CrestApply2(83758, 12, (long long )(tmp___0 == 5));
# 389 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(83761, 53865, 1);
# 389 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(83762, 53866, 0);

  }
  }
  {
  __CrestLoad(83765, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83764, (unsigned long )0, (long long )6);
  __CrestApply2(83763, 12, (long long )(tmp___0 == 6));
# 389 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(83766, 53868, 1);
# 389 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(83767, 53869, 0);

  }
  }
  {
  __CrestLoad(83770, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(83769, (unsigned long )0, (long long )7);
  __CrestApply2(83768, 12, (long long )(tmp___0 == 7));
# 389 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(83771, 53871, 1);
# 389 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(83772, 53872, 0);

  }
  }
# 390 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 389 "xmltok_impl.c"
  mem_15 = ptr + 1;
# 389 "xmltok_impl.c"
  mem_16 = ptr + 0;
# 389 "xmltok_impl.c"
  mem_17 = ptr + 0;
  {
  __CrestLoad(83781, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)]);
  __CrestLoad(83780, (unsigned long )0, (long long )1);
  __CrestLoad(83779, (unsigned long )mem_17, (long long )*mem_17);
  __CrestLoad(83778, (unsigned long )0, (long long )31);
  __CrestApply2(83777, 5, (long long )((int )((unsigned char )*mem_17) & 31));
  __CrestApply2(83776, 8, (long long )(1 << ((int )((unsigned char )*mem_17) & 31)));
  __CrestApply2(83775, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))));
  __CrestLoad(83774, (unsigned long )0, (long long )0);
  __CrestApply2(83773, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))) == 0));
# 389 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))) == 0) {
    __CrestBranch(83782, 53877, 1);
# 389 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83784, (unsigned long )0, (long long )0);
    __CrestStore(83785, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
    __retres29 = 0;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83783, 53880, 0);

  }
  }
  }
  case_24:
  case_22:
# 389 "xmltok_impl.c"
  ptr += 2;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(83790, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83789, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83788, 18, (long long )(end - ptr));
  __CrestLoad(83787, (unsigned long )0, (long long )2L);
  __CrestApply2(83786, 16, (long long )(end - ptr < 2L));
# 389 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(83791, 53884, 1);
    __CrestLoad(83793, (unsigned long )0, (long long )-2);
    __CrestStore(83794, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
    __retres29 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83792, 53886, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83795, (unsigned long )0, (long long )0);
  __CrestStore(83796, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
  __retres29 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 2;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(83801, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83800, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83799, 18, (long long )(end - ptr));
  __CrestLoad(83798, (unsigned long )0, (long long )3L);
  __CrestApply2(83797, 16, (long long )(end - ptr < 3L));
# 389 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(83802, 53893, 1);
    __CrestLoad(83804, (unsigned long )0, (long long )-2);
    __CrestStore(83805, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
    __retres29 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83803, 53895, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83806, (unsigned long )0, (long long )0);
  __CrestStore(83807, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
  __retres29 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 3;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(83812, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(83811, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(83810, 18, (long long )(end - ptr));
  __CrestLoad(83809, (unsigned long )0, (long long )4L);
  __CrestApply2(83808, 16, (long long )(end - ptr < 4L));
# 389 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(83813, 53902, 1);
    __CrestLoad(83815, (unsigned long )0, (long long )-2);
    __CrestStore(83816, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
    __retres29 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(83814, 53904, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83817, (unsigned long )0, (long long )0);
  __CrestStore(83818, (unsigned long )(& __retres29));
# 389 "xmltok_impl.c"
  __retres29 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 4;
# 389 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 391 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(83819, (unsigned long )0, (long long )0);
  __CrestStore(83820, (unsigned long )(& __retres29));
# 392 "xmltok_impl.c"
  __retres29 = 0;
# 392 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 394 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(83823, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(83822, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(83821, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 394 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(83824, 53918, 1);

    } else {
      __CrestBranch(83825, 53919, 0);
# 394 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 395 "xmltok_impl.c"
    mem_18 = ptr + 1;
    {
    __CrestLoad(83828, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(83827, (unsigned long )0, (long long )0);
    __CrestApply2(83826, 12, (long long )((int const )*mem_18 == 0));
# 395 "xmltok_impl.c"
    if ((int const )*mem_18 == 0) {
      __CrestBranch(83829, 53923, 1);
# 395 "xmltok_impl.c"
      mem_19 = (struct normal_encoding *)enc;
      __CrestLoad(83831, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
      __CrestStore(83832, (unsigned long )(& tmp___2));
# 395 "xmltok_impl.c"
      tmp___2 = (int )mem_19->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(83830, 53924, 0);
# 395 "xmltok_impl.c"
      mem_20 = ptr + 1;
# 395 "xmltok_impl.c"
      mem_21 = ptr + 0;
      __CrestLoad(83833, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(83834, (unsigned long )mem_21, (long long )*mem_21);
# 395 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_20, (char )*mem_21);
      __CrestHandleReturn(83836, (long long )tmp___1);
      __CrestStore(83835, (unsigned long )(& tmp___1));
      __CrestLoad(83837, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(83838, (unsigned long )(& tmp___2));
# 395 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(83841, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83840, (unsigned long )0, (long long )29);
    __CrestApply2(83839, 12, (long long )(tmp___2 == 29));
# 396 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(83842, 53927, 1);
# 396 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(83843, 53928, 0);

    }
    }
    {
    __CrestLoad(83846, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83845, (unsigned long )0, (long long )27);
    __CrestApply2(83844, 12, (long long )(tmp___2 == 27));
# 396 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(83847, 53930, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83848, 53931, 0);

    }
    }
    {
    __CrestLoad(83851, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83850, (unsigned long )0, (long long )26);
    __CrestApply2(83849, 12, (long long )(tmp___2 == 26));
# 396 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(83852, 53933, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83853, 53934, 0);

    }
    }
    {
    __CrestLoad(83856, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83855, (unsigned long )0, (long long )25);
    __CrestApply2(83854, 12, (long long )(tmp___2 == 25));
# 396 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(83857, 53936, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83858, 53937, 0);

    }
    }
    {
    __CrestLoad(83861, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83860, (unsigned long )0, (long long )24);
    __CrestApply2(83859, 12, (long long )(tmp___2 == 24));
# 396 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(83862, 53939, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83863, 53940, 0);

    }
    }
    {
    __CrestLoad(83866, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83865, (unsigned long )0, (long long )22);
    __CrestApply2(83864, 12, (long long )(tmp___2 == 22));
# 396 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(83867, 53942, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(83868, 53943, 0);

    }
    }
    {
    __CrestLoad(83871, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83870, (unsigned long )0, (long long )5);
    __CrestApply2(83869, 12, (long long )(tmp___2 == 5));
# 396 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(83872, 53945, 1);
# 396 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(83873, 53946, 0);

    }
    }
    {
    __CrestLoad(83876, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83875, (unsigned long )0, (long long )6);
    __CrestApply2(83874, 12, (long long )(tmp___2 == 6));
# 396 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(83877, 53948, 1);
# 396 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(83878, 53949, 0);

    }
    }
    {
    __CrestLoad(83881, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83880, (unsigned long )0, (long long )7);
    __CrestApply2(83879, 12, (long long )(tmp___2 == 7));
# 396 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(83882, 53951, 1);
# 396 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(83883, 53952, 0);

    }
    }
    {
    __CrestLoad(83886, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83885, (unsigned long )0, (long long )10);
    __CrestApply2(83884, 12, (long long )(tmp___2 == 10));
# 397 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(83887, 53954, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83888, 53955, 0);

    }
    }
    {
    __CrestLoad(83891, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83890, (unsigned long )0, (long long )9);
    __CrestApply2(83889, 12, (long long )(tmp___2 == 9));
# 397 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(83892, 53957, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83893, 53958, 0);

    }
    }
    {
    __CrestLoad(83896, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83895, (unsigned long )0, (long long )21);
    __CrestApply2(83894, 12, (long long )(tmp___2 == 21));
# 397 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(83897, 53960, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(83898, 53961, 0);

    }
    }
    {
    __CrestLoad(83901, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83900, (unsigned long )0, (long long )23);
    __CrestApply2(83899, 12, (long long )(tmp___2 == 23));
# 412 "xmltok_impl.c"
    if (tmp___2 == 23) {
      __CrestBranch(83902, 53963, 1);
# 412 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(83903, 53964, 0);

    }
    }
    {
    __CrestLoad(83906, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(83905, (unsigned long )0, (long long )11);
    __CrestApply2(83904, 12, (long long )(tmp___2 == 11));
# 418 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(83907, 53966, 1);
# 418 "xmltok_impl.c"
      goto case_11___0;
    } else {
      __CrestBranch(83908, 53967, 0);

    }
    }
# 421 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
    {
# 396 "xmltok_impl.c"
    mem_22 = ptr + 1;
# 396 "xmltok_impl.c"
    mem_23 = ptr + 0;
# 396 "xmltok_impl.c"
    mem_24 = ptr + 0;
    {
    __CrestLoad(83917, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]);
    __CrestLoad(83916, (unsigned long )0, (long long )1);
    __CrestLoad(83915, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(83914, (unsigned long )0, (long long )31);
    __CrestApply2(83913, 5, (long long )((int )((unsigned char )*mem_24) & 31));
    __CrestApply2(83912, 8, (long long )(1 << ((int )((unsigned char )*mem_24) & 31)));
    __CrestApply2(83911, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))));
    __CrestLoad(83910, (unsigned long )0, (long long )0);
    __CrestApply2(83909, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0));
# 396 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0) {
      __CrestBranch(83918, 53972, 1);
# 396 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83920, (unsigned long )0, (long long )0);
      __CrestStore(83921, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
      __retres29 = 0;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83919, 53975, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 396 "xmltok_impl.c"
    ptr += 2;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(83926, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83925, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83924, 18, (long long )(end - ptr));
    __CrestLoad(83923, (unsigned long )0, (long long )2L);
    __CrestApply2(83922, 16, (long long )(end - ptr < 2L));
# 396 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(83927, 53979, 1);
      __CrestLoad(83929, (unsigned long )0, (long long )-2);
      __CrestStore(83930, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
      __retres29 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83928, 53981, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83931, (unsigned long )0, (long long )0);
    __CrestStore(83932, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
    __retres29 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 2;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(83937, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83936, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83935, 18, (long long )(end - ptr));
    __CrestLoad(83934, (unsigned long )0, (long long )3L);
    __CrestApply2(83933, 16, (long long )(end - ptr < 3L));
# 396 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(83938, 53988, 1);
      __CrestLoad(83940, (unsigned long )0, (long long )-2);
      __CrestStore(83941, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
      __retres29 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83939, 53990, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83942, (unsigned long )0, (long long )0);
    __CrestStore(83943, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
    __retres29 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 3;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(83948, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(83947, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(83946, 18, (long long )(end - ptr));
    __CrestLoad(83945, (unsigned long )0, (long long )4L);
    __CrestApply2(83944, 16, (long long )(end - ptr < 4L));
# 396 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(83949, 53997, 1);
      __CrestLoad(83951, (unsigned long )0, (long long )-2);
      __CrestStore(83952, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
      __retres29 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(83950, 53999, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(83953, (unsigned long )0, (long long )0);
    __CrestStore(83954, (unsigned long )(& __retres29));
# 396 "xmltok_impl.c"
    __retres29 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 4;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 398 "xmltok_impl.c"
    ptr += 2;
    {
# 398 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(83957, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(83956, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(83955, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 398 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(83958, 54010, 1);

      } else {
        __CrestBranch(83959, 54011, 0);
# 398 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 399 "xmltok_impl.c"
      mem_25 = ptr + 1;
      {
      __CrestLoad(83962, (unsigned long )mem_25, (long long )*mem_25);
      __CrestLoad(83961, (unsigned long )0, (long long )0);
      __CrestApply2(83960, 12, (long long )((int const )*mem_25 == 0));
# 399 "xmltok_impl.c"
      if ((int const )*mem_25 == 0) {
        __CrestBranch(83963, 54015, 1);
# 399 "xmltok_impl.c"
        mem_26 = (struct normal_encoding *)enc;
        __CrestLoad(83965, (unsigned long )(& mem_26->type[(unsigned char )*ptr]),
                    (long long )mem_26->type[(unsigned char )*ptr]);
        __CrestStore(83966, (unsigned long )(& tmp___4));
# 399 "xmltok_impl.c"
        tmp___4 = (int )mem_26->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(83964, 54016, 0);
# 399 "xmltok_impl.c"
        mem_27 = ptr + 1;
# 399 "xmltok_impl.c"
        mem_28 = ptr + 0;
        __CrestLoad(83967, (unsigned long )mem_27, (long long )*mem_27);
        __CrestLoad(83968, (unsigned long )mem_28, (long long )*mem_28);
# 399 "xmltok_impl.c"
        tmp___3 = unicode_byte_type((char )*mem_27, (char )*mem_28);
        __CrestHandleReturn(83970, (long long )tmp___3);
        __CrestStore(83969, (unsigned long )(& tmp___3));
        __CrestLoad(83971, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestStore(83972, (unsigned long )(& tmp___4));
# 399 "xmltok_impl.c"
        tmp___4 = tmp___3;
      }
      }
      }
      {
      {
      __CrestLoad(83975, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(83974, (unsigned long )0, (long long )10);
      __CrestApply2(83973, 12, (long long )(tmp___4 == 10));
# 400 "xmltok_impl.c"
      if (tmp___4 == 10) {
        __CrestBranch(83976, 54019, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(83977, 54020, 0);

      }
      }
      {
      __CrestLoad(83980, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(83979, (unsigned long )0, (long long )9);
      __CrestApply2(83978, 12, (long long )(tmp___4 == 9));
# 400 "xmltok_impl.c"
      if (tmp___4 == 9) {
        __CrestBranch(83981, 54022, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(83982, 54023, 0);

      }
      }
      {
      __CrestLoad(83985, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(83984, (unsigned long )0, (long long )21);
      __CrestApply2(83983, 12, (long long )(tmp___4 == 21));
# 400 "xmltok_impl.c"
      if (tmp___4 == 21) {
        __CrestBranch(83986, 54025, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(83987, 54026, 0);

      }
      }
      {
      __CrestLoad(83990, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(83989, (unsigned long )0, (long long )11);
      __CrestApply2(83988, 12, (long long )(tmp___4 == 11));
# 402 "xmltok_impl.c"
      if (tmp___4 == 11) {
        __CrestBranch(83991, 54028, 1);
# 402 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(83992, 54029, 0);

      }
      }
# 405 "xmltok_impl.c"
      goto switch_default___0;
      case_10___0:
      case_9___0:
      case_21___0:
# 401 "xmltok_impl.c"
      goto switch_break___1;
      case_11:
# 403 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(83993, (unsigned long )0, (long long )5);
      __CrestStore(83994, (unsigned long )(& __retres29));
# 404 "xmltok_impl.c"
      __retres29 = 5;
# 404 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 406 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(83995, (unsigned long )0, (long long )0);
      __CrestStore(83996, (unsigned long )(& __retres29));
# 407 "xmltok_impl.c"
      __retres29 = 0;
# 407 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
# 398 "xmltok_impl.c"
      ptr += 2;
    }
    while_break___0: ;
    }
    __CrestLoad(83997, (unsigned long )0, (long long )-1);
    __CrestStore(83998, (unsigned long )(& __retres29));
# 410 "xmltok_impl.c"
    __retres29 = -1;
# 410 "xmltok_impl.c"
    goto return_label;
    case_23:
# 415 "xmltok_impl.c"
    ptr += 2;
# 416 "xmltok_impl.c"
    goto switch_break___0;
    case_11___0:
# 419 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(83999, (unsigned long )0, (long long )5);
    __CrestStore(84000, (unsigned long )(& __retres29));
# 420 "xmltok_impl.c"
    __retres29 = 5;
# 420 "xmltok_impl.c"
    goto return_label;
    switch_default___1:
# 422 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84001, (unsigned long )0, (long long )0);
    __CrestStore(84002, (unsigned long )(& __retres29));
# 423 "xmltok_impl.c"
    __retres29 = 0;
# 423 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(84003, (unsigned long )0, (long long )-1);
  __CrestStore(84004, (unsigned long )(& __retres29));
# 426 "xmltok_impl.c"
  __retres29 = -1;
  return_label:
  {
  __CrestLoad(84005, (unsigned long )(& __retres29), (long long )__retres29);
  __CrestReturn(84006);
# 382 "xmltok_impl.c"
  return (__retres29);
  }
}
}
# 431 "xmltok_impl.c"
static int little2_scanHexCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                                  char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  struct normal_encoding *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  int __retres17 ;

  {
  __CrestCall(84007, 879);

  {
  __CrestLoad(84010, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(84009, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(84008, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 435 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(84011, 54056, 1);
    {
# 436 "xmltok_impl.c"
    mem_9 = ptr + 1;
    {
    __CrestLoad(84015, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(84014, (unsigned long )0, (long long )0);
    __CrestApply2(84013, 12, (long long )((int const )*mem_9 == 0));
# 436 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(84016, 54059, 1);
# 436 "xmltok_impl.c"
      mem_10 = (struct normal_encoding *)enc;
      __CrestLoad(84018, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
      __CrestStore(84019, (unsigned long )(& tmp___0));
# 436 "xmltok_impl.c"
      tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84017, 54060, 0);
# 436 "xmltok_impl.c"
      mem_11 = ptr + 1;
# 436 "xmltok_impl.c"
      mem_12 = ptr + 0;
      __CrestLoad(84020, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(84021, (unsigned long )mem_12, (long long )*mem_12);
# 436 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
      __CrestHandleReturn(84023, (long long )tmp);
      __CrestStore(84022, (unsigned long )(& tmp));
      __CrestLoad(84024, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(84025, (unsigned long )(& tmp___0));
# 436 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(84028, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84027, (unsigned long )0, (long long )24);
    __CrestApply2(84026, 12, (long long )(tmp___0 == 24));
# 438 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(84029, 54063, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(84030, 54064, 0);

    }
    }
    {
    __CrestLoad(84033, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84032, (unsigned long )0, (long long )25);
    __CrestApply2(84031, 12, (long long )(tmp___0 == 25));
# 438 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(84034, 54066, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(84035, 54067, 0);

    }
    }
# 440 "xmltok_impl.c"
    goto switch_default;
    case_24:
    case_25:
# 439 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 441 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84036, (unsigned long )0, (long long )0);
    __CrestStore(84037, (unsigned long )(& __retres17));
# 442 "xmltok_impl.c"
    __retres17 = 0;
# 442 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
# 444 "xmltok_impl.c"
    ptr += 2;
    {
# 444 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(84040, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84039, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84038, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 444 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(84041, 54079, 1);

      } else {
        __CrestBranch(84042, 54080, 0);
# 444 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 445 "xmltok_impl.c"
      mem_13 = ptr + 1;
      {
      __CrestLoad(84045, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(84044, (unsigned long )0, (long long )0);
      __CrestApply2(84043, 12, (long long )((int const )*mem_13 == 0));
# 445 "xmltok_impl.c"
      if ((int const )*mem_13 == 0) {
        __CrestBranch(84046, 54084, 1);
# 445 "xmltok_impl.c"
        mem_14 = (struct normal_encoding *)enc;
        __CrestLoad(84048, (unsigned long )(& mem_14->type[(unsigned char )*ptr]),
                    (long long )mem_14->type[(unsigned char )*ptr]);
        __CrestStore(84049, (unsigned long )(& tmp___2));
# 445 "xmltok_impl.c"
        tmp___2 = (int )mem_14->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84047, 54085, 0);
# 445 "xmltok_impl.c"
        mem_15 = ptr + 1;
# 445 "xmltok_impl.c"
        mem_16 = ptr + 0;
        __CrestLoad(84050, (unsigned long )mem_15, (long long )*mem_15);
        __CrestLoad(84051, (unsigned long )mem_16, (long long )*mem_16);
# 445 "xmltok_impl.c"
        tmp___1 = unicode_byte_type((char )*mem_15, (char )*mem_16);
        __CrestHandleReturn(84053, (long long )tmp___1);
        __CrestStore(84052, (unsigned long )(& tmp___1));
        __CrestLoad(84054, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(84055, (unsigned long )(& tmp___2));
# 445 "xmltok_impl.c"
        tmp___2 = tmp___1;
      }
      }
      }
      {
      {
      __CrestLoad(84058, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(84057, (unsigned long )0, (long long )24);
      __CrestApply2(84056, 12, (long long )(tmp___2 == 24));
# 447 "xmltok_impl.c"
      if (tmp___2 == 24) {
        __CrestBranch(84059, 54088, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(84060, 54089, 0);

      }
      }
      {
      __CrestLoad(84063, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(84062, (unsigned long )0, (long long )25);
      __CrestApply2(84061, 12, (long long )(tmp___2 == 25));
# 447 "xmltok_impl.c"
      if (tmp___2 == 25) {
        __CrestBranch(84064, 54091, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(84065, 54092, 0);

      }
      }
      {
      __CrestLoad(84068, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(84067, (unsigned long )0, (long long )18);
      __CrestApply2(84066, 12, (long long )(tmp___2 == 18));
# 449 "xmltok_impl.c"
      if (tmp___2 == 18) {
        __CrestBranch(84069, 54094, 1);
# 449 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(84070, 54095, 0);

      }
      }
# 452 "xmltok_impl.c"
      goto switch_default___0;
      case_24___0:
      case_25___0:
# 448 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 450 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(84071, (unsigned long )0, (long long )10);
      __CrestStore(84072, (unsigned long )(& __retres17));
# 451 "xmltok_impl.c"
      __retres17 = 10;
# 451 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 453 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84073, (unsigned long )0, (long long )0);
      __CrestStore(84074, (unsigned long )(& __retres17));
# 454 "xmltok_impl.c"
      __retres17 = 0;
# 454 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
# 444 "xmltok_impl.c"
      ptr += 2;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(84012, 54107, 0);

  }
  }
  __CrestLoad(84075, (unsigned long )0, (long long )-1);
  __CrestStore(84076, (unsigned long )(& __retres17));
# 458 "xmltok_impl.c"
  __retres17 = -1;
  return_label:
  {
  __CrestLoad(84077, (unsigned long )(& __retres17), (long long )__retres17);
  __CrestReturn(84078);
# 431 "xmltok_impl.c"
  return (__retres17);
  }
}
}
# 463 "xmltok_impl.c"
static int little2_scanCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                               char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  struct normal_encoding *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  int __retres20 ;

  {
  __CrestCall(84079, 880);

  {
  __CrestLoad(84082, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(84081, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(84080, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 467 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(84083, 54111, 1);
    {
# 468 "xmltok_impl.c"
    mem_10 = ptr + 1;
    {
    __CrestLoad(84087, (unsigned long )mem_10, (long long )*mem_10);
    __CrestLoad(84086, (unsigned long )0, (long long )0);
    __CrestApply2(84085, 12, (long long )((int const )*mem_10 == 0));
# 468 "xmltok_impl.c"
    if ((int const )*mem_10 == 0) {
      __CrestBranch(84088, 54114, 1);
      {
# 468 "xmltok_impl.c"
      mem_11 = ptr + 0;
      {
      __CrestLoad(84092, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(84091, (unsigned long )0, (long long )120);
      __CrestApply2(84090, 12, (long long )((int const )*mem_11 == 120));
# 468 "xmltok_impl.c"
      if ((int const )*mem_11 == 120) {
        __CrestBranch(84093, 54117, 1);
# 469 "xmltok_impl.c"
        tmp = little2_scanHexCharRef(enc, ptr + 2, end, nextTokPtr);
        __CrestHandleReturn(84096, (long long )tmp);
        __CrestStore(84095, (unsigned long )(& tmp));
        __CrestLoad(84097, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(84098, (unsigned long )(& __retres20));
# 469 "xmltok_impl.c"
        __retres20 = tmp;
# 469 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84094, 54120, 0);

      }
      }
      }
    } else {
      __CrestBranch(84089, 54121, 0);

    }
    }
    }
    {
# 470 "xmltok_impl.c"
    mem_12 = ptr + 1;
    {
    __CrestLoad(84101, (unsigned long )mem_12, (long long )*mem_12);
    __CrestLoad(84100, (unsigned long )0, (long long )0);
    __CrestApply2(84099, 12, (long long )((int const )*mem_12 == 0));
# 470 "xmltok_impl.c"
    if ((int const )*mem_12 == 0) {
      __CrestBranch(84102, 54125, 1);
# 470 "xmltok_impl.c"
      mem_13 = (struct normal_encoding *)enc;
      __CrestLoad(84104, (unsigned long )(& mem_13->type[(unsigned char )*ptr]), (long long )mem_13->type[(unsigned char )*ptr]);
      __CrestStore(84105, (unsigned long )(& tmp___1));
# 470 "xmltok_impl.c"
      tmp___1 = (int )mem_13->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84103, 54126, 0);
# 470 "xmltok_impl.c"
      mem_14 = ptr + 1;
# 470 "xmltok_impl.c"
      mem_15 = ptr + 0;
      __CrestLoad(84106, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(84107, (unsigned long )mem_15, (long long )*mem_15);
# 470 "xmltok_impl.c"
      tmp___0 = unicode_byte_type((char )*mem_14, (char )*mem_15);
      __CrestHandleReturn(84109, (long long )tmp___0);
      __CrestStore(84108, (unsigned long )(& tmp___0));
      __CrestLoad(84110, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(84111, (unsigned long )(& tmp___1));
# 470 "xmltok_impl.c"
      tmp___1 = tmp___0;
    }
    }
    }
    {
    {
    __CrestLoad(84114, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(84113, (unsigned long )0, (long long )25);
    __CrestApply2(84112, 12, (long long )(tmp___1 == 25));
# 471 "xmltok_impl.c"
    if (tmp___1 == 25) {
      __CrestBranch(84115, 54129, 1);
# 471 "xmltok_impl.c"
      goto case_25;
    } else {
      __CrestBranch(84116, 54130, 0);

    }
    }
# 473 "xmltok_impl.c"
    goto switch_default;
    case_25:
# 472 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 474 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84117, (unsigned long )0, (long long )0);
    __CrestStore(84118, (unsigned long )(& __retres20));
# 475 "xmltok_impl.c"
    __retres20 = 0;
# 475 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
# 477 "xmltok_impl.c"
    ptr += 2;
    {
# 477 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(84121, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84120, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84119, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 477 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(84122, 54142, 1);

      } else {
        __CrestBranch(84123, 54143, 0);
# 477 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 478 "xmltok_impl.c"
      mem_16 = ptr + 1;
      {
      __CrestLoad(84126, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(84125, (unsigned long )0, (long long )0);
      __CrestApply2(84124, 12, (long long )((int const )*mem_16 == 0));
# 478 "xmltok_impl.c"
      if ((int const )*mem_16 == 0) {
        __CrestBranch(84127, 54147, 1);
# 478 "xmltok_impl.c"
        mem_17 = (struct normal_encoding *)enc;
        __CrestLoad(84129, (unsigned long )(& mem_17->type[(unsigned char )*ptr]),
                    (long long )mem_17->type[(unsigned char )*ptr]);
        __CrestStore(84130, (unsigned long )(& tmp___3));
# 478 "xmltok_impl.c"
        tmp___3 = (int )mem_17->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84128, 54148, 0);
# 478 "xmltok_impl.c"
        mem_18 = ptr + 1;
# 478 "xmltok_impl.c"
        mem_19 = ptr + 0;
        __CrestLoad(84131, (unsigned long )mem_18, (long long )*mem_18);
        __CrestLoad(84132, (unsigned long )mem_19, (long long )*mem_19);
# 478 "xmltok_impl.c"
        tmp___2 = unicode_byte_type((char )*mem_18, (char )*mem_19);
        __CrestHandleReturn(84134, (long long )tmp___2);
        __CrestStore(84133, (unsigned long )(& tmp___2));
        __CrestLoad(84135, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(84136, (unsigned long )(& tmp___3));
# 478 "xmltok_impl.c"
        tmp___3 = tmp___2;
      }
      }
      }
      {
      {
      __CrestLoad(84139, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(84138, (unsigned long )0, (long long )25);
      __CrestApply2(84137, 12, (long long )(tmp___3 == 25));
# 479 "xmltok_impl.c"
      if (tmp___3 == 25) {
        __CrestBranch(84140, 54151, 1);
# 479 "xmltok_impl.c"
        goto case_25___0;
      } else {
        __CrestBranch(84141, 54152, 0);

      }
      }
      {
      __CrestLoad(84144, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(84143, (unsigned long )0, (long long )18);
      __CrestApply2(84142, 12, (long long )(tmp___3 == 18));
# 481 "xmltok_impl.c"
      if (tmp___3 == 18) {
        __CrestBranch(84145, 54154, 1);
# 481 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(84146, 54155, 0);

      }
      }
# 484 "xmltok_impl.c"
      goto switch_default___0;
      case_25___0:
# 480 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 482 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(84147, (unsigned long )0, (long long )10);
      __CrestStore(84148, (unsigned long )(& __retres20));
# 483 "xmltok_impl.c"
      __retres20 = 10;
# 483 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 485 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84149, (unsigned long )0, (long long )0);
      __CrestStore(84150, (unsigned long )(& __retres20));
# 486 "xmltok_impl.c"
      __retres20 = 0;
# 486 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
# 477 "xmltok_impl.c"
      ptr += 2;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(84084, 54167, 0);

  }
  }
  __CrestLoad(84151, (unsigned long )0, (long long )-1);
  __CrestStore(84152, (unsigned long )(& __retres20));
# 490 "xmltok_impl.c"
  __retres20 = -1;
  return_label:
  {
  __CrestLoad(84153, (unsigned long )(& __retres20), (long long )__retres20);
  __CrestReturn(84154);
# 463 "xmltok_impl.c"
  return (__retres20);
  }
}
}
# 495 "xmltok_impl.c"
static int little2_scanRef(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  struct normal_encoding *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  int __retres24 ;

  {
  __CrestCall(84155, 881);

  {
  __CrestLoad(84158, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(84157, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(84156, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 499 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(84159, 54171, 1);
    __CrestLoad(84161, (unsigned long )0, (long long )-1);
    __CrestStore(84162, (unsigned long )(& __retres24));
# 500 "xmltok_impl.c"
    __retres24 = -1;
# 500 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(84160, 54173, 0);

  }
  }
  {
# 501 "xmltok_impl.c"
  mem_10 = ptr + 1;
  {
  __CrestLoad(84165, (unsigned long )mem_10, (long long )*mem_10);
  __CrestLoad(84164, (unsigned long )0, (long long )0);
  __CrestApply2(84163, 12, (long long )((int const )*mem_10 == 0));
# 501 "xmltok_impl.c"
  if ((int const )*mem_10 == 0) {
    __CrestBranch(84166, 54177, 1);
# 501 "xmltok_impl.c"
    mem_11 = (struct normal_encoding *)enc;
    __CrestLoad(84168, (unsigned long )(& mem_11->type[(unsigned char )*ptr]), (long long )mem_11->type[(unsigned char )*ptr]);
    __CrestStore(84169, (unsigned long )(& tmp___0));
# 501 "xmltok_impl.c"
    tmp___0 = (int )mem_11->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(84167, 54178, 0);
# 501 "xmltok_impl.c"
    mem_12 = ptr + 1;
# 501 "xmltok_impl.c"
    mem_13 = ptr + 0;
    __CrestLoad(84170, (unsigned long )mem_12, (long long )*mem_12);
    __CrestLoad(84171, (unsigned long )mem_13, (long long )*mem_13);
# 501 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
    __CrestHandleReturn(84173, (long long )tmp);
    __CrestStore(84172, (unsigned long )(& tmp));
    __CrestLoad(84174, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(84175, (unsigned long )(& tmp___0));
# 501 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(84178, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84177, (unsigned long )0, (long long )29);
  __CrestApply2(84176, 12, (long long )(tmp___0 == 29));
# 502 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(84179, 54181, 1);
# 502 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(84180, 54182, 0);

  }
  }
  {
  __CrestLoad(84183, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84182, (unsigned long )0, (long long )24);
  __CrestApply2(84181, 12, (long long )(tmp___0 == 24));
# 502 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(84184, 54184, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(84185, 54185, 0);

  }
  }
  {
  __CrestLoad(84188, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84187, (unsigned long )0, (long long )22);
  __CrestApply2(84186, 12, (long long )(tmp___0 == 22));
# 502 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(84189, 54187, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(84190, 54188, 0);

  }
  }
  {
  __CrestLoad(84193, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84192, (unsigned long )0, (long long )5);
  __CrestApply2(84191, 12, (long long )(tmp___0 == 5));
# 502 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(84194, 54190, 1);
# 502 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(84195, 54191, 0);

  }
  }
  {
  __CrestLoad(84198, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84197, (unsigned long )0, (long long )6);
  __CrestApply2(84196, 12, (long long )(tmp___0 == 6));
# 502 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(84199, 54193, 1);
# 502 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(84200, 54194, 0);

  }
  }
  {
  __CrestLoad(84203, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84202, (unsigned long )0, (long long )7);
  __CrestApply2(84201, 12, (long long )(tmp___0 == 7));
# 502 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(84204, 54196, 1);
# 502 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(84205, 54197, 0);

  }
  }
  {
  __CrestLoad(84208, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(84207, (unsigned long )0, (long long )19);
  __CrestApply2(84206, 12, (long long )(tmp___0 == 19));
# 503 "xmltok_impl.c"
  if (tmp___0 == 19) {
    __CrestBranch(84209, 54199, 1);
# 503 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(84210, 54200, 0);

  }
  }
# 505 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 502 "xmltok_impl.c"
  mem_14 = ptr + 1;
# 502 "xmltok_impl.c"
  mem_15 = ptr + 0;
# 502 "xmltok_impl.c"
  mem_16 = ptr + 0;
  {
  __CrestLoad(84219, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]);
  __CrestLoad(84218, (unsigned long )0, (long long )1);
  __CrestLoad(84217, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(84216, (unsigned long )0, (long long )31);
  __CrestApply2(84215, 5, (long long )((int )((unsigned char )*mem_16) & 31));
  __CrestApply2(84214, 8, (long long )(1 << ((int )((unsigned char )*mem_16) & 31)));
  __CrestApply2(84213, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))));
  __CrestLoad(84212, (unsigned long )0, (long long )0);
  __CrestApply2(84211, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0));
# 502 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0) {
    __CrestBranch(84220, 54205, 1);
# 502 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84222, (unsigned long )0, (long long )0);
    __CrestStore(84223, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
    __retres24 = 0;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(84221, 54208, 0);

  }
  }
  }
  case_24:
  case_22:
# 502 "xmltok_impl.c"
  ptr += 2;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(84228, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(84227, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(84226, 18, (long long )(end - ptr));
  __CrestLoad(84225, (unsigned long )0, (long long )2L);
  __CrestApply2(84224, 16, (long long )(end - ptr < 2L));
# 502 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(84229, 54212, 1);
    __CrestLoad(84231, (unsigned long )0, (long long )-2);
    __CrestStore(84232, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
    __retres24 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(84230, 54214, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(84233, (unsigned long )0, (long long )0);
  __CrestStore(84234, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
  __retres24 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 2;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(84239, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(84238, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(84237, 18, (long long )(end - ptr));
  __CrestLoad(84236, (unsigned long )0, (long long )3L);
  __CrestApply2(84235, 16, (long long )(end - ptr < 3L));
# 502 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(84240, 54221, 1);
    __CrestLoad(84242, (unsigned long )0, (long long )-2);
    __CrestStore(84243, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
    __retres24 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(84241, 54223, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(84244, (unsigned long )0, (long long )0);
  __CrestStore(84245, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
  __retres24 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 3;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(84250, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(84249, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(84248, 18, (long long )(end - ptr));
  __CrestLoad(84247, (unsigned long )0, (long long )4L);
  __CrestApply2(84246, 16, (long long )(end - ptr < 4L));
# 502 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(84251, 54230, 1);
    __CrestLoad(84253, (unsigned long )0, (long long )-2);
    __CrestStore(84254, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
    __retres24 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(84252, 54232, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(84255, (unsigned long )0, (long long )0);
  __CrestStore(84256, (unsigned long )(& __retres24));
# 502 "xmltok_impl.c"
  __retres24 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 4;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_19:
# 504 "xmltok_impl.c"
  tmp___1 = little2_scanCharRef(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(84258, (long long )tmp___1);
  __CrestStore(84257, (unsigned long )(& tmp___1));
  __CrestLoad(84259, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(84260, (unsigned long )(& __retres24));
# 504 "xmltok_impl.c"
  __retres24 = tmp___1;
# 504 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 506 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(84261, (unsigned long )0, (long long )0);
  __CrestStore(84262, (unsigned long )(& __retres24));
# 507 "xmltok_impl.c"
  __retres24 = 0;
# 507 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 509 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(84265, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(84264, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(84263, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 509 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(84266, 54249, 1);

    } else {
      __CrestBranch(84267, 54250, 0);
# 509 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 510 "xmltok_impl.c"
    mem_17 = ptr + 1;
    {
    __CrestLoad(84270, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(84269, (unsigned long )0, (long long )0);
    __CrestApply2(84268, 12, (long long )((int const )*mem_17 == 0));
# 510 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(84271, 54254, 1);
# 510 "xmltok_impl.c"
      mem_18 = (struct normal_encoding *)enc;
      __CrestLoad(84273, (unsigned long )(& mem_18->type[(unsigned char )*ptr]), (long long )mem_18->type[(unsigned char )*ptr]);
      __CrestStore(84274, (unsigned long )(& tmp___3));
# 510 "xmltok_impl.c"
      tmp___3 = (int )mem_18->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84272, 54255, 0);
# 510 "xmltok_impl.c"
      mem_19 = ptr + 1;
# 510 "xmltok_impl.c"
      mem_20 = ptr + 0;
      __CrestLoad(84275, (unsigned long )mem_19, (long long )*mem_19);
      __CrestLoad(84276, (unsigned long )mem_20, (long long )*mem_20);
# 510 "xmltok_impl.c"
      tmp___2 = unicode_byte_type((char )*mem_19, (char )*mem_20);
      __CrestHandleReturn(84278, (long long )tmp___2);
      __CrestStore(84277, (unsigned long )(& tmp___2));
      __CrestLoad(84279, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(84280, (unsigned long )(& tmp___3));
# 510 "xmltok_impl.c"
      tmp___3 = tmp___2;
    }
    }
    }
    {
    {
    __CrestLoad(84283, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84282, (unsigned long )0, (long long )29);
    __CrestApply2(84281, 12, (long long )(tmp___3 == 29));
# 511 "xmltok_impl.c"
    if (tmp___3 == 29) {
      __CrestBranch(84284, 54258, 1);
# 511 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(84285, 54259, 0);

    }
    }
    {
    __CrestLoad(84288, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84287, (unsigned long )0, (long long )27);
    __CrestApply2(84286, 12, (long long )(tmp___3 == 27));
# 511 "xmltok_impl.c"
    if (tmp___3 == 27) {
      __CrestBranch(84289, 54261, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84290, 54262, 0);

    }
    }
    {
    __CrestLoad(84293, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84292, (unsigned long )0, (long long )26);
    __CrestApply2(84291, 12, (long long )(tmp___3 == 26));
# 511 "xmltok_impl.c"
    if (tmp___3 == 26) {
      __CrestBranch(84294, 54264, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84295, 54265, 0);

    }
    }
    {
    __CrestLoad(84298, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84297, (unsigned long )0, (long long )25);
    __CrestApply2(84296, 12, (long long )(tmp___3 == 25));
# 511 "xmltok_impl.c"
    if (tmp___3 == 25) {
      __CrestBranch(84299, 54267, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84300, 54268, 0);

    }
    }
    {
    __CrestLoad(84303, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84302, (unsigned long )0, (long long )24);
    __CrestApply2(84301, 12, (long long )(tmp___3 == 24));
# 511 "xmltok_impl.c"
    if (tmp___3 == 24) {
      __CrestBranch(84304, 54270, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84305, 54271, 0);

    }
    }
    {
    __CrestLoad(84308, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84307, (unsigned long )0, (long long )22);
    __CrestApply2(84306, 12, (long long )(tmp___3 == 22));
# 511 "xmltok_impl.c"
    if (tmp___3 == 22) {
      __CrestBranch(84309, 54273, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84310, 54274, 0);

    }
    }
    {
    __CrestLoad(84313, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84312, (unsigned long )0, (long long )5);
    __CrestApply2(84311, 12, (long long )(tmp___3 == 5));
# 511 "xmltok_impl.c"
    if (tmp___3 == 5) {
      __CrestBranch(84314, 54276, 1);
# 511 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(84315, 54277, 0);

    }
    }
    {
    __CrestLoad(84318, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84317, (unsigned long )0, (long long )6);
    __CrestApply2(84316, 12, (long long )(tmp___3 == 6));
# 511 "xmltok_impl.c"
    if (tmp___3 == 6) {
      __CrestBranch(84319, 54279, 1);
# 511 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(84320, 54280, 0);

    }
    }
    {
    __CrestLoad(84323, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84322, (unsigned long )0, (long long )7);
    __CrestApply2(84321, 12, (long long )(tmp___3 == 7));
# 511 "xmltok_impl.c"
    if (tmp___3 == 7) {
      __CrestBranch(84324, 54282, 1);
# 511 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(84325, 54283, 0);

    }
    }
    {
    __CrestLoad(84328, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(84327, (unsigned long )0, (long long )18);
    __CrestApply2(84326, 12, (long long )(tmp___3 == 18));
# 512 "xmltok_impl.c"
    if (tmp___3 == 18) {
      __CrestBranch(84329, 54285, 1);
# 512 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(84330, 54286, 0);

    }
    }
# 515 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 511 "xmltok_impl.c"
    mem_21 = ptr + 1;
# 511 "xmltok_impl.c"
    mem_22 = ptr + 0;
# 511 "xmltok_impl.c"
    mem_23 = ptr + 0;
    {
    __CrestLoad(84339, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_21] << 3) + (int const )((int )((unsigned char )*mem_22) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_21] << 3) + (int const )((int )((unsigned char )*mem_22) >> 5)]);
    __CrestLoad(84338, (unsigned long )0, (long long )1);
    __CrestLoad(84337, (unsigned long )mem_23, (long long )*mem_23);
    __CrestLoad(84336, (unsigned long )0, (long long )31);
    __CrestApply2(84335, 5, (long long )((int )((unsigned char )*mem_23) & 31));
    __CrestApply2(84334, 8, (long long )(1 << ((int )((unsigned char )*mem_23) & 31)));
    __CrestApply2(84333, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_21] << 3) + (int const )((int )((unsigned char )*mem_22) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_23) & 31))));
    __CrestLoad(84332, (unsigned long )0, (long long )0);
    __CrestApply2(84331, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_21] << 3) + (int const )((int )((unsigned char )*mem_22) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_23) & 31))) == 0));
# 511 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_21] << 3) + (int const )((int )((unsigned char )*mem_22) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_23) & 31))) == 0) {
      __CrestBranch(84340, 54291, 1);
# 511 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84342, (unsigned long )0, (long long )0);
      __CrestStore(84343, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
      __retres24 = 0;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84341, 54294, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 511 "xmltok_impl.c"
    ptr += 2;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(84348, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84347, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84346, 18, (long long )(end - ptr));
    __CrestLoad(84345, (unsigned long )0, (long long )2L);
    __CrestApply2(84344, 16, (long long )(end - ptr < 2L));
# 511 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(84349, 54298, 1);
      __CrestLoad(84351, (unsigned long )0, (long long )-2);
      __CrestStore(84352, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
      __retres24 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84350, 54300, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84353, (unsigned long )0, (long long )0);
    __CrestStore(84354, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
    __retres24 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 2;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(84359, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84358, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84357, 18, (long long )(end - ptr));
    __CrestLoad(84356, (unsigned long )0, (long long )3L);
    __CrestApply2(84355, 16, (long long )(end - ptr < 3L));
# 511 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(84360, 54307, 1);
      __CrestLoad(84362, (unsigned long )0, (long long )-2);
      __CrestStore(84363, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
      __retres24 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84361, 54309, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84364, (unsigned long )0, (long long )0);
    __CrestStore(84365, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
    __retres24 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 3;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(84370, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84369, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84368, 18, (long long )(end - ptr));
    __CrestLoad(84367, (unsigned long )0, (long long )4L);
    __CrestApply2(84366, 16, (long long )(end - ptr < 4L));
# 511 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(84371, 54316, 1);
      __CrestLoad(84373, (unsigned long )0, (long long )-2);
      __CrestStore(84374, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
      __retres24 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84372, 54318, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84375, (unsigned long )0, (long long )0);
    __CrestStore(84376, (unsigned long )(& __retres24));
# 511 "xmltok_impl.c"
    __retres24 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 4;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 513 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(84377, (unsigned long )0, (long long )9);
    __CrestStore(84378, (unsigned long )(& __retres24));
# 514 "xmltok_impl.c"
    __retres24 = 9;
# 514 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 516 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84379, (unsigned long )0, (long long )0);
    __CrestStore(84380, (unsigned long )(& __retres24));
# 517 "xmltok_impl.c"
    __retres24 = 0;
# 517 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(84381, (unsigned long )0, (long long )-1);
  __CrestStore(84382, (unsigned long )(& __retres24));
# 520 "xmltok_impl.c"
  __retres24 = -1;
  return_label:
  {
  __CrestLoad(84383, (unsigned long )(& __retres24), (long long )__retres24);
  __CrestReturn(84384);
# 495 "xmltok_impl.c"
  return (__retres24);
  }
}
}
# 525 "xmltok_impl.c"
static int little2_scanAtts(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int t ;
  int tmp___3 ;
  int open ;
  int tmp___4 ;
  int t___0 ;
  int tmp___5 ;
  int tok ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  char const *mem_22 ;
  struct normal_encoding *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  struct normal_encoding *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  struct normal_encoding *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  char const *mem_40 ;
  struct normal_encoding *mem_41 ;
  char const *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  struct normal_encoding *mem_45 ;
  char const *mem_46 ;
  char const *mem_47 ;
  char const *mem_48 ;
  struct normal_encoding *mem_49 ;
  char const *mem_50 ;
  char const *mem_51 ;
  char const *mem_52 ;
  struct normal_encoding *mem_53 ;
  char const *mem_54 ;
  char const *mem_55 ;
  char const *mem_56 ;
  char const *mem_57 ;
  char const *mem_58 ;
  char const *mem_59 ;
  char const *mem_60 ;
  int __retres61 ;

  {
  __CrestCall(84385, 882);

  __CrestLoad(84386, (unsigned long )0, (long long )0);
  __CrestStore(84387, (unsigned long )(& hadColon));
# 530 "xmltok_impl.c"
  hadColon = 0;
  {
# 532 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(84390, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(84389, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(84388, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 532 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(84391, 54339, 1);

    } else {
      __CrestBranch(84392, 54340, 0);
# 532 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 533 "xmltok_impl.c"
    mem_22 = ptr + 1;
    {
    __CrestLoad(84395, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(84394, (unsigned long )0, (long long )0);
    __CrestApply2(84393, 12, (long long )((int const )*mem_22 == 0));
# 533 "xmltok_impl.c"
    if ((int const )*mem_22 == 0) {
      __CrestBranch(84396, 54344, 1);
# 533 "xmltok_impl.c"
      mem_23 = (struct normal_encoding *)enc;
      __CrestLoad(84398, (unsigned long )(& mem_23->type[(unsigned char )*ptr]), (long long )mem_23->type[(unsigned char )*ptr]);
      __CrestStore(84399, (unsigned long )(& tmp___0));
# 533 "xmltok_impl.c"
      tmp___0 = (int )mem_23->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84397, 54345, 0);
# 533 "xmltok_impl.c"
      mem_24 = ptr + 1;
# 533 "xmltok_impl.c"
      mem_25 = ptr + 0;
      __CrestLoad(84400, (unsigned long )mem_24, (long long )*mem_24);
      __CrestLoad(84401, (unsigned long )mem_25, (long long )*mem_25);
# 533 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_24, (char )*mem_25);
      __CrestHandleReturn(84403, (long long )tmp);
      __CrestStore(84402, (unsigned long )(& tmp));
      __CrestLoad(84404, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(84405, (unsigned long )(& tmp___0));
# 533 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(84408, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84407, (unsigned long )0, (long long )29);
    __CrestApply2(84406, 12, (long long )(tmp___0 == 29));
# 534 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(84409, 54348, 1);
# 534 "xmltok_impl.c"
      goto case_29;
    } else {
      __CrestBranch(84410, 54349, 0);

    }
    }
    {
    __CrestLoad(84413, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84412, (unsigned long )0, (long long )27);
    __CrestApply2(84411, 12, (long long )(tmp___0 == 27));
# 534 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(84414, 54351, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84415, 54352, 0);

    }
    }
    {
    __CrestLoad(84418, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84417, (unsigned long )0, (long long )26);
    __CrestApply2(84416, 12, (long long )(tmp___0 == 26));
# 534 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(84419, 54354, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84420, 54355, 0);

    }
    }
    {
    __CrestLoad(84423, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84422, (unsigned long )0, (long long )25);
    __CrestApply2(84421, 12, (long long )(tmp___0 == 25));
# 534 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(84424, 54357, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84425, 54358, 0);

    }
    }
    {
    __CrestLoad(84428, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84427, (unsigned long )0, (long long )24);
    __CrestApply2(84426, 12, (long long )(tmp___0 == 24));
# 534 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(84429, 54360, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84430, 54361, 0);

    }
    }
    {
    __CrestLoad(84433, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84432, (unsigned long )0, (long long )22);
    __CrestApply2(84431, 12, (long long )(tmp___0 == 22));
# 534 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(84434, 54363, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(84435, 54364, 0);

    }
    }
    {
    __CrestLoad(84438, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84437, (unsigned long )0, (long long )5);
    __CrestApply2(84436, 12, (long long )(tmp___0 == 5));
# 534 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(84439, 54366, 1);
# 534 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(84440, 54367, 0);

    }
    }
    {
    __CrestLoad(84443, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84442, (unsigned long )0, (long long )6);
    __CrestApply2(84441, 12, (long long )(tmp___0 == 6));
# 534 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(84444, 54369, 1);
# 534 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(84445, 54370, 0);

    }
    }
    {
    __CrestLoad(84448, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84447, (unsigned long )0, (long long )7);
    __CrestApply2(84446, 12, (long long )(tmp___0 == 7));
# 534 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(84449, 54372, 1);
# 534 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(84450, 54373, 0);

    }
    }
    {
    __CrestLoad(84453, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84452, (unsigned long )0, (long long )23);
    __CrestApply2(84451, 12, (long long )(tmp___0 == 23));
# 536 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(84454, 54375, 1);
# 536 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(84455, 54376, 0);

    }
    }
    {
    __CrestLoad(84458, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84457, (unsigned long )0, (long long )10);
    __CrestApply2(84456, 12, (long long )(tmp___0 == 10));
# 553 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(84459, 54378, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(84460, 54379, 0);

    }
    }
    {
    __CrestLoad(84463, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84462, (unsigned long )0, (long long )9);
    __CrestApply2(84461, 12, (long long )(tmp___0 == 9));
# 553 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(84464, 54381, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(84465, 54382, 0);

    }
    }
    {
    __CrestLoad(84468, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84467, (unsigned long )0, (long long )21);
    __CrestApply2(84466, 12, (long long )(tmp___0 == 21));
# 553 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(84469, 54384, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(84470, 54385, 0);

    }
    }
    {
    __CrestLoad(84473, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(84472, (unsigned long )0, (long long )14);
    __CrestApply2(84471, 12, (long long )(tmp___0 == 14));
# 574 "xmltok_impl.c"
    if (tmp___0 == 14) {
      __CrestBranch(84474, 54387, 1);
# 574 "xmltok_impl.c"
      goto case_14;
    } else {
      __CrestBranch(84475, 54388, 0);

    }
    }
# 674 "xmltok_impl.c"
    goto switch_default___5;
    case_29:
    {
# 534 "xmltok_impl.c"
    mem_26 = ptr + 1;
# 534 "xmltok_impl.c"
    mem_27 = ptr + 0;
# 534 "xmltok_impl.c"
    mem_28 = ptr + 0;
    {
    __CrestLoad(84484, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]);
    __CrestLoad(84483, (unsigned long )0, (long long )1);
    __CrestLoad(84482, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(84481, (unsigned long )0, (long long )31);
    __CrestApply2(84480, 5, (long long )((int )((unsigned char )*mem_28) & 31));
    __CrestApply2(84479, 8, (long long )(1 << ((int )((unsigned char )*mem_28) & 31)));
    __CrestApply2(84478, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))));
    __CrestLoad(84477, (unsigned long )0, (long long )0);
    __CrestApply2(84476, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0));
# 534 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0) {
      __CrestBranch(84485, 54393, 1);
# 534 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84487, (unsigned long )0, (long long )0);
      __CrestStore(84488, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
      __retres61 = 0;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84486, 54396, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24:
    case_22:
# 534 "xmltok_impl.c"
    ptr += 2;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_5:
    {
    __CrestLoad(84493, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84492, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84491, 18, (long long )(end - ptr));
    __CrestLoad(84490, (unsigned long )0, (long long )2L);
    __CrestApply2(84489, 16, (long long )(end - ptr < 2L));
# 534 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(84494, 54400, 1);
      __CrestLoad(84496, (unsigned long )0, (long long )-2);
      __CrestStore(84497, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
      __retres61 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84495, 54402, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84498, (unsigned long )0, (long long )0);
    __CrestStore(84499, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
    __retres61 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 2;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(84504, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84503, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84502, 18, (long long )(end - ptr));
    __CrestLoad(84501, (unsigned long )0, (long long )3L);
    __CrestApply2(84500, 16, (long long )(end - ptr < 3L));
# 534 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(84505, 54409, 1);
      __CrestLoad(84507, (unsigned long )0, (long long )-2);
      __CrestStore(84508, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
      __retres61 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84506, 54411, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84509, (unsigned long )0, (long long )0);
    __CrestStore(84510, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
    __retres61 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 3;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(84515, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84514, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84513, 18, (long long )(end - ptr));
    __CrestLoad(84512, (unsigned long )0, (long long )4L);
    __CrestApply2(84511, 16, (long long )(end - ptr < 4L));
# 534 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(84516, 54418, 1);
      __CrestLoad(84518, (unsigned long )0, (long long )-2);
      __CrestStore(84519, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
      __retres61 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84517, 54420, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84520, (unsigned long )0, (long long )0);
    __CrestStore(84521, (unsigned long )(& __retres61));
# 534 "xmltok_impl.c"
    __retres61 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 4;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_23:
    {
    __CrestLoad(84524, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(84523, (unsigned long )0, (long long )0);
    __CrestApply2(84522, 13, (long long )(hadColon != 0));
# 537 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(84525, 54427, 1);
# 538 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84527, (unsigned long )0, (long long )0);
      __CrestStore(84528, (unsigned long )(& __retres61));
# 539 "xmltok_impl.c"
      __retres61 = 0;
# 539 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84526, 54430, 0);

    }
    }
    __CrestLoad(84529, (unsigned long )0, (long long )1);
    __CrestStore(84530, (unsigned long )(& hadColon));
# 541 "xmltok_impl.c"
    hadColon = 1;
# 542 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(84533, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(84532, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(84531, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 543 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(84534, 54433, 1);
      __CrestLoad(84536, (unsigned long )0, (long long )-1);
      __CrestStore(84537, (unsigned long )(& __retres61));
# 544 "xmltok_impl.c"
      __retres61 = -1;
# 544 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84535, 54435, 0);

    }
    }
    {
# 545 "xmltok_impl.c"
    mem_29 = ptr + 1;
    {
    __CrestLoad(84540, (unsigned long )mem_29, (long long )*mem_29);
    __CrestLoad(84539, (unsigned long )0, (long long )0);
    __CrestApply2(84538, 12, (long long )((int const )*mem_29 == 0));
# 545 "xmltok_impl.c"
    if ((int const )*mem_29 == 0) {
      __CrestBranch(84541, 54439, 1);
# 545 "xmltok_impl.c"
      mem_30 = (struct normal_encoding *)enc;
      __CrestLoad(84543, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
      __CrestStore(84544, (unsigned long )(& tmp___2));
# 545 "xmltok_impl.c"
      tmp___2 = (int )mem_30->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84542, 54440, 0);
# 545 "xmltok_impl.c"
      mem_31 = ptr + 1;
# 545 "xmltok_impl.c"
      mem_32 = ptr + 0;
      __CrestLoad(84545, (unsigned long )mem_31, (long long )*mem_31);
      __CrestLoad(84546, (unsigned long )mem_32, (long long )*mem_32);
# 545 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_31, (char )*mem_32);
      __CrestHandleReturn(84548, (long long )tmp___1);
      __CrestStore(84547, (unsigned long )(& tmp___1));
      __CrestLoad(84549, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(84550, (unsigned long )(& tmp___2));
# 545 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(84553, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84552, (unsigned long )0, (long long )29);
    __CrestApply2(84551, 12, (long long )(tmp___2 == 29));
# 546 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(84554, 54443, 1);
# 546 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(84555, 54444, 0);

    }
    }
    {
    __CrestLoad(84558, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84557, (unsigned long )0, (long long )24);
    __CrestApply2(84556, 12, (long long )(tmp___2 == 24));
# 546 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(84559, 54446, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(84560, 54447, 0);

    }
    }
    {
    __CrestLoad(84563, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84562, (unsigned long )0, (long long )22);
    __CrestApply2(84561, 12, (long long )(tmp___2 == 22));
# 546 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(84564, 54449, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(84565, 54450, 0);

    }
    }
    {
    __CrestLoad(84568, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84567, (unsigned long )0, (long long )5);
    __CrestApply2(84566, 12, (long long )(tmp___2 == 5));
# 546 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(84569, 54452, 1);
# 546 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(84570, 54453, 0);

    }
    }
    {
    __CrestLoad(84573, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84572, (unsigned long )0, (long long )6);
    __CrestApply2(84571, 12, (long long )(tmp___2 == 6));
# 546 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(84574, 54455, 1);
# 546 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(84575, 54456, 0);

    }
    }
    {
    __CrestLoad(84578, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(84577, (unsigned long )0, (long long )7);
    __CrestApply2(84576, 12, (long long )(tmp___2 == 7));
# 546 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(84579, 54458, 1);
# 546 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(84580, 54459, 0);

    }
    }
# 547 "xmltok_impl.c"
    goto switch_default;
    case_29___0:
    {
# 546 "xmltok_impl.c"
    mem_33 = ptr + 1;
# 546 "xmltok_impl.c"
    mem_34 = ptr + 0;
# 546 "xmltok_impl.c"
    mem_35 = ptr + 0;
    {
    __CrestLoad(84589, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_33] << 3) + (int const )((int )((unsigned char )*mem_34) >> 5)]),
                (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_33] << 3) + (int const )((int )((unsigned char )*mem_34) >> 5)]);
    __CrestLoad(84588, (unsigned long )0, (long long )1);
    __CrestLoad(84587, (unsigned long )mem_35, (long long )*mem_35);
    __CrestLoad(84586, (unsigned long )0, (long long )31);
    __CrestApply2(84585, 5, (long long )((int )((unsigned char )*mem_35) & 31));
    __CrestApply2(84584, 8, (long long )(1 << ((int )((unsigned char )*mem_35) & 31)));
    __CrestApply2(84583, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_33] << 3) + (int const )((int )((unsigned char )*mem_34) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_35) & 31))));
    __CrestLoad(84582, (unsigned long )0, (long long )0);
    __CrestApply2(84581, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_33] << 3) + (int const )((int )((unsigned char )*mem_34) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_35) & 31))) == 0));
# 546 "xmltok_impl.c"
    if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_33] << 3) + (int const )((int )((unsigned char )*mem_34) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_35) & 31))) == 0) {
      __CrestBranch(84590, 54464, 1);
# 546 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84592, (unsigned long )0, (long long )0);
      __CrestStore(84593, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
      __retres61 = 0;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84591, 54467, 0);

    }
    }
    }
    case_24___0:
    case_22___0:
# 546 "xmltok_impl.c"
    ptr += 2;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(84598, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84597, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84596, 18, (long long )(end - ptr));
    __CrestLoad(84595, (unsigned long )0, (long long )2L);
    __CrestApply2(84594, 16, (long long )(end - ptr < 2L));
# 546 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(84599, 54471, 1);
      __CrestLoad(84601, (unsigned long )0, (long long )-2);
      __CrestStore(84602, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
      __retres61 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84600, 54473, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84603, (unsigned long )0, (long long )0);
    __CrestStore(84604, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
    __retres61 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 2;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(84609, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84608, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84607, 18, (long long )(end - ptr));
    __CrestLoad(84606, (unsigned long )0, (long long )3L);
    __CrestApply2(84605, 16, (long long )(end - ptr < 3L));
# 546 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(84610, 54480, 1);
      __CrestLoad(84612, (unsigned long )0, (long long )-2);
      __CrestStore(84613, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
      __retres61 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84611, 54482, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84614, (unsigned long )0, (long long )0);
    __CrestStore(84615, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
    __retres61 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 3;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(84620, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(84619, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(84618, 18, (long long )(end - ptr));
    __CrestLoad(84617, (unsigned long )0, (long long )4L);
    __CrestApply2(84616, 16, (long long )(end - ptr < 4L));
# 546 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(84621, 54489, 1);
      __CrestLoad(84623, (unsigned long )0, (long long )-2);
      __CrestStore(84624, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
      __retres61 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84622, 54491, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84625, (unsigned long )0, (long long )0);
    __CrestStore(84626, (unsigned long )(& __retres61));
# 546 "xmltok_impl.c"
    __retres61 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 4;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    switch_default:
# 548 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84627, (unsigned long )0, (long long )0);
    __CrestStore(84628, (unsigned long )(& __retres61));
# 549 "xmltok_impl.c"
    __retres61 = 0;
# 549 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
# 551 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    case_21:
    {
# 554 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
# 557 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(84631, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84630, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84629, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 558 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(84632, 54507, 1);
        __CrestLoad(84634, (unsigned long )0, (long long )-1);
        __CrestStore(84635, (unsigned long )(& __retres61));
# 559 "xmltok_impl.c"
        __retres61 = -1;
# 559 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84633, 54509, 0);

      }
      }
      {
# 560 "xmltok_impl.c"
      mem_36 = ptr + 1;
      {
      __CrestLoad(84638, (unsigned long )mem_36, (long long )*mem_36);
      __CrestLoad(84637, (unsigned long )0, (long long )0);
      __CrestApply2(84636, 12, (long long )((int const )*mem_36 == 0));
# 560 "xmltok_impl.c"
      if ((int const )*mem_36 == 0) {
        __CrestBranch(84639, 54513, 1);
# 560 "xmltok_impl.c"
        mem_37 = (struct normal_encoding *)enc;
        __CrestLoad(84641, (unsigned long )(& mem_37->type[(unsigned char )*ptr]),
                    (long long )mem_37->type[(unsigned char )*ptr]);
        __CrestStore(84642, (unsigned long )(& t));
# 560 "xmltok_impl.c"
        t = (int )mem_37->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84640, 54514, 0);
# 560 "xmltok_impl.c"
        mem_38 = ptr + 1;
# 560 "xmltok_impl.c"
        mem_39 = ptr + 0;
        __CrestLoad(84643, (unsigned long )mem_38, (long long )*mem_38);
        __CrestLoad(84644, (unsigned long )mem_39, (long long )*mem_39);
# 560 "xmltok_impl.c"
        tmp___3 = unicode_byte_type((char )*mem_38, (char )*mem_39);
        __CrestHandleReturn(84646, (long long )tmp___3);
        __CrestStore(84645, (unsigned long )(& tmp___3));
        __CrestLoad(84647, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestStore(84648, (unsigned long )(& t));
# 560 "xmltok_impl.c"
        t = tmp___3;
      }
      }
      }
      {
      __CrestLoad(84651, (unsigned long )(& t), (long long )t);
      __CrestLoad(84650, (unsigned long )0, (long long )14);
      __CrestApply2(84649, 12, (long long )(t == 14));
# 561 "xmltok_impl.c"
      if (t == 14) {
        __CrestBranch(84652, 54516, 1);
# 562 "xmltok_impl.c"
        goto while_break___0;
      } else {
        __CrestBranch(84653, 54517, 0);

      }
      }
      {
      {
      __CrestLoad(84656, (unsigned long )(& t), (long long )t);
      __CrestLoad(84655, (unsigned long )0, (long long )9);
      __CrestApply2(84654, 12, (long long )(t == 9));
# 566 "xmltok_impl.c"
      if (t == 9) {
        __CrestBranch(84657, 54520, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(84658, 54521, 0);

      }
      }
      {
      __CrestLoad(84661, (unsigned long )(& t), (long long )t);
      __CrestLoad(84660, (unsigned long )0, (long long )10);
      __CrestApply2(84659, 12, (long long )(t == 10));
# 566 "xmltok_impl.c"
      if (t == 10) {
        __CrestBranch(84662, 54523, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(84663, 54524, 0);

      }
      }
      {
      __CrestLoad(84666, (unsigned long )(& t), (long long )t);
      __CrestLoad(84665, (unsigned long )0, (long long )21);
      __CrestApply2(84664, 12, (long long )(t == 21));
# 566 "xmltok_impl.c"
      if (t == 21) {
        __CrestBranch(84667, 54526, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(84668, 54527, 0);

      }
      }
# 568 "xmltok_impl.c"
      goto switch_default___0;
      case_9___0:
      case_10___0:
      case_21___0:
# 567 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 569 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84669, (unsigned long )0, (long long )0);
      __CrestStore(84670, (unsigned long )(& __retres61));
# 570 "xmltok_impl.c"
      __retres61 = 0;
# 570 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
    }
    while_break___0: ;
    }
    case_14:
    __CrestLoad(84671, (unsigned long )0, (long long )0);
    __CrestStore(84672, (unsigned long )(& hadColon));
# 578 "xmltok_impl.c"
    hadColon = 0;
    {
# 580 "xmltok_impl.c"
    while (1) {
      while_continue___1: ;
# 581 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(84675, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84674, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84673, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 582 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(84676, 54541, 1);
        __CrestLoad(84678, (unsigned long )0, (long long )-1);
        __CrestStore(84679, (unsigned long )(& __retres61));
# 583 "xmltok_impl.c"
        __retres61 = -1;
# 583 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84677, 54543, 0);

      }
      }
      {
# 584 "xmltok_impl.c"
      mem_40 = ptr + 1;
      {
      __CrestLoad(84682, (unsigned long )mem_40, (long long )*mem_40);
      __CrestLoad(84681, (unsigned long )0, (long long )0);
      __CrestApply2(84680, 12, (long long )((int const )*mem_40 == 0));
# 584 "xmltok_impl.c"
      if ((int const )*mem_40 == 0) {
        __CrestBranch(84683, 54547, 1);
# 584 "xmltok_impl.c"
        mem_41 = (struct normal_encoding *)enc;
        __CrestLoad(84685, (unsigned long )(& mem_41->type[(unsigned char )*ptr]),
                    (long long )mem_41->type[(unsigned char )*ptr]);
        __CrestStore(84686, (unsigned long )(& open));
# 584 "xmltok_impl.c"
        open = (int )mem_41->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84684, 54548, 0);
# 584 "xmltok_impl.c"
        mem_42 = ptr + 1;
# 584 "xmltok_impl.c"
        mem_43 = ptr + 0;
        __CrestLoad(84687, (unsigned long )mem_42, (long long )*mem_42);
        __CrestLoad(84688, (unsigned long )mem_43, (long long )*mem_43);
# 584 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_42, (char )*mem_43);
        __CrestHandleReturn(84690, (long long )tmp___4);
        __CrestStore(84689, (unsigned long )(& tmp___4));
        __CrestLoad(84691, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(84692, (unsigned long )(& open));
# 584 "xmltok_impl.c"
        open = tmp___4;
      }
      }
      }
      {
      __CrestLoad(84695, (unsigned long )(& open), (long long )open);
      __CrestLoad(84694, (unsigned long )0, (long long )12);
      __CrestApply2(84693, 12, (long long )(open == 12));
# 585 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(84696, 54550, 1);
# 586 "xmltok_impl.c"
        goto while_break___1;
      } else {
        __CrestBranch(84697, 54551, 0);
        {
        __CrestLoad(84700, (unsigned long )(& open), (long long )open);
        __CrestLoad(84699, (unsigned long )0, (long long )13);
        __CrestApply2(84698, 12, (long long )(open == 13));
# 585 "xmltok_impl.c"
        if (open == 13) {
          __CrestBranch(84701, 54552, 1);
# 586 "xmltok_impl.c"
          goto while_break___1;
        } else {
          __CrestBranch(84702, 54553, 0);

        }
        }
      }
      }
      {
      {
      __CrestLoad(84705, (unsigned long )(& open), (long long )open);
      __CrestLoad(84704, (unsigned long )0, (long long )9);
      __CrestApply2(84703, 12, (long long )(open == 9));
# 590 "xmltok_impl.c"
      if (open == 9) {
        __CrestBranch(84706, 54556, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(84707, 54557, 0);

      }
      }
      {
      __CrestLoad(84710, (unsigned long )(& open), (long long )open);
      __CrestLoad(84709, (unsigned long )0, (long long )10);
      __CrestApply2(84708, 12, (long long )(open == 10));
# 590 "xmltok_impl.c"
      if (open == 10) {
        __CrestBranch(84711, 54559, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(84712, 54560, 0);

      }
      }
      {
      __CrestLoad(84715, (unsigned long )(& open), (long long )open);
      __CrestLoad(84714, (unsigned long )0, (long long )21);
      __CrestApply2(84713, 12, (long long )(open == 21));
# 590 "xmltok_impl.c"
      if (open == 21) {
        __CrestBranch(84716, 54562, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(84717, 54563, 0);

      }
      }
# 592 "xmltok_impl.c"
      goto switch_default___1;
      case_9___1:
      case_10___1:
      case_21___1:
# 591 "xmltok_impl.c"
      goto switch_break___2;
      switch_default___1:
# 593 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84718, (unsigned long )0, (long long )0);
      __CrestStore(84719, (unsigned long )(& __retres61));
# 594 "xmltok_impl.c"
      __retres61 = 0;
# 594 "xmltok_impl.c"
      goto return_label;
      switch_break___2: ;
      }
    }
    while_break___1: ;
    }
# 597 "xmltok_impl.c"
    ptr += 2;
    {
# 599 "xmltok_impl.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(84722, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84721, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84720, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 601 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(84723, 54576, 1);
        __CrestLoad(84725, (unsigned long )0, (long long )-1);
        __CrestStore(84726, (unsigned long )(& __retres61));
# 602 "xmltok_impl.c"
        __retres61 = -1;
# 602 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84724, 54578, 0);

      }
      }
      {
# 603 "xmltok_impl.c"
      mem_44 = ptr + 1;
      {
      __CrestLoad(84729, (unsigned long )mem_44, (long long )*mem_44);
      __CrestLoad(84728, (unsigned long )0, (long long )0);
      __CrestApply2(84727, 12, (long long )((int const )*mem_44 == 0));
# 603 "xmltok_impl.c"
      if ((int const )*mem_44 == 0) {
        __CrestBranch(84730, 54582, 1);
# 603 "xmltok_impl.c"
        mem_45 = (struct normal_encoding *)enc;
        __CrestLoad(84732, (unsigned long )(& mem_45->type[(unsigned char )*ptr]),
                    (long long )mem_45->type[(unsigned char )*ptr]);
        __CrestStore(84733, (unsigned long )(& t___0));
# 603 "xmltok_impl.c"
        t___0 = (int )mem_45->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84731, 54583, 0);
# 603 "xmltok_impl.c"
        mem_46 = ptr + 1;
# 603 "xmltok_impl.c"
        mem_47 = ptr + 0;
        __CrestLoad(84734, (unsigned long )mem_46, (long long )*mem_46);
        __CrestLoad(84735, (unsigned long )mem_47, (long long )*mem_47);
# 603 "xmltok_impl.c"
        tmp___5 = unicode_byte_type((char )*mem_46, (char )*mem_47);
        __CrestHandleReturn(84737, (long long )tmp___5);
        __CrestStore(84736, (unsigned long )(& tmp___5));
        __CrestLoad(84738, (unsigned long )(& tmp___5), (long long )tmp___5);
        __CrestStore(84739, (unsigned long )(& t___0));
# 603 "xmltok_impl.c"
        t___0 = tmp___5;
      }
      }
      }
      {
      __CrestLoad(84742, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84741, (unsigned long )(& open), (long long )open);
      __CrestApply2(84740, 12, (long long )(t___0 == open));
# 604 "xmltok_impl.c"
      if (t___0 == open) {
        __CrestBranch(84743, 54585, 1);
# 605 "xmltok_impl.c"
        goto while_break___2;
      } else {
        __CrestBranch(84744, 54586, 0);

      }
      }
      {
      {
      __CrestLoad(84747, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84746, (unsigned long )0, (long long )5);
      __CrestApply2(84745, 12, (long long )(t___0 == 5));
# 607 "xmltok_impl.c"
      if (t___0 == 5) {
        __CrestBranch(84748, 54589, 1);
# 607 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(84749, 54590, 0);

      }
      }
      {
      __CrestLoad(84752, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84751, (unsigned long )0, (long long )6);
      __CrestApply2(84750, 12, (long long )(t___0 == 6));
# 607 "xmltok_impl.c"
      if (t___0 == 6) {
        __CrestBranch(84753, 54592, 1);
# 607 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(84754, 54593, 0);

      }
      }
      {
      __CrestLoad(84757, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84756, (unsigned long )0, (long long )7);
      __CrestApply2(84755, 12, (long long )(t___0 == 7));
# 607 "xmltok_impl.c"
      if (t___0 == 7) {
        __CrestBranch(84758, 54595, 1);
# 607 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(84759, 54596, 0);

      }
      }
      {
      __CrestLoad(84762, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84761, (unsigned long )0, (long long )8);
      __CrestApply2(84760, 12, (long long )(t___0 == 8));
# 607 "xmltok_impl.c"
      if (t___0 == 8) {
        __CrestBranch(84763, 54598, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(84764, 54599, 0);

      }
      }
      {
      __CrestLoad(84767, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84766, (unsigned long )0, (long long )1);
      __CrestApply2(84765, 12, (long long )(t___0 == 1));
# 607 "xmltok_impl.c"
      if (t___0 == 1) {
        __CrestBranch(84768, 54601, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(84769, 54602, 0);

      }
      }
      {
      __CrestLoad(84772, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84771, (unsigned long )0, (long long )0);
      __CrestApply2(84770, 12, (long long )(t___0 == 0));
# 607 "xmltok_impl.c"
      if (t___0 == 0) {
        __CrestBranch(84773, 54604, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(84774, 54605, 0);

      }
      }
      {
      __CrestLoad(84777, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84776, (unsigned long )0, (long long )3);
      __CrestApply2(84775, 12, (long long )(t___0 == 3));
# 608 "xmltok_impl.c"
      if (t___0 == 3) {
        __CrestBranch(84778, 54607, 1);
# 608 "xmltok_impl.c"
        goto case_3;
      } else {
        __CrestBranch(84779, 54608, 0);

      }
      }
      {
      __CrestLoad(84782, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(84781, (unsigned long )0, (long long )2);
      __CrestApply2(84780, 12, (long long )(t___0 == 2));
# 618 "xmltok_impl.c"
      if (t___0 == 2) {
        __CrestBranch(84783, 54610, 1);
# 618 "xmltok_impl.c"
        goto case_2;
      } else {
        __CrestBranch(84784, 54611, 0);

      }
      }
# 621 "xmltok_impl.c"
      goto switch_default___2;
      case_5___1:
      {
      __CrestLoad(84789, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84788, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84787, 18, (long long )(end - ptr));
      __CrestLoad(84786, (unsigned long )0, (long long )2L);
      __CrestApply2(84785, 16, (long long )(end - ptr < 2L));
# 607 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(84790, 54614, 1);
        __CrestLoad(84792, (unsigned long )0, (long long )-2);
        __CrestStore(84793, (unsigned long )(& __retres61));
# 607 "xmltok_impl.c"
        __retres61 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84791, 54616, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 2;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_6___1:
      {
      __CrestLoad(84798, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84797, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84796, 18, (long long )(end - ptr));
      __CrestLoad(84795, (unsigned long )0, (long long )3L);
      __CrestApply2(84794, 16, (long long )(end - ptr < 3L));
# 607 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(84799, 54620, 1);
        __CrestLoad(84801, (unsigned long )0, (long long )-2);
        __CrestStore(84802, (unsigned long )(& __retres61));
# 607 "xmltok_impl.c"
        __retres61 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84800, 54622, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 3;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_7___1:
      {
      __CrestLoad(84807, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84806, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84805, 18, (long long )(end - ptr));
      __CrestLoad(84804, (unsigned long )0, (long long )4L);
      __CrestApply2(84803, 16, (long long )(end - ptr < 4L));
# 607 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(84808, 54626, 1);
        __CrestLoad(84810, (unsigned long )0, (long long )-2);
        __CrestStore(84811, (unsigned long )(& __retres61));
# 607 "xmltok_impl.c"
        __retres61 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84809, 54628, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 4;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_8:
      case_1:
      case_0:
# 607 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84812, (unsigned long )0, (long long )0);
      __CrestStore(84813, (unsigned long )(& __retres61));
# 607 "xmltok_impl.c"
      __retres61 = 0;
# 607 "xmltok_impl.c"
      goto return_label;
      case_3:
# 610 "xmltok_impl.c"
      tmp___6 = little2_scanRef(enc, ptr + 2, end, & ptr);
      __CrestHandleReturn(84815, (long long )tmp___6);
      __CrestStore(84814, (unsigned long )(& tmp___6));
      __CrestLoad(84816, (unsigned long )(& tmp___6), (long long )tmp___6);
      __CrestStore(84817, (unsigned long )(& tok));
# 610 "xmltok_impl.c"
      tok = tmp___6;
      {
      __CrestLoad(84820, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(84819, (unsigned long )0, (long long )0);
      __CrestApply2(84818, 15, (long long )(tok <= 0));
# 611 "xmltok_impl.c"
      if (tok <= 0) {
        __CrestBranch(84821, 54636, 1);
        {
        __CrestLoad(84825, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(84824, (unsigned long )0, (long long )0);
        __CrestApply2(84823, 12, (long long )(tok == 0));
# 612 "xmltok_impl.c"
        if (tok == 0) {
          __CrestBranch(84826, 54637, 1);
# 613 "xmltok_impl.c"
          *nextTokPtr = ptr;
        } else {
          __CrestBranch(84827, 54638, 0);

        }
        }
        __CrestLoad(84828, (unsigned long )(& tok), (long long )tok);
        __CrestStore(84829, (unsigned long )(& __retres61));
# 614 "xmltok_impl.c"
        __retres61 = tok;
# 614 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84822, 54641, 0);

      }
      }
# 616 "xmltok_impl.c"
      goto switch_break___3;
      case_2:
# 619 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84830, (unsigned long )0, (long long )0);
      __CrestStore(84831, (unsigned long )(& __retres61));
# 620 "xmltok_impl.c"
      __retres61 = 0;
# 620 "xmltok_impl.c"
      goto return_label;
      switch_default___2:
# 622 "xmltok_impl.c"
      ptr += 2;
# 623 "xmltok_impl.c"
      goto switch_break___3;
      switch_break___3: ;
      }
    }
    while_break___2: ;
    }
# 626 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(84834, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(84833, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(84832, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 627 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(84835, 54652, 1);
      __CrestLoad(84837, (unsigned long )0, (long long )-1);
      __CrestStore(84838, (unsigned long )(& __retres61));
# 628 "xmltok_impl.c"
      __retres61 = -1;
# 628 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(84836, 54654, 0);

    }
    }
    {
# 629 "xmltok_impl.c"
    mem_48 = ptr + 1;
    {
    __CrestLoad(84841, (unsigned long )mem_48, (long long )*mem_48);
    __CrestLoad(84840, (unsigned long )0, (long long )0);
    __CrestApply2(84839, 12, (long long )((int const )*mem_48 == 0));
# 629 "xmltok_impl.c"
    if ((int const )*mem_48 == 0) {
      __CrestBranch(84842, 54658, 1);
# 629 "xmltok_impl.c"
      mem_49 = (struct normal_encoding *)enc;
      __CrestLoad(84844, (unsigned long )(& mem_49->type[(unsigned char )*ptr]), (long long )mem_49->type[(unsigned char )*ptr]);
      __CrestStore(84845, (unsigned long )(& tmp___8));
# 629 "xmltok_impl.c"
      tmp___8 = (int )mem_49->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(84843, 54659, 0);
# 629 "xmltok_impl.c"
      mem_50 = ptr + 1;
# 629 "xmltok_impl.c"
      mem_51 = ptr + 0;
      __CrestLoad(84846, (unsigned long )mem_50, (long long )*mem_50);
      __CrestLoad(84847, (unsigned long )mem_51, (long long )*mem_51);
# 629 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_50, (char )*mem_51);
      __CrestHandleReturn(84849, (long long )tmp___7);
      __CrestStore(84848, (unsigned long )(& tmp___7));
      __CrestLoad(84850, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(84851, (unsigned long )(& tmp___8));
# 629 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(84854, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(84853, (unsigned long )0, (long long )10);
    __CrestApply2(84852, 12, (long long )(tmp___8 == 10));
# 632 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(84855, 54662, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(84856, 54663, 0);

    }
    }
    {
    __CrestLoad(84859, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(84858, (unsigned long )0, (long long )9);
    __CrestApply2(84857, 12, (long long )(tmp___8 == 9));
# 632 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(84860, 54665, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(84861, 54666, 0);

    }
    }
    {
    __CrestLoad(84864, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(84863, (unsigned long )0, (long long )21);
    __CrestApply2(84862, 12, (long long )(tmp___8 == 21));
# 632 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(84865, 54668, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(84866, 54669, 0);

    }
    }
    {
    __CrestLoad(84869, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(84868, (unsigned long )0, (long long )17);
    __CrestApply2(84867, 12, (long long )(tmp___8 == 17));
# 634 "xmltok_impl.c"
    if (tmp___8 == 17) {
      __CrestBranch(84870, 54671, 1);
# 634 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(84871, 54672, 0);

    }
    }
    {
    __CrestLoad(84874, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(84873, (unsigned long )0, (long long )11);
    __CrestApply2(84872, 12, (long long )(tmp___8 == 11));
# 636 "xmltok_impl.c"
    if (tmp___8 == 11) {
      __CrestBranch(84875, 54674, 1);
# 636 "xmltok_impl.c"
      goto case_11;
    } else {
      __CrestBranch(84876, 54675, 0);

    }
    }
# 638 "xmltok_impl.c"
    goto switch_default___3;
    case_10___2:
    case_9___2:
    case_21___2:
# 633 "xmltok_impl.c"
    goto switch_break___4;
    case_17:
# 635 "xmltok_impl.c"
    goto sol;
    case_11:
# 637 "xmltok_impl.c"
    goto gt;
    switch_default___3:
# 639 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(84877, (unsigned long )0, (long long )0);
    __CrestStore(84878, (unsigned long )(& __retres61));
# 640 "xmltok_impl.c"
    __retres61 = 0;
# 640 "xmltok_impl.c"
    goto return_label;
    switch_break___4: ;
    }
    {
# 643 "xmltok_impl.c"
    while (1) {
      while_continue___3: ;
# 644 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(84881, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(84880, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(84879, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 645 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(84882, 54689, 1);
        __CrestLoad(84884, (unsigned long )0, (long long )-1);
        __CrestStore(84885, (unsigned long )(& __retres61));
# 646 "xmltok_impl.c"
        __retres61 = -1;
# 646 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84883, 54691, 0);

      }
      }
      {
# 647 "xmltok_impl.c"
      mem_52 = ptr + 1;
      {
      __CrestLoad(84888, (unsigned long )mem_52, (long long )*mem_52);
      __CrestLoad(84887, (unsigned long )0, (long long )0);
      __CrestApply2(84886, 12, (long long )((int const )*mem_52 == 0));
# 647 "xmltok_impl.c"
      if ((int const )*mem_52 == 0) {
        __CrestBranch(84889, 54695, 1);
# 647 "xmltok_impl.c"
        mem_53 = (struct normal_encoding *)enc;
        __CrestLoad(84891, (unsigned long )(& mem_53->type[(unsigned char )*ptr]),
                    (long long )mem_53->type[(unsigned char )*ptr]);
        __CrestStore(84892, (unsigned long )(& tmp___10));
# 647 "xmltok_impl.c"
        tmp___10 = (int )mem_53->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(84890, 54696, 0);
# 647 "xmltok_impl.c"
        mem_54 = ptr + 1;
# 647 "xmltok_impl.c"
        mem_55 = ptr + 0;
        __CrestLoad(84893, (unsigned long )mem_54, (long long )*mem_54);
        __CrestLoad(84894, (unsigned long )mem_55, (long long )*mem_55);
# 647 "xmltok_impl.c"
        tmp___9 = unicode_byte_type((char )*mem_54, (char )*mem_55);
        __CrestHandleReturn(84896, (long long )tmp___9);
        __CrestStore(84895, (unsigned long )(& tmp___9));
        __CrestLoad(84897, (unsigned long )(& tmp___9), (long long )tmp___9);
        __CrestStore(84898, (unsigned long )(& tmp___10));
# 647 "xmltok_impl.c"
        tmp___10 = tmp___9;
      }
      }
      }
      {
      {
      __CrestLoad(84901, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84900, (unsigned long )0, (long long )29);
      __CrestApply2(84899, 12, (long long )(tmp___10 == 29));
# 648 "xmltok_impl.c"
      if (tmp___10 == 29) {
        __CrestBranch(84902, 54699, 1);
# 648 "xmltok_impl.c"
        goto case_29___1;
      } else {
        __CrestBranch(84903, 54700, 0);

      }
      }
      {
      __CrestLoad(84906, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84905, (unsigned long )0, (long long )24);
      __CrestApply2(84904, 12, (long long )(tmp___10 == 24));
# 648 "xmltok_impl.c"
      if (tmp___10 == 24) {
        __CrestBranch(84907, 54702, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(84908, 54703, 0);

      }
      }
      {
      __CrestLoad(84911, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84910, (unsigned long )0, (long long )22);
      __CrestApply2(84909, 12, (long long )(tmp___10 == 22));
# 648 "xmltok_impl.c"
      if (tmp___10 == 22) {
        __CrestBranch(84912, 54705, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(84913, 54706, 0);

      }
      }
      {
      __CrestLoad(84916, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84915, (unsigned long )0, (long long )5);
      __CrestApply2(84914, 12, (long long )(tmp___10 == 5));
# 648 "xmltok_impl.c"
      if (tmp___10 == 5) {
        __CrestBranch(84917, 54708, 1);
# 648 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(84918, 54709, 0);

      }
      }
      {
      __CrestLoad(84921, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84920, (unsigned long )0, (long long )6);
      __CrestApply2(84919, 12, (long long )(tmp___10 == 6));
# 648 "xmltok_impl.c"
      if (tmp___10 == 6) {
        __CrestBranch(84922, 54711, 1);
# 648 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(84923, 54712, 0);

      }
      }
      {
      __CrestLoad(84926, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84925, (unsigned long )0, (long long )7);
      __CrestApply2(84924, 12, (long long )(tmp___10 == 7));
# 648 "xmltok_impl.c"
      if (tmp___10 == 7) {
        __CrestBranch(84927, 54714, 1);
# 648 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(84928, 54715, 0);

      }
      }
      {
      __CrestLoad(84931, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84930, (unsigned long )0, (long long )10);
      __CrestApply2(84929, 12, (long long )(tmp___10 == 10));
# 649 "xmltok_impl.c"
      if (tmp___10 == 10) {
        __CrestBranch(84932, 54717, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(84933, 54718, 0);

      }
      }
      {
      __CrestLoad(84936, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84935, (unsigned long )0, (long long )9);
      __CrestApply2(84934, 12, (long long )(tmp___10 == 9));
# 649 "xmltok_impl.c"
      if (tmp___10 == 9) {
        __CrestBranch(84937, 54720, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(84938, 54721, 0);

      }
      }
      {
      __CrestLoad(84941, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84940, (unsigned long )0, (long long )21);
      __CrestApply2(84939, 12, (long long )(tmp___10 == 21));
# 649 "xmltok_impl.c"
      if (tmp___10 == 21) {
        __CrestBranch(84942, 54723, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(84943, 54724, 0);

      }
      }
      {
      __CrestLoad(84946, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84945, (unsigned long )0, (long long )11);
      __CrestApply2(84944, 12, (long long )(tmp___10 == 11));
# 651 "xmltok_impl.c"
      if (tmp___10 == 11) {
        __CrestBranch(84947, 54726, 1);
# 651 "xmltok_impl.c"
        goto gt;
      } else {
        __CrestBranch(84948, 54727, 0);

      }
      }
      {
      __CrestLoad(84951, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(84950, (unsigned long )0, (long long )17);
      __CrestApply2(84949, 12, (long long )(tmp___10 == 17));
# 655 "xmltok_impl.c"
      if (tmp___10 == 17) {
        __CrestBranch(84952, 54729, 1);
# 655 "xmltok_impl.c"
        goto sol;
      } else {
        __CrestBranch(84953, 54730, 0);

      }
      }
# 666 "xmltok_impl.c"
      goto switch_default___4;
      case_29___1:
      {
# 648 "xmltok_impl.c"
      mem_56 = ptr + 1;
# 648 "xmltok_impl.c"
      mem_57 = ptr + 0;
# 648 "xmltok_impl.c"
      mem_58 = ptr + 0;
      {
      __CrestLoad(84962, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_56] << 3) + (int const )((int )((unsigned char )*mem_57) >> 5)]),
                  (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_56] << 3) + (int const )((int )((unsigned char )*mem_57) >> 5)]);
      __CrestLoad(84961, (unsigned long )0, (long long )1);
      __CrestLoad(84960, (unsigned long )mem_58, (long long )*mem_58);
      __CrestLoad(84959, (unsigned long )0, (long long )31);
      __CrestApply2(84958, 5, (long long )((int )((unsigned char )*mem_58) & 31));
      __CrestApply2(84957, 8, (long long )(1 << ((int )((unsigned char )*mem_58) & 31)));
      __CrestApply2(84956, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_56] << 3) + (int const )((int )((unsigned char )*mem_57) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_58) & 31))));
      __CrestLoad(84955, (unsigned long )0, (long long )0);
      __CrestApply2(84954, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_56] << 3) + (int const )((int )((unsigned char )*mem_57) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_58) & 31))) == 0));
# 648 "xmltok_impl.c"
      if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_56] << 3) + (int const )((int )((unsigned char )*mem_57) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_58) & 31))) == 0) {
        __CrestBranch(84963, 54735, 1);
# 648 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(84965, (unsigned long )0, (long long )0);
        __CrestStore(84966, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
        __retres61 = 0;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84964, 54738, 0);

      }
      }
      }
      case_24___1:
      case_22___1:
# 648 "xmltok_impl.c"
      ptr += 2;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_5___2:
      {
      __CrestLoad(84971, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84970, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84969, 18, (long long )(end - ptr));
      __CrestLoad(84968, (unsigned long )0, (long long )2L);
      __CrestApply2(84967, 16, (long long )(end - ptr < 2L));
# 648 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(84972, 54742, 1);
        __CrestLoad(84974, (unsigned long )0, (long long )-2);
        __CrestStore(84975, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
        __retres61 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84973, 54744, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84976, (unsigned long )0, (long long )0);
      __CrestStore(84977, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
      __retres61 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 2;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_6___2:
      {
      __CrestLoad(84982, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84981, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84980, 18, (long long )(end - ptr));
      __CrestLoad(84979, (unsigned long )0, (long long )3L);
      __CrestApply2(84978, 16, (long long )(end - ptr < 3L));
# 648 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(84983, 54751, 1);
        __CrestLoad(84985, (unsigned long )0, (long long )-2);
        __CrestStore(84986, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
        __retres61 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84984, 54753, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84987, (unsigned long )0, (long long )0);
      __CrestStore(84988, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
      __retres61 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 3;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_7___2:
      {
      __CrestLoad(84993, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(84992, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(84991, 18, (long long )(end - ptr));
      __CrestLoad(84990, (unsigned long )0, (long long )4L);
      __CrestApply2(84989, 16, (long long )(end - ptr < 4L));
# 648 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(84994, 54760, 1);
        __CrestLoad(84996, (unsigned long )0, (long long )-2);
        __CrestStore(84997, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
        __retres61 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(84995, 54762, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(84998, (unsigned long )0, (long long )0);
      __CrestStore(84999, (unsigned long )(& __retres61));
# 648 "xmltok_impl.c"
      __retres61 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 4;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_10___3:
      case_9___3:
      case_21___3:
# 650 "xmltok_impl.c"
      goto __Cont;
      gt:
      case_11___0:
# 653 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(85000, (unsigned long )0, (long long )1);
      __CrestStore(85001, (unsigned long )(& __retres61));
# 654 "xmltok_impl.c"
      __retres61 = 1;
# 654 "xmltok_impl.c"
      goto return_label;
      sol:
      case_17___0:
# 657 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(85004, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(85003, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(85002, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 658 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(85005, 54774, 1);
        __CrestLoad(85007, (unsigned long )0, (long long )-1);
        __CrestStore(85008, (unsigned long )(& __retres61));
# 659 "xmltok_impl.c"
        __retres61 = -1;
# 659 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85006, 54776, 0);

      }
      }
      {
# 660 "xmltok_impl.c"
      mem_59 = ptr + 1;
      {
      __CrestLoad(85011, (unsigned long )mem_59, (long long )*mem_59);
      __CrestLoad(85010, (unsigned long )0, (long long )0);
      __CrestApply2(85009, 12, (long long )((int const )*mem_59 == 0));
# 660 "xmltok_impl.c"
      if ((int const )*mem_59 == 0) {
        __CrestBranch(85012, 54780, 1);
        {
# 660 "xmltok_impl.c"
        mem_60 = ptr + 0;
        {
        __CrestLoad(85016, (unsigned long )mem_60, (long long )*mem_60);
        __CrestLoad(85015, (unsigned long )0, (long long )62);
        __CrestApply2(85014, 12, (long long )((int const )*mem_60 == 62));
# 660 "xmltok_impl.c"
        if ((int const )*mem_60 == 62) {
          __CrestBranch(85017, 54783, 1);

        } else {
          __CrestBranch(85018, 54784, 0);
# 661 "xmltok_impl.c"
          *nextTokPtr = ptr;
          __CrestLoad(85019, (unsigned long )0, (long long )0);
          __CrestStore(85020, (unsigned long )(& __retres61));
# 662 "xmltok_impl.c"
          __retres61 = 0;
# 662 "xmltok_impl.c"
          goto return_label;
        }
        }
        }
      } else {
        __CrestBranch(85013, 54787, 0);
# 661 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(85021, (unsigned long )0, (long long )0);
        __CrestStore(85022, (unsigned long )(& __retres61));
# 662 "xmltok_impl.c"
        __retres61 = 0;
# 662 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
# 664 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(85023, (unsigned long )0, (long long )3);
      __CrestStore(85024, (unsigned long )(& __retres61));
# 665 "xmltok_impl.c"
      __retres61 = 3;
# 665 "xmltok_impl.c"
      goto return_label;
      switch_default___4:
# 667 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85025, (unsigned long )0, (long long )0);
      __CrestStore(85026, (unsigned long )(& __retres61));
# 668 "xmltok_impl.c"
      __retres61 = 0;
# 668 "xmltok_impl.c"
      goto return_label;
      switch_break___5: ;
      }
# 670 "xmltok_impl.c"
      goto while_break___3;
      __Cont: ;
    }
    while_break___3: ;
    }
# 672 "xmltok_impl.c"
    goto switch_break;
    switch_default___5:
# 675 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85027, (unsigned long )0, (long long )0);
    __CrestStore(85028, (unsigned long )(& __retres61));
# 676 "xmltok_impl.c"
    __retres61 = 0;
# 676 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(85029, (unsigned long )0, (long long )-1);
  __CrestStore(85030, (unsigned long )(& __retres61));
# 679 "xmltok_impl.c"
  __retres61 = -1;
  return_label:
  {
  __CrestLoad(85031, (unsigned long )(& __retres61), (long long )__retres61);
  __CrestReturn(85032);
# 525 "xmltok_impl.c"
  return (__retres61);
  }
}
}
# 684 "xmltok_impl.c"
static int little2_scanLt(ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  char const *mem_21 ;
  struct normal_encoding *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  struct normal_encoding *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  struct normal_encoding *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  struct normal_encoding *mem_40 ;
  char const *mem_41 ;
  char const *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  char const *mem_45 ;
  char const *mem_46 ;
  struct normal_encoding *mem_47 ;
  char const *mem_48 ;
  char const *mem_49 ;
  char const *mem_50 ;
  char const *mem_51 ;
  char const *mem_52 ;
  char const *mem_53 ;
  char const *mem_54 ;
  int __retres55 ;

  {
  __CrestCall(85033, 883);

  {
  __CrestLoad(85036, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85035, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85034, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 691 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85037, 54809, 1);
    __CrestLoad(85039, (unsigned long )0, (long long )-1);
    __CrestStore(85040, (unsigned long )(& __retres55));
# 692 "xmltok_impl.c"
    __retres55 = -1;
# 692 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85038, 54811, 0);

  }
  }
  {
# 693 "xmltok_impl.c"
  mem_21 = ptr + 1;
  {
  __CrestLoad(85043, (unsigned long )mem_21, (long long )*mem_21);
  __CrestLoad(85042, (unsigned long )0, (long long )0);
  __CrestApply2(85041, 12, (long long )((int const )*mem_21 == 0));
# 693 "xmltok_impl.c"
  if ((int const )*mem_21 == 0) {
    __CrestBranch(85044, 54815, 1);
# 693 "xmltok_impl.c"
    mem_22 = (struct normal_encoding *)enc;
    __CrestLoad(85046, (unsigned long )(& mem_22->type[(unsigned char )*ptr]), (long long )mem_22->type[(unsigned char )*ptr]);
    __CrestStore(85047, (unsigned long )(& tmp___0));
# 693 "xmltok_impl.c"
    tmp___0 = (int )mem_22->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(85045, 54816, 0);
# 693 "xmltok_impl.c"
    mem_23 = ptr + 1;
# 693 "xmltok_impl.c"
    mem_24 = ptr + 0;
    __CrestLoad(85048, (unsigned long )mem_23, (long long )*mem_23);
    __CrestLoad(85049, (unsigned long )mem_24, (long long )*mem_24);
# 693 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_23, (char )*mem_24);
    __CrestHandleReturn(85051, (long long )tmp);
    __CrestStore(85050, (unsigned long )(& tmp));
    __CrestLoad(85052, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(85053, (unsigned long )(& tmp___0));
# 693 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(85056, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85055, (unsigned long )0, (long long )29);
  __CrestApply2(85054, 12, (long long )(tmp___0 == 29));
# 694 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(85057, 54819, 1);
# 694 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(85058, 54820, 0);

  }
  }
  {
  __CrestLoad(85061, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85060, (unsigned long )0, (long long )24);
  __CrestApply2(85059, 12, (long long )(tmp___0 == 24));
# 694 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(85062, 54822, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(85063, 54823, 0);

  }
  }
  {
  __CrestLoad(85066, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85065, (unsigned long )0, (long long )22);
  __CrestApply2(85064, 12, (long long )(tmp___0 == 22));
# 694 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(85067, 54825, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(85068, 54826, 0);

  }
  }
  {
  __CrestLoad(85071, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85070, (unsigned long )0, (long long )5);
  __CrestApply2(85069, 12, (long long )(tmp___0 == 5));
# 694 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(85072, 54828, 1);
# 694 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(85073, 54829, 0);

  }
  }
  {
  __CrestLoad(85076, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85075, (unsigned long )0, (long long )6);
  __CrestApply2(85074, 12, (long long )(tmp___0 == 6));
# 694 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(85077, 54831, 1);
# 694 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(85078, 54832, 0);

  }
  }
  {
  __CrestLoad(85081, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85080, (unsigned long )0, (long long )7);
  __CrestApply2(85079, 12, (long long )(tmp___0 == 7));
# 694 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(85082, 54834, 1);
# 694 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(85083, 54835, 0);

  }
  }
  {
  __CrestLoad(85086, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85085, (unsigned long )0, (long long )16);
  __CrestApply2(85084, 12, (long long )(tmp___0 == 16));
# 695 "xmltok_impl.c"
  if (tmp___0 == 16) {
    __CrestBranch(85087, 54837, 1);
# 695 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(85088, 54838, 0);

  }
  }
  {
  __CrestLoad(85091, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85090, (unsigned long )0, (long long )15);
  __CrestApply2(85089, 12, (long long )(tmp___0 == 15));
# 707 "xmltok_impl.c"
  if (tmp___0 == 15) {
    __CrestBranch(85092, 54840, 1);
# 707 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(85093, 54841, 0);

  }
  }
  {
  __CrestLoad(85096, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85095, (unsigned long )0, (long long )17);
  __CrestApply2(85094, 12, (long long )(tmp___0 == 17));
# 709 "xmltok_impl.c"
  if (tmp___0 == 17) {
    __CrestBranch(85097, 54843, 1);
# 709 "xmltok_impl.c"
    goto case_17;
  } else {
    __CrestBranch(85098, 54844, 0);

  }
  }
# 711 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 694 "xmltok_impl.c"
  mem_25 = ptr + 1;
# 694 "xmltok_impl.c"
  mem_26 = ptr + 0;
# 694 "xmltok_impl.c"
  mem_27 = ptr + 0;
  {
  __CrestLoad(85107, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_25] << 3) + (int const )((int )((unsigned char )*mem_26) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_25] << 3) + (int const )((int )((unsigned char )*mem_26) >> 5)]);
  __CrestLoad(85106, (unsigned long )0, (long long )1);
  __CrestLoad(85105, (unsigned long )mem_27, (long long )*mem_27);
  __CrestLoad(85104, (unsigned long )0, (long long )31);
  __CrestApply2(85103, 5, (long long )((int )((unsigned char )*mem_27) & 31));
  __CrestApply2(85102, 8, (long long )(1 << ((int )((unsigned char )*mem_27) & 31)));
  __CrestApply2(85101, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_25] << 3) + (int const )((int )((unsigned char )*mem_26) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_27) & 31))));
  __CrestLoad(85100, (unsigned long )0, (long long )0);
  __CrestApply2(85099, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_25] << 3) + (int const )((int )((unsigned char )*mem_26) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_27) & 31))) == 0));
# 694 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_25] << 3) + (int const )((int )((unsigned char )*mem_26) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_27) & 31))) == 0) {
    __CrestBranch(85108, 54849, 1);
# 694 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85110, (unsigned long )0, (long long )0);
    __CrestStore(85111, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
    __retres55 = 0;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85109, 54852, 0);

  }
  }
  }
  case_24:
  case_22:
# 694 "xmltok_impl.c"
  ptr += 2;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(85116, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85115, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85114, 18, (long long )(end - ptr));
  __CrestLoad(85113, (unsigned long )0, (long long )2L);
  __CrestApply2(85112, 16, (long long )(end - ptr < 2L));
# 694 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(85117, 54856, 1);
    __CrestLoad(85119, (unsigned long )0, (long long )-2);
    __CrestStore(85120, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
    __retres55 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85118, 54858, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85121, (unsigned long )0, (long long )0);
  __CrestStore(85122, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
  __retres55 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 2;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(85127, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85126, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85125, 18, (long long )(end - ptr));
  __CrestLoad(85124, (unsigned long )0, (long long )3L);
  __CrestApply2(85123, 16, (long long )(end - ptr < 3L));
# 694 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(85128, 54865, 1);
    __CrestLoad(85130, (unsigned long )0, (long long )-2);
    __CrestStore(85131, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
    __retres55 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85129, 54867, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85132, (unsigned long )0, (long long )0);
  __CrestStore(85133, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
  __retres55 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 3;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(85138, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85137, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85136, 18, (long long )(end - ptr));
  __CrestLoad(85135, (unsigned long )0, (long long )4L);
  __CrestApply2(85134, 16, (long long )(end - ptr < 4L));
# 694 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(85139, 54874, 1);
    __CrestLoad(85141, (unsigned long )0, (long long )-2);
    __CrestStore(85142, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
    __retres55 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85140, 54876, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85143, (unsigned long )0, (long long )0);
  __CrestStore(85144, (unsigned long )(& __retres55));
# 694 "xmltok_impl.c"
  __retres55 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 4;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_16:
# 696 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(85147, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85146, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85145, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 696 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85148, 54884, 1);
    __CrestLoad(85150, (unsigned long )0, (long long )-1);
    __CrestStore(85151, (unsigned long )(& __retres55));
# 697 "xmltok_impl.c"
    __retres55 = -1;
# 697 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85149, 54886, 0);

  }
  }
  {
# 698 "xmltok_impl.c"
  mem_28 = ptr + 1;
  {
  __CrestLoad(85154, (unsigned long )mem_28, (long long )*mem_28);
  __CrestLoad(85153, (unsigned long )0, (long long )0);
  __CrestApply2(85152, 12, (long long )((int const )*mem_28 == 0));
# 698 "xmltok_impl.c"
  if ((int const )*mem_28 == 0) {
    __CrestBranch(85155, 54890, 1);
# 698 "xmltok_impl.c"
    mem_29 = (struct normal_encoding *)enc;
    __CrestLoad(85157, (unsigned long )(& mem_29->type[(unsigned char )*ptr]), (long long )mem_29->type[(unsigned char )*ptr]);
    __CrestStore(85158, (unsigned long )(& tmp___2));
# 698 "xmltok_impl.c"
    tmp___2 = (int )mem_29->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(85156, 54891, 0);
# 698 "xmltok_impl.c"
    mem_30 = ptr + 1;
# 698 "xmltok_impl.c"
    mem_31 = ptr + 0;
    __CrestLoad(85159, (unsigned long )mem_30, (long long )*mem_30);
    __CrestLoad(85160, (unsigned long )mem_31, (long long )*mem_31);
# 698 "xmltok_impl.c"
    tmp___1 = unicode_byte_type((char )*mem_30, (char )*mem_31);
    __CrestHandleReturn(85162, (long long )tmp___1);
    __CrestStore(85161, (unsigned long )(& tmp___1));
    __CrestLoad(85163, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(85164, (unsigned long )(& tmp___2));
# 698 "xmltok_impl.c"
    tmp___2 = tmp___1;
  }
  }
  }
  {
  {
  __CrestLoad(85167, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(85166, (unsigned long )0, (long long )27);
  __CrestApply2(85165, 12, (long long )(tmp___2 == 27));
# 699 "xmltok_impl.c"
  if (tmp___2 == 27) {
    __CrestBranch(85168, 54894, 1);
# 699 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(85169, 54895, 0);

  }
  }
  {
  __CrestLoad(85172, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(85171, (unsigned long )0, (long long )20);
  __CrestApply2(85170, 12, (long long )(tmp___2 == 20));
# 701 "xmltok_impl.c"
  if (tmp___2 == 20) {
    __CrestBranch(85173, 54897, 1);
# 701 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(85174, 54898, 0);

  }
  }
# 698 "xmltok_impl.c"
  goto switch_break___0;
  case_27:
# 700 "xmltok_impl.c"
  tmp___3 = little2_scanComment(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85176, (long long )tmp___3);
  __CrestStore(85175, (unsigned long )(& tmp___3));
  __CrestLoad(85177, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(85178, (unsigned long )(& __retres55));
# 700 "xmltok_impl.c"
  __retres55 = tmp___3;
# 700 "xmltok_impl.c"
  goto return_label;
  case_20:
# 702 "xmltok_impl.c"
  tmp___4 = little2_scanCdataSection(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85180, (long long )tmp___4);
  __CrestStore(85179, (unsigned long )(& tmp___4));
  __CrestLoad(85181, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(85182, (unsigned long )(& __retres55));
# 702 "xmltok_impl.c"
  __retres55 = tmp___4;
# 702 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 705 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85183, (unsigned long )0, (long long )0);
  __CrestStore(85184, (unsigned long )(& __retres55));
# 706 "xmltok_impl.c"
  __retres55 = 0;
# 706 "xmltok_impl.c"
  goto return_label;
  case_15:
# 708 "xmltok_impl.c"
  tmp___5 = little2_scanPi(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85186, (long long )tmp___5);
  __CrestStore(85185, (unsigned long )(& tmp___5));
  __CrestLoad(85187, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(85188, (unsigned long )(& __retres55));
# 708 "xmltok_impl.c"
  __retres55 = tmp___5;
# 708 "xmltok_impl.c"
  goto return_label;
  case_17:
# 710 "xmltok_impl.c"
  tmp___6 = little2_scanEndTag(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85190, (long long )tmp___6);
  __CrestStore(85189, (unsigned long )(& tmp___6));
  __CrestLoad(85191, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(85192, (unsigned long )(& __retres55));
# 710 "xmltok_impl.c"
  __retres55 = tmp___6;
# 710 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 712 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85193, (unsigned long )0, (long long )0);
  __CrestStore(85194, (unsigned long )(& __retres55));
# 713 "xmltok_impl.c"
  __retres55 = 0;
# 713 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(85195, (unsigned long )0, (long long )0);
  __CrestStore(85196, (unsigned long )(& hadColon));
# 716 "xmltok_impl.c"
  hadColon = 0;
  {
# 719 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(85199, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(85198, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(85197, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 719 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(85200, 54925, 1);

    } else {
      __CrestBranch(85201, 54926, 0);
# 719 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 720 "xmltok_impl.c"
    mem_32 = ptr + 1;
    {
    __CrestLoad(85204, (unsigned long )mem_32, (long long )*mem_32);
    __CrestLoad(85203, (unsigned long )0, (long long )0);
    __CrestApply2(85202, 12, (long long )((int const )*mem_32 == 0));
# 720 "xmltok_impl.c"
    if ((int const )*mem_32 == 0) {
      __CrestBranch(85205, 54930, 1);
# 720 "xmltok_impl.c"
      mem_33 = (struct normal_encoding *)enc;
      __CrestLoad(85207, (unsigned long )(& mem_33->type[(unsigned char )*ptr]), (long long )mem_33->type[(unsigned char )*ptr]);
      __CrestStore(85208, (unsigned long )(& tmp___8));
# 720 "xmltok_impl.c"
      tmp___8 = (int )mem_33->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(85206, 54931, 0);
# 720 "xmltok_impl.c"
      mem_34 = ptr + 1;
# 720 "xmltok_impl.c"
      mem_35 = ptr + 0;
      __CrestLoad(85209, (unsigned long )mem_34, (long long )*mem_34);
      __CrestLoad(85210, (unsigned long )mem_35, (long long )*mem_35);
# 720 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_34, (char )*mem_35);
      __CrestHandleReturn(85212, (long long )tmp___7);
      __CrestStore(85211, (unsigned long )(& tmp___7));
      __CrestLoad(85213, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(85214, (unsigned long )(& tmp___8));
# 720 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(85217, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85216, (unsigned long )0, (long long )29);
    __CrestApply2(85215, 12, (long long )(tmp___8 == 29));
# 721 "xmltok_impl.c"
    if (tmp___8 == 29) {
      __CrestBranch(85218, 54934, 1);
# 721 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(85219, 54935, 0);

    }
    }
    {
    __CrestLoad(85222, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85221, (unsigned long )0, (long long )27);
    __CrestApply2(85220, 12, (long long )(tmp___8 == 27));
# 721 "xmltok_impl.c"
    if (tmp___8 == 27) {
      __CrestBranch(85223, 54937, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(85224, 54938, 0);

    }
    }
    {
    __CrestLoad(85227, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85226, (unsigned long )0, (long long )26);
    __CrestApply2(85225, 12, (long long )(tmp___8 == 26));
# 721 "xmltok_impl.c"
    if (tmp___8 == 26) {
      __CrestBranch(85228, 54940, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(85229, 54941, 0);

    }
    }
    {
    __CrestLoad(85232, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85231, (unsigned long )0, (long long )25);
    __CrestApply2(85230, 12, (long long )(tmp___8 == 25));
# 721 "xmltok_impl.c"
    if (tmp___8 == 25) {
      __CrestBranch(85233, 54943, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(85234, 54944, 0);

    }
    }
    {
    __CrestLoad(85237, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85236, (unsigned long )0, (long long )24);
    __CrestApply2(85235, 12, (long long )(tmp___8 == 24));
# 721 "xmltok_impl.c"
    if (tmp___8 == 24) {
      __CrestBranch(85238, 54946, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(85239, 54947, 0);

    }
    }
    {
    __CrestLoad(85242, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85241, (unsigned long )0, (long long )22);
    __CrestApply2(85240, 12, (long long )(tmp___8 == 22));
# 721 "xmltok_impl.c"
    if (tmp___8 == 22) {
      __CrestBranch(85243, 54949, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(85244, 54950, 0);

    }
    }
    {
    __CrestLoad(85247, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85246, (unsigned long )0, (long long )5);
    __CrestApply2(85245, 12, (long long )(tmp___8 == 5));
# 721 "xmltok_impl.c"
    if (tmp___8 == 5) {
      __CrestBranch(85248, 54952, 1);
# 721 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(85249, 54953, 0);

    }
    }
    {
    __CrestLoad(85252, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85251, (unsigned long )0, (long long )6);
    __CrestApply2(85250, 12, (long long )(tmp___8 == 6));
# 721 "xmltok_impl.c"
    if (tmp___8 == 6) {
      __CrestBranch(85253, 54955, 1);
# 721 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(85254, 54956, 0);

    }
    }
    {
    __CrestLoad(85257, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85256, (unsigned long )0, (long long )7);
    __CrestApply2(85255, 12, (long long )(tmp___8 == 7));
# 721 "xmltok_impl.c"
    if (tmp___8 == 7) {
      __CrestBranch(85258, 54958, 1);
# 721 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(85259, 54959, 0);

    }
    }
    {
    __CrestLoad(85262, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85261, (unsigned long )0, (long long )23);
    __CrestApply2(85260, 12, (long long )(tmp___8 == 23));
# 723 "xmltok_impl.c"
    if (tmp___8 == 23) {
      __CrestBranch(85263, 54961, 1);
# 723 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(85264, 54962, 0);

    }
    }
    {
    __CrestLoad(85267, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85266, (unsigned long )0, (long long )10);
    __CrestApply2(85265, 12, (long long )(tmp___8 == 10));
# 740 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(85268, 54964, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(85269, 54965, 0);

    }
    }
    {
    __CrestLoad(85272, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85271, (unsigned long )0, (long long )9);
    __CrestApply2(85270, 12, (long long )(tmp___8 == 9));
# 740 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(85273, 54967, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(85274, 54968, 0);

    }
    }
    {
    __CrestLoad(85277, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85276, (unsigned long )0, (long long )21);
    __CrestApply2(85275, 12, (long long )(tmp___8 == 21));
# 740 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(85278, 54970, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(85279, 54971, 0);

    }
    }
    {
    __CrestLoad(85282, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85281, (unsigned long )0, (long long )11);
    __CrestApply2(85280, 12, (long long )(tmp___8 == 11));
# 761 "xmltok_impl.c"
    if (tmp___8 == 11) {
      __CrestBranch(85283, 54973, 1);
# 761 "xmltok_impl.c"
      goto gt;
    } else {
      __CrestBranch(85284, 54974, 0);

    }
    }
    {
    __CrestLoad(85287, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(85286, (unsigned long )0, (long long )17);
    __CrestApply2(85285, 12, (long long )(tmp___8 == 17));
# 765 "xmltok_impl.c"
    if (tmp___8 == 17) {
      __CrestBranch(85288, 54976, 1);
# 765 "xmltok_impl.c"
      goto sol;
    } else {
      __CrestBranch(85289, 54977, 0);

    }
    }
# 776 "xmltok_impl.c"
    goto switch_default___2;
    case_29___0:
    {
# 721 "xmltok_impl.c"
    mem_36 = ptr + 1;
# 721 "xmltok_impl.c"
    mem_37 = ptr + 0;
# 721 "xmltok_impl.c"
    mem_38 = ptr + 0;
    {
    __CrestLoad(85298, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_36] << 3) + (int const )((int )((unsigned char )*mem_37) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_36] << 3) + (int const )((int )((unsigned char )*mem_37) >> 5)]);
    __CrestLoad(85297, (unsigned long )0, (long long )1);
    __CrestLoad(85296, (unsigned long )mem_38, (long long )*mem_38);
    __CrestLoad(85295, (unsigned long )0, (long long )31);
    __CrestApply2(85294, 5, (long long )((int )((unsigned char )*mem_38) & 31));
    __CrestApply2(85293, 8, (long long )(1 << ((int )((unsigned char )*mem_38) & 31)));
    __CrestApply2(85292, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_36] << 3) + (int const )((int )((unsigned char )*mem_37) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_38) & 31))));
    __CrestLoad(85291, (unsigned long )0, (long long )0);
    __CrestApply2(85290, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_36] << 3) + (int const )((int )((unsigned char )*mem_37) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_38) & 31))) == 0));
# 721 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_36] << 3) + (int const )((int )((unsigned char )*mem_37) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_38) & 31))) == 0) {
      __CrestBranch(85299, 54982, 1);
# 721 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85301, (unsigned long )0, (long long )0);
      __CrestStore(85302, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
      __retres55 = 0;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85300, 54985, 0);

    }
    }
    }
    case_27___0:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 721 "xmltok_impl.c"
    ptr += 2;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_5___0:
    {
    __CrestLoad(85307, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85306, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85305, 18, (long long )(end - ptr));
    __CrestLoad(85304, (unsigned long )0, (long long )2L);
    __CrestApply2(85303, 16, (long long )(end - ptr < 2L));
# 721 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(85308, 54989, 1);
      __CrestLoad(85310, (unsigned long )0, (long long )-2);
      __CrestStore(85311, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
      __retres55 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85309, 54991, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85312, (unsigned long )0, (long long )0);
    __CrestStore(85313, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
    __retres55 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 2;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_6___0:
    {
    __CrestLoad(85318, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85317, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85316, 18, (long long )(end - ptr));
    __CrestLoad(85315, (unsigned long )0, (long long )3L);
    __CrestApply2(85314, 16, (long long )(end - ptr < 3L));
# 721 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(85319, 54998, 1);
      __CrestLoad(85321, (unsigned long )0, (long long )-2);
      __CrestStore(85322, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
      __retres55 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85320, 55000, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85323, (unsigned long )0, (long long )0);
    __CrestStore(85324, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
    __retres55 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 3;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_7___0:
    {
    __CrestLoad(85329, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85328, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85327, 18, (long long )(end - ptr));
    __CrestLoad(85326, (unsigned long )0, (long long )4L);
    __CrestApply2(85325, 16, (long long )(end - ptr < 4L));
# 721 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(85330, 55007, 1);
      __CrestLoad(85332, (unsigned long )0, (long long )-2);
      __CrestStore(85333, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
      __retres55 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85331, 55009, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85334, (unsigned long )0, (long long )0);
    __CrestStore(85335, (unsigned long )(& __retres55));
# 721 "xmltok_impl.c"
    __retres55 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 4;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_23:
    {
    __CrestLoad(85338, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(85337, (unsigned long )0, (long long )0);
    __CrestApply2(85336, 13, (long long )(hadColon != 0));
# 724 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(85339, 55016, 1);
# 725 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85341, (unsigned long )0, (long long )0);
      __CrestStore(85342, (unsigned long )(& __retres55));
# 726 "xmltok_impl.c"
      __retres55 = 0;
# 726 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85340, 55019, 0);

    }
    }
    __CrestLoad(85343, (unsigned long )0, (long long )1);
    __CrestStore(85344, (unsigned long )(& hadColon));
# 728 "xmltok_impl.c"
    hadColon = 1;
# 729 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(85347, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(85346, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(85345, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 730 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(85348, 55022, 1);
      __CrestLoad(85350, (unsigned long )0, (long long )-1);
      __CrestStore(85351, (unsigned long )(& __retres55));
# 731 "xmltok_impl.c"
      __retres55 = -1;
# 731 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85349, 55024, 0);

    }
    }
    {
# 732 "xmltok_impl.c"
    mem_39 = ptr + 1;
    {
    __CrestLoad(85354, (unsigned long )mem_39, (long long )*mem_39);
    __CrestLoad(85353, (unsigned long )0, (long long )0);
    __CrestApply2(85352, 12, (long long )((int const )*mem_39 == 0));
# 732 "xmltok_impl.c"
    if ((int const )*mem_39 == 0) {
      __CrestBranch(85355, 55028, 1);
# 732 "xmltok_impl.c"
      mem_40 = (struct normal_encoding *)enc;
      __CrestLoad(85357, (unsigned long )(& mem_40->type[(unsigned char )*ptr]), (long long )mem_40->type[(unsigned char )*ptr]);
      __CrestStore(85358, (unsigned long )(& tmp___10));
# 732 "xmltok_impl.c"
      tmp___10 = (int )mem_40->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(85356, 55029, 0);
# 732 "xmltok_impl.c"
      mem_41 = ptr + 1;
# 732 "xmltok_impl.c"
      mem_42 = ptr + 0;
      __CrestLoad(85359, (unsigned long )mem_41, (long long )*mem_41);
      __CrestLoad(85360, (unsigned long )mem_42, (long long )*mem_42);
# 732 "xmltok_impl.c"
      tmp___9 = unicode_byte_type((char )*mem_41, (char )*mem_42);
      __CrestHandleReturn(85362, (long long )tmp___9);
      __CrestStore(85361, (unsigned long )(& tmp___9));
      __CrestLoad(85363, (unsigned long )(& tmp___9), (long long )tmp___9);
      __CrestStore(85364, (unsigned long )(& tmp___10));
# 732 "xmltok_impl.c"
      tmp___10 = tmp___9;
    }
    }
    }
    {
    {
    __CrestLoad(85367, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85366, (unsigned long )0, (long long )29);
    __CrestApply2(85365, 12, (long long )(tmp___10 == 29));
# 733 "xmltok_impl.c"
    if (tmp___10 == 29) {
      __CrestBranch(85368, 55032, 1);
# 733 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(85369, 55033, 0);

    }
    }
    {
    __CrestLoad(85372, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85371, (unsigned long )0, (long long )24);
    __CrestApply2(85370, 12, (long long )(tmp___10 == 24));
# 733 "xmltok_impl.c"
    if (tmp___10 == 24) {
      __CrestBranch(85373, 55035, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(85374, 55036, 0);

    }
    }
    {
    __CrestLoad(85377, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85376, (unsigned long )0, (long long )22);
    __CrestApply2(85375, 12, (long long )(tmp___10 == 22));
# 733 "xmltok_impl.c"
    if (tmp___10 == 22) {
      __CrestBranch(85378, 55038, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(85379, 55039, 0);

    }
    }
    {
    __CrestLoad(85382, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85381, (unsigned long )0, (long long )5);
    __CrestApply2(85380, 12, (long long )(tmp___10 == 5));
# 733 "xmltok_impl.c"
    if (tmp___10 == 5) {
      __CrestBranch(85383, 55041, 1);
# 733 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(85384, 55042, 0);

    }
    }
    {
    __CrestLoad(85387, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85386, (unsigned long )0, (long long )6);
    __CrestApply2(85385, 12, (long long )(tmp___10 == 6));
# 733 "xmltok_impl.c"
    if (tmp___10 == 6) {
      __CrestBranch(85388, 55044, 1);
# 733 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(85389, 55045, 0);

    }
    }
    {
    __CrestLoad(85392, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(85391, (unsigned long )0, (long long )7);
    __CrestApply2(85390, 12, (long long )(tmp___10 == 7));
# 733 "xmltok_impl.c"
    if (tmp___10 == 7) {
      __CrestBranch(85393, 55047, 1);
# 733 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(85394, 55048, 0);

    }
    }
# 734 "xmltok_impl.c"
    goto switch_default___0;
    case_29___1:
    {
# 733 "xmltok_impl.c"
    mem_43 = ptr + 1;
# 733 "xmltok_impl.c"
    mem_44 = ptr + 0;
# 733 "xmltok_impl.c"
    mem_45 = ptr + 0;
    {
    __CrestLoad(85403, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_43] << 3) + (int const )((int )((unsigned char )*mem_44) >> 5)]),
                (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_43] << 3) + (int const )((int )((unsigned char )*mem_44) >> 5)]);
    __CrestLoad(85402, (unsigned long )0, (long long )1);
    __CrestLoad(85401, (unsigned long )mem_45, (long long )*mem_45);
    __CrestLoad(85400, (unsigned long )0, (long long )31);
    __CrestApply2(85399, 5, (long long )((int )((unsigned char )*mem_45) & 31));
    __CrestApply2(85398, 8, (long long )(1 << ((int )((unsigned char )*mem_45) & 31)));
    __CrestApply2(85397, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_43] << 3) + (int const )((int )((unsigned char )*mem_44) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_45) & 31))));
    __CrestLoad(85396, (unsigned long )0, (long long )0);
    __CrestApply2(85395, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_43] << 3) + (int const )((int )((unsigned char )*mem_44) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_45) & 31))) == 0));
# 733 "xmltok_impl.c"
    if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_43] << 3) + (int const )((int )((unsigned char )*mem_44) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_45) & 31))) == 0) {
      __CrestBranch(85404, 55053, 1);
# 733 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85406, (unsigned long )0, (long long )0);
      __CrestStore(85407, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
      __retres55 = 0;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85405, 55056, 0);

    }
    }
    }
    case_24___1:
    case_22___1:
# 733 "xmltok_impl.c"
    ptr += 2;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_5___1:
    {
    __CrestLoad(85412, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85411, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85410, 18, (long long )(end - ptr));
    __CrestLoad(85409, (unsigned long )0, (long long )2L);
    __CrestApply2(85408, 16, (long long )(end - ptr < 2L));
# 733 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(85413, 55060, 1);
      __CrestLoad(85415, (unsigned long )0, (long long )-2);
      __CrestStore(85416, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
      __retres55 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85414, 55062, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85417, (unsigned long )0, (long long )0);
    __CrestStore(85418, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
    __retres55 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 2;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_6___1:
    {
    __CrestLoad(85423, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85422, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85421, 18, (long long )(end - ptr));
    __CrestLoad(85420, (unsigned long )0, (long long )3L);
    __CrestApply2(85419, 16, (long long )(end - ptr < 3L));
# 733 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(85424, 55069, 1);
      __CrestLoad(85426, (unsigned long )0, (long long )-2);
      __CrestStore(85427, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
      __retres55 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85425, 55071, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85428, (unsigned long )0, (long long )0);
    __CrestStore(85429, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
    __retres55 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 3;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_7___1:
    {
    __CrestLoad(85434, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85433, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85432, 18, (long long )(end - ptr));
    __CrestLoad(85431, (unsigned long )0, (long long )4L);
    __CrestApply2(85430, 16, (long long )(end - ptr < 4L));
# 733 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(85435, 55078, 1);
      __CrestLoad(85437, (unsigned long )0, (long long )-2);
      __CrestStore(85438, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
      __retres55 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85436, 55080, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85439, (unsigned long )0, (long long )0);
    __CrestStore(85440, (unsigned long )(& __retres55));
# 733 "xmltok_impl.c"
    __retres55 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 4;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    switch_default___0:
# 735 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85441, (unsigned long )0, (long long )0);
    __CrestStore(85442, (unsigned long )(& __retres55));
# 736 "xmltok_impl.c"
    __retres55 = 0;
# 736 "xmltok_impl.c"
    goto return_label;
    switch_break___2: ;
    }
# 738 "xmltok_impl.c"
    goto switch_break___1;
    case_10:
    case_9:
    case_21:
# 742 "xmltok_impl.c"
    ptr += 2;
    {
# 743 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(85445, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(85444, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(85443, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 743 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(85446, 55096, 1);

      } else {
        __CrestBranch(85447, 55097, 0);
# 743 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 744 "xmltok_impl.c"
      mem_46 = ptr + 1;
      {
      __CrestLoad(85450, (unsigned long )mem_46, (long long )*mem_46);
      __CrestLoad(85449, (unsigned long )0, (long long )0);
      __CrestApply2(85448, 12, (long long )((int const )*mem_46 == 0));
# 744 "xmltok_impl.c"
      if ((int const )*mem_46 == 0) {
        __CrestBranch(85451, 55101, 1);
# 744 "xmltok_impl.c"
        mem_47 = (struct normal_encoding *)enc;
        __CrestLoad(85453, (unsigned long )(& mem_47->type[(unsigned char )*ptr]),
                    (long long )mem_47->type[(unsigned char )*ptr]);
        __CrestStore(85454, (unsigned long )(& tmp___12));
# 744 "xmltok_impl.c"
        tmp___12 = (int )mem_47->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(85452, 55102, 0);
# 744 "xmltok_impl.c"
        mem_48 = ptr + 1;
# 744 "xmltok_impl.c"
        mem_49 = ptr + 0;
        __CrestLoad(85455, (unsigned long )mem_48, (long long )*mem_48);
        __CrestLoad(85456, (unsigned long )mem_49, (long long )*mem_49);
# 744 "xmltok_impl.c"
        tmp___11 = unicode_byte_type((char )*mem_48, (char )*mem_49);
        __CrestHandleReturn(85458, (long long )tmp___11);
        __CrestStore(85457, (unsigned long )(& tmp___11));
        __CrestLoad(85459, (unsigned long )(& tmp___11), (long long )tmp___11);
        __CrestStore(85460, (unsigned long )(& tmp___12));
# 744 "xmltok_impl.c"
        tmp___12 = tmp___11;
      }
      }
      }
      {
      {
      __CrestLoad(85463, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85462, (unsigned long )0, (long long )29);
      __CrestApply2(85461, 12, (long long )(tmp___12 == 29));
# 745 "xmltok_impl.c"
      if (tmp___12 == 29) {
        __CrestBranch(85464, 55105, 1);
# 745 "xmltok_impl.c"
        goto case_29___2;
      } else {
        __CrestBranch(85465, 55106, 0);

      }
      }
      {
      __CrestLoad(85468, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85467, (unsigned long )0, (long long )24);
      __CrestApply2(85466, 12, (long long )(tmp___12 == 24));
# 745 "xmltok_impl.c"
      if (tmp___12 == 24) {
        __CrestBranch(85469, 55108, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(85470, 55109, 0);

      }
      }
      {
      __CrestLoad(85473, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85472, (unsigned long )0, (long long )22);
      __CrestApply2(85471, 12, (long long )(tmp___12 == 22));
# 745 "xmltok_impl.c"
      if (tmp___12 == 22) {
        __CrestBranch(85474, 55111, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(85475, 55112, 0);

      }
      }
      {
      __CrestLoad(85478, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85477, (unsigned long )0, (long long )5);
      __CrestApply2(85476, 12, (long long )(tmp___12 == 5));
# 745 "xmltok_impl.c"
      if (tmp___12 == 5) {
        __CrestBranch(85479, 55114, 1);
# 745 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(85480, 55115, 0);

      }
      }
      {
      __CrestLoad(85483, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85482, (unsigned long )0, (long long )6);
      __CrestApply2(85481, 12, (long long )(tmp___12 == 6));
# 745 "xmltok_impl.c"
      if (tmp___12 == 6) {
        __CrestBranch(85484, 55117, 1);
# 745 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(85485, 55118, 0);

      }
      }
      {
      __CrestLoad(85488, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85487, (unsigned long )0, (long long )7);
      __CrestApply2(85486, 12, (long long )(tmp___12 == 7));
# 745 "xmltok_impl.c"
      if (tmp___12 == 7) {
        __CrestBranch(85489, 55120, 1);
# 745 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(85490, 55121, 0);

      }
      }
      {
      __CrestLoad(85493, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85492, (unsigned long )0, (long long )11);
      __CrestApply2(85491, 12, (long long )(tmp___12 == 11));
# 746 "xmltok_impl.c"
      if (tmp___12 == 11) {
        __CrestBranch(85494, 55123, 1);
# 746 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(85495, 55124, 0);

      }
      }
      {
      __CrestLoad(85498, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85497, (unsigned long )0, (long long )17);
      __CrestApply2(85496, 12, (long long )(tmp___12 == 17));
# 748 "xmltok_impl.c"
      if (tmp___12 == 17) {
        __CrestBranch(85499, 55126, 1);
# 748 "xmltok_impl.c"
        goto case_17___0;
      } else {
        __CrestBranch(85500, 55127, 0);

      }
      }
      {
      __CrestLoad(85503, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85502, (unsigned long )0, (long long )10);
      __CrestApply2(85501, 12, (long long )(tmp___12 == 10));
# 750 "xmltok_impl.c"
      if (tmp___12 == 10) {
        __CrestBranch(85504, 55129, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(85505, 55130, 0);

      }
      }
      {
      __CrestLoad(85508, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85507, (unsigned long )0, (long long )9);
      __CrestApply2(85506, 12, (long long )(tmp___12 == 9));
# 750 "xmltok_impl.c"
      if (tmp___12 == 9) {
        __CrestBranch(85509, 55132, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(85510, 55133, 0);

      }
      }
      {
      __CrestLoad(85513, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(85512, (unsigned long )0, (long long )21);
      __CrestApply2(85511, 12, (long long )(tmp___12 == 21));
# 750 "xmltok_impl.c"
      if (tmp___12 == 21) {
        __CrestBranch(85514, 55135, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(85515, 55136, 0);

      }
      }
# 753 "xmltok_impl.c"
      goto switch_default___1;
      case_29___2:
      {
# 745 "xmltok_impl.c"
      mem_50 = ptr + 1;
# 745 "xmltok_impl.c"
      mem_51 = ptr + 0;
# 745 "xmltok_impl.c"
      mem_52 = ptr + 0;
      {
      __CrestLoad(85524, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_50] << 3) + (int const )((int )((unsigned char )*mem_51) >> 5)]),
                  (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_50] << 3) + (int const )((int )((unsigned char )*mem_51) >> 5)]);
      __CrestLoad(85523, (unsigned long )0, (long long )1);
      __CrestLoad(85522, (unsigned long )mem_52, (long long )*mem_52);
      __CrestLoad(85521, (unsigned long )0, (long long )31);
      __CrestApply2(85520, 5, (long long )((int )((unsigned char )*mem_52) & 31));
      __CrestApply2(85519, 8, (long long )(1 << ((int )((unsigned char )*mem_52) & 31)));
      __CrestApply2(85518, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_50] << 3) + (int const )((int )((unsigned char )*mem_51) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_52) & 31))));
      __CrestLoad(85517, (unsigned long )0, (long long )0);
      __CrestApply2(85516, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_50] << 3) + (int const )((int )((unsigned char )*mem_51) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_52) & 31))) == 0));
# 745 "xmltok_impl.c"
      if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_50] << 3) + (int const )((int )((unsigned char )*mem_51) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_52) & 31))) == 0) {
        __CrestBranch(85525, 55141, 1);
# 745 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(85527, (unsigned long )0, (long long )0);
        __CrestStore(85528, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
        __retres55 = 0;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85526, 55144, 0);

      }
      }
      }
      case_24___2:
      case_22___2:
# 745 "xmltok_impl.c"
      ptr += 2;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_5___2:
      {
      __CrestLoad(85533, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(85532, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(85531, 18, (long long )(end - ptr));
      __CrestLoad(85530, (unsigned long )0, (long long )2L);
      __CrestApply2(85529, 16, (long long )(end - ptr < 2L));
# 745 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(85534, 55148, 1);
        __CrestLoad(85536, (unsigned long )0, (long long )-2);
        __CrestStore(85537, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
        __retres55 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85535, 55150, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85538, (unsigned long )0, (long long )0);
      __CrestStore(85539, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
      __retres55 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 2;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_6___2:
      {
      __CrestLoad(85544, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(85543, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(85542, 18, (long long )(end - ptr));
      __CrestLoad(85541, (unsigned long )0, (long long )3L);
      __CrestApply2(85540, 16, (long long )(end - ptr < 3L));
# 745 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(85545, 55157, 1);
        __CrestLoad(85547, (unsigned long )0, (long long )-2);
        __CrestStore(85548, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
        __retres55 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85546, 55159, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85549, (unsigned long )0, (long long )0);
      __CrestStore(85550, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
      __retres55 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 3;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_7___2:
      {
      __CrestLoad(85555, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(85554, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(85553, 18, (long long )(end - ptr));
      __CrestLoad(85552, (unsigned long )0, (long long )4L);
      __CrestApply2(85551, 16, (long long )(end - ptr < 4L));
# 745 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(85556, 55166, 1);
        __CrestLoad(85558, (unsigned long )0, (long long )-2);
        __CrestStore(85559, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
        __retres55 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85557, 55168, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85560, (unsigned long )0, (long long )0);
      __CrestStore(85561, (unsigned long )(& __retres55));
# 745 "xmltok_impl.c"
      __retres55 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 4;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_11:
# 747 "xmltok_impl.c"
      goto gt;
      case_17___0:
# 749 "xmltok_impl.c"
      goto sol;
      case_10___0:
      case_9___0:
      case_21___0:
# 751 "xmltok_impl.c"
      ptr += 2;
# 752 "xmltok_impl.c"
      goto while_continue___0;
      switch_default___1:
# 754 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85562, (unsigned long )0, (long long )0);
      __CrestStore(85563, (unsigned long )(& __retres55));
# 755 "xmltok_impl.c"
      __retres55 = 0;
# 755 "xmltok_impl.c"
      goto return_label;
      switch_break___3: ;
      }
# 757 "xmltok_impl.c"
      tmp___13 = little2_scanAtts(enc, ptr, end, nextTokPtr);
      __CrestHandleReturn(85565, (long long )tmp___13);
      __CrestStore(85564, (unsigned long )(& tmp___13));
      __CrestLoad(85566, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestStore(85567, (unsigned long )(& __retres55));
# 757 "xmltok_impl.c"
      __retres55 = tmp___13;
# 757 "xmltok_impl.c"
      goto return_label;
    }
    while_break___0: ;
    }
    __CrestLoad(85568, (unsigned long )0, (long long )-1);
    __CrestStore(85569, (unsigned long )(& __retres55));
# 759 "xmltok_impl.c"
    __retres55 = -1;
# 759 "xmltok_impl.c"
    goto return_label;
    gt:
    case_11___0:
# 763 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(85570, (unsigned long )0, (long long )2);
    __CrestStore(85571, (unsigned long )(& __retres55));
# 764 "xmltok_impl.c"
    __retres55 = 2;
# 764 "xmltok_impl.c"
    goto return_label;
    sol:
    case_17___1:
# 767 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(85574, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(85573, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(85572, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 768 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(85575, 55193, 1);
      __CrestLoad(85577, (unsigned long )0, (long long )-1);
      __CrestStore(85578, (unsigned long )(& __retres55));
# 769 "xmltok_impl.c"
      __retres55 = -1;
# 769 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85576, 55195, 0);

    }
    }
    {
# 770 "xmltok_impl.c"
    mem_53 = ptr + 1;
    {
    __CrestLoad(85581, (unsigned long )mem_53, (long long )*mem_53);
    __CrestLoad(85580, (unsigned long )0, (long long )0);
    __CrestApply2(85579, 12, (long long )((int const )*mem_53 == 0));
# 770 "xmltok_impl.c"
    if ((int const )*mem_53 == 0) {
      __CrestBranch(85582, 55199, 1);
      {
# 770 "xmltok_impl.c"
      mem_54 = ptr + 0;
      {
      __CrestLoad(85586, (unsigned long )mem_54, (long long )*mem_54);
      __CrestLoad(85585, (unsigned long )0, (long long )62);
      __CrestApply2(85584, 12, (long long )((int const )*mem_54 == 62));
# 770 "xmltok_impl.c"
      if ((int const )*mem_54 == 62) {
        __CrestBranch(85587, 55202, 1);

      } else {
        __CrestBranch(85588, 55203, 0);
# 771 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(85589, (unsigned long )0, (long long )0);
        __CrestStore(85590, (unsigned long )(& __retres55));
# 772 "xmltok_impl.c"
        __retres55 = 0;
# 772 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(85583, 55206, 0);
# 771 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85591, (unsigned long )0, (long long )0);
      __CrestStore(85592, (unsigned long )(& __retres55));
# 772 "xmltok_impl.c"
      __retres55 = 0;
# 772 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 774 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(85593, (unsigned long )0, (long long )4);
    __CrestStore(85594, (unsigned long )(& __retres55));
# 775 "xmltok_impl.c"
    __retres55 = 4;
# 775 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 777 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85595, (unsigned long )0, (long long )0);
    __CrestStore(85596, (unsigned long )(& __retres55));
# 778 "xmltok_impl.c"
    __retres55 = 0;
# 778 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(85597, (unsigned long )0, (long long )-1);
  __CrestStore(85598, (unsigned long )(& __retres55));
# 781 "xmltok_impl.c"
  __retres55 = -1;
  return_label:
  {
  __CrestLoad(85599, (unsigned long )(& __retres55), (long long )__retres55);
  __CrestReturn(85600);
# 684 "xmltok_impl.c"
  return (__retres55);
  }
}
}
# 784 "xmltok_impl.c"
static int little2_contentTok(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const *mem_14 ;
  struct normal_encoding *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  struct normal_encoding *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  int __retres34 ;

  {
  __CrestCall(85601, 884);

  {
  __CrestLoad(85604, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85603, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85602, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 788 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85605, 55220, 1);
    __CrestLoad(85607, (unsigned long )0, (long long )-4);
    __CrestStore(85608, (unsigned long )(& __retres34));
# 789 "xmltok_impl.c"
    __retres34 = -4;
# 789 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85606, 55222, 0);

  }
  }
  __CrestLoad(85611, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85610, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85609, 18, (long long )(end - ptr));
  __CrestStore(85612, (unsigned long )(& n));
# 791 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(85617, (unsigned long )(& n), (long long )n);
  __CrestLoad(85616, (unsigned long )0, (long long )1UL);
  __CrestApply2(85615, 5, (long long )(n & 1UL));
  __CrestLoad(85614, (unsigned long )0, (long long )0);
  __CrestApply2(85613, 13, (long long )((n & 1UL) != 0));
# 792 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(85618, 55225, 1);
    __CrestLoad(85622, (unsigned long )(& n), (long long )n);
    __CrestLoad(85621, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(85620, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(85623, (unsigned long )(& n));
# 793 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(85626, (unsigned long )(& n), (long long )n);
    __CrestLoad(85625, (unsigned long )0, (long long )0UL);
    __CrestApply2(85624, 12, (long long )(n == 0UL));
# 794 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(85627, 55227, 1);
      __CrestLoad(85629, (unsigned long )0, (long long )-1);
      __CrestStore(85630, (unsigned long )(& __retres34));
# 795 "xmltok_impl.c"
      __retres34 = -1;
# 795 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85628, 55229, 0);

    }
    }
# 796 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(85619, 55231, 0);

  }
  }
  {
# 799 "xmltok_impl.c"
  mem_14 = ptr + 1;
  {
  __CrestLoad(85633, (unsigned long )mem_14, (long long )*mem_14);
  __CrestLoad(85632, (unsigned long )0, (long long )0);
  __CrestApply2(85631, 12, (long long )((int const )*mem_14 == 0));
# 799 "xmltok_impl.c"
  if ((int const )*mem_14 == 0) {
    __CrestBranch(85634, 55235, 1);
# 799 "xmltok_impl.c"
    mem_15 = (struct normal_encoding *)enc;
    __CrestLoad(85636, (unsigned long )(& mem_15->type[(unsigned char )*ptr]), (long long )mem_15->type[(unsigned char )*ptr]);
    __CrestStore(85637, (unsigned long )(& tmp___0));
# 799 "xmltok_impl.c"
    tmp___0 = (int )mem_15->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(85635, 55236, 0);
# 799 "xmltok_impl.c"
    mem_16 = ptr + 1;
# 799 "xmltok_impl.c"
    mem_17 = ptr + 0;
    __CrestLoad(85638, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(85639, (unsigned long )mem_17, (long long )*mem_17);
# 799 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_16, (char )*mem_17);
    __CrestHandleReturn(85641, (long long )tmp);
    __CrestStore(85640, (unsigned long )(& tmp));
    __CrestLoad(85642, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(85643, (unsigned long )(& tmp___0));
# 799 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(85646, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85645, (unsigned long )0, (long long )2);
  __CrestApply2(85644, 12, (long long )(tmp___0 == 2));
# 800 "xmltok_impl.c"
  if (tmp___0 == 2) {
    __CrestBranch(85647, 55239, 1);
# 800 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(85648, 55240, 0);

  }
  }
  {
  __CrestLoad(85651, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85650, (unsigned long )0, (long long )3);
  __CrestApply2(85649, 12, (long long )(tmp___0 == 3));
# 802 "xmltok_impl.c"
  if (tmp___0 == 3) {
    __CrestBranch(85652, 55242, 1);
# 802 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(85653, 55243, 0);

  }
  }
  {
  __CrestLoad(85656, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85655, (unsigned long )0, (long long )9);
  __CrestApply2(85654, 12, (long long )(tmp___0 == 9));
# 804 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(85657, 55245, 1);
# 804 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(85658, 55246, 0);

  }
  }
  {
  __CrestLoad(85661, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85660, (unsigned long )0, (long long )10);
  __CrestApply2(85659, 12, (long long )(tmp___0 == 10));
# 812 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(85662, 55248, 1);
# 812 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(85663, 55249, 0);

  }
  }
  {
  __CrestLoad(85666, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85665, (unsigned long )0, (long long )4);
  __CrestApply2(85664, 12, (long long )(tmp___0 == 4));
# 815 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(85667, 55251, 1);
# 815 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(85668, 55252, 0);

  }
  }
  {
  __CrestLoad(85671, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85670, (unsigned long )0, (long long )5);
  __CrestApply2(85669, 12, (long long )(tmp___0 == 5));
# 830 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(85672, 55254, 1);
# 830 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(85673, 55255, 0);

  }
  }
  {
  __CrestLoad(85676, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85675, (unsigned long )0, (long long )6);
  __CrestApply2(85674, 12, (long long )(tmp___0 == 6));
# 830 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(85677, 55257, 1);
# 830 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(85678, 55258, 0);

  }
  }
  {
  __CrestLoad(85681, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85680, (unsigned long )0, (long long )7);
  __CrestApply2(85679, 12, (long long )(tmp___0 == 7));
# 830 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(85682, 55260, 1);
# 830 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(85683, 55261, 0);

  }
  }
  {
  __CrestLoad(85686, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85685, (unsigned long )0, (long long )8);
  __CrestApply2(85684, 12, (long long )(tmp___0 == 8));
# 830 "xmltok_impl.c"
  if (tmp___0 == 8) {
    __CrestBranch(85687, 55263, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(85688, 55264, 0);

  }
  }
  {
  __CrestLoad(85691, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85690, (unsigned long )0, (long long )1);
  __CrestApply2(85689, 12, (long long )(tmp___0 == 1));
# 830 "xmltok_impl.c"
  if (tmp___0 == 1) {
    __CrestBranch(85692, 55266, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(85693, 55267, 0);

  }
  }
  {
  __CrestLoad(85696, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85695, (unsigned long )0, (long long )0);
  __CrestApply2(85694, 12, (long long )(tmp___0 == 0));
# 830 "xmltok_impl.c"
  if (tmp___0 == 0) {
    __CrestBranch(85697, 55269, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(85698, 55270, 0);

  }
  }
# 831 "xmltok_impl.c"
  goto switch_default;
  case_2:
# 801 "xmltok_impl.c"
  tmp___1 = little2_scanLt(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85700, (long long )tmp___1);
  __CrestStore(85699, (unsigned long )(& tmp___1));
  __CrestLoad(85701, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(85702, (unsigned long )(& __retres34));
# 801 "xmltok_impl.c"
  __retres34 = tmp___1;
# 801 "xmltok_impl.c"
  goto return_label;
  case_3:
# 803 "xmltok_impl.c"
  tmp___2 = little2_scanRef(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(85704, (long long )tmp___2);
  __CrestStore(85703, (unsigned long )(& tmp___2));
  __CrestLoad(85705, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(85706, (unsigned long )(& __retres34));
# 803 "xmltok_impl.c"
  __retres34 = tmp___2;
# 803 "xmltok_impl.c"
  goto return_label;
  case_9:
# 805 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(85709, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85708, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85707, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 806 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85710, 55280, 1);
    __CrestLoad(85712, (unsigned long )0, (long long )-3);
    __CrestStore(85713, (unsigned long )(& __retres34));
# 807 "xmltok_impl.c"
    __retres34 = -3;
# 807 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85711, 55282, 0);

  }
  }
  {
# 808 "xmltok_impl.c"
  mem_18 = ptr + 1;
  {
  __CrestLoad(85716, (unsigned long )mem_18, (long long )*mem_18);
  __CrestLoad(85715, (unsigned long )0, (long long )0);
  __CrestApply2(85714, 12, (long long )((int const )*mem_18 == 0));
# 808 "xmltok_impl.c"
  if ((int const )*mem_18 == 0) {
    __CrestBranch(85717, 55286, 1);
# 808 "xmltok_impl.c"
    mem_19 = (struct normal_encoding *)enc;
    __CrestLoad(85719, (unsigned long )(& mem_19->type[(unsigned char )*ptr]), (long long )mem_19->type[(unsigned char )*ptr]);
    __CrestStore(85720, (unsigned long )(& tmp___4));
# 808 "xmltok_impl.c"
    tmp___4 = (int )mem_19->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(85718, 55287, 0);
# 808 "xmltok_impl.c"
    mem_20 = ptr + 1;
# 808 "xmltok_impl.c"
    mem_21 = ptr + 0;
    __CrestLoad(85721, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(85722, (unsigned long )mem_21, (long long )*mem_21);
# 808 "xmltok_impl.c"
    tmp___3 = unicode_byte_type((char )*mem_20, (char )*mem_21);
    __CrestHandleReturn(85724, (long long )tmp___3);
    __CrestStore(85723, (unsigned long )(& tmp___3));
    __CrestLoad(85725, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestStore(85726, (unsigned long )(& tmp___4));
# 808 "xmltok_impl.c"
    tmp___4 = tmp___3;
  }
  }
  }
  {
  __CrestLoad(85729, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(85728, (unsigned long )0, (long long )10);
  __CrestApply2(85727, 12, (long long )(tmp___4 == 10));
# 808 "xmltok_impl.c"
  if (tmp___4 == 10) {
    __CrestBranch(85730, 55289, 1);
# 809 "xmltok_impl.c"
    ptr += 2;
  } else {
    __CrestBranch(85731, 55290, 0);

  }
  }
# 810 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85732, (unsigned long )0, (long long )7);
  __CrestStore(85733, (unsigned long )(& __retres34));
# 811 "xmltok_impl.c"
  __retres34 = 7;
# 811 "xmltok_impl.c"
  goto return_label;
  case_10:
# 813 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(85734, (unsigned long )0, (long long )7);
  __CrestStore(85735, (unsigned long )(& __retres34));
# 814 "xmltok_impl.c"
  __retres34 = 7;
# 814 "xmltok_impl.c"
  goto return_label;
  case_4:
# 816 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(85738, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85737, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85736, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 817 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85739, 55299, 1);
    __CrestLoad(85741, (unsigned long )0, (long long )-5);
    __CrestStore(85742, (unsigned long )(& __retres34));
# 818 "xmltok_impl.c"
    __retres34 = -5;
# 818 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85740, 55301, 0);

  }
  }
  {
# 819 "xmltok_impl.c"
  mem_22 = ptr + 1;
  {
  __CrestLoad(85745, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(85744, (unsigned long )0, (long long )0);
  __CrestApply2(85743, 12, (long long )((int const )*mem_22 == 0));
# 819 "xmltok_impl.c"
  if ((int const )*mem_22 == 0) {
    __CrestBranch(85746, 55305, 1);
    {
# 819 "xmltok_impl.c"
    mem_23 = ptr + 0;
    {
    __CrestLoad(85750, (unsigned long )mem_23, (long long )*mem_23);
    __CrestLoad(85749, (unsigned long )0, (long long )93);
    __CrestApply2(85748, 12, (long long )((int const )*mem_23 == 93));
# 819 "xmltok_impl.c"
    if ((int const )*mem_23 == 93) {
      __CrestBranch(85751, 55308, 1);

    } else {
      __CrestBranch(85752, 55309, 0);
# 820 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(85747, 55310, 0);
# 820 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 821 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(85755, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85754, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85753, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 822 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85756, 55313, 1);
    __CrestLoad(85758, (unsigned long )0, (long long )-5);
    __CrestStore(85759, (unsigned long )(& __retres34));
# 823 "xmltok_impl.c"
    __retres34 = -5;
# 823 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85757, 55315, 0);

  }
  }
  {
# 824 "xmltok_impl.c"
  mem_24 = ptr + 1;
  {
  __CrestLoad(85762, (unsigned long )mem_24, (long long )*mem_24);
  __CrestLoad(85761, (unsigned long )0, (long long )0);
  __CrestApply2(85760, 12, (long long )((int const )*mem_24 == 0));
# 824 "xmltok_impl.c"
  if ((int const )*mem_24 == 0) {
    __CrestBranch(85763, 55319, 1);
    {
# 824 "xmltok_impl.c"
    mem_25 = ptr + 0;
    {
    __CrestLoad(85767, (unsigned long )mem_25, (long long )*mem_25);
    __CrestLoad(85766, (unsigned long )0, (long long )62);
    __CrestApply2(85765, 12, (long long )((int const )*mem_25 == 62));
# 824 "xmltok_impl.c"
    if ((int const )*mem_25 == 62) {
      __CrestBranch(85768, 55322, 1);

    } else {
      __CrestBranch(85769, 55323, 0);
# 825 "xmltok_impl.c"
      ptr -= 2;
# 826 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(85764, 55325, 0);
# 825 "xmltok_impl.c"
    ptr -= 2;
# 826 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 828 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85770, (unsigned long )0, (long long )0);
  __CrestStore(85771, (unsigned long )(& __retres34));
# 829 "xmltok_impl.c"
  __retres34 = 0;
# 829 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(85776, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85775, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85774, 18, (long long )(end - ptr));
  __CrestLoad(85773, (unsigned long )0, (long long )2L);
  __CrestApply2(85772, 16, (long long )(end - ptr < 2L));
# 830 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(85777, 55331, 1);
    __CrestLoad(85779, (unsigned long )0, (long long )-2);
    __CrestStore(85780, (unsigned long )(& __retres34));
# 830 "xmltok_impl.c"
    __retres34 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85778, 55333, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 2;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(85785, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85784, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85783, 18, (long long )(end - ptr));
  __CrestLoad(85782, (unsigned long )0, (long long )3L);
  __CrestApply2(85781, 16, (long long )(end - ptr < 3L));
# 830 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(85786, 55337, 1);
    __CrestLoad(85788, (unsigned long )0, (long long )-2);
    __CrestStore(85789, (unsigned long )(& __retres34));
# 830 "xmltok_impl.c"
    __retres34 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85787, 55339, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 3;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(85794, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(85793, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(85792, 18, (long long )(end - ptr));
  __CrestLoad(85791, (unsigned long )0, (long long )4L);
  __CrestApply2(85790, 16, (long long )(end - ptr < 4L));
# 830 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(85795, 55343, 1);
    __CrestLoad(85797, (unsigned long )0, (long long )-2);
    __CrestStore(85798, (unsigned long )(& __retres34));
# 830 "xmltok_impl.c"
    __retres34 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85796, 55345, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 4;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 830 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85799, (unsigned long )0, (long long )0);
  __CrestStore(85800, (unsigned long )(& __retres34));
# 830 "xmltok_impl.c"
  __retres34 = 0;
# 830 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 832 "xmltok_impl.c"
  ptr += 2;
# 833 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  {
# 835 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(85803, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(85802, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(85801, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 835 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(85804, 55358, 1);

    } else {
      __CrestBranch(85805, 55359, 0);
# 835 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 836 "xmltok_impl.c"
    mem_26 = ptr + 1;
    {
    __CrestLoad(85808, (unsigned long )mem_26, (long long )*mem_26);
    __CrestLoad(85807, (unsigned long )0, (long long )0);
    __CrestApply2(85806, 12, (long long )((int const )*mem_26 == 0));
# 836 "xmltok_impl.c"
    if ((int const )*mem_26 == 0) {
      __CrestBranch(85809, 55363, 1);
# 836 "xmltok_impl.c"
      mem_27 = (struct normal_encoding *)enc;
      __CrestLoad(85811, (unsigned long )(& mem_27->type[(unsigned char )*ptr]), (long long )mem_27->type[(unsigned char )*ptr]);
      __CrestStore(85812, (unsigned long )(& tmp___6));
# 836 "xmltok_impl.c"
      tmp___6 = (int )mem_27->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(85810, 55364, 0);
# 836 "xmltok_impl.c"
      mem_28 = ptr + 1;
# 836 "xmltok_impl.c"
      mem_29 = ptr + 0;
      __CrestLoad(85813, (unsigned long )mem_28, (long long )*mem_28);
      __CrestLoad(85814, (unsigned long )mem_29, (long long )*mem_29);
# 836 "xmltok_impl.c"
      tmp___5 = unicode_byte_type((char )*mem_28, (char )*mem_29);
      __CrestHandleReturn(85816, (long long )tmp___5);
      __CrestStore(85815, (unsigned long )(& tmp___5));
      __CrestLoad(85817, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestStore(85818, (unsigned long )(& tmp___6));
# 836 "xmltok_impl.c"
      tmp___6 = tmp___5;
    }
    }
    }
    {
    {
    __CrestLoad(85821, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85820, (unsigned long )0, (long long )5);
    __CrestApply2(85819, 12, (long long )(tmp___6 == 5));
# 845 "xmltok_impl.c"
    if (tmp___6 == 5) {
      __CrestBranch(85822, 55367, 1);
# 845 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(85823, 55368, 0);

    }
    }
    {
    __CrestLoad(85826, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85825, (unsigned long )0, (long long )6);
    __CrestApply2(85824, 12, (long long )(tmp___6 == 6));
# 845 "xmltok_impl.c"
    if (tmp___6 == 6) {
      __CrestBranch(85827, 55370, 1);
# 845 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(85828, 55371, 0);

    }
    }
    {
    __CrestLoad(85831, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85830, (unsigned long )0, (long long )7);
    __CrestApply2(85829, 12, (long long )(tmp___6 == 7));
# 845 "xmltok_impl.c"
    if (tmp___6 == 7) {
      __CrestBranch(85832, 55373, 1);
# 845 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(85833, 55374, 0);

    }
    }
    {
    __CrestLoad(85836, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85835, (unsigned long )0, (long long )4);
    __CrestApply2(85834, 12, (long long )(tmp___6 == 4));
# 847 "xmltok_impl.c"
    if (tmp___6 == 4) {
      __CrestBranch(85837, 55376, 1);
# 847 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(85838, 55377, 0);

    }
    }
    {
    __CrestLoad(85841, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85840, (unsigned long )0, (long long )10);
    __CrestApply2(85839, 12, (long long )(tmp___6 == 10));
# 869 "xmltok_impl.c"
    if (tmp___6 == 10) {
      __CrestBranch(85842, 55379, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85843, 55380, 0);

    }
    }
    {
    __CrestLoad(85846, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85845, (unsigned long )0, (long long )9);
    __CrestApply2(85844, 12, (long long )(tmp___6 == 9));
# 869 "xmltok_impl.c"
    if (tmp___6 == 9) {
      __CrestBranch(85847, 55382, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85848, 55383, 0);

    }
    }
    {
    __CrestLoad(85851, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85850, (unsigned long )0, (long long )8);
    __CrestApply2(85849, 12, (long long )(tmp___6 == 8));
# 869 "xmltok_impl.c"
    if (tmp___6 == 8) {
      __CrestBranch(85852, 55385, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85853, 55386, 0);

    }
    }
    {
    __CrestLoad(85856, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85855, (unsigned long )0, (long long )1);
    __CrestApply2(85854, 12, (long long )(tmp___6 == 1));
# 869 "xmltok_impl.c"
    if (tmp___6 == 1) {
      __CrestBranch(85857, 55388, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85858, 55389, 0);

    }
    }
    {
    __CrestLoad(85861, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85860, (unsigned long )0, (long long )0);
    __CrestApply2(85859, 12, (long long )(tmp___6 == 0));
# 869 "xmltok_impl.c"
    if (tmp___6 == 0) {
      __CrestBranch(85862, 55391, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85863, 55392, 0);

    }
    }
    {
    __CrestLoad(85866, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85865, (unsigned long )0, (long long )2);
    __CrestApply2(85864, 12, (long long )(tmp___6 == 2));
# 869 "xmltok_impl.c"
    if (tmp___6 == 2) {
      __CrestBranch(85867, 55394, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85868, 55395, 0);

    }
    }
    {
    __CrestLoad(85871, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(85870, (unsigned long )0, (long long )3);
    __CrestApply2(85869, 12, (long long )(tmp___6 == 3));
# 869 "xmltok_impl.c"
    if (tmp___6 == 3) {
      __CrestBranch(85872, 55397, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(85873, 55398, 0);

    }
    }
# 872 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(85878, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85877, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85876, 18, (long long )(end - ptr));
    __CrestLoad(85875, (unsigned long )0, (long long )2L);
    __CrestApply2(85874, 16, (long long )(end - ptr < 2L));
# 845 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(85879, 55401, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85881, (unsigned long )0, (long long )6);
      __CrestStore(85882, (unsigned long )(& __retres34));
# 845 "xmltok_impl.c"
      __retres34 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85880, 55404, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 2;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(85887, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85886, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85885, 18, (long long )(end - ptr));
    __CrestLoad(85884, (unsigned long )0, (long long )3L);
    __CrestApply2(85883, 16, (long long )(end - ptr < 3L));
# 845 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(85888, 55408, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85890, (unsigned long )0, (long long )6);
      __CrestStore(85891, (unsigned long )(& __retres34));
# 845 "xmltok_impl.c"
      __retres34 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85889, 55411, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 3;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(85896, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(85895, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(85894, 18, (long long )(end - ptr));
    __CrestLoad(85893, (unsigned long )0, (long long )4L);
    __CrestApply2(85892, 16, (long long )(end - ptr < 4L));
# 845 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(85897, 55415, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(85899, (unsigned long )0, (long long )6);
      __CrestStore(85900, (unsigned long )(& __retres34));
# 845 "xmltok_impl.c"
      __retres34 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(85898, 55418, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 4;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    {
    __CrestLoad(85905, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(85904, (unsigned long )0, (long long )2);
    __CrestApply2(85903, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(85902, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(85901, 13, (long long )((unsigned long )(ptr + 2) != (unsigned long )end));
# 848 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) != (unsigned long )end) {
      __CrestBranch(85906, 55422, 1);
      {
# 849 "xmltok_impl.c"
      mem_30 = (ptr + 2) + 1;
      {
      __CrestLoad(85910, (unsigned long )mem_30, (long long )*mem_30);
      __CrestLoad(85909, (unsigned long )0, (long long )0);
      __CrestApply2(85908, 12, (long long )((int const )*mem_30 == 0));
# 849 "xmltok_impl.c"
      if ((int const )*mem_30 == 0) {
        __CrestBranch(85911, 55425, 1);
        {
# 849 "xmltok_impl.c"
        mem_31 = (ptr + 2) + 0;
        {
        __CrestLoad(85915, (unsigned long )mem_31, (long long )*mem_31);
        __CrestLoad(85914, (unsigned long )0, (long long )93);
        __CrestApply2(85913, 12, (long long )((int const )*mem_31 == 93));
# 849 "xmltok_impl.c"
        if ((int const )*mem_31 == 93) {
          __CrestBranch(85916, 55428, 1);

        } else {
          __CrestBranch(85917, 55429, 0);
# 850 "xmltok_impl.c"
          ptr += 2;
# 851 "xmltok_impl.c"
          goto switch_break___0;
        }
        }
        }
      } else {
        __CrestBranch(85912, 55431, 0);
# 850 "xmltok_impl.c"
        ptr += 2;
# 851 "xmltok_impl.c"
        goto switch_break___0;
      }
      }
      }
      {
      __CrestLoad(85922, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(85921, (unsigned long )0, (long long )4);
      __CrestApply2(85920, 18, (long long )((unsigned long )(ptr + 4)));
      __CrestLoad(85919, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(85918, 13, (long long )((unsigned long )(ptr + 4) != (unsigned long )end));
# 853 "xmltok_impl.c"
      if ((unsigned long )(ptr + 4) != (unsigned long )end) {
        __CrestBranch(85923, 55434, 1);
        {
# 854 "xmltok_impl.c"
        mem_32 = (ptr + 4) + 1;
        {
        __CrestLoad(85927, (unsigned long )mem_32, (long long )*mem_32);
        __CrestLoad(85926, (unsigned long )0, (long long )0);
        __CrestApply2(85925, 12, (long long )((int const )*mem_32 == 0));
# 854 "xmltok_impl.c"
        if ((int const )*mem_32 == 0) {
          __CrestBranch(85928, 55437, 1);
          {
# 854 "xmltok_impl.c"
          mem_33 = (ptr + 4) + 0;
          {
          __CrestLoad(85932, (unsigned long )mem_33, (long long )*mem_33);
          __CrestLoad(85931, (unsigned long )0, (long long )62);
          __CrestApply2(85930, 12, (long long )((int const )*mem_33 == 62));
# 854 "xmltok_impl.c"
          if ((int const )*mem_33 == 62) {
            __CrestBranch(85933, 55440, 1);

          } else {
            __CrestBranch(85934, 55441, 0);
# 855 "xmltok_impl.c"
            ptr += 2;
# 856 "xmltok_impl.c"
            goto switch_break___0;
          }
          }
          }
        } else {
          __CrestBranch(85929, 55443, 0);
# 855 "xmltok_impl.c"
          ptr += 2;
# 856 "xmltok_impl.c"
          goto switch_break___0;
        }
        }
        }
# 858 "xmltok_impl.c"
        *nextTokPtr = ptr + 4;
        __CrestLoad(85935, (unsigned long )0, (long long )0);
        __CrestStore(85936, (unsigned long )(& __retres34));
# 859 "xmltok_impl.c"
        __retres34 = 0;
# 859 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(85924, 55448, 0);

      }
      }
    } else {
      __CrestBranch(85907, 55449, 0);

    }
    }
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
    case_2___0:
    case_3___0:
# 870 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(85937, (unsigned long )0, (long long )6);
    __CrestStore(85938, (unsigned long )(& __retres34));
# 871 "xmltok_impl.c"
    __retres34 = 6;
# 871 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 873 "xmltok_impl.c"
    ptr += 2;
# 874 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
# 877 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(85939, (unsigned long )0, (long long )6);
  __CrestStore(85940, (unsigned long )(& __retres34));
# 878 "xmltok_impl.c"
  __retres34 = 6;
  return_label:
  {
  __CrestLoad(85941, (unsigned long )(& __retres34), (long long )__retres34);
  __CrestReturn(85942);
# 784 "xmltok_impl.c"
  return (__retres34);
  }
}
}
# 883 "xmltok_impl.c"
static int little2_scanPercent(ENCODING const *enc , char const *ptr , char const *end ,
                               char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  struct normal_encoding *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  int __retres23 ;

  {
  __CrestCall(85943, 885);

  {
  __CrestLoad(85946, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(85945, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(85944, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 887 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(85947, 55461, 1);
    __CrestLoad(85949, (unsigned long )0, (long long )-1);
    __CrestStore(85950, (unsigned long )(& __retres23));
# 888 "xmltok_impl.c"
    __retres23 = -1;
# 888 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(85948, 55463, 0);

  }
  }
  {
# 889 "xmltok_impl.c"
  mem_9 = ptr + 1;
  {
  __CrestLoad(85953, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(85952, (unsigned long )0, (long long )0);
  __CrestApply2(85951, 12, (long long )((int const )*mem_9 == 0));
# 889 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(85954, 55467, 1);
# 889 "xmltok_impl.c"
    mem_10 = (struct normal_encoding *)enc;
    __CrestLoad(85956, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestStore(85957, (unsigned long )(& tmp___0));
# 889 "xmltok_impl.c"
    tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(85955, 55468, 0);
# 889 "xmltok_impl.c"
    mem_11 = ptr + 1;
# 889 "xmltok_impl.c"
    mem_12 = ptr + 0;
    __CrestLoad(85958, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(85959, (unsigned long )mem_12, (long long )*mem_12);
# 889 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
    __CrestHandleReturn(85961, (long long )tmp);
    __CrestStore(85960, (unsigned long )(& tmp));
    __CrestLoad(85962, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(85963, (unsigned long )(& tmp___0));
# 889 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(85966, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85965, (unsigned long )0, (long long )29);
  __CrestApply2(85964, 12, (long long )(tmp___0 == 29));
# 890 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(85967, 55471, 1);
# 890 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(85968, 55472, 0);

  }
  }
  {
  __CrestLoad(85971, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85970, (unsigned long )0, (long long )24);
  __CrestApply2(85969, 12, (long long )(tmp___0 == 24));
# 890 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(85972, 55474, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(85973, 55475, 0);

  }
  }
  {
  __CrestLoad(85976, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85975, (unsigned long )0, (long long )22);
  __CrestApply2(85974, 12, (long long )(tmp___0 == 22));
# 890 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(85977, 55477, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(85978, 55478, 0);

  }
  }
  {
  __CrestLoad(85981, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85980, (unsigned long )0, (long long )5);
  __CrestApply2(85979, 12, (long long )(tmp___0 == 5));
# 890 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(85982, 55480, 1);
# 890 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(85983, 55481, 0);

  }
  }
  {
  __CrestLoad(85986, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85985, (unsigned long )0, (long long )6);
  __CrestApply2(85984, 12, (long long )(tmp___0 == 6));
# 890 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(85987, 55483, 1);
# 890 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(85988, 55484, 0);

  }
  }
  {
  __CrestLoad(85991, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85990, (unsigned long )0, (long long )7);
  __CrestApply2(85989, 12, (long long )(tmp___0 == 7));
# 890 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(85992, 55486, 1);
# 890 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(85993, 55487, 0);

  }
  }
  {
  __CrestLoad(85996, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(85995, (unsigned long )0, (long long )30);
  __CrestApply2(85994, 12, (long long )(tmp___0 == 30));
# 891 "xmltok_impl.c"
  if (tmp___0 == 30) {
    __CrestBranch(85997, 55489, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(85998, 55490, 0);

  }
  }
  {
  __CrestLoad(86001, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86000, (unsigned long )0, (long long )9);
  __CrestApply2(85999, 12, (long long )(tmp___0 == 9));
# 891 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(86002, 55492, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(86003, 55493, 0);

  }
  }
  {
  __CrestLoad(86006, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86005, (unsigned long )0, (long long )10);
  __CrestApply2(86004, 12, (long long )(tmp___0 == 10));
# 891 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(86007, 55495, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(86008, 55496, 0);

  }
  }
  {
  __CrestLoad(86011, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86010, (unsigned long )0, (long long )21);
  __CrestApply2(86009, 12, (long long )(tmp___0 == 21));
# 891 "xmltok_impl.c"
  if (tmp___0 == 21) {
    __CrestBranch(86012, 55498, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(86013, 55499, 0);

  }
  }
# 894 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 890 "xmltok_impl.c"
  mem_13 = ptr + 1;
# 890 "xmltok_impl.c"
  mem_14 = ptr + 0;
# 890 "xmltok_impl.c"
  mem_15 = ptr + 0;
  {
  __CrestLoad(86022, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)]);
  __CrestLoad(86021, (unsigned long )0, (long long )1);
  __CrestLoad(86020, (unsigned long )mem_15, (long long )*mem_15);
  __CrestLoad(86019, (unsigned long )0, (long long )31);
  __CrestApply2(86018, 5, (long long )((int )((unsigned char )*mem_15) & 31));
  __CrestApply2(86017, 8, (long long )(1 << ((int )((unsigned char )*mem_15) & 31)));
  __CrestApply2(86016, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))));
  __CrestLoad(86015, (unsigned long )0, (long long )0);
  __CrestApply2(86014, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))) == 0));
# 890 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))) == 0) {
    __CrestBranch(86023, 55504, 1);
# 890 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86025, (unsigned long )0, (long long )0);
    __CrestStore(86026, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
    __retres23 = 0;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86024, 55507, 0);

  }
  }
  }
  case_24:
  case_22:
# 890 "xmltok_impl.c"
  ptr += 2;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(86031, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86030, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86029, 18, (long long )(end - ptr));
  __CrestLoad(86028, (unsigned long )0, (long long )2L);
  __CrestApply2(86027, 16, (long long )(end - ptr < 2L));
# 890 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(86032, 55511, 1);
    __CrestLoad(86034, (unsigned long )0, (long long )-2);
    __CrestStore(86035, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
    __retres23 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86033, 55513, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86036, (unsigned long )0, (long long )0);
  __CrestStore(86037, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
  __retres23 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 2;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(86042, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86041, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86040, 18, (long long )(end - ptr));
  __CrestLoad(86039, (unsigned long )0, (long long )3L);
  __CrestApply2(86038, 16, (long long )(end - ptr < 3L));
# 890 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(86043, 55520, 1);
    __CrestLoad(86045, (unsigned long )0, (long long )-2);
    __CrestStore(86046, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
    __retres23 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86044, 55522, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86047, (unsigned long )0, (long long )0);
  __CrestStore(86048, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
  __retres23 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 3;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(86053, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86052, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86051, 18, (long long )(end - ptr));
  __CrestLoad(86050, (unsigned long )0, (long long )4L);
  __CrestApply2(86049, 16, (long long )(end - ptr < 4L));
# 890 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(86054, 55529, 1);
    __CrestLoad(86056, (unsigned long )0, (long long )-2);
    __CrestStore(86057, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
    __retres23 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86055, 55531, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86058, (unsigned long )0, (long long )0);
  __CrestStore(86059, (unsigned long )(& __retres23));
# 890 "xmltok_impl.c"
  __retres23 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 4;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_30:
  case_9:
  case_10:
  case_21:
# 892 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86060, (unsigned long )0, (long long )22);
  __CrestStore(86061, (unsigned long )(& __retres23));
# 893 "xmltok_impl.c"
  __retres23 = 22;
# 893 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 895 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86062, (unsigned long )0, (long long )0);
  __CrestStore(86063, (unsigned long )(& __retres23));
# 896 "xmltok_impl.c"
  __retres23 = 0;
# 896 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 898 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(86066, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86065, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86064, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 898 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(86067, 55548, 1);

    } else {
      __CrestBranch(86068, 55549, 0);
# 898 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 899 "xmltok_impl.c"
    mem_16 = ptr + 1;
    {
    __CrestLoad(86071, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(86070, (unsigned long )0, (long long )0);
    __CrestApply2(86069, 12, (long long )((int const )*mem_16 == 0));
# 899 "xmltok_impl.c"
    if ((int const )*mem_16 == 0) {
      __CrestBranch(86072, 55553, 1);
# 899 "xmltok_impl.c"
      mem_17 = (struct normal_encoding *)enc;
      __CrestLoad(86074, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
      __CrestStore(86075, (unsigned long )(& tmp___2));
# 899 "xmltok_impl.c"
      tmp___2 = (int )mem_17->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(86073, 55554, 0);
# 899 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 899 "xmltok_impl.c"
      mem_19 = ptr + 0;
      __CrestLoad(86076, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(86077, (unsigned long )mem_19, (long long )*mem_19);
# 899 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_18, (char )*mem_19);
      __CrestHandleReturn(86079, (long long )tmp___1);
      __CrestStore(86078, (unsigned long )(& tmp___1));
      __CrestLoad(86080, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(86081, (unsigned long )(& tmp___2));
# 899 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(86084, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86083, (unsigned long )0, (long long )29);
    __CrestApply2(86082, 12, (long long )(tmp___2 == 29));
# 900 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(86085, 55557, 1);
# 900 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(86086, 55558, 0);

    }
    }
    {
    __CrestLoad(86089, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86088, (unsigned long )0, (long long )27);
    __CrestApply2(86087, 12, (long long )(tmp___2 == 27));
# 900 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(86090, 55560, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86091, 55561, 0);

    }
    }
    {
    __CrestLoad(86094, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86093, (unsigned long )0, (long long )26);
    __CrestApply2(86092, 12, (long long )(tmp___2 == 26));
# 900 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(86095, 55563, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86096, 55564, 0);

    }
    }
    {
    __CrestLoad(86099, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86098, (unsigned long )0, (long long )25);
    __CrestApply2(86097, 12, (long long )(tmp___2 == 25));
# 900 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(86100, 55566, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86101, 55567, 0);

    }
    }
    {
    __CrestLoad(86104, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86103, (unsigned long )0, (long long )24);
    __CrestApply2(86102, 12, (long long )(tmp___2 == 24));
# 900 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(86105, 55569, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86106, 55570, 0);

    }
    }
    {
    __CrestLoad(86109, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86108, (unsigned long )0, (long long )22);
    __CrestApply2(86107, 12, (long long )(tmp___2 == 22));
# 900 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(86110, 55572, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86111, 55573, 0);

    }
    }
    {
    __CrestLoad(86114, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86113, (unsigned long )0, (long long )5);
    __CrestApply2(86112, 12, (long long )(tmp___2 == 5));
# 900 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(86115, 55575, 1);
# 900 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(86116, 55576, 0);

    }
    }
    {
    __CrestLoad(86119, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86118, (unsigned long )0, (long long )6);
    __CrestApply2(86117, 12, (long long )(tmp___2 == 6));
# 900 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(86120, 55578, 1);
# 900 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(86121, 55579, 0);

    }
    }
    {
    __CrestLoad(86124, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86123, (unsigned long )0, (long long )7);
    __CrestApply2(86122, 12, (long long )(tmp___2 == 7));
# 900 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(86125, 55581, 1);
# 900 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(86126, 55582, 0);

    }
    }
    {
    __CrestLoad(86129, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86128, (unsigned long )0, (long long )18);
    __CrestApply2(86127, 12, (long long )(tmp___2 == 18));
# 901 "xmltok_impl.c"
    if (tmp___2 == 18) {
      __CrestBranch(86130, 55584, 1);
# 901 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(86131, 55585, 0);

    }
    }
# 904 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 900 "xmltok_impl.c"
    mem_20 = ptr + 1;
# 900 "xmltok_impl.c"
    mem_21 = ptr + 0;
# 900 "xmltok_impl.c"
    mem_22 = ptr + 0;
    {
    __CrestLoad(86140, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]);
    __CrestLoad(86139, (unsigned long )0, (long long )1);
    __CrestLoad(86138, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(86137, (unsigned long )0, (long long )31);
    __CrestApply2(86136, 5, (long long )((int )((unsigned char )*mem_22) & 31));
    __CrestApply2(86135, 8, (long long )(1 << ((int )((unsigned char )*mem_22) & 31)));
    __CrestApply2(86134, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))));
    __CrestLoad(86133, (unsigned long )0, (long long )0);
    __CrestApply2(86132, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0));
# 900 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0) {
      __CrestBranch(86141, 55590, 1);
# 900 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(86143, (unsigned long )0, (long long )0);
      __CrestStore(86144, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
      __retres23 = 0;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86142, 55593, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 900 "xmltok_impl.c"
    ptr += 2;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(86149, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86148, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86147, 18, (long long )(end - ptr));
    __CrestLoad(86146, (unsigned long )0, (long long )2L);
    __CrestApply2(86145, 16, (long long )(end - ptr < 2L));
# 900 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(86150, 55597, 1);
      __CrestLoad(86152, (unsigned long )0, (long long )-2);
      __CrestStore(86153, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
      __retres23 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86151, 55599, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86154, (unsigned long )0, (long long )0);
    __CrestStore(86155, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
    __retres23 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 2;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(86160, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86159, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86158, 18, (long long )(end - ptr));
    __CrestLoad(86157, (unsigned long )0, (long long )3L);
    __CrestApply2(86156, 16, (long long )(end - ptr < 3L));
# 900 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(86161, 55606, 1);
      __CrestLoad(86163, (unsigned long )0, (long long )-2);
      __CrestStore(86164, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
      __retres23 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86162, 55608, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86165, (unsigned long )0, (long long )0);
    __CrestStore(86166, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
    __retres23 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 3;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(86171, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86170, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86169, 18, (long long )(end - ptr));
    __CrestLoad(86168, (unsigned long )0, (long long )4L);
    __CrestApply2(86167, 16, (long long )(end - ptr < 4L));
# 900 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(86172, 55615, 1);
      __CrestLoad(86174, (unsigned long )0, (long long )-2);
      __CrestStore(86175, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
      __retres23 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86173, 55617, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86176, (unsigned long )0, (long long )0);
    __CrestStore(86177, (unsigned long )(& __retres23));
# 900 "xmltok_impl.c"
    __retres23 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 4;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 902 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(86178, (unsigned long )0, (long long )28);
    __CrestStore(86179, (unsigned long )(& __retres23));
# 903 "xmltok_impl.c"
    __retres23 = 28;
# 903 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 905 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86180, (unsigned long )0, (long long )0);
    __CrestStore(86181, (unsigned long )(& __retres23));
# 906 "xmltok_impl.c"
    __retres23 = 0;
# 906 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(86182, (unsigned long )0, (long long )-1);
  __CrestStore(86183, (unsigned long )(& __retres23));
# 909 "xmltok_impl.c"
  __retres23 = -1;
  return_label:
  {
  __CrestLoad(86184, (unsigned long )(& __retres23), (long long )__retres23);
  __CrestReturn(86185);
# 883 "xmltok_impl.c"
  return (__retres23);
  }
}
}
# 912 "xmltok_impl.c"
static int little2_scanPoundName(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  struct normal_encoding *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  int __retres23 ;

  {
  __CrestCall(86186, 886);

  {
  __CrestLoad(86189, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86188, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86187, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 916 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(86190, 55634, 1);
    __CrestLoad(86192, (unsigned long )0, (long long )-1);
    __CrestStore(86193, (unsigned long )(& __retres23));
# 917 "xmltok_impl.c"
    __retres23 = -1;
# 917 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86191, 55636, 0);

  }
  }
  {
# 918 "xmltok_impl.c"
  mem_9 = ptr + 1;
  {
  __CrestLoad(86196, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(86195, (unsigned long )0, (long long )0);
  __CrestApply2(86194, 12, (long long )((int const )*mem_9 == 0));
# 918 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(86197, 55640, 1);
# 918 "xmltok_impl.c"
    mem_10 = (struct normal_encoding *)enc;
    __CrestLoad(86199, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
    __CrestStore(86200, (unsigned long )(& tmp___0));
# 918 "xmltok_impl.c"
    tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(86198, 55641, 0);
# 918 "xmltok_impl.c"
    mem_11 = ptr + 1;
# 918 "xmltok_impl.c"
    mem_12 = ptr + 0;
    __CrestLoad(86201, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(86202, (unsigned long )mem_12, (long long )*mem_12);
# 918 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
    __CrestHandleReturn(86204, (long long )tmp);
    __CrestStore(86203, (unsigned long )(& tmp));
    __CrestLoad(86205, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(86206, (unsigned long )(& tmp___0));
# 918 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(86209, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86208, (unsigned long )0, (long long )29);
  __CrestApply2(86207, 12, (long long )(tmp___0 == 29));
# 919 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(86210, 55644, 1);
# 919 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(86211, 55645, 0);

  }
  }
  {
  __CrestLoad(86214, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86213, (unsigned long )0, (long long )24);
  __CrestApply2(86212, 12, (long long )(tmp___0 == 24));
# 919 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(86215, 55647, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(86216, 55648, 0);

  }
  }
  {
  __CrestLoad(86219, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86218, (unsigned long )0, (long long )22);
  __CrestApply2(86217, 12, (long long )(tmp___0 == 22));
# 919 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(86220, 55650, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(86221, 55651, 0);

  }
  }
  {
  __CrestLoad(86224, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86223, (unsigned long )0, (long long )5);
  __CrestApply2(86222, 12, (long long )(tmp___0 == 5));
# 919 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(86225, 55653, 1);
# 919 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(86226, 55654, 0);

  }
  }
  {
  __CrestLoad(86229, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86228, (unsigned long )0, (long long )6);
  __CrestApply2(86227, 12, (long long )(tmp___0 == 6));
# 919 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(86230, 55656, 1);
# 919 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(86231, 55657, 0);

  }
  }
  {
  __CrestLoad(86234, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86233, (unsigned long )0, (long long )7);
  __CrestApply2(86232, 12, (long long )(tmp___0 == 7));
# 919 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(86235, 55659, 1);
# 919 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86236, 55660, 0);

  }
  }
# 920 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 919 "xmltok_impl.c"
  mem_13 = ptr + 1;
# 919 "xmltok_impl.c"
  mem_14 = ptr + 0;
# 919 "xmltok_impl.c"
  mem_15 = ptr + 0;
  {
  __CrestLoad(86245, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)]);
  __CrestLoad(86244, (unsigned long )0, (long long )1);
  __CrestLoad(86243, (unsigned long )mem_15, (long long )*mem_15);
  __CrestLoad(86242, (unsigned long )0, (long long )31);
  __CrestApply2(86241, 5, (long long )((int )((unsigned char )*mem_15) & 31));
  __CrestApply2(86240, 8, (long long )(1 << ((int )((unsigned char )*mem_15) & 31)));
  __CrestApply2(86239, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))));
  __CrestLoad(86238, (unsigned long )0, (long long )0);
  __CrestApply2(86237, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))) == 0));
# 919 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_13] << 3) + (int const )((int )((unsigned char )*mem_14) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_15) & 31))) == 0) {
    __CrestBranch(86246, 55665, 1);
# 919 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86248, (unsigned long )0, (long long )0);
    __CrestStore(86249, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
    __retres23 = 0;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86247, 55668, 0);

  }
  }
  }
  case_24:
  case_22:
# 919 "xmltok_impl.c"
  ptr += 2;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(86254, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86253, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86252, 18, (long long )(end - ptr));
  __CrestLoad(86251, (unsigned long )0, (long long )2L);
  __CrestApply2(86250, 16, (long long )(end - ptr < 2L));
# 919 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(86255, 55672, 1);
    __CrestLoad(86257, (unsigned long )0, (long long )-2);
    __CrestStore(86258, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
    __retres23 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86256, 55674, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86259, (unsigned long )0, (long long )0);
  __CrestStore(86260, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
  __retres23 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 2;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(86265, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86264, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86263, 18, (long long )(end - ptr));
  __CrestLoad(86262, (unsigned long )0, (long long )3L);
  __CrestApply2(86261, 16, (long long )(end - ptr < 3L));
# 919 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(86266, 55681, 1);
    __CrestLoad(86268, (unsigned long )0, (long long )-2);
    __CrestStore(86269, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
    __retres23 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86267, 55683, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86270, (unsigned long )0, (long long )0);
  __CrestStore(86271, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
  __retres23 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 3;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(86276, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86275, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86274, 18, (long long )(end - ptr));
  __CrestLoad(86273, (unsigned long )0, (long long )4L);
  __CrestApply2(86272, 16, (long long )(end - ptr < 4L));
# 919 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(86277, 55690, 1);
    __CrestLoad(86279, (unsigned long )0, (long long )-2);
    __CrestStore(86280, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
    __retres23 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86278, 55692, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86281, (unsigned long )0, (long long )0);
  __CrestStore(86282, (unsigned long )(& __retres23));
# 919 "xmltok_impl.c"
  __retres23 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 4;
# 919 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 921 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86283, (unsigned long )0, (long long )0);
  __CrestStore(86284, (unsigned long )(& __retres23));
# 922 "xmltok_impl.c"
  __retres23 = 0;
# 922 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 924 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(86287, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86286, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86285, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 924 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(86288, 55706, 1);

    } else {
      __CrestBranch(86289, 55707, 0);
# 924 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 925 "xmltok_impl.c"
    mem_16 = ptr + 1;
    {
    __CrestLoad(86292, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(86291, (unsigned long )0, (long long )0);
    __CrestApply2(86290, 12, (long long )((int const )*mem_16 == 0));
# 925 "xmltok_impl.c"
    if ((int const )*mem_16 == 0) {
      __CrestBranch(86293, 55711, 1);
# 925 "xmltok_impl.c"
      mem_17 = (struct normal_encoding *)enc;
      __CrestLoad(86295, (unsigned long )(& mem_17->type[(unsigned char )*ptr]), (long long )mem_17->type[(unsigned char )*ptr]);
      __CrestStore(86296, (unsigned long )(& tmp___2));
# 925 "xmltok_impl.c"
      tmp___2 = (int )mem_17->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(86294, 55712, 0);
# 925 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 925 "xmltok_impl.c"
      mem_19 = ptr + 0;
      __CrestLoad(86297, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(86298, (unsigned long )mem_19, (long long )*mem_19);
# 925 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_18, (char )*mem_19);
      __CrestHandleReturn(86300, (long long )tmp___1);
      __CrestStore(86299, (unsigned long )(& tmp___1));
      __CrestLoad(86301, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(86302, (unsigned long )(& tmp___2));
# 925 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(86305, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86304, (unsigned long )0, (long long )29);
    __CrestApply2(86303, 12, (long long )(tmp___2 == 29));
# 926 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(86306, 55715, 1);
# 926 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(86307, 55716, 0);

    }
    }
    {
    __CrestLoad(86310, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86309, (unsigned long )0, (long long )27);
    __CrestApply2(86308, 12, (long long )(tmp___2 == 27));
# 926 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(86311, 55718, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86312, 55719, 0);

    }
    }
    {
    __CrestLoad(86315, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86314, (unsigned long )0, (long long )26);
    __CrestApply2(86313, 12, (long long )(tmp___2 == 26));
# 926 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(86316, 55721, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86317, 55722, 0);

    }
    }
    {
    __CrestLoad(86320, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86319, (unsigned long )0, (long long )25);
    __CrestApply2(86318, 12, (long long )(tmp___2 == 25));
# 926 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(86321, 55724, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86322, 55725, 0);

    }
    }
    {
    __CrestLoad(86325, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86324, (unsigned long )0, (long long )24);
    __CrestApply2(86323, 12, (long long )(tmp___2 == 24));
# 926 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(86326, 55727, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86327, 55728, 0);

    }
    }
    {
    __CrestLoad(86330, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86329, (unsigned long )0, (long long )22);
    __CrestApply2(86328, 12, (long long )(tmp___2 == 22));
# 926 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(86331, 55730, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(86332, 55731, 0);

    }
    }
    {
    __CrestLoad(86335, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86334, (unsigned long )0, (long long )5);
    __CrestApply2(86333, 12, (long long )(tmp___2 == 5));
# 926 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(86336, 55733, 1);
# 926 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(86337, 55734, 0);

    }
    }
    {
    __CrestLoad(86340, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86339, (unsigned long )0, (long long )6);
    __CrestApply2(86338, 12, (long long )(tmp___2 == 6));
# 926 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(86341, 55736, 1);
# 926 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(86342, 55737, 0);

    }
    }
    {
    __CrestLoad(86345, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86344, (unsigned long )0, (long long )7);
    __CrestApply2(86343, 12, (long long )(tmp___2 == 7));
# 926 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(86346, 55739, 1);
# 926 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(86347, 55740, 0);

    }
    }
    {
    __CrestLoad(86350, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86349, (unsigned long )0, (long long )36);
    __CrestApply2(86348, 12, (long long )(tmp___2 == 36));
# 928 "xmltok_impl.c"
    if (tmp___2 == 36) {
      __CrestBranch(86351, 55742, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86352, 55743, 0);

    }
    }
    {
    __CrestLoad(86355, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86354, (unsigned long )0, (long long )30);
    __CrestApply2(86353, 12, (long long )(tmp___2 == 30));
# 928 "xmltok_impl.c"
    if (tmp___2 == 30) {
      __CrestBranch(86356, 55745, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86357, 55746, 0);

    }
    }
    {
    __CrestLoad(86360, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86359, (unsigned long )0, (long long )11);
    __CrestApply2(86358, 12, (long long )(tmp___2 == 11));
# 928 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(86361, 55748, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86362, 55749, 0);

    }
    }
    {
    __CrestLoad(86365, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86364, (unsigned long )0, (long long )32);
    __CrestApply2(86363, 12, (long long )(tmp___2 == 32));
# 928 "xmltok_impl.c"
    if (tmp___2 == 32) {
      __CrestBranch(86366, 55751, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86367, 55752, 0);

    }
    }
    {
    __CrestLoad(86370, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86369, (unsigned long )0, (long long )21);
    __CrestApply2(86368, 12, (long long )(tmp___2 == 21));
# 928 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(86371, 55754, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86372, 55755, 0);

    }
    }
    {
    __CrestLoad(86375, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86374, (unsigned long )0, (long long )10);
    __CrestApply2(86373, 12, (long long )(tmp___2 == 10));
# 928 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(86376, 55757, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86377, 55758, 0);

    }
    }
    {
    __CrestLoad(86380, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86379, (unsigned long )0, (long long )9);
    __CrestApply2(86378, 12, (long long )(tmp___2 == 9));
# 928 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(86381, 55760, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(86382, 55761, 0);

    }
    }
# 931 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 926 "xmltok_impl.c"
    mem_20 = ptr + 1;
# 926 "xmltok_impl.c"
    mem_21 = ptr + 0;
# 926 "xmltok_impl.c"
    mem_22 = ptr + 0;
    {
    __CrestLoad(86391, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]);
    __CrestLoad(86390, (unsigned long )0, (long long )1);
    __CrestLoad(86389, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(86388, (unsigned long )0, (long long )31);
    __CrestApply2(86387, 5, (long long )((int )((unsigned char )*mem_22) & 31));
    __CrestApply2(86386, 8, (long long )(1 << ((int )((unsigned char )*mem_22) & 31)));
    __CrestApply2(86385, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))));
    __CrestLoad(86384, (unsigned long )0, (long long )0);
    __CrestApply2(86383, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0));
# 926 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0) {
      __CrestBranch(86392, 55766, 1);
# 926 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(86394, (unsigned long )0, (long long )0);
      __CrestStore(86395, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
      __retres23 = 0;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86393, 55769, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 926 "xmltok_impl.c"
    ptr += 2;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(86400, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86399, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86398, 18, (long long )(end - ptr));
    __CrestLoad(86397, (unsigned long )0, (long long )2L);
    __CrestApply2(86396, 16, (long long )(end - ptr < 2L));
# 926 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(86401, 55773, 1);
      __CrestLoad(86403, (unsigned long )0, (long long )-2);
      __CrestStore(86404, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
      __retres23 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86402, 55775, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86405, (unsigned long )0, (long long )0);
    __CrestStore(86406, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
    __retres23 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 2;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(86411, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86410, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86409, 18, (long long )(end - ptr));
    __CrestLoad(86408, (unsigned long )0, (long long )3L);
    __CrestApply2(86407, 16, (long long )(end - ptr < 3L));
# 926 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(86412, 55782, 1);
      __CrestLoad(86414, (unsigned long )0, (long long )-2);
      __CrestStore(86415, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
      __retres23 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86413, 55784, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86416, (unsigned long )0, (long long )0);
    __CrestStore(86417, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
    __retres23 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 3;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(86422, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86421, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86420, 18, (long long )(end - ptr));
    __CrestLoad(86419, (unsigned long )0, (long long )4L);
    __CrestApply2(86418, 16, (long long )(end - ptr < 4L));
# 926 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(86423, 55791, 1);
      __CrestLoad(86425, (unsigned long )0, (long long )-2);
      __CrestStore(86426, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
      __retres23 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86424, 55793, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86427, (unsigned long )0, (long long )0);
    __CrestStore(86428, (unsigned long )(& __retres23));
# 926 "xmltok_impl.c"
    __retres23 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 4;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_36:
    case_30:
    case_11:
    case_32:
    case_21:
    case_10:
    case_9:
# 929 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86429, (unsigned long )0, (long long )20);
    __CrestStore(86430, (unsigned long )(& __retres23));
# 930 "xmltok_impl.c"
    __retres23 = 20;
# 930 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 932 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86431, (unsigned long )0, (long long )0);
    __CrestStore(86432, (unsigned long )(& __retres23));
# 933 "xmltok_impl.c"
    __retres23 = 0;
# 933 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(86433, (unsigned long )0, (long long )-20);
  __CrestStore(86434, (unsigned long )(& __retres23));
# 936 "xmltok_impl.c"
  __retres23 = -20;
  return_label:
  {
  __CrestLoad(86435, (unsigned long )(& __retres23), (long long )__retres23);
  __CrestReturn(86436);
# 912 "xmltok_impl.c"
  return (__retres23);
  }
}
}
# 939 "xmltok_impl.c"
static int little2_scanLit(int open , ENCODING const *enc , char const *ptr ,
                           char const *end , char const **nextTokPtr )
{
  int t ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_11 ;
  struct normal_encoding *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(86438, 887);
  __CrestStore(86437, (unsigned long )(& open));
  {
# 944 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(86441, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86440, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86439, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 944 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(86442, 55813, 1);

    } else {
      __CrestBranch(86443, 55814, 0);
# 944 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 945 "xmltok_impl.c"
    mem_11 = ptr + 1;
    {
    __CrestLoad(86446, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(86445, (unsigned long )0, (long long )0);
    __CrestApply2(86444, 12, (long long )((int const )*mem_11 == 0));
# 945 "xmltok_impl.c"
    if ((int const )*mem_11 == 0) {
      __CrestBranch(86447, 55818, 1);
# 945 "xmltok_impl.c"
      mem_12 = (struct normal_encoding *)enc;
      __CrestLoad(86449, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
      __CrestStore(86450, (unsigned long )(& tmp___0));
# 945 "xmltok_impl.c"
      tmp___0 = (int )mem_12->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(86448, 55819, 0);
# 945 "xmltok_impl.c"
      mem_13 = ptr + 1;
# 945 "xmltok_impl.c"
      mem_14 = ptr + 0;
      __CrestLoad(86451, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(86452, (unsigned long )mem_14, (long long )*mem_14);
# 945 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_13, (char )*mem_14);
      __CrestHandleReturn(86454, (long long )tmp);
      __CrestStore(86453, (unsigned long )(& tmp));
      __CrestLoad(86455, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(86456, (unsigned long )(& tmp___0));
# 945 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    __CrestLoad(86457, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(86458, (unsigned long )(& t));
# 945 "xmltok_impl.c"
    t = tmp___0;
    {
    {
    __CrestLoad(86461, (unsigned long )(& t), (long long )t);
    __CrestLoad(86460, (unsigned long )0, (long long )5);
    __CrestApply2(86459, 12, (long long )(t == 5));
# 947 "xmltok_impl.c"
    if (t == 5) {
      __CrestBranch(86462, 55823, 1);
# 947 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(86463, 55824, 0);

    }
    }
    {
    __CrestLoad(86466, (unsigned long )(& t), (long long )t);
    __CrestLoad(86465, (unsigned long )0, (long long )6);
    __CrestApply2(86464, 12, (long long )(t == 6));
# 947 "xmltok_impl.c"
    if (t == 6) {
      __CrestBranch(86467, 55826, 1);
# 947 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(86468, 55827, 0);

    }
    }
    {
    __CrestLoad(86471, (unsigned long )(& t), (long long )t);
    __CrestLoad(86470, (unsigned long )0, (long long )7);
    __CrestApply2(86469, 12, (long long )(t == 7));
# 947 "xmltok_impl.c"
    if (t == 7) {
      __CrestBranch(86472, 55829, 1);
# 947 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(86473, 55830, 0);

    }
    }
    {
    __CrestLoad(86476, (unsigned long )(& t), (long long )t);
    __CrestLoad(86475, (unsigned long )0, (long long )8);
    __CrestApply2(86474, 12, (long long )(t == 8));
# 947 "xmltok_impl.c"
    if (t == 8) {
      __CrestBranch(86477, 55832, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(86478, 55833, 0);

    }
    }
    {
    __CrestLoad(86481, (unsigned long )(& t), (long long )t);
    __CrestLoad(86480, (unsigned long )0, (long long )1);
    __CrestApply2(86479, 12, (long long )(t == 1));
# 947 "xmltok_impl.c"
    if (t == 1) {
      __CrestBranch(86482, 55835, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(86483, 55836, 0);

    }
    }
    {
    __CrestLoad(86486, (unsigned long )(& t), (long long )t);
    __CrestLoad(86485, (unsigned long )0, (long long )0);
    __CrestApply2(86484, 12, (long long )(t == 0));
# 947 "xmltok_impl.c"
    if (t == 0) {
      __CrestBranch(86487, 55838, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(86488, 55839, 0);

    }
    }
    {
    __CrestLoad(86491, (unsigned long )(& t), (long long )t);
    __CrestLoad(86490, (unsigned long )0, (long long )13);
    __CrestApply2(86489, 12, (long long )(t == 13));
# 949 "xmltok_impl.c"
    if (t == 13) {
      __CrestBranch(86492, 55841, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(86493, 55842, 0);

    }
    }
    {
    __CrestLoad(86496, (unsigned long )(& t), (long long )t);
    __CrestLoad(86495, (unsigned long )0, (long long )12);
    __CrestApply2(86494, 12, (long long )(t == 12));
# 949 "xmltok_impl.c"
    if (t == 12) {
      __CrestBranch(86497, 55844, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(86498, 55845, 0);

    }
    }
# 963 "xmltok_impl.c"
    goto switch_default___0;
    case_5:
    {
    __CrestLoad(86503, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86502, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86501, 18, (long long )(end - ptr));
    __CrestLoad(86500, (unsigned long )0, (long long )2L);
    __CrestApply2(86499, 16, (long long )(end - ptr < 2L));
# 947 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(86504, 55848, 1);
      __CrestLoad(86506, (unsigned long )0, (long long )-2);
      __CrestStore(86507, (unsigned long )(& __retres19));
# 947 "xmltok_impl.c"
      __retres19 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86505, 55850, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 2;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(86512, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86511, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86510, 18, (long long )(end - ptr));
    __CrestLoad(86509, (unsigned long )0, (long long )3L);
    __CrestApply2(86508, 16, (long long )(end - ptr < 3L));
# 947 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(86513, 55854, 1);
      __CrestLoad(86515, (unsigned long )0, (long long )-2);
      __CrestStore(86516, (unsigned long )(& __retres19));
# 947 "xmltok_impl.c"
      __retres19 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86514, 55856, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 3;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(86521, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(86520, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(86519, 18, (long long )(end - ptr));
    __CrestLoad(86518, (unsigned long )0, (long long )4L);
    __CrestApply2(86517, 16, (long long )(end - ptr < 4L));
# 947 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(86522, 55860, 1);
      __CrestLoad(86524, (unsigned long )0, (long long )-2);
      __CrestStore(86525, (unsigned long )(& __retres19));
# 947 "xmltok_impl.c"
      __retres19 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86523, 55862, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 4;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 947 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86526, (unsigned long )0, (long long )0);
    __CrestStore(86527, (unsigned long )(& __retres19));
# 947 "xmltok_impl.c"
    __retres19 = 0;
# 947 "xmltok_impl.c"
    goto return_label;
    case_13:
    case_12:
# 950 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(86530, (unsigned long )(& t), (long long )t);
    __CrestLoad(86529, (unsigned long )(& open), (long long )open);
    __CrestApply2(86528, 13, (long long )(t != open));
# 951 "xmltok_impl.c"
    if (t != open) {
      __CrestBranch(86531, 55870, 1);
# 952 "xmltok_impl.c"
      goto switch_break;
    } else {
      __CrestBranch(86532, 55871, 0);

    }
    }
    {
    __CrestLoad(86535, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86534, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86533, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 953 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(86536, 55873, 1);
      __CrestLoad(86538, (unsigned long )0, (long long )-27);
      __CrestStore(86539, (unsigned long )(& __retres19));
# 954 "xmltok_impl.c"
      __retres19 = -27;
# 954 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86537, 55875, 0);

    }
    }
# 955 "xmltok_impl.c"
    *nextTokPtr = ptr;
    {
# 956 "xmltok_impl.c"
    mem_15 = ptr + 1;
    {
    __CrestLoad(86542, (unsigned long )mem_15, (long long )*mem_15);
    __CrestLoad(86541, (unsigned long )0, (long long )0);
    __CrestApply2(86540, 12, (long long )((int const )*mem_15 == 0));
# 956 "xmltok_impl.c"
    if ((int const )*mem_15 == 0) {
      __CrestBranch(86543, 55880, 1);
# 956 "xmltok_impl.c"
      mem_16 = (struct normal_encoding *)enc;
      __CrestLoad(86545, (unsigned long )(& mem_16->type[(unsigned char )*ptr]), (long long )mem_16->type[(unsigned char )*ptr]);
      __CrestStore(86546, (unsigned long )(& tmp___2));
# 956 "xmltok_impl.c"
      tmp___2 = (int )mem_16->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(86544, 55881, 0);
# 956 "xmltok_impl.c"
      mem_17 = ptr + 1;
# 956 "xmltok_impl.c"
      mem_18 = ptr + 0;
      __CrestLoad(86547, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(86548, (unsigned long )mem_18, (long long )*mem_18);
# 956 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_17, (char )*mem_18);
      __CrestHandleReturn(86550, (long long )tmp___1);
      __CrestStore(86549, (unsigned long )(& tmp___1));
      __CrestLoad(86551, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(86552, (unsigned long )(& tmp___2));
# 956 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(86555, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86554, (unsigned long )0, (long long )20);
    __CrestApply2(86553, 12, (long long )(tmp___2 == 20));
# 958 "xmltok_impl.c"
    if (tmp___2 == 20) {
      __CrestBranch(86556, 55884, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86557, 55885, 0);

    }
    }
    {
    __CrestLoad(86560, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86559, (unsigned long )0, (long long )30);
    __CrestApply2(86558, 12, (long long )(tmp___2 == 30));
# 958 "xmltok_impl.c"
    if (tmp___2 == 30) {
      __CrestBranch(86561, 55887, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86562, 55888, 0);

    }
    }
    {
    __CrestLoad(86565, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86564, (unsigned long )0, (long long )11);
    __CrestApply2(86563, 12, (long long )(tmp___2 == 11));
# 958 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(86566, 55890, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86567, 55891, 0);

    }
    }
    {
    __CrestLoad(86570, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86569, (unsigned long )0, (long long )10);
    __CrestApply2(86568, 12, (long long )(tmp___2 == 10));
# 958 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(86571, 55893, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86572, 55894, 0);

    }
    }
    {
    __CrestLoad(86575, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86574, (unsigned long )0, (long long )9);
    __CrestApply2(86573, 12, (long long )(tmp___2 == 9));
# 958 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(86576, 55896, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86577, 55897, 0);

    }
    }
    {
    __CrestLoad(86580, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(86579, (unsigned long )0, (long long )21);
    __CrestApply2(86578, 12, (long long )(tmp___2 == 21));
# 958 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(86581, 55899, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(86582, 55900, 0);

    }
    }
# 960 "xmltok_impl.c"
    goto switch_default;
    case_20:
    case_30:
    case_11:
    case_10:
    case_9:
    case_21:
    __CrestLoad(86583, (unsigned long )0, (long long )27);
    __CrestStore(86584, (unsigned long )(& __retres19));
# 959 "xmltok_impl.c"
    __retres19 = 27;
# 959 "xmltok_impl.c"
    goto return_label;
    switch_default:
    __CrestLoad(86585, (unsigned long )0, (long long )0);
    __CrestStore(86586, (unsigned long )(& __retres19));
# 961 "xmltok_impl.c"
    __retres19 = 0;
# 961 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    switch_default___0:
# 964 "xmltok_impl.c"
    ptr += 2;
# 965 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(86587, (unsigned long )0, (long long )-1);
  __CrestStore(86588, (unsigned long )(& __retres19));
# 968 "xmltok_impl.c"
  __retres19 = -1;
  return_label:
  {
  __CrestLoad(86589, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(86590);
# 939 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 971 "xmltok_impl.c"
static int little2_prologTok(ENCODING const *enc , char const *ptr , char const *end ,
                             char const **nextTokPtr )
{
  int tok ;
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  char const *mem_25 ;
  struct normal_encoding *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  struct normal_encoding *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  struct normal_encoding *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  char const *mem_40 ;
  char const *mem_41 ;
  struct normal_encoding *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  char const *mem_45 ;
  char const *mem_46 ;
  char const *mem_47 ;
  char const *mem_48 ;
  char const *mem_49 ;
  char const *mem_50 ;
  char const *mem_51 ;
  struct normal_encoding *mem_52 ;
  char const *mem_53 ;
  char const *mem_54 ;
  char const *mem_55 ;
  char const *mem_56 ;
  char const *mem_57 ;
  char const *mem_58 ;
  struct normal_encoding *mem_59 ;
  char const *mem_60 ;
  char const *mem_61 ;
  char const *mem_62 ;
  char const *mem_63 ;
  char const *mem_64 ;
  int __retres65 ;

  {
  __CrestCall(86591, 888);

  {
  __CrestLoad(86594, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86593, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86592, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 976 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(86595, 55914, 1);
    __CrestLoad(86597, (unsigned long )0, (long long )-4);
    __CrestStore(86598, (unsigned long )(& __retres65));
# 977 "xmltok_impl.c"
    __retres65 = -4;
# 977 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86596, 55916, 0);

  }
  }
  __CrestLoad(86601, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(86600, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(86599, 18, (long long )(end - ptr));
  __CrestStore(86602, (unsigned long )(& n));
# 979 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(86607, (unsigned long )(& n), (long long )n);
  __CrestLoad(86606, (unsigned long )0, (long long )1UL);
  __CrestApply2(86605, 5, (long long )(n & 1UL));
  __CrestLoad(86604, (unsigned long )0, (long long )0);
  __CrestApply2(86603, 13, (long long )((n & 1UL) != 0));
# 980 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(86608, 55919, 1);
    __CrestLoad(86612, (unsigned long )(& n), (long long )n);
    __CrestLoad(86611, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(86610, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(86613, (unsigned long )(& n));
# 981 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(86616, (unsigned long )(& n), (long long )n);
    __CrestLoad(86615, (unsigned long )0, (long long )0UL);
    __CrestApply2(86614, 12, (long long )(n == 0UL));
# 982 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(86617, 55921, 1);
      __CrestLoad(86619, (unsigned long )0, (long long )-1);
      __CrestStore(86620, (unsigned long )(& __retres65));
# 983 "xmltok_impl.c"
      __retres65 = -1;
# 983 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(86618, 55923, 0);

    }
    }
# 984 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(86609, 55925, 0);

  }
  }
  {
# 987 "xmltok_impl.c"
  mem_25 = ptr + 1;
  {
  __CrestLoad(86623, (unsigned long )mem_25, (long long )*mem_25);
  __CrestLoad(86622, (unsigned long )0, (long long )0);
  __CrestApply2(86621, 12, (long long )((int const )*mem_25 == 0));
# 987 "xmltok_impl.c"
  if ((int const )*mem_25 == 0) {
    __CrestBranch(86624, 55929, 1);
# 987 "xmltok_impl.c"
    mem_26 = (struct normal_encoding *)enc;
    __CrestLoad(86626, (unsigned long )(& mem_26->type[(unsigned char )*ptr]), (long long )mem_26->type[(unsigned char )*ptr]);
    __CrestStore(86627, (unsigned long )(& tmp___0));
# 987 "xmltok_impl.c"
    tmp___0 = (int )mem_26->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(86625, 55930, 0);
# 987 "xmltok_impl.c"
    mem_27 = ptr + 1;
# 987 "xmltok_impl.c"
    mem_28 = ptr + 0;
    __CrestLoad(86628, (unsigned long )mem_27, (long long )*mem_27);
    __CrestLoad(86629, (unsigned long )mem_28, (long long )*mem_28);
# 987 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_27, (char )*mem_28);
    __CrestHandleReturn(86631, (long long )tmp);
    __CrestStore(86630, (unsigned long )(& tmp));
    __CrestLoad(86632, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(86633, (unsigned long )(& tmp___0));
# 987 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(86636, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86635, (unsigned long )0, (long long )12);
  __CrestApply2(86634, 12, (long long )(tmp___0 == 12));
# 988 "xmltok_impl.c"
  if (tmp___0 == 12) {
    __CrestBranch(86637, 55933, 1);
# 988 "xmltok_impl.c"
    goto case_12;
  } else {
    __CrestBranch(86638, 55934, 0);

  }
  }
  {
  __CrestLoad(86641, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86640, (unsigned long )0, (long long )13);
  __CrestApply2(86639, 12, (long long )(tmp___0 == 13));
# 990 "xmltok_impl.c"
  if (tmp___0 == 13) {
    __CrestBranch(86642, 55936, 1);
# 990 "xmltok_impl.c"
    goto case_13;
  } else {
    __CrestBranch(86643, 55937, 0);

  }
  }
  {
  __CrestLoad(86646, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86645, (unsigned long )0, (long long )2);
  __CrestApply2(86644, 12, (long long )(tmp___0 == 2));
# 992 "xmltok_impl.c"
  if (tmp___0 == 2) {
    __CrestBranch(86647, 55939, 1);
# 992 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(86648, 55940, 0);

  }
  }
  {
  __CrestLoad(86651, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86650, (unsigned long )0, (long long )9);
  __CrestApply2(86649, 12, (long long )(tmp___0 == 9));
# 1014 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(86652, 55942, 1);
# 1014 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(86653, 55943, 0);

  }
  }
  {
  __CrestLoad(86656, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86655, (unsigned long )0, (long long )10);
  __CrestApply2(86654, 12, (long long )(tmp___0 == 10));
# 1021 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(86657, 55945, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(86658, 55946, 0);

  }
  }
  {
  __CrestLoad(86661, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86660, (unsigned long )0, (long long )21);
  __CrestApply2(86659, 12, (long long )(tmp___0 == 21));
# 1021 "xmltok_impl.c"
  if (tmp___0 == 21) {
    __CrestBranch(86662, 55948, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(86663, 55949, 0);

  }
  }
  {
  __CrestLoad(86666, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86665, (unsigned long )0, (long long )30);
  __CrestApply2(86664, 12, (long long )(tmp___0 == 30));
# 1041 "xmltok_impl.c"
  if (tmp___0 == 30) {
    __CrestBranch(86667, 55951, 1);
# 1041 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(86668, 55952, 0);

  }
  }
  {
  __CrestLoad(86671, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86670, (unsigned long )0, (long long )35);
  __CrestApply2(86669, 12, (long long )(tmp___0 == 35));
# 1043 "xmltok_impl.c"
  if (tmp___0 == 35) {
    __CrestBranch(86672, 55954, 1);
# 1043 "xmltok_impl.c"
    goto case_35;
  } else {
    __CrestBranch(86673, 55955, 0);

  }
  }
  {
  __CrestLoad(86676, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86675, (unsigned long )0, (long long )20);
  __CrestApply2(86674, 12, (long long )(tmp___0 == 20));
# 1046 "xmltok_impl.c"
  if (tmp___0 == 20) {
    __CrestBranch(86677, 55957, 1);
# 1046 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(86678, 55958, 0);

  }
  }
  {
  __CrestLoad(86681, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86680, (unsigned long )0, (long long )4);
  __CrestApply2(86679, 12, (long long )(tmp___0 == 4));
# 1049 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(86682, 55960, 1);
# 1049 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(86683, 55961, 0);

  }
  }
  {
  __CrestLoad(86686, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86685, (unsigned long )0, (long long )31);
  __CrestApply2(86684, 12, (long long )(tmp___0 == 31));
# 1063 "xmltok_impl.c"
  if (tmp___0 == 31) {
    __CrestBranch(86687, 55963, 1);
# 1063 "xmltok_impl.c"
    goto case_31;
  } else {
    __CrestBranch(86688, 55964, 0);

  }
  }
  {
  __CrestLoad(86691, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86690, (unsigned long )0, (long long )32);
  __CrestApply2(86689, 12, (long long )(tmp___0 == 32));
# 1066 "xmltok_impl.c"
  if (tmp___0 == 32) {
    __CrestBranch(86692, 55966, 1);
# 1066 "xmltok_impl.c"
    goto case_32;
  } else {
    __CrestBranch(86693, 55967, 0);

  }
  }
  {
  __CrestLoad(86696, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86695, (unsigned long )0, (long long )36);
  __CrestApply2(86694, 12, (long long )(tmp___0 == 36));
# 1088 "xmltok_impl.c"
  if (tmp___0 == 36) {
    __CrestBranch(86697, 55969, 1);
# 1088 "xmltok_impl.c"
    goto case_36___0;
  } else {
    __CrestBranch(86698, 55970, 0);

  }
  }
  {
  __CrestLoad(86701, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86700, (unsigned long )0, (long long )11);
  __CrestApply2(86699, 12, (long long )(tmp___0 == 11));
# 1091 "xmltok_impl.c"
  if (tmp___0 == 11) {
    __CrestBranch(86702, 55972, 1);
# 1091 "xmltok_impl.c"
    goto case_11___0;
  } else {
    __CrestBranch(86703, 55973, 0);

  }
  }
  {
  __CrestLoad(86706, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86705, (unsigned long )0, (long long )19);
  __CrestApply2(86704, 12, (long long )(tmp___0 == 19));
# 1094 "xmltok_impl.c"
  if (tmp___0 == 19) {
    __CrestBranch(86707, 55975, 1);
# 1094 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(86708, 55976, 0);

  }
  }
  {
  __CrestLoad(86711, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86710, (unsigned long )0, (long long )5);
  __CrestApply2(86709, 12, (long long )(tmp___0 == 5));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(86712, 55978, 1);
# 1112 "xmltok_impl.c"
    goto case_5___0;
  } else {
    __CrestBranch(86713, 55979, 0);

  }
  }
  {
  __CrestLoad(86716, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86715, (unsigned long )0, (long long )6);
  __CrestApply2(86714, 12, (long long )(tmp___0 == 6));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(86717, 55981, 1);
# 1112 "xmltok_impl.c"
    goto case_6___0;
  } else {
    __CrestBranch(86718, 55982, 0);

  }
  }
  {
  __CrestLoad(86721, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86720, (unsigned long )0, (long long )7);
  __CrestApply2(86719, 12, (long long )(tmp___0 == 7));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(86722, 55984, 1);
# 1112 "xmltok_impl.c"
    goto case_7___0;
  } else {
    __CrestBranch(86723, 55985, 0);

  }
  }
  {
  __CrestLoad(86726, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86725, (unsigned long )0, (long long )24);
  __CrestApply2(86724, 12, (long long )(tmp___0 == 24));
# 1115 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(86727, 55987, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(86728, 55988, 0);

  }
  }
  {
  __CrestLoad(86731, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86730, (unsigned long )0, (long long )22);
  __CrestApply2(86729, 12, (long long )(tmp___0 == 22));
# 1115 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(86732, 55990, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(86733, 55991, 0);

  }
  }
  {
  __CrestLoad(86736, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86735, (unsigned long )0, (long long )23);
  __CrestApply2(86734, 12, (long long )(tmp___0 == 23));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 23) {
    __CrestBranch(86737, 55993, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(86738, 55994, 0);

  }
  }
  {
  __CrestLoad(86741, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86740, (unsigned long )0, (long long )27);
  __CrestApply2(86739, 12, (long long )(tmp___0 == 27));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 27) {
    __CrestBranch(86742, 55996, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(86743, 55997, 0);

  }
  }
  {
  __CrestLoad(86746, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86745, (unsigned long )0, (long long )26);
  __CrestApply2(86744, 12, (long long )(tmp___0 == 26));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 26) {
    __CrestBranch(86747, 55999, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(86748, 56000, 0);

  }
  }
  {
  __CrestLoad(86751, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86750, (unsigned long )0, (long long )25);
  __CrestApply2(86749, 12, (long long )(tmp___0 == 25));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 25) {
    __CrestBranch(86752, 56002, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(86753, 56003, 0);

  }
  }
  {
  __CrestLoad(86756, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(86755, (unsigned long )0, (long long )29);
  __CrestApply2(86754, 12, (long long )(tmp___0 == 29));
# 1128 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(86757, 56005, 1);
# 1128 "xmltok_impl.c"
    goto case_29___0;
  } else {
    __CrestBranch(86758, 56006, 0);

  }
  }
# 1140 "xmltok_impl.c"
  goto switch_default___0;
  case_12:
  __CrestLoad(86759, (unsigned long )0, (long long )12);
# 989 "xmltok_impl.c"
  tmp___1 = little2_scanLit(12, enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(86761, (long long )tmp___1);
  __CrestStore(86760, (unsigned long )(& tmp___1));
  __CrestLoad(86762, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(86763, (unsigned long )(& __retres65));
# 989 "xmltok_impl.c"
  __retres65 = tmp___1;
# 989 "xmltok_impl.c"
  goto return_label;
  case_13:
  __CrestLoad(86764, (unsigned long )0, (long long )13);
# 991 "xmltok_impl.c"
  tmp___2 = little2_scanLit(13, enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(86766, (long long )tmp___2);
  __CrestStore(86765, (unsigned long )(& tmp___2));
  __CrestLoad(86767, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(86768, (unsigned long )(& __retres65));
# 991 "xmltok_impl.c"
  __retres65 = tmp___2;
# 991 "xmltok_impl.c"
  goto return_label;
  case_2:
# 994 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(86771, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86770, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86769, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 995 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(86772, 56016, 1);
    __CrestLoad(86774, (unsigned long )0, (long long )-1);
    __CrestStore(86775, (unsigned long )(& __retres65));
# 996 "xmltok_impl.c"
    __retres65 = -1;
# 996 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86773, 56018, 0);

  }
  }
  {
# 997 "xmltok_impl.c"
  mem_29 = ptr + 1;
  {
  __CrestLoad(86778, (unsigned long )mem_29, (long long )*mem_29);
  __CrestLoad(86777, (unsigned long )0, (long long )0);
  __CrestApply2(86776, 12, (long long )((int const )*mem_29 == 0));
# 997 "xmltok_impl.c"
  if ((int const )*mem_29 == 0) {
    __CrestBranch(86779, 56022, 1);
# 997 "xmltok_impl.c"
    mem_30 = (struct normal_encoding *)enc;
    __CrestLoad(86781, (unsigned long )(& mem_30->type[(unsigned char )*ptr]), (long long )mem_30->type[(unsigned char )*ptr]);
    __CrestStore(86782, (unsigned long )(& tmp___4));
# 997 "xmltok_impl.c"
    tmp___4 = (int )mem_30->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(86780, 56023, 0);
# 997 "xmltok_impl.c"
    mem_31 = ptr + 1;
# 997 "xmltok_impl.c"
    mem_32 = ptr + 0;
    __CrestLoad(86783, (unsigned long )mem_31, (long long )*mem_31);
    __CrestLoad(86784, (unsigned long )mem_32, (long long )*mem_32);
# 997 "xmltok_impl.c"
    tmp___3 = unicode_byte_type((char )*mem_31, (char )*mem_32);
    __CrestHandleReturn(86786, (long long )tmp___3);
    __CrestStore(86785, (unsigned long )(& tmp___3));
    __CrestLoad(86787, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestStore(86788, (unsigned long )(& tmp___4));
# 997 "xmltok_impl.c"
    tmp___4 = tmp___3;
  }
  }
  }
  {
  {
  __CrestLoad(86791, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86790, (unsigned long )0, (long long )16);
  __CrestApply2(86789, 12, (long long )(tmp___4 == 16));
# 998 "xmltok_impl.c"
  if (tmp___4 == 16) {
    __CrestBranch(86792, 56026, 1);
# 998 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(86793, 56027, 0);

  }
  }
  {
  __CrestLoad(86796, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86795, (unsigned long )0, (long long )15);
  __CrestApply2(86794, 12, (long long )(tmp___4 == 15));
# 1000 "xmltok_impl.c"
  if (tmp___4 == 15) {
    __CrestBranch(86797, 56029, 1);
# 1000 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(86798, 56030, 0);

  }
  }
  {
  __CrestLoad(86801, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86800, (unsigned long )0, (long long )7);
  __CrestApply2(86799, 12, (long long )(tmp___4 == 7));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 7) {
    __CrestBranch(86802, 56032, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86803, 56033, 0);

  }
  }
  {
  __CrestLoad(86806, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86805, (unsigned long )0, (long long )6);
  __CrestApply2(86804, 12, (long long )(tmp___4 == 6));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 6) {
    __CrestBranch(86807, 56035, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86808, 56036, 0);

  }
  }
  {
  __CrestLoad(86811, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86810, (unsigned long )0, (long long )5);
  __CrestApply2(86809, 12, (long long )(tmp___4 == 5));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 5) {
    __CrestBranch(86812, 56038, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86813, 56039, 0);

  }
  }
  {
  __CrestLoad(86816, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86815, (unsigned long )0, (long long )29);
  __CrestApply2(86814, 12, (long long )(tmp___4 == 29));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 29) {
    __CrestBranch(86817, 56041, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86818, 56042, 0);

  }
  }
  {
  __CrestLoad(86821, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86820, (unsigned long )0, (long long )24);
  __CrestApply2(86819, 12, (long long )(tmp___4 == 24));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 24) {
    __CrestBranch(86822, 56044, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86823, 56045, 0);

  }
  }
  {
  __CrestLoad(86826, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(86825, (unsigned long )0, (long long )22);
  __CrestApply2(86824, 12, (long long )(tmp___4 == 22));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 22) {
    __CrestBranch(86827, 56047, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(86828, 56048, 0);

  }
  }
# 997 "xmltok_impl.c"
  goto switch_break___0;
  case_16:
# 999 "xmltok_impl.c"
  tmp___5 = little2_scanDecl(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(86830, (long long )tmp___5);
  __CrestStore(86829, (unsigned long )(& tmp___5));
  __CrestLoad(86831, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(86832, (unsigned long )(& __retres65));
# 999 "xmltok_impl.c"
  __retres65 = tmp___5;
# 999 "xmltok_impl.c"
  goto return_label;
  case_15:
# 1001 "xmltok_impl.c"
  tmp___6 = little2_scanPi(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(86834, (long long )tmp___6);
  __CrestStore(86833, (unsigned long )(& tmp___6));
  __CrestLoad(86835, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(86836, (unsigned long )(& __retres65));
# 1001 "xmltok_impl.c"
  __retres65 = tmp___6;
# 1001 "xmltok_impl.c"
  goto return_label;
  case_7:
  case_6:
  case_5:
  case_29:
  case_24:
  case_22:
# 1008 "xmltok_impl.c"
  *nextTokPtr = ptr - 2;
  __CrestLoad(86837, (unsigned long )0, (long long )29);
  __CrestStore(86838, (unsigned long )(& __retres65));
# 1009 "xmltok_impl.c"
  __retres65 = 29;
# 1009 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 1011 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86839, (unsigned long )0, (long long )0);
  __CrestStore(86840, (unsigned long )(& __retres65));
# 1012 "xmltok_impl.c"
  __retres65 = 0;
# 1012 "xmltok_impl.c"
  goto return_label;
  case_9:
  {
  __CrestLoad(86845, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86844, (unsigned long )0, (long long )2);
  __CrestApply2(86843, 18, (long long )((unsigned long )(ptr + 2)));
  __CrestLoad(86842, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86841, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 1015 "xmltok_impl.c"
  if ((unsigned long )(ptr + 2) == (unsigned long )end) {
    __CrestBranch(86846, 56064, 1);
# 1016 "xmltok_impl.c"
    *nextTokPtr = end;
    __CrestLoad(86848, (unsigned long )0, (long long )-15);
    __CrestStore(86849, (unsigned long )(& __retres65));
# 1018 "xmltok_impl.c"
    __retres65 = -15;
# 1018 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86847, 56067, 0);

  }
  }
  case_10:
  case_21:
  {
# 1022 "xmltok_impl.c"
  while (1) {
    while_continue: ;
# 1023 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(86852, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86851, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86850, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1024 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(86853, 56073, 1);
# 1025 "xmltok_impl.c"
      goto while_break;
    } else {
      __CrestBranch(86854, 56074, 0);

    }
    }
    {
# 1026 "xmltok_impl.c"
    mem_33 = ptr + 1;
    {
    __CrestLoad(86857, (unsigned long )mem_33, (long long )*mem_33);
    __CrestLoad(86856, (unsigned long )0, (long long )0);
    __CrestApply2(86855, 12, (long long )((int const )*mem_33 == 0));
# 1026 "xmltok_impl.c"
    if ((int const )*mem_33 == 0) {
      __CrestBranch(86858, 56078, 1);
# 1026 "xmltok_impl.c"
      mem_34 = (struct normal_encoding *)enc;
      __CrestLoad(86860, (unsigned long )(& mem_34->type[(unsigned char )*ptr]), (long long )mem_34->type[(unsigned char )*ptr]);
      __CrestStore(86861, (unsigned long )(& tmp___8));
# 1026 "xmltok_impl.c"
      tmp___8 = (int )mem_34->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(86859, 56079, 0);
# 1026 "xmltok_impl.c"
      mem_35 = ptr + 1;
# 1026 "xmltok_impl.c"
      mem_36 = ptr + 0;
      __CrestLoad(86862, (unsigned long )mem_35, (long long )*mem_35);
      __CrestLoad(86863, (unsigned long )mem_36, (long long )*mem_36);
# 1026 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_35, (char )*mem_36);
      __CrestHandleReturn(86865, (long long )tmp___7);
      __CrestStore(86864, (unsigned long )(& tmp___7));
      __CrestLoad(86866, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(86867, (unsigned long )(& tmp___8));
# 1026 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(86870, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(86869, (unsigned long )0, (long long )10);
    __CrestApply2(86868, 12, (long long )(tmp___8 == 10));
# 1027 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(86871, 56082, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(86872, 56083, 0);

    }
    }
    {
    __CrestLoad(86875, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(86874, (unsigned long )0, (long long )21);
    __CrestApply2(86873, 12, (long long )(tmp___8 == 21));
# 1027 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(86876, 56085, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(86877, 56086, 0);

    }
    }
    {
    __CrestLoad(86880, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(86879, (unsigned long )0, (long long )9);
    __CrestApply2(86878, 12, (long long )(tmp___8 == 9));
# 1029 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(86881, 56088, 1);
# 1029 "xmltok_impl.c"
      goto case_9___0;
    } else {
      __CrestBranch(86882, 56089, 0);

    }
    }
# 1034 "xmltok_impl.c"
    goto switch_default;
    case_10___0:
    case_21___0:
# 1028 "xmltok_impl.c"
    goto switch_break___1;
    case_9___0:
    {
    __CrestLoad(86887, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(86886, (unsigned long )0, (long long )2);
    __CrestApply2(86885, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(86884, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(86883, 13, (long long )((unsigned long )(ptr + 2) != (unsigned long )end));
# 1031 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) != (unsigned long )end) {
      __CrestBranch(86888, 56093, 1);
# 1032 "xmltok_impl.c"
      goto switch_break___1;
    } else {
      __CrestBranch(86889, 56094, 0);

    }
    }
    switch_default:
# 1035 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(86890, (unsigned long )0, (long long )15);
    __CrestStore(86891, (unsigned long )(& __retres65));
# 1036 "xmltok_impl.c"
    __retres65 = 15;
# 1036 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
  }
  while_break: ;
  }
# 1039 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86892, (unsigned long )0, (long long )15);
  __CrestStore(86893, (unsigned long )(& __retres65));
# 1040 "xmltok_impl.c"
  __retres65 = 15;
# 1040 "xmltok_impl.c"
  goto return_label;
  case_30:
# 1042 "xmltok_impl.c"
  tmp___9 = little2_scanPercent(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(86895, (long long )tmp___9);
  __CrestStore(86894, (unsigned long )(& tmp___9));
  __CrestLoad(86896, (unsigned long )(& tmp___9), (long long )tmp___9);
  __CrestStore(86897, (unsigned long )(& __retres65));
# 1042 "xmltok_impl.c"
  __retres65 = tmp___9;
# 1042 "xmltok_impl.c"
  goto return_label;
  case_35:
# 1044 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(86898, (unsigned long )0, (long long )38);
  __CrestStore(86899, (unsigned long )(& __retres65));
# 1045 "xmltok_impl.c"
  __retres65 = 38;
# 1045 "xmltok_impl.c"
  goto return_label;
  case_20:
# 1047 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(86900, (unsigned long )0, (long long )25);
  __CrestStore(86901, (unsigned long )(& __retres65));
# 1048 "xmltok_impl.c"
  __retres65 = 25;
# 1048 "xmltok_impl.c"
  goto return_label;
  case_4:
# 1050 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(86904, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86903, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86902, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1051 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(86905, 56114, 1);
    __CrestLoad(86907, (unsigned long )0, (long long )-26);
    __CrestStore(86908, (unsigned long )(& __retres65));
# 1052 "xmltok_impl.c"
    __retres65 = -26;
# 1052 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86906, 56116, 0);

  }
  }
  {
# 1053 "xmltok_impl.c"
  mem_37 = ptr + 1;
  {
  __CrestLoad(86911, (unsigned long )mem_37, (long long )*mem_37);
  __CrestLoad(86910, (unsigned long )0, (long long )0);
  __CrestApply2(86909, 12, (long long )((int const )*mem_37 == 0));
# 1053 "xmltok_impl.c"
  if ((int const )*mem_37 == 0) {
    __CrestBranch(86912, 56120, 1);
    {
# 1053 "xmltok_impl.c"
    mem_38 = ptr + 0;
    {
    __CrestLoad(86916, (unsigned long )mem_38, (long long )*mem_38);
    __CrestLoad(86915, (unsigned long )0, (long long )93);
    __CrestApply2(86914, 12, (long long )((int const )*mem_38 == 93));
# 1053 "xmltok_impl.c"
    if ((int const )*mem_38 == 93) {
      __CrestBranch(86917, 56123, 1);
      {
      __CrestLoad(86923, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(86922, (unsigned long )0, (long long )2);
      __CrestApply2(86921, 18, (long long )((unsigned long )(ptr + 2)));
      __CrestLoad(86920, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(86919, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 1054 "xmltok_impl.c"
      if ((unsigned long )(ptr + 2) == (unsigned long )end) {
        __CrestBranch(86924, 56124, 1);
        __CrestLoad(86926, (unsigned long )0, (long long )-1);
        __CrestStore(86927, (unsigned long )(& __retres65));
# 1055 "xmltok_impl.c"
        __retres65 = -1;
# 1055 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(86925, 56126, 0);

      }
      }
      {
# 1056 "xmltok_impl.c"
      mem_39 = (ptr + 2) + 1;
      {
      __CrestLoad(86930, (unsigned long )mem_39, (long long )*mem_39);
      __CrestLoad(86929, (unsigned long )0, (long long )0);
      __CrestApply2(86928, 12, (long long )((int const )*mem_39 == 0));
# 1056 "xmltok_impl.c"
      if ((int const )*mem_39 == 0) {
        __CrestBranch(86931, 56130, 1);
        {
# 1056 "xmltok_impl.c"
        mem_40 = (ptr + 2) + 0;
        {
        __CrestLoad(86935, (unsigned long )mem_40, (long long )*mem_40);
        __CrestLoad(86934, (unsigned long )0, (long long )62);
        __CrestApply2(86933, 12, (long long )((int const )*mem_40 == 62));
# 1056 "xmltok_impl.c"
        if ((int const )*mem_40 == 62) {
          __CrestBranch(86936, 56133, 1);
# 1057 "xmltok_impl.c"
          *nextTokPtr = ptr + 4;
          __CrestLoad(86938, (unsigned long )0, (long long )34);
          __CrestStore(86939, (unsigned long )(& __retres65));
# 1058 "xmltok_impl.c"
          __retres65 = 34;
# 1058 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(86937, 56136, 0);

        }
        }
        }
      } else {
        __CrestBranch(86932, 56137, 0);

      }
      }
      }
    } else {
      __CrestBranch(86918, 56138, 0);

    }
    }
    }
  } else {
    __CrestBranch(86913, 56139, 0);

  }
  }
  }
# 1061 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(86940, (unsigned long )0, (long long )26);
  __CrestStore(86941, (unsigned long )(& __retres65));
# 1062 "xmltok_impl.c"
  __retres65 = 26;
# 1062 "xmltok_impl.c"
  goto return_label;
  case_31:
# 1064 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(86942, (unsigned long )0, (long long )23);
  __CrestStore(86943, (unsigned long )(& __retres65));
# 1065 "xmltok_impl.c"
  __retres65 = 23;
# 1065 "xmltok_impl.c"
  goto return_label;
  case_32:
# 1067 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(86946, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(86945, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(86944, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1068 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(86947, 56148, 1);
    __CrestLoad(86949, (unsigned long )0, (long long )-24);
    __CrestStore(86950, (unsigned long )(& __retres65));
# 1069 "xmltok_impl.c"
    __retres65 = -24;
# 1069 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(86948, 56150, 0);

  }
  }
  {
# 1070 "xmltok_impl.c"
  mem_41 = ptr + 1;
  {
  __CrestLoad(86953, (unsigned long )mem_41, (long long )*mem_41);
  __CrestLoad(86952, (unsigned long )0, (long long )0);
  __CrestApply2(86951, 12, (long long )((int const )*mem_41 == 0));
# 1070 "xmltok_impl.c"
  if ((int const )*mem_41 == 0) {
    __CrestBranch(86954, 56154, 1);
# 1070 "xmltok_impl.c"
    mem_42 = (struct normal_encoding *)enc;
    __CrestLoad(86956, (unsigned long )(& mem_42->type[(unsigned char )*ptr]), (long long )mem_42->type[(unsigned char )*ptr]);
    __CrestStore(86957, (unsigned long )(& tmp___11));
# 1070 "xmltok_impl.c"
    tmp___11 = (int )mem_42->type[(unsigned char )*ptr];
  } else {
    __CrestBranch(86955, 56155, 0);
# 1070 "xmltok_impl.c"
    mem_43 = ptr + 1;
# 1070 "xmltok_impl.c"
    mem_44 = ptr + 0;
    __CrestLoad(86958, (unsigned long )mem_43, (long long )*mem_43);
    __CrestLoad(86959, (unsigned long )mem_44, (long long )*mem_44);
# 1070 "xmltok_impl.c"
    tmp___10 = unicode_byte_type((char )*mem_43, (char )*mem_44);
    __CrestHandleReturn(86961, (long long )tmp___10);
    __CrestStore(86960, (unsigned long )(& tmp___10));
    __CrestLoad(86962, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestStore(86963, (unsigned long )(& tmp___11));
# 1070 "xmltok_impl.c"
    tmp___11 = tmp___10;
  }
  }
  }
  {
  {
  __CrestLoad(86966, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86965, (unsigned long )0, (long long )33);
  __CrestApply2(86964, 12, (long long )(tmp___11 == 33));
# 1071 "xmltok_impl.c"
  if (tmp___11 == 33) {
    __CrestBranch(86967, 56158, 1);
# 1071 "xmltok_impl.c"
    goto case_33;
  } else {
    __CrestBranch(86968, 56159, 0);

  }
  }
  {
  __CrestLoad(86971, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86970, (unsigned long )0, (long long )15);
  __CrestApply2(86969, 12, (long long )(tmp___11 == 15));
# 1074 "xmltok_impl.c"
  if (tmp___11 == 15) {
    __CrestBranch(86972, 56161, 1);
# 1074 "xmltok_impl.c"
    goto case_15___0;
  } else {
    __CrestBranch(86973, 56162, 0);

  }
  }
  {
  __CrestLoad(86976, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86975, (unsigned long )0, (long long )34);
  __CrestApply2(86974, 12, (long long )(tmp___11 == 34));
# 1077 "xmltok_impl.c"
  if (tmp___11 == 34) {
    __CrestBranch(86977, 56164, 1);
# 1077 "xmltok_impl.c"
    goto case_34;
  } else {
    __CrestBranch(86978, 56165, 0);

  }
  }
  {
  __CrestLoad(86981, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86980, (unsigned long )0, (long long )32);
  __CrestApply2(86979, 12, (long long )(tmp___11 == 32));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 32) {
    __CrestBranch(86982, 56167, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(86983, 56168, 0);

  }
  }
  {
  __CrestLoad(86986, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86985, (unsigned long )0, (long long )36);
  __CrestApply2(86984, 12, (long long )(tmp___11 == 36));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 36) {
    __CrestBranch(86987, 56170, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(86988, 56171, 0);

  }
  }
  {
  __CrestLoad(86991, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86990, (unsigned long )0, (long long )35);
  __CrestApply2(86989, 12, (long long )(tmp___11 == 35));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 35) {
    __CrestBranch(86992, 56173, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(86993, 56174, 0);

  }
  }
  {
  __CrestLoad(86996, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(86995, (unsigned long )0, (long long )11);
  __CrestApply2(86994, 12, (long long )(tmp___11 == 11));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 11) {
    __CrestBranch(86997, 56176, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(86998, 56177, 0);

  }
  }
  {
  __CrestLoad(87001, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(87000, (unsigned long )0, (long long )21);
  __CrestApply2(86999, 12, (long long )(tmp___11 == 21));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 21) {
    __CrestBranch(87002, 56179, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(87003, 56180, 0);

  }
  }
  {
  __CrestLoad(87006, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(87005, (unsigned long )0, (long long )10);
  __CrestApply2(87004, 12, (long long )(tmp___11 == 10));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 10) {
    __CrestBranch(87007, 56182, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(87008, 56183, 0);

  }
  }
  {
  __CrestLoad(87011, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(87010, (unsigned long )0, (long long )9);
  __CrestApply2(87009, 12, (long long )(tmp___11 == 9));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 9) {
    __CrestBranch(87012, 56185, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(87013, 56186, 0);

  }
  }
# 1070 "xmltok_impl.c"
  goto switch_break___2;
  case_33:
# 1072 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(87014, (unsigned long )0, (long long )36);
  __CrestStore(87015, (unsigned long )(& __retres65));
# 1073 "xmltok_impl.c"
  __retres65 = 36;
# 1073 "xmltok_impl.c"
  goto return_label;
  case_15___0:
# 1075 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(87016, (unsigned long )0, (long long )35);
  __CrestStore(87017, (unsigned long )(& __retres65));
# 1076 "xmltok_impl.c"
  __retres65 = 35;
# 1076 "xmltok_impl.c"
  goto return_label;
  case_34:
# 1078 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(87018, (unsigned long )0, (long long )37);
  __CrestStore(87019, (unsigned long )(& __retres65));
# 1079 "xmltok_impl.c"
  __retres65 = 37;
# 1079 "xmltok_impl.c"
  goto return_label;
  case_32___0:
  case_36:
  case_35___0:
  case_11:
  case_21___1:
  case_10___1:
  case_9___1:
# 1083 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87020, (unsigned long )0, (long long )24);
  __CrestStore(87021, (unsigned long )(& __retres65));
# 1084 "xmltok_impl.c"
  __retres65 = 24;
# 1084 "xmltok_impl.c"
  goto return_label;
  switch_break___2: ;
  }
# 1086 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87022, (unsigned long )0, (long long )0);
  __CrestStore(87023, (unsigned long )(& __retres65));
# 1087 "xmltok_impl.c"
  __retres65 = 0;
# 1087 "xmltok_impl.c"
  goto return_label;
  case_36___0:
# 1089 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(87024, (unsigned long )0, (long long )21);
  __CrestStore(87025, (unsigned long )(& __retres65));
# 1090 "xmltok_impl.c"
  __retres65 = 21;
# 1090 "xmltok_impl.c"
  goto return_label;
  case_11___0:
# 1092 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(87026, (unsigned long )0, (long long )17);
  __CrestStore(87027, (unsigned long )(& __retres65));
# 1093 "xmltok_impl.c"
  __retres65 = 17;
# 1093 "xmltok_impl.c"
  goto return_label;
  case_19:
# 1095 "xmltok_impl.c"
  tmp___12 = little2_scanPoundName(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(87029, (long long )tmp___12);
  __CrestStore(87028, (unsigned long )(& tmp___12));
  __CrestLoad(87030, (unsigned long )(& tmp___12), (long long )tmp___12);
  __CrestStore(87031, (unsigned long )(& __retres65));
# 1095 "xmltok_impl.c"
  __retres65 = tmp___12;
# 1095 "xmltok_impl.c"
  goto return_label;
  case_5___0:
  {
  __CrestLoad(87036, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(87035, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(87034, 18, (long long )(end - ptr));
  __CrestLoad(87033, (unsigned long )0, (long long )2L);
  __CrestApply2(87032, 16, (long long )(end - ptr < 2L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(87037, 56214, 1);
    __CrestLoad(87039, (unsigned long )0, (long long )-2);
    __CrestStore(87040, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
    __retres65 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(87038, 56216, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87041, (unsigned long )0, (long long )0);
  __CrestStore(87042, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
  __retres65 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_6___0:
  {
  __CrestLoad(87047, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(87046, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(87045, 18, (long long )(end - ptr));
  __CrestLoad(87044, (unsigned long )0, (long long )3L);
  __CrestApply2(87043, 16, (long long )(end - ptr < 3L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(87048, 56221, 1);
    __CrestLoad(87050, (unsigned long )0, (long long )-2);
    __CrestStore(87051, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
    __retres65 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(87049, 56223, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87052, (unsigned long )0, (long long )0);
  __CrestStore(87053, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
  __retres65 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_7___0:
  {
  __CrestLoad(87058, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(87057, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(87056, 18, (long long )(end - ptr));
  __CrestLoad(87055, (unsigned long )0, (long long )4L);
  __CrestApply2(87054, 16, (long long )(end - ptr < 4L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(87059, 56228, 1);
    __CrestLoad(87061, (unsigned long )0, (long long )-2);
    __CrestStore(87062, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
    __retres65 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(87060, 56230, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87063, (unsigned long )0, (long long )0);
  __CrestStore(87064, (unsigned long )(& __retres65));
# 1112 "xmltok_impl.c"
  __retres65 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_24___0:
  case_22___0:
  __CrestLoad(87065, (unsigned long )0, (long long )18);
  __CrestStore(87066, (unsigned long )(& tok));
# 1116 "xmltok_impl.c"
  tok = 18;
# 1117 "xmltok_impl.c"
  ptr += 2;
# 1118 "xmltok_impl.c"
  goto switch_break;
  case_23:
  case_27:
  case_26:
  case_25:
  __CrestLoad(87067, (unsigned long )0, (long long )19);
  __CrestStore(87068, (unsigned long )(& tok));
# 1125 "xmltok_impl.c"
  tok = 19;
# 1126 "xmltok_impl.c"
  ptr += 2;
# 1127 "xmltok_impl.c"
  goto switch_break;
  case_29___0:
  {
# 1129 "xmltok_impl.c"
  mem_45 = ptr + 1;
# 1129 "xmltok_impl.c"
  mem_46 = ptr + 0;
# 1129 "xmltok_impl.c"
  mem_47 = ptr + 0;
  {
  __CrestLoad(87077, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_45] << 3) + (int const )((int )((unsigned char )*mem_46) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_45] << 3) + (int const )((int )((unsigned char )*mem_46) >> 5)]);
  __CrestLoad(87076, (unsigned long )0, (long long )1);
  __CrestLoad(87075, (unsigned long )mem_47, (long long )*mem_47);
  __CrestLoad(87074, (unsigned long )0, (long long )31);
  __CrestApply2(87073, 5, (long long )((int )((unsigned char )*mem_47) & 31));
  __CrestApply2(87072, 8, (long long )(1 << ((int )((unsigned char )*mem_47) & 31)));
  __CrestApply2(87071, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_45] << 3) + (int const )((int )((unsigned char )*mem_46) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_47) & 31))));
  __CrestLoad(87070, (unsigned long )0, (long long )0);
  __CrestApply2(87069, 13, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_45] << 3) + (int const )((int )((unsigned char )*mem_46) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_47) & 31))) != 0));
# 1129 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_45] << 3) + (int const )((int )((unsigned char )*mem_46) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_47) & 31))) != 0) {
    __CrestBranch(87078, 56241, 1);
# 1130 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(87080, (unsigned long )0, (long long )18);
    __CrestStore(87081, (unsigned long )(& tok));
# 1131 "xmltok_impl.c"
    tok = 18;
# 1132 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(87079, 56243, 0);

  }
  }
  }
  {
# 1134 "xmltok_impl.c"
  mem_48 = ptr + 1;
# 1134 "xmltok_impl.c"
  mem_49 = ptr + 0;
# 1134 "xmltok_impl.c"
  mem_50 = ptr + 0;
  {
  __CrestLoad(87090, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_48] << 3) + (int const )((int )((unsigned char )*mem_49) >> 5)]),
              (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_48] << 3) + (int const )((int )((unsigned char )*mem_49) >> 5)]);
  __CrestLoad(87089, (unsigned long )0, (long long )1);
  __CrestLoad(87088, (unsigned long )mem_50, (long long )*mem_50);
  __CrestLoad(87087, (unsigned long )0, (long long )31);
  __CrestApply2(87086, 5, (long long )((int )((unsigned char )*mem_50) & 31));
  __CrestApply2(87085, 8, (long long )(1 << ((int )((unsigned char )*mem_50) & 31)));
  __CrestApply2(87084, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_48] << 3) + (int const )((int )((unsigned char )*mem_49) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_50) & 31))));
  __CrestLoad(87083, (unsigned long )0, (long long )0);
  __CrestApply2(87082, 13, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_48] << 3) + (int const )((int )((unsigned char )*mem_49) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_50) & 31))) != 0));
# 1134 "xmltok_impl.c"
  if ((namingBitmap[((int const )namePages[(unsigned char )*mem_48] << 3) + (int const )((int )((unsigned char )*mem_49) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_50) & 31))) != 0) {
    __CrestBranch(87091, 56247, 1);
# 1135 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(87093, (unsigned long )0, (long long )19);
    __CrestStore(87094, (unsigned long )(& tok));
# 1136 "xmltok_impl.c"
    tok = 19;
# 1137 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(87092, 56249, 0);

  }
  }
  }
  switch_default___0:
# 1141 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87095, (unsigned long )0, (long long )0);
  __CrestStore(87096, (unsigned long )(& __retres65));
# 1142 "xmltok_impl.c"
  __retres65 = 0;
# 1142 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 1144 "xmltok_impl.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(87099, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87098, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87097, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1144 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(87100, 56258, 1);

    } else {
      __CrestBranch(87101, 56259, 0);
# 1144 "xmltok_impl.c"
      goto while_break___0;
    }
    }
    {
# 1145 "xmltok_impl.c"
    mem_51 = ptr + 1;
    {
    __CrestLoad(87104, (unsigned long )mem_51, (long long )*mem_51);
    __CrestLoad(87103, (unsigned long )0, (long long )0);
    __CrestApply2(87102, 12, (long long )((int const )*mem_51 == 0));
# 1145 "xmltok_impl.c"
    if ((int const )*mem_51 == 0) {
      __CrestBranch(87105, 56263, 1);
# 1145 "xmltok_impl.c"
      mem_52 = (struct normal_encoding *)enc;
      __CrestLoad(87107, (unsigned long )(& mem_52->type[(unsigned char )*ptr]), (long long )mem_52->type[(unsigned char )*ptr]);
      __CrestStore(87108, (unsigned long )(& tmp___14));
# 1145 "xmltok_impl.c"
      tmp___14 = (int )mem_52->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87106, 56264, 0);
# 1145 "xmltok_impl.c"
      mem_53 = ptr + 1;
# 1145 "xmltok_impl.c"
      mem_54 = ptr + 0;
      __CrestLoad(87109, (unsigned long )mem_53, (long long )*mem_53);
      __CrestLoad(87110, (unsigned long )mem_54, (long long )*mem_54);
# 1145 "xmltok_impl.c"
      tmp___13 = unicode_byte_type((char )*mem_53, (char )*mem_54);
      __CrestHandleReturn(87112, (long long )tmp___13);
      __CrestStore(87111, (unsigned long )(& tmp___13));
      __CrestLoad(87113, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestStore(87114, (unsigned long )(& tmp___14));
# 1145 "xmltok_impl.c"
      tmp___14 = tmp___13;
    }
    }
    }
    {
    {
    __CrestLoad(87117, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87116, (unsigned long )0, (long long )29);
    __CrestApply2(87115, 12, (long long )(tmp___14 == 29));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 29) {
      __CrestBranch(87118, 56267, 1);
# 1146 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(87119, 56268, 0);

    }
    }
    {
    __CrestLoad(87122, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87121, (unsigned long )0, (long long )27);
    __CrestApply2(87120, 12, (long long )(tmp___14 == 27));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 27) {
      __CrestBranch(87123, 56270, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(87124, 56271, 0);

    }
    }
    {
    __CrestLoad(87127, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87126, (unsigned long )0, (long long )26);
    __CrestApply2(87125, 12, (long long )(tmp___14 == 26));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 26) {
      __CrestBranch(87128, 56273, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(87129, 56274, 0);

    }
    }
    {
    __CrestLoad(87132, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87131, (unsigned long )0, (long long )25);
    __CrestApply2(87130, 12, (long long )(tmp___14 == 25));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 25) {
      __CrestBranch(87133, 56276, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(87134, 56277, 0);

    }
    }
    {
    __CrestLoad(87137, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87136, (unsigned long )0, (long long )24);
    __CrestApply2(87135, 12, (long long )(tmp___14 == 24));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 24) {
      __CrestBranch(87138, 56279, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(87139, 56280, 0);

    }
    }
    {
    __CrestLoad(87142, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87141, (unsigned long )0, (long long )22);
    __CrestApply2(87140, 12, (long long )(tmp___14 == 22));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 22) {
      __CrestBranch(87143, 56282, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(87144, 56283, 0);

    }
    }
    {
    __CrestLoad(87147, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87146, (unsigned long )0, (long long )5);
    __CrestApply2(87145, 12, (long long )(tmp___14 == 5));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 5) {
      __CrestBranch(87148, 56285, 1);
# 1146 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(87149, 56286, 0);

    }
    }
    {
    __CrestLoad(87152, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87151, (unsigned long )0, (long long )6);
    __CrestApply2(87150, 12, (long long )(tmp___14 == 6));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 6) {
      __CrestBranch(87153, 56288, 1);
# 1146 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(87154, 56289, 0);

    }
    }
    {
    __CrestLoad(87157, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87156, (unsigned long )0, (long long )7);
    __CrestApply2(87155, 12, (long long )(tmp___14 == 7));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 7) {
      __CrestBranch(87158, 56291, 1);
# 1146 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(87159, 56292, 0);

    }
    }
    {
    __CrestLoad(87162, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87161, (unsigned long )0, (long long )10);
    __CrestApply2(87160, 12, (long long )(tmp___14 == 10));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 10) {
      __CrestBranch(87163, 56294, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87164, 56295, 0);

    }
    }
    {
    __CrestLoad(87167, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87166, (unsigned long )0, (long long )9);
    __CrestApply2(87165, 12, (long long )(tmp___14 == 9));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 9) {
      __CrestBranch(87168, 56297, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87169, 56298, 0);

    }
    }
    {
    __CrestLoad(87172, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87171, (unsigned long )0, (long long )21);
    __CrestApply2(87170, 12, (long long )(tmp___14 == 21));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 21) {
      __CrestBranch(87173, 56300, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87174, 56301, 0);

    }
    }
    {
    __CrestLoad(87177, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87176, (unsigned long )0, (long long )30);
    __CrestApply2(87175, 12, (long long )(tmp___14 == 30));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 30) {
      __CrestBranch(87178, 56303, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87179, 56304, 0);

    }
    }
    {
    __CrestLoad(87182, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87181, (unsigned long )0, (long long )20);
    __CrestApply2(87180, 12, (long long )(tmp___14 == 20));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 20) {
      __CrestBranch(87183, 56306, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87184, 56307, 0);

    }
    }
    {
    __CrestLoad(87187, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87186, (unsigned long )0, (long long )36);
    __CrestApply2(87185, 12, (long long )(tmp___14 == 36));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 36) {
      __CrestBranch(87188, 56309, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87189, 56310, 0);

    }
    }
    {
    __CrestLoad(87192, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87191, (unsigned long )0, (long long )35);
    __CrestApply2(87190, 12, (long long )(tmp___14 == 35));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 35) {
      __CrestBranch(87193, 56312, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87194, 56313, 0);

    }
    }
    {
    __CrestLoad(87197, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87196, (unsigned long )0, (long long )32);
    __CrestApply2(87195, 12, (long long )(tmp___14 == 32));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 32) {
      __CrestBranch(87198, 56315, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87199, 56316, 0);

    }
    }
    {
    __CrestLoad(87202, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87201, (unsigned long )0, (long long )11);
    __CrestApply2(87200, 12, (long long )(tmp___14 == 11));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 11) {
      __CrestBranch(87203, 56318, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(87204, 56319, 0);

    }
    }
    {
    __CrestLoad(87207, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87206, (unsigned long )0, (long long )23);
    __CrestApply2(87205, 12, (long long )(tmp___14 == 23));
# 1153 "xmltok_impl.c"
    if (tmp___14 == 23) {
      __CrestBranch(87208, 56321, 1);
# 1153 "xmltok_impl.c"
      goto case_23___0;
    } else {
      __CrestBranch(87209, 56322, 0);

    }
    }
    {
    __CrestLoad(87212, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87211, (unsigned long )0, (long long )34);
    __CrestApply2(87210, 12, (long long )(tmp___14 == 34));
# 1173 "xmltok_impl.c"
    if (tmp___14 == 34) {
      __CrestBranch(87213, 56324, 1);
# 1173 "xmltok_impl.c"
      goto case_34___0;
    } else {
      __CrestBranch(87214, 56325, 0);

    }
    }
    {
    __CrestLoad(87217, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87216, (unsigned long )0, (long long )33);
    __CrestApply2(87215, 12, (long long )(tmp___14 == 33));
# 1180 "xmltok_impl.c"
    if (tmp___14 == 33) {
      __CrestBranch(87218, 56327, 1);
# 1180 "xmltok_impl.c"
      goto case_33___0;
    } else {
      __CrestBranch(87219, 56328, 0);

    }
    }
    {
    __CrestLoad(87222, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(87221, (unsigned long )0, (long long )15);
    __CrestApply2(87220, 12, (long long )(tmp___14 == 15));
# 1187 "xmltok_impl.c"
    if (tmp___14 == 15) {
      __CrestBranch(87223, 56330, 1);
# 1187 "xmltok_impl.c"
      goto case_15___1;
    } else {
      __CrestBranch(87224, 56331, 0);

    }
    }
# 1194 "xmltok_impl.c"
    goto switch_default___2;
    case_29___1:
    {
# 1146 "xmltok_impl.c"
    mem_55 = ptr + 1;
# 1146 "xmltok_impl.c"
    mem_56 = ptr + 0;
# 1146 "xmltok_impl.c"
    mem_57 = ptr + 0;
    {
    __CrestLoad(87233, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)]);
    __CrestLoad(87232, (unsigned long )0, (long long )1);
    __CrestLoad(87231, (unsigned long )mem_57, (long long )*mem_57);
    __CrestLoad(87230, (unsigned long )0, (long long )31);
    __CrestApply2(87229, 5, (long long )((int )((unsigned char )*mem_57) & 31));
    __CrestApply2(87228, 8, (long long )(1 << ((int )((unsigned char )*mem_57) & 31)));
    __CrestApply2(87227, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))));
    __CrestLoad(87226, (unsigned long )0, (long long )0);
    __CrestApply2(87225, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))) == 0));
# 1146 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))) == 0) {
      __CrestBranch(87234, 56336, 1);
# 1146 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87236, (unsigned long )0, (long long )0);
      __CrestStore(87237, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
      __retres65 = 0;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87235, 56339, 0);

    }
    }
    }
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___1:
    case_22___1:
# 1146 "xmltok_impl.c"
    ptr += 2;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_5___1:
    {
    __CrestLoad(87242, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87241, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87240, 18, (long long )(end - ptr));
    __CrestLoad(87239, (unsigned long )0, (long long )2L);
    __CrestApply2(87238, 16, (long long )(end - ptr < 2L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(87243, 56343, 1);
      __CrestLoad(87245, (unsigned long )0, (long long )-2);
      __CrestStore(87246, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
      __retres65 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87244, 56345, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87247, (unsigned long )0, (long long )0);
    __CrestStore(87248, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
    __retres65 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 2;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_6___1:
    {
    __CrestLoad(87253, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87252, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87251, 18, (long long )(end - ptr));
    __CrestLoad(87250, (unsigned long )0, (long long )3L);
    __CrestApply2(87249, 16, (long long )(end - ptr < 3L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(87254, 56352, 1);
      __CrestLoad(87256, (unsigned long )0, (long long )-2);
      __CrestStore(87257, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
      __retres65 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87255, 56354, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87258, (unsigned long )0, (long long )0);
    __CrestStore(87259, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
    __retres65 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 3;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_7___1:
    {
    __CrestLoad(87264, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87263, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87262, 18, (long long )(end - ptr));
    __CrestLoad(87261, (unsigned long )0, (long long )4L);
    __CrestApply2(87260, 16, (long long )(end - ptr < 4L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(87265, 56361, 1);
      __CrestLoad(87267, (unsigned long )0, (long long )-2);
      __CrestStore(87268, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
      __retres65 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87266, 56363, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87269, (unsigned long )0, (long long )0);
    __CrestStore(87270, (unsigned long )(& __retres65));
# 1146 "xmltok_impl.c"
    __retres65 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 4;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_10___2:
    case_9___2:
    case_21___2:
    case_30___0:
    case_20___0:
    case_36___1:
    case_35___1:
    case_32___1:
    case_11___1:
# 1150 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87271, (unsigned long )(& tok), (long long )tok);
    __CrestStore(87272, (unsigned long )(& __retres65));
# 1151 "xmltok_impl.c"
    __retres65 = tok;
# 1151 "xmltok_impl.c"
    goto return_label;
    case_23___0:
# 1154 "xmltok_impl.c"
    ptr += 2;
    {
    {
    __CrestLoad(87275, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(87274, (unsigned long )0, (long long )18);
    __CrestApply2(87273, 12, (long long )(tok == 18));
# 1156 "xmltok_impl.c"
    if (tok == 18) {
      __CrestBranch(87276, 56375, 1);
# 1156 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(87277, 56376, 0);

    }
    }
    {
    __CrestLoad(87280, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(87279, (unsigned long )0, (long long )41);
    __CrestApply2(87278, 12, (long long )(tok == 41));
# 1167 "xmltok_impl.c"
    if (tok == 41) {
      __CrestBranch(87281, 56378, 1);
# 1167 "xmltok_impl.c"
      goto case_41;
    } else {
      __CrestBranch(87282, 56379, 0);

    }
    }
# 1155 "xmltok_impl.c"
    goto switch_break___4;
    case_18:
    {
    __CrestLoad(87285, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87284, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87283, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1157 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(87286, 56382, 1);
      __CrestLoad(87288, (unsigned long )0, (long long )-1);
      __CrestStore(87289, (unsigned long )(& __retres65));
# 1158 "xmltok_impl.c"
      __retres65 = -1;
# 1158 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87287, 56384, 0);

    }
    }
    __CrestLoad(87290, (unsigned long )0, (long long )41);
    __CrestStore(87291, (unsigned long )(& tok));
# 1159 "xmltok_impl.c"
    tok = 41;
    {
# 1160 "xmltok_impl.c"
    mem_58 = ptr + 1;
    {
    __CrestLoad(87294, (unsigned long )mem_58, (long long )*mem_58);
    __CrestLoad(87293, (unsigned long )0, (long long )0);
    __CrestApply2(87292, 12, (long long )((int const )*mem_58 == 0));
# 1160 "xmltok_impl.c"
    if ((int const )*mem_58 == 0) {
      __CrestBranch(87295, 56389, 1);
# 1160 "xmltok_impl.c"
      mem_59 = (struct normal_encoding *)enc;
      __CrestLoad(87297, (unsigned long )(& mem_59->type[(unsigned char )*ptr]), (long long )mem_59->type[(unsigned char )*ptr]);
      __CrestStore(87298, (unsigned long )(& tmp___16));
# 1160 "xmltok_impl.c"
      tmp___16 = (int )mem_59->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87296, 56390, 0);
# 1160 "xmltok_impl.c"
      mem_60 = ptr + 1;
# 1160 "xmltok_impl.c"
      mem_61 = ptr + 0;
      __CrestLoad(87299, (unsigned long )mem_60, (long long )*mem_60);
      __CrestLoad(87300, (unsigned long )mem_61, (long long )*mem_61);
# 1160 "xmltok_impl.c"
      tmp___15 = unicode_byte_type((char )*mem_60, (char )*mem_61);
      __CrestHandleReturn(87302, (long long )tmp___15);
      __CrestStore(87301, (unsigned long )(& tmp___15));
      __CrestLoad(87303, (unsigned long )(& tmp___15), (long long )tmp___15);
      __CrestStore(87304, (unsigned long )(& tmp___16));
# 1160 "xmltok_impl.c"
      tmp___16 = tmp___15;
    }
    }
    }
    {
    {
    __CrestLoad(87307, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87306, (unsigned long )0, (long long )29);
    __CrestApply2(87305, 12, (long long )(tmp___16 == 29));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 29) {
      __CrestBranch(87308, 56393, 1);
# 1161 "xmltok_impl.c"
      goto case_29___2;
    } else {
      __CrestBranch(87309, 56394, 0);

    }
    }
    {
    __CrestLoad(87312, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87311, (unsigned long )0, (long long )27);
    __CrestApply2(87310, 12, (long long )(tmp___16 == 27));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 27) {
      __CrestBranch(87313, 56396, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(87314, 56397, 0);

    }
    }
    {
    __CrestLoad(87317, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87316, (unsigned long )0, (long long )26);
    __CrestApply2(87315, 12, (long long )(tmp___16 == 26));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 26) {
      __CrestBranch(87318, 56399, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(87319, 56400, 0);

    }
    }
    {
    __CrestLoad(87322, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87321, (unsigned long )0, (long long )25);
    __CrestApply2(87320, 12, (long long )(tmp___16 == 25));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 25) {
      __CrestBranch(87323, 56402, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(87324, 56403, 0);

    }
    }
    {
    __CrestLoad(87327, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87326, (unsigned long )0, (long long )24);
    __CrestApply2(87325, 12, (long long )(tmp___16 == 24));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 24) {
      __CrestBranch(87328, 56405, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(87329, 56406, 0);

    }
    }
    {
    __CrestLoad(87332, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87331, (unsigned long )0, (long long )22);
    __CrestApply2(87330, 12, (long long )(tmp___16 == 22));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 22) {
      __CrestBranch(87333, 56408, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(87334, 56409, 0);

    }
    }
    {
    __CrestLoad(87337, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87336, (unsigned long )0, (long long )5);
    __CrestApply2(87335, 12, (long long )(tmp___16 == 5));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 5) {
      __CrestBranch(87338, 56411, 1);
# 1161 "xmltok_impl.c"
      goto case_5___2;
    } else {
      __CrestBranch(87339, 56412, 0);

    }
    }
    {
    __CrestLoad(87342, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87341, (unsigned long )0, (long long )6);
    __CrestApply2(87340, 12, (long long )(tmp___16 == 6));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 6) {
      __CrestBranch(87343, 56414, 1);
# 1161 "xmltok_impl.c"
      goto case_6___2;
    } else {
      __CrestBranch(87344, 56415, 0);

    }
    }
    {
    __CrestLoad(87347, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(87346, (unsigned long )0, (long long )7);
    __CrestApply2(87345, 12, (long long )(tmp___16 == 7));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 7) {
      __CrestBranch(87348, 56417, 1);
# 1161 "xmltok_impl.c"
      goto case_7___2;
    } else {
      __CrestBranch(87349, 56418, 0);

    }
    }
# 1162 "xmltok_impl.c"
    goto switch_default___1;
    case_29___2:
    {
# 1161 "xmltok_impl.c"
    mem_62 = ptr + 1;
# 1161 "xmltok_impl.c"
    mem_63 = ptr + 0;
# 1161 "xmltok_impl.c"
    mem_64 = ptr + 0;
    {
    __CrestLoad(87358, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_62] << 3) + (int const )((int )((unsigned char )*mem_63) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_62] << 3) + (int const )((int )((unsigned char )*mem_63) >> 5)]);
    __CrestLoad(87357, (unsigned long )0, (long long )1);
    __CrestLoad(87356, (unsigned long )mem_64, (long long )*mem_64);
    __CrestLoad(87355, (unsigned long )0, (long long )31);
    __CrestApply2(87354, 5, (long long )((int )((unsigned char )*mem_64) & 31));
    __CrestApply2(87353, 8, (long long )(1 << ((int )((unsigned char )*mem_64) & 31)));
    __CrestApply2(87352, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_62] << 3) + (int const )((int )((unsigned char )*mem_63) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_64) & 31))));
    __CrestLoad(87351, (unsigned long )0, (long long )0);
    __CrestApply2(87350, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_62] << 3) + (int const )((int )((unsigned char )*mem_63) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_64) & 31))) == 0));
# 1161 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_62] << 3) + (int const )((int )((unsigned char )*mem_63) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_64) & 31))) == 0) {
      __CrestBranch(87359, 56423, 1);
# 1161 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87361, (unsigned long )0, (long long )0);
      __CrestStore(87362, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
      __retres65 = 0;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87360, 56426, 0);

    }
    }
    }
    case_27___1:
    case_26___1:
    case_25___1:
    case_24___2:
    case_22___2:
# 1161 "xmltok_impl.c"
    ptr += 2;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_5___2:
    {
    __CrestLoad(87367, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87366, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87365, 18, (long long )(end - ptr));
    __CrestLoad(87364, (unsigned long )0, (long long )2L);
    __CrestApply2(87363, 16, (long long )(end - ptr < 2L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(87368, 56430, 1);
      __CrestLoad(87370, (unsigned long )0, (long long )-2);
      __CrestStore(87371, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
      __retres65 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87369, 56432, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87372, (unsigned long )0, (long long )0);
    __CrestStore(87373, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
    __retres65 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 2;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_6___2:
    {
    __CrestLoad(87378, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87377, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87376, 18, (long long )(end - ptr));
    __CrestLoad(87375, (unsigned long )0, (long long )3L);
    __CrestApply2(87374, 16, (long long )(end - ptr < 3L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(87379, 56439, 1);
      __CrestLoad(87381, (unsigned long )0, (long long )-2);
      __CrestStore(87382, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
      __retres65 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87380, 56441, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87383, (unsigned long )0, (long long )0);
    __CrestStore(87384, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
    __retres65 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 3;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_7___2:
    {
    __CrestLoad(87389, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87388, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87387, 18, (long long )(end - ptr));
    __CrestLoad(87386, (unsigned long )0, (long long )4L);
    __CrestApply2(87385, 16, (long long )(end - ptr < 4L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(87390, 56448, 1);
      __CrestLoad(87392, (unsigned long )0, (long long )-2);
      __CrestStore(87393, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
      __retres65 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87391, 56450, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87394, (unsigned long )0, (long long )0);
    __CrestStore(87395, (unsigned long )(& __retres65));
# 1161 "xmltok_impl.c"
    __retres65 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 4;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    switch_default___1:
    __CrestLoad(87396, (unsigned long )0, (long long )19);
    __CrestStore(87397, (unsigned long )(& tok));
# 1163 "xmltok_impl.c"
    tok = 19;
# 1164 "xmltok_impl.c"
    goto switch_break___5;
    switch_break___5: ;
    }
# 1166 "xmltok_impl.c"
    goto switch_break___4;
    case_41:
    __CrestLoad(87398, (unsigned long )0, (long long )19);
    __CrestStore(87399, (unsigned long )(& tok));
# 1168 "xmltok_impl.c"
    tok = 19;
# 1169 "xmltok_impl.c"
    goto switch_break___4;
    switch_break___4: ;
    }
# 1171 "xmltok_impl.c"
    goto switch_break___3;
    case_34___0:
    {
    __CrestLoad(87402, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(87401, (unsigned long )0, (long long )19);
    __CrestApply2(87400, 12, (long long )(tok == 19));
# 1174 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(87403, 56465, 1);
# 1175 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87405, (unsigned long )0, (long long )0);
      __CrestStore(87406, (unsigned long )(& __retres65));
# 1176 "xmltok_impl.c"
      __retres65 = 0;
# 1176 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87404, 56468, 0);

    }
    }
# 1178 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(87407, (unsigned long )0, (long long )32);
    __CrestStore(87408, (unsigned long )(& __retres65));
# 1179 "xmltok_impl.c"
    __retres65 = 32;
# 1179 "xmltok_impl.c"
    goto return_label;
    case_33___0:
    {
    __CrestLoad(87411, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(87410, (unsigned long )0, (long long )19);
    __CrestApply2(87409, 12, (long long )(tok == 19));
# 1181 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(87412, 56473, 1);
# 1182 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87414, (unsigned long )0, (long long )0);
      __CrestStore(87415, (unsigned long )(& __retres65));
# 1183 "xmltok_impl.c"
      __retres65 = 0;
# 1183 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87413, 56476, 0);

    }
    }
# 1185 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(87416, (unsigned long )0, (long long )31);
    __CrestStore(87417, (unsigned long )(& __retres65));
# 1186 "xmltok_impl.c"
    __retres65 = 31;
# 1186 "xmltok_impl.c"
    goto return_label;
    case_15___1:
    {
    __CrestLoad(87420, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(87419, (unsigned long )0, (long long )19);
    __CrestApply2(87418, 12, (long long )(tok == 19));
# 1188 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(87421, 56481, 1);
# 1189 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87423, (unsigned long )0, (long long )0);
      __CrestStore(87424, (unsigned long )(& __retres65));
# 1190 "xmltok_impl.c"
      __retres65 = 0;
# 1190 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87422, 56484, 0);

    }
    }
# 1192 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(87425, (unsigned long )0, (long long )30);
    __CrestStore(87426, (unsigned long )(& __retres65));
# 1193 "xmltok_impl.c"
    __retres65 = 30;
# 1193 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 1195 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87427, (unsigned long )0, (long long )0);
    __CrestStore(87428, (unsigned long )(& __retres65));
# 1196 "xmltok_impl.c"
    __retres65 = 0;
# 1196 "xmltok_impl.c"
    goto return_label;
    switch_break___3: ;
    }
  }
  while_break___0: ;
  }
  __CrestLoad(87430, (unsigned long )(& tok), (long long )tok);
  __CrestApply1(87429, 19, (long long )(- tok));
  __CrestStore(87431, (unsigned long )(& __retres65));
# 1199 "xmltok_impl.c"
  __retres65 = - tok;
  return_label:
  {
  __CrestLoad(87432, (unsigned long )(& __retres65), (long long )__retres65);
  __CrestReturn(87433);
# 971 "xmltok_impl.c"
  return (__retres65);
  }
}
}
# 1202 "xmltok_impl.c"
static int little2_attributeValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                                     char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_11 ;
  struct normal_encoding *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(87434, 889);

  {
  __CrestLoad(87437, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(87436, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(87435, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1207 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(87438, 56496, 1);
    __CrestLoad(87440, (unsigned long )0, (long long )-4);
    __CrestStore(87441, (unsigned long )(& __retres19));
# 1208 "xmltok_impl.c"
    __retres19 = -4;
# 1208 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(87439, 56498, 0);

  }
  }
# 1209 "xmltok_impl.c"
  start = ptr;
  {
# 1210 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(87444, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87443, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87442, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1210 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(87445, 56504, 1);

    } else {
      __CrestBranch(87446, 56505, 0);
# 1210 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1211 "xmltok_impl.c"
    mem_11 = ptr + 1;
    {
    __CrestLoad(87449, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(87448, (unsigned long )0, (long long )0);
    __CrestApply2(87447, 12, (long long )((int const )*mem_11 == 0));
# 1211 "xmltok_impl.c"
    if ((int const )*mem_11 == 0) {
      __CrestBranch(87450, 56509, 1);
# 1211 "xmltok_impl.c"
      mem_12 = (struct normal_encoding *)enc;
      __CrestLoad(87452, (unsigned long )(& mem_12->type[(unsigned char )*ptr]), (long long )mem_12->type[(unsigned char )*ptr]);
      __CrestStore(87453, (unsigned long )(& tmp___0));
# 1211 "xmltok_impl.c"
      tmp___0 = (int )mem_12->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87451, 56510, 0);
# 1211 "xmltok_impl.c"
      mem_13 = ptr + 1;
# 1211 "xmltok_impl.c"
      mem_14 = ptr + 0;
      __CrestLoad(87454, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(87455, (unsigned long )mem_14, (long long )*mem_14);
# 1211 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_13, (char )*mem_14);
      __CrestHandleReturn(87457, (long long )tmp);
      __CrestStore(87456, (unsigned long )(& tmp));
      __CrestLoad(87458, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(87459, (unsigned long )(& tmp___0));
# 1211 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(87462, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87461, (unsigned long )0, (long long )5);
    __CrestApply2(87460, 12, (long long )(tmp___0 == 5));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(87463, 56513, 1);
# 1214 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(87464, 56514, 0);

    }
    }
    {
    __CrestLoad(87467, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87466, (unsigned long )0, (long long )6);
    __CrestApply2(87465, 12, (long long )(tmp___0 == 6));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(87468, 56516, 1);
# 1214 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(87469, 56517, 0);

    }
    }
    {
    __CrestLoad(87472, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87471, (unsigned long )0, (long long )7);
    __CrestApply2(87470, 12, (long long )(tmp___0 == 7));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(87473, 56519, 1);
# 1214 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(87474, 56520, 0);

    }
    }
    {
    __CrestLoad(87477, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87476, (unsigned long )0, (long long )3);
    __CrestApply2(87475, 12, (long long )(tmp___0 == 3));
# 1216 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(87478, 56522, 1);
# 1216 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(87479, 56523, 0);

    }
    }
    {
    __CrestLoad(87482, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87481, (unsigned long )0, (long long )2);
    __CrestApply2(87480, 12, (long long )(tmp___0 == 2));
# 1221 "xmltok_impl.c"
    if (tmp___0 == 2) {
      __CrestBranch(87483, 56525, 1);
# 1221 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(87484, 56526, 0);

    }
    }
    {
    __CrestLoad(87487, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87486, (unsigned long )0, (long long )10);
    __CrestApply2(87485, 12, (long long )(tmp___0 == 10));
# 1225 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(87488, 56528, 1);
# 1225 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(87489, 56529, 0);

    }
    }
    {
    __CrestLoad(87492, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87491, (unsigned long )0, (long long )9);
    __CrestApply2(87490, 12, (long long )(tmp___0 == 9));
# 1232 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(87493, 56531, 1);
# 1232 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(87494, 56532, 0);

    }
    }
    {
    __CrestLoad(87497, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87496, (unsigned long )0, (long long )21);
    __CrestApply2(87495, 12, (long long )(tmp___0 == 21));
# 1244 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(87498, 56534, 1);
# 1244 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(87499, 56535, 0);

    }
    }
# 1251 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1214 "xmltok_impl.c"
    ptr += 2;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1214 "xmltok_impl.c"
    ptr += 3;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1214 "xmltok_impl.c"
    ptr += 4;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(87502, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87501, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87500, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1217 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87503, 56544, 1);
# 1218 "xmltok_impl.c"
      tmp___1 = little2_scanRef(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(87506, (long long )tmp___1);
      __CrestStore(87505, (unsigned long )(& tmp___1));
      __CrestLoad(87507, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(87508, (unsigned long )(& __retres19));
# 1218 "xmltok_impl.c"
      __retres19 = tmp___1;
# 1218 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87504, 56547, 0);

    }
    }
# 1219 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87509, (unsigned long )0, (long long )6);
    __CrestStore(87510, (unsigned long )(& __retres19));
# 1220 "xmltok_impl.c"
    __retres19 = 6;
# 1220 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1223 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87511, (unsigned long )0, (long long )0);
    __CrestStore(87512, (unsigned long )(& __retres19));
# 1224 "xmltok_impl.c"
    __retres19 = 0;
# 1224 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(87515, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87514, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87513, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1226 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87516, 56555, 1);
# 1227 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(87518, (unsigned long )0, (long long )7);
      __CrestStore(87519, (unsigned long )(& __retres19));
# 1228 "xmltok_impl.c"
      __retres19 = 7;
# 1228 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87517, 56558, 0);

    }
    }
# 1230 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87520, (unsigned long )0, (long long )6);
    __CrestStore(87521, (unsigned long )(& __retres19));
# 1231 "xmltok_impl.c"
    __retres19 = 6;
# 1231 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(87524, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87523, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87522, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1233 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87525, 56563, 1);
# 1234 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(87529, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(87528, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(87527, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1235 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(87530, 56565, 1);
        __CrestLoad(87532, (unsigned long )0, (long long )-3);
        __CrestStore(87533, (unsigned long )(& __retres19));
# 1236 "xmltok_impl.c"
        __retres19 = -3;
# 1236 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(87531, 56567, 0);

      }
      }
      {
# 1237 "xmltok_impl.c"
      mem_15 = ptr + 1;
      {
      __CrestLoad(87536, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(87535, (unsigned long )0, (long long )0);
      __CrestApply2(87534, 12, (long long )((int const )*mem_15 == 0));
# 1237 "xmltok_impl.c"
      if ((int const )*mem_15 == 0) {
        __CrestBranch(87537, 56571, 1);
# 1237 "xmltok_impl.c"
        mem_16 = (struct normal_encoding *)enc;
        __CrestLoad(87539, (unsigned long )(& mem_16->type[(unsigned char )*ptr]),
                    (long long )mem_16->type[(unsigned char )*ptr]);
        __CrestStore(87540, (unsigned long )(& tmp___3));
# 1237 "xmltok_impl.c"
        tmp___3 = (int )mem_16->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(87538, 56572, 0);
# 1237 "xmltok_impl.c"
        mem_17 = ptr + 1;
# 1237 "xmltok_impl.c"
        mem_18 = ptr + 0;
        __CrestLoad(87541, (unsigned long )mem_17, (long long )*mem_17);
        __CrestLoad(87542, (unsigned long )mem_18, (long long )*mem_18);
# 1237 "xmltok_impl.c"
        tmp___2 = unicode_byte_type((char )*mem_17, (char )*mem_18);
        __CrestHandleReturn(87544, (long long )tmp___2);
        __CrestStore(87543, (unsigned long )(& tmp___2));
        __CrestLoad(87545, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(87546, (unsigned long )(& tmp___3));
# 1237 "xmltok_impl.c"
        tmp___3 = tmp___2;
      }
      }
      }
      {
      __CrestLoad(87549, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(87548, (unsigned long )0, (long long )10);
      __CrestApply2(87547, 12, (long long )(tmp___3 == 10));
# 1237 "xmltok_impl.c"
      if (tmp___3 == 10) {
        __CrestBranch(87550, 56574, 1);
# 1238 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(87551, 56575, 0);

      }
      }
# 1239 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87552, (unsigned long )0, (long long )7);
      __CrestStore(87553, (unsigned long )(& __retres19));
# 1240 "xmltok_impl.c"
      __retres19 = 7;
# 1240 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87526, 56579, 0);

    }
    }
# 1242 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87554, (unsigned long )0, (long long )6);
    __CrestStore(87555, (unsigned long )(& __retres19));
# 1243 "xmltok_impl.c"
    __retres19 = 6;
# 1243 "xmltok_impl.c"
    goto return_label;
    case_21:
    {
    __CrestLoad(87558, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87557, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87556, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1245 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87559, 56584, 1);
# 1246 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(87561, (unsigned long )0, (long long )39);
      __CrestStore(87562, (unsigned long )(& __retres19));
# 1247 "xmltok_impl.c"
      __retres19 = 39;
# 1247 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87560, 56587, 0);

    }
    }
# 1249 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87563, (unsigned long )0, (long long )6);
    __CrestStore(87564, (unsigned long )(& __retres19));
# 1250 "xmltok_impl.c"
    __retres19 = 6;
# 1250 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1252 "xmltok_impl.c"
    ptr += 2;
# 1253 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
# 1256 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87565, (unsigned long )0, (long long )6);
  __CrestStore(87566, (unsigned long )(& __retres19));
# 1257 "xmltok_impl.c"
  __retres19 = 6;
  return_label:
  {
  __CrestLoad(87567, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(87568);
# 1202 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 1260 "xmltok_impl.c"
static int little2_entityValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                                  char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tok ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char const *mem_14 ;
  struct normal_encoding *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  int __retres22 ;

  {
  __CrestCall(87569, 890);

  {
  __CrestLoad(87572, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(87571, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(87570, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1265 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(87573, 56599, 1);
    __CrestLoad(87575, (unsigned long )0, (long long )-4);
    __CrestStore(87576, (unsigned long )(& __retres22));
# 1266 "xmltok_impl.c"
    __retres22 = -4;
# 1266 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(87574, 56601, 0);

  }
  }
# 1267 "xmltok_impl.c"
  start = ptr;
  {
# 1268 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(87579, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87578, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87577, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1268 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(87580, 56607, 1);

    } else {
      __CrestBranch(87581, 56608, 0);
# 1268 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1269 "xmltok_impl.c"
    mem_14 = ptr + 1;
    {
    __CrestLoad(87584, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(87583, (unsigned long )0, (long long )0);
    __CrestApply2(87582, 12, (long long )((int const )*mem_14 == 0));
# 1269 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(87585, 56612, 1);
# 1269 "xmltok_impl.c"
      mem_15 = (struct normal_encoding *)enc;
      __CrestLoad(87587, (unsigned long )(& mem_15->type[(unsigned char )*ptr]), (long long )mem_15->type[(unsigned char )*ptr]);
      __CrestStore(87588, (unsigned long )(& tmp___0));
# 1269 "xmltok_impl.c"
      tmp___0 = (int )mem_15->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87586, 56613, 0);
# 1269 "xmltok_impl.c"
      mem_16 = ptr + 1;
# 1269 "xmltok_impl.c"
      mem_17 = ptr + 0;
      __CrestLoad(87589, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(87590, (unsigned long )mem_17, (long long )*mem_17);
# 1269 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_16, (char )*mem_17);
      __CrestHandleReturn(87592, (long long )tmp);
      __CrestStore(87591, (unsigned long )(& tmp));
      __CrestLoad(87593, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(87594, (unsigned long )(& tmp___0));
# 1269 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(87597, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87596, (unsigned long )0, (long long )5);
    __CrestApply2(87595, 12, (long long )(tmp___0 == 5));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(87598, 56616, 1);
# 1272 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(87599, 56617, 0);

    }
    }
    {
    __CrestLoad(87602, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87601, (unsigned long )0, (long long )6);
    __CrestApply2(87600, 12, (long long )(tmp___0 == 6));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(87603, 56619, 1);
# 1272 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(87604, 56620, 0);

    }
    }
    {
    __CrestLoad(87607, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87606, (unsigned long )0, (long long )7);
    __CrestApply2(87605, 12, (long long )(tmp___0 == 7));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(87608, 56622, 1);
# 1272 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(87609, 56623, 0);

    }
    }
    {
    __CrestLoad(87612, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87611, (unsigned long )0, (long long )3);
    __CrestApply2(87610, 12, (long long )(tmp___0 == 3));
# 1274 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(87613, 56625, 1);
# 1274 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(87614, 56626, 0);

    }
    }
    {
    __CrestLoad(87617, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87616, (unsigned long )0, (long long )30);
    __CrestApply2(87615, 12, (long long )(tmp___0 == 30));
# 1279 "xmltok_impl.c"
    if (tmp___0 == 30) {
      __CrestBranch(87618, 56628, 1);
# 1279 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(87619, 56629, 0);

    }
    }
    {
    __CrestLoad(87622, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87621, (unsigned long )0, (long long )10);
    __CrestApply2(87620, 12, (long long )(tmp___0 == 10));
# 1287 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(87623, 56631, 1);
# 1287 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(87624, 56632, 0);

    }
    }
    {
    __CrestLoad(87627, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87626, (unsigned long )0, (long long )9);
    __CrestApply2(87625, 12, (long long )(tmp___0 == 9));
# 1294 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(87628, 56634, 1);
# 1294 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(87629, 56635, 0);

    }
    }
# 1306 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1272 "xmltok_impl.c"
    ptr += 2;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1272 "xmltok_impl.c"
    ptr += 3;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1272 "xmltok_impl.c"
    ptr += 4;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(87632, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87631, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87630, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1275 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87633, 56644, 1);
# 1276 "xmltok_impl.c"
      tmp___1 = little2_scanRef(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(87636, (long long )tmp___1);
      __CrestStore(87635, (unsigned long )(& tmp___1));
      __CrestLoad(87637, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(87638, (unsigned long )(& __retres22));
# 1276 "xmltok_impl.c"
      __retres22 = tmp___1;
# 1276 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87634, 56647, 0);

    }
    }
# 1277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87639, (unsigned long )0, (long long )6);
    __CrestStore(87640, (unsigned long )(& __retres22));
# 1278 "xmltok_impl.c"
    __retres22 = 6;
# 1278 "xmltok_impl.c"
    goto return_label;
    case_30:
    {
    __CrestLoad(87643, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87642, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87641, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1280 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87644, 56652, 1);
# 1281 "xmltok_impl.c"
      tmp___2 = little2_scanPercent(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(87647, (long long )tmp___2);
      __CrestStore(87646, (unsigned long )(& tmp___2));
      __CrestLoad(87648, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(87649, (unsigned long )(& tok));
# 1281 "xmltok_impl.c"
      tok = tmp___2;
      {
      __CrestLoad(87652, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(87651, (unsigned long )0, (long long )22);
      __CrestApply2(87650, 12, (long long )(tok == 22));
# 1283 "xmltok_impl.c"
      if (tok == 22) {
        __CrestBranch(87653, 56654, 1);
        __CrestLoad(87655, (unsigned long )0, (long long )0);
        __CrestStore(87656, (unsigned long )(& tmp___3));
# 1283 "xmltok_impl.c"
        tmp___3 = 0;
      } else {
        __CrestBranch(87654, 56655, 0);
        __CrestLoad(87657, (unsigned long )(& tok), (long long )tok);
        __CrestStore(87658, (unsigned long )(& tmp___3));
# 1283 "xmltok_impl.c"
        tmp___3 = tok;
      }
      }
      __CrestLoad(87659, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestStore(87660, (unsigned long )(& __retres22));
# 1283 "xmltok_impl.c"
      __retres22 = tmp___3;
# 1283 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87645, 56658, 0);

    }
    }
# 1285 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87661, (unsigned long )0, (long long )6);
    __CrestStore(87662, (unsigned long )(& __retres22));
# 1286 "xmltok_impl.c"
    __retres22 = 6;
# 1286 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(87665, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87664, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87663, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1288 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87666, 56663, 1);
# 1289 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(87668, (unsigned long )0, (long long )7);
      __CrestStore(87669, (unsigned long )(& __retres22));
# 1290 "xmltok_impl.c"
      __retres22 = 7;
# 1290 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87667, 56666, 0);

    }
    }
# 1292 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87670, (unsigned long )0, (long long )6);
    __CrestStore(87671, (unsigned long )(& __retres22));
# 1293 "xmltok_impl.c"
    __retres22 = 6;
# 1293 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(87674, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87673, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(87672, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1295 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(87675, 56671, 1);
# 1296 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(87679, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(87678, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(87677, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1297 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(87680, 56673, 1);
        __CrestLoad(87682, (unsigned long )0, (long long )-3);
        __CrestStore(87683, (unsigned long )(& __retres22));
# 1298 "xmltok_impl.c"
        __retres22 = -3;
# 1298 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(87681, 56675, 0);

      }
      }
      {
# 1299 "xmltok_impl.c"
      mem_18 = ptr + 1;
      {
      __CrestLoad(87686, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(87685, (unsigned long )0, (long long )0);
      __CrestApply2(87684, 12, (long long )((int const )*mem_18 == 0));
# 1299 "xmltok_impl.c"
      if ((int const )*mem_18 == 0) {
        __CrestBranch(87687, 56679, 1);
# 1299 "xmltok_impl.c"
        mem_19 = (struct normal_encoding *)enc;
        __CrestLoad(87689, (unsigned long )(& mem_19->type[(unsigned char )*ptr]),
                    (long long )mem_19->type[(unsigned char )*ptr]);
        __CrestStore(87690, (unsigned long )(& tmp___5));
# 1299 "xmltok_impl.c"
        tmp___5 = (int )mem_19->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(87688, 56680, 0);
# 1299 "xmltok_impl.c"
        mem_20 = ptr + 1;
# 1299 "xmltok_impl.c"
        mem_21 = ptr + 0;
        __CrestLoad(87691, (unsigned long )mem_20, (long long )*mem_20);
        __CrestLoad(87692, (unsigned long )mem_21, (long long )*mem_21);
# 1299 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_20, (char )*mem_21);
        __CrestHandleReturn(87694, (long long )tmp___4);
        __CrestStore(87693, (unsigned long )(& tmp___4));
        __CrestLoad(87695, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(87696, (unsigned long )(& tmp___5));
# 1299 "xmltok_impl.c"
        tmp___5 = tmp___4;
      }
      }
      }
      {
      __CrestLoad(87699, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(87698, (unsigned long )0, (long long )10);
      __CrestApply2(87697, 12, (long long )(tmp___5 == 10));
# 1299 "xmltok_impl.c"
      if (tmp___5 == 10) {
        __CrestBranch(87700, 56682, 1);
# 1300 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(87701, 56683, 0);

      }
      }
# 1301 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(87702, (unsigned long )0, (long long )7);
      __CrestStore(87703, (unsigned long )(& __retres22));
# 1302 "xmltok_impl.c"
      __retres22 = 7;
# 1302 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87676, 56687, 0);

    }
    }
# 1304 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87704, (unsigned long )0, (long long )6);
    __CrestStore(87705, (unsigned long )(& __retres22));
# 1305 "xmltok_impl.c"
    __retres22 = 6;
# 1305 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1307 "xmltok_impl.c"
    ptr += 2;
# 1308 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
# 1311 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(87706, (unsigned long )0, (long long )6);
  __CrestStore(87707, (unsigned long )(& __retres22));
# 1312 "xmltok_impl.c"
  __retres22 = 6;
  return_label:
  {
  __CrestLoad(87708, (unsigned long )(& __retres22), (long long )__retres22);
  __CrestReturn(87709);
# 1260 "xmltok_impl.c"
  return (__retres22);
  }
}
}
# 1317 "xmltok_impl.c"
static int little2_ignoreSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                    char const **nextTokPtr )
{
  int level ;
  size_t n ;
  int tmp ;
  int tmp___0 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  int __retres21 ;

  {
  __CrestCall(87710, 891);

  __CrestLoad(87711, (unsigned long )0, (long long )0);
  __CrestStore(87712, (unsigned long )(& level));
# 1321 "xmltok_impl.c"
  level = 0;
  __CrestLoad(87715, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(87714, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(87713, 18, (long long )(end - ptr));
  __CrestStore(87716, (unsigned long )(& n));
# 1323 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(87721, (unsigned long )(& n), (long long )n);
  __CrestLoad(87720, (unsigned long )0, (long long )1UL);
  __CrestApply2(87719, 5, (long long )(n & 1UL));
  __CrestLoad(87718, (unsigned long )0, (long long )0);
  __CrestApply2(87717, 13, (long long )((n & 1UL) != 0));
# 1324 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(87722, 56700, 1);
    __CrestLoad(87726, (unsigned long )(& n), (long long )n);
    __CrestLoad(87725, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(87724, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(87727, (unsigned long )(& n));
# 1325 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
# 1326 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(87723, 56701, 0);

  }
  }
  {
# 1329 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(87730, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87729, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87728, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1329 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(87731, 56706, 1);

    } else {
      __CrestBranch(87732, 56707, 0);
# 1329 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1330 "xmltok_impl.c"
    mem_9 = ptr + 1;
    {
    __CrestLoad(87735, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(87734, (unsigned long )0, (long long )0);
    __CrestApply2(87733, 12, (long long )((int const )*mem_9 == 0));
# 1330 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(87736, 56711, 1);
# 1330 "xmltok_impl.c"
      mem_10 = (struct normal_encoding *)enc;
      __CrestLoad(87738, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
      __CrestStore(87739, (unsigned long )(& tmp___0));
# 1330 "xmltok_impl.c"
      tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87737, 56712, 0);
# 1330 "xmltok_impl.c"
      mem_11 = ptr + 1;
# 1330 "xmltok_impl.c"
      mem_12 = ptr + 0;
      __CrestLoad(87740, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(87741, (unsigned long )mem_12, (long long )*mem_12);
# 1330 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
      __CrestHandleReturn(87743, (long long )tmp);
      __CrestStore(87742, (unsigned long )(& tmp));
      __CrestLoad(87744, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(87745, (unsigned long )(& tmp___0));
# 1330 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(87748, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87747, (unsigned long )0, (long long )5);
    __CrestApply2(87746, 12, (long long )(tmp___0 == 5));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(87749, 56715, 1);
# 1331 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(87750, 56716, 0);

    }
    }
    {
    __CrestLoad(87753, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87752, (unsigned long )0, (long long )6);
    __CrestApply2(87751, 12, (long long )(tmp___0 == 6));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(87754, 56718, 1);
# 1331 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(87755, 56719, 0);

    }
    }
    {
    __CrestLoad(87758, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87757, (unsigned long )0, (long long )7);
    __CrestApply2(87756, 12, (long long )(tmp___0 == 7));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(87759, 56721, 1);
# 1331 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(87760, 56722, 0);

    }
    }
    {
    __CrestLoad(87763, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87762, (unsigned long )0, (long long )8);
    __CrestApply2(87761, 12, (long long )(tmp___0 == 8));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 8) {
      __CrestBranch(87764, 56724, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(87765, 56725, 0);

    }
    }
    {
    __CrestLoad(87768, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87767, (unsigned long )0, (long long )1);
    __CrestApply2(87766, 12, (long long )(tmp___0 == 1));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 1) {
      __CrestBranch(87769, 56727, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(87770, 56728, 0);

    }
    }
    {
    __CrestLoad(87773, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87772, (unsigned long )0, (long long )0);
    __CrestApply2(87771, 12, (long long )(tmp___0 == 0));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 0) {
      __CrestBranch(87774, 56730, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(87775, 56731, 0);

    }
    }
    {
    __CrestLoad(87778, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87777, (unsigned long )0, (long long )2);
    __CrestApply2(87776, 12, (long long )(tmp___0 == 2));
# 1332 "xmltok_impl.c"
    if (tmp___0 == 2) {
      __CrestBranch(87779, 56733, 1);
# 1332 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(87780, 56734, 0);

    }
    }
    {
    __CrestLoad(87783, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87782, (unsigned long )0, (long long )4);
    __CrestApply2(87781, 12, (long long )(tmp___0 == 4));
# 1344 "xmltok_impl.c"
    if (tmp___0 == 4) {
      __CrestBranch(87784, 56736, 1);
# 1344 "xmltok_impl.c"
      goto case_4;
    } else {
      __CrestBranch(87785, 56737, 0);

    }
    }
# 1360 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(87790, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87789, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87788, 18, (long long )(end - ptr));
    __CrestLoad(87787, (unsigned long )0, (long long )2L);
    __CrestApply2(87786, 16, (long long )(end - ptr < 2L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(87791, 56740, 1);
      __CrestLoad(87793, (unsigned long )0, (long long )-2);
      __CrestStore(87794, (unsigned long )(& __retres21));
# 1331 "xmltok_impl.c"
      __retres21 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87792, 56742, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 2;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(87799, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87798, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87797, 18, (long long )(end - ptr));
    __CrestLoad(87796, (unsigned long )0, (long long )3L);
    __CrestApply2(87795, 16, (long long )(end - ptr < 3L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(87800, 56746, 1);
      __CrestLoad(87802, (unsigned long )0, (long long )-2);
      __CrestStore(87803, (unsigned long )(& __retres21));
# 1331 "xmltok_impl.c"
      __retres21 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87801, 56748, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 3;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(87808, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(87807, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(87806, 18, (long long )(end - ptr));
    __CrestLoad(87805, (unsigned long )0, (long long )4L);
    __CrestApply2(87804, 16, (long long )(end - ptr < 4L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(87809, 56752, 1);
      __CrestLoad(87811, (unsigned long )0, (long long )-2);
      __CrestStore(87812, (unsigned long )(& __retres21));
# 1331 "xmltok_impl.c"
      __retres21 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87810, 56754, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 4;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 1331 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(87813, (unsigned long )0, (long long )0);
    __CrestStore(87814, (unsigned long )(& __retres21));
# 1331 "xmltok_impl.c"
    __retres21 = 0;
# 1331 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1333 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(87817, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87816, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87815, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1333 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(87818, 56762, 1);
      __CrestLoad(87820, (unsigned long )0, (long long )-1);
      __CrestStore(87821, (unsigned long )(& __retres21));
# 1334 "xmltok_impl.c"
      __retres21 = -1;
# 1334 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87819, 56764, 0);

    }
    }
    {
# 1335 "xmltok_impl.c"
    mem_13 = ptr + 1;
    {
    __CrestLoad(87824, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(87823, (unsigned long )0, (long long )0);
    __CrestApply2(87822, 12, (long long )((int const )*mem_13 == 0));
# 1335 "xmltok_impl.c"
    if ((int const )*mem_13 == 0) {
      __CrestBranch(87825, 56768, 1);
      {
# 1335 "xmltok_impl.c"
      mem_14 = ptr + 0;
      {
      __CrestLoad(87829, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(87828, (unsigned long )0, (long long )33);
      __CrestApply2(87827, 12, (long long )((int const )*mem_14 == 33));
# 1335 "xmltok_impl.c"
      if ((int const )*mem_14 == 33) {
        __CrestBranch(87830, 56771, 1);
# 1336 "xmltok_impl.c"
        ptr += 2;
        {
        __CrestLoad(87834, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
        __CrestLoad(87833, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestApply2(87832, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1336 "xmltok_impl.c"
        if ((unsigned long )ptr == (unsigned long )end) {
          __CrestBranch(87835, 56773, 1);
          __CrestLoad(87837, (unsigned long )0, (long long )-1);
          __CrestStore(87838, (unsigned long )(& __retres21));
# 1337 "xmltok_impl.c"
          __retres21 = -1;
# 1337 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(87836, 56775, 0);

        }
        }
        {
# 1338 "xmltok_impl.c"
        mem_15 = ptr + 1;
        {
        __CrestLoad(87841, (unsigned long )mem_15, (long long )*mem_15);
        __CrestLoad(87840, (unsigned long )0, (long long )0);
        __CrestApply2(87839, 12, (long long )((int const )*mem_15 == 0));
# 1338 "xmltok_impl.c"
        if ((int const )*mem_15 == 0) {
          __CrestBranch(87842, 56779, 1);
          {
# 1338 "xmltok_impl.c"
          mem_16 = ptr + 0;
          {
          __CrestLoad(87846, (unsigned long )mem_16, (long long )*mem_16);
          __CrestLoad(87845, (unsigned long )0, (long long )91);
          __CrestApply2(87844, 12, (long long )((int const )*mem_16 == 91));
# 1338 "xmltok_impl.c"
          if ((int const )*mem_16 == 91) {
            __CrestBranch(87847, 56782, 1);
            __CrestLoad(87851, (unsigned long )(& level), (long long )level);
            __CrestLoad(87850, (unsigned long )0, (long long )1);
            __CrestApply2(87849, 0, (long long )(level + 1));
            __CrestStore(87852, (unsigned long )(& level));
# 1339 "xmltok_impl.c"
            level ++;
# 1340 "xmltok_impl.c"
            ptr += 2;
          } else {
            __CrestBranch(87848, 56783, 0);

          }
          }
          }
        } else {
          __CrestBranch(87843, 56784, 0);

        }
        }
        }
      } else {
        __CrestBranch(87831, 56785, 0);

      }
      }
      }
    } else {
      __CrestBranch(87826, 56786, 0);

    }
    }
    }
# 1343 "xmltok_impl.c"
    goto switch_break;
    case_4:
# 1345 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(87855, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87854, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87853, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1345 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(87856, 56790, 1);
      __CrestLoad(87858, (unsigned long )0, (long long )-1);
      __CrestStore(87859, (unsigned long )(& __retres21));
# 1346 "xmltok_impl.c"
      __retres21 = -1;
# 1346 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(87857, 56792, 0);

    }
    }
    {
# 1347 "xmltok_impl.c"
    mem_17 = ptr + 1;
    {
    __CrestLoad(87862, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(87861, (unsigned long )0, (long long )0);
    __CrestApply2(87860, 12, (long long )((int const )*mem_17 == 0));
# 1347 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(87863, 56796, 1);
      {
# 1347 "xmltok_impl.c"
      mem_18 = ptr + 0;
      {
      __CrestLoad(87867, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(87866, (unsigned long )0, (long long )93);
      __CrestApply2(87865, 12, (long long )((int const )*mem_18 == 93));
# 1347 "xmltok_impl.c"
      if ((int const )*mem_18 == 93) {
        __CrestBranch(87868, 56799, 1);
# 1348 "xmltok_impl.c"
        ptr += 2;
        {
        __CrestLoad(87872, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
        __CrestLoad(87871, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestApply2(87870, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1348 "xmltok_impl.c"
        if ((unsigned long )ptr == (unsigned long )end) {
          __CrestBranch(87873, 56801, 1);
          __CrestLoad(87875, (unsigned long )0, (long long )-1);
          __CrestStore(87876, (unsigned long )(& __retres21));
# 1349 "xmltok_impl.c"
          __retres21 = -1;
# 1349 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(87874, 56803, 0);

        }
        }
        {
# 1350 "xmltok_impl.c"
        mem_19 = ptr + 1;
        {
        __CrestLoad(87879, (unsigned long )mem_19, (long long )*mem_19);
        __CrestLoad(87878, (unsigned long )0, (long long )0);
        __CrestApply2(87877, 12, (long long )((int const )*mem_19 == 0));
# 1350 "xmltok_impl.c"
        if ((int const )*mem_19 == 0) {
          __CrestBranch(87880, 56807, 1);
          {
# 1350 "xmltok_impl.c"
          mem_20 = ptr + 0;
          {
          __CrestLoad(87884, (unsigned long )mem_20, (long long )*mem_20);
          __CrestLoad(87883, (unsigned long )0, (long long )62);
          __CrestApply2(87882, 12, (long long )((int const )*mem_20 == 62));
# 1350 "xmltok_impl.c"
          if ((int const )*mem_20 == 62) {
            __CrestBranch(87885, 56810, 1);
# 1351 "xmltok_impl.c"
            ptr += 2;
            {
            __CrestLoad(87889, (unsigned long )(& level), (long long )level);
            __CrestLoad(87888, (unsigned long )0, (long long )0);
            __CrestApply2(87887, 12, (long long )(level == 0));
# 1352 "xmltok_impl.c"
            if (level == 0) {
              __CrestBranch(87890, 56812, 1);
# 1353 "xmltok_impl.c"
              *nextTokPtr = ptr;
              __CrestLoad(87892, (unsigned long )0, (long long )42);
              __CrestStore(87893, (unsigned long )(& __retres21));
# 1354 "xmltok_impl.c"
              __retres21 = 42;
# 1354 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(87891, 56815, 0);

            }
            }
            __CrestLoad(87896, (unsigned long )(& level), (long long )level);
            __CrestLoad(87895, (unsigned long )0, (long long )1);
            __CrestApply2(87894, 1, (long long )(level - 1));
            __CrestStore(87897, (unsigned long )(& level));
# 1356 "xmltok_impl.c"
            level --;
          } else {
            __CrestBranch(87886, 56817, 0);

          }
          }
          }
        } else {
          __CrestBranch(87881, 56818, 0);

        }
        }
        }
      } else {
        __CrestBranch(87869, 56819, 0);

      }
      }
      }
    } else {
      __CrestBranch(87864, 56820, 0);

    }
    }
    }
# 1359 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1361 "xmltok_impl.c"
    ptr += 2;
# 1362 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(87898, (unsigned long )0, (long long )-1);
  __CrestStore(87899, (unsigned long )(& __retres21));
# 1365 "xmltok_impl.c"
  __retres21 = -1;
  return_label:
  {
  __CrestLoad(87900, (unsigned long )(& __retres21), (long long )__retres21);
  __CrestReturn(87901);
# 1317 "xmltok_impl.c"
  return (__retres21);
  }
}
}
# 1370 "xmltok_impl.c"
static int little2_isPublicId(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **badPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(87902, 892);
# 1374 "xmltok_impl.c"
  ptr += 2;
# 1375 "xmltok_impl.c"
  end -= 2;
  {
# 1376 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(87905, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(87904, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(87903, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1376 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(87906, 56833, 1);

    } else {
      __CrestBranch(87907, 56834, 0);
# 1376 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1377 "xmltok_impl.c"
    mem_9 = ptr + 1;
    {
    __CrestLoad(87910, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(87909, (unsigned long )0, (long long )0);
    __CrestApply2(87908, 12, (long long )((int const )*mem_9 == 0));
# 1377 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(87911, 56838, 1);
# 1377 "xmltok_impl.c"
      mem_10 = (struct normal_encoding *)enc;
      __CrestLoad(87913, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
      __CrestStore(87914, (unsigned long )(& tmp___0));
# 1377 "xmltok_impl.c"
      tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(87912, 56839, 0);
# 1377 "xmltok_impl.c"
      mem_11 = ptr + 1;
# 1377 "xmltok_impl.c"
      mem_12 = ptr + 0;
      __CrestLoad(87915, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(87916, (unsigned long )mem_12, (long long )*mem_12);
# 1377 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
      __CrestHandleReturn(87918, (long long )tmp);
      __CrestStore(87917, (unsigned long )(& tmp));
      __CrestLoad(87919, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(87920, (unsigned long )(& tmp___0));
# 1377 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(87923, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87922, (unsigned long )0, (long long )23);
    __CrestApply2(87921, 12, (long long )(tmp___0 == 23));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(87924, 56842, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87925, 56843, 0);

    }
    }
    {
    __CrestLoad(87928, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87927, (unsigned long )0, (long long )19);
    __CrestApply2(87926, 12, (long long )(tmp___0 == 19));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 19) {
      __CrestBranch(87929, 56845, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87930, 56846, 0);

    }
    }
    {
    __CrestLoad(87933, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87932, (unsigned long )0, (long long )30);
    __CrestApply2(87931, 12, (long long )(tmp___0 == 30));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 30) {
      __CrestBranch(87934, 56848, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87935, 56849, 0);

    }
    }
    {
    __CrestLoad(87938, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87937, (unsigned long )0, (long long )33);
    __CrestApply2(87936, 12, (long long )(tmp___0 == 33));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 33) {
      __CrestBranch(87939, 56851, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87940, 56852, 0);

    }
    }
    {
    __CrestLoad(87943, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87942, (unsigned long )0, (long long )16);
    __CrestApply2(87941, 12, (long long )(tmp___0 == 16));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 16) {
      __CrestBranch(87944, 56854, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87945, 56855, 0);

    }
    }
    {
    __CrestLoad(87948, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87947, (unsigned long )0, (long long )18);
    __CrestApply2(87946, 12, (long long )(tmp___0 == 18));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 18) {
      __CrestBranch(87949, 56857, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87950, 56858, 0);

    }
    }
    {
    __CrestLoad(87953, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87952, (unsigned long )0, (long long )10);
    __CrestApply2(87951, 12, (long long )(tmp___0 == 10));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(87954, 56860, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87955, 56861, 0);

    }
    }
    {
    __CrestLoad(87958, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87957, (unsigned long )0, (long long )9);
    __CrestApply2(87956, 12, (long long )(tmp___0 == 9));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(87959, 56863, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87960, 56864, 0);

    }
    }
    {
    __CrestLoad(87963, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87962, (unsigned long )0, (long long )15);
    __CrestApply2(87961, 12, (long long )(tmp___0 == 15));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 15) {
      __CrestBranch(87964, 56866, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87965, 56867, 0);

    }
    }
    {
    __CrestLoad(87968, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87967, (unsigned long )0, (long long )14);
    __CrestApply2(87966, 12, (long long )(tmp___0 == 14));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 14) {
      __CrestBranch(87969, 56869, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87970, 56870, 0);

    }
    }
    {
    __CrestLoad(87973, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87972, (unsigned long )0, (long long )17);
    __CrestApply2(87971, 12, (long long )(tmp___0 == 17));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 17) {
      __CrestBranch(87974, 56872, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87975, 56873, 0);

    }
    }
    {
    __CrestLoad(87978, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87977, (unsigned long )0, (long long )35);
    __CrestApply2(87976, 12, (long long )(tmp___0 == 35));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 35) {
      __CrestBranch(87979, 56875, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87980, 56876, 0);

    }
    }
    {
    __CrestLoad(87983, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87982, (unsigned long )0, (long long )34);
    __CrestApply2(87981, 12, (long long )(tmp___0 == 34));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 34) {
      __CrestBranch(87984, 56878, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87985, 56879, 0);

    }
    }
    {
    __CrestLoad(87988, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87987, (unsigned long )0, (long long )32);
    __CrestApply2(87986, 12, (long long )(tmp___0 == 32));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 32) {
      __CrestBranch(87989, 56881, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87990, 56882, 0);

    }
    }
    {
    __CrestLoad(87993, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87992, (unsigned long )0, (long long )31);
    __CrestApply2(87991, 12, (long long )(tmp___0 == 31));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 31) {
      __CrestBranch(87994, 56884, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(87995, 56885, 0);

    }
    }
    {
    __CrestLoad(87998, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(87997, (unsigned long )0, (long long )13);
    __CrestApply2(87996, 12, (long long )(tmp___0 == 13));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 13) {
      __CrestBranch(87999, 56887, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(88000, 56888, 0);

    }
    }
    {
    __CrestLoad(88003, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88002, (unsigned long )0, (long long )27);
    __CrestApply2(88001, 12, (long long )(tmp___0 == 27));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(88004, 56890, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(88005, 56891, 0);

    }
    }
    {
    __CrestLoad(88008, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88007, (unsigned long )0, (long long )24);
    __CrestApply2(88006, 12, (long long )(tmp___0 == 24));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(88009, 56893, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(88010, 56894, 0);

    }
    }
    {
    __CrestLoad(88013, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88012, (unsigned long )0, (long long )25);
    __CrestApply2(88011, 12, (long long )(tmp___0 == 25));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(88014, 56896, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(88015, 56897, 0);

    }
    }
    {
    __CrestLoad(88018, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88017, (unsigned long )0, (long long )21);
    __CrestApply2(88016, 12, (long long )(tmp___0 == 21));
# 1400 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(88019, 56899, 1);
# 1400 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(88020, 56900, 0);

    }
    }
    {
    __CrestLoad(88023, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88022, (unsigned long )0, (long long )22);
    __CrestApply2(88021, 12, (long long )(tmp___0 == 22));
# 1407 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(88024, 56902, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(88025, 56903, 0);

    }
    }
    {
    __CrestLoad(88028, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88027, (unsigned long )0, (long long )26);
    __CrestApply2(88026, 12, (long long )(tmp___0 == 26));
# 1407 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(88029, 56905, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(88030, 56906, 0);

    }
    }
# 1410 "xmltok_impl.c"
    goto switch_default;
    case_23:
    case_19:
    case_30:
    case_33:
    case_16:
    case_18:
    case_10:
    case_9:
    case_15:
    case_14:
    case_17:
    case_35:
    case_34:
    case_32:
    case_31:
    case_13:
    case_27:
    case_24:
    case_25:
# 1399 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
# 1401 "xmltok_impl.c"
    mem_13 = ptr + 1;
    {
    __CrestLoad(88033, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(88032, (unsigned long )0, (long long )0);
    __CrestApply2(88031, 12, (long long )((int const )*mem_13 == 0));
# 1401 "xmltok_impl.c"
    if ((int const )*mem_13 == 0) {
      __CrestBranch(88034, 56912, 1);
      {
# 1401 "xmltok_impl.c"
      mem_14 = ptr + 0;
      {
      __CrestLoad(88038, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(88037, (unsigned long )0, (long long )9);
      __CrestApply2(88036, 12, (long long )((int const )*mem_14 == 9));
# 1401 "xmltok_impl.c"
      if ((int const )*mem_14 == 9) {
        __CrestBranch(88039, 56915, 1);
# 1402 "xmltok_impl.c"
        *badPtr = ptr;
        __CrestLoad(88041, (unsigned long )0, (long long )0);
        __CrestStore(88042, (unsigned long )(& __retres19));
# 1403 "xmltok_impl.c"
        __retres19 = 0;
# 1403 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(88040, 56918, 0);

      }
      }
      }
    } else {
      __CrestBranch(88035, 56919, 0);

    }
    }
    }
# 1405 "xmltok_impl.c"
    goto switch_break;
    case_22:
    case_26:
    {
# 1408 "xmltok_impl.c"
    mem_15 = ptr + 1;
    {
    __CrestLoad(88045, (unsigned long )mem_15, (long long )*mem_15);
    __CrestLoad(88044, (unsigned long )0, (long long )0);
    __CrestApply2(88043, 12, (long long )((int const )*mem_15 == 0));
# 1408 "xmltok_impl.c"
    if ((int const )*mem_15 == 0) {
      __CrestBranch(88046, 56924, 1);
# 1408 "xmltok_impl.c"
      mem_16 = ptr + 0;
      __CrestLoad(88048, (unsigned long )mem_16, (long long )*mem_16);
      __CrestStore(88049, (unsigned long )(& tmp___1));
# 1408 "xmltok_impl.c"
      tmp___1 = (int const )*mem_16;
    } else {
      __CrestBranch(88047, 56925, 0);
      __CrestLoad(88050, (unsigned long )0, (long long )((int const )-1));
      __CrestStore(88051, (unsigned long )(& tmp___1));
# 1408 "xmltok_impl.c"
      tmp___1 = (int const )-1;
    }
    }
    }
    {
    __CrestLoad(88056, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(88055, (unsigned long )0, (long long )-128);
    __CrestApply2(88054, 5, (long long )(tmp___1 & -128));
    __CrestLoad(88053, (unsigned long )0, (long long )0);
    __CrestApply2(88052, 13, (long long )((tmp___1 & -128) != 0));
# 1408 "xmltok_impl.c"
    if ((tmp___1 & -128) != 0) {
      __CrestBranch(88057, 56927, 1);

    } else {
      __CrestBranch(88058, 56928, 0);
# 1409 "xmltok_impl.c"
      goto switch_break;
    }
    }
    switch_default:
    {
# 1411 "xmltok_impl.c"
    mem_17 = ptr + 1;
    {
    __CrestLoad(88061, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(88060, (unsigned long )0, (long long )0);
    __CrestApply2(88059, 12, (long long )((int const )*mem_17 == 0));
# 1411 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(88062, 56932, 1);
# 1411 "xmltok_impl.c"
      mem_18 = ptr + 0;
      __CrestLoad(88064, (unsigned long )mem_18, (long long )*mem_18);
      __CrestStore(88065, (unsigned long )(& tmp___2));
# 1411 "xmltok_impl.c"
      tmp___2 = (int const )*mem_18;
    } else {
      __CrestBranch(88063, 56933, 0);
      __CrestLoad(88066, (unsigned long )0, (long long )((int const )-1));
      __CrestStore(88067, (unsigned long )(& tmp___2));
# 1411 "xmltok_impl.c"
      tmp___2 = (int const )-1;
    }
    }
    }
    {
    {
    __CrestLoad(88070, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(88069, (unsigned long )0, (long long )64);
    __CrestApply2(88068, 12, (long long )(tmp___2 == 64));
# 1413 "xmltok_impl.c"
    if (tmp___2 == 64) {
      __CrestBranch(88071, 56936, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(88072, 56937, 0);

    }
    }
    {
    __CrestLoad(88075, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(88074, (unsigned long )0, (long long )36);
    __CrestApply2(88073, 12, (long long )(tmp___2 == 36));
# 1413 "xmltok_impl.c"
    if (tmp___2 == 36) {
      __CrestBranch(88076, 56939, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(88077, 56940, 0);

    }
    }
# 1415 "xmltok_impl.c"
    goto switch_default___0;
    case_64:
    case_36:
# 1414 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 1416 "xmltok_impl.c"
    *badPtr = ptr;
    __CrestLoad(88078, (unsigned long )0, (long long )0);
    __CrestStore(88079, (unsigned long )(& __retres19));
# 1417 "xmltok_impl.c"
    __retres19 = 0;
# 1417 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
# 1419 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
# 1376 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
  __CrestLoad(88080, (unsigned long )0, (long long )1);
  __CrestStore(88081, (unsigned long )(& __retres19));
# 1422 "xmltok_impl.c"
  __retres19 = 1;
  return_label:
  {
  __CrestLoad(88082, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(88083);
# 1370 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 1430 "xmltok_impl.c"
static int little2_getAtts(ENCODING const *enc , char const *ptr , int attsMax ,
                           ATTRIBUTE *atts )
{
  enum __anonenum_state_1045544529 state ;
  int nAtts ;
  int open ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_14 ;
  struct normal_encoding *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  ATTRIBUTE *mem_18 ;
  ATTRIBUTE *mem_19 ;
  ATTRIBUTE *mem_20 ;
  ATTRIBUTE *mem_21 ;
  ATTRIBUTE *mem_22 ;
  ATTRIBUTE *mem_23 ;
  ATTRIBUTE *mem_24 ;
  ATTRIBUTE *mem_25 ;
  ATTRIBUTE *mem_26 ;
  ATTRIBUTE *mem_27 ;
  ATTRIBUTE *mem_28 ;
  ATTRIBUTE *mem_29 ;
  ATTRIBUTE *mem_30 ;
  ATTRIBUTE *mem_31 ;
  ATTRIBUTE *mem_32 ;
  ATTRIBUTE *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  ATTRIBUTE *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  ATTRIBUTE *mem_39 ;
  char const *mem_40 ;
  char const *mem_41 ;
  struct normal_encoding *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  ATTRIBUTE *mem_45 ;
  ATTRIBUTE *mem_46 ;
  int __retres47 ;

  {
  __CrestCall(88085, 893);
  __CrestStore(88084, (unsigned long )(& attsMax));
  __CrestLoad(88086, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )1));
  __CrestStore(88087, (unsigned long )(& state));
# 1434 "xmltok_impl.c"
  state = (enum __anonenum_state_1045544529 )1;
  __CrestLoad(88088, (unsigned long )0, (long long )0);
  __CrestStore(88089, (unsigned long )(& nAtts));
# 1435 "xmltok_impl.c"
  nAtts = 0;
  __CrestLoad(88090, (unsigned long )0, (long long )0);
  __CrestStore(88091, (unsigned long )(& open));
# 1436 "xmltok_impl.c"
  open = 0;
# 1439 "xmltok_impl.c"
  ptr += 2;
  {
# 1439 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1440 "xmltok_impl.c"
    mem_14 = ptr + 1;
    {
    __CrestLoad(88094, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(88093, (unsigned long )0, (long long )0);
    __CrestApply2(88092, 12, (long long )((int const )*mem_14 == 0));
# 1440 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(88095, 56960, 1);
# 1440 "xmltok_impl.c"
      mem_15 = (struct normal_encoding *)enc;
      __CrestLoad(88097, (unsigned long )(& mem_15->type[(unsigned char )*ptr]), (long long )mem_15->type[(unsigned char )*ptr]);
      __CrestStore(88098, (unsigned long )(& tmp___0));
# 1440 "xmltok_impl.c"
      tmp___0 = (int )mem_15->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(88096, 56961, 0);
# 1440 "xmltok_impl.c"
      mem_16 = ptr + 1;
# 1440 "xmltok_impl.c"
      mem_17 = ptr + 0;
      __CrestLoad(88099, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(88100, (unsigned long )mem_17, (long long )*mem_17);
# 1440 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_16, (char )*mem_17);
      __CrestHandleReturn(88102, (long long )tmp);
      __CrestStore(88101, (unsigned long )(& tmp));
      __CrestLoad(88103, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(88104, (unsigned long )(& tmp___0));
# 1440 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(88107, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88106, (unsigned long )0, (long long )5);
    __CrestApply2(88105, 12, (long long )(tmp___0 == 5));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(88108, 56964, 1);
# 1451 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(88109, 56965, 0);

    }
    }
    {
    __CrestLoad(88112, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88111, (unsigned long )0, (long long )6);
    __CrestApply2(88110, 12, (long long )(tmp___0 == 6));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(88113, 56967, 1);
# 1451 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(88114, 56968, 0);

    }
    }
    {
    __CrestLoad(88117, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88116, (unsigned long )0, (long long )7);
    __CrestApply2(88115, 12, (long long )(tmp___0 == 7));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(88118, 56970, 1);
# 1451 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(88119, 56971, 0);

    }
    }
    {
    __CrestLoad(88122, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88121, (unsigned long )0, (long long )24);
    __CrestApply2(88120, 12, (long long )(tmp___0 == 24));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(88123, 56973, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(88124, 56974, 0);

    }
    }
    {
    __CrestLoad(88127, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88126, (unsigned long )0, (long long )22);
    __CrestApply2(88125, 12, (long long )(tmp___0 == 22));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(88128, 56976, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(88129, 56977, 0);

    }
    }
    {
    __CrestLoad(88132, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88131, (unsigned long )0, (long long )29);
    __CrestApply2(88130, 12, (long long )(tmp___0 == 29));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(88133, 56979, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(88134, 56980, 0);

    }
    }
    {
    __CrestLoad(88137, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88136, (unsigned long )0, (long long )12);
    __CrestApply2(88135, 12, (long long )(tmp___0 == 12));
# 1459 "xmltok_impl.c"
    if (tmp___0 == 12) {
      __CrestBranch(88138, 56982, 1);
# 1459 "xmltok_impl.c"
      goto case_12;
    } else {
      __CrestBranch(88139, 56983, 0);

    }
    }
    {
    __CrestLoad(88142, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88141, (unsigned long )0, (long long )13);
    __CrestApply2(88140, 12, (long long )(tmp___0 == 13));
# 1473 "xmltok_impl.c"
    if (tmp___0 == 13) {
      __CrestBranch(88143, 56985, 1);
# 1473 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(88144, 56986, 0);

    }
    }
    {
    __CrestLoad(88147, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88146, (unsigned long )0, (long long )3);
    __CrestApply2(88145, 12, (long long )(tmp___0 == 3));
# 1487 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(88148, 56988, 1);
# 1487 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(88149, 56989, 0);

    }
    }
    {
    __CrestLoad(88152, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88151, (unsigned long )0, (long long )21);
    __CrestApply2(88150, 12, (long long )(tmp___0 == 21));
# 1491 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(88153, 56991, 1);
# 1491 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(88154, 56992, 0);

    }
    }
    {
    __CrestLoad(88157, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88156, (unsigned long )0, (long long )10);
    __CrestApply2(88155, 12, (long long )(tmp___0 == 10));
# 1503 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(88158, 56994, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(88159, 56995, 0);

    }
    }
    {
    __CrestLoad(88162, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88161, (unsigned long )0, (long long )9);
    __CrestApply2(88160, 12, (long long )(tmp___0 == 9));
# 1503 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(88163, 56997, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(88164, 56998, 0);

    }
    }
    {
    __CrestLoad(88167, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88166, (unsigned long )0, (long long )17);
    __CrestApply2(88165, 12, (long long )(tmp___0 == 17));
# 1512 "xmltok_impl.c"
    if (tmp___0 == 17) {
      __CrestBranch(88168, 57000, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(88169, 57001, 0);

    }
    }
    {
    __CrestLoad(88172, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88171, (unsigned long )0, (long long )11);
    __CrestApply2(88170, 12, (long long )(tmp___0 == 11));
# 1512 "xmltok_impl.c"
    if (tmp___0 == 11) {
      __CrestBranch(88173, 57003, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(88174, 57004, 0);

    }
    }
# 1516 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(88177, (unsigned long )(& state), (long long )state);
    __CrestLoad(88176, (unsigned long )0, (long long )0U);
    __CrestApply2(88175, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(88178, 57007, 1);
      {
      __CrestLoad(88182, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88181, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88180, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88183, 57008, 1);
# 1451 "xmltok_impl.c"
        mem_18 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_18->name = ptr;
# 1451 "xmltok_impl.c"
        mem_19 = atts + nAtts;
        __CrestLoad(88185, (unsigned long )0, (long long )(char)1);
        __CrestStore(88186, (unsigned long )(& mem_19->normalized));
# 1451 "xmltok_impl.c"
        mem_19->normalized = (char)1;
      } else {
        __CrestBranch(88184, 57009, 0);

      }
      }
      __CrestLoad(88187, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )1));
      __CrestStore(88188, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )1;
    } else {
      __CrestBranch(88179, 57011, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 0;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(88191, (unsigned long )(& state), (long long )state);
    __CrestLoad(88190, (unsigned long )0, (long long )0U);
    __CrestApply2(88189, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(88192, 57015, 1);
      {
      __CrestLoad(88196, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88195, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88194, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88197, 57016, 1);
# 1451 "xmltok_impl.c"
        mem_20 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_20->name = ptr;
# 1451 "xmltok_impl.c"
        mem_21 = atts + nAtts;
        __CrestLoad(88199, (unsigned long )0, (long long )(char)1);
        __CrestStore(88200, (unsigned long )(& mem_21->normalized));
# 1451 "xmltok_impl.c"
        mem_21->normalized = (char)1;
      } else {
        __CrestBranch(88198, 57017, 0);

      }
      }
      __CrestLoad(88201, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )1));
      __CrestStore(88202, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )1;
    } else {
      __CrestBranch(88193, 57019, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr ++;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(88205, (unsigned long )(& state), (long long )state);
    __CrestLoad(88204, (unsigned long )0, (long long )0U);
    __CrestApply2(88203, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(88206, 57023, 1);
      {
      __CrestLoad(88210, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88209, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88208, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88211, 57024, 1);
# 1451 "xmltok_impl.c"
        mem_22 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_22->name = ptr;
# 1451 "xmltok_impl.c"
        mem_23 = atts + nAtts;
        __CrestLoad(88213, (unsigned long )0, (long long )(char)1);
        __CrestStore(88214, (unsigned long )(& mem_23->normalized));
# 1451 "xmltok_impl.c"
        mem_23->normalized = (char)1;
      } else {
        __CrestBranch(88212, 57025, 0);

      }
      }
      __CrestLoad(88215, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )1));
      __CrestStore(88216, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )1;
    } else {
      __CrestBranch(88207, 57027, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 2;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_24:
    case_22:
    case_29:
    {
    __CrestLoad(88219, (unsigned long )(& state), (long long )state);
    __CrestLoad(88218, (unsigned long )0, (long long )0U);
    __CrestApply2(88217, 12, (long long )((unsigned int )state == 0U));
# 1456 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(88220, 57031, 1);
      {
      __CrestLoad(88224, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88223, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88222, 16, (long long )(nAtts < attsMax));
# 1456 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88225, 57032, 1);
# 1456 "xmltok_impl.c"
        mem_24 = atts + nAtts;
# 1456 "xmltok_impl.c"
        mem_24->name = ptr;
# 1456 "xmltok_impl.c"
        mem_25 = atts + nAtts;
        __CrestLoad(88227, (unsigned long )0, (long long )(char)1);
        __CrestStore(88228, (unsigned long )(& mem_25->normalized));
# 1456 "xmltok_impl.c"
        mem_25->normalized = (char)1;
      } else {
        __CrestBranch(88226, 57033, 0);

      }
      }
      __CrestLoad(88229, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )1));
      __CrestStore(88230, (unsigned long )(& state));
# 1456 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )1;
    } else {
      __CrestBranch(88221, 57035, 0);

    }
    }
# 1457 "xmltok_impl.c"
    goto switch_break;
    case_12:
    {
    __CrestLoad(88233, (unsigned long )(& state), (long long )state);
    __CrestLoad(88232, (unsigned long )0, (long long )2U);
    __CrestApply2(88231, 13, (long long )((unsigned int )state != 2U));
# 1460 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(88234, 57038, 1);
      {
      __CrestLoad(88238, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88237, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88236, 16, (long long )(nAtts < attsMax));
# 1461 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88239, 57039, 1);
# 1462 "xmltok_impl.c"
        mem_26 = atts + nAtts;
# 1462 "xmltok_impl.c"
        mem_26->valuePtr = ptr + 2;
      } else {
        __CrestBranch(88240, 57040, 0);

      }
      }
      __CrestLoad(88241, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )2));
      __CrestStore(88242, (unsigned long )(& state));
# 1463 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )2;
      __CrestLoad(88243, (unsigned long )0, (long long )12);
      __CrestStore(88244, (unsigned long )(& open));
# 1464 "xmltok_impl.c"
      open = 12;
    } else {
      __CrestBranch(88235, 57042, 0);
      {
      __CrestLoad(88247, (unsigned long )(& open), (long long )open);
      __CrestLoad(88246, (unsigned long )0, (long long )12);
      __CrestApply2(88245, 12, (long long )(open == 12));
# 1466 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(88248, 57043, 1);
        __CrestLoad(88250, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )0));
        __CrestStore(88251, (unsigned long )(& state));
# 1467 "xmltok_impl.c"
        state = (enum __anonenum_state_1045544529 )0;
        {
        __CrestLoad(88254, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88253, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(88252, 16, (long long )(nAtts < attsMax));
# 1468 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(88255, 57045, 1);
# 1469 "xmltok_impl.c"
          mem_27 = atts + nAtts;
# 1469 "xmltok_impl.c"
          mem_27->valueEnd = ptr;
        } else {
          __CrestBranch(88256, 57046, 0);

        }
        }
        __CrestLoad(88259, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88258, (unsigned long )0, (long long )1);
        __CrestApply2(88257, 0, (long long )(nAtts + 1));
        __CrestStore(88260, (unsigned long )(& nAtts));
# 1470 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(88249, 57048, 0);

      }
      }
    }
    }
# 1472 "xmltok_impl.c"
    goto switch_break;
    case_13:
    {
    __CrestLoad(88263, (unsigned long )(& state), (long long )state);
    __CrestLoad(88262, (unsigned long )0, (long long )2U);
    __CrestApply2(88261, 13, (long long )((unsigned int )state != 2U));
# 1474 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(88264, 57051, 1);
      {
      __CrestLoad(88268, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(88267, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(88266, 16, (long long )(nAtts < attsMax));
# 1475 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(88269, 57052, 1);
# 1476 "xmltok_impl.c"
        mem_28 = atts + nAtts;
# 1476 "xmltok_impl.c"
        mem_28->valuePtr = ptr + 2;
      } else {
        __CrestBranch(88270, 57053, 0);

      }
      }
      __CrestLoad(88271, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )2));
      __CrestStore(88272, (unsigned long )(& state));
# 1477 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )2;
      __CrestLoad(88273, (unsigned long )0, (long long )13);
      __CrestStore(88274, (unsigned long )(& open));
# 1478 "xmltok_impl.c"
      open = 13;
    } else {
      __CrestBranch(88265, 57055, 0);
      {
      __CrestLoad(88277, (unsigned long )(& open), (long long )open);
      __CrestLoad(88276, (unsigned long )0, (long long )13);
      __CrestApply2(88275, 12, (long long )(open == 13));
# 1480 "xmltok_impl.c"
      if (open == 13) {
        __CrestBranch(88278, 57056, 1);
        __CrestLoad(88280, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )0));
        __CrestStore(88281, (unsigned long )(& state));
# 1481 "xmltok_impl.c"
        state = (enum __anonenum_state_1045544529 )0;
        {
        __CrestLoad(88284, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88283, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(88282, 16, (long long )(nAtts < attsMax));
# 1482 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(88285, 57058, 1);
# 1483 "xmltok_impl.c"
          mem_29 = atts + nAtts;
# 1483 "xmltok_impl.c"
          mem_29->valueEnd = ptr;
        } else {
          __CrestBranch(88286, 57059, 0);

        }
        }
        __CrestLoad(88289, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88288, (unsigned long )0, (long long )1);
        __CrestApply2(88287, 0, (long long )(nAtts + 1));
        __CrestStore(88290, (unsigned long )(& nAtts));
# 1484 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(88279, 57061, 0);

      }
      }
    }
    }
# 1486 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(88293, (unsigned long )(& nAtts), (long long )nAtts);
    __CrestLoad(88292, (unsigned long )(& attsMax), (long long )attsMax);
    __CrestApply2(88291, 16, (long long )(nAtts < attsMax));
# 1488 "xmltok_impl.c"
    if (nAtts < attsMax) {
      __CrestBranch(88294, 57064, 1);
# 1489 "xmltok_impl.c"
      mem_30 = atts + nAtts;
      __CrestLoad(88296, (unsigned long )0, (long long )(char)0);
      __CrestStore(88297, (unsigned long )(& mem_30->normalized));
# 1489 "xmltok_impl.c"
      mem_30->normalized = (char)0;
    } else {
      __CrestBranch(88295, 57065, 0);

    }
    }
# 1490 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
    __CrestLoad(88300, (unsigned long )(& state), (long long )state);
    __CrestLoad(88299, (unsigned long )0, (long long )1U);
    __CrestApply2(88298, 12, (long long )((unsigned int )state == 1U));
# 1492 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(88301, 57068, 1);
      __CrestLoad(88303, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )0));
      __CrestStore(88304, (unsigned long )(& state));
# 1493 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )0;
    } else {
      __CrestBranch(88302, 57069, 0);
      {
      __CrestLoad(88307, (unsigned long )(& state), (long long )state);
      __CrestLoad(88306, (unsigned long )0, (long long )2U);
      __CrestApply2(88305, 12, (long long )((unsigned int )state == 2U));
# 1494 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(88308, 57070, 1);
        {
        __CrestLoad(88312, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88311, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(88310, 16, (long long )(nAtts < attsMax));
# 1494 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(88313, 57071, 1);
          {
# 1494 "xmltok_impl.c"
          mem_31 = atts + nAtts;
          {
          __CrestLoad(88317, (unsigned long )(& mem_31->normalized), (long long )mem_31->normalized);
          __CrestLoad(88316, (unsigned long )0, (long long )0);
          __CrestApply2(88315, 13, (long long )(mem_31->normalized != 0));
# 1494 "xmltok_impl.c"
          if (mem_31->normalized != 0) {
            __CrestBranch(88318, 57074, 1);
            {
# 1494 "xmltok_impl.c"
            mem_32 = atts + nAtts;
            {
            __CrestLoad(88322, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
            __CrestLoad(88321, (unsigned long )(& mem_32->valuePtr), (long long )((unsigned long )mem_32->valuePtr));
            __CrestApply2(88320, 12, (long long )((unsigned long )ptr == (unsigned long )mem_32->valuePtr));
# 1494 "xmltok_impl.c"
            if ((unsigned long )ptr == (unsigned long )mem_32->valuePtr) {
              __CrestBranch(88323, 57077, 1);
# 1501 "xmltok_impl.c"
              mem_33 = atts + nAtts;
              __CrestLoad(88325, (unsigned long )0, (long long )(char)0);
              __CrestStore(88326, (unsigned long )(& mem_33->normalized));
# 1501 "xmltok_impl.c"
              mem_33->normalized = (char)0;
            } else {
              __CrestBranch(88324, 57078, 0);
              {
# 1494 "xmltok_impl.c"
              mem_34 = ptr + 1;
              {
              __CrestLoad(88329, (unsigned long )mem_34, (long long )*mem_34);
              __CrestLoad(88328, (unsigned long )0, (long long )0);
              __CrestApply2(88327, 12, (long long )((int const )*mem_34 == 0));
# 1494 "xmltok_impl.c"
              if ((int const )*mem_34 == 0) {
                __CrestBranch(88330, 57081, 1);
# 1494 "xmltok_impl.c"
                mem_35 = ptr + 0;
                __CrestLoad(88332, (unsigned long )mem_35, (long long )*mem_35);
                __CrestStore(88333, (unsigned long )(& tmp___1));
# 1494 "xmltok_impl.c"
                tmp___1 = (int const )*mem_35;
              } else {
                __CrestBranch(88331, 57082, 0);
                __CrestLoad(88334, (unsigned long )0, (long long )((int const )-1));
                __CrestStore(88335, (unsigned long )(& tmp___1));
# 1494 "xmltok_impl.c"
                tmp___1 = (int const )-1;
              }
              }
              }
              {
              __CrestLoad(88338, (unsigned long )(& tmp___1), (long long )tmp___1);
              __CrestLoad(88337, (unsigned long )0, (long long )32);
              __CrestApply2(88336, 13, (long long )(tmp___1 != 32));
# 1494 "xmltok_impl.c"
              if (tmp___1 != 32) {
                __CrestBranch(88339, 57084, 1);
# 1501 "xmltok_impl.c"
                mem_36 = atts + nAtts;
                __CrestLoad(88341, (unsigned long )0, (long long )(char)0);
                __CrestStore(88342, (unsigned long )(& mem_36->normalized));
# 1501 "xmltok_impl.c"
                mem_36->normalized = (char)0;
              } else {
                __CrestBranch(88340, 57085, 0);
                {
# 1494 "xmltok_impl.c"
                mem_37 = (ptr + 2) + 1;
                {
                __CrestLoad(88345, (unsigned long )mem_37, (long long )*mem_37);
                __CrestLoad(88344, (unsigned long )0, (long long )0);
                __CrestApply2(88343, 12, (long long )((int const )*mem_37 == 0));
# 1494 "xmltok_impl.c"
                if ((int const )*mem_37 == 0) {
                  __CrestBranch(88346, 57088, 1);
# 1494 "xmltok_impl.c"
                  mem_38 = (ptr + 2) + 0;
                  __CrestLoad(88348, (unsigned long )mem_38, (long long )*mem_38);
                  __CrestStore(88349, (unsigned long )(& tmp___2));
# 1494 "xmltok_impl.c"
                  tmp___2 = (int const )*mem_38;
                } else {
                  __CrestBranch(88347, 57089, 0);
                  __CrestLoad(88350, (unsigned long )0, (long long )((int const )-1));
                  __CrestStore(88351, (unsigned long )(& tmp___2));
# 1494 "xmltok_impl.c"
                  tmp___2 = (int const )-1;
                }
                }
                }
                {
                __CrestLoad(88354, (unsigned long )(& tmp___2), (long long )tmp___2);
                __CrestLoad(88353, (unsigned long )0, (long long )32);
                __CrestApply2(88352, 12, (long long )(tmp___2 == 32));
# 1494 "xmltok_impl.c"
                if (tmp___2 == 32) {
                  __CrestBranch(88355, 57091, 1);
# 1501 "xmltok_impl.c"
                  mem_39 = atts + nAtts;
                  __CrestLoad(88357, (unsigned long )0, (long long )(char)0);
                  __CrestStore(88358, (unsigned long )(& mem_39->normalized));
# 1501 "xmltok_impl.c"
                  mem_39->normalized = (char)0;
                } else {
                  __CrestBranch(88356, 57092, 0);
                  {
# 1494 "xmltok_impl.c"
                  mem_40 = (ptr + 2) + 1;
                  {
                  __CrestLoad(88361, (unsigned long )mem_40, (long long )*mem_40);
                  __CrestLoad(88360, (unsigned long )0, (long long )0);
                  __CrestApply2(88359, 12, (long long )((int const )*mem_40 == 0));
# 1494 "xmltok_impl.c"
                  if ((int const )*mem_40 == 0) {
                    __CrestBranch(88362, 57095, 1);
# 1494 "xmltok_impl.c"
                    mem_41 = ptr + 2;
# 1494 "xmltok_impl.c"
                    mem_42 = (struct normal_encoding *)enc;
                    __CrestLoad(88364, (unsigned long )(& mem_42->type[(unsigned char )*mem_41]),
                                (long long )mem_42->type[(unsigned char )*mem_41]);
                    __CrestStore(88365, (unsigned long )(& tmp___4));
# 1494 "xmltok_impl.c"
                    tmp___4 = (int )mem_42->type[(unsigned char )*mem_41];
                  } else {
                    __CrestBranch(88363, 57096, 0);
# 1494 "xmltok_impl.c"
                    mem_43 = (ptr + 2) + 1;
# 1494 "xmltok_impl.c"
                    mem_44 = (ptr + 2) + 0;
                    __CrestLoad(88366, (unsigned long )mem_43, (long long )*mem_43);
                    __CrestLoad(88367, (unsigned long )mem_44, (long long )*mem_44);
# 1494 "xmltok_impl.c"
                    tmp___3 = unicode_byte_type((char )*mem_43, (char )*mem_44);
                    __CrestHandleReturn(88369, (long long )tmp___3);
                    __CrestStore(88368, (unsigned long )(& tmp___3));
                    __CrestLoad(88370, (unsigned long )(& tmp___3), (long long )tmp___3);
                    __CrestStore(88371, (unsigned long )(& tmp___4));
# 1494 "xmltok_impl.c"
                    tmp___4 = tmp___3;
                  }
                  }
                  }
                  {
                  __CrestLoad(88374, (unsigned long )(& tmp___4), (long long )tmp___4);
                  __CrestLoad(88373, (unsigned long )(& open), (long long )open);
                  __CrestApply2(88372, 12, (long long )(tmp___4 == open));
# 1494 "xmltok_impl.c"
                  if (tmp___4 == open) {
                    __CrestBranch(88375, 57098, 1);
# 1501 "xmltok_impl.c"
                    mem_45 = atts + nAtts;
                    __CrestLoad(88377, (unsigned long )0, (long long )(char)0);
                    __CrestStore(88378, (unsigned long )(& mem_45->normalized));
# 1501 "xmltok_impl.c"
                    mem_45->normalized = (char)0;
                  } else {
                    __CrestBranch(88376, 57099, 0);

                  }
                  }
                }
                }
              }
              }
            }
            }
            }
          } else {
            __CrestBranch(88319, 57100, 0);

          }
          }
          }
        } else {
          __CrestBranch(88314, 57101, 0);

        }
        }
      } else {
        __CrestBranch(88309, 57102, 0);

      }
      }
    }
    }
# 1502 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    {
    __CrestLoad(88381, (unsigned long )(& state), (long long )state);
    __CrestLoad(88380, (unsigned long )0, (long long )1U);
    __CrestApply2(88379, 12, (long long )((unsigned int )state == 1U));
# 1506 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(88382, 57105, 1);
      __CrestLoad(88384, (unsigned long )0, (long long )((enum __anonenum_state_1045544529 )0));
      __CrestStore(88385, (unsigned long )(& state));
# 1507 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544529 )0;
    } else {
      __CrestBranch(88383, 57106, 0);
      {
      __CrestLoad(88388, (unsigned long )(& state), (long long )state);
      __CrestLoad(88387, (unsigned long )0, (long long )2U);
      __CrestApply2(88386, 12, (long long )((unsigned int )state == 2U));
# 1508 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(88389, 57107, 1);
        {
        __CrestLoad(88393, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(88392, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(88391, 16, (long long )(nAtts < attsMax));
# 1508 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(88394, 57108, 1);
# 1509 "xmltok_impl.c"
          mem_46 = atts + nAtts;
          __CrestLoad(88396, (unsigned long )0, (long long )(char)0);
          __CrestStore(88397, (unsigned long )(& mem_46->normalized));
# 1509 "xmltok_impl.c"
          mem_46->normalized = (char)0;
        } else {
          __CrestBranch(88395, 57109, 0);

        }
        }
      } else {
        __CrestBranch(88390, 57110, 0);

      }
      }
    }
    }
# 1510 "xmltok_impl.c"
    goto switch_break;
    case_17:
    case_11:
    {
    __CrestLoad(88400, (unsigned long )(& state), (long long )state);
    __CrestLoad(88399, (unsigned long )0, (long long )2U);
    __CrestApply2(88398, 13, (long long )((unsigned int )state != 2U));
# 1513 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(88401, 57113, 1);
      __CrestLoad(88403, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestStore(88404, (unsigned long )(& __retres47));
# 1514 "xmltok_impl.c"
      __retres47 = nAtts;
# 1514 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88402, 57115, 0);

    }
    }
# 1515 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1517 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
# 1439 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(88405, (unsigned long )(& __retres47), (long long )__retres47);
  __CrestReturn(88406);
# 1430 "xmltok_impl.c"
  return (__retres47);
  }
}
}
# 1523 "xmltok_impl.c"
static int little2_charRefNumber(ENCODING const *enc , char const *ptr )
{
  int result ;
  int c ;
  int tmp ;
  int c___0 ;
  int tmp___0 ;
  int tmp___1 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(88407, 894);

  __CrestLoad(88408, (unsigned long )0, (long long )0);
  __CrestStore(88409, (unsigned long )(& result));
# 1526 "xmltok_impl.c"
  result = 0;
# 1528 "xmltok_impl.c"
  ptr += 4;
  {
# 1529 "xmltok_impl.c"
  mem_9 = ptr + 1;
  {
  __CrestLoad(88412, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(88411, (unsigned long )0, (long long )0);
  __CrestApply2(88410, 12, (long long )((int const )*mem_9 == 0));
# 1529 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(88413, 57126, 1);
    {
# 1529 "xmltok_impl.c"
    mem_10 = ptr + 0;
    {
    __CrestLoad(88417, (unsigned long )mem_10, (long long )*mem_10);
    __CrestLoad(88416, (unsigned long )0, (long long )120);
    __CrestApply2(88415, 12, (long long )((int const )*mem_10 == 120));
# 1529 "xmltok_impl.c"
    if ((int const )*mem_10 == 120) {
      __CrestBranch(88418, 57129, 1);
# 1530 "xmltok_impl.c"
      ptr += 2;
      {
# 1530 "xmltok_impl.c"
      while (1) {
        while_continue: ;
        {
# 1530 "xmltok_impl.c"
        mem_11 = ptr + 1;
        {
        __CrestLoad(88422, (unsigned long )mem_11, (long long )*mem_11);
        __CrestLoad(88421, (unsigned long )0, (long long )0);
        __CrestApply2(88420, 12, (long long )((int const )*mem_11 == 0));
# 1530 "xmltok_impl.c"
        if ((int const )*mem_11 == 0) {
          __CrestBranch(88423, 57136, 1);
          {
# 1530 "xmltok_impl.c"
          mem_12 = ptr + 0;
          {
          __CrestLoad(88427, (unsigned long )mem_12, (long long )*mem_12);
          __CrestLoad(88426, (unsigned long )0, (long long )59);
          __CrestApply2(88425, 12, (long long )((int const )*mem_12 == 59));
# 1530 "xmltok_impl.c"
          if ((int const )*mem_12 == 59) {
            __CrestBranch(88428, 57139, 1);
# 1530 "xmltok_impl.c"
            goto while_break;
          } else {
            __CrestBranch(88429, 57140, 0);

          }
          }
          }
        } else {
          __CrestBranch(88424, 57141, 0);

        }
        }
        }
        {
# 1533 "xmltok_impl.c"
        mem_13 = ptr + 1;
        {
        __CrestLoad(88432, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(88431, (unsigned long )0, (long long )0);
        __CrestApply2(88430, 12, (long long )((int const )*mem_13 == 0));
# 1533 "xmltok_impl.c"
        if ((int const )*mem_13 == 0) {
          __CrestBranch(88433, 57145, 1);
# 1533 "xmltok_impl.c"
          mem_14 = ptr + 0;
          __CrestLoad(88435, (unsigned long )mem_14, (long long )*mem_14);
          __CrestStore(88436, (unsigned long )(& tmp));
# 1533 "xmltok_impl.c"
          tmp = (int const )*mem_14;
        } else {
          __CrestBranch(88434, 57146, 0);
          __CrestLoad(88437, (unsigned long )0, (long long )((int const )-1));
          __CrestStore(88438, (unsigned long )(& tmp));
# 1533 "xmltok_impl.c"
          tmp = (int const )-1;
        }
        }
        }
        __CrestLoad(88439, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(88440, (unsigned long )(& c));
# 1533 "xmltok_impl.c"
        c = (int )tmp;
        {
        {
        __CrestLoad(88443, (unsigned long )(& c), (long long )c);
        __CrestLoad(88442, (unsigned long )0, (long long )57);
        __CrestApply2(88441, 12, (long long )(c == 57));
# 1536 "xmltok_impl.c"
        if (c == 57) {
          __CrestBranch(88444, 57150, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88445, 57151, 0);

        }
        }
        {
        __CrestLoad(88448, (unsigned long )(& c), (long long )c);
        __CrestLoad(88447, (unsigned long )0, (long long )56);
        __CrestApply2(88446, 12, (long long )(c == 56));
# 1536 "xmltok_impl.c"
        if (c == 56) {
          __CrestBranch(88449, 57153, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88450, 57154, 0);

        }
        }
        {
        __CrestLoad(88453, (unsigned long )(& c), (long long )c);
        __CrestLoad(88452, (unsigned long )0, (long long )55);
        __CrestApply2(88451, 12, (long long )(c == 55));
# 1536 "xmltok_impl.c"
        if (c == 55) {
          __CrestBranch(88454, 57156, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88455, 57157, 0);

        }
        }
        {
        __CrestLoad(88458, (unsigned long )(& c), (long long )c);
        __CrestLoad(88457, (unsigned long )0, (long long )54);
        __CrestApply2(88456, 12, (long long )(c == 54));
# 1536 "xmltok_impl.c"
        if (c == 54) {
          __CrestBranch(88459, 57159, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88460, 57160, 0);

        }
        }
        {
        __CrestLoad(88463, (unsigned long )(& c), (long long )c);
        __CrestLoad(88462, (unsigned long )0, (long long )53);
        __CrestApply2(88461, 12, (long long )(c == 53));
# 1536 "xmltok_impl.c"
        if (c == 53) {
          __CrestBranch(88464, 57162, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88465, 57163, 0);

        }
        }
        {
        __CrestLoad(88468, (unsigned long )(& c), (long long )c);
        __CrestLoad(88467, (unsigned long )0, (long long )52);
        __CrestApply2(88466, 12, (long long )(c == 52));
# 1536 "xmltok_impl.c"
        if (c == 52) {
          __CrestBranch(88469, 57165, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88470, 57166, 0);

        }
        }
        {
        __CrestLoad(88473, (unsigned long )(& c), (long long )c);
        __CrestLoad(88472, (unsigned long )0, (long long )51);
        __CrestApply2(88471, 12, (long long )(c == 51));
# 1536 "xmltok_impl.c"
        if (c == 51) {
          __CrestBranch(88474, 57168, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88475, 57169, 0);

        }
        }
        {
        __CrestLoad(88478, (unsigned long )(& c), (long long )c);
        __CrestLoad(88477, (unsigned long )0, (long long )50);
        __CrestApply2(88476, 12, (long long )(c == 50));
# 1536 "xmltok_impl.c"
        if (c == 50) {
          __CrestBranch(88479, 57171, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88480, 57172, 0);

        }
        }
        {
        __CrestLoad(88483, (unsigned long )(& c), (long long )c);
        __CrestLoad(88482, (unsigned long )0, (long long )49);
        __CrestApply2(88481, 12, (long long )(c == 49));
# 1536 "xmltok_impl.c"
        if (c == 49) {
          __CrestBranch(88484, 57174, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88485, 57175, 0);

        }
        }
        {
        __CrestLoad(88488, (unsigned long )(& c), (long long )c);
        __CrestLoad(88487, (unsigned long )0, (long long )48);
        __CrestApply2(88486, 12, (long long )(c == 48));
# 1536 "xmltok_impl.c"
        if (c == 48) {
          __CrestBranch(88489, 57177, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(88490, 57178, 0);

        }
        }
        {
        __CrestLoad(88493, (unsigned long )(& c), (long long )c);
        __CrestLoad(88492, (unsigned long )0, (long long )70);
        __CrestApply2(88491, 12, (long long )(c == 70));
# 1541 "xmltok_impl.c"
        if (c == 70) {
          __CrestBranch(88494, 57180, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88495, 57181, 0);

        }
        }
        {
        __CrestLoad(88498, (unsigned long )(& c), (long long )c);
        __CrestLoad(88497, (unsigned long )0, (long long )69);
        __CrestApply2(88496, 12, (long long )(c == 69));
# 1541 "xmltok_impl.c"
        if (c == 69) {
          __CrestBranch(88499, 57183, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88500, 57184, 0);

        }
        }
        {
        __CrestLoad(88503, (unsigned long )(& c), (long long )c);
        __CrestLoad(88502, (unsigned long )0, (long long )68);
        __CrestApply2(88501, 12, (long long )(c == 68));
# 1541 "xmltok_impl.c"
        if (c == 68) {
          __CrestBranch(88504, 57186, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88505, 57187, 0);

        }
        }
        {
        __CrestLoad(88508, (unsigned long )(& c), (long long )c);
        __CrestLoad(88507, (unsigned long )0, (long long )67);
        __CrestApply2(88506, 12, (long long )(c == 67));
# 1541 "xmltok_impl.c"
        if (c == 67) {
          __CrestBranch(88509, 57189, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88510, 57190, 0);

        }
        }
        {
        __CrestLoad(88513, (unsigned long )(& c), (long long )c);
        __CrestLoad(88512, (unsigned long )0, (long long )66);
        __CrestApply2(88511, 12, (long long )(c == 66));
# 1541 "xmltok_impl.c"
        if (c == 66) {
          __CrestBranch(88514, 57192, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88515, 57193, 0);

        }
        }
        {
        __CrestLoad(88518, (unsigned long )(& c), (long long )c);
        __CrestLoad(88517, (unsigned long )0, (long long )65);
        __CrestApply2(88516, 12, (long long )(c == 65));
# 1541 "xmltok_impl.c"
        if (c == 65) {
          __CrestBranch(88519, 57195, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(88520, 57196, 0);

        }
        }
        {
        __CrestLoad(88523, (unsigned long )(& c), (long long )c);
        __CrestLoad(88522, (unsigned long )0, (long long )102);
        __CrestApply2(88521, 12, (long long )(c == 102));
# 1546 "xmltok_impl.c"
        if (c == 102) {
          __CrestBranch(88524, 57198, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88525, 57199, 0);

        }
        }
        {
        __CrestLoad(88528, (unsigned long )(& c), (long long )c);
        __CrestLoad(88527, (unsigned long )0, (long long )101);
        __CrestApply2(88526, 12, (long long )(c == 101));
# 1546 "xmltok_impl.c"
        if (c == 101) {
          __CrestBranch(88529, 57201, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88530, 57202, 0);

        }
        }
        {
        __CrestLoad(88533, (unsigned long )(& c), (long long )c);
        __CrestLoad(88532, (unsigned long )0, (long long )100);
        __CrestApply2(88531, 12, (long long )(c == 100));
# 1546 "xmltok_impl.c"
        if (c == 100) {
          __CrestBranch(88534, 57204, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88535, 57205, 0);

        }
        }
        {
        __CrestLoad(88538, (unsigned long )(& c), (long long )c);
        __CrestLoad(88537, (unsigned long )0, (long long )99);
        __CrestApply2(88536, 12, (long long )(c == 99));
# 1546 "xmltok_impl.c"
        if (c == 99) {
          __CrestBranch(88539, 57207, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88540, 57208, 0);

        }
        }
        {
        __CrestLoad(88543, (unsigned long )(& c), (long long )c);
        __CrestLoad(88542, (unsigned long )0, (long long )98);
        __CrestApply2(88541, 12, (long long )(c == 98));
# 1546 "xmltok_impl.c"
        if (c == 98) {
          __CrestBranch(88544, 57210, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88545, 57211, 0);

        }
        }
        {
        __CrestLoad(88548, (unsigned long )(& c), (long long )c);
        __CrestLoad(88547, (unsigned long )0, (long long )97);
        __CrestApply2(88546, 12, (long long )(c == 97));
# 1546 "xmltok_impl.c"
        if (c == 97) {
          __CrestBranch(88549, 57213, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(88550, 57214, 0);

        }
        }
# 1534 "xmltok_impl.c"
        goto switch_break;
        case_57:
        case_56:
        case_55:
        case_54:
        case_53:
        case_52:
        case_51:
        case_50:
        case_49:
        case_48:
        __CrestLoad(88553, (unsigned long )(& result), (long long )result);
        __CrestLoad(88552, (unsigned long )0, (long long )4);
        __CrestApply2(88551, 8, (long long )(result << 4));
        __CrestStore(88554, (unsigned long )(& result));
# 1537 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(88559, (unsigned long )(& result), (long long )result);
        __CrestLoad(88558, (unsigned long )(& c), (long long )c);
        __CrestLoad(88557, (unsigned long )0, (long long )48);
        __CrestApply2(88556, 1, (long long )(c - 48));
        __CrestApply2(88555, 6, (long long )(result | (c - 48)));
        __CrestStore(88560, (unsigned long )(& result));
# 1538 "xmltok_impl.c"
        result |= c - 48;
# 1539 "xmltok_impl.c"
        goto switch_break;
        case_70:
        case_69:
        case_68:
        case_67:
        case_66:
        case_65:
        __CrestLoad(88563, (unsigned long )(& result), (long long )result);
        __CrestLoad(88562, (unsigned long )0, (long long )4);
        __CrestApply2(88561, 8, (long long )(result << 4));
        __CrestStore(88564, (unsigned long )(& result));
# 1542 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(88571, (unsigned long )(& result), (long long )result);
        __CrestLoad(88570, (unsigned long )0, (long long )10);
        __CrestLoad(88569, (unsigned long )(& c), (long long )c);
        __CrestLoad(88568, (unsigned long )0, (long long )65);
        __CrestApply2(88567, 1, (long long )(c - 65));
        __CrestApply2(88566, 0, (long long )(10 + (c - 65)));
        __CrestApply2(88565, 0, (long long )(result + (10 + (c - 65))));
        __CrestStore(88572, (unsigned long )(& result));
# 1543 "xmltok_impl.c"
        result += 10 + (c - 65);
# 1544 "xmltok_impl.c"
        goto switch_break;
        case_102:
        case_101:
        case_100:
        case_99:
        case_98:
        case_97:
        __CrestLoad(88575, (unsigned long )(& result), (long long )result);
        __CrestLoad(88574, (unsigned long )0, (long long )4);
        __CrestApply2(88573, 8, (long long )(result << 4));
        __CrestStore(88576, (unsigned long )(& result));
# 1547 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(88583, (unsigned long )(& result), (long long )result);
        __CrestLoad(88582, (unsigned long )0, (long long )10);
        __CrestLoad(88581, (unsigned long )(& c), (long long )c);
        __CrestLoad(88580, (unsigned long )0, (long long )97);
        __CrestApply2(88579, 1, (long long )(c - 97));
        __CrestApply2(88578, 0, (long long )(10 + (c - 97)));
        __CrestApply2(88577, 0, (long long )(result + (10 + (c - 97))));
        __CrestStore(88584, (unsigned long )(& result));
# 1548 "xmltok_impl.c"
        result += 10 + (c - 97);
# 1549 "xmltok_impl.c"
        goto switch_break;
        switch_break: ;
        }
        {
        __CrestLoad(88587, (unsigned long )(& result), (long long )result);
        __CrestLoad(88586, (unsigned long )0, (long long )1114112);
        __CrestApply2(88585, 17, (long long )(result >= 1114112));
# 1551 "xmltok_impl.c"
        if (result >= 1114112) {
          __CrestBranch(88588, 57224, 1);
          __CrestLoad(88590, (unsigned long )0, (long long )-1);
          __CrestStore(88591, (unsigned long )(& __retres19));
# 1552 "xmltok_impl.c"
          __retres19 = -1;
# 1552 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(88589, 57226, 0);

        }
        }
# 1530 "xmltok_impl.c"
        ptr += 2;
      }
      while_break: ;
      }
    } else {
      __CrestBranch(88419, 57229, 0);
# 1529 "xmltok_impl.c"
      goto _L;
    }
    }
    }
  } else {
    __CrestBranch(88414, 57230, 0);
    _L:
    {
# 1556 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
# 1556 "xmltok_impl.c"
      mem_15 = ptr + 1;
      {
      __CrestLoad(88594, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(88593, (unsigned long )0, (long long )0);
      __CrestApply2(88592, 12, (long long )((int const )*mem_15 == 0));
# 1556 "xmltok_impl.c"
      if ((int const )*mem_15 == 0) {
        __CrestBranch(88595, 57236, 1);
        {
# 1556 "xmltok_impl.c"
        mem_16 = ptr + 0;
        {
        __CrestLoad(88599, (unsigned long )mem_16, (long long )*mem_16);
        __CrestLoad(88598, (unsigned long )0, (long long )59);
        __CrestApply2(88597, 12, (long long )((int const )*mem_16 == 59));
# 1556 "xmltok_impl.c"
        if ((int const )*mem_16 == 59) {
          __CrestBranch(88600, 57239, 1);
# 1556 "xmltok_impl.c"
          goto while_break___0;
        } else {
          __CrestBranch(88601, 57240, 0);

        }
        }
        }
      } else {
        __CrestBranch(88596, 57241, 0);

      }
      }
      }
      {
# 1557 "xmltok_impl.c"
      mem_17 = ptr + 1;
      {
      __CrestLoad(88604, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(88603, (unsigned long )0, (long long )0);
      __CrestApply2(88602, 12, (long long )((int const )*mem_17 == 0));
# 1557 "xmltok_impl.c"
      if ((int const )*mem_17 == 0) {
        __CrestBranch(88605, 57245, 1);
# 1557 "xmltok_impl.c"
        mem_18 = ptr + 0;
        __CrestLoad(88607, (unsigned long )mem_18, (long long )*mem_18);
        __CrestStore(88608, (unsigned long )(& tmp___0));
# 1557 "xmltok_impl.c"
        tmp___0 = (int const )*mem_18;
      } else {
        __CrestBranch(88606, 57246, 0);
        __CrestLoad(88609, (unsigned long )0, (long long )((int const )-1));
        __CrestStore(88610, (unsigned long )(& tmp___0));
# 1557 "xmltok_impl.c"
        tmp___0 = (int const )-1;
      }
      }
      }
      __CrestLoad(88611, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(88612, (unsigned long )(& c___0));
# 1557 "xmltok_impl.c"
      c___0 = (int )tmp___0;
      __CrestLoad(88615, (unsigned long )(& result), (long long )result);
      __CrestLoad(88614, (unsigned long )0, (long long )10);
      __CrestApply2(88613, 2, (long long )(result * 10));
      __CrestStore(88616, (unsigned long )(& result));
# 1558 "xmltok_impl.c"
      result *= 10;
      __CrestLoad(88621, (unsigned long )(& result), (long long )result);
      __CrestLoad(88620, (unsigned long )(& c___0), (long long )c___0);
      __CrestLoad(88619, (unsigned long )0, (long long )48);
      __CrestApply2(88618, 1, (long long )(c___0 - 48));
      __CrestApply2(88617, 0, (long long )(result + (c___0 - 48)));
      __CrestStore(88622, (unsigned long )(& result));
# 1559 "xmltok_impl.c"
      result += c___0 - 48;
      {
      __CrestLoad(88625, (unsigned long )(& result), (long long )result);
      __CrestLoad(88624, (unsigned long )0, (long long )1114112);
      __CrestApply2(88623, 17, (long long )(result >= 1114112));
# 1560 "xmltok_impl.c"
      if (result >= 1114112) {
        __CrestBranch(88626, 57249, 1);
        __CrestLoad(88628, (unsigned long )0, (long long )-1);
        __CrestStore(88629, (unsigned long )(& __retres19));
# 1561 "xmltok_impl.c"
        __retres19 = -1;
# 1561 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(88627, 57251, 0);

      }
      }
# 1556 "xmltok_impl.c"
      ptr += 2;
    }
    while_break___0: ;
    }
  }
  }
  }
  __CrestLoad(88630, (unsigned long )(& result), (long long )result);
# 1564 "xmltok_impl.c"
  tmp___1 = checkCharRefNumber(result);
  __CrestHandleReturn(88632, (long long )tmp___1);
  __CrestStore(88631, (unsigned long )(& tmp___1));
  __CrestLoad(88633, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(88634, (unsigned long )(& __retres19));
# 1564 "xmltok_impl.c"
  __retres19 = tmp___1;
  return_label:
  {
  __CrestLoad(88635, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(88636);
# 1523 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 1567 "xmltok_impl.c"
static int little2_predefinedEntityName(ENCODING const *enc , char const *ptr ,
                                        char const *end )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_6 ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  int __retres30 ;

  {
  __CrestCall(88637, 895);

  {
  {
  __CrestLoad(88644, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(88643, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(88642, 18, (long long )(end - ptr));
  __CrestLoad(88641, (unsigned long )0, (long long )2L);
  __CrestApply2(88640, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(88639, (unsigned long )0, (long long )2L);
  __CrestApply2(88638, 12, (long long )((end - ptr) / 2L == 2L));
# 1572 "xmltok_impl.c"
  if ((end - ptr) / 2L == 2L) {
    __CrestBranch(88645, 57259, 1);
# 1572 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(88646, 57260, 0);

  }
  }
  {
  __CrestLoad(88653, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(88652, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(88651, 18, (long long )(end - ptr));
  __CrestLoad(88650, (unsigned long )0, (long long )2L);
  __CrestApply2(88649, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(88648, (unsigned long )0, (long long )3L);
  __CrestApply2(88647, 12, (long long )((end - ptr) / 2L == 3L));
# 1582 "xmltok_impl.c"
  if ((end - ptr) / 2L == 3L) {
    __CrestBranch(88654, 57262, 1);
# 1582 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(88655, 57263, 0);

  }
  }
  {
  __CrestLoad(88662, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(88661, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(88660, 18, (long long )(end - ptr));
  __CrestLoad(88659, (unsigned long )0, (long long )2L);
  __CrestApply2(88658, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(88657, (unsigned long )0, (long long )4L);
  __CrestApply2(88656, 12, (long long )((end - ptr) / 2L == 4L));
# 1592 "xmltok_impl.c"
  if ((end - ptr) / 2L == 4L) {
    __CrestBranch(88663, 57265, 1);
# 1592 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(88664, 57266, 0);

  }
  }
# 1571 "xmltok_impl.c"
  goto switch_break;
  case_2:
  {
# 1573 "xmltok_impl.c"
  mem_6 = (ptr + 2) + 1;
  {
  __CrestLoad(88667, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(88666, (unsigned long )0, (long long )0);
  __CrestApply2(88665, 12, (long long )((int const )*mem_6 == 0));
# 1573 "xmltok_impl.c"
  if ((int const )*mem_6 == 0) {
    __CrestBranch(88668, 57271, 1);
    {
# 1573 "xmltok_impl.c"
    mem_7 = (ptr + 2) + 0;
    {
    __CrestLoad(88672, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(88671, (unsigned long )0, (long long )116);
    __CrestApply2(88670, 12, (long long )((int const )*mem_7 == 116));
# 1573 "xmltok_impl.c"
    if ((int const )*mem_7 == 116) {
      __CrestBranch(88673, 57274, 1);
      {
# 1574 "xmltok_impl.c"
      mem_8 = ptr + 1;
      {
      __CrestLoad(88677, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(88676, (unsigned long )0, (long long )0);
      __CrestApply2(88675, 12, (long long )((int const )*mem_8 == 0));
# 1574 "xmltok_impl.c"
      if ((int const )*mem_8 == 0) {
        __CrestBranch(88678, 57277, 1);
# 1574 "xmltok_impl.c"
        mem_9 = ptr + 0;
        __CrestLoad(88680, (unsigned long )mem_9, (long long )*mem_9);
        __CrestStore(88681, (unsigned long )(& tmp));
# 1574 "xmltok_impl.c"
        tmp = (int const )*mem_9;
      } else {
        __CrestBranch(88679, 57278, 0);
        __CrestLoad(88682, (unsigned long )0, (long long )((int const )-1));
        __CrestStore(88683, (unsigned long )(& tmp));
# 1574 "xmltok_impl.c"
        tmp = (int const )-1;
      }
      }
      }
      {
      {
      __CrestLoad(88686, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(88685, (unsigned long )0, (long long )108);
      __CrestApply2(88684, 12, (long long )(tmp == 108));
# 1575 "xmltok_impl.c"
      if (tmp == 108) {
        __CrestBranch(88687, 57281, 1);
# 1575 "xmltok_impl.c"
        goto case_108;
      } else {
        __CrestBranch(88688, 57282, 0);

      }
      }
      {
      __CrestLoad(88691, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(88690, (unsigned long )0, (long long )103);
      __CrestApply2(88689, 12, (long long )(tmp == 103));
# 1577 "xmltok_impl.c"
      if (tmp == 103) {
        __CrestBranch(88692, 57284, 1);
# 1577 "xmltok_impl.c"
        goto case_103;
      } else {
        __CrestBranch(88693, 57285, 0);

      }
      }
# 1574 "xmltok_impl.c"
      goto switch_break___0;
      case_108:
      __CrestLoad(88694, (unsigned long )0, (long long )60);
      __CrestStore(88695, (unsigned long )(& __retres30));
# 1576 "xmltok_impl.c"
      __retres30 = 60;
# 1576 "xmltok_impl.c"
      goto return_label;
      case_103:
      __CrestLoad(88696, (unsigned long )0, (long long )62);
      __CrestStore(88697, (unsigned long )(& __retres30));
# 1578 "xmltok_impl.c"
      __retres30 = 62;
# 1578 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
    } else {
      __CrestBranch(88674, 57292, 0);

    }
    }
    }
  } else {
    __CrestBranch(88669, 57293, 0);

  }
  }
  }
# 1581 "xmltok_impl.c"
  goto switch_break;
  case_3:
  {
# 1583 "xmltok_impl.c"
  mem_10 = ptr + 1;
  {
  __CrestLoad(88700, (unsigned long )mem_10, (long long )*mem_10);
  __CrestLoad(88699, (unsigned long )0, (long long )0);
  __CrestApply2(88698, 12, (long long )((int const )*mem_10 == 0));
# 1583 "xmltok_impl.c"
  if ((int const )*mem_10 == 0) {
    __CrestBranch(88701, 57298, 1);
    {
# 1583 "xmltok_impl.c"
    mem_11 = ptr + 0;
    {
    __CrestLoad(88705, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(88704, (unsigned long )0, (long long )97);
    __CrestApply2(88703, 12, (long long )((int const )*mem_11 == 97));
# 1583 "xmltok_impl.c"
    if ((int const )*mem_11 == 97) {
      __CrestBranch(88706, 57301, 1);
# 1584 "xmltok_impl.c"
      ptr += 2;
      {
# 1585 "xmltok_impl.c"
      mem_12 = ptr + 1;
      {
      __CrestLoad(88710, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(88709, (unsigned long )0, (long long )0);
      __CrestApply2(88708, 12, (long long )((int const )*mem_12 == 0));
# 1585 "xmltok_impl.c"
      if ((int const )*mem_12 == 0) {
        __CrestBranch(88711, 57305, 1);
        {
# 1585 "xmltok_impl.c"
        mem_13 = ptr + 0;
        {
        __CrestLoad(88715, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(88714, (unsigned long )0, (long long )109);
        __CrestApply2(88713, 12, (long long )((int const )*mem_13 == 109));
# 1585 "xmltok_impl.c"
        if ((int const )*mem_13 == 109) {
          __CrestBranch(88716, 57308, 1);
# 1586 "xmltok_impl.c"
          ptr += 2;
          {
# 1587 "xmltok_impl.c"
          mem_14 = ptr + 1;
          {
          __CrestLoad(88720, (unsigned long )mem_14, (long long )*mem_14);
          __CrestLoad(88719, (unsigned long )0, (long long )0);
          __CrestApply2(88718, 12, (long long )((int const )*mem_14 == 0));
# 1587 "xmltok_impl.c"
          if ((int const )*mem_14 == 0) {
            __CrestBranch(88721, 57312, 1);
            {
# 1587 "xmltok_impl.c"
            mem_15 = ptr + 0;
            {
            __CrestLoad(88725, (unsigned long )mem_15, (long long )*mem_15);
            __CrestLoad(88724, (unsigned long )0, (long long )112);
            __CrestApply2(88723, 12, (long long )((int const )*mem_15 == 112));
# 1587 "xmltok_impl.c"
            if ((int const )*mem_15 == 112) {
              __CrestBranch(88726, 57315, 1);
              __CrestLoad(88728, (unsigned long )0, (long long )38);
              __CrestStore(88729, (unsigned long )(& __retres30));
# 1588 "xmltok_impl.c"
              __retres30 = 38;
# 1588 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(88727, 57317, 0);

            }
            }
            }
          } else {
            __CrestBranch(88722, 57318, 0);

          }
          }
          }
        } else {
          __CrestBranch(88717, 57319, 0);

        }
        }
        }
      } else {
        __CrestBranch(88712, 57320, 0);

      }
      }
      }
    } else {
      __CrestBranch(88707, 57321, 0);

    }
    }
    }
  } else {
    __CrestBranch(88702, 57322, 0);

  }
  }
  }
# 1591 "xmltok_impl.c"
  goto switch_break;
  case_4:
  {
# 1593 "xmltok_impl.c"
  mem_16 = ptr + 1;
  {
  __CrestLoad(88732, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(88731, (unsigned long )0, (long long )0);
  __CrestApply2(88730, 12, (long long )((int const )*mem_16 == 0));
# 1593 "xmltok_impl.c"
  if ((int const )*mem_16 == 0) {
    __CrestBranch(88733, 57327, 1);
# 1593 "xmltok_impl.c"
    mem_17 = ptr + 0;
    __CrestLoad(88735, (unsigned long )mem_17, (long long )*mem_17);
    __CrestStore(88736, (unsigned long )(& tmp___0));
# 1593 "xmltok_impl.c"
    tmp___0 = (int const )*mem_17;
  } else {
    __CrestBranch(88734, 57328, 0);
    __CrestLoad(88737, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(88738, (unsigned long )(& tmp___0));
# 1593 "xmltok_impl.c"
    tmp___0 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(88741, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(88740, (unsigned long )0, (long long )113);
  __CrestApply2(88739, 12, (long long )(tmp___0 == 113));
# 1594 "xmltok_impl.c"
  if (tmp___0 == 113) {
    __CrestBranch(88742, 57331, 1);
# 1594 "xmltok_impl.c"
    goto case_113;
  } else {
    __CrestBranch(88743, 57332, 0);

  }
  }
  {
  __CrestLoad(88746, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(88745, (unsigned long )0, (long long )97);
  __CrestApply2(88744, 12, (long long )(tmp___0 == 97));
# 1605 "xmltok_impl.c"
  if (tmp___0 == 97) {
    __CrestBranch(88747, 57334, 1);
# 1605 "xmltok_impl.c"
    goto case_97;
  } else {
    __CrestBranch(88748, 57335, 0);

  }
  }
# 1593 "xmltok_impl.c"
  goto switch_break___1;
  case_113:
# 1595 "xmltok_impl.c"
  ptr += 2;
  {
# 1596 "xmltok_impl.c"
  mem_18 = ptr + 1;
  {
  __CrestLoad(88751, (unsigned long )mem_18, (long long )*mem_18);
  __CrestLoad(88750, (unsigned long )0, (long long )0);
  __CrestApply2(88749, 12, (long long )((int const )*mem_18 == 0));
# 1596 "xmltok_impl.c"
  if ((int const )*mem_18 == 0) {
    __CrestBranch(88752, 57341, 1);
    {
# 1596 "xmltok_impl.c"
    mem_19 = ptr + 0;
    {
    __CrestLoad(88756, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(88755, (unsigned long )0, (long long )117);
    __CrestApply2(88754, 12, (long long )((int const )*mem_19 == 117));
# 1596 "xmltok_impl.c"
    if ((int const )*mem_19 == 117) {
      __CrestBranch(88757, 57344, 1);
# 1597 "xmltok_impl.c"
      ptr += 2;
      {
# 1598 "xmltok_impl.c"
      mem_20 = ptr + 1;
      {
      __CrestLoad(88761, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(88760, (unsigned long )0, (long long )0);
      __CrestApply2(88759, 12, (long long )((int const )*mem_20 == 0));
# 1598 "xmltok_impl.c"
      if ((int const )*mem_20 == 0) {
        __CrestBranch(88762, 57348, 1);
        {
# 1598 "xmltok_impl.c"
        mem_21 = ptr + 0;
        {
        __CrestLoad(88766, (unsigned long )mem_21, (long long )*mem_21);
        __CrestLoad(88765, (unsigned long )0, (long long )111);
        __CrestApply2(88764, 12, (long long )((int const )*mem_21 == 111));
# 1598 "xmltok_impl.c"
        if ((int const )*mem_21 == 111) {
          __CrestBranch(88767, 57351, 1);
# 1599 "xmltok_impl.c"
          ptr += 2;
          {
# 1600 "xmltok_impl.c"
          mem_22 = ptr + 1;
          {
          __CrestLoad(88771, (unsigned long )mem_22, (long long )*mem_22);
          __CrestLoad(88770, (unsigned long )0, (long long )0);
          __CrestApply2(88769, 12, (long long )((int const )*mem_22 == 0));
# 1600 "xmltok_impl.c"
          if ((int const )*mem_22 == 0) {
            __CrestBranch(88772, 57355, 1);
            {
# 1600 "xmltok_impl.c"
            mem_23 = ptr + 0;
            {
            __CrestLoad(88776, (unsigned long )mem_23, (long long )*mem_23);
            __CrestLoad(88775, (unsigned long )0, (long long )116);
            __CrestApply2(88774, 12, (long long )((int const )*mem_23 == 116));
# 1600 "xmltok_impl.c"
            if ((int const )*mem_23 == 116) {
              __CrestBranch(88777, 57358, 1);
              __CrestLoad(88779, (unsigned long )0, (long long )34);
              __CrestStore(88780, (unsigned long )(& __retres30));
# 1601 "xmltok_impl.c"
              __retres30 = 34;
# 1601 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(88778, 57360, 0);

            }
            }
            }
          } else {
            __CrestBranch(88773, 57361, 0);

          }
          }
          }
        } else {
          __CrestBranch(88768, 57362, 0);

        }
        }
        }
      } else {
        __CrestBranch(88763, 57363, 0);

      }
      }
      }
    } else {
      __CrestBranch(88758, 57364, 0);

    }
    }
    }
  } else {
    __CrestBranch(88753, 57365, 0);

  }
  }
  }
# 1604 "xmltok_impl.c"
  goto switch_break___1;
  case_97:
# 1606 "xmltok_impl.c"
  ptr += 2;
  {
# 1607 "xmltok_impl.c"
  mem_24 = ptr + 1;
  {
  __CrestLoad(88783, (unsigned long )mem_24, (long long )*mem_24);
  __CrestLoad(88782, (unsigned long )0, (long long )0);
  __CrestApply2(88781, 12, (long long )((int const )*mem_24 == 0));
# 1607 "xmltok_impl.c"
  if ((int const )*mem_24 == 0) {
    __CrestBranch(88784, 57371, 1);
    {
# 1607 "xmltok_impl.c"
    mem_25 = ptr + 0;
    {
    __CrestLoad(88788, (unsigned long )mem_25, (long long )*mem_25);
    __CrestLoad(88787, (unsigned long )0, (long long )112);
    __CrestApply2(88786, 12, (long long )((int const )*mem_25 == 112));
# 1607 "xmltok_impl.c"
    if ((int const )*mem_25 == 112) {
      __CrestBranch(88789, 57374, 1);
# 1608 "xmltok_impl.c"
      ptr += 2;
      {
# 1609 "xmltok_impl.c"
      mem_26 = ptr + 1;
      {
      __CrestLoad(88793, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(88792, (unsigned long )0, (long long )0);
      __CrestApply2(88791, 12, (long long )((int const )*mem_26 == 0));
# 1609 "xmltok_impl.c"
      if ((int const )*mem_26 == 0) {
        __CrestBranch(88794, 57378, 1);
        {
# 1609 "xmltok_impl.c"
        mem_27 = ptr + 0;
        {
        __CrestLoad(88798, (unsigned long )mem_27, (long long )*mem_27);
        __CrestLoad(88797, (unsigned long )0, (long long )111);
        __CrestApply2(88796, 12, (long long )((int const )*mem_27 == 111));
# 1609 "xmltok_impl.c"
        if ((int const )*mem_27 == 111) {
          __CrestBranch(88799, 57381, 1);
# 1610 "xmltok_impl.c"
          ptr += 2;
          {
# 1611 "xmltok_impl.c"
          mem_28 = ptr + 1;
          {
          __CrestLoad(88803, (unsigned long )mem_28, (long long )*mem_28);
          __CrestLoad(88802, (unsigned long )0, (long long )0);
          __CrestApply2(88801, 12, (long long )((int const )*mem_28 == 0));
# 1611 "xmltok_impl.c"
          if ((int const )*mem_28 == 0) {
            __CrestBranch(88804, 57385, 1);
            {
# 1611 "xmltok_impl.c"
            mem_29 = ptr + 0;
            {
            __CrestLoad(88808, (unsigned long )mem_29, (long long )*mem_29);
            __CrestLoad(88807, (unsigned long )0, (long long )115);
            __CrestApply2(88806, 12, (long long )((int const )*mem_29 == 115));
# 1611 "xmltok_impl.c"
            if ((int const )*mem_29 == 115) {
              __CrestBranch(88809, 57388, 1);
              __CrestLoad(88811, (unsigned long )0, (long long )39);
              __CrestStore(88812, (unsigned long )(& __retres30));
# 1612 "xmltok_impl.c"
              __retres30 = 39;
# 1612 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(88810, 57390, 0);

            }
            }
            }
          } else {
            __CrestBranch(88805, 57391, 0);

          }
          }
          }
        } else {
          __CrestBranch(88800, 57392, 0);

        }
        }
        }
      } else {
        __CrestBranch(88795, 57393, 0);

      }
      }
      }
    } else {
      __CrestBranch(88790, 57394, 0);

    }
    }
    }
  } else {
    __CrestBranch(88785, 57395, 0);

  }
  }
  }
# 1615 "xmltok_impl.c"
  goto switch_break___1;
  switch_break___1: ;
  }
  switch_break: ;
  }
  __CrestLoad(88813, (unsigned long )0, (long long )0);
  __CrestStore(88814, (unsigned long )(& __retres30));
# 1618 "xmltok_impl.c"
  __retres30 = 0;
  return_label:
  {
  __CrestLoad(88815, (unsigned long )(& __retres30), (long long )__retres30);
  __CrestReturn(88816);
# 1567 "xmltok_impl.c"
  return (__retres30);
  }
}
}
# 1621 "xmltok_impl.c"
static int little2_sameName(ENCODING const *enc , char const *ptr1 , char const *ptr2 )
{
  int tmp ;
  int tmp___0 ;
  char const *tmp___1 ;
  char const *tmp___2 ;
  char const *tmp___3 ;
  char const *tmp___4 ;
  char const *tmp___5 ;
  char const *tmp___6 ;
  char const *tmp___7 ;
  char const *tmp___8 ;
  char const *tmp___9 ;
  char const *tmp___10 ;
  char const *tmp___11 ;
  char const *tmp___12 ;
  int tmp___17 ;
  int tmp___18 ;
  char const *mem_24 ;
  struct normal_encoding *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  struct normal_encoding *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  int __retres32 ;

  {
  __CrestCall(88817, 896);

  {
# 1624 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1625 "xmltok_impl.c"
    mem_24 = ptr1 + 1;
    {
    __CrestLoad(88820, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(88819, (unsigned long )0, (long long )0);
    __CrestApply2(88818, 12, (long long )((int const )*mem_24 == 0));
# 1625 "xmltok_impl.c"
    if ((int const )*mem_24 == 0) {
      __CrestBranch(88821, 57407, 1);
# 1625 "xmltok_impl.c"
      mem_25 = (struct normal_encoding *)enc;
      __CrestLoad(88823, (unsigned long )(& mem_25->type[(unsigned char )*ptr1]),
                  (long long )mem_25->type[(unsigned char )*ptr1]);
      __CrestStore(88824, (unsigned long )(& tmp___0));
# 1625 "xmltok_impl.c"
      tmp___0 = (int )mem_25->type[(unsigned char )*ptr1];
    } else {
      __CrestBranch(88822, 57408, 0);
# 1625 "xmltok_impl.c"
      mem_26 = ptr1 + 1;
# 1625 "xmltok_impl.c"
      mem_27 = ptr1 + 0;
      __CrestLoad(88825, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(88826, (unsigned long )mem_27, (long long )*mem_27);
# 1625 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_26, (char )*mem_27);
      __CrestHandleReturn(88828, (long long )tmp);
      __CrestStore(88827, (unsigned long )(& tmp));
      __CrestLoad(88829, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(88830, (unsigned long )(& tmp___0));
# 1625 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(88833, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88832, (unsigned long )0, (long long )7);
    __CrestApply2(88831, 12, (long long )(tmp___0 == 7));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(88834, 57411, 1);
# 1630 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(88835, 57412, 0);

    }
    }
    {
    __CrestLoad(88838, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88837, (unsigned long )0, (long long )6);
    __CrestApply2(88836, 12, (long long )(tmp___0 == 6));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(88839, 57414, 1);
# 1630 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(88840, 57415, 0);

    }
    }
    {
    __CrestLoad(88843, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88842, (unsigned long )0, (long long )5);
    __CrestApply2(88841, 12, (long long )(tmp___0 == 5));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(88844, 57417, 1);
# 1630 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(88845, 57418, 0);

    }
    }
    {
    __CrestLoad(88848, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88847, (unsigned long )0, (long long )27);
    __CrestApply2(88846, 12, (long long )(tmp___0 == 27));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(88849, 57420, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88850, 57421, 0);

    }
    }
    {
    __CrestLoad(88853, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88852, (unsigned long )0, (long long )26);
    __CrestApply2(88851, 12, (long long )(tmp___0 == 26));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(88854, 57423, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88855, 57424, 0);

    }
    }
    {
    __CrestLoad(88858, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88857, (unsigned long )0, (long long )25);
    __CrestApply2(88856, 12, (long long )(tmp___0 == 25));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(88859, 57426, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88860, 57427, 0);

    }
    }
    {
    __CrestLoad(88863, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88862, (unsigned long )0, (long long )24);
    __CrestApply2(88861, 12, (long long )(tmp___0 == 24));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(88864, 57429, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88865, 57430, 0);

    }
    }
    {
    __CrestLoad(88868, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88867, (unsigned long )0, (long long )23);
    __CrestApply2(88866, 12, (long long )(tmp___0 == 23));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(88869, 57432, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88870, 57433, 0);

    }
    }
    {
    __CrestLoad(88873, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88872, (unsigned long )0, (long long )22);
    __CrestApply2(88871, 12, (long long )(tmp___0 == 22));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(88874, 57435, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88875, 57436, 0);

    }
    }
    {
    __CrestLoad(88878, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(88877, (unsigned long )0, (long long )29);
    __CrestApply2(88876, 12, (long long )(tmp___0 == 29));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(88879, 57438, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(88880, 57439, 0);

    }
    }
# 1660 "xmltok_impl.c"
    goto switch_default;
    case_7:
# 1630 "xmltok_impl.c"
    tmp___1 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___2 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(88883, (unsigned long )tmp___1, (long long )*tmp___1);
    __CrestLoad(88882, (unsigned long )tmp___2, (long long )*tmp___2);
    __CrestApply2(88881, 13, (long long )((int const )*tmp___1 != (int const )*tmp___2));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___1 != (int const )*tmp___2) {
      __CrestBranch(88884, 57443, 1);
      __CrestLoad(88886, (unsigned long )0, (long long )0);
      __CrestStore(88887, (unsigned long )(& __retres32));
# 1630 "xmltok_impl.c"
      __retres32 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88885, 57445, 0);

    }
    }
    case_6:
# 1630 "xmltok_impl.c"
    tmp___3 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___4 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(88890, (unsigned long )tmp___3, (long long )*tmp___3);
    __CrestLoad(88889, (unsigned long )tmp___4, (long long )*tmp___4);
    __CrestApply2(88888, 13, (long long )((int const )*tmp___3 != (int const )*tmp___4));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___3 != (int const )*tmp___4) {
      __CrestBranch(88891, 57448, 1);
      __CrestLoad(88893, (unsigned long )0, (long long )0);
      __CrestStore(88894, (unsigned long )(& __retres32));
# 1630 "xmltok_impl.c"
      __retres32 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88892, 57450, 0);

    }
    }
    case_5:
# 1630 "xmltok_impl.c"
    tmp___5 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___6 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(88897, (unsigned long )tmp___5, (long long )*tmp___5);
    __CrestLoad(88896, (unsigned long )tmp___6, (long long )*tmp___6);
    __CrestApply2(88895, 13, (long long )((int const )*tmp___5 != (int const )*tmp___6));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___5 != (int const )*tmp___6) {
      __CrestBranch(88898, 57453, 1);
      __CrestLoad(88900, (unsigned long )0, (long long )0);
      __CrestStore(88901, (unsigned long )(& __retres32));
# 1630 "xmltok_impl.c"
      __retres32 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88899, 57455, 0);

    }
    }
# 1633 "xmltok_impl.c"
    tmp___7 = ptr1;
# 1633 "xmltok_impl.c"
    ptr1 ++;
# 1633 "xmltok_impl.c"
    tmp___8 = ptr2;
# 1633 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(88904, (unsigned long )tmp___7, (long long )*tmp___7);
    __CrestLoad(88903, (unsigned long )tmp___8, (long long )*tmp___8);
    __CrestApply2(88902, 13, (long long )((int const )*tmp___7 != (int const )*tmp___8));
# 1633 "xmltok_impl.c"
    if ((int const )*tmp___7 != (int const )*tmp___8) {
      __CrestBranch(88905, 57458, 1);
      __CrestLoad(88907, (unsigned long )0, (long long )0);
      __CrestStore(88908, (unsigned long )(& __retres32));
# 1634 "xmltok_impl.c"
      __retres32 = 0;
# 1634 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88906, 57460, 0);

    }
    }
# 1635 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1645 "xmltok_impl.c"
    tmp___9 = ptr2;
# 1645 "xmltok_impl.c"
    ptr2 ++;
# 1645 "xmltok_impl.c"
    tmp___10 = ptr1;
# 1645 "xmltok_impl.c"
    ptr1 ++;
    {
    __CrestLoad(88911, (unsigned long )tmp___9, (long long )*tmp___9);
    __CrestLoad(88910, (unsigned long )tmp___10, (long long )*tmp___10);
    __CrestApply2(88909, 13, (long long )((int const )*tmp___9 != (int const )*tmp___10));
# 1645 "xmltok_impl.c"
    if ((int const )*tmp___9 != (int const )*tmp___10) {
      __CrestBranch(88912, 57464, 1);
      __CrestLoad(88914, (unsigned long )0, (long long )0);
      __CrestStore(88915, (unsigned long )(& __retres32));
# 1646 "xmltok_impl.c"
      __retres32 = 0;
# 1646 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88913, 57466, 0);

    }
    }
# 1648 "xmltok_impl.c"
    tmp___11 = ptr2;
# 1648 "xmltok_impl.c"
    ptr2 ++;
# 1648 "xmltok_impl.c"
    tmp___12 = ptr1;
# 1648 "xmltok_impl.c"
    ptr1 ++;
    {
    __CrestLoad(88918, (unsigned long )tmp___11, (long long )*tmp___11);
    __CrestLoad(88917, (unsigned long )tmp___12, (long long )*tmp___12);
    __CrestApply2(88916, 13, (long long )((int const )*tmp___11 != (int const )*tmp___12));
# 1648 "xmltok_impl.c"
    if ((int const )*tmp___11 != (int const )*tmp___12) {
      __CrestBranch(88919, 57469, 1);
      __CrestLoad(88921, (unsigned long )0, (long long )0);
      __CrestStore(88922, (unsigned long )(& __retres32));
# 1649 "xmltok_impl.c"
      __retres32 = 0;
# 1649 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(88920, 57471, 0);

    }
    }
# 1659 "xmltok_impl.c"
    goto switch_break;
    switch_default: ;
    {
# 1663 "xmltok_impl.c"
    mem_28 = ptr2 + 1;
    {
    __CrestLoad(88925, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(88924, (unsigned long )0, (long long )0);
    __CrestApply2(88923, 12, (long long )((int const )*mem_28 == 0));
# 1663 "xmltok_impl.c"
    if ((int const )*mem_28 == 0) {
      __CrestBranch(88926, 57477, 1);
# 1663 "xmltok_impl.c"
      mem_29 = (struct normal_encoding *)enc;
      __CrestLoad(88928, (unsigned long )(& mem_29->type[(unsigned char )*ptr2]),
                  (long long )mem_29->type[(unsigned char )*ptr2]);
      __CrestStore(88929, (unsigned long )(& tmp___18));
# 1663 "xmltok_impl.c"
      tmp___18 = (int )mem_29->type[(unsigned char )*ptr2];
    } else {
      __CrestBranch(88927, 57478, 0);
# 1663 "xmltok_impl.c"
      mem_30 = ptr2 + 1;
# 1663 "xmltok_impl.c"
      mem_31 = ptr2 + 0;
      __CrestLoad(88930, (unsigned long )mem_30, (long long )*mem_30);
      __CrestLoad(88931, (unsigned long )mem_31, (long long )*mem_31);
# 1663 "xmltok_impl.c"
      tmp___17 = unicode_byte_type((char )*mem_30, (char )*mem_31);
      __CrestHandleReturn(88933, (long long )tmp___17);
      __CrestStore(88932, (unsigned long )(& tmp___17));
      __CrestLoad(88934, (unsigned long )(& tmp___17), (long long )tmp___17);
      __CrestStore(88935, (unsigned long )(& tmp___18));
# 1663 "xmltok_impl.c"
      tmp___18 = tmp___17;
    }
    }
    }
    {
    {
    __CrestLoad(88938, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88937, (unsigned long )0, (long long )27);
    __CrestApply2(88936, 12, (long long )(tmp___18 == 27));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 27) {
      __CrestBranch(88939, 57481, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88940, 57482, 0);

    }
    }
    {
    __CrestLoad(88943, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88942, (unsigned long )0, (long long )26);
    __CrestApply2(88941, 12, (long long )(tmp___18 == 26));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 26) {
      __CrestBranch(88944, 57484, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88945, 57485, 0);

    }
    }
    {
    __CrestLoad(88948, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88947, (unsigned long )0, (long long )25);
    __CrestApply2(88946, 12, (long long )(tmp___18 == 25));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 25) {
      __CrestBranch(88949, 57487, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88950, 57488, 0);

    }
    }
    {
    __CrestLoad(88953, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88952, (unsigned long )0, (long long )24);
    __CrestApply2(88951, 12, (long long )(tmp___18 == 24));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 24) {
      __CrestBranch(88954, 57490, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88955, 57491, 0);

    }
    }
    {
    __CrestLoad(88958, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88957, (unsigned long )0, (long long )23);
    __CrestApply2(88956, 12, (long long )(tmp___18 == 23));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 23) {
      __CrestBranch(88959, 57493, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88960, 57494, 0);

    }
    }
    {
    __CrestLoad(88963, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88962, (unsigned long )0, (long long )22);
    __CrestApply2(88961, 12, (long long )(tmp___18 == 22));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 22) {
      __CrestBranch(88964, 57496, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88965, 57497, 0);

    }
    }
    {
    __CrestLoad(88968, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88967, (unsigned long )0, (long long )29);
    __CrestApply2(88966, 12, (long long )(tmp___18 == 29));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 29) {
      __CrestBranch(88969, 57499, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88970, 57500, 0);

    }
    }
    {
    __CrestLoad(88973, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88972, (unsigned long )0, (long long )7);
    __CrestApply2(88971, 12, (long long )(tmp___18 == 7));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 7) {
      __CrestBranch(88974, 57502, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88975, 57503, 0);

    }
    }
    {
    __CrestLoad(88978, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88977, (unsigned long )0, (long long )6);
    __CrestApply2(88976, 12, (long long )(tmp___18 == 6));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 6) {
      __CrestBranch(88979, 57505, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88980, 57506, 0);

    }
    }
    {
    __CrestLoad(88983, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(88982, (unsigned long )0, (long long )5);
    __CrestApply2(88981, 12, (long long )(tmp___18 == 5));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 5) {
      __CrestBranch(88984, 57508, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(88985, 57509, 0);

    }
    }
# 1677 "xmltok_impl.c"
    goto switch_default___0;
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___0:
    case_23___0:
    case_22___0:
    case_29___0:
    case_7___0:
    case_6___0:
    case_5___0:
    __CrestLoad(88986, (unsigned long )0, (long long )0);
    __CrestStore(88987, (unsigned long )(& __retres32));
# 1676 "xmltok_impl.c"
    __retres32 = 0;
# 1676 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
    __CrestLoad(88988, (unsigned long )0, (long long )1);
    __CrestStore(88989, (unsigned long )(& __retres32));
# 1678 "xmltok_impl.c"
    __retres32 = 1;
# 1678 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(88990, (unsigned long )(& __retres32), (long long )__retres32);
  __CrestReturn(88991);
# 1621 "xmltok_impl.c"
  return (__retres32);
  }
}
}
# 1685 "xmltok_impl.c"
static int little2_nameMatchesAscii(ENCODING const *enc , char const *ptr1 , char const *end1 ,
                                    char const *ptr2 )
{
  char const *mem_5 ;
  char const *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(88992, 897);

  {
# 1689 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(88995, (unsigned long )ptr2, (long long )*ptr2);
    __CrestLoad(88994, (unsigned long )0, (long long )0);
    __CrestApply2(88993, 13, (long long )(*ptr2 != 0));
# 1689 "xmltok_impl.c"
    if (*ptr2 != 0) {
      __CrestBranch(88996, 57523, 1);

    } else {
      __CrestBranch(88997, 57524, 0);
# 1689 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(89000, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
    __CrestLoad(88999, (unsigned long )(& end1), (long long )((unsigned long )end1));
    __CrestApply2(88998, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
# 1690 "xmltok_impl.c"
    if ((unsigned long )ptr1 == (unsigned long )end1) {
      __CrestBranch(89001, 57526, 1);
      __CrestLoad(89003, (unsigned long )0, (long long )0);
      __CrestStore(89004, (unsigned long )(& __retres7));
# 1691 "xmltok_impl.c"
      __retres7 = 0;
# 1691 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89002, 57528, 0);

    }
    }
    {
# 1692 "xmltok_impl.c"
    mem_5 = ptr1 + 1;
    {
    __CrestLoad(89007, (unsigned long )mem_5, (long long )*mem_5);
    __CrestLoad(89006, (unsigned long )0, (long long )0);
    __CrestApply2(89005, 12, (long long )((int const )*mem_5 == 0));
# 1692 "xmltok_impl.c"
    if ((int const )*mem_5 == 0) {
      __CrestBranch(89008, 57532, 1);
      {
# 1692 "xmltok_impl.c"
      mem_6 = ptr1 + 0;
      {
      __CrestLoad(89012, (unsigned long )mem_6, (long long )*mem_6);
      __CrestLoad(89011, (unsigned long )ptr2, (long long )*ptr2);
      __CrestApply2(89010, 12, (long long )((int const )*mem_6 == (int const )*ptr2));
# 1692 "xmltok_impl.c"
      if ((int const )*mem_6 == (int const )*ptr2) {
        __CrestBranch(89013, 57535, 1);

      } else {
        __CrestBranch(89014, 57536, 0);
        __CrestLoad(89015, (unsigned long )0, (long long )0);
        __CrestStore(89016, (unsigned long )(& __retres7));
# 1693 "xmltok_impl.c"
        __retres7 = 0;
# 1693 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(89009, 57538, 0);
      __CrestLoad(89017, (unsigned long )0, (long long )0);
      __CrestStore(89018, (unsigned long )(& __retres7));
# 1693 "xmltok_impl.c"
      __retres7 = 0;
# 1693 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 1689 "xmltok_impl.c"
    ptr1 += 2;
# 1689 "xmltok_impl.c"
    ptr2 ++;
  }
  while_break: ;
  }
  __CrestLoad(89021, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
  __CrestLoad(89020, (unsigned long )(& end1), (long long )((unsigned long )end1));
  __CrestApply2(89019, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
  __CrestStore(89022, (unsigned long )(& __retres7));
# 1695 "xmltok_impl.c"
  __retres7 = (unsigned long )ptr1 == (unsigned long )end1;
  return_label:
  {
  __CrestLoad(89023, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(89024);
# 1685 "xmltok_impl.c"
  return (__retres7);
  }
}
}
# 1698 "xmltok_impl.c"
static int little2_nameLength(ENCODING const *enc , char const *ptr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  char const *mem_6 ;
  struct normal_encoding *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  int __retres10 ;

  {
  __CrestCall(89025, 898);
# 1701 "xmltok_impl.c"
  start = ptr;
  {
# 1702 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1703 "xmltok_impl.c"
    mem_6 = ptr + 1;
    {
    __CrestLoad(89028, (unsigned long )mem_6, (long long )*mem_6);
    __CrestLoad(89027, (unsigned long )0, (long long )0);
    __CrestApply2(89026, 12, (long long )((int const )*mem_6 == 0));
# 1703 "xmltok_impl.c"
    if ((int const )*mem_6 == 0) {
      __CrestBranch(89029, 57551, 1);
# 1703 "xmltok_impl.c"
      mem_7 = (struct normal_encoding *)enc;
      __CrestLoad(89031, (unsigned long )(& mem_7->type[(unsigned char )*ptr]), (long long )mem_7->type[(unsigned char )*ptr]);
      __CrestStore(89032, (unsigned long )(& tmp___0));
# 1703 "xmltok_impl.c"
      tmp___0 = (int )mem_7->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(89030, 57552, 0);
# 1703 "xmltok_impl.c"
      mem_8 = ptr + 1;
# 1703 "xmltok_impl.c"
      mem_9 = ptr + 0;
      __CrestLoad(89033, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(89034, (unsigned long )mem_9, (long long )*mem_9);
# 1703 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_8, (char )*mem_9);
      __CrestHandleReturn(89036, (long long )tmp);
      __CrestStore(89035, (unsigned long )(& tmp));
      __CrestLoad(89037, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(89038, (unsigned long )(& tmp___0));
# 1703 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(89041, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89040, (unsigned long )0, (long long )5);
    __CrestApply2(89039, 12, (long long )(tmp___0 == 5));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(89042, 57555, 1);
# 1706 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(89043, 57556, 0);

    }
    }
    {
    __CrestLoad(89046, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89045, (unsigned long )0, (long long )6);
    __CrestApply2(89044, 12, (long long )(tmp___0 == 6));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(89047, 57558, 1);
# 1706 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(89048, 57559, 0);

    }
    }
    {
    __CrestLoad(89051, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89050, (unsigned long )0, (long long )7);
    __CrestApply2(89049, 12, (long long )(tmp___0 == 7));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(89052, 57561, 1);
# 1706 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(89053, 57562, 0);

    }
    }
    {
    __CrestLoad(89056, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89055, (unsigned long )0, (long long )27);
    __CrestApply2(89054, 12, (long long )(tmp___0 == 27));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(89057, 57564, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89058, 57565, 0);

    }
    }
    {
    __CrestLoad(89061, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89060, (unsigned long )0, (long long )26);
    __CrestApply2(89059, 12, (long long )(tmp___0 == 26));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(89062, 57567, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89063, 57568, 0);

    }
    }
    {
    __CrestLoad(89066, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89065, (unsigned long )0, (long long )25);
    __CrestApply2(89064, 12, (long long )(tmp___0 == 25));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(89067, 57570, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89068, 57571, 0);

    }
    }
    {
    __CrestLoad(89071, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89070, (unsigned long )0, (long long )24);
    __CrestApply2(89069, 12, (long long )(tmp___0 == 24));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(89072, 57573, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89073, 57574, 0);

    }
    }
    {
    __CrestLoad(89076, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89075, (unsigned long )0, (long long )23);
    __CrestApply2(89074, 12, (long long )(tmp___0 == 23));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(89077, 57576, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89078, 57577, 0);

    }
    }
    {
    __CrestLoad(89081, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89080, (unsigned long )0, (long long )22);
    __CrestApply2(89079, 12, (long long )(tmp___0 == 22));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(89082, 57579, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89083, 57580, 0);

    }
    }
    {
    __CrestLoad(89086, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89085, (unsigned long )0, (long long )29);
    __CrestApply2(89084, 12, (long long )(tmp___0 == 29));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(89087, 57582, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89088, 57583, 0);

    }
    }
# 1719 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1706 "xmltok_impl.c"
    ptr += 2;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1706 "xmltok_impl.c"
    ptr += 3;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1706 "xmltok_impl.c"
    ptr += 4;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1717 "xmltok_impl.c"
    ptr += 2;
# 1718 "xmltok_impl.c"
    goto switch_break;
    switch_default:
    __CrestLoad(89091, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89090, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(89089, 18, (long long )(ptr - start));
    __CrestStore(89092, (unsigned long )(& __retres10));
# 1720 "xmltok_impl.c"
    __retres10 = (int )(ptr - start);
# 1720 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(89093, (unsigned long )(& __retres10), (long long )__retres10);
  __CrestReturn(89094);
# 1698 "xmltok_impl.c"
  return (__retres10);
  }
}
}
# 1725 "xmltok_impl.c"
static char const *little2_skipS(ENCODING const *enc , char const *ptr )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_5 ;
  struct normal_encoding *mem_6 ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *__retres9 ;

  {
  __CrestCall(89095, 899);

  {
# 1728 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1729 "xmltok_impl.c"
    mem_5 = ptr + 1;
    {
    __CrestLoad(89098, (unsigned long )mem_5, (long long )*mem_5);
    __CrestLoad(89097, (unsigned long )0, (long long )0);
    __CrestApply2(89096, 12, (long long )((int const )*mem_5 == 0));
# 1729 "xmltok_impl.c"
    if ((int const )*mem_5 == 0) {
      __CrestBranch(89099, 57604, 1);
# 1729 "xmltok_impl.c"
      mem_6 = (struct normal_encoding *)enc;
      __CrestLoad(89101, (unsigned long )(& mem_6->type[(unsigned char )*ptr]), (long long )mem_6->type[(unsigned char )*ptr]);
      __CrestStore(89102, (unsigned long )(& tmp___0));
# 1729 "xmltok_impl.c"
      tmp___0 = (int )mem_6->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(89100, 57605, 0);
# 1729 "xmltok_impl.c"
      mem_7 = ptr + 1;
# 1729 "xmltok_impl.c"
      mem_8 = ptr + 0;
      __CrestLoad(89103, (unsigned long )mem_7, (long long )*mem_7);
      __CrestLoad(89104, (unsigned long )mem_8, (long long )*mem_8);
# 1729 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_7, (char )*mem_8);
      __CrestHandleReturn(89106, (long long )tmp);
      __CrestStore(89105, (unsigned long )(& tmp));
      __CrestLoad(89107, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(89108, (unsigned long )(& tmp___0));
# 1729 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(89111, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89110, (unsigned long )0, (long long )21);
    __CrestApply2(89109, 12, (long long )(tmp___0 == 21));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(89112, 57608, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(89113, 57609, 0);

    }
    }
    {
    __CrestLoad(89116, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89115, (unsigned long )0, (long long )9);
    __CrestApply2(89114, 12, (long long )(tmp___0 == 9));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(89117, 57611, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(89118, 57612, 0);

    }
    }
    {
    __CrestLoad(89121, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89120, (unsigned long )0, (long long )10);
    __CrestApply2(89119, 12, (long long )(tmp___0 == 10));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(89122, 57614, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(89123, 57615, 0);

    }
    }
# 1735 "xmltok_impl.c"
    goto switch_default;
    case_21:
    case_9:
    case_10:
# 1733 "xmltok_impl.c"
    ptr += 2;
# 1734 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1736 "xmltok_impl.c"
    __retres9 = ptr;
# 1736 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestReturn(89124);
# 1725 "xmltok_impl.c"
  return (__retres9);
  }
}
}
# 1741 "xmltok_impl.c"
static void little2_updatePosition(ENCODING const *enc , char const *ptr , char const *end ,
                                   POSITION *pos )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  struct normal_encoding *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  struct normal_encoding *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;

  {
  __CrestCall(89125, 900);

  {
# 1747 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(89128, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89127, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89126, 16, (long long )((unsigned long )ptr < (unsigned long )end));
# 1747 "xmltok_impl.c"
    if ((unsigned long )ptr < (unsigned long )end) {
      __CrestBranch(89129, 57628, 1);

    } else {
      __CrestBranch(89130, 57629, 0);
# 1747 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1748 "xmltok_impl.c"
    mem_9 = ptr + 1;
    {
    __CrestLoad(89133, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(89132, (unsigned long )0, (long long )0);
    __CrestApply2(89131, 12, (long long )((int const )*mem_9 == 0));
# 1748 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(89134, 57633, 1);
# 1748 "xmltok_impl.c"
      mem_10 = (struct normal_encoding *)enc;
      __CrestLoad(89136, (unsigned long )(& mem_10->type[(unsigned char )*ptr]), (long long )mem_10->type[(unsigned char )*ptr]);
      __CrestStore(89137, (unsigned long )(& tmp___0));
# 1748 "xmltok_impl.c"
      tmp___0 = (int )mem_10->type[(unsigned char )*ptr];
    } else {
      __CrestBranch(89135, 57634, 0);
# 1748 "xmltok_impl.c"
      mem_11 = ptr + 1;
# 1748 "xmltok_impl.c"
      mem_12 = ptr + 0;
      __CrestLoad(89138, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(89139, (unsigned long )mem_12, (long long )*mem_12);
# 1748 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_11, (char )*mem_12);
      __CrestHandleReturn(89141, (long long )tmp);
      __CrestStore(89140, (unsigned long )(& tmp));
      __CrestLoad(89142, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(89143, (unsigned long )(& tmp___0));
# 1748 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(89146, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89145, (unsigned long )0, (long long )5);
    __CrestApply2(89144, 12, (long long )(tmp___0 == 5));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(89147, 57637, 1);
# 1753 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(89148, 57638, 0);

    }
    }
    {
    __CrestLoad(89151, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89150, (unsigned long )0, (long long )6);
    __CrestApply2(89149, 12, (long long )(tmp___0 == 6));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(89152, 57640, 1);
# 1753 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(89153, 57641, 0);

    }
    }
    {
    __CrestLoad(89156, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89155, (unsigned long )0, (long long )7);
    __CrestApply2(89154, 12, (long long )(tmp___0 == 7));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(89157, 57643, 1);
# 1753 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(89158, 57644, 0);

    }
    }
    {
    __CrestLoad(89161, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89160, (unsigned long )0, (long long )10);
    __CrestApply2(89159, 12, (long long )(tmp___0 == 10));
# 1755 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(89162, 57646, 1);
# 1755 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(89163, 57647, 0);

    }
    }
    {
    __CrestLoad(89166, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(89165, (unsigned long )0, (long long )9);
    __CrestApply2(89164, 12, (long long )(tmp___0 == 9));
# 1760 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(89167, 57649, 1);
# 1760 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(89168, 57650, 0);

    }
    }
# 1767 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1753 "xmltok_impl.c"
    ptr += 2;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1753 "xmltok_impl.c"
    ptr += 3;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1753 "xmltok_impl.c"
    ptr += 4;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_10:
    __CrestLoad(89169, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(89170, (unsigned long )(& pos->columnNumber));
# 1756 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
    __CrestLoad(89173, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(89172, (unsigned long )0, (long long )1UL);
    __CrestApply2(89171, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(89174, (unsigned long )(& pos->lineNumber));
# 1757 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1758 "xmltok_impl.c"
    ptr += 2;
# 1759 "xmltok_impl.c"
    goto switch_break;
    case_9:
    __CrestLoad(89177, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(89176, (unsigned long )0, (long long )1UL);
    __CrestApply2(89175, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(89178, (unsigned long )(& pos->lineNumber));
# 1761 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1762 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(89181, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89180, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89179, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1763 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(89182, 57662, 1);
      {
# 1763 "xmltok_impl.c"
      mem_13 = ptr + 1;
      {
      __CrestLoad(89186, (unsigned long )mem_13, (long long )*mem_13);
      __CrestLoad(89185, (unsigned long )0, (long long )0);
      __CrestApply2(89184, 12, (long long )((int const )*mem_13 == 0));
# 1763 "xmltok_impl.c"
      if ((int const )*mem_13 == 0) {
        __CrestBranch(89187, 57665, 1);
# 1763 "xmltok_impl.c"
        mem_14 = (struct normal_encoding *)enc;
        __CrestLoad(89189, (unsigned long )(& mem_14->type[(unsigned char )*ptr]),
                    (long long )mem_14->type[(unsigned char )*ptr]);
        __CrestStore(89190, (unsigned long )(& tmp___2));
# 1763 "xmltok_impl.c"
        tmp___2 = (int )mem_14->type[(unsigned char )*ptr];
      } else {
        __CrestBranch(89188, 57666, 0);
# 1763 "xmltok_impl.c"
        mem_15 = ptr + 1;
# 1763 "xmltok_impl.c"
        mem_16 = ptr + 0;
        __CrestLoad(89191, (unsigned long )mem_15, (long long )*mem_15);
        __CrestLoad(89192, (unsigned long )mem_16, (long long )*mem_16);
# 1763 "xmltok_impl.c"
        tmp___1 = unicode_byte_type((char )*mem_15, (char )*mem_16);
        __CrestHandleReturn(89194, (long long )tmp___1);
        __CrestStore(89193, (unsigned long )(& tmp___1));
        __CrestLoad(89195, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(89196, (unsigned long )(& tmp___2));
# 1763 "xmltok_impl.c"
        tmp___2 = tmp___1;
      }
      }
      }
      {
      __CrestLoad(89199, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(89198, (unsigned long )0, (long long )10);
      __CrestApply2(89197, 12, (long long )(tmp___2 == 10));
# 1763 "xmltok_impl.c"
      if (tmp___2 == 10) {
        __CrestBranch(89200, 57668, 1);
# 1764 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(89201, 57669, 0);

      }
      }
    } else {
      __CrestBranch(89183, 57670, 0);

    }
    }
    __CrestLoad(89202, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(89203, (unsigned long )(& pos->columnNumber));
# 1765 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
# 1766 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1768 "xmltok_impl.c"
    ptr += 2;
# 1769 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    __CrestLoad(89206, (unsigned long )(& pos->columnNumber), (long long )pos->columnNumber);
    __CrestLoad(89205, (unsigned long )0, (long long )1UL);
    __CrestApply2(89204, 0, (long long )(pos->columnNumber + 1UL));
    __CrestStore(89207, (unsigned long )(& pos->columnNumber));
# 1771 "xmltok_impl.c"
    (pos->columnNumber) ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(89208);
# 1741 "xmltok_impl.c"
  return;
  }
}
}
# 717 "xmltok.c"
static struct normal_encoding const little2_encoding_ns =
# 717 "xmltok.c"
     {{{& little2_prologTok, & little2_contentTok, & little2_cdataSectionTok, & little2_ignoreSectionTok},
     {& little2_attributeValueTok, & little2_entityValueTok}, & little2_sameName,
     & little2_nameMatchesAscii, & little2_nameLength, & little2_skipS, & little2_getAtts,
     & little2_charRefNumber, & little2_predefinedEntityName, & little2_updatePosition,
     & little2_isPublicId, & little2_toUtf8, & little2_toUtf16, 2, (char)0, (char)1},
    {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)21,
     (unsigned char)10, (unsigned char)0, (unsigned char)0, (unsigned char)9, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)16, (unsigned char)12,
     (unsigned char)19, (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
     (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34, (unsigned char)35,
     (unsigned char)27, (unsigned char)26, (unsigned char)17, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)23, (unsigned char)18,
     (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15, (unsigned char)28,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)20, (unsigned char)28, (unsigned char)4, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)36,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22}, (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                                                    char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 734 "xmltok.c"
static struct normal_encoding const little2_encoding =
# 734 "xmltok.c"
     {{{& little2_prologTok, & little2_contentTok, & little2_cdataSectionTok, & little2_ignoreSectionTok},
     {& little2_attributeValueTok, & little2_entityValueTok}, & little2_sameName,
     & little2_nameMatchesAscii, & little2_nameLength, & little2_skipS, & little2_getAtts,
     & little2_charRefNumber, & little2_predefinedEntityName, & little2_updatePosition,
     & little2_isPublicId, & little2_toUtf8, & little2_toUtf16, 2, (char)0, (char)1},
    {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)21,
     (unsigned char)10, (unsigned char)0, (unsigned char)0, (unsigned char)9, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)16, (unsigned char)12,
     (unsigned char)19, (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
     (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34, (unsigned char)35,
     (unsigned char)27, (unsigned char)26, (unsigned char)17, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)22, (unsigned char)18,
     (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15, (unsigned char)28,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)20, (unsigned char)28, (unsigned char)4, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)36,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22}, (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                                                    char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 755 "xmltok.c"
static struct normal_encoding const internal_little2_encoding_ns =
# 755 "xmltok.c"
     {{{& little2_prologTok, & little2_contentTok, & little2_cdataSectionTok, & little2_ignoreSectionTok},
     {& little2_attributeValueTok, & little2_entityValueTok}, & little2_sameName,
     & little2_nameMatchesAscii, & little2_nameLength, & little2_skipS, & little2_getAtts,
     & little2_charRefNumber, & little2_predefinedEntityName, & little2_updatePosition,
     & little2_isPublicId, & little2_toUtf8, & little2_toUtf16, 2, (char)0, (char)1},
    {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)21,
     (unsigned char)10, (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)16, (unsigned char)12,
     (unsigned char)19, (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
     (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34, (unsigned char)35,
     (unsigned char)27, (unsigned char)26, (unsigned char)17, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)23, (unsigned char)18,
     (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15, (unsigned char)28,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)20, (unsigned char)28, (unsigned char)4, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)36,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22}, (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                                                    char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 766 "xmltok.c"
static struct normal_encoding const internal_little2_encoding =
# 766 "xmltok.c"
     {{{& little2_prologTok, & little2_contentTok, & little2_cdataSectionTok, & little2_ignoreSectionTok},
     {& little2_attributeValueTok, & little2_entityValueTok}, & little2_sameName,
     & little2_nameMatchesAscii, & little2_nameLength, & little2_skipS, & little2_getAtts,
     & little2_charRefNumber, & little2_predefinedEntityName, & little2_updatePosition,
     & little2_isPublicId, & little2_toUtf8, & little2_toUtf16, 2, (char)0, (char)1},
    {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)21,
     (unsigned char)10, (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
     (unsigned char)0, (unsigned char)0, (unsigned char)21, (unsigned char)16, (unsigned char)12,
     (unsigned char)19, (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
     (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34, (unsigned char)35,
     (unsigned char)27, (unsigned char)26, (unsigned char)17, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
     (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)22, (unsigned char)18,
     (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15, (unsigned char)28,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)20, (unsigned char)28, (unsigned char)4, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
     (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)36,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26, (unsigned char)28,
     (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)28, (unsigned char)28,
     (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)28, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)28, (unsigned char)22, (unsigned char)22,
     (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
     (unsigned char)22}, (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                                                    char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 92 "xmltok_impl.c"
static int big2_scanComment(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  int __retres18 ;

  {
  __CrestCall(89209, 901);

  {
  __CrestLoad(89212, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(89211, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(89210, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 96 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(89213, 57681, 1);
    {
# 97 "xmltok_impl.c"
    mem_7 = ptr + 0;
    {
    __CrestLoad(89217, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(89216, (unsigned long )0, (long long )0);
    __CrestApply2(89215, 12, (long long )((int const )*mem_7 == 0));
# 97 "xmltok_impl.c"
    if ((int const )*mem_7 == 0) {
      __CrestBranch(89218, 57684, 1);
      {
# 97 "xmltok_impl.c"
      mem_8 = ptr + 1;
      {
      __CrestLoad(89222, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(89221, (unsigned long )0, (long long )45);
      __CrestApply2(89220, 12, (long long )((int const )*mem_8 == 45));
# 97 "xmltok_impl.c"
      if ((int const )*mem_8 == 45) {
        __CrestBranch(89223, 57687, 1);

      } else {
        __CrestBranch(89224, 57688, 0);
# 98 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(89225, (unsigned long )0, (long long )0);
        __CrestStore(89226, (unsigned long )(& __retres18));
# 99 "xmltok_impl.c"
        __retres18 = 0;
# 99 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(89219, 57691, 0);
# 98 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89227, (unsigned long )0, (long long )0);
      __CrestStore(89228, (unsigned long )(& __retres18));
# 99 "xmltok_impl.c"
      __retres18 = 0;
# 99 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 101 "xmltok_impl.c"
    ptr += 2;
    {
# 102 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(89231, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(89230, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(89229, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 102 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(89232, 57699, 1);

      } else {
        __CrestBranch(89233, 57700, 0);
# 102 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 103 "xmltok_impl.c"
      mem_9 = ptr + 0;
      {
      __CrestLoad(89236, (unsigned long )mem_9, (long long )*mem_9);
      __CrestLoad(89235, (unsigned long )0, (long long )0);
      __CrestApply2(89234, 12, (long long )((int const )*mem_9 == 0));
# 103 "xmltok_impl.c"
      if ((int const )*mem_9 == 0) {
        __CrestBranch(89237, 57704, 1);
# 103 "xmltok_impl.c"
        mem_10 = ptr + 1;
# 103 "xmltok_impl.c"
        mem_11 = (struct normal_encoding *)enc;
        __CrestLoad(89239, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                    (long long )mem_11->type[(unsigned char )*mem_10]);
        __CrestStore(89240, (unsigned long )(& tmp___0));
# 103 "xmltok_impl.c"
        tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
      } else {
        __CrestBranch(89238, 57705, 0);
# 103 "xmltok_impl.c"
        mem_12 = ptr + 0;
# 103 "xmltok_impl.c"
        mem_13 = ptr + 1;
        __CrestLoad(89241, (unsigned long )mem_12, (long long )*mem_12);
        __CrestLoad(89242, (unsigned long )mem_13, (long long )*mem_13);
# 103 "xmltok_impl.c"
        tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
        __CrestHandleReturn(89244, (long long )tmp);
        __CrestStore(89243, (unsigned long )(& tmp));
        __CrestLoad(89245, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(89246, (unsigned long )(& tmp___0));
# 103 "xmltok_impl.c"
        tmp___0 = tmp;
      }
      }
      }
      {
      {
      __CrestLoad(89249, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89248, (unsigned long )0, (long long )5);
      __CrestApply2(89247, 12, (long long )(tmp___0 == 5));
# 104 "xmltok_impl.c"
      if (tmp___0 == 5) {
        __CrestBranch(89250, 57708, 1);
# 104 "xmltok_impl.c"
        goto case_5;
      } else {
        __CrestBranch(89251, 57709, 0);

      }
      }
      {
      __CrestLoad(89254, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89253, (unsigned long )0, (long long )6);
      __CrestApply2(89252, 12, (long long )(tmp___0 == 6));
# 104 "xmltok_impl.c"
      if (tmp___0 == 6) {
        __CrestBranch(89255, 57711, 1);
# 104 "xmltok_impl.c"
        goto case_6;
      } else {
        __CrestBranch(89256, 57712, 0);

      }
      }
      {
      __CrestLoad(89259, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89258, (unsigned long )0, (long long )7);
      __CrestApply2(89257, 12, (long long )(tmp___0 == 7));
# 104 "xmltok_impl.c"
      if (tmp___0 == 7) {
        __CrestBranch(89260, 57714, 1);
# 104 "xmltok_impl.c"
        goto case_7;
      } else {
        __CrestBranch(89261, 57715, 0);

      }
      }
      {
      __CrestLoad(89264, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89263, (unsigned long )0, (long long )8);
      __CrestApply2(89262, 12, (long long )(tmp___0 == 8));
# 104 "xmltok_impl.c"
      if (tmp___0 == 8) {
        __CrestBranch(89265, 57717, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89266, 57718, 0);

      }
      }
      {
      __CrestLoad(89269, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89268, (unsigned long )0, (long long )1);
      __CrestApply2(89267, 12, (long long )(tmp___0 == 1));
# 104 "xmltok_impl.c"
      if (tmp___0 == 1) {
        __CrestBranch(89270, 57720, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89271, 57721, 0);

      }
      }
      {
      __CrestLoad(89274, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89273, (unsigned long )0, (long long )0);
      __CrestApply2(89272, 12, (long long )(tmp___0 == 0));
# 104 "xmltok_impl.c"
      if (tmp___0 == 0) {
        __CrestBranch(89275, 57723, 1);
# 104 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89276, 57724, 0);

      }
      }
      {
      __CrestLoad(89279, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(89278, (unsigned long )0, (long long )27);
      __CrestApply2(89277, 12, (long long )(tmp___0 == 27));
# 105 "xmltok_impl.c"
      if (tmp___0 == 27) {
        __CrestBranch(89280, 57726, 1);
# 105 "xmltok_impl.c"
        goto case_27;
      } else {
        __CrestBranch(89281, 57727, 0);

      }
      }
# 119 "xmltok_impl.c"
      goto switch_default;
      case_5:
      {
      __CrestLoad(89286, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89285, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89284, 18, (long long )(end - ptr));
      __CrestLoad(89283, (unsigned long )0, (long long )2L);
      __CrestApply2(89282, 16, (long long )(end - ptr < 2L));
# 104 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(89287, 57730, 1);
        __CrestLoad(89289, (unsigned long )0, (long long )-2);
        __CrestStore(89290, (unsigned long )(& __retres18));
# 104 "xmltok_impl.c"
        __retres18 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89288, 57732, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 2;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_6:
      {
      __CrestLoad(89295, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89294, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89293, 18, (long long )(end - ptr));
      __CrestLoad(89292, (unsigned long )0, (long long )3L);
      __CrestApply2(89291, 16, (long long )(end - ptr < 3L));
# 104 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(89296, 57736, 1);
        __CrestLoad(89298, (unsigned long )0, (long long )-2);
        __CrestStore(89299, (unsigned long )(& __retres18));
# 104 "xmltok_impl.c"
        __retres18 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89297, 57738, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 3;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_7:
      {
      __CrestLoad(89304, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89303, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89302, 18, (long long )(end - ptr));
      __CrestLoad(89301, (unsigned long )0, (long long )4L);
      __CrestApply2(89300, 16, (long long )(end - ptr < 4L));
# 104 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(89305, 57742, 1);
        __CrestLoad(89307, (unsigned long )0, (long long )-2);
        __CrestStore(89308, (unsigned long )(& __retres18));
# 104 "xmltok_impl.c"
        __retres18 = -2;
# 104 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89306, 57744, 0);

      }
      }
# 104 "xmltok_impl.c"
      ptr += 4;
# 104 "xmltok_impl.c"
      goto switch_break;
      case_8:
      case_1:
      case_0:
# 104 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89309, (unsigned long )0, (long long )0);
      __CrestStore(89310, (unsigned long )(& __retres18));
# 104 "xmltok_impl.c"
      __retres18 = 0;
# 104 "xmltok_impl.c"
      goto return_label;
      case_27:
# 106 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(89313, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(89312, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(89311, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 106 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(89314, 57752, 1);
        __CrestLoad(89316, (unsigned long )0, (long long )-1);
        __CrestStore(89317, (unsigned long )(& __retres18));
# 107 "xmltok_impl.c"
        __retres18 = -1;
# 107 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89315, 57754, 0);

      }
      }
      {
# 108 "xmltok_impl.c"
      mem_14 = ptr + 0;
      {
      __CrestLoad(89320, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(89319, (unsigned long )0, (long long )0);
      __CrestApply2(89318, 12, (long long )((int const )*mem_14 == 0));
# 108 "xmltok_impl.c"
      if ((int const )*mem_14 == 0) {
        __CrestBranch(89321, 57758, 1);
        {
# 108 "xmltok_impl.c"
        mem_15 = ptr + 1;
        {
        __CrestLoad(89325, (unsigned long )mem_15, (long long )*mem_15);
        __CrestLoad(89324, (unsigned long )0, (long long )45);
        __CrestApply2(89323, 12, (long long )((int const )*mem_15 == 45));
# 108 "xmltok_impl.c"
        if ((int const )*mem_15 == 45) {
          __CrestBranch(89326, 57761, 1);
# 109 "xmltok_impl.c"
          ptr += 2;
          {
          __CrestLoad(89330, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
          __CrestLoad(89329, (unsigned long )(& end), (long long )((unsigned long )end));
          __CrestApply2(89328, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 109 "xmltok_impl.c"
          if ((unsigned long )ptr == (unsigned long )end) {
            __CrestBranch(89331, 57763, 1);
            __CrestLoad(89333, (unsigned long )0, (long long )-1);
            __CrestStore(89334, (unsigned long )(& __retres18));
# 110 "xmltok_impl.c"
            __retres18 = -1;
# 110 "xmltok_impl.c"
            goto return_label;
          } else {
            __CrestBranch(89332, 57765, 0);

          }
          }
          {
# 111 "xmltok_impl.c"
          mem_16 = ptr + 0;
          {
          __CrestLoad(89337, (unsigned long )mem_16, (long long )*mem_16);
          __CrestLoad(89336, (unsigned long )0, (long long )0);
          __CrestApply2(89335, 12, (long long )((int const )*mem_16 == 0));
# 111 "xmltok_impl.c"
          if ((int const )*mem_16 == 0) {
            __CrestBranch(89338, 57769, 1);
            {
# 111 "xmltok_impl.c"
            mem_17 = ptr + 1;
            {
            __CrestLoad(89342, (unsigned long )mem_17, (long long )*mem_17);
            __CrestLoad(89341, (unsigned long )0, (long long )62);
            __CrestApply2(89340, 12, (long long )((int const )*mem_17 == 62));
# 111 "xmltok_impl.c"
            if ((int const )*mem_17 == 62) {
              __CrestBranch(89343, 57772, 1);

            } else {
              __CrestBranch(89344, 57773, 0);
# 112 "xmltok_impl.c"
              *nextTokPtr = ptr;
              __CrestLoad(89345, (unsigned long )0, (long long )0);
              __CrestStore(89346, (unsigned long )(& __retres18));
# 113 "xmltok_impl.c"
              __retres18 = 0;
# 113 "xmltok_impl.c"
              goto return_label;
            }
            }
            }
          } else {
            __CrestBranch(89339, 57776, 0);
# 112 "xmltok_impl.c"
            *nextTokPtr = ptr;
            __CrestLoad(89347, (unsigned long )0, (long long )0);
            __CrestStore(89348, (unsigned long )(& __retres18));
# 113 "xmltok_impl.c"
            __retres18 = 0;
# 113 "xmltok_impl.c"
            goto return_label;
          }
          }
          }
# 115 "xmltok_impl.c"
          *nextTokPtr = ptr + 2;
          __CrestLoad(89349, (unsigned long )0, (long long )13);
          __CrestStore(89350, (unsigned long )(& __retres18));
# 116 "xmltok_impl.c"
          __retres18 = 13;
# 116 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(89327, 57782, 0);

        }
        }
        }
      } else {
        __CrestBranch(89322, 57783, 0);

      }
      }
      }
# 118 "xmltok_impl.c"
      goto switch_break;
      switch_default:
# 120 "xmltok_impl.c"
      ptr += 2;
# 121 "xmltok_impl.c"
      goto switch_break;
      switch_break: ;
      }
    }
    while_break: ;
    }
  } else {
    __CrestBranch(89214, 57789, 0);

  }
  }
  __CrestLoad(89351, (unsigned long )0, (long long )-1);
  __CrestStore(89352, (unsigned long )(& __retres18));
# 125 "xmltok_impl.c"
  __retres18 = -1;
  return_label:
  {
  __CrestLoad(89353, (unsigned long )(& __retres18), (long long )__retres18);
  __CrestReturn(89354);
# 92 "xmltok_impl.c"
  return (__retres18);
  }
}
}
# 130 "xmltok_impl.c"
static int big2_scanDecl(ENCODING const *enc , char const *ptr , char const *end ,
                         char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char const *mem_12 ;
  char const *mem_13 ;
  struct normal_encoding *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  struct normal_encoding *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  int __retres27 ;

  {
  __CrestCall(89355, 902);

  {
  __CrestLoad(89358, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(89357, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(89356, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 134 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(89359, 57793, 1);
    __CrestLoad(89361, (unsigned long )0, (long long )-1);
    __CrestStore(89362, (unsigned long )(& __retres27));
# 135 "xmltok_impl.c"
    __retres27 = -1;
# 135 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89360, 57795, 0);

  }
  }
  {
# 136 "xmltok_impl.c"
  mem_12 = ptr + 0;
  {
  __CrestLoad(89365, (unsigned long )mem_12, (long long )*mem_12);
  __CrestLoad(89364, (unsigned long )0, (long long )0);
  __CrestApply2(89363, 12, (long long )((int const )*mem_12 == 0));
# 136 "xmltok_impl.c"
  if ((int const )*mem_12 == 0) {
    __CrestBranch(89366, 57799, 1);
# 136 "xmltok_impl.c"
    mem_13 = ptr + 1;
# 136 "xmltok_impl.c"
    mem_14 = (struct normal_encoding *)enc;
    __CrestLoad(89368, (unsigned long )(& mem_14->type[(unsigned char )*mem_13]),
                (long long )mem_14->type[(unsigned char )*mem_13]);
    __CrestStore(89369, (unsigned long )(& tmp___0));
# 136 "xmltok_impl.c"
    tmp___0 = (int )mem_14->type[(unsigned char )*mem_13];
  } else {
    __CrestBranch(89367, 57800, 0);
# 136 "xmltok_impl.c"
    mem_15 = ptr + 0;
# 136 "xmltok_impl.c"
    mem_16 = ptr + 1;
    __CrestLoad(89370, (unsigned long )mem_15, (long long )*mem_15);
    __CrestLoad(89371, (unsigned long )mem_16, (long long )*mem_16);
# 136 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_15, (char )*mem_16);
    __CrestHandleReturn(89373, (long long )tmp);
    __CrestStore(89372, (unsigned long )(& tmp));
    __CrestLoad(89374, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(89375, (unsigned long )(& tmp___0));
# 136 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(89378, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89377, (unsigned long )0, (long long )27);
  __CrestApply2(89376, 12, (long long )(tmp___0 == 27));
# 137 "xmltok_impl.c"
  if (tmp___0 == 27) {
    __CrestBranch(89379, 57803, 1);
# 137 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(89380, 57804, 0);

  }
  }
  {
  __CrestLoad(89383, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89382, (unsigned long )0, (long long )20);
  __CrestApply2(89381, 12, (long long )(tmp___0 == 20));
# 139 "xmltok_impl.c"
  if (tmp___0 == 20) {
    __CrestBranch(89384, 57806, 1);
# 139 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(89385, 57807, 0);

  }
  }
  {
  __CrestLoad(89388, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89387, (unsigned long )0, (long long )24);
  __CrestApply2(89386, 12, (long long )(tmp___0 == 24));
# 143 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(89389, 57809, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(89390, 57810, 0);

  }
  }
  {
  __CrestLoad(89393, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89392, (unsigned long )0, (long long )22);
  __CrestApply2(89391, 12, (long long )(tmp___0 == 22));
# 143 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(89394, 57812, 1);
# 143 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(89395, 57813, 0);

  }
  }
# 146 "xmltok_impl.c"
  goto switch_default;
  case_27:
# 138 "xmltok_impl.c"
  tmp___1 = big2_scanComment(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(89397, (long long )tmp___1);
  __CrestStore(89396, (unsigned long )(& tmp___1));
  __CrestLoad(89398, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(89399, (unsigned long )(& __retres27));
# 138 "xmltok_impl.c"
  __retres27 = tmp___1;
# 138 "xmltok_impl.c"
  goto return_label;
  case_20:
# 140 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(89400, (unsigned long )0, (long long )33);
  __CrestStore(89401, (unsigned long )(& __retres27));
# 141 "xmltok_impl.c"
  __retres27 = 33;
# 141 "xmltok_impl.c"
  goto return_label;
  case_24:
  case_22:
# 144 "xmltok_impl.c"
  ptr += 2;
# 145 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 147 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(89402, (unsigned long )0, (long long )0);
  __CrestStore(89403, (unsigned long )(& __retres27));
# 148 "xmltok_impl.c"
  __retres27 = 0;
# 148 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 150 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(89406, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89405, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89404, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 150 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(89407, 57831, 1);

    } else {
      __CrestBranch(89408, 57832, 0);
# 150 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 151 "xmltok_impl.c"
    mem_17 = ptr + 0;
    {
    __CrestLoad(89411, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(89410, (unsigned long )0, (long long )0);
    __CrestApply2(89409, 12, (long long )((int const )*mem_17 == 0));
# 151 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(89412, 57836, 1);
# 151 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 151 "xmltok_impl.c"
      mem_19 = (struct normal_encoding *)enc;
      __CrestLoad(89414, (unsigned long )(& mem_19->type[(unsigned char )*mem_18]),
                  (long long )mem_19->type[(unsigned char )*mem_18]);
      __CrestStore(89415, (unsigned long )(& tmp___3));
# 151 "xmltok_impl.c"
      tmp___3 = (int )mem_19->type[(unsigned char )*mem_18];
    } else {
      __CrestBranch(89413, 57837, 0);
# 151 "xmltok_impl.c"
      mem_20 = ptr + 0;
# 151 "xmltok_impl.c"
      mem_21 = ptr + 1;
      __CrestLoad(89416, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(89417, (unsigned long )mem_21, (long long )*mem_21);
# 151 "xmltok_impl.c"
      tmp___2 = unicode_byte_type((char )*mem_20, (char )*mem_21);
      __CrestHandleReturn(89419, (long long )tmp___2);
      __CrestStore(89418, (unsigned long )(& tmp___2));
      __CrestLoad(89420, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(89421, (unsigned long )(& tmp___3));
# 151 "xmltok_impl.c"
      tmp___3 = tmp___2;
    }
    }
    }
    {
    {
    __CrestLoad(89424, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89423, (unsigned long )0, (long long )30);
    __CrestApply2(89422, 12, (long long )(tmp___3 == 30));
# 152 "xmltok_impl.c"
    if (tmp___3 == 30) {
      __CrestBranch(89425, 57840, 1);
# 152 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(89426, 57841, 0);

    }
    }
    {
    __CrestLoad(89429, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89428, (unsigned long )0, (long long )10);
    __CrestApply2(89427, 12, (long long )(tmp___3 == 10));
# 162 "xmltok_impl.c"
    if (tmp___3 == 10) {
      __CrestBranch(89430, 57843, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(89431, 57844, 0);

    }
    }
    {
    __CrestLoad(89434, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89433, (unsigned long )0, (long long )9);
    __CrestApply2(89432, 12, (long long )(tmp___3 == 9));
# 162 "xmltok_impl.c"
    if (tmp___3 == 9) {
      __CrestBranch(89435, 57846, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(89436, 57847, 0);

    }
    }
    {
    __CrestLoad(89439, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89438, (unsigned long )0, (long long )21);
    __CrestApply2(89437, 12, (long long )(tmp___3 == 21));
# 162 "xmltok_impl.c"
    if (tmp___3 == 21) {
      __CrestBranch(89440, 57849, 1);
# 162 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(89441, 57850, 0);

    }
    }
    {
    __CrestLoad(89444, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89443, (unsigned long )0, (long long )24);
    __CrestApply2(89442, 12, (long long )(tmp___3 == 24));
# 166 "xmltok_impl.c"
    if (tmp___3 == 24) {
      __CrestBranch(89445, 57852, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(89446, 57853, 0);

    }
    }
    {
    __CrestLoad(89449, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89448, (unsigned long )0, (long long )22);
    __CrestApply2(89447, 12, (long long )(tmp___3 == 22));
# 166 "xmltok_impl.c"
    if (tmp___3 == 22) {
      __CrestBranch(89450, 57855, 1);
# 166 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(89451, 57856, 0);

    }
    }
# 169 "xmltok_impl.c"
    goto switch_default___0;
    case_30:
    {
    __CrestLoad(89456, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89455, (unsigned long )0, (long long )2);
    __CrestApply2(89454, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(89453, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89452, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 153 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) == (unsigned long )end) {
      __CrestBranch(89457, 57859, 1);
      __CrestLoad(89459, (unsigned long )0, (long long )-1);
      __CrestStore(89460, (unsigned long )(& __retres27));
# 154 "xmltok_impl.c"
      __retres27 = -1;
# 154 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89458, 57861, 0);

    }
    }
    {
# 156 "xmltok_impl.c"
    mem_22 = (ptr + 2) + 0;
    {
    __CrestLoad(89463, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(89462, (unsigned long )0, (long long )0);
    __CrestApply2(89461, 12, (long long )((int const )*mem_22 == 0));
# 156 "xmltok_impl.c"
    if ((int const )*mem_22 == 0) {
      __CrestBranch(89464, 57865, 1);
# 156 "xmltok_impl.c"
      mem_23 = (ptr + 2) + 1;
# 156 "xmltok_impl.c"
      mem_24 = (struct normal_encoding *)enc;
      __CrestLoad(89466, (unsigned long )(& mem_24->type[(unsigned char )*mem_23]),
                  (long long )mem_24->type[(unsigned char )*mem_23]);
      __CrestStore(89467, (unsigned long )(& tmp___5));
# 156 "xmltok_impl.c"
      tmp___5 = (int )mem_24->type[(unsigned char )*mem_23];
    } else {
      __CrestBranch(89465, 57866, 0);
# 156 "xmltok_impl.c"
      mem_25 = (ptr + 2) + 0;
# 156 "xmltok_impl.c"
      mem_26 = (ptr + 2) + 1;
      __CrestLoad(89468, (unsigned long )mem_25, (long long )*mem_25);
      __CrestLoad(89469, (unsigned long )mem_26, (long long )*mem_26);
# 156 "xmltok_impl.c"
      tmp___4 = unicode_byte_type((char )*mem_25, (char )*mem_26);
      __CrestHandleReturn(89471, (long long )tmp___4);
      __CrestStore(89470, (unsigned long )(& tmp___4));
      __CrestLoad(89472, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestStore(89473, (unsigned long )(& tmp___5));
# 156 "xmltok_impl.c"
      tmp___5 = tmp___4;
    }
    }
    }
    {
    {
    __CrestLoad(89476, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(89475, (unsigned long )0, (long long )30);
    __CrestApply2(89474, 12, (long long )(tmp___5 == 30));
# 157 "xmltok_impl.c"
    if (tmp___5 == 30) {
      __CrestBranch(89477, 57869, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(89478, 57870, 0);

    }
    }
    {
    __CrestLoad(89481, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(89480, (unsigned long )0, (long long )10);
    __CrestApply2(89479, 12, (long long )(tmp___5 == 10));
# 157 "xmltok_impl.c"
    if (tmp___5 == 10) {
      __CrestBranch(89482, 57872, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(89483, 57873, 0);

    }
    }
    {
    __CrestLoad(89486, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(89485, (unsigned long )0, (long long )9);
    __CrestApply2(89484, 12, (long long )(tmp___5 == 9));
# 157 "xmltok_impl.c"
    if (tmp___5 == 9) {
      __CrestBranch(89487, 57875, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(89488, 57876, 0);

    }
    }
    {
    __CrestLoad(89491, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(89490, (unsigned long )0, (long long )21);
    __CrestApply2(89489, 12, (long long )(tmp___5 == 21));
# 157 "xmltok_impl.c"
    if (tmp___5 == 21) {
      __CrestBranch(89492, 57878, 1);
# 157 "xmltok_impl.c"
      goto case_30___0;
    } else {
      __CrestBranch(89493, 57879, 0);

    }
    }
# 156 "xmltok_impl.c"
    goto switch_break___1;
    case_30___0:
    case_10:
    case_9:
    case_21:
# 158 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89494, (unsigned long )0, (long long )0);
    __CrestStore(89495, (unsigned long )(& __retres27));
# 159 "xmltok_impl.c"
    __retres27 = 0;
# 159 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
    case_10___0:
    case_9___0:
    case_21___0:
# 163 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89496, (unsigned long )0, (long long )16);
    __CrestStore(89497, (unsigned long )(& __retres27));
# 164 "xmltok_impl.c"
    __retres27 = 16;
# 164 "xmltok_impl.c"
    goto return_label;
    case_24___0:
    case_22___0:
# 167 "xmltok_impl.c"
    ptr += 2;
# 168 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 170 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89498, (unsigned long )0, (long long )0);
    __CrestStore(89499, (unsigned long )(& __retres27));
# 171 "xmltok_impl.c"
    __retres27 = 0;
# 171 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(89500, (unsigned long )0, (long long )-1);
  __CrestStore(89501, (unsigned long )(& __retres27));
# 174 "xmltok_impl.c"
  __retres27 = -1;
  return_label:
  {
  __CrestLoad(89502, (unsigned long )(& __retres27), (long long )__retres27);
  __CrestReturn(89503);
# 130 "xmltok_impl.c"
  return (__retres27);
  }
}
}
# 177 "xmltok_impl.c"
static int big2_checkPiTarget(ENCODING const *enc , char const *ptr , char const *end ,
                              int *tokPtr )
{
  int upper ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  int __retres15 ;

  {
  __CrestCall(89504, 903);

  __CrestLoad(89505, (unsigned long )0, (long long )0);
  __CrestStore(89506, (unsigned long )(& upper));
# 181 "xmltok_impl.c"
  upper = 0;
  __CrestLoad(89507, (unsigned long )0, (long long )11);
  __CrestStore(89508, (unsigned long )tokPtr);
# 182 "xmltok_impl.c"
  *tokPtr = 11;
  {
  __CrestLoad(89513, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(89512, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(89511, 18, (long long )(end - ptr));
  __CrestLoad(89510, (unsigned long )0, (long long )6L);
  __CrestApply2(89509, 13, (long long )(end - ptr != 6L));
# 183 "xmltok_impl.c"
  if (end - ptr != 6L) {
    __CrestBranch(89514, 57899, 1);
    __CrestLoad(89516, (unsigned long )0, (long long )1);
    __CrestStore(89517, (unsigned long )(& __retres15));
# 184 "xmltok_impl.c"
    __retres15 = 1;
# 184 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89515, 57901, 0);

  }
  }
  {
# 185 "xmltok_impl.c"
  mem_9 = ptr + 0;
  {
  __CrestLoad(89520, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(89519, (unsigned long )0, (long long )0);
  __CrestApply2(89518, 12, (long long )((int const )*mem_9 == 0));
# 185 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(89521, 57905, 1);
# 185 "xmltok_impl.c"
    mem_10 = ptr + 1;
    __CrestLoad(89523, (unsigned long )mem_10, (long long )*mem_10);
    __CrestStore(89524, (unsigned long )(& tmp));
# 185 "xmltok_impl.c"
    tmp = (int const )*mem_10;
  } else {
    __CrestBranch(89522, 57906, 0);
    __CrestLoad(89525, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(89526, (unsigned long )(& tmp));
# 185 "xmltok_impl.c"
    tmp = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(89529, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(89528, (unsigned long )0, (long long )120);
  __CrestApply2(89527, 12, (long long )(tmp == 120));
# 186 "xmltok_impl.c"
  if (tmp == 120) {
    __CrestBranch(89530, 57909, 1);
# 186 "xmltok_impl.c"
    goto case_120;
  } else {
    __CrestBranch(89531, 57910, 0);

  }
  }
  {
  __CrestLoad(89534, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(89533, (unsigned long )0, (long long )88);
  __CrestApply2(89532, 12, (long long )(tmp == 88));
# 188 "xmltok_impl.c"
  if (tmp == 88) {
    __CrestBranch(89535, 57912, 1);
# 188 "xmltok_impl.c"
    goto case_88;
  } else {
    __CrestBranch(89536, 57913, 0);

  }
  }
# 191 "xmltok_impl.c"
  goto switch_default;
  case_120:
# 187 "xmltok_impl.c"
  goto switch_break;
  case_88:
  __CrestLoad(89537, (unsigned long )0, (long long )1);
  __CrestStore(89538, (unsigned long )(& upper));
# 189 "xmltok_impl.c"
  upper = 1;
# 190 "xmltok_impl.c"
  goto switch_break;
  switch_default:
  __CrestLoad(89539, (unsigned long )0, (long long )1);
  __CrestStore(89540, (unsigned long )(& __retres15));
# 192 "xmltok_impl.c"
  __retres15 = 1;
# 192 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
# 194 "xmltok_impl.c"
  ptr += 2;
  {
# 195 "xmltok_impl.c"
  mem_11 = ptr + 0;
  {
  __CrestLoad(89543, (unsigned long )mem_11, (long long )*mem_11);
  __CrestLoad(89542, (unsigned long )0, (long long )0);
  __CrestApply2(89541, 12, (long long )((int const )*mem_11 == 0));
# 195 "xmltok_impl.c"
  if ((int const )*mem_11 == 0) {
    __CrestBranch(89544, 57925, 1);
# 195 "xmltok_impl.c"
    mem_12 = ptr + 1;
    __CrestLoad(89546, (unsigned long )mem_12, (long long )*mem_12);
    __CrestStore(89547, (unsigned long )(& tmp___0));
# 195 "xmltok_impl.c"
    tmp___0 = (int const )*mem_12;
  } else {
    __CrestBranch(89545, 57926, 0);
    __CrestLoad(89548, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(89549, (unsigned long )(& tmp___0));
# 195 "xmltok_impl.c"
    tmp___0 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(89552, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89551, (unsigned long )0, (long long )109);
  __CrestApply2(89550, 12, (long long )(tmp___0 == 109));
# 196 "xmltok_impl.c"
  if (tmp___0 == 109) {
    __CrestBranch(89553, 57929, 1);
# 196 "xmltok_impl.c"
    goto case_109;
  } else {
    __CrestBranch(89554, 57930, 0);

  }
  }
  {
  __CrestLoad(89557, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89556, (unsigned long )0, (long long )77);
  __CrestApply2(89555, 12, (long long )(tmp___0 == 77));
# 198 "xmltok_impl.c"
  if (tmp___0 == 77) {
    __CrestBranch(89558, 57932, 1);
# 198 "xmltok_impl.c"
    goto case_77;
  } else {
    __CrestBranch(89559, 57933, 0);

  }
  }
# 201 "xmltok_impl.c"
  goto switch_default___0;
  case_109:
# 197 "xmltok_impl.c"
  goto switch_break___0;
  case_77:
  __CrestLoad(89560, (unsigned long )0, (long long )1);
  __CrestStore(89561, (unsigned long )(& upper));
# 199 "xmltok_impl.c"
  upper = 1;
# 200 "xmltok_impl.c"
  goto switch_break___0;
  switch_default___0:
  __CrestLoad(89562, (unsigned long )0, (long long )1);
  __CrestStore(89563, (unsigned long )(& __retres15));
# 202 "xmltok_impl.c"
  __retres15 = 1;
# 202 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 204 "xmltok_impl.c"
  ptr += 2;
  {
# 205 "xmltok_impl.c"
  mem_13 = ptr + 0;
  {
  __CrestLoad(89566, (unsigned long )mem_13, (long long )*mem_13);
  __CrestLoad(89565, (unsigned long )0, (long long )0);
  __CrestApply2(89564, 12, (long long )((int const )*mem_13 == 0));
# 205 "xmltok_impl.c"
  if ((int const )*mem_13 == 0) {
    __CrestBranch(89567, 57945, 1);
# 205 "xmltok_impl.c"
    mem_14 = ptr + 1;
    __CrestLoad(89569, (unsigned long )mem_14, (long long )*mem_14);
    __CrestStore(89570, (unsigned long )(& tmp___1));
# 205 "xmltok_impl.c"
    tmp___1 = (int const )*mem_14;
  } else {
    __CrestBranch(89568, 57946, 0);
    __CrestLoad(89571, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(89572, (unsigned long )(& tmp___1));
# 205 "xmltok_impl.c"
    tmp___1 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(89575, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(89574, (unsigned long )0, (long long )108);
  __CrestApply2(89573, 12, (long long )(tmp___1 == 108));
# 206 "xmltok_impl.c"
  if (tmp___1 == 108) {
    __CrestBranch(89576, 57949, 1);
# 206 "xmltok_impl.c"
    goto case_108;
  } else {
    __CrestBranch(89577, 57950, 0);

  }
  }
  {
  __CrestLoad(89580, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(89579, (unsigned long )0, (long long )76);
  __CrestApply2(89578, 12, (long long )(tmp___1 == 76));
# 208 "xmltok_impl.c"
  if (tmp___1 == 76) {
    __CrestBranch(89581, 57952, 1);
# 208 "xmltok_impl.c"
    goto case_76;
  } else {
    __CrestBranch(89582, 57953, 0);

  }
  }
# 211 "xmltok_impl.c"
  goto switch_default___1;
  case_108:
# 207 "xmltok_impl.c"
  goto switch_break___1;
  case_76:
  __CrestLoad(89583, (unsigned long )0, (long long )1);
  __CrestStore(89584, (unsigned long )(& upper));
# 209 "xmltok_impl.c"
  upper = 1;
# 210 "xmltok_impl.c"
  goto switch_break___1;
  switch_default___1:
  __CrestLoad(89585, (unsigned long )0, (long long )1);
  __CrestStore(89586, (unsigned long )(& __retres15));
# 212 "xmltok_impl.c"
  __retres15 = 1;
# 212 "xmltok_impl.c"
  goto return_label;
  switch_break___1: ;
  }
  {
  __CrestLoad(89589, (unsigned long )(& upper), (long long )upper);
  __CrestLoad(89588, (unsigned long )0, (long long )0);
  __CrestApply2(89587, 13, (long long )(upper != 0));
# 214 "xmltok_impl.c"
  if (upper != 0) {
    __CrestBranch(89590, 57962, 1);
    __CrestLoad(89592, (unsigned long )0, (long long )0);
    __CrestStore(89593, (unsigned long )(& __retres15));
# 215 "xmltok_impl.c"
    __retres15 = 0;
# 215 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89591, 57964, 0);

  }
  }
  __CrestLoad(89594, (unsigned long )0, (long long )12);
  __CrestStore(89595, (unsigned long )tokPtr);
# 216 "xmltok_impl.c"
  *tokPtr = 12;
  __CrestLoad(89596, (unsigned long )0, (long long )1);
  __CrestStore(89597, (unsigned long )(& __retres15));
# 217 "xmltok_impl.c"
  __retres15 = 1;
  return_label:
  {
  __CrestLoad(89598, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(89599);
# 177 "xmltok_impl.c"
  return (__retres15);
  }
}
}
# 222 "xmltok_impl.c"
static int big2_scanPi(ENCODING const *enc , char const *ptr , char const *end ,
                       char const **nextTokPtr )
{
  int tok ;
  char const *target ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const *mem_15 ;
  char const *mem_16 ;
  struct normal_encoding *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  struct normal_encoding *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  struct normal_encoding *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  int __retres40 ;

  {
  __CrestCall(89600, 904);
# 227 "xmltok_impl.c"
  target = ptr;
  {
  __CrestLoad(89603, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(89602, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(89601, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 228 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(89604, 57970, 1);
    __CrestLoad(89606, (unsigned long )0, (long long )-1);
    __CrestStore(89607, (unsigned long )(& __retres40));
# 229 "xmltok_impl.c"
    __retres40 = -1;
# 229 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89605, 57972, 0);

  }
  }
  {
# 230 "xmltok_impl.c"
  mem_15 = ptr + 0;
  {
  __CrestLoad(89610, (unsigned long )mem_15, (long long )*mem_15);
  __CrestLoad(89609, (unsigned long )0, (long long )0);
  __CrestApply2(89608, 12, (long long )((int const )*mem_15 == 0));
# 230 "xmltok_impl.c"
  if ((int const )*mem_15 == 0) {
    __CrestBranch(89611, 57976, 1);
# 230 "xmltok_impl.c"
    mem_16 = ptr + 1;
# 230 "xmltok_impl.c"
    mem_17 = (struct normal_encoding *)enc;
    __CrestLoad(89613, (unsigned long )(& mem_17->type[(unsigned char )*mem_16]),
                (long long )mem_17->type[(unsigned char )*mem_16]);
    __CrestStore(89614, (unsigned long )(& tmp___0));
# 230 "xmltok_impl.c"
    tmp___0 = (int )mem_17->type[(unsigned char )*mem_16];
  } else {
    __CrestBranch(89612, 57977, 0);
# 230 "xmltok_impl.c"
    mem_18 = ptr + 0;
# 230 "xmltok_impl.c"
    mem_19 = ptr + 1;
    __CrestLoad(89615, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(89616, (unsigned long )mem_19, (long long )*mem_19);
# 230 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_18, (char )*mem_19);
    __CrestHandleReturn(89618, (long long )tmp);
    __CrestStore(89617, (unsigned long )(& tmp));
    __CrestLoad(89619, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(89620, (unsigned long )(& tmp___0));
# 230 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(89623, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89622, (unsigned long )0, (long long )29);
  __CrestApply2(89621, 12, (long long )(tmp___0 == 29));
# 231 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(89624, 57980, 1);
# 231 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(89625, 57981, 0);

  }
  }
  {
  __CrestLoad(89628, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89627, (unsigned long )0, (long long )24);
  __CrestApply2(89626, 12, (long long )(tmp___0 == 24));
# 231 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(89629, 57983, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(89630, 57984, 0);

  }
  }
  {
  __CrestLoad(89633, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89632, (unsigned long )0, (long long )22);
  __CrestApply2(89631, 12, (long long )(tmp___0 == 22));
# 231 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(89634, 57986, 1);
# 231 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(89635, 57987, 0);

  }
  }
  {
  __CrestLoad(89638, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89637, (unsigned long )0, (long long )5);
  __CrestApply2(89636, 12, (long long )(tmp___0 == 5));
# 231 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(89639, 57989, 1);
# 231 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(89640, 57990, 0);

  }
  }
  {
  __CrestLoad(89643, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89642, (unsigned long )0, (long long )6);
  __CrestApply2(89641, 12, (long long )(tmp___0 == 6));
# 231 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(89644, 57992, 1);
# 231 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(89645, 57993, 0);

  }
  }
  {
  __CrestLoad(89648, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(89647, (unsigned long )0, (long long )7);
  __CrestApply2(89646, 12, (long long )(tmp___0 == 7));
# 231 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(89649, 57995, 1);
# 231 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(89650, 57996, 0);

  }
  }
# 232 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 231 "xmltok_impl.c"
  mem_20 = ptr + 0;
# 231 "xmltok_impl.c"
  mem_21 = ptr + 1;
# 231 "xmltok_impl.c"
  mem_22 = ptr + 1;
  {
  __CrestLoad(89659, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)]);
  __CrestLoad(89658, (unsigned long )0, (long long )1);
  __CrestLoad(89657, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(89656, (unsigned long )0, (long long )31);
  __CrestApply2(89655, 5, (long long )((int )((unsigned char )*mem_22) & 31));
  __CrestApply2(89654, 8, (long long )(1 << ((int )((unsigned char )*mem_22) & 31)));
  __CrestApply2(89653, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))));
  __CrestLoad(89652, (unsigned long )0, (long long )0);
  __CrestApply2(89651, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0));
# 231 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_20] << 3) + (int const )((int )((unsigned char )*mem_21) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_22) & 31))) == 0) {
    __CrestBranch(89660, 58001, 1);
# 231 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89662, (unsigned long )0, (long long )0);
    __CrestStore(89663, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
    __retres40 = 0;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89661, 58004, 0);

  }
  }
  }
  case_24:
  case_22:
# 231 "xmltok_impl.c"
  ptr += 2;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(89668, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(89667, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(89666, 18, (long long )(end - ptr));
  __CrestLoad(89665, (unsigned long )0, (long long )2L);
  __CrestApply2(89664, 16, (long long )(end - ptr < 2L));
# 231 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(89669, 58008, 1);
    __CrestLoad(89671, (unsigned long )0, (long long )-2);
    __CrestStore(89672, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
    __retres40 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89670, 58010, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(89673, (unsigned long )0, (long long )0);
  __CrestStore(89674, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
  __retres40 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 2;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(89679, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(89678, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(89677, 18, (long long )(end - ptr));
  __CrestLoad(89676, (unsigned long )0, (long long )3L);
  __CrestApply2(89675, 16, (long long )(end - ptr < 3L));
# 231 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(89680, 58017, 1);
    __CrestLoad(89682, (unsigned long )0, (long long )-2);
    __CrestStore(89683, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
    __retres40 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89681, 58019, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(89684, (unsigned long )0, (long long )0);
  __CrestStore(89685, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
  __retres40 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 3;
# 231 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(89690, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(89689, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(89688, 18, (long long )(end - ptr));
  __CrestLoad(89687, (unsigned long )0, (long long )4L);
  __CrestApply2(89686, 16, (long long )(end - ptr < 4L));
# 231 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(89691, 58026, 1);
    __CrestLoad(89693, (unsigned long )0, (long long )-2);
    __CrestStore(89694, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
    __retres40 = -2;
# 231 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89692, 58028, 0);

  }
  }
# 231 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(89695, (unsigned long )0, (long long )0);
  __CrestStore(89696, (unsigned long )(& __retres40));
# 231 "xmltok_impl.c"
  __retres40 = 0;
# 231 "xmltok_impl.c"
  goto return_label;
# 231 "xmltok_impl.c"
  ptr += 4;
# 231 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 233 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(89697, (unsigned long )0, (long long )0);
  __CrestStore(89698, (unsigned long )(& __retres40));
# 234 "xmltok_impl.c"
  __retres40 = 0;
# 234 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 236 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(89701, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89700, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89699, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 236 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(89702, 58042, 1);

    } else {
      __CrestBranch(89703, 58043, 0);
# 236 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 237 "xmltok_impl.c"
    mem_23 = ptr + 0;
    {
    __CrestLoad(89706, (unsigned long )mem_23, (long long )*mem_23);
    __CrestLoad(89705, (unsigned long )0, (long long )0);
    __CrestApply2(89704, 12, (long long )((int const )*mem_23 == 0));
# 237 "xmltok_impl.c"
    if ((int const )*mem_23 == 0) {
      __CrestBranch(89707, 58047, 1);
# 237 "xmltok_impl.c"
      mem_24 = ptr + 1;
# 237 "xmltok_impl.c"
      mem_25 = (struct normal_encoding *)enc;
      __CrestLoad(89709, (unsigned long )(& mem_25->type[(unsigned char )*mem_24]),
                  (long long )mem_25->type[(unsigned char )*mem_24]);
      __CrestStore(89710, (unsigned long )(& tmp___2));
# 237 "xmltok_impl.c"
      tmp___2 = (int )mem_25->type[(unsigned char )*mem_24];
    } else {
      __CrestBranch(89708, 58048, 0);
# 237 "xmltok_impl.c"
      mem_26 = ptr + 0;
# 237 "xmltok_impl.c"
      mem_27 = ptr + 1;
      __CrestLoad(89711, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(89712, (unsigned long )mem_27, (long long )*mem_27);
# 237 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_26, (char )*mem_27);
      __CrestHandleReturn(89714, (long long )tmp___1);
      __CrestStore(89713, (unsigned long )(& tmp___1));
      __CrestLoad(89715, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(89716, (unsigned long )(& tmp___2));
# 237 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(89719, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89718, (unsigned long )0, (long long )29);
    __CrestApply2(89717, 12, (long long )(tmp___2 == 29));
# 238 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(89720, 58051, 1);
# 238 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(89721, 58052, 0);

    }
    }
    {
    __CrestLoad(89724, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89723, (unsigned long )0, (long long )27);
    __CrestApply2(89722, 12, (long long )(tmp___2 == 27));
# 238 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(89725, 58054, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89726, 58055, 0);

    }
    }
    {
    __CrestLoad(89729, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89728, (unsigned long )0, (long long )26);
    __CrestApply2(89727, 12, (long long )(tmp___2 == 26));
# 238 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(89730, 58057, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89731, 58058, 0);

    }
    }
    {
    __CrestLoad(89734, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89733, (unsigned long )0, (long long )25);
    __CrestApply2(89732, 12, (long long )(tmp___2 == 25));
# 238 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(89735, 58060, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89736, 58061, 0);

    }
    }
    {
    __CrestLoad(89739, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89738, (unsigned long )0, (long long )24);
    __CrestApply2(89737, 12, (long long )(tmp___2 == 24));
# 238 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(89740, 58063, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89741, 58064, 0);

    }
    }
    {
    __CrestLoad(89744, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89743, (unsigned long )0, (long long )22);
    __CrestApply2(89742, 12, (long long )(tmp___2 == 22));
# 238 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(89745, 58066, 1);
# 238 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(89746, 58067, 0);

    }
    }
    {
    __CrestLoad(89749, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89748, (unsigned long )0, (long long )5);
    __CrestApply2(89747, 12, (long long )(tmp___2 == 5));
# 238 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(89750, 58069, 1);
# 238 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(89751, 58070, 0);

    }
    }
    {
    __CrestLoad(89754, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89753, (unsigned long )0, (long long )6);
    __CrestApply2(89752, 12, (long long )(tmp___2 == 6));
# 238 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(89755, 58072, 1);
# 238 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(89756, 58073, 0);

    }
    }
    {
    __CrestLoad(89759, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89758, (unsigned long )0, (long long )7);
    __CrestApply2(89757, 12, (long long )(tmp___2 == 7));
# 238 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(89760, 58075, 1);
# 238 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(89761, 58076, 0);

    }
    }
    {
    __CrestLoad(89764, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89763, (unsigned long )0, (long long )10);
    __CrestApply2(89762, 12, (long long )(tmp___2 == 10));
# 239 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(89765, 58078, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(89766, 58079, 0);

    }
    }
    {
    __CrestLoad(89769, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89768, (unsigned long )0, (long long )9);
    __CrestApply2(89767, 12, (long long )(tmp___2 == 9));
# 239 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(89770, 58081, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(89771, 58082, 0);

    }
    }
    {
    __CrestLoad(89774, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89773, (unsigned long )0, (long long )21);
    __CrestApply2(89772, 12, (long long )(tmp___2 == 21));
# 239 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(89775, 58084, 1);
# 239 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(89776, 58085, 0);

    }
    }
    {
    __CrestLoad(89779, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(89778, (unsigned long )0, (long long )15);
    __CrestApply2(89777, 12, (long long )(tmp___2 == 15));
# 263 "xmltok_impl.c"
    if (tmp___2 == 15) {
      __CrestBranch(89780, 58087, 1);
# 263 "xmltok_impl.c"
      goto case_15___0;
    } else {
      __CrestBranch(89781, 58088, 0);

    }
    }
# 276 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
    {
# 238 "xmltok_impl.c"
    mem_28 = ptr + 0;
# 238 "xmltok_impl.c"
    mem_29 = ptr + 1;
# 238 "xmltok_impl.c"
    mem_30 = ptr + 1;
    {
    __CrestLoad(89790, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_28] << 3) + (int const )((int )((unsigned char )*mem_29) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_28] << 3) + (int const )((int )((unsigned char )*mem_29) >> 5)]);
    __CrestLoad(89789, (unsigned long )0, (long long )1);
    __CrestLoad(89788, (unsigned long )mem_30, (long long )*mem_30);
    __CrestLoad(89787, (unsigned long )0, (long long )31);
    __CrestApply2(89786, 5, (long long )((int )((unsigned char )*mem_30) & 31));
    __CrestApply2(89785, 8, (long long )(1 << ((int )((unsigned char )*mem_30) & 31)));
    __CrestApply2(89784, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_28] << 3) + (int const )((int )((unsigned char )*mem_29) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_30) & 31))));
    __CrestLoad(89783, (unsigned long )0, (long long )0);
    __CrestApply2(89782, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_28] << 3) + (int const )((int )((unsigned char )*mem_29) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_30) & 31))) == 0));
# 238 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_28] << 3) + (int const )((int )((unsigned char )*mem_29) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_30) & 31))) == 0) {
      __CrestBranch(89791, 58093, 1);
# 238 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89793, (unsigned long )0, (long long )0);
      __CrestStore(89794, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
      __retres40 = 0;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89792, 58096, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 238 "xmltok_impl.c"
    ptr += 2;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(89799, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(89798, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(89797, 18, (long long )(end - ptr));
    __CrestLoad(89796, (unsigned long )0, (long long )2L);
    __CrestApply2(89795, 16, (long long )(end - ptr < 2L));
# 238 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(89800, 58100, 1);
      __CrestLoad(89802, (unsigned long )0, (long long )-2);
      __CrestStore(89803, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
      __retres40 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89801, 58102, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89804, (unsigned long )0, (long long )0);
    __CrestStore(89805, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
    __retres40 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 2;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(89810, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(89809, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(89808, 18, (long long )(end - ptr));
    __CrestLoad(89807, (unsigned long )0, (long long )3L);
    __CrestApply2(89806, 16, (long long )(end - ptr < 3L));
# 238 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(89811, 58109, 1);
      __CrestLoad(89813, (unsigned long )0, (long long )-2);
      __CrestStore(89814, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
      __retres40 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89812, 58111, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89815, (unsigned long )0, (long long )0);
    __CrestStore(89816, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
    __retres40 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 3;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(89821, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(89820, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(89819, 18, (long long )(end - ptr));
    __CrestLoad(89818, (unsigned long )0, (long long )4L);
    __CrestApply2(89817, 16, (long long )(end - ptr < 4L));
# 238 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(89822, 58118, 1);
      __CrestLoad(89824, (unsigned long )0, (long long )-2);
      __CrestStore(89825, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
      __retres40 = -2;
# 238 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89823, 58120, 0);

    }
    }
# 238 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89826, (unsigned long )0, (long long )0);
    __CrestStore(89827, (unsigned long )(& __retres40));
# 238 "xmltok_impl.c"
    __retres40 = 0;
# 238 "xmltok_impl.c"
    goto return_label;
# 238 "xmltok_impl.c"
    ptr += 4;
# 238 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 240 "xmltok_impl.c"
    tmp___3 = big2_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(89829, (long long )tmp___3);
    __CrestStore(89828, (unsigned long )(& tmp___3));
    {
    __CrestLoad(89832, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(89831, (unsigned long )0, (long long )0);
    __CrestApply2(89830, 13, (long long )(tmp___3 != 0));
# 240 "xmltok_impl.c"
    if (tmp___3 != 0) {
      __CrestBranch(89833, 58128, 1);

    } else {
      __CrestBranch(89834, 58129, 0);
# 241 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89835, (unsigned long )0, (long long )0);
      __CrestStore(89836, (unsigned long )(& __retres40));
# 242 "xmltok_impl.c"
      __retres40 = 0;
# 242 "xmltok_impl.c"
      goto return_label;
    }
    }
# 244 "xmltok_impl.c"
    ptr += 2;
    {
# 245 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(89839, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(89838, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(89837, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 245 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(89840, 58137, 1);

      } else {
        __CrestBranch(89841, 58138, 0);
# 245 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 246 "xmltok_impl.c"
      mem_31 = ptr + 0;
      {
      __CrestLoad(89844, (unsigned long )mem_31, (long long )*mem_31);
      __CrestLoad(89843, (unsigned long )0, (long long )0);
      __CrestApply2(89842, 12, (long long )((int const )*mem_31 == 0));
# 246 "xmltok_impl.c"
      if ((int const )*mem_31 == 0) {
        __CrestBranch(89845, 58142, 1);
# 246 "xmltok_impl.c"
        mem_32 = ptr + 1;
# 246 "xmltok_impl.c"
        mem_33 = (struct normal_encoding *)enc;
        __CrestLoad(89847, (unsigned long )(& mem_33->type[(unsigned char )*mem_32]),
                    (long long )mem_33->type[(unsigned char )*mem_32]);
        __CrestStore(89848, (unsigned long )(& tmp___5));
# 246 "xmltok_impl.c"
        tmp___5 = (int )mem_33->type[(unsigned char )*mem_32];
      } else {
        __CrestBranch(89846, 58143, 0);
# 246 "xmltok_impl.c"
        mem_34 = ptr + 0;
# 246 "xmltok_impl.c"
        mem_35 = ptr + 1;
        __CrestLoad(89849, (unsigned long )mem_34, (long long )*mem_34);
        __CrestLoad(89850, (unsigned long )mem_35, (long long )*mem_35);
# 246 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_34, (char )*mem_35);
        __CrestHandleReturn(89852, (long long )tmp___4);
        __CrestStore(89851, (unsigned long )(& tmp___4));
        __CrestLoad(89853, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(89854, (unsigned long )(& tmp___5));
# 246 "xmltok_impl.c"
        tmp___5 = tmp___4;
      }
      }
      }
      {
      {
      __CrestLoad(89857, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89856, (unsigned long )0, (long long )5);
      __CrestApply2(89855, 12, (long long )(tmp___5 == 5));
# 247 "xmltok_impl.c"
      if (tmp___5 == 5) {
        __CrestBranch(89858, 58146, 1);
# 247 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(89859, 58147, 0);

      }
      }
      {
      __CrestLoad(89862, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89861, (unsigned long )0, (long long )6);
      __CrestApply2(89860, 12, (long long )(tmp___5 == 6));
# 247 "xmltok_impl.c"
      if (tmp___5 == 6) {
        __CrestBranch(89863, 58149, 1);
# 247 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(89864, 58150, 0);

      }
      }
      {
      __CrestLoad(89867, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89866, (unsigned long )0, (long long )7);
      __CrestApply2(89865, 12, (long long )(tmp___5 == 7));
# 247 "xmltok_impl.c"
      if (tmp___5 == 7) {
        __CrestBranch(89868, 58152, 1);
# 247 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(89869, 58153, 0);

      }
      }
      {
      __CrestLoad(89872, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89871, (unsigned long )0, (long long )8);
      __CrestApply2(89870, 12, (long long )(tmp___5 == 8));
# 247 "xmltok_impl.c"
      if (tmp___5 == 8) {
        __CrestBranch(89873, 58155, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89874, 58156, 0);

      }
      }
      {
      __CrestLoad(89877, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89876, (unsigned long )0, (long long )1);
      __CrestApply2(89875, 12, (long long )(tmp___5 == 1));
# 247 "xmltok_impl.c"
      if (tmp___5 == 1) {
        __CrestBranch(89878, 58158, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89879, 58159, 0);

      }
      }
      {
      __CrestLoad(89882, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89881, (unsigned long )0, (long long )0);
      __CrestApply2(89880, 12, (long long )(tmp___5 == 0));
# 247 "xmltok_impl.c"
      if (tmp___5 == 0) {
        __CrestBranch(89883, 58161, 1);
# 247 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(89884, 58162, 0);

      }
      }
      {
      __CrestLoad(89887, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(89886, (unsigned long )0, (long long )15);
      __CrestApply2(89885, 12, (long long )(tmp___5 == 15));
# 248 "xmltok_impl.c"
      if (tmp___5 == 15) {
        __CrestBranch(89888, 58164, 1);
# 248 "xmltok_impl.c"
        goto case_15;
      } else {
        __CrestBranch(89889, 58165, 0);

      }
      }
# 257 "xmltok_impl.c"
      goto switch_default___0;
      case_5___1:
      {
      __CrestLoad(89894, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89893, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89892, 18, (long long )(end - ptr));
      __CrestLoad(89891, (unsigned long )0, (long long )2L);
      __CrestApply2(89890, 16, (long long )(end - ptr < 2L));
# 247 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(89895, 58168, 1);
        __CrestLoad(89897, (unsigned long )0, (long long )-2);
        __CrestStore(89898, (unsigned long )(& __retres40));
# 247 "xmltok_impl.c"
        __retres40 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89896, 58170, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 2;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_6___1:
      {
      __CrestLoad(89903, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89902, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89901, 18, (long long )(end - ptr));
      __CrestLoad(89900, (unsigned long )0, (long long )3L);
      __CrestApply2(89899, 16, (long long )(end - ptr < 3L));
# 247 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(89904, 58174, 1);
        __CrestLoad(89906, (unsigned long )0, (long long )-2);
        __CrestStore(89907, (unsigned long )(& __retres40));
# 247 "xmltok_impl.c"
        __retres40 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89905, 58176, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 3;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_7___1:
      {
      __CrestLoad(89912, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(89911, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(89910, 18, (long long )(end - ptr));
      __CrestLoad(89909, (unsigned long )0, (long long )4L);
      __CrestApply2(89908, 16, (long long )(end - ptr < 4L));
# 247 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(89913, 58180, 1);
        __CrestLoad(89915, (unsigned long )0, (long long )-2);
        __CrestStore(89916, (unsigned long )(& __retres40));
# 247 "xmltok_impl.c"
        __retres40 = -2;
# 247 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89914, 58182, 0);

      }
      }
# 247 "xmltok_impl.c"
      ptr += 4;
# 247 "xmltok_impl.c"
      goto switch_break___1;
      case_8:
      case_1:
      case_0:
# 247 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89917, (unsigned long )0, (long long )0);
      __CrestStore(89918, (unsigned long )(& __retres40));
# 247 "xmltok_impl.c"
      __retres40 = 0;
# 247 "xmltok_impl.c"
      goto return_label;
      case_15:
# 249 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(89921, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(89920, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(89919, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 250 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(89922, 58190, 1);
        __CrestLoad(89924, (unsigned long )0, (long long )-1);
        __CrestStore(89925, (unsigned long )(& __retres40));
# 251 "xmltok_impl.c"
        __retres40 = -1;
# 251 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89923, 58192, 0);

      }
      }
      {
# 252 "xmltok_impl.c"
      mem_36 = ptr + 0;
      {
      __CrestLoad(89928, (unsigned long )mem_36, (long long )*mem_36);
      __CrestLoad(89927, (unsigned long )0, (long long )0);
      __CrestApply2(89926, 12, (long long )((int const )*mem_36 == 0));
# 252 "xmltok_impl.c"
      if ((int const )*mem_36 == 0) {
        __CrestBranch(89929, 58196, 1);
        {
# 252 "xmltok_impl.c"
        mem_37 = ptr + 1;
        {
        __CrestLoad(89933, (unsigned long )mem_37, (long long )*mem_37);
        __CrestLoad(89932, (unsigned long )0, (long long )62);
        __CrestApply2(89931, 12, (long long )((int const )*mem_37 == 62));
# 252 "xmltok_impl.c"
        if ((int const )*mem_37 == 62) {
          __CrestBranch(89934, 58199, 1);
# 253 "xmltok_impl.c"
          *nextTokPtr = ptr + 2;
          __CrestLoad(89936, (unsigned long )(& tok), (long long )tok);
          __CrestStore(89937, (unsigned long )(& __retres40));
# 254 "xmltok_impl.c"
          __retres40 = tok;
# 254 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(89935, 58202, 0);

        }
        }
        }
      } else {
        __CrestBranch(89930, 58203, 0);

      }
      }
      }
# 256 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 258 "xmltok_impl.c"
      ptr += 2;
# 259 "xmltok_impl.c"
      goto switch_break___1;
      switch_break___1: ;
      }
    }
    while_break___0: ;
    }
    __CrestLoad(89938, (unsigned long )0, (long long )-1);
    __CrestStore(89939, (unsigned long )(& __retres40));
# 262 "xmltok_impl.c"
    __retres40 = -1;
# 262 "xmltok_impl.c"
    goto return_label;
    case_15___0:
# 264 "xmltok_impl.c"
    tmp___6 = big2_checkPiTarget(enc, target, ptr, & tok);
    __CrestHandleReturn(89941, (long long )tmp___6);
    __CrestStore(89940, (unsigned long )(& tmp___6));
    {
    __CrestLoad(89944, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(89943, (unsigned long )0, (long long )0);
    __CrestApply2(89942, 13, (long long )(tmp___6 != 0));
# 264 "xmltok_impl.c"
    if (tmp___6 != 0) {
      __CrestBranch(89945, 58213, 1);

    } else {
      __CrestBranch(89946, 58214, 0);
# 265 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(89947, (unsigned long )0, (long long )0);
      __CrestStore(89948, (unsigned long )(& __retres40));
# 266 "xmltok_impl.c"
      __retres40 = 0;
# 266 "xmltok_impl.c"
      goto return_label;
    }
    }
# 268 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(89951, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(89950, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(89949, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 269 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(89952, 58219, 1);
      __CrestLoad(89954, (unsigned long )0, (long long )-1);
      __CrestStore(89955, (unsigned long )(& __retres40));
# 270 "xmltok_impl.c"
      __retres40 = -1;
# 270 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(89953, 58221, 0);

    }
    }
    {
# 271 "xmltok_impl.c"
    mem_38 = ptr + 0;
    {
    __CrestLoad(89958, (unsigned long )mem_38, (long long )*mem_38);
    __CrestLoad(89957, (unsigned long )0, (long long )0);
    __CrestApply2(89956, 12, (long long )((int const )*mem_38 == 0));
# 271 "xmltok_impl.c"
    if ((int const )*mem_38 == 0) {
      __CrestBranch(89959, 58225, 1);
      {
# 271 "xmltok_impl.c"
      mem_39 = ptr + 1;
      {
      __CrestLoad(89963, (unsigned long )mem_39, (long long )*mem_39);
      __CrestLoad(89962, (unsigned long )0, (long long )62);
      __CrestApply2(89961, 12, (long long )((int const )*mem_39 == 62));
# 271 "xmltok_impl.c"
      if ((int const )*mem_39 == 62) {
        __CrestBranch(89964, 58228, 1);
# 272 "xmltok_impl.c"
        *nextTokPtr = ptr + 2;
        __CrestLoad(89966, (unsigned long )(& tok), (long long )tok);
        __CrestStore(89967, (unsigned long )(& __retres40));
# 273 "xmltok_impl.c"
        __retres40 = tok;
# 273 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(89965, 58231, 0);

      }
      }
      }
    } else {
      __CrestBranch(89960, 58232, 0);

    }
    }
    }
    switch_default___1:
# 277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(89968, (unsigned long )0, (long long )0);
    __CrestStore(89969, (unsigned long )(& __retres40));
# 278 "xmltok_impl.c"
    __retres40 = 0;
# 278 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(89970, (unsigned long )0, (long long )-1);
  __CrestStore(89971, (unsigned long )(& __retres40));
# 281 "xmltok_impl.c"
  __retres40 = -1;
  return_label:
  {
  __CrestLoad(89972, (unsigned long )(& __retres40), (long long )__retres40);
  __CrestReturn(89973);
# 222 "xmltok_impl.c"
  return (__retres40);
  }
}
}
# 288 "xmltok_impl.c"
static int big2_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr ) ;
# 288 "xmltok_impl.c"
static char const CDATA_LSQB___1[6] = { (char const )67, (char const )68, (char const )65, (char const )84,
        (char const )65, (char const )91};
# 284 "xmltok_impl.c"
static int big2_scanCdataSection(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr )
{
  int i ;
  char const *mem_6 ;
  char const *mem_7 ;
  int __retres8 ;

  {
  __CrestCall(89974, 905);

  {
  __CrestLoad(89979, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(89978, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(89977, 18, (long long )(end - ptr));
  __CrestLoad(89976, (unsigned long )0, (long long )12L);
  __CrestApply2(89975, 16, (long long )(end - ptr < 12L));
# 292 "xmltok_impl.c"
  if (end - ptr < 12L) {
    __CrestBranch(89980, 58241, 1);
    __CrestLoad(89982, (unsigned long )0, (long long )-1);
    __CrestStore(89983, (unsigned long )(& __retres8));
# 293 "xmltok_impl.c"
    __retres8 = -1;
# 293 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(89981, 58243, 0);

  }
  }
  __CrestLoad(89984, (unsigned long )0, (long long )0);
  __CrestStore(89985, (unsigned long )(& i));
# 294 "xmltok_impl.c"
  i = 0;
  {
# 294 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(89988, (unsigned long )(& i), (long long )i);
    __CrestLoad(89987, (unsigned long )0, (long long )6);
    __CrestApply2(89986, 16, (long long )(i < 6));
# 294 "xmltok_impl.c"
    if (i < 6) {
      __CrestBranch(89989, 58249, 1);

    } else {
      __CrestBranch(89990, 58250, 0);
# 294 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 295 "xmltok_impl.c"
    mem_6 = ptr + 0;
    {
    __CrestLoad(89993, (unsigned long )mem_6, (long long )*mem_6);
    __CrestLoad(89992, (unsigned long )0, (long long )0);
    __CrestApply2(89991, 12, (long long )((int const )*mem_6 == 0));
# 295 "xmltok_impl.c"
    if ((int const )*mem_6 == 0) {
      __CrestBranch(89994, 58254, 1);
      {
# 295 "xmltok_impl.c"
      mem_7 = ptr + 1;
      {
      __CrestLoad(89998, (unsigned long )mem_7, (long long )*mem_7);
      __CrestLoad(89997, (unsigned long )(& CDATA_LSQB___1[i]), (long long )CDATA_LSQB___1[i]);
      __CrestApply2(89996, 12, (long long )((int const )*mem_7 == (int const )CDATA_LSQB___1[i]));
# 295 "xmltok_impl.c"
      if ((int const )*mem_7 == (int const )CDATA_LSQB___1[i]) {
        __CrestBranch(89999, 58257, 1);

      } else {
        __CrestBranch(90000, 58258, 0);
# 296 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(90001, (unsigned long )0, (long long )0);
        __CrestStore(90002, (unsigned long )(& __retres8));
# 297 "xmltok_impl.c"
        __retres8 = 0;
# 297 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(89995, 58261, 0);
# 296 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90003, (unsigned long )0, (long long )0);
      __CrestStore(90004, (unsigned long )(& __retres8));
# 297 "xmltok_impl.c"
      __retres8 = 0;
# 297 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
    __CrestLoad(90007, (unsigned long )(& i), (long long )i);
    __CrestLoad(90006, (unsigned long )0, (long long )1);
    __CrestApply2(90005, 0, (long long )(i + 1));
    __CrestStore(90008, (unsigned long )(& i));
# 294 "xmltok_impl.c"
    i ++;
# 294 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
# 300 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90009, (unsigned long )0, (long long )8);
  __CrestStore(90010, (unsigned long )(& __retres8));
# 301 "xmltok_impl.c"
  __retres8 = 8;
  return_label:
  {
  __CrestLoad(90011, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(90012);
# 284 "xmltok_impl.c"
  return (__retres8);
  }
}
}
# 304 "xmltok_impl.c"
static int big2_cdataSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                char const **nextTokPtr )
{
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_12 ;
  char const *mem_13 ;
  struct normal_encoding *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  struct normal_encoding *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  struct normal_encoding *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  int __retres31 ;

  {
  __CrestCall(90013, 906);

  {
  __CrestLoad(90016, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90015, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90014, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 308 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90017, 58270, 1);
    __CrestLoad(90019, (unsigned long )0, (long long )-4);
    __CrestStore(90020, (unsigned long )(& __retres31));
# 309 "xmltok_impl.c"
    __retres31 = -4;
# 309 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90018, 58272, 0);

  }
  }
  __CrestLoad(90023, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90022, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90021, 18, (long long )(end - ptr));
  __CrestStore(90024, (unsigned long )(& n));
# 311 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(90029, (unsigned long )(& n), (long long )n);
  __CrestLoad(90028, (unsigned long )0, (long long )1UL);
  __CrestApply2(90027, 5, (long long )(n & 1UL));
  __CrestLoad(90026, (unsigned long )0, (long long )0);
  __CrestApply2(90025, 13, (long long )((n & 1UL) != 0));
# 312 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(90030, 58275, 1);
    __CrestLoad(90034, (unsigned long )(& n), (long long )n);
    __CrestLoad(90033, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(90032, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(90035, (unsigned long )(& n));
# 313 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(90038, (unsigned long )(& n), (long long )n);
    __CrestLoad(90037, (unsigned long )0, (long long )0UL);
    __CrestApply2(90036, 12, (long long )(n == 0UL));
# 314 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(90039, 58277, 1);
      __CrestLoad(90041, (unsigned long )0, (long long )-1);
      __CrestStore(90042, (unsigned long )(& __retres31));
# 315 "xmltok_impl.c"
      __retres31 = -1;
# 315 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90040, 58279, 0);

    }
    }
# 316 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(90031, 58281, 0);

  }
  }
  {
# 319 "xmltok_impl.c"
  mem_12 = ptr + 0;
  {
  __CrestLoad(90045, (unsigned long )mem_12, (long long )*mem_12);
  __CrestLoad(90044, (unsigned long )0, (long long )0);
  __CrestApply2(90043, 12, (long long )((int const )*mem_12 == 0));
# 319 "xmltok_impl.c"
  if ((int const )*mem_12 == 0) {
    __CrestBranch(90046, 58285, 1);
# 319 "xmltok_impl.c"
    mem_13 = ptr + 1;
# 319 "xmltok_impl.c"
    mem_14 = (struct normal_encoding *)enc;
    __CrestLoad(90048, (unsigned long )(& mem_14->type[(unsigned char )*mem_13]),
                (long long )mem_14->type[(unsigned char )*mem_13]);
    __CrestStore(90049, (unsigned long )(& tmp___0));
# 319 "xmltok_impl.c"
    tmp___0 = (int )mem_14->type[(unsigned char )*mem_13];
  } else {
    __CrestBranch(90047, 58286, 0);
# 319 "xmltok_impl.c"
    mem_15 = ptr + 0;
# 319 "xmltok_impl.c"
    mem_16 = ptr + 1;
    __CrestLoad(90050, (unsigned long )mem_15, (long long )*mem_15);
    __CrestLoad(90051, (unsigned long )mem_16, (long long )*mem_16);
# 319 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_15, (char )*mem_16);
    __CrestHandleReturn(90053, (long long )tmp);
    __CrestStore(90052, (unsigned long )(& tmp));
    __CrestLoad(90054, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(90055, (unsigned long )(& tmp___0));
# 319 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(90058, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90057, (unsigned long )0, (long long )4);
  __CrestApply2(90056, 12, (long long )(tmp___0 == 4));
# 320 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(90059, 58289, 1);
# 320 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(90060, 58290, 0);

  }
  }
  {
  __CrestLoad(90063, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90062, (unsigned long )0, (long long )9);
  __CrestApply2(90061, 12, (long long )(tmp___0 == 9));
# 335 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(90064, 58292, 1);
# 335 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(90065, 58293, 0);

  }
  }
  {
  __CrestLoad(90068, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90067, (unsigned long )0, (long long )10);
  __CrestApply2(90066, 12, (long long )(tmp___0 == 10));
# 343 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(90069, 58295, 1);
# 343 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(90070, 58296, 0);

  }
  }
  {
  __CrestLoad(90073, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90072, (unsigned long )0, (long long )5);
  __CrestApply2(90071, 12, (long long )(tmp___0 == 5));
# 346 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(90074, 58298, 1);
# 346 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(90075, 58299, 0);

  }
  }
  {
  __CrestLoad(90078, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90077, (unsigned long )0, (long long )6);
  __CrestApply2(90076, 12, (long long )(tmp___0 == 6));
# 346 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(90079, 58301, 1);
# 346 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(90080, 58302, 0);

  }
  }
  {
  __CrestLoad(90083, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90082, (unsigned long )0, (long long )7);
  __CrestApply2(90081, 12, (long long )(tmp___0 == 7));
# 346 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(90084, 58304, 1);
# 346 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(90085, 58305, 0);

  }
  }
  {
  __CrestLoad(90088, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90087, (unsigned long )0, (long long )8);
  __CrestApply2(90086, 12, (long long )(tmp___0 == 8));
# 346 "xmltok_impl.c"
  if (tmp___0 == 8) {
    __CrestBranch(90089, 58307, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(90090, 58308, 0);

  }
  }
  {
  __CrestLoad(90093, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90092, (unsigned long )0, (long long )1);
  __CrestApply2(90091, 12, (long long )(tmp___0 == 1));
# 346 "xmltok_impl.c"
  if (tmp___0 == 1) {
    __CrestBranch(90094, 58310, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(90095, 58311, 0);

  }
  }
  {
  __CrestLoad(90098, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90097, (unsigned long )0, (long long )0);
  __CrestApply2(90096, 12, (long long )(tmp___0 == 0));
# 346 "xmltok_impl.c"
  if (tmp___0 == 0) {
    __CrestBranch(90099, 58313, 1);
# 346 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(90100, 58314, 0);

  }
  }
# 347 "xmltok_impl.c"
  goto switch_default;
  case_4:
# 321 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(90103, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90102, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90101, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 322 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90104, 58318, 1);
    __CrestLoad(90106, (unsigned long )0, (long long )-1);
    __CrestStore(90107, (unsigned long )(& __retres31));
# 323 "xmltok_impl.c"
    __retres31 = -1;
# 323 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90105, 58320, 0);

  }
  }
  {
# 324 "xmltok_impl.c"
  mem_17 = ptr + 0;
  {
  __CrestLoad(90110, (unsigned long )mem_17, (long long )*mem_17);
  __CrestLoad(90109, (unsigned long )0, (long long )0);
  __CrestApply2(90108, 12, (long long )((int const )*mem_17 == 0));
# 324 "xmltok_impl.c"
  if ((int const )*mem_17 == 0) {
    __CrestBranch(90111, 58324, 1);
    {
# 324 "xmltok_impl.c"
    mem_18 = ptr + 1;
    {
    __CrestLoad(90115, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(90114, (unsigned long )0, (long long )93);
    __CrestApply2(90113, 12, (long long )((int const )*mem_18 == 93));
# 324 "xmltok_impl.c"
    if ((int const )*mem_18 == 93) {
      __CrestBranch(90116, 58327, 1);

    } else {
      __CrestBranch(90117, 58328, 0);
# 325 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(90112, 58329, 0);
# 325 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 326 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(90120, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90119, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90118, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 327 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90121, 58332, 1);
    __CrestLoad(90123, (unsigned long )0, (long long )-1);
    __CrestStore(90124, (unsigned long )(& __retres31));
# 328 "xmltok_impl.c"
    __retres31 = -1;
# 328 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90122, 58334, 0);

  }
  }
  {
# 329 "xmltok_impl.c"
  mem_19 = ptr + 0;
  {
  __CrestLoad(90127, (unsigned long )mem_19, (long long )*mem_19);
  __CrestLoad(90126, (unsigned long )0, (long long )0);
  __CrestApply2(90125, 12, (long long )((int const )*mem_19 == 0));
# 329 "xmltok_impl.c"
  if ((int const )*mem_19 == 0) {
    __CrestBranch(90128, 58338, 1);
    {
# 329 "xmltok_impl.c"
    mem_20 = ptr + 1;
    {
    __CrestLoad(90132, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(90131, (unsigned long )0, (long long )62);
    __CrestApply2(90130, 12, (long long )((int const )*mem_20 == 62));
# 329 "xmltok_impl.c"
    if ((int const )*mem_20 == 62) {
      __CrestBranch(90133, 58341, 1);

    } else {
      __CrestBranch(90134, 58342, 0);
# 330 "xmltok_impl.c"
      ptr -= 2;
# 331 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(90129, 58344, 0);
# 330 "xmltok_impl.c"
    ptr -= 2;
# 331 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 333 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(90135, (unsigned long )0, (long long )40);
  __CrestStore(90136, (unsigned long )(& __retres31));
# 334 "xmltok_impl.c"
  __retres31 = 40;
# 334 "xmltok_impl.c"
  goto return_label;
  case_9:
# 336 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(90139, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90138, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90137, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 337 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90140, 58351, 1);
    __CrestLoad(90142, (unsigned long )0, (long long )-1);
    __CrestStore(90143, (unsigned long )(& __retres31));
# 338 "xmltok_impl.c"
    __retres31 = -1;
# 338 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90141, 58353, 0);

  }
  }
  {
# 339 "xmltok_impl.c"
  mem_21 = ptr + 0;
  {
  __CrestLoad(90146, (unsigned long )mem_21, (long long )*mem_21);
  __CrestLoad(90145, (unsigned long )0, (long long )0);
  __CrestApply2(90144, 12, (long long )((int const )*mem_21 == 0));
# 339 "xmltok_impl.c"
  if ((int const )*mem_21 == 0) {
    __CrestBranch(90147, 58357, 1);
# 339 "xmltok_impl.c"
    mem_22 = ptr + 1;
# 339 "xmltok_impl.c"
    mem_23 = (struct normal_encoding *)enc;
    __CrestLoad(90149, (unsigned long )(& mem_23->type[(unsigned char )*mem_22]),
                (long long )mem_23->type[(unsigned char )*mem_22]);
    __CrestStore(90150, (unsigned long )(& tmp___2));
# 339 "xmltok_impl.c"
    tmp___2 = (int )mem_23->type[(unsigned char )*mem_22];
  } else {
    __CrestBranch(90148, 58358, 0);
# 339 "xmltok_impl.c"
    mem_24 = ptr + 0;
# 339 "xmltok_impl.c"
    mem_25 = ptr + 1;
    __CrestLoad(90151, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(90152, (unsigned long )mem_25, (long long )*mem_25);
# 339 "xmltok_impl.c"
    tmp___1 = unicode_byte_type((char )*mem_24, (char )*mem_25);
    __CrestHandleReturn(90154, (long long )tmp___1);
    __CrestStore(90153, (unsigned long )(& tmp___1));
    __CrestLoad(90155, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(90156, (unsigned long )(& tmp___2));
# 339 "xmltok_impl.c"
    tmp___2 = tmp___1;
  }
  }
  }
  {
  __CrestLoad(90159, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(90158, (unsigned long )0, (long long )10);
  __CrestApply2(90157, 12, (long long )(tmp___2 == 10));
# 339 "xmltok_impl.c"
  if (tmp___2 == 10) {
    __CrestBranch(90160, 58360, 1);
# 340 "xmltok_impl.c"
    ptr += 2;
  } else {
    __CrestBranch(90161, 58361, 0);

  }
  }
# 341 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90162, (unsigned long )0, (long long )7);
  __CrestStore(90163, (unsigned long )(& __retres31));
# 342 "xmltok_impl.c"
  __retres31 = 7;
# 342 "xmltok_impl.c"
  goto return_label;
  case_10:
# 344 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(90164, (unsigned long )0, (long long )7);
  __CrestStore(90165, (unsigned long )(& __retres31));
# 345 "xmltok_impl.c"
  __retres31 = 7;
# 345 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(90170, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90169, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90168, 18, (long long )(end - ptr));
  __CrestLoad(90167, (unsigned long )0, (long long )2L);
  __CrestApply2(90166, 16, (long long )(end - ptr < 2L));
# 346 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(90171, 58369, 1);
    __CrestLoad(90173, (unsigned long )0, (long long )-2);
    __CrestStore(90174, (unsigned long )(& __retres31));
# 346 "xmltok_impl.c"
    __retres31 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90172, 58371, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 2;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(90179, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90178, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90177, 18, (long long )(end - ptr));
  __CrestLoad(90176, (unsigned long )0, (long long )3L);
  __CrestApply2(90175, 16, (long long )(end - ptr < 3L));
# 346 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(90180, 58375, 1);
    __CrestLoad(90182, (unsigned long )0, (long long )-2);
    __CrestStore(90183, (unsigned long )(& __retres31));
# 346 "xmltok_impl.c"
    __retres31 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90181, 58377, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 3;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(90188, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90187, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90186, 18, (long long )(end - ptr));
  __CrestLoad(90185, (unsigned long )0, (long long )4L);
  __CrestApply2(90184, 16, (long long )(end - ptr < 4L));
# 346 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(90189, 58381, 1);
    __CrestLoad(90191, (unsigned long )0, (long long )-2);
    __CrestStore(90192, (unsigned long )(& __retres31));
# 346 "xmltok_impl.c"
    __retres31 = -2;
# 346 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90190, 58383, 0);

  }
  }
# 346 "xmltok_impl.c"
  ptr += 4;
# 346 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 346 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90193, (unsigned long )0, (long long )0);
  __CrestStore(90194, (unsigned long )(& __retres31));
# 346 "xmltok_impl.c"
  __retres31 = 0;
# 346 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 348 "xmltok_impl.c"
  ptr += 2;
# 349 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  {
# 351 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(90197, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(90196, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(90195, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 351 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(90198, 58396, 1);

    } else {
      __CrestBranch(90199, 58397, 0);
# 351 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 352 "xmltok_impl.c"
    mem_26 = ptr + 0;
    {
    __CrestLoad(90202, (unsigned long )mem_26, (long long )*mem_26);
    __CrestLoad(90201, (unsigned long )0, (long long )0);
    __CrestApply2(90200, 12, (long long )((int const )*mem_26 == 0));
# 352 "xmltok_impl.c"
    if ((int const )*mem_26 == 0) {
      __CrestBranch(90203, 58401, 1);
# 352 "xmltok_impl.c"
      mem_27 = ptr + 1;
# 352 "xmltok_impl.c"
      mem_28 = (struct normal_encoding *)enc;
      __CrestLoad(90205, (unsigned long )(& mem_28->type[(unsigned char )*mem_27]),
                  (long long )mem_28->type[(unsigned char )*mem_27]);
      __CrestStore(90206, (unsigned long )(& tmp___4));
# 352 "xmltok_impl.c"
      tmp___4 = (int )mem_28->type[(unsigned char )*mem_27];
    } else {
      __CrestBranch(90204, 58402, 0);
# 352 "xmltok_impl.c"
      mem_29 = ptr + 0;
# 352 "xmltok_impl.c"
      mem_30 = ptr + 1;
      __CrestLoad(90207, (unsigned long )mem_29, (long long )*mem_29);
      __CrestLoad(90208, (unsigned long )mem_30, (long long )*mem_30);
# 352 "xmltok_impl.c"
      tmp___3 = unicode_byte_type((char )*mem_29, (char )*mem_30);
      __CrestHandleReturn(90210, (long long )tmp___3);
      __CrestStore(90209, (unsigned long )(& tmp___3));
      __CrestLoad(90211, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestStore(90212, (unsigned long )(& tmp___4));
# 352 "xmltok_impl.c"
      tmp___4 = tmp___3;
    }
    }
    }
    {
    {
    __CrestLoad(90215, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90214, (unsigned long )0, (long long )5);
    __CrestApply2(90213, 12, (long long )(tmp___4 == 5));
# 361 "xmltok_impl.c"
    if (tmp___4 == 5) {
      __CrestBranch(90216, 58405, 1);
# 361 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(90217, 58406, 0);

    }
    }
    {
    __CrestLoad(90220, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90219, (unsigned long )0, (long long )6);
    __CrestApply2(90218, 12, (long long )(tmp___4 == 6));
# 361 "xmltok_impl.c"
    if (tmp___4 == 6) {
      __CrestBranch(90221, 58408, 1);
# 361 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(90222, 58409, 0);

    }
    }
    {
    __CrestLoad(90225, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90224, (unsigned long )0, (long long )7);
    __CrestApply2(90223, 12, (long long )(tmp___4 == 7));
# 361 "xmltok_impl.c"
    if (tmp___4 == 7) {
      __CrestBranch(90226, 58411, 1);
# 361 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(90227, 58412, 0);

    }
    }
    {
    __CrestLoad(90230, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90229, (unsigned long )0, (long long )4);
    __CrestApply2(90228, 12, (long long )(tmp___4 == 4));
# 368 "xmltok_impl.c"
    if (tmp___4 == 4) {
      __CrestBranch(90231, 58414, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90232, 58415, 0);

    }
    }
    {
    __CrestLoad(90235, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90234, (unsigned long )0, (long long )10);
    __CrestApply2(90233, 12, (long long )(tmp___4 == 10));
# 368 "xmltok_impl.c"
    if (tmp___4 == 10) {
      __CrestBranch(90236, 58417, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90237, 58418, 0);

    }
    }
    {
    __CrestLoad(90240, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90239, (unsigned long )0, (long long )9);
    __CrestApply2(90238, 12, (long long )(tmp___4 == 9));
# 368 "xmltok_impl.c"
    if (tmp___4 == 9) {
      __CrestBranch(90241, 58420, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90242, 58421, 0);

    }
    }
    {
    __CrestLoad(90245, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90244, (unsigned long )0, (long long )8);
    __CrestApply2(90243, 12, (long long )(tmp___4 == 8));
# 368 "xmltok_impl.c"
    if (tmp___4 == 8) {
      __CrestBranch(90246, 58423, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90247, 58424, 0);

    }
    }
    {
    __CrestLoad(90250, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90249, (unsigned long )0, (long long )1);
    __CrestApply2(90248, 12, (long long )(tmp___4 == 1));
# 368 "xmltok_impl.c"
    if (tmp___4 == 1) {
      __CrestBranch(90251, 58426, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90252, 58427, 0);

    }
    }
    {
    __CrestLoad(90255, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(90254, (unsigned long )0, (long long )0);
    __CrestApply2(90253, 12, (long long )(tmp___4 == 0));
# 368 "xmltok_impl.c"
    if (tmp___4 == 0) {
      __CrestBranch(90256, 58429, 1);
# 368 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(90257, 58430, 0);

    }
    }
# 371 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(90262, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90261, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90260, 18, (long long )(end - ptr));
    __CrestLoad(90259, (unsigned long )0, (long long )2L);
    __CrestApply2(90258, 16, (long long )(end - ptr < 2L));
# 361 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(90263, 58433, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90265, (unsigned long )0, (long long )6);
      __CrestStore(90266, (unsigned long )(& __retres31));
# 361 "xmltok_impl.c"
      __retres31 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90264, 58436, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 2;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(90271, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90270, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90269, 18, (long long )(end - ptr));
    __CrestLoad(90268, (unsigned long )0, (long long )3L);
    __CrestApply2(90267, 16, (long long )(end - ptr < 3L));
# 361 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(90272, 58440, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90274, (unsigned long )0, (long long )6);
      __CrestStore(90275, (unsigned long )(& __retres31));
# 361 "xmltok_impl.c"
      __retres31 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90273, 58443, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 3;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(90280, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90279, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90278, 18, (long long )(end - ptr));
    __CrestLoad(90277, (unsigned long )0, (long long )4L);
    __CrestApply2(90276, 16, (long long )(end - ptr < 4L));
# 361 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(90281, 58447, 1);
# 361 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90283, (unsigned long )0, (long long )6);
      __CrestStore(90284, (unsigned long )(& __retres31));
# 361 "xmltok_impl.c"
      __retres31 = 6;
# 361 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90282, 58450, 0);

    }
    }
# 361 "xmltok_impl.c"
    ptr += 4;
# 361 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
# 369 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90285, (unsigned long )0, (long long )6);
    __CrestStore(90286, (unsigned long )(& __retres31));
# 370 "xmltok_impl.c"
    __retres31 = 6;
# 370 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 372 "xmltok_impl.c"
    ptr += 2;
# 373 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
# 376 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90287, (unsigned long )0, (long long )6);
  __CrestStore(90288, (unsigned long )(& __retres31));
# 377 "xmltok_impl.c"
  __retres31 = 6;
  return_label:
  {
  __CrestLoad(90289, (unsigned long )(& __retres31), (long long )__retres31);
  __CrestReturn(90290);
# 304 "xmltok_impl.c"
  return (__retres31);
  }
}
}
# 382 "xmltok_impl.c"
static int big2_scanEndTag(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_11 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  struct normal_encoding *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  struct normal_encoding *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  int __retres32 ;

  {
  __CrestCall(90291, 907);

  {
  __CrestLoad(90294, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90293, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90292, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 386 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90295, 58464, 1);
    __CrestLoad(90297, (unsigned long )0, (long long )-1);
    __CrestStore(90298, (unsigned long )(& __retres32));
# 387 "xmltok_impl.c"
    __retres32 = -1;
# 387 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90296, 58466, 0);

  }
  }
  {
# 388 "xmltok_impl.c"
  mem_11 = ptr + 0;
  {
  __CrestLoad(90301, (unsigned long )mem_11, (long long )*mem_11);
  __CrestLoad(90300, (unsigned long )0, (long long )0);
  __CrestApply2(90299, 12, (long long )((int const )*mem_11 == 0));
# 388 "xmltok_impl.c"
  if ((int const )*mem_11 == 0) {
    __CrestBranch(90302, 58470, 1);
# 388 "xmltok_impl.c"
    mem_12 = ptr + 1;
# 388 "xmltok_impl.c"
    mem_13 = (struct normal_encoding *)enc;
    __CrestLoad(90304, (unsigned long )(& mem_13->type[(unsigned char )*mem_12]),
                (long long )mem_13->type[(unsigned char )*mem_12]);
    __CrestStore(90305, (unsigned long )(& tmp___0));
# 388 "xmltok_impl.c"
    tmp___0 = (int )mem_13->type[(unsigned char )*mem_12];
  } else {
    __CrestBranch(90303, 58471, 0);
# 388 "xmltok_impl.c"
    mem_14 = ptr + 0;
# 388 "xmltok_impl.c"
    mem_15 = ptr + 1;
    __CrestLoad(90306, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(90307, (unsigned long )mem_15, (long long )*mem_15);
# 388 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_14, (char )*mem_15);
    __CrestHandleReturn(90309, (long long )tmp);
    __CrestStore(90308, (unsigned long )(& tmp));
    __CrestLoad(90310, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(90311, (unsigned long )(& tmp___0));
# 388 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(90314, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90313, (unsigned long )0, (long long )29);
  __CrestApply2(90312, 12, (long long )(tmp___0 == 29));
# 389 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(90315, 58474, 1);
# 389 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(90316, 58475, 0);

  }
  }
  {
  __CrestLoad(90319, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90318, (unsigned long )0, (long long )24);
  __CrestApply2(90317, 12, (long long )(tmp___0 == 24));
# 389 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(90320, 58477, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(90321, 58478, 0);

  }
  }
  {
  __CrestLoad(90324, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90323, (unsigned long )0, (long long )22);
  __CrestApply2(90322, 12, (long long )(tmp___0 == 22));
# 389 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(90325, 58480, 1);
# 389 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(90326, 58481, 0);

  }
  }
  {
  __CrestLoad(90329, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90328, (unsigned long )0, (long long )5);
  __CrestApply2(90327, 12, (long long )(tmp___0 == 5));
# 389 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(90330, 58483, 1);
# 389 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(90331, 58484, 0);

  }
  }
  {
  __CrestLoad(90334, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90333, (unsigned long )0, (long long )6);
  __CrestApply2(90332, 12, (long long )(tmp___0 == 6));
# 389 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(90335, 58486, 1);
# 389 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(90336, 58487, 0);

  }
  }
  {
  __CrestLoad(90339, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90338, (unsigned long )0, (long long )7);
  __CrestApply2(90337, 12, (long long )(tmp___0 == 7));
# 389 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(90340, 58489, 1);
# 389 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(90341, 58490, 0);

  }
  }
# 390 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 389 "xmltok_impl.c"
  mem_16 = ptr + 0;
# 389 "xmltok_impl.c"
  mem_17 = ptr + 1;
# 389 "xmltok_impl.c"
  mem_18 = ptr + 1;
  {
  __CrestLoad(90350, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_16] << 3) + (int const )((int )((unsigned char )*mem_17) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_16] << 3) + (int const )((int )((unsigned char )*mem_17) >> 5)]);
  __CrestLoad(90349, (unsigned long )0, (long long )1);
  __CrestLoad(90348, (unsigned long )mem_18, (long long )*mem_18);
  __CrestLoad(90347, (unsigned long )0, (long long )31);
  __CrestApply2(90346, 5, (long long )((int )((unsigned char )*mem_18) & 31));
  __CrestApply2(90345, 8, (long long )(1 << ((int )((unsigned char )*mem_18) & 31)));
  __CrestApply2(90344, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_16] << 3) + (int const )((int )((unsigned char )*mem_17) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_18) & 31))));
  __CrestLoad(90343, (unsigned long )0, (long long )0);
  __CrestApply2(90342, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_16] << 3) + (int const )((int )((unsigned char )*mem_17) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_18) & 31))) == 0));
# 389 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_16] << 3) + (int const )((int )((unsigned char )*mem_17) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_18) & 31))) == 0) {
    __CrestBranch(90351, 58495, 1);
# 389 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90353, (unsigned long )0, (long long )0);
    __CrestStore(90354, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
    __retres32 = 0;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90352, 58498, 0);

  }
  }
  }
  case_24:
  case_22:
# 389 "xmltok_impl.c"
  ptr += 2;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(90359, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90358, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90357, 18, (long long )(end - ptr));
  __CrestLoad(90356, (unsigned long )0, (long long )2L);
  __CrestApply2(90355, 16, (long long )(end - ptr < 2L));
# 389 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(90360, 58502, 1);
    __CrestLoad(90362, (unsigned long )0, (long long )-2);
    __CrestStore(90363, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
    __retres32 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90361, 58504, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90364, (unsigned long )0, (long long )0);
  __CrestStore(90365, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
  __retres32 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 2;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(90370, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90369, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90368, 18, (long long )(end - ptr));
  __CrestLoad(90367, (unsigned long )0, (long long )3L);
  __CrestApply2(90366, 16, (long long )(end - ptr < 3L));
# 389 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(90371, 58511, 1);
    __CrestLoad(90373, (unsigned long )0, (long long )-2);
    __CrestStore(90374, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
    __retres32 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90372, 58513, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90375, (unsigned long )0, (long long )0);
  __CrestStore(90376, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
  __retres32 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 3;
# 389 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(90381, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90380, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90379, 18, (long long )(end - ptr));
  __CrestLoad(90378, (unsigned long )0, (long long )4L);
  __CrestApply2(90377, 16, (long long )(end - ptr < 4L));
# 389 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(90382, 58520, 1);
    __CrestLoad(90384, (unsigned long )0, (long long )-2);
    __CrestStore(90385, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
    __retres32 = -2;
# 389 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90383, 58522, 0);

  }
  }
# 389 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90386, (unsigned long )0, (long long )0);
  __CrestStore(90387, (unsigned long )(& __retres32));
# 389 "xmltok_impl.c"
  __retres32 = 0;
# 389 "xmltok_impl.c"
  goto return_label;
# 389 "xmltok_impl.c"
  ptr += 4;
# 389 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 391 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90388, (unsigned long )0, (long long )0);
  __CrestStore(90389, (unsigned long )(& __retres32));
# 392 "xmltok_impl.c"
  __retres32 = 0;
# 392 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 394 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(90392, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(90391, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(90390, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 394 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(90393, 58536, 1);

    } else {
      __CrestBranch(90394, 58537, 0);
# 394 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 395 "xmltok_impl.c"
    mem_19 = ptr + 0;
    {
    __CrestLoad(90397, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(90396, (unsigned long )0, (long long )0);
    __CrestApply2(90395, 12, (long long )((int const )*mem_19 == 0));
# 395 "xmltok_impl.c"
    if ((int const )*mem_19 == 0) {
      __CrestBranch(90398, 58541, 1);
# 395 "xmltok_impl.c"
      mem_20 = ptr + 1;
# 395 "xmltok_impl.c"
      mem_21 = (struct normal_encoding *)enc;
      __CrestLoad(90400, (unsigned long )(& mem_21->type[(unsigned char )*mem_20]),
                  (long long )mem_21->type[(unsigned char )*mem_20]);
      __CrestStore(90401, (unsigned long )(& tmp___2));
# 395 "xmltok_impl.c"
      tmp___2 = (int )mem_21->type[(unsigned char )*mem_20];
    } else {
      __CrestBranch(90399, 58542, 0);
# 395 "xmltok_impl.c"
      mem_22 = ptr + 0;
# 395 "xmltok_impl.c"
      mem_23 = ptr + 1;
      __CrestLoad(90402, (unsigned long )mem_22, (long long )*mem_22);
      __CrestLoad(90403, (unsigned long )mem_23, (long long )*mem_23);
# 395 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_22, (char )*mem_23);
      __CrestHandleReturn(90405, (long long )tmp___1);
      __CrestStore(90404, (unsigned long )(& tmp___1));
      __CrestLoad(90406, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(90407, (unsigned long )(& tmp___2));
# 395 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(90410, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90409, (unsigned long )0, (long long )29);
    __CrestApply2(90408, 12, (long long )(tmp___2 == 29));
# 396 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(90411, 58545, 1);
# 396 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(90412, 58546, 0);

    }
    }
    {
    __CrestLoad(90415, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90414, (unsigned long )0, (long long )27);
    __CrestApply2(90413, 12, (long long )(tmp___2 == 27));
# 396 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(90416, 58548, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90417, 58549, 0);

    }
    }
    {
    __CrestLoad(90420, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90419, (unsigned long )0, (long long )26);
    __CrestApply2(90418, 12, (long long )(tmp___2 == 26));
# 396 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(90421, 58551, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90422, 58552, 0);

    }
    }
    {
    __CrestLoad(90425, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90424, (unsigned long )0, (long long )25);
    __CrestApply2(90423, 12, (long long )(tmp___2 == 25));
# 396 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(90426, 58554, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90427, 58555, 0);

    }
    }
    {
    __CrestLoad(90430, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90429, (unsigned long )0, (long long )24);
    __CrestApply2(90428, 12, (long long )(tmp___2 == 24));
# 396 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(90431, 58557, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90432, 58558, 0);

    }
    }
    {
    __CrestLoad(90435, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90434, (unsigned long )0, (long long )22);
    __CrestApply2(90433, 12, (long long )(tmp___2 == 22));
# 396 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(90436, 58560, 1);
# 396 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90437, 58561, 0);

    }
    }
    {
    __CrestLoad(90440, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90439, (unsigned long )0, (long long )5);
    __CrestApply2(90438, 12, (long long )(tmp___2 == 5));
# 396 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(90441, 58563, 1);
# 396 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(90442, 58564, 0);

    }
    }
    {
    __CrestLoad(90445, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90444, (unsigned long )0, (long long )6);
    __CrestApply2(90443, 12, (long long )(tmp___2 == 6));
# 396 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(90446, 58566, 1);
# 396 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(90447, 58567, 0);

    }
    }
    {
    __CrestLoad(90450, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90449, (unsigned long )0, (long long )7);
    __CrestApply2(90448, 12, (long long )(tmp___2 == 7));
# 396 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(90451, 58569, 1);
# 396 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(90452, 58570, 0);

    }
    }
    {
    __CrestLoad(90455, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90454, (unsigned long )0, (long long )10);
    __CrestApply2(90453, 12, (long long )(tmp___2 == 10));
# 397 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(90456, 58572, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(90457, 58573, 0);

    }
    }
    {
    __CrestLoad(90460, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90459, (unsigned long )0, (long long )9);
    __CrestApply2(90458, 12, (long long )(tmp___2 == 9));
# 397 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(90461, 58575, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(90462, 58576, 0);

    }
    }
    {
    __CrestLoad(90465, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90464, (unsigned long )0, (long long )21);
    __CrestApply2(90463, 12, (long long )(tmp___2 == 21));
# 397 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(90466, 58578, 1);
# 397 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(90467, 58579, 0);

    }
    }
    {
    __CrestLoad(90470, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90469, (unsigned long )0, (long long )23);
    __CrestApply2(90468, 12, (long long )(tmp___2 == 23));
# 412 "xmltok_impl.c"
    if (tmp___2 == 23) {
      __CrestBranch(90471, 58581, 1);
# 412 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(90472, 58582, 0);

    }
    }
    {
    __CrestLoad(90475, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(90474, (unsigned long )0, (long long )11);
    __CrestApply2(90473, 12, (long long )(tmp___2 == 11));
# 418 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(90476, 58584, 1);
# 418 "xmltok_impl.c"
      goto case_11___0;
    } else {
      __CrestBranch(90477, 58585, 0);

    }
    }
# 421 "xmltok_impl.c"
    goto switch_default___1;
    case_29___0:
    {
# 396 "xmltok_impl.c"
    mem_24 = ptr + 0;
# 396 "xmltok_impl.c"
    mem_25 = ptr + 1;
# 396 "xmltok_impl.c"
    mem_26 = ptr + 1;
    {
    __CrestLoad(90486, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_24] << 3) + (int const )((int )((unsigned char )*mem_25) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_24] << 3) + (int const )((int )((unsigned char )*mem_25) >> 5)]);
    __CrestLoad(90485, (unsigned long )0, (long long )1);
    __CrestLoad(90484, (unsigned long )mem_26, (long long )*mem_26);
    __CrestLoad(90483, (unsigned long )0, (long long )31);
    __CrestApply2(90482, 5, (long long )((int )((unsigned char )*mem_26) & 31));
    __CrestApply2(90481, 8, (long long )(1 << ((int )((unsigned char )*mem_26) & 31)));
    __CrestApply2(90480, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_24] << 3) + (int const )((int )((unsigned char )*mem_25) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_26) & 31))));
    __CrestLoad(90479, (unsigned long )0, (long long )0);
    __CrestApply2(90478, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_24] << 3) + (int const )((int )((unsigned char )*mem_25) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_26) & 31))) == 0));
# 396 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_24] << 3) + (int const )((int )((unsigned char )*mem_25) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_26) & 31))) == 0) {
      __CrestBranch(90487, 58590, 1);
# 396 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90489, (unsigned long )0, (long long )0);
      __CrestStore(90490, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
      __retres32 = 0;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90488, 58593, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 396 "xmltok_impl.c"
    ptr += 2;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(90495, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90494, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90493, 18, (long long )(end - ptr));
    __CrestLoad(90492, (unsigned long )0, (long long )2L);
    __CrestApply2(90491, 16, (long long )(end - ptr < 2L));
# 396 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(90496, 58597, 1);
      __CrestLoad(90498, (unsigned long )0, (long long )-2);
      __CrestStore(90499, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
      __retres32 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90497, 58599, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90500, (unsigned long )0, (long long )0);
    __CrestStore(90501, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
    __retres32 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 2;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(90506, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90505, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90504, 18, (long long )(end - ptr));
    __CrestLoad(90503, (unsigned long )0, (long long )3L);
    __CrestApply2(90502, 16, (long long )(end - ptr < 3L));
# 396 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(90507, 58606, 1);
      __CrestLoad(90509, (unsigned long )0, (long long )-2);
      __CrestStore(90510, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
      __retres32 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90508, 58608, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90511, (unsigned long )0, (long long )0);
    __CrestStore(90512, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
    __retres32 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 3;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(90517, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90516, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90515, 18, (long long )(end - ptr));
    __CrestLoad(90514, (unsigned long )0, (long long )4L);
    __CrestApply2(90513, 16, (long long )(end - ptr < 4L));
# 396 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(90518, 58615, 1);
      __CrestLoad(90520, (unsigned long )0, (long long )-2);
      __CrestStore(90521, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
      __retres32 = -2;
# 396 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90519, 58617, 0);

    }
    }
# 396 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90522, (unsigned long )0, (long long )0);
    __CrestStore(90523, (unsigned long )(& __retres32));
# 396 "xmltok_impl.c"
    __retres32 = 0;
# 396 "xmltok_impl.c"
    goto return_label;
# 396 "xmltok_impl.c"
    ptr += 4;
# 396 "xmltok_impl.c"
    goto switch_break___0;
    case_10:
    case_9:
    case_21:
# 398 "xmltok_impl.c"
    ptr += 2;
    {
# 398 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(90526, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(90525, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(90524, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 398 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(90527, 58628, 1);

      } else {
        __CrestBranch(90528, 58629, 0);
# 398 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 399 "xmltok_impl.c"
      mem_27 = ptr + 0;
      {
      __CrestLoad(90531, (unsigned long )mem_27, (long long )*mem_27);
      __CrestLoad(90530, (unsigned long )0, (long long )0);
      __CrestApply2(90529, 12, (long long )((int const )*mem_27 == 0));
# 399 "xmltok_impl.c"
      if ((int const )*mem_27 == 0) {
        __CrestBranch(90532, 58633, 1);
# 399 "xmltok_impl.c"
        mem_28 = ptr + 1;
# 399 "xmltok_impl.c"
        mem_29 = (struct normal_encoding *)enc;
        __CrestLoad(90534, (unsigned long )(& mem_29->type[(unsigned char )*mem_28]),
                    (long long )mem_29->type[(unsigned char )*mem_28]);
        __CrestStore(90535, (unsigned long )(& tmp___4));
# 399 "xmltok_impl.c"
        tmp___4 = (int )mem_29->type[(unsigned char )*mem_28];
      } else {
        __CrestBranch(90533, 58634, 0);
# 399 "xmltok_impl.c"
        mem_30 = ptr + 0;
# 399 "xmltok_impl.c"
        mem_31 = ptr + 1;
        __CrestLoad(90536, (unsigned long )mem_30, (long long )*mem_30);
        __CrestLoad(90537, (unsigned long )mem_31, (long long )*mem_31);
# 399 "xmltok_impl.c"
        tmp___3 = unicode_byte_type((char )*mem_30, (char )*mem_31);
        __CrestHandleReturn(90539, (long long )tmp___3);
        __CrestStore(90538, (unsigned long )(& tmp___3));
        __CrestLoad(90540, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestStore(90541, (unsigned long )(& tmp___4));
# 399 "xmltok_impl.c"
        tmp___4 = tmp___3;
      }
      }
      }
      {
      {
      __CrestLoad(90544, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(90543, (unsigned long )0, (long long )10);
      __CrestApply2(90542, 12, (long long )(tmp___4 == 10));
# 400 "xmltok_impl.c"
      if (tmp___4 == 10) {
        __CrestBranch(90545, 58637, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(90546, 58638, 0);

      }
      }
      {
      __CrestLoad(90549, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(90548, (unsigned long )0, (long long )9);
      __CrestApply2(90547, 12, (long long )(tmp___4 == 9));
# 400 "xmltok_impl.c"
      if (tmp___4 == 9) {
        __CrestBranch(90550, 58640, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(90551, 58641, 0);

      }
      }
      {
      __CrestLoad(90554, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(90553, (unsigned long )0, (long long )21);
      __CrestApply2(90552, 12, (long long )(tmp___4 == 21));
# 400 "xmltok_impl.c"
      if (tmp___4 == 21) {
        __CrestBranch(90555, 58643, 1);
# 400 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(90556, 58644, 0);

      }
      }
      {
      __CrestLoad(90559, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(90558, (unsigned long )0, (long long )11);
      __CrestApply2(90557, 12, (long long )(tmp___4 == 11));
# 402 "xmltok_impl.c"
      if (tmp___4 == 11) {
        __CrestBranch(90560, 58646, 1);
# 402 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(90561, 58647, 0);

      }
      }
# 405 "xmltok_impl.c"
      goto switch_default___0;
      case_10___0:
      case_9___0:
      case_21___0:
# 401 "xmltok_impl.c"
      goto switch_break___1;
      case_11:
# 403 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(90562, (unsigned long )0, (long long )5);
      __CrestStore(90563, (unsigned long )(& __retres32));
# 404 "xmltok_impl.c"
      __retres32 = 5;
# 404 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 406 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90564, (unsigned long )0, (long long )0);
      __CrestStore(90565, (unsigned long )(& __retres32));
# 407 "xmltok_impl.c"
      __retres32 = 0;
# 407 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
# 398 "xmltok_impl.c"
      ptr += 2;
    }
    while_break___0: ;
    }
    __CrestLoad(90566, (unsigned long )0, (long long )-1);
    __CrestStore(90567, (unsigned long )(& __retres32));
# 410 "xmltok_impl.c"
    __retres32 = -1;
# 410 "xmltok_impl.c"
    goto return_label;
    case_23:
# 415 "xmltok_impl.c"
    ptr += 2;
# 416 "xmltok_impl.c"
    goto switch_break___0;
    case_11___0:
# 419 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(90568, (unsigned long )0, (long long )5);
    __CrestStore(90569, (unsigned long )(& __retres32));
# 420 "xmltok_impl.c"
    __retres32 = 5;
# 420 "xmltok_impl.c"
    goto return_label;
    switch_default___1:
# 422 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90570, (unsigned long )0, (long long )0);
    __CrestStore(90571, (unsigned long )(& __retres32));
# 423 "xmltok_impl.c"
    __retres32 = 0;
# 423 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(90572, (unsigned long )0, (long long )-1);
  __CrestStore(90573, (unsigned long )(& __retres32));
# 426 "xmltok_impl.c"
  __retres32 = -1;
  return_label:
  {
  __CrestLoad(90574, (unsigned long )(& __retres32), (long long )__retres32);
  __CrestReturn(90575);
# 382 "xmltok_impl.c"
  return (__retres32);
  }
}
}
# 431 "xmltok_impl.c"
static int big2_scanHexCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                               char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(90576, 908);

  {
  __CrestLoad(90579, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90578, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90577, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 435 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(90580, 58674, 1);
    {
# 436 "xmltok_impl.c"
    mem_9 = ptr + 0;
    {
    __CrestLoad(90584, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(90583, (unsigned long )0, (long long )0);
    __CrestApply2(90582, 12, (long long )((int const )*mem_9 == 0));
# 436 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(90585, 58677, 1);
# 436 "xmltok_impl.c"
      mem_10 = ptr + 1;
# 436 "xmltok_impl.c"
      mem_11 = (struct normal_encoding *)enc;
      __CrestLoad(90587, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                  (long long )mem_11->type[(unsigned char )*mem_10]);
      __CrestStore(90588, (unsigned long )(& tmp___0));
# 436 "xmltok_impl.c"
      tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
    } else {
      __CrestBranch(90586, 58678, 0);
# 436 "xmltok_impl.c"
      mem_12 = ptr + 0;
# 436 "xmltok_impl.c"
      mem_13 = ptr + 1;
      __CrestLoad(90589, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(90590, (unsigned long )mem_13, (long long )*mem_13);
# 436 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
      __CrestHandleReturn(90592, (long long )tmp);
      __CrestStore(90591, (unsigned long )(& tmp));
      __CrestLoad(90593, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(90594, (unsigned long )(& tmp___0));
# 436 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(90597, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90596, (unsigned long )0, (long long )24);
    __CrestApply2(90595, 12, (long long )(tmp___0 == 24));
# 438 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(90598, 58681, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(90599, 58682, 0);

    }
    }
    {
    __CrestLoad(90602, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90601, (unsigned long )0, (long long )25);
    __CrestApply2(90600, 12, (long long )(tmp___0 == 25));
# 438 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(90603, 58684, 1);
# 438 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(90604, 58685, 0);

    }
    }
# 440 "xmltok_impl.c"
    goto switch_default;
    case_24:
    case_25:
# 439 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 441 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90605, (unsigned long )0, (long long )0);
    __CrestStore(90606, (unsigned long )(& __retres19));
# 442 "xmltok_impl.c"
    __retres19 = 0;
# 442 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
# 444 "xmltok_impl.c"
    ptr += 2;
    {
# 444 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(90609, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(90608, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(90607, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 444 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(90610, 58697, 1);

      } else {
        __CrestBranch(90611, 58698, 0);
# 444 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 445 "xmltok_impl.c"
      mem_14 = ptr + 0;
      {
      __CrestLoad(90614, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(90613, (unsigned long )0, (long long )0);
      __CrestApply2(90612, 12, (long long )((int const )*mem_14 == 0));
# 445 "xmltok_impl.c"
      if ((int const )*mem_14 == 0) {
        __CrestBranch(90615, 58702, 1);
# 445 "xmltok_impl.c"
        mem_15 = ptr + 1;
# 445 "xmltok_impl.c"
        mem_16 = (struct normal_encoding *)enc;
        __CrestLoad(90617, (unsigned long )(& mem_16->type[(unsigned char )*mem_15]),
                    (long long )mem_16->type[(unsigned char )*mem_15]);
        __CrestStore(90618, (unsigned long )(& tmp___2));
# 445 "xmltok_impl.c"
        tmp___2 = (int )mem_16->type[(unsigned char )*mem_15];
      } else {
        __CrestBranch(90616, 58703, 0);
# 445 "xmltok_impl.c"
        mem_17 = ptr + 0;
# 445 "xmltok_impl.c"
        mem_18 = ptr + 1;
        __CrestLoad(90619, (unsigned long )mem_17, (long long )*mem_17);
        __CrestLoad(90620, (unsigned long )mem_18, (long long )*mem_18);
# 445 "xmltok_impl.c"
        tmp___1 = unicode_byte_type((char )*mem_17, (char )*mem_18);
        __CrestHandleReturn(90622, (long long )tmp___1);
        __CrestStore(90621, (unsigned long )(& tmp___1));
        __CrestLoad(90623, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(90624, (unsigned long )(& tmp___2));
# 445 "xmltok_impl.c"
        tmp___2 = tmp___1;
      }
      }
      }
      {
      {
      __CrestLoad(90627, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(90626, (unsigned long )0, (long long )24);
      __CrestApply2(90625, 12, (long long )(tmp___2 == 24));
# 447 "xmltok_impl.c"
      if (tmp___2 == 24) {
        __CrestBranch(90628, 58706, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(90629, 58707, 0);

      }
      }
      {
      __CrestLoad(90632, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(90631, (unsigned long )0, (long long )25);
      __CrestApply2(90630, 12, (long long )(tmp___2 == 25));
# 447 "xmltok_impl.c"
      if (tmp___2 == 25) {
        __CrestBranch(90633, 58709, 1);
# 447 "xmltok_impl.c"
        goto case_24___0;
      } else {
        __CrestBranch(90634, 58710, 0);

      }
      }
      {
      __CrestLoad(90637, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(90636, (unsigned long )0, (long long )18);
      __CrestApply2(90635, 12, (long long )(tmp___2 == 18));
# 449 "xmltok_impl.c"
      if (tmp___2 == 18) {
        __CrestBranch(90638, 58712, 1);
# 449 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(90639, 58713, 0);

      }
      }
# 452 "xmltok_impl.c"
      goto switch_default___0;
      case_24___0:
      case_25___0:
# 448 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 450 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(90640, (unsigned long )0, (long long )10);
      __CrestStore(90641, (unsigned long )(& __retres19));
# 451 "xmltok_impl.c"
      __retres19 = 10;
# 451 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 453 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90642, (unsigned long )0, (long long )0);
      __CrestStore(90643, (unsigned long )(& __retres19));
# 454 "xmltok_impl.c"
      __retres19 = 0;
# 454 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
# 444 "xmltok_impl.c"
      ptr += 2;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(90581, 58725, 0);

  }
  }
  __CrestLoad(90644, (unsigned long )0, (long long )-1);
  __CrestStore(90645, (unsigned long )(& __retres19));
# 458 "xmltok_impl.c"
  __retres19 = -1;
  return_label:
  {
  __CrestLoad(90646, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(90647);
# 431 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 463 "xmltok_impl.c"
static int big2_scanCharRef(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  struct normal_encoding *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  int __retres22 ;

  {
  __CrestCall(90648, 909);

  {
  __CrestLoad(90651, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90650, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90649, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 467 "xmltok_impl.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(90652, 58729, 1);
    {
# 468 "xmltok_impl.c"
    mem_10 = ptr + 0;
    {
    __CrestLoad(90656, (unsigned long )mem_10, (long long )*mem_10);
    __CrestLoad(90655, (unsigned long )0, (long long )0);
    __CrestApply2(90654, 12, (long long )((int const )*mem_10 == 0));
# 468 "xmltok_impl.c"
    if ((int const )*mem_10 == 0) {
      __CrestBranch(90657, 58732, 1);
      {
# 468 "xmltok_impl.c"
      mem_11 = ptr + 1;
      {
      __CrestLoad(90661, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(90660, (unsigned long )0, (long long )120);
      __CrestApply2(90659, 12, (long long )((int const )*mem_11 == 120));
# 468 "xmltok_impl.c"
      if ((int const )*mem_11 == 120) {
        __CrestBranch(90662, 58735, 1);
# 469 "xmltok_impl.c"
        tmp = big2_scanHexCharRef(enc, ptr + 2, end, nextTokPtr);
        __CrestHandleReturn(90665, (long long )tmp);
        __CrestStore(90664, (unsigned long )(& tmp));
        __CrestLoad(90666, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(90667, (unsigned long )(& __retres22));
# 469 "xmltok_impl.c"
        __retres22 = tmp;
# 469 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(90663, 58738, 0);

      }
      }
      }
    } else {
      __CrestBranch(90658, 58739, 0);

    }
    }
    }
    {
# 470 "xmltok_impl.c"
    mem_12 = ptr + 0;
    {
    __CrestLoad(90670, (unsigned long )mem_12, (long long )*mem_12);
    __CrestLoad(90669, (unsigned long )0, (long long )0);
    __CrestApply2(90668, 12, (long long )((int const )*mem_12 == 0));
# 470 "xmltok_impl.c"
    if ((int const )*mem_12 == 0) {
      __CrestBranch(90671, 58743, 1);
# 470 "xmltok_impl.c"
      mem_13 = ptr + 1;
# 470 "xmltok_impl.c"
      mem_14 = (struct normal_encoding *)enc;
      __CrestLoad(90673, (unsigned long )(& mem_14->type[(unsigned char )*mem_13]),
                  (long long )mem_14->type[(unsigned char )*mem_13]);
      __CrestStore(90674, (unsigned long )(& tmp___1));
# 470 "xmltok_impl.c"
      tmp___1 = (int )mem_14->type[(unsigned char )*mem_13];
    } else {
      __CrestBranch(90672, 58744, 0);
# 470 "xmltok_impl.c"
      mem_15 = ptr + 0;
# 470 "xmltok_impl.c"
      mem_16 = ptr + 1;
      __CrestLoad(90675, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(90676, (unsigned long )mem_16, (long long )*mem_16);
# 470 "xmltok_impl.c"
      tmp___0 = unicode_byte_type((char )*mem_15, (char )*mem_16);
      __CrestHandleReturn(90678, (long long )tmp___0);
      __CrestStore(90677, (unsigned long )(& tmp___0));
      __CrestLoad(90679, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(90680, (unsigned long )(& tmp___1));
# 470 "xmltok_impl.c"
      tmp___1 = tmp___0;
    }
    }
    }
    {
    {
    __CrestLoad(90683, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(90682, (unsigned long )0, (long long )25);
    __CrestApply2(90681, 12, (long long )(tmp___1 == 25));
# 471 "xmltok_impl.c"
    if (tmp___1 == 25) {
      __CrestBranch(90684, 58747, 1);
# 471 "xmltok_impl.c"
      goto case_25;
    } else {
      __CrestBranch(90685, 58748, 0);

    }
    }
# 473 "xmltok_impl.c"
    goto switch_default;
    case_25:
# 472 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 474 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90686, (unsigned long )0, (long long )0);
    __CrestStore(90687, (unsigned long )(& __retres22));
# 475 "xmltok_impl.c"
    __retres22 = 0;
# 475 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
# 477 "xmltok_impl.c"
    ptr += 2;
    {
# 477 "xmltok_impl.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(90690, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(90689, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(90688, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 477 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(90691, 58760, 1);

      } else {
        __CrestBranch(90692, 58761, 0);
# 477 "xmltok_impl.c"
        goto while_break;
      }
      }
      {
# 478 "xmltok_impl.c"
      mem_17 = ptr + 0;
      {
      __CrestLoad(90695, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(90694, (unsigned long )0, (long long )0);
      __CrestApply2(90693, 12, (long long )((int const )*mem_17 == 0));
# 478 "xmltok_impl.c"
      if ((int const )*mem_17 == 0) {
        __CrestBranch(90696, 58765, 1);
# 478 "xmltok_impl.c"
        mem_18 = ptr + 1;
# 478 "xmltok_impl.c"
        mem_19 = (struct normal_encoding *)enc;
        __CrestLoad(90698, (unsigned long )(& mem_19->type[(unsigned char )*mem_18]),
                    (long long )mem_19->type[(unsigned char )*mem_18]);
        __CrestStore(90699, (unsigned long )(& tmp___3));
# 478 "xmltok_impl.c"
        tmp___3 = (int )mem_19->type[(unsigned char )*mem_18];
      } else {
        __CrestBranch(90697, 58766, 0);
# 478 "xmltok_impl.c"
        mem_20 = ptr + 0;
# 478 "xmltok_impl.c"
        mem_21 = ptr + 1;
        __CrestLoad(90700, (unsigned long )mem_20, (long long )*mem_20);
        __CrestLoad(90701, (unsigned long )mem_21, (long long )*mem_21);
# 478 "xmltok_impl.c"
        tmp___2 = unicode_byte_type((char )*mem_20, (char )*mem_21);
        __CrestHandleReturn(90703, (long long )tmp___2);
        __CrestStore(90702, (unsigned long )(& tmp___2));
        __CrestLoad(90704, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(90705, (unsigned long )(& tmp___3));
# 478 "xmltok_impl.c"
        tmp___3 = tmp___2;
      }
      }
      }
      {
      {
      __CrestLoad(90708, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(90707, (unsigned long )0, (long long )25);
      __CrestApply2(90706, 12, (long long )(tmp___3 == 25));
# 479 "xmltok_impl.c"
      if (tmp___3 == 25) {
        __CrestBranch(90709, 58769, 1);
# 479 "xmltok_impl.c"
        goto case_25___0;
      } else {
        __CrestBranch(90710, 58770, 0);

      }
      }
      {
      __CrestLoad(90713, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(90712, (unsigned long )0, (long long )18);
      __CrestApply2(90711, 12, (long long )(tmp___3 == 18));
# 481 "xmltok_impl.c"
      if (tmp___3 == 18) {
        __CrestBranch(90714, 58772, 1);
# 481 "xmltok_impl.c"
        goto case_18;
      } else {
        __CrestBranch(90715, 58773, 0);

      }
      }
# 484 "xmltok_impl.c"
      goto switch_default___0;
      case_25___0:
# 480 "xmltok_impl.c"
      goto switch_break___0;
      case_18:
# 482 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(90716, (unsigned long )0, (long long )10);
      __CrestStore(90717, (unsigned long )(& __retres22));
# 483 "xmltok_impl.c"
      __retres22 = 10;
# 483 "xmltok_impl.c"
      goto return_label;
      switch_default___0:
# 485 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90718, (unsigned long )0, (long long )0);
      __CrestStore(90719, (unsigned long )(& __retres22));
# 486 "xmltok_impl.c"
      __retres22 = 0;
# 486 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
# 477 "xmltok_impl.c"
      ptr += 2;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(90653, 58785, 0);

  }
  }
  __CrestLoad(90720, (unsigned long )0, (long long )-1);
  __CrestStore(90721, (unsigned long )(& __retres22));
# 490 "xmltok_impl.c"
  __retres22 = -1;
  return_label:
  {
  __CrestLoad(90722, (unsigned long )(& __retres22), (long long )__retres22);
  __CrestReturn(90723);
# 463 "xmltok_impl.c"
  return (__retres22);
  }
}
}
# 495 "xmltok_impl.c"
static int big2_scanRef(ENCODING const *enc , char const *ptr , char const *end ,
                        char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_10 ;
  char const *mem_11 ;
  struct normal_encoding *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  struct normal_encoding *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  int __retres26 ;

  {
  __CrestCall(90724, 910);

  {
  __CrestLoad(90727, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(90726, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(90725, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 499 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(90728, 58789, 1);
    __CrestLoad(90730, (unsigned long )0, (long long )-1);
    __CrestStore(90731, (unsigned long )(& __retres26));
# 500 "xmltok_impl.c"
    __retres26 = -1;
# 500 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90729, 58791, 0);

  }
  }
  {
# 501 "xmltok_impl.c"
  mem_10 = ptr + 0;
  {
  __CrestLoad(90734, (unsigned long )mem_10, (long long )*mem_10);
  __CrestLoad(90733, (unsigned long )0, (long long )0);
  __CrestApply2(90732, 12, (long long )((int const )*mem_10 == 0));
# 501 "xmltok_impl.c"
  if ((int const )*mem_10 == 0) {
    __CrestBranch(90735, 58795, 1);
# 501 "xmltok_impl.c"
    mem_11 = ptr + 1;
# 501 "xmltok_impl.c"
    mem_12 = (struct normal_encoding *)enc;
    __CrestLoad(90737, (unsigned long )(& mem_12->type[(unsigned char )*mem_11]),
                (long long )mem_12->type[(unsigned char )*mem_11]);
    __CrestStore(90738, (unsigned long )(& tmp___0));
# 501 "xmltok_impl.c"
    tmp___0 = (int )mem_12->type[(unsigned char )*mem_11];
  } else {
    __CrestBranch(90736, 58796, 0);
# 501 "xmltok_impl.c"
    mem_13 = ptr + 0;
# 501 "xmltok_impl.c"
    mem_14 = ptr + 1;
    __CrestLoad(90739, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(90740, (unsigned long )mem_14, (long long )*mem_14);
# 501 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_13, (char )*mem_14);
    __CrestHandleReturn(90742, (long long )tmp);
    __CrestStore(90741, (unsigned long )(& tmp));
    __CrestLoad(90743, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(90744, (unsigned long )(& tmp___0));
# 501 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(90747, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90746, (unsigned long )0, (long long )29);
  __CrestApply2(90745, 12, (long long )(tmp___0 == 29));
# 502 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(90748, 58799, 1);
# 502 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(90749, 58800, 0);

  }
  }
  {
  __CrestLoad(90752, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90751, (unsigned long )0, (long long )24);
  __CrestApply2(90750, 12, (long long )(tmp___0 == 24));
# 502 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(90753, 58802, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(90754, 58803, 0);

  }
  }
  {
  __CrestLoad(90757, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90756, (unsigned long )0, (long long )22);
  __CrestApply2(90755, 12, (long long )(tmp___0 == 22));
# 502 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(90758, 58805, 1);
# 502 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(90759, 58806, 0);

  }
  }
  {
  __CrestLoad(90762, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90761, (unsigned long )0, (long long )5);
  __CrestApply2(90760, 12, (long long )(tmp___0 == 5));
# 502 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(90763, 58808, 1);
# 502 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(90764, 58809, 0);

  }
  }
  {
  __CrestLoad(90767, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90766, (unsigned long )0, (long long )6);
  __CrestApply2(90765, 12, (long long )(tmp___0 == 6));
# 502 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(90768, 58811, 1);
# 502 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(90769, 58812, 0);

  }
  }
  {
  __CrestLoad(90772, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90771, (unsigned long )0, (long long )7);
  __CrestApply2(90770, 12, (long long )(tmp___0 == 7));
# 502 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(90773, 58814, 1);
# 502 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(90774, 58815, 0);

  }
  }
  {
  __CrestLoad(90777, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(90776, (unsigned long )0, (long long )19);
  __CrestApply2(90775, 12, (long long )(tmp___0 == 19));
# 503 "xmltok_impl.c"
  if (tmp___0 == 19) {
    __CrestBranch(90778, 58817, 1);
# 503 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(90779, 58818, 0);

  }
  }
# 505 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 502 "xmltok_impl.c"
  mem_15 = ptr + 0;
# 502 "xmltok_impl.c"
  mem_16 = ptr + 1;
# 502 "xmltok_impl.c"
  mem_17 = ptr + 1;
  {
  __CrestLoad(90788, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)]);
  __CrestLoad(90787, (unsigned long )0, (long long )1);
  __CrestLoad(90786, (unsigned long )mem_17, (long long )*mem_17);
  __CrestLoad(90785, (unsigned long )0, (long long )31);
  __CrestApply2(90784, 5, (long long )((int )((unsigned char )*mem_17) & 31));
  __CrestApply2(90783, 8, (long long )(1 << ((int )((unsigned char )*mem_17) & 31)));
  __CrestApply2(90782, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))));
  __CrestLoad(90781, (unsigned long )0, (long long )0);
  __CrestApply2(90780, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))) == 0));
# 502 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_15] << 3) + (int const )((int )((unsigned char )*mem_16) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_17) & 31))) == 0) {
    __CrestBranch(90789, 58823, 1);
# 502 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90791, (unsigned long )0, (long long )0);
    __CrestStore(90792, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = 0;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90790, 58826, 0);

  }
  }
  }
  case_24:
  case_22:
# 502 "xmltok_impl.c"
  ptr += 2;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(90797, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90796, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90795, 18, (long long )(end - ptr));
  __CrestLoad(90794, (unsigned long )0, (long long )2L);
  __CrestApply2(90793, 16, (long long )(end - ptr < 2L));
# 502 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(90798, 58830, 1);
    __CrestLoad(90800, (unsigned long )0, (long long )-2);
    __CrestStore(90801, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90799, 58832, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90802, (unsigned long )0, (long long )0);
  __CrestStore(90803, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
  __retres26 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 2;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(90808, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90807, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90806, 18, (long long )(end - ptr));
  __CrestLoad(90805, (unsigned long )0, (long long )3L);
  __CrestApply2(90804, 16, (long long )(end - ptr < 3L));
# 502 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(90809, 58839, 1);
    __CrestLoad(90811, (unsigned long )0, (long long )-2);
    __CrestStore(90812, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90810, 58841, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90813, (unsigned long )0, (long long )0);
  __CrestStore(90814, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
  __retres26 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 3;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(90819, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(90818, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(90817, 18, (long long )(end - ptr));
  __CrestLoad(90816, (unsigned long )0, (long long )4L);
  __CrestApply2(90815, 16, (long long )(end - ptr < 4L));
# 502 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(90820, 58848, 1);
    __CrestLoad(90822, (unsigned long )0, (long long )-2);
    __CrestStore(90823, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
    __retres26 = -2;
# 502 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(90821, 58850, 0);

  }
  }
# 502 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90824, (unsigned long )0, (long long )0);
  __CrestStore(90825, (unsigned long )(& __retres26));
# 502 "xmltok_impl.c"
  __retres26 = 0;
# 502 "xmltok_impl.c"
  goto return_label;
# 502 "xmltok_impl.c"
  ptr += 4;
# 502 "xmltok_impl.c"
  goto switch_break;
  case_19:
# 504 "xmltok_impl.c"
  tmp___1 = big2_scanCharRef(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(90827, (long long )tmp___1);
  __CrestStore(90826, (unsigned long )(& tmp___1));
  __CrestLoad(90828, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(90829, (unsigned long )(& __retres26));
# 504 "xmltok_impl.c"
  __retres26 = tmp___1;
# 504 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 506 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(90830, (unsigned long )0, (long long )0);
  __CrestStore(90831, (unsigned long )(& __retres26));
# 507 "xmltok_impl.c"
  __retres26 = 0;
# 507 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 509 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(90834, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(90833, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(90832, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 509 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(90835, 58867, 1);

    } else {
      __CrestBranch(90836, 58868, 0);
# 509 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 510 "xmltok_impl.c"
    mem_18 = ptr + 0;
    {
    __CrestLoad(90839, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(90838, (unsigned long )0, (long long )0);
    __CrestApply2(90837, 12, (long long )((int const )*mem_18 == 0));
# 510 "xmltok_impl.c"
    if ((int const )*mem_18 == 0) {
      __CrestBranch(90840, 58872, 1);
# 510 "xmltok_impl.c"
      mem_19 = ptr + 1;
# 510 "xmltok_impl.c"
      mem_20 = (struct normal_encoding *)enc;
      __CrestLoad(90842, (unsigned long )(& mem_20->type[(unsigned char )*mem_19]),
                  (long long )mem_20->type[(unsigned char )*mem_19]);
      __CrestStore(90843, (unsigned long )(& tmp___3));
# 510 "xmltok_impl.c"
      tmp___3 = (int )mem_20->type[(unsigned char )*mem_19];
    } else {
      __CrestBranch(90841, 58873, 0);
# 510 "xmltok_impl.c"
      mem_21 = ptr + 0;
# 510 "xmltok_impl.c"
      mem_22 = ptr + 1;
      __CrestLoad(90844, (unsigned long )mem_21, (long long )*mem_21);
      __CrestLoad(90845, (unsigned long )mem_22, (long long )*mem_22);
# 510 "xmltok_impl.c"
      tmp___2 = unicode_byte_type((char )*mem_21, (char )*mem_22);
      __CrestHandleReturn(90847, (long long )tmp___2);
      __CrestStore(90846, (unsigned long )(& tmp___2));
      __CrestLoad(90848, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(90849, (unsigned long )(& tmp___3));
# 510 "xmltok_impl.c"
      tmp___3 = tmp___2;
    }
    }
    }
    {
    {
    __CrestLoad(90852, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90851, (unsigned long )0, (long long )29);
    __CrestApply2(90850, 12, (long long )(tmp___3 == 29));
# 511 "xmltok_impl.c"
    if (tmp___3 == 29) {
      __CrestBranch(90853, 58876, 1);
# 511 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(90854, 58877, 0);

    }
    }
    {
    __CrestLoad(90857, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90856, (unsigned long )0, (long long )27);
    __CrestApply2(90855, 12, (long long )(tmp___3 == 27));
# 511 "xmltok_impl.c"
    if (tmp___3 == 27) {
      __CrestBranch(90858, 58879, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90859, 58880, 0);

    }
    }
    {
    __CrestLoad(90862, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90861, (unsigned long )0, (long long )26);
    __CrestApply2(90860, 12, (long long )(tmp___3 == 26));
# 511 "xmltok_impl.c"
    if (tmp___3 == 26) {
      __CrestBranch(90863, 58882, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90864, 58883, 0);

    }
    }
    {
    __CrestLoad(90867, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90866, (unsigned long )0, (long long )25);
    __CrestApply2(90865, 12, (long long )(tmp___3 == 25));
# 511 "xmltok_impl.c"
    if (tmp___3 == 25) {
      __CrestBranch(90868, 58885, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90869, 58886, 0);

    }
    }
    {
    __CrestLoad(90872, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90871, (unsigned long )0, (long long )24);
    __CrestApply2(90870, 12, (long long )(tmp___3 == 24));
# 511 "xmltok_impl.c"
    if (tmp___3 == 24) {
      __CrestBranch(90873, 58888, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90874, 58889, 0);

    }
    }
    {
    __CrestLoad(90877, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90876, (unsigned long )0, (long long )22);
    __CrestApply2(90875, 12, (long long )(tmp___3 == 22));
# 511 "xmltok_impl.c"
    if (tmp___3 == 22) {
      __CrestBranch(90878, 58891, 1);
# 511 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90879, 58892, 0);

    }
    }
    {
    __CrestLoad(90882, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90881, (unsigned long )0, (long long )5);
    __CrestApply2(90880, 12, (long long )(tmp___3 == 5));
# 511 "xmltok_impl.c"
    if (tmp___3 == 5) {
      __CrestBranch(90883, 58894, 1);
# 511 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(90884, 58895, 0);

    }
    }
    {
    __CrestLoad(90887, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90886, (unsigned long )0, (long long )6);
    __CrestApply2(90885, 12, (long long )(tmp___3 == 6));
# 511 "xmltok_impl.c"
    if (tmp___3 == 6) {
      __CrestBranch(90888, 58897, 1);
# 511 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(90889, 58898, 0);

    }
    }
    {
    __CrestLoad(90892, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90891, (unsigned long )0, (long long )7);
    __CrestApply2(90890, 12, (long long )(tmp___3 == 7));
# 511 "xmltok_impl.c"
    if (tmp___3 == 7) {
      __CrestBranch(90893, 58900, 1);
# 511 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(90894, 58901, 0);

    }
    }
    {
    __CrestLoad(90897, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(90896, (unsigned long )0, (long long )18);
    __CrestApply2(90895, 12, (long long )(tmp___3 == 18));
# 512 "xmltok_impl.c"
    if (tmp___3 == 18) {
      __CrestBranch(90898, 58903, 1);
# 512 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(90899, 58904, 0);

    }
    }
# 515 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 511 "xmltok_impl.c"
    mem_23 = ptr + 0;
# 511 "xmltok_impl.c"
    mem_24 = ptr + 1;
# 511 "xmltok_impl.c"
    mem_25 = ptr + 1;
    {
    __CrestLoad(90908, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_23] << 3) + (int const )((int )((unsigned char )*mem_24) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_23] << 3) + (int const )((int )((unsigned char )*mem_24) >> 5)]);
    __CrestLoad(90907, (unsigned long )0, (long long )1);
    __CrestLoad(90906, (unsigned long )mem_25, (long long )*mem_25);
    __CrestLoad(90905, (unsigned long )0, (long long )31);
    __CrestApply2(90904, 5, (long long )((int )((unsigned char )*mem_25) & 31));
    __CrestApply2(90903, 8, (long long )(1 << ((int )((unsigned char )*mem_25) & 31)));
    __CrestApply2(90902, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_23] << 3) + (int const )((int )((unsigned char )*mem_24) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_25) & 31))));
    __CrestLoad(90901, (unsigned long )0, (long long )0);
    __CrestApply2(90900, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_23] << 3) + (int const )((int )((unsigned char )*mem_24) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_25) & 31))) == 0));
# 511 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_23] << 3) + (int const )((int )((unsigned char )*mem_24) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_25) & 31))) == 0) {
      __CrestBranch(90909, 58909, 1);
# 511 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(90911, (unsigned long )0, (long long )0);
      __CrestStore(90912, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = 0;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90910, 58912, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 511 "xmltok_impl.c"
    ptr += 2;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(90917, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90916, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90915, 18, (long long )(end - ptr));
    __CrestLoad(90914, (unsigned long )0, (long long )2L);
    __CrestApply2(90913, 16, (long long )(end - ptr < 2L));
# 511 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(90918, 58916, 1);
      __CrestLoad(90920, (unsigned long )0, (long long )-2);
      __CrestStore(90921, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90919, 58918, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90922, (unsigned long )0, (long long )0);
    __CrestStore(90923, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
    __retres26 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 2;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(90928, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90927, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90926, 18, (long long )(end - ptr));
    __CrestLoad(90925, (unsigned long )0, (long long )3L);
    __CrestApply2(90924, 16, (long long )(end - ptr < 3L));
# 511 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(90929, 58925, 1);
      __CrestLoad(90931, (unsigned long )0, (long long )-2);
      __CrestStore(90932, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90930, 58927, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90933, (unsigned long )0, (long long )0);
    __CrestStore(90934, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
    __retres26 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 3;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(90939, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(90938, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(90937, 18, (long long )(end - ptr));
    __CrestLoad(90936, (unsigned long )0, (long long )4L);
    __CrestApply2(90935, 16, (long long )(end - ptr < 4L));
# 511 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(90940, 58934, 1);
      __CrestLoad(90942, (unsigned long )0, (long long )-2);
      __CrestStore(90943, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
      __retres26 = -2;
# 511 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(90941, 58936, 0);

    }
    }
# 511 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90944, (unsigned long )0, (long long )0);
    __CrestStore(90945, (unsigned long )(& __retres26));
# 511 "xmltok_impl.c"
    __retres26 = 0;
# 511 "xmltok_impl.c"
    goto return_label;
# 511 "xmltok_impl.c"
    ptr += 4;
# 511 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 513 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(90946, (unsigned long )0, (long long )9);
    __CrestStore(90947, (unsigned long )(& __retres26));
# 514 "xmltok_impl.c"
    __retres26 = 9;
# 514 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 516 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(90948, (unsigned long )0, (long long )0);
    __CrestStore(90949, (unsigned long )(& __retres26));
# 517 "xmltok_impl.c"
    __retres26 = 0;
# 517 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(90950, (unsigned long )0, (long long )-1);
  __CrestStore(90951, (unsigned long )(& __retres26));
# 520 "xmltok_impl.c"
  __retres26 = -1;
  return_label:
  {
  __CrestLoad(90952, (unsigned long )(& __retres26), (long long )__retres26);
  __CrestReturn(90953);
# 495 "xmltok_impl.c"
  return (__retres26);
  }
}
}
# 525 "xmltok_impl.c"
static int big2_scanAtts(ENCODING const *enc , char const *ptr , char const *end ,
                         char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int t ;
  int tmp___3 ;
  int open ;
  int tmp___4 ;
  int t___0 ;
  int tmp___5 ;
  int tok ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  char const *mem_22 ;
  char const *mem_23 ;
  struct normal_encoding *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  struct normal_encoding *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  struct normal_encoding *mem_40 ;
  char const *mem_41 ;
  char const *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  struct normal_encoding *mem_45 ;
  char const *mem_46 ;
  char const *mem_47 ;
  char const *mem_48 ;
  char const *mem_49 ;
  struct normal_encoding *mem_50 ;
  char const *mem_51 ;
  char const *mem_52 ;
  char const *mem_53 ;
  char const *mem_54 ;
  struct normal_encoding *mem_55 ;
  char const *mem_56 ;
  char const *mem_57 ;
  char const *mem_58 ;
  char const *mem_59 ;
  struct normal_encoding *mem_60 ;
  char const *mem_61 ;
  char const *mem_62 ;
  char const *mem_63 ;
  char const *mem_64 ;
  char const *mem_65 ;
  char const *mem_66 ;
  char const *mem_67 ;
  int __retres68 ;

  {
  __CrestCall(90954, 911);

  __CrestLoad(90955, (unsigned long )0, (long long )0);
  __CrestStore(90956, (unsigned long )(& hadColon));
# 530 "xmltok_impl.c"
  hadColon = 0;
  {
# 532 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(90959, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(90958, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(90957, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 532 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(90960, 58957, 1);

    } else {
      __CrestBranch(90961, 58958, 0);
# 532 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 533 "xmltok_impl.c"
    mem_22 = ptr + 0;
    {
    __CrestLoad(90964, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(90963, (unsigned long )0, (long long )0);
    __CrestApply2(90962, 12, (long long )((int const )*mem_22 == 0));
# 533 "xmltok_impl.c"
    if ((int const )*mem_22 == 0) {
      __CrestBranch(90965, 58962, 1);
# 533 "xmltok_impl.c"
      mem_23 = ptr + 1;
# 533 "xmltok_impl.c"
      mem_24 = (struct normal_encoding *)enc;
      __CrestLoad(90967, (unsigned long )(& mem_24->type[(unsigned char )*mem_23]),
                  (long long )mem_24->type[(unsigned char )*mem_23]);
      __CrestStore(90968, (unsigned long )(& tmp___0));
# 533 "xmltok_impl.c"
      tmp___0 = (int )mem_24->type[(unsigned char )*mem_23];
    } else {
      __CrestBranch(90966, 58963, 0);
# 533 "xmltok_impl.c"
      mem_25 = ptr + 0;
# 533 "xmltok_impl.c"
      mem_26 = ptr + 1;
      __CrestLoad(90969, (unsigned long )mem_25, (long long )*mem_25);
      __CrestLoad(90970, (unsigned long )mem_26, (long long )*mem_26);
# 533 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_25, (char )*mem_26);
      __CrestHandleReturn(90972, (long long )tmp);
      __CrestStore(90971, (unsigned long )(& tmp));
      __CrestLoad(90973, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(90974, (unsigned long )(& tmp___0));
# 533 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(90977, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90976, (unsigned long )0, (long long )29);
    __CrestApply2(90975, 12, (long long )(tmp___0 == 29));
# 534 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(90978, 58966, 1);
# 534 "xmltok_impl.c"
      goto case_29;
    } else {
      __CrestBranch(90979, 58967, 0);

    }
    }
    {
    __CrestLoad(90982, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90981, (unsigned long )0, (long long )27);
    __CrestApply2(90980, 12, (long long )(tmp___0 == 27));
# 534 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(90983, 58969, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90984, 58970, 0);

    }
    }
    {
    __CrestLoad(90987, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90986, (unsigned long )0, (long long )26);
    __CrestApply2(90985, 12, (long long )(tmp___0 == 26));
# 534 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(90988, 58972, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90989, 58973, 0);

    }
    }
    {
    __CrestLoad(90992, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90991, (unsigned long )0, (long long )25);
    __CrestApply2(90990, 12, (long long )(tmp___0 == 25));
# 534 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(90993, 58975, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90994, 58976, 0);

    }
    }
    {
    __CrestLoad(90997, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(90996, (unsigned long )0, (long long )24);
    __CrestApply2(90995, 12, (long long )(tmp___0 == 24));
# 534 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(90998, 58978, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(90999, 58979, 0);

    }
    }
    {
    __CrestLoad(91002, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91001, (unsigned long )0, (long long )22);
    __CrestApply2(91000, 12, (long long )(tmp___0 == 22));
# 534 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(91003, 58981, 1);
# 534 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(91004, 58982, 0);

    }
    }
    {
    __CrestLoad(91007, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91006, (unsigned long )0, (long long )5);
    __CrestApply2(91005, 12, (long long )(tmp___0 == 5));
# 534 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(91008, 58984, 1);
# 534 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(91009, 58985, 0);

    }
    }
    {
    __CrestLoad(91012, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91011, (unsigned long )0, (long long )6);
    __CrestApply2(91010, 12, (long long )(tmp___0 == 6));
# 534 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(91013, 58987, 1);
# 534 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(91014, 58988, 0);

    }
    }
    {
    __CrestLoad(91017, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91016, (unsigned long )0, (long long )7);
    __CrestApply2(91015, 12, (long long )(tmp___0 == 7));
# 534 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(91018, 58990, 1);
# 534 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(91019, 58991, 0);

    }
    }
    {
    __CrestLoad(91022, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91021, (unsigned long )0, (long long )23);
    __CrestApply2(91020, 12, (long long )(tmp___0 == 23));
# 536 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(91023, 58993, 1);
# 536 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(91024, 58994, 0);

    }
    }
    {
    __CrestLoad(91027, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91026, (unsigned long )0, (long long )10);
    __CrestApply2(91025, 12, (long long )(tmp___0 == 10));
# 553 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(91028, 58996, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91029, 58997, 0);

    }
    }
    {
    __CrestLoad(91032, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91031, (unsigned long )0, (long long )9);
    __CrestApply2(91030, 12, (long long )(tmp___0 == 9));
# 553 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(91033, 58999, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91034, 59000, 0);

    }
    }
    {
    __CrestLoad(91037, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91036, (unsigned long )0, (long long )21);
    __CrestApply2(91035, 12, (long long )(tmp___0 == 21));
# 553 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(91038, 59002, 1);
# 553 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91039, 59003, 0);

    }
    }
    {
    __CrestLoad(91042, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(91041, (unsigned long )0, (long long )14);
    __CrestApply2(91040, 12, (long long )(tmp___0 == 14));
# 574 "xmltok_impl.c"
    if (tmp___0 == 14) {
      __CrestBranch(91043, 59005, 1);
# 574 "xmltok_impl.c"
      goto case_14;
    } else {
      __CrestBranch(91044, 59006, 0);

    }
    }
# 674 "xmltok_impl.c"
    goto switch_default___5;
    case_29:
    {
# 534 "xmltok_impl.c"
    mem_27 = ptr + 0;
# 534 "xmltok_impl.c"
    mem_28 = ptr + 1;
# 534 "xmltok_impl.c"
    mem_29 = ptr + 1;
    {
    __CrestLoad(91053, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_27] << 3) + (int const )((int )((unsigned char )*mem_28) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_27] << 3) + (int const )((int )((unsigned char )*mem_28) >> 5)]);
    __CrestLoad(91052, (unsigned long )0, (long long )1);
    __CrestLoad(91051, (unsigned long )mem_29, (long long )*mem_29);
    __CrestLoad(91050, (unsigned long )0, (long long )31);
    __CrestApply2(91049, 5, (long long )((int )((unsigned char )*mem_29) & 31));
    __CrestApply2(91048, 8, (long long )(1 << ((int )((unsigned char )*mem_29) & 31)));
    __CrestApply2(91047, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_27] << 3) + (int const )((int )((unsigned char )*mem_28) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_29) & 31))));
    __CrestLoad(91046, (unsigned long )0, (long long )0);
    __CrestApply2(91045, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_27] << 3) + (int const )((int )((unsigned char )*mem_28) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_29) & 31))) == 0));
# 534 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_27] << 3) + (int const )((int )((unsigned char )*mem_28) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_29) & 31))) == 0) {
      __CrestBranch(91054, 59011, 1);
# 534 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91056, (unsigned long )0, (long long )0);
      __CrestStore(91057, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
      __retres68 = 0;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91055, 59014, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24:
    case_22:
# 534 "xmltok_impl.c"
    ptr += 2;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_5:
    {
    __CrestLoad(91062, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91061, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91060, 18, (long long )(end - ptr));
    __CrestLoad(91059, (unsigned long )0, (long long )2L);
    __CrestApply2(91058, 16, (long long )(end - ptr < 2L));
# 534 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(91063, 59018, 1);
      __CrestLoad(91065, (unsigned long )0, (long long )-2);
      __CrestStore(91066, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
      __retres68 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91064, 59020, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91067, (unsigned long )0, (long long )0);
    __CrestStore(91068, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
    __retres68 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 2;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(91073, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91072, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91071, 18, (long long )(end - ptr));
    __CrestLoad(91070, (unsigned long )0, (long long )3L);
    __CrestApply2(91069, 16, (long long )(end - ptr < 3L));
# 534 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(91074, 59027, 1);
      __CrestLoad(91076, (unsigned long )0, (long long )-2);
      __CrestStore(91077, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
      __retres68 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91075, 59029, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91078, (unsigned long )0, (long long )0);
    __CrestStore(91079, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
    __retres68 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 3;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(91084, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91083, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91082, 18, (long long )(end - ptr));
    __CrestLoad(91081, (unsigned long )0, (long long )4L);
    __CrestApply2(91080, 16, (long long )(end - ptr < 4L));
# 534 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(91085, 59036, 1);
      __CrestLoad(91087, (unsigned long )0, (long long )-2);
      __CrestStore(91088, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
      __retres68 = -2;
# 534 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91086, 59038, 0);

    }
    }
# 534 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91089, (unsigned long )0, (long long )0);
    __CrestStore(91090, (unsigned long )(& __retres68));
# 534 "xmltok_impl.c"
    __retres68 = 0;
# 534 "xmltok_impl.c"
    goto return_label;
# 534 "xmltok_impl.c"
    ptr += 4;
# 534 "xmltok_impl.c"
    goto switch_break;
    case_23:
    {
    __CrestLoad(91093, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(91092, (unsigned long )0, (long long )0);
    __CrestApply2(91091, 13, (long long )(hadColon != 0));
# 537 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(91094, 59045, 1);
# 538 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91096, (unsigned long )0, (long long )0);
      __CrestStore(91097, (unsigned long )(& __retres68));
# 539 "xmltok_impl.c"
      __retres68 = 0;
# 539 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91095, 59048, 0);

    }
    }
    __CrestLoad(91098, (unsigned long )0, (long long )1);
    __CrestStore(91099, (unsigned long )(& hadColon));
# 541 "xmltok_impl.c"
    hadColon = 1;
# 542 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(91102, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(91101, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(91100, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 543 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(91103, 59051, 1);
      __CrestLoad(91105, (unsigned long )0, (long long )-1);
      __CrestStore(91106, (unsigned long )(& __retres68));
# 544 "xmltok_impl.c"
      __retres68 = -1;
# 544 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91104, 59053, 0);

    }
    }
    {
# 545 "xmltok_impl.c"
    mem_30 = ptr + 0;
    {
    __CrestLoad(91109, (unsigned long )mem_30, (long long )*mem_30);
    __CrestLoad(91108, (unsigned long )0, (long long )0);
    __CrestApply2(91107, 12, (long long )((int const )*mem_30 == 0));
# 545 "xmltok_impl.c"
    if ((int const )*mem_30 == 0) {
      __CrestBranch(91110, 59057, 1);
# 545 "xmltok_impl.c"
      mem_31 = ptr + 1;
# 545 "xmltok_impl.c"
      mem_32 = (struct normal_encoding *)enc;
      __CrestLoad(91112, (unsigned long )(& mem_32->type[(unsigned char )*mem_31]),
                  (long long )mem_32->type[(unsigned char )*mem_31]);
      __CrestStore(91113, (unsigned long )(& tmp___2));
# 545 "xmltok_impl.c"
      tmp___2 = (int )mem_32->type[(unsigned char )*mem_31];
    } else {
      __CrestBranch(91111, 59058, 0);
# 545 "xmltok_impl.c"
      mem_33 = ptr + 0;
# 545 "xmltok_impl.c"
      mem_34 = ptr + 1;
      __CrestLoad(91114, (unsigned long )mem_33, (long long )*mem_33);
      __CrestLoad(91115, (unsigned long )mem_34, (long long )*mem_34);
# 545 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_33, (char )*mem_34);
      __CrestHandleReturn(91117, (long long )tmp___1);
      __CrestStore(91116, (unsigned long )(& tmp___1));
      __CrestLoad(91118, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(91119, (unsigned long )(& tmp___2));
# 545 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(91122, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91121, (unsigned long )0, (long long )29);
    __CrestApply2(91120, 12, (long long )(tmp___2 == 29));
# 546 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(91123, 59061, 1);
# 546 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(91124, 59062, 0);

    }
    }
    {
    __CrestLoad(91127, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91126, (unsigned long )0, (long long )24);
    __CrestApply2(91125, 12, (long long )(tmp___2 == 24));
# 546 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(91128, 59064, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(91129, 59065, 0);

    }
    }
    {
    __CrestLoad(91132, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91131, (unsigned long )0, (long long )22);
    __CrestApply2(91130, 12, (long long )(tmp___2 == 22));
# 546 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(91133, 59067, 1);
# 546 "xmltok_impl.c"
      goto case_24___0;
    } else {
      __CrestBranch(91134, 59068, 0);

    }
    }
    {
    __CrestLoad(91137, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91136, (unsigned long )0, (long long )5);
    __CrestApply2(91135, 12, (long long )(tmp___2 == 5));
# 546 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(91138, 59070, 1);
# 546 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(91139, 59071, 0);

    }
    }
    {
    __CrestLoad(91142, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91141, (unsigned long )0, (long long )6);
    __CrestApply2(91140, 12, (long long )(tmp___2 == 6));
# 546 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(91143, 59073, 1);
# 546 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(91144, 59074, 0);

    }
    }
    {
    __CrestLoad(91147, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(91146, (unsigned long )0, (long long )7);
    __CrestApply2(91145, 12, (long long )(tmp___2 == 7));
# 546 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(91148, 59076, 1);
# 546 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(91149, 59077, 0);

    }
    }
# 547 "xmltok_impl.c"
    goto switch_default;
    case_29___0:
    {
# 546 "xmltok_impl.c"
    mem_35 = ptr + 0;
# 546 "xmltok_impl.c"
    mem_36 = ptr + 1;
# 546 "xmltok_impl.c"
    mem_37 = ptr + 1;
    {
    __CrestLoad(91158, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_35] << 3) + (int const )((int )((unsigned char )*mem_36) >> 5)]),
                (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_35] << 3) + (int const )((int )((unsigned char )*mem_36) >> 5)]);
    __CrestLoad(91157, (unsigned long )0, (long long )1);
    __CrestLoad(91156, (unsigned long )mem_37, (long long )*mem_37);
    __CrestLoad(91155, (unsigned long )0, (long long )31);
    __CrestApply2(91154, 5, (long long )((int )((unsigned char )*mem_37) & 31));
    __CrestApply2(91153, 8, (long long )(1 << ((int )((unsigned char )*mem_37) & 31)));
    __CrestApply2(91152, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_35] << 3) + (int const )((int )((unsigned char )*mem_36) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_37) & 31))));
    __CrestLoad(91151, (unsigned long )0, (long long )0);
    __CrestApply2(91150, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_35] << 3) + (int const )((int )((unsigned char )*mem_36) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_37) & 31))) == 0));
# 546 "xmltok_impl.c"
    if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_35] << 3) + (int const )((int )((unsigned char )*mem_36) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_37) & 31))) == 0) {
      __CrestBranch(91159, 59082, 1);
# 546 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91161, (unsigned long )0, (long long )0);
      __CrestStore(91162, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
      __retres68 = 0;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91160, 59085, 0);

    }
    }
    }
    case_24___0:
    case_22___0:
# 546 "xmltok_impl.c"
    ptr += 2;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(91167, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91166, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91165, 18, (long long )(end - ptr));
    __CrestLoad(91164, (unsigned long )0, (long long )2L);
    __CrestApply2(91163, 16, (long long )(end - ptr < 2L));
# 546 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(91168, 59089, 1);
      __CrestLoad(91170, (unsigned long )0, (long long )-2);
      __CrestStore(91171, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
      __retres68 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91169, 59091, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91172, (unsigned long )0, (long long )0);
    __CrestStore(91173, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
    __retres68 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 2;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(91178, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91177, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91176, 18, (long long )(end - ptr));
    __CrestLoad(91175, (unsigned long )0, (long long )3L);
    __CrestApply2(91174, 16, (long long )(end - ptr < 3L));
# 546 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(91179, 59098, 1);
      __CrestLoad(91181, (unsigned long )0, (long long )-2);
      __CrestStore(91182, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
      __retres68 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91180, 59100, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91183, (unsigned long )0, (long long )0);
    __CrestStore(91184, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
    __retres68 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 3;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(91189, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91188, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91187, 18, (long long )(end - ptr));
    __CrestLoad(91186, (unsigned long )0, (long long )4L);
    __CrestApply2(91185, 16, (long long )(end - ptr < 4L));
# 546 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(91190, 59107, 1);
      __CrestLoad(91192, (unsigned long )0, (long long )-2);
      __CrestStore(91193, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
      __retres68 = -2;
# 546 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91191, 59109, 0);

    }
    }
# 546 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91194, (unsigned long )0, (long long )0);
    __CrestStore(91195, (unsigned long )(& __retres68));
# 546 "xmltok_impl.c"
    __retres68 = 0;
# 546 "xmltok_impl.c"
    goto return_label;
# 546 "xmltok_impl.c"
    ptr += 4;
# 546 "xmltok_impl.c"
    goto switch_break___0;
    switch_default:
# 548 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91196, (unsigned long )0, (long long )0);
    __CrestStore(91197, (unsigned long )(& __retres68));
# 549 "xmltok_impl.c"
    __retres68 = 0;
# 549 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
# 551 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    case_21:
    {
# 554 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
# 557 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(91200, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(91199, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(91198, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 558 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(91201, 59125, 1);
        __CrestLoad(91203, (unsigned long )0, (long long )-1);
        __CrestStore(91204, (unsigned long )(& __retres68));
# 559 "xmltok_impl.c"
        __retres68 = -1;
# 559 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91202, 59127, 0);

      }
      }
      {
# 560 "xmltok_impl.c"
      mem_38 = ptr + 0;
      {
      __CrestLoad(91207, (unsigned long )mem_38, (long long )*mem_38);
      __CrestLoad(91206, (unsigned long )0, (long long )0);
      __CrestApply2(91205, 12, (long long )((int const )*mem_38 == 0));
# 560 "xmltok_impl.c"
      if ((int const )*mem_38 == 0) {
        __CrestBranch(91208, 59131, 1);
# 560 "xmltok_impl.c"
        mem_39 = ptr + 1;
# 560 "xmltok_impl.c"
        mem_40 = (struct normal_encoding *)enc;
        __CrestLoad(91210, (unsigned long )(& mem_40->type[(unsigned char )*mem_39]),
                    (long long )mem_40->type[(unsigned char )*mem_39]);
        __CrestStore(91211, (unsigned long )(& t));
# 560 "xmltok_impl.c"
        t = (int )mem_40->type[(unsigned char )*mem_39];
      } else {
        __CrestBranch(91209, 59132, 0);
# 560 "xmltok_impl.c"
        mem_41 = ptr + 0;
# 560 "xmltok_impl.c"
        mem_42 = ptr + 1;
        __CrestLoad(91212, (unsigned long )mem_41, (long long )*mem_41);
        __CrestLoad(91213, (unsigned long )mem_42, (long long )*mem_42);
# 560 "xmltok_impl.c"
        tmp___3 = unicode_byte_type((char )*mem_41, (char )*mem_42);
        __CrestHandleReturn(91215, (long long )tmp___3);
        __CrestStore(91214, (unsigned long )(& tmp___3));
        __CrestLoad(91216, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestStore(91217, (unsigned long )(& t));
# 560 "xmltok_impl.c"
        t = tmp___3;
      }
      }
      }
      {
      __CrestLoad(91220, (unsigned long )(& t), (long long )t);
      __CrestLoad(91219, (unsigned long )0, (long long )14);
      __CrestApply2(91218, 12, (long long )(t == 14));
# 561 "xmltok_impl.c"
      if (t == 14) {
        __CrestBranch(91221, 59134, 1);
# 562 "xmltok_impl.c"
        goto while_break___0;
      } else {
        __CrestBranch(91222, 59135, 0);

      }
      }
      {
      {
      __CrestLoad(91225, (unsigned long )(& t), (long long )t);
      __CrestLoad(91224, (unsigned long )0, (long long )9);
      __CrestApply2(91223, 12, (long long )(t == 9));
# 566 "xmltok_impl.c"
      if (t == 9) {
        __CrestBranch(91226, 59138, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(91227, 59139, 0);

      }
      }
      {
      __CrestLoad(91230, (unsigned long )(& t), (long long )t);
      __CrestLoad(91229, (unsigned long )0, (long long )10);
      __CrestApply2(91228, 12, (long long )(t == 10));
# 566 "xmltok_impl.c"
      if (t == 10) {
        __CrestBranch(91231, 59141, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(91232, 59142, 0);

      }
      }
      {
      __CrestLoad(91235, (unsigned long )(& t), (long long )t);
      __CrestLoad(91234, (unsigned long )0, (long long )21);
      __CrestApply2(91233, 12, (long long )(t == 21));
# 566 "xmltok_impl.c"
      if (t == 21) {
        __CrestBranch(91236, 59144, 1);
# 566 "xmltok_impl.c"
        goto case_9___0;
      } else {
        __CrestBranch(91237, 59145, 0);

      }
      }
# 568 "xmltok_impl.c"
      goto switch_default___0;
      case_9___0:
      case_10___0:
      case_21___0:
# 567 "xmltok_impl.c"
      goto switch_break___1;
      switch_default___0:
# 569 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91238, (unsigned long )0, (long long )0);
      __CrestStore(91239, (unsigned long )(& __retres68));
# 570 "xmltok_impl.c"
      __retres68 = 0;
# 570 "xmltok_impl.c"
      goto return_label;
      switch_break___1: ;
      }
    }
    while_break___0: ;
    }
    case_14:
    __CrestLoad(91240, (unsigned long )0, (long long )0);
    __CrestStore(91241, (unsigned long )(& hadColon));
# 578 "xmltok_impl.c"
    hadColon = 0;
    {
# 580 "xmltok_impl.c"
    while (1) {
      while_continue___1: ;
# 581 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(91244, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(91243, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(91242, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 582 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(91245, 59159, 1);
        __CrestLoad(91247, (unsigned long )0, (long long )-1);
        __CrestStore(91248, (unsigned long )(& __retres68));
# 583 "xmltok_impl.c"
        __retres68 = -1;
# 583 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91246, 59161, 0);

      }
      }
      {
# 584 "xmltok_impl.c"
      mem_43 = ptr + 0;
      {
      __CrestLoad(91251, (unsigned long )mem_43, (long long )*mem_43);
      __CrestLoad(91250, (unsigned long )0, (long long )0);
      __CrestApply2(91249, 12, (long long )((int const )*mem_43 == 0));
# 584 "xmltok_impl.c"
      if ((int const )*mem_43 == 0) {
        __CrestBranch(91252, 59165, 1);
# 584 "xmltok_impl.c"
        mem_44 = ptr + 1;
# 584 "xmltok_impl.c"
        mem_45 = (struct normal_encoding *)enc;
        __CrestLoad(91254, (unsigned long )(& mem_45->type[(unsigned char )*mem_44]),
                    (long long )mem_45->type[(unsigned char )*mem_44]);
        __CrestStore(91255, (unsigned long )(& open));
# 584 "xmltok_impl.c"
        open = (int )mem_45->type[(unsigned char )*mem_44];
      } else {
        __CrestBranch(91253, 59166, 0);
# 584 "xmltok_impl.c"
        mem_46 = ptr + 0;
# 584 "xmltok_impl.c"
        mem_47 = ptr + 1;
        __CrestLoad(91256, (unsigned long )mem_46, (long long )*mem_46);
        __CrestLoad(91257, (unsigned long )mem_47, (long long )*mem_47);
# 584 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_46, (char )*mem_47);
        __CrestHandleReturn(91259, (long long )tmp___4);
        __CrestStore(91258, (unsigned long )(& tmp___4));
        __CrestLoad(91260, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(91261, (unsigned long )(& open));
# 584 "xmltok_impl.c"
        open = tmp___4;
      }
      }
      }
      {
      __CrestLoad(91264, (unsigned long )(& open), (long long )open);
      __CrestLoad(91263, (unsigned long )0, (long long )12);
      __CrestApply2(91262, 12, (long long )(open == 12));
# 585 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(91265, 59168, 1);
# 586 "xmltok_impl.c"
        goto while_break___1;
      } else {
        __CrestBranch(91266, 59169, 0);
        {
        __CrestLoad(91269, (unsigned long )(& open), (long long )open);
        __CrestLoad(91268, (unsigned long )0, (long long )13);
        __CrestApply2(91267, 12, (long long )(open == 13));
# 585 "xmltok_impl.c"
        if (open == 13) {
          __CrestBranch(91270, 59170, 1);
# 586 "xmltok_impl.c"
          goto while_break___1;
        } else {
          __CrestBranch(91271, 59171, 0);

        }
        }
      }
      }
      {
      {
      __CrestLoad(91274, (unsigned long )(& open), (long long )open);
      __CrestLoad(91273, (unsigned long )0, (long long )9);
      __CrestApply2(91272, 12, (long long )(open == 9));
# 590 "xmltok_impl.c"
      if (open == 9) {
        __CrestBranch(91275, 59174, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(91276, 59175, 0);

      }
      }
      {
      __CrestLoad(91279, (unsigned long )(& open), (long long )open);
      __CrestLoad(91278, (unsigned long )0, (long long )10);
      __CrestApply2(91277, 12, (long long )(open == 10));
# 590 "xmltok_impl.c"
      if (open == 10) {
        __CrestBranch(91280, 59177, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(91281, 59178, 0);

      }
      }
      {
      __CrestLoad(91284, (unsigned long )(& open), (long long )open);
      __CrestLoad(91283, (unsigned long )0, (long long )21);
      __CrestApply2(91282, 12, (long long )(open == 21));
# 590 "xmltok_impl.c"
      if (open == 21) {
        __CrestBranch(91285, 59180, 1);
# 590 "xmltok_impl.c"
        goto case_9___1;
      } else {
        __CrestBranch(91286, 59181, 0);

      }
      }
# 592 "xmltok_impl.c"
      goto switch_default___1;
      case_9___1:
      case_10___1:
      case_21___1:
# 591 "xmltok_impl.c"
      goto switch_break___2;
      switch_default___1:
# 593 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91287, (unsigned long )0, (long long )0);
      __CrestStore(91288, (unsigned long )(& __retres68));
# 594 "xmltok_impl.c"
      __retres68 = 0;
# 594 "xmltok_impl.c"
      goto return_label;
      switch_break___2: ;
      }
    }
    while_break___1: ;
    }
# 597 "xmltok_impl.c"
    ptr += 2;
    {
# 599 "xmltok_impl.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(91291, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(91290, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(91289, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 601 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(91292, 59194, 1);
        __CrestLoad(91294, (unsigned long )0, (long long )-1);
        __CrestStore(91295, (unsigned long )(& __retres68));
# 602 "xmltok_impl.c"
        __retres68 = -1;
# 602 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91293, 59196, 0);

      }
      }
      {
# 603 "xmltok_impl.c"
      mem_48 = ptr + 0;
      {
      __CrestLoad(91298, (unsigned long )mem_48, (long long )*mem_48);
      __CrestLoad(91297, (unsigned long )0, (long long )0);
      __CrestApply2(91296, 12, (long long )((int const )*mem_48 == 0));
# 603 "xmltok_impl.c"
      if ((int const )*mem_48 == 0) {
        __CrestBranch(91299, 59200, 1);
# 603 "xmltok_impl.c"
        mem_49 = ptr + 1;
# 603 "xmltok_impl.c"
        mem_50 = (struct normal_encoding *)enc;
        __CrestLoad(91301, (unsigned long )(& mem_50->type[(unsigned char )*mem_49]),
                    (long long )mem_50->type[(unsigned char )*mem_49]);
        __CrestStore(91302, (unsigned long )(& t___0));
# 603 "xmltok_impl.c"
        t___0 = (int )mem_50->type[(unsigned char )*mem_49];
      } else {
        __CrestBranch(91300, 59201, 0);
# 603 "xmltok_impl.c"
        mem_51 = ptr + 0;
# 603 "xmltok_impl.c"
        mem_52 = ptr + 1;
        __CrestLoad(91303, (unsigned long )mem_51, (long long )*mem_51);
        __CrestLoad(91304, (unsigned long )mem_52, (long long )*mem_52);
# 603 "xmltok_impl.c"
        tmp___5 = unicode_byte_type((char )*mem_51, (char )*mem_52);
        __CrestHandleReturn(91306, (long long )tmp___5);
        __CrestStore(91305, (unsigned long )(& tmp___5));
        __CrestLoad(91307, (unsigned long )(& tmp___5), (long long )tmp___5);
        __CrestStore(91308, (unsigned long )(& t___0));
# 603 "xmltok_impl.c"
        t___0 = tmp___5;
      }
      }
      }
      {
      __CrestLoad(91311, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91310, (unsigned long )(& open), (long long )open);
      __CrestApply2(91309, 12, (long long )(t___0 == open));
# 604 "xmltok_impl.c"
      if (t___0 == open) {
        __CrestBranch(91312, 59203, 1);
# 605 "xmltok_impl.c"
        goto while_break___2;
      } else {
        __CrestBranch(91313, 59204, 0);

      }
      }
      {
      {
      __CrestLoad(91316, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91315, (unsigned long )0, (long long )5);
      __CrestApply2(91314, 12, (long long )(t___0 == 5));
# 607 "xmltok_impl.c"
      if (t___0 == 5) {
        __CrestBranch(91317, 59207, 1);
# 607 "xmltok_impl.c"
        goto case_5___1;
      } else {
        __CrestBranch(91318, 59208, 0);

      }
      }
      {
      __CrestLoad(91321, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91320, (unsigned long )0, (long long )6);
      __CrestApply2(91319, 12, (long long )(t___0 == 6));
# 607 "xmltok_impl.c"
      if (t___0 == 6) {
        __CrestBranch(91322, 59210, 1);
# 607 "xmltok_impl.c"
        goto case_6___1;
      } else {
        __CrestBranch(91323, 59211, 0);

      }
      }
      {
      __CrestLoad(91326, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91325, (unsigned long )0, (long long )7);
      __CrestApply2(91324, 12, (long long )(t___0 == 7));
# 607 "xmltok_impl.c"
      if (t___0 == 7) {
        __CrestBranch(91327, 59213, 1);
# 607 "xmltok_impl.c"
        goto case_7___1;
      } else {
        __CrestBranch(91328, 59214, 0);

      }
      }
      {
      __CrestLoad(91331, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91330, (unsigned long )0, (long long )8);
      __CrestApply2(91329, 12, (long long )(t___0 == 8));
# 607 "xmltok_impl.c"
      if (t___0 == 8) {
        __CrestBranch(91332, 59216, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(91333, 59217, 0);

      }
      }
      {
      __CrestLoad(91336, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91335, (unsigned long )0, (long long )1);
      __CrestApply2(91334, 12, (long long )(t___0 == 1));
# 607 "xmltok_impl.c"
      if (t___0 == 1) {
        __CrestBranch(91337, 59219, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(91338, 59220, 0);

      }
      }
      {
      __CrestLoad(91341, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91340, (unsigned long )0, (long long )0);
      __CrestApply2(91339, 12, (long long )(t___0 == 0));
# 607 "xmltok_impl.c"
      if (t___0 == 0) {
        __CrestBranch(91342, 59222, 1);
# 607 "xmltok_impl.c"
        goto case_8;
      } else {
        __CrestBranch(91343, 59223, 0);

      }
      }
      {
      __CrestLoad(91346, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91345, (unsigned long )0, (long long )3);
      __CrestApply2(91344, 12, (long long )(t___0 == 3));
# 608 "xmltok_impl.c"
      if (t___0 == 3) {
        __CrestBranch(91347, 59225, 1);
# 608 "xmltok_impl.c"
        goto case_3;
      } else {
        __CrestBranch(91348, 59226, 0);

      }
      }
      {
      __CrestLoad(91351, (unsigned long )(& t___0), (long long )t___0);
      __CrestLoad(91350, (unsigned long )0, (long long )2);
      __CrestApply2(91349, 12, (long long )(t___0 == 2));
# 618 "xmltok_impl.c"
      if (t___0 == 2) {
        __CrestBranch(91352, 59228, 1);
# 618 "xmltok_impl.c"
        goto case_2;
      } else {
        __CrestBranch(91353, 59229, 0);

      }
      }
# 621 "xmltok_impl.c"
      goto switch_default___2;
      case_5___1:
      {
      __CrestLoad(91358, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91357, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91356, 18, (long long )(end - ptr));
      __CrestLoad(91355, (unsigned long )0, (long long )2L);
      __CrestApply2(91354, 16, (long long )(end - ptr < 2L));
# 607 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(91359, 59232, 1);
        __CrestLoad(91361, (unsigned long )0, (long long )-2);
        __CrestStore(91362, (unsigned long )(& __retres68));
# 607 "xmltok_impl.c"
        __retres68 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91360, 59234, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 2;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_6___1:
      {
      __CrestLoad(91367, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91366, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91365, 18, (long long )(end - ptr));
      __CrestLoad(91364, (unsigned long )0, (long long )3L);
      __CrestApply2(91363, 16, (long long )(end - ptr < 3L));
# 607 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(91368, 59238, 1);
        __CrestLoad(91370, (unsigned long )0, (long long )-2);
        __CrestStore(91371, (unsigned long )(& __retres68));
# 607 "xmltok_impl.c"
        __retres68 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91369, 59240, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 3;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_7___1:
      {
      __CrestLoad(91376, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91375, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91374, 18, (long long )(end - ptr));
      __CrestLoad(91373, (unsigned long )0, (long long )4L);
      __CrestApply2(91372, 16, (long long )(end - ptr < 4L));
# 607 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(91377, 59244, 1);
        __CrestLoad(91379, (unsigned long )0, (long long )-2);
        __CrestStore(91380, (unsigned long )(& __retres68));
# 607 "xmltok_impl.c"
        __retres68 = -2;
# 607 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91378, 59246, 0);

      }
      }
# 607 "xmltok_impl.c"
      ptr += 4;
# 607 "xmltok_impl.c"
      goto switch_break___3;
      case_8:
      case_1:
      case_0:
# 607 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91381, (unsigned long )0, (long long )0);
      __CrestStore(91382, (unsigned long )(& __retres68));
# 607 "xmltok_impl.c"
      __retres68 = 0;
# 607 "xmltok_impl.c"
      goto return_label;
      case_3:
# 610 "xmltok_impl.c"
      tmp___6 = big2_scanRef(enc, ptr + 2, end, & ptr);
      __CrestHandleReturn(91384, (long long )tmp___6);
      __CrestStore(91383, (unsigned long )(& tmp___6));
      __CrestLoad(91385, (unsigned long )(& tmp___6), (long long )tmp___6);
      __CrestStore(91386, (unsigned long )(& tok));
# 610 "xmltok_impl.c"
      tok = tmp___6;
      {
      __CrestLoad(91389, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(91388, (unsigned long )0, (long long )0);
      __CrestApply2(91387, 15, (long long )(tok <= 0));
# 611 "xmltok_impl.c"
      if (tok <= 0) {
        __CrestBranch(91390, 59254, 1);
        {
        __CrestLoad(91394, (unsigned long )(& tok), (long long )tok);
        __CrestLoad(91393, (unsigned long )0, (long long )0);
        __CrestApply2(91392, 12, (long long )(tok == 0));
# 612 "xmltok_impl.c"
        if (tok == 0) {
          __CrestBranch(91395, 59255, 1);
# 613 "xmltok_impl.c"
          *nextTokPtr = ptr;
        } else {
          __CrestBranch(91396, 59256, 0);

        }
        }
        __CrestLoad(91397, (unsigned long )(& tok), (long long )tok);
        __CrestStore(91398, (unsigned long )(& __retres68));
# 614 "xmltok_impl.c"
        __retres68 = tok;
# 614 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91391, 59259, 0);

      }
      }
# 616 "xmltok_impl.c"
      goto switch_break___3;
      case_2:
# 619 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91399, (unsigned long )0, (long long )0);
      __CrestStore(91400, (unsigned long )(& __retres68));
# 620 "xmltok_impl.c"
      __retres68 = 0;
# 620 "xmltok_impl.c"
      goto return_label;
      switch_default___2:
# 622 "xmltok_impl.c"
      ptr += 2;
# 623 "xmltok_impl.c"
      goto switch_break___3;
      switch_break___3: ;
      }
    }
    while_break___2: ;
    }
# 626 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(91403, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(91402, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(91401, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 627 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(91404, 59270, 1);
      __CrestLoad(91406, (unsigned long )0, (long long )-1);
      __CrestStore(91407, (unsigned long )(& __retres68));
# 628 "xmltok_impl.c"
      __retres68 = -1;
# 628 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91405, 59272, 0);

    }
    }
    {
# 629 "xmltok_impl.c"
    mem_53 = ptr + 0;
    {
    __CrestLoad(91410, (unsigned long )mem_53, (long long )*mem_53);
    __CrestLoad(91409, (unsigned long )0, (long long )0);
    __CrestApply2(91408, 12, (long long )((int const )*mem_53 == 0));
# 629 "xmltok_impl.c"
    if ((int const )*mem_53 == 0) {
      __CrestBranch(91411, 59276, 1);
# 629 "xmltok_impl.c"
      mem_54 = ptr + 1;
# 629 "xmltok_impl.c"
      mem_55 = (struct normal_encoding *)enc;
      __CrestLoad(91413, (unsigned long )(& mem_55->type[(unsigned char )*mem_54]),
                  (long long )mem_55->type[(unsigned char )*mem_54]);
      __CrestStore(91414, (unsigned long )(& tmp___8));
# 629 "xmltok_impl.c"
      tmp___8 = (int )mem_55->type[(unsigned char )*mem_54];
    } else {
      __CrestBranch(91412, 59277, 0);
# 629 "xmltok_impl.c"
      mem_56 = ptr + 0;
# 629 "xmltok_impl.c"
      mem_57 = ptr + 1;
      __CrestLoad(91415, (unsigned long )mem_56, (long long )*mem_56);
      __CrestLoad(91416, (unsigned long )mem_57, (long long )*mem_57);
# 629 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_56, (char )*mem_57);
      __CrestHandleReturn(91418, (long long )tmp___7);
      __CrestStore(91417, (unsigned long )(& tmp___7));
      __CrestLoad(91419, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(91420, (unsigned long )(& tmp___8));
# 629 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(91423, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91422, (unsigned long )0, (long long )10);
    __CrestApply2(91421, 12, (long long )(tmp___8 == 10));
# 632 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(91424, 59280, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(91425, 59281, 0);

    }
    }
    {
    __CrestLoad(91428, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91427, (unsigned long )0, (long long )9);
    __CrestApply2(91426, 12, (long long )(tmp___8 == 9));
# 632 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(91429, 59283, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(91430, 59284, 0);

    }
    }
    {
    __CrestLoad(91433, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91432, (unsigned long )0, (long long )21);
    __CrestApply2(91431, 12, (long long )(tmp___8 == 21));
# 632 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(91434, 59286, 1);
# 632 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(91435, 59287, 0);

    }
    }
    {
    __CrestLoad(91438, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91437, (unsigned long )0, (long long )17);
    __CrestApply2(91436, 12, (long long )(tmp___8 == 17));
# 634 "xmltok_impl.c"
    if (tmp___8 == 17) {
      __CrestBranch(91439, 59289, 1);
# 634 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(91440, 59290, 0);

    }
    }
    {
    __CrestLoad(91443, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91442, (unsigned long )0, (long long )11);
    __CrestApply2(91441, 12, (long long )(tmp___8 == 11));
# 636 "xmltok_impl.c"
    if (tmp___8 == 11) {
      __CrestBranch(91444, 59292, 1);
# 636 "xmltok_impl.c"
      goto case_11;
    } else {
      __CrestBranch(91445, 59293, 0);

    }
    }
# 638 "xmltok_impl.c"
    goto switch_default___3;
    case_10___2:
    case_9___2:
    case_21___2:
# 633 "xmltok_impl.c"
    goto switch_break___4;
    case_17:
# 635 "xmltok_impl.c"
    goto sol;
    case_11:
# 637 "xmltok_impl.c"
    goto gt;
    switch_default___3:
# 639 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91446, (unsigned long )0, (long long )0);
    __CrestStore(91447, (unsigned long )(& __retres68));
# 640 "xmltok_impl.c"
    __retres68 = 0;
# 640 "xmltok_impl.c"
    goto return_label;
    switch_break___4: ;
    }
    {
# 643 "xmltok_impl.c"
    while (1) {
      while_continue___3: ;
# 644 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(91450, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(91449, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(91448, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 645 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(91451, 59307, 1);
        __CrestLoad(91453, (unsigned long )0, (long long )-1);
        __CrestStore(91454, (unsigned long )(& __retres68));
# 646 "xmltok_impl.c"
        __retres68 = -1;
# 646 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91452, 59309, 0);

      }
      }
      {
# 647 "xmltok_impl.c"
      mem_58 = ptr + 0;
      {
      __CrestLoad(91457, (unsigned long )mem_58, (long long )*mem_58);
      __CrestLoad(91456, (unsigned long )0, (long long )0);
      __CrestApply2(91455, 12, (long long )((int const )*mem_58 == 0));
# 647 "xmltok_impl.c"
      if ((int const )*mem_58 == 0) {
        __CrestBranch(91458, 59313, 1);
# 647 "xmltok_impl.c"
        mem_59 = ptr + 1;
# 647 "xmltok_impl.c"
        mem_60 = (struct normal_encoding *)enc;
        __CrestLoad(91460, (unsigned long )(& mem_60->type[(unsigned char )*mem_59]),
                    (long long )mem_60->type[(unsigned char )*mem_59]);
        __CrestStore(91461, (unsigned long )(& tmp___10));
# 647 "xmltok_impl.c"
        tmp___10 = (int )mem_60->type[(unsigned char )*mem_59];
      } else {
        __CrestBranch(91459, 59314, 0);
# 647 "xmltok_impl.c"
        mem_61 = ptr + 0;
# 647 "xmltok_impl.c"
        mem_62 = ptr + 1;
        __CrestLoad(91462, (unsigned long )mem_61, (long long )*mem_61);
        __CrestLoad(91463, (unsigned long )mem_62, (long long )*mem_62);
# 647 "xmltok_impl.c"
        tmp___9 = unicode_byte_type((char )*mem_61, (char )*mem_62);
        __CrestHandleReturn(91465, (long long )tmp___9);
        __CrestStore(91464, (unsigned long )(& tmp___9));
        __CrestLoad(91466, (unsigned long )(& tmp___9), (long long )tmp___9);
        __CrestStore(91467, (unsigned long )(& tmp___10));
# 647 "xmltok_impl.c"
        tmp___10 = tmp___9;
      }
      }
      }
      {
      {
      __CrestLoad(91470, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91469, (unsigned long )0, (long long )29);
      __CrestApply2(91468, 12, (long long )(tmp___10 == 29));
# 648 "xmltok_impl.c"
      if (tmp___10 == 29) {
        __CrestBranch(91471, 59317, 1);
# 648 "xmltok_impl.c"
        goto case_29___1;
      } else {
        __CrestBranch(91472, 59318, 0);

      }
      }
      {
      __CrestLoad(91475, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91474, (unsigned long )0, (long long )24);
      __CrestApply2(91473, 12, (long long )(tmp___10 == 24));
# 648 "xmltok_impl.c"
      if (tmp___10 == 24) {
        __CrestBranch(91476, 59320, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(91477, 59321, 0);

      }
      }
      {
      __CrestLoad(91480, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91479, (unsigned long )0, (long long )22);
      __CrestApply2(91478, 12, (long long )(tmp___10 == 22));
# 648 "xmltok_impl.c"
      if (tmp___10 == 22) {
        __CrestBranch(91481, 59323, 1);
# 648 "xmltok_impl.c"
        goto case_24___1;
      } else {
        __CrestBranch(91482, 59324, 0);

      }
      }
      {
      __CrestLoad(91485, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91484, (unsigned long )0, (long long )5);
      __CrestApply2(91483, 12, (long long )(tmp___10 == 5));
# 648 "xmltok_impl.c"
      if (tmp___10 == 5) {
        __CrestBranch(91486, 59326, 1);
# 648 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(91487, 59327, 0);

      }
      }
      {
      __CrestLoad(91490, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91489, (unsigned long )0, (long long )6);
      __CrestApply2(91488, 12, (long long )(tmp___10 == 6));
# 648 "xmltok_impl.c"
      if (tmp___10 == 6) {
        __CrestBranch(91491, 59329, 1);
# 648 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(91492, 59330, 0);

      }
      }
      {
      __CrestLoad(91495, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91494, (unsigned long )0, (long long )7);
      __CrestApply2(91493, 12, (long long )(tmp___10 == 7));
# 648 "xmltok_impl.c"
      if (tmp___10 == 7) {
        __CrestBranch(91496, 59332, 1);
# 648 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(91497, 59333, 0);

      }
      }
      {
      __CrestLoad(91500, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91499, (unsigned long )0, (long long )10);
      __CrestApply2(91498, 12, (long long )(tmp___10 == 10));
# 649 "xmltok_impl.c"
      if (tmp___10 == 10) {
        __CrestBranch(91501, 59335, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(91502, 59336, 0);

      }
      }
      {
      __CrestLoad(91505, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91504, (unsigned long )0, (long long )9);
      __CrestApply2(91503, 12, (long long )(tmp___10 == 9));
# 649 "xmltok_impl.c"
      if (tmp___10 == 9) {
        __CrestBranch(91506, 59338, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(91507, 59339, 0);

      }
      }
      {
      __CrestLoad(91510, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91509, (unsigned long )0, (long long )21);
      __CrestApply2(91508, 12, (long long )(tmp___10 == 21));
# 649 "xmltok_impl.c"
      if (tmp___10 == 21) {
        __CrestBranch(91511, 59341, 1);
# 649 "xmltok_impl.c"
        goto case_10___3;
      } else {
        __CrestBranch(91512, 59342, 0);

      }
      }
      {
      __CrestLoad(91515, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91514, (unsigned long )0, (long long )11);
      __CrestApply2(91513, 12, (long long )(tmp___10 == 11));
# 651 "xmltok_impl.c"
      if (tmp___10 == 11) {
        __CrestBranch(91516, 59344, 1);
# 651 "xmltok_impl.c"
        goto gt;
      } else {
        __CrestBranch(91517, 59345, 0);

      }
      }
      {
      __CrestLoad(91520, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(91519, (unsigned long )0, (long long )17);
      __CrestApply2(91518, 12, (long long )(tmp___10 == 17));
# 655 "xmltok_impl.c"
      if (tmp___10 == 17) {
        __CrestBranch(91521, 59347, 1);
# 655 "xmltok_impl.c"
        goto sol;
      } else {
        __CrestBranch(91522, 59348, 0);

      }
      }
# 666 "xmltok_impl.c"
      goto switch_default___4;
      case_29___1:
      {
# 648 "xmltok_impl.c"
      mem_63 = ptr + 0;
# 648 "xmltok_impl.c"
      mem_64 = ptr + 1;
# 648 "xmltok_impl.c"
      mem_65 = ptr + 1;
      {
      __CrestLoad(91531, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_63] << 3) + (int const )((int )((unsigned char )*mem_64) >> 5)]),
                  (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_63] << 3) + (int const )((int )((unsigned char )*mem_64) >> 5)]);
      __CrestLoad(91530, (unsigned long )0, (long long )1);
      __CrestLoad(91529, (unsigned long )mem_65, (long long )*mem_65);
      __CrestLoad(91528, (unsigned long )0, (long long )31);
      __CrestApply2(91527, 5, (long long )((int )((unsigned char )*mem_65) & 31));
      __CrestApply2(91526, 8, (long long )(1 << ((int )((unsigned char )*mem_65) & 31)));
      __CrestApply2(91525, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_63] << 3) + (int const )((int )((unsigned char )*mem_64) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_65) & 31))));
      __CrestLoad(91524, (unsigned long )0, (long long )0);
      __CrestApply2(91523, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_63] << 3) + (int const )((int )((unsigned char )*mem_64) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_65) & 31))) == 0));
# 648 "xmltok_impl.c"
      if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_63] << 3) + (int const )((int )((unsigned char )*mem_64) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_65) & 31))) == 0) {
        __CrestBranch(91532, 59353, 1);
# 648 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(91534, (unsigned long )0, (long long )0);
        __CrestStore(91535, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
        __retres68 = 0;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91533, 59356, 0);

      }
      }
      }
      case_24___1:
      case_22___1:
# 648 "xmltok_impl.c"
      ptr += 2;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_5___2:
      {
      __CrestLoad(91540, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91539, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91538, 18, (long long )(end - ptr));
      __CrestLoad(91537, (unsigned long )0, (long long )2L);
      __CrestApply2(91536, 16, (long long )(end - ptr < 2L));
# 648 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(91541, 59360, 1);
        __CrestLoad(91543, (unsigned long )0, (long long )-2);
        __CrestStore(91544, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
        __retres68 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91542, 59362, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91545, (unsigned long )0, (long long )0);
      __CrestStore(91546, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
      __retres68 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 2;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_6___2:
      {
      __CrestLoad(91551, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91550, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91549, 18, (long long )(end - ptr));
      __CrestLoad(91548, (unsigned long )0, (long long )3L);
      __CrestApply2(91547, 16, (long long )(end - ptr < 3L));
# 648 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(91552, 59369, 1);
        __CrestLoad(91554, (unsigned long )0, (long long )-2);
        __CrestStore(91555, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
        __retres68 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91553, 59371, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91556, (unsigned long )0, (long long )0);
      __CrestStore(91557, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
      __retres68 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 3;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_7___2:
      {
      __CrestLoad(91562, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(91561, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(91560, 18, (long long )(end - ptr));
      __CrestLoad(91559, (unsigned long )0, (long long )4L);
      __CrestApply2(91558, 16, (long long )(end - ptr < 4L));
# 648 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(91563, 59378, 1);
        __CrestLoad(91565, (unsigned long )0, (long long )-2);
        __CrestStore(91566, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
        __retres68 = -2;
# 648 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91564, 59380, 0);

      }
      }
# 648 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91567, (unsigned long )0, (long long )0);
      __CrestStore(91568, (unsigned long )(& __retres68));
# 648 "xmltok_impl.c"
      __retres68 = 0;
# 648 "xmltok_impl.c"
      goto return_label;
# 648 "xmltok_impl.c"
      ptr += 4;
# 648 "xmltok_impl.c"
      goto switch_break___5;
      case_10___3:
      case_9___3:
      case_21___3:
# 650 "xmltok_impl.c"
      goto __Cont;
      gt:
      case_11___0:
# 653 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(91569, (unsigned long )0, (long long )1);
      __CrestStore(91570, (unsigned long )(& __retres68));
# 654 "xmltok_impl.c"
      __retres68 = 1;
# 654 "xmltok_impl.c"
      goto return_label;
      sol:
      case_17___0:
# 657 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(91573, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(91572, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(91571, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 658 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(91574, 59392, 1);
        __CrestLoad(91576, (unsigned long )0, (long long )-1);
        __CrestStore(91577, (unsigned long )(& __retres68));
# 659 "xmltok_impl.c"
        __retres68 = -1;
# 659 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(91575, 59394, 0);

      }
      }
      {
# 660 "xmltok_impl.c"
      mem_66 = ptr + 0;
      {
      __CrestLoad(91580, (unsigned long )mem_66, (long long )*mem_66);
      __CrestLoad(91579, (unsigned long )0, (long long )0);
      __CrestApply2(91578, 12, (long long )((int const )*mem_66 == 0));
# 660 "xmltok_impl.c"
      if ((int const )*mem_66 == 0) {
        __CrestBranch(91581, 59398, 1);
        {
# 660 "xmltok_impl.c"
        mem_67 = ptr + 1;
        {
        __CrestLoad(91585, (unsigned long )mem_67, (long long )*mem_67);
        __CrestLoad(91584, (unsigned long )0, (long long )62);
        __CrestApply2(91583, 12, (long long )((int const )*mem_67 == 62));
# 660 "xmltok_impl.c"
        if ((int const )*mem_67 == 62) {
          __CrestBranch(91586, 59401, 1);

        } else {
          __CrestBranch(91587, 59402, 0);
# 661 "xmltok_impl.c"
          *nextTokPtr = ptr;
          __CrestLoad(91588, (unsigned long )0, (long long )0);
          __CrestStore(91589, (unsigned long )(& __retres68));
# 662 "xmltok_impl.c"
          __retres68 = 0;
# 662 "xmltok_impl.c"
          goto return_label;
        }
        }
        }
      } else {
        __CrestBranch(91582, 59405, 0);
# 661 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(91590, (unsigned long )0, (long long )0);
        __CrestStore(91591, (unsigned long )(& __retres68));
# 662 "xmltok_impl.c"
        __retres68 = 0;
# 662 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
# 664 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(91592, (unsigned long )0, (long long )3);
      __CrestStore(91593, (unsigned long )(& __retres68));
# 665 "xmltok_impl.c"
      __retres68 = 3;
# 665 "xmltok_impl.c"
      goto return_label;
      switch_default___4:
# 667 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91594, (unsigned long )0, (long long )0);
      __CrestStore(91595, (unsigned long )(& __retres68));
# 668 "xmltok_impl.c"
      __retres68 = 0;
# 668 "xmltok_impl.c"
      goto return_label;
      switch_break___5: ;
      }
# 670 "xmltok_impl.c"
      goto while_break___3;
      __Cont: ;
    }
    while_break___3: ;
    }
# 672 "xmltok_impl.c"
    goto switch_break;
    switch_default___5:
# 675 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91596, (unsigned long )0, (long long )0);
    __CrestStore(91597, (unsigned long )(& __retres68));
# 676 "xmltok_impl.c"
    __retres68 = 0;
# 676 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(91598, (unsigned long )0, (long long )-1);
  __CrestStore(91599, (unsigned long )(& __retres68));
# 679 "xmltok_impl.c"
  __retres68 = -1;
  return_label:
  {
  __CrestLoad(91600, (unsigned long )(& __retres68), (long long )__retres68);
  __CrestReturn(91601);
# 525 "xmltok_impl.c"
  return (__retres68);
  }
}
}
# 684 "xmltok_impl.c"
static int big2_scanLt(ENCODING const *enc , char const *ptr , char const *end ,
                       char const **nextTokPtr )
{
  int hadColon ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  char const *mem_21 ;
  char const *mem_22 ;
  struct normal_encoding *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  struct normal_encoding *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  struct normal_encoding *mem_36 ;
  char const *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  char const *mem_40 ;
  char const *mem_41 ;
  char const *mem_42 ;
  char const *mem_43 ;
  struct normal_encoding *mem_44 ;
  char const *mem_45 ;
  char const *mem_46 ;
  char const *mem_47 ;
  char const *mem_48 ;
  char const *mem_49 ;
  char const *mem_50 ;
  char const *mem_51 ;
  struct normal_encoding *mem_52 ;
  char const *mem_53 ;
  char const *mem_54 ;
  char const *mem_55 ;
  char const *mem_56 ;
  char const *mem_57 ;
  char const *mem_58 ;
  char const *mem_59 ;
  int __retres60 ;

  {
  __CrestCall(91602, 912);

  {
  __CrestLoad(91605, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(91604, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(91603, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 691 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(91606, 59427, 1);
    __CrestLoad(91608, (unsigned long )0, (long long )-1);
    __CrestStore(91609, (unsigned long )(& __retres60));
# 692 "xmltok_impl.c"
    __retres60 = -1;
# 692 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91607, 59429, 0);

  }
  }
  {
# 693 "xmltok_impl.c"
  mem_21 = ptr + 0;
  {
  __CrestLoad(91612, (unsigned long )mem_21, (long long )*mem_21);
  __CrestLoad(91611, (unsigned long )0, (long long )0);
  __CrestApply2(91610, 12, (long long )((int const )*mem_21 == 0));
# 693 "xmltok_impl.c"
  if ((int const )*mem_21 == 0) {
    __CrestBranch(91613, 59433, 1);
# 693 "xmltok_impl.c"
    mem_22 = ptr + 1;
# 693 "xmltok_impl.c"
    mem_23 = (struct normal_encoding *)enc;
    __CrestLoad(91615, (unsigned long )(& mem_23->type[(unsigned char )*mem_22]),
                (long long )mem_23->type[(unsigned char )*mem_22]);
    __CrestStore(91616, (unsigned long )(& tmp___0));
# 693 "xmltok_impl.c"
    tmp___0 = (int )mem_23->type[(unsigned char )*mem_22];
  } else {
    __CrestBranch(91614, 59434, 0);
# 693 "xmltok_impl.c"
    mem_24 = ptr + 0;
# 693 "xmltok_impl.c"
    mem_25 = ptr + 1;
    __CrestLoad(91617, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(91618, (unsigned long )mem_25, (long long )*mem_25);
# 693 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_24, (char )*mem_25);
    __CrestHandleReturn(91620, (long long )tmp);
    __CrestStore(91619, (unsigned long )(& tmp));
    __CrestLoad(91621, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(91622, (unsigned long )(& tmp___0));
# 693 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(91625, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91624, (unsigned long )0, (long long )29);
  __CrestApply2(91623, 12, (long long )(tmp___0 == 29));
# 694 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(91626, 59437, 1);
# 694 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(91627, 59438, 0);

  }
  }
  {
  __CrestLoad(91630, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91629, (unsigned long )0, (long long )24);
  __CrestApply2(91628, 12, (long long )(tmp___0 == 24));
# 694 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(91631, 59440, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(91632, 59441, 0);

  }
  }
  {
  __CrestLoad(91635, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91634, (unsigned long )0, (long long )22);
  __CrestApply2(91633, 12, (long long )(tmp___0 == 22));
# 694 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(91636, 59443, 1);
# 694 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(91637, 59444, 0);

  }
  }
  {
  __CrestLoad(91640, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91639, (unsigned long )0, (long long )5);
  __CrestApply2(91638, 12, (long long )(tmp___0 == 5));
# 694 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(91641, 59446, 1);
# 694 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(91642, 59447, 0);

  }
  }
  {
  __CrestLoad(91645, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91644, (unsigned long )0, (long long )6);
  __CrestApply2(91643, 12, (long long )(tmp___0 == 6));
# 694 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(91646, 59449, 1);
# 694 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(91647, 59450, 0);

  }
  }
  {
  __CrestLoad(91650, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91649, (unsigned long )0, (long long )7);
  __CrestApply2(91648, 12, (long long )(tmp___0 == 7));
# 694 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(91651, 59452, 1);
# 694 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(91652, 59453, 0);

  }
  }
  {
  __CrestLoad(91655, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91654, (unsigned long )0, (long long )16);
  __CrestApply2(91653, 12, (long long )(tmp___0 == 16));
# 695 "xmltok_impl.c"
  if (tmp___0 == 16) {
    __CrestBranch(91656, 59455, 1);
# 695 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(91657, 59456, 0);

  }
  }
  {
  __CrestLoad(91660, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91659, (unsigned long )0, (long long )15);
  __CrestApply2(91658, 12, (long long )(tmp___0 == 15));
# 707 "xmltok_impl.c"
  if (tmp___0 == 15) {
    __CrestBranch(91661, 59458, 1);
# 707 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(91662, 59459, 0);

  }
  }
  {
  __CrestLoad(91665, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(91664, (unsigned long )0, (long long )17);
  __CrestApply2(91663, 12, (long long )(tmp___0 == 17));
# 709 "xmltok_impl.c"
  if (tmp___0 == 17) {
    __CrestBranch(91666, 59461, 1);
# 709 "xmltok_impl.c"
    goto case_17;
  } else {
    __CrestBranch(91667, 59462, 0);

  }
  }
# 711 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 694 "xmltok_impl.c"
  mem_26 = ptr + 0;
# 694 "xmltok_impl.c"
  mem_27 = ptr + 1;
# 694 "xmltok_impl.c"
  mem_28 = ptr + 1;
  {
  __CrestLoad(91676, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)]);
  __CrestLoad(91675, (unsigned long )0, (long long )1);
  __CrestLoad(91674, (unsigned long )mem_28, (long long )*mem_28);
  __CrestLoad(91673, (unsigned long )0, (long long )31);
  __CrestApply2(91672, 5, (long long )((int )((unsigned char )*mem_28) & 31));
  __CrestApply2(91671, 8, (long long )(1 << ((int )((unsigned char )*mem_28) & 31)));
  __CrestApply2(91670, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))));
  __CrestLoad(91669, (unsigned long )0, (long long )0);
  __CrestApply2(91668, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0));
# 694 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_26] << 3) + (int const )((int )((unsigned char )*mem_27) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_28) & 31))) == 0) {
    __CrestBranch(91677, 59467, 1);
# 694 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91679, (unsigned long )0, (long long )0);
    __CrestStore(91680, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
    __retres60 = 0;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91678, 59470, 0);

  }
  }
  }
  case_24:
  case_22:
# 694 "xmltok_impl.c"
  ptr += 2;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(91685, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(91684, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(91683, 18, (long long )(end - ptr));
  __CrestLoad(91682, (unsigned long )0, (long long )2L);
  __CrestApply2(91681, 16, (long long )(end - ptr < 2L));
# 694 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(91686, 59474, 1);
    __CrestLoad(91688, (unsigned long )0, (long long )-2);
    __CrestStore(91689, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
    __retres60 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91687, 59476, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(91690, (unsigned long )0, (long long )0);
  __CrestStore(91691, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
  __retres60 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 2;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(91696, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(91695, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(91694, 18, (long long )(end - ptr));
  __CrestLoad(91693, (unsigned long )0, (long long )3L);
  __CrestApply2(91692, 16, (long long )(end - ptr < 3L));
# 694 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(91697, 59483, 1);
    __CrestLoad(91699, (unsigned long )0, (long long )-2);
    __CrestStore(91700, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
    __retres60 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91698, 59485, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(91701, (unsigned long )0, (long long )0);
  __CrestStore(91702, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
  __retres60 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 3;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(91707, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(91706, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(91705, 18, (long long )(end - ptr));
  __CrestLoad(91704, (unsigned long )0, (long long )4L);
  __CrestApply2(91703, 16, (long long )(end - ptr < 4L));
# 694 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(91708, 59492, 1);
    __CrestLoad(91710, (unsigned long )0, (long long )-2);
    __CrestStore(91711, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
    __retres60 = -2;
# 694 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91709, 59494, 0);

  }
  }
# 694 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(91712, (unsigned long )0, (long long )0);
  __CrestStore(91713, (unsigned long )(& __retres60));
# 694 "xmltok_impl.c"
  __retres60 = 0;
# 694 "xmltok_impl.c"
  goto return_label;
# 694 "xmltok_impl.c"
  ptr += 4;
# 694 "xmltok_impl.c"
  goto switch_break;
  case_16:
# 696 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(91716, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(91715, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(91714, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 696 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(91717, 59502, 1);
    __CrestLoad(91719, (unsigned long )0, (long long )-1);
    __CrestStore(91720, (unsigned long )(& __retres60));
# 697 "xmltok_impl.c"
    __retres60 = -1;
# 697 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(91718, 59504, 0);

  }
  }
  {
# 698 "xmltok_impl.c"
  mem_29 = ptr + 0;
  {
  __CrestLoad(91723, (unsigned long )mem_29, (long long )*mem_29);
  __CrestLoad(91722, (unsigned long )0, (long long )0);
  __CrestApply2(91721, 12, (long long )((int const )*mem_29 == 0));
# 698 "xmltok_impl.c"
  if ((int const )*mem_29 == 0) {
    __CrestBranch(91724, 59508, 1);
# 698 "xmltok_impl.c"
    mem_30 = ptr + 1;
# 698 "xmltok_impl.c"
    mem_31 = (struct normal_encoding *)enc;
    __CrestLoad(91726, (unsigned long )(& mem_31->type[(unsigned char )*mem_30]),
                (long long )mem_31->type[(unsigned char )*mem_30]);
    __CrestStore(91727, (unsigned long )(& tmp___2));
# 698 "xmltok_impl.c"
    tmp___2 = (int )mem_31->type[(unsigned char )*mem_30];
  } else {
    __CrestBranch(91725, 59509, 0);
# 698 "xmltok_impl.c"
    mem_32 = ptr + 0;
# 698 "xmltok_impl.c"
    mem_33 = ptr + 1;
    __CrestLoad(91728, (unsigned long )mem_32, (long long )*mem_32);
    __CrestLoad(91729, (unsigned long )mem_33, (long long )*mem_33);
# 698 "xmltok_impl.c"
    tmp___1 = unicode_byte_type((char )*mem_32, (char )*mem_33);
    __CrestHandleReturn(91731, (long long )tmp___1);
    __CrestStore(91730, (unsigned long )(& tmp___1));
    __CrestLoad(91732, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestStore(91733, (unsigned long )(& tmp___2));
# 698 "xmltok_impl.c"
    tmp___2 = tmp___1;
  }
  }
  }
  {
  {
  __CrestLoad(91736, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(91735, (unsigned long )0, (long long )27);
  __CrestApply2(91734, 12, (long long )(tmp___2 == 27));
# 699 "xmltok_impl.c"
  if (tmp___2 == 27) {
    __CrestBranch(91737, 59512, 1);
# 699 "xmltok_impl.c"
    goto case_27;
  } else {
    __CrestBranch(91738, 59513, 0);

  }
  }
  {
  __CrestLoad(91741, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(91740, (unsigned long )0, (long long )20);
  __CrestApply2(91739, 12, (long long )(tmp___2 == 20));
# 701 "xmltok_impl.c"
  if (tmp___2 == 20) {
    __CrestBranch(91742, 59515, 1);
# 701 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(91743, 59516, 0);

  }
  }
# 698 "xmltok_impl.c"
  goto switch_break___0;
  case_27:
# 700 "xmltok_impl.c"
  tmp___3 = big2_scanComment(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(91745, (long long )tmp___3);
  __CrestStore(91744, (unsigned long )(& tmp___3));
  __CrestLoad(91746, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(91747, (unsigned long )(& __retres60));
# 700 "xmltok_impl.c"
  __retres60 = tmp___3;
# 700 "xmltok_impl.c"
  goto return_label;
  case_20:
# 702 "xmltok_impl.c"
  tmp___4 = big2_scanCdataSection(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(91749, (long long )tmp___4);
  __CrestStore(91748, (unsigned long )(& tmp___4));
  __CrestLoad(91750, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(91751, (unsigned long )(& __retres60));
# 702 "xmltok_impl.c"
  __retres60 = tmp___4;
# 702 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 705 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(91752, (unsigned long )0, (long long )0);
  __CrestStore(91753, (unsigned long )(& __retres60));
# 706 "xmltok_impl.c"
  __retres60 = 0;
# 706 "xmltok_impl.c"
  goto return_label;
  case_15:
# 708 "xmltok_impl.c"
  tmp___5 = big2_scanPi(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(91755, (long long )tmp___5);
  __CrestStore(91754, (unsigned long )(& tmp___5));
  __CrestLoad(91756, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(91757, (unsigned long )(& __retres60));
# 708 "xmltok_impl.c"
  __retres60 = tmp___5;
# 708 "xmltok_impl.c"
  goto return_label;
  case_17:
# 710 "xmltok_impl.c"
  tmp___6 = big2_scanEndTag(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(91759, (long long )tmp___6);
  __CrestStore(91758, (unsigned long )(& tmp___6));
  __CrestLoad(91760, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(91761, (unsigned long )(& __retres60));
# 710 "xmltok_impl.c"
  __retres60 = tmp___6;
# 710 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 712 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(91762, (unsigned long )0, (long long )0);
  __CrestStore(91763, (unsigned long )(& __retres60));
# 713 "xmltok_impl.c"
  __retres60 = 0;
# 713 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(91764, (unsigned long )0, (long long )0);
  __CrestStore(91765, (unsigned long )(& hadColon));
# 716 "xmltok_impl.c"
  hadColon = 0;
  {
# 719 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(91768, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(91767, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(91766, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 719 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(91769, 59543, 1);

    } else {
      __CrestBranch(91770, 59544, 0);
# 719 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 720 "xmltok_impl.c"
    mem_34 = ptr + 0;
    {
    __CrestLoad(91773, (unsigned long )mem_34, (long long )*mem_34);
    __CrestLoad(91772, (unsigned long )0, (long long )0);
    __CrestApply2(91771, 12, (long long )((int const )*mem_34 == 0));
# 720 "xmltok_impl.c"
    if ((int const )*mem_34 == 0) {
      __CrestBranch(91774, 59548, 1);
# 720 "xmltok_impl.c"
      mem_35 = ptr + 1;
# 720 "xmltok_impl.c"
      mem_36 = (struct normal_encoding *)enc;
      __CrestLoad(91776, (unsigned long )(& mem_36->type[(unsigned char )*mem_35]),
                  (long long )mem_36->type[(unsigned char )*mem_35]);
      __CrestStore(91777, (unsigned long )(& tmp___8));
# 720 "xmltok_impl.c"
      tmp___8 = (int )mem_36->type[(unsigned char )*mem_35];
    } else {
      __CrestBranch(91775, 59549, 0);
# 720 "xmltok_impl.c"
      mem_37 = ptr + 0;
# 720 "xmltok_impl.c"
      mem_38 = ptr + 1;
      __CrestLoad(91778, (unsigned long )mem_37, (long long )*mem_37);
      __CrestLoad(91779, (unsigned long )mem_38, (long long )*mem_38);
# 720 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_37, (char )*mem_38);
      __CrestHandleReturn(91781, (long long )tmp___7);
      __CrestStore(91780, (unsigned long )(& tmp___7));
      __CrestLoad(91782, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(91783, (unsigned long )(& tmp___8));
# 720 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(91786, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91785, (unsigned long )0, (long long )29);
    __CrestApply2(91784, 12, (long long )(tmp___8 == 29));
# 721 "xmltok_impl.c"
    if (tmp___8 == 29) {
      __CrestBranch(91787, 59552, 1);
# 721 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(91788, 59553, 0);

    }
    }
    {
    __CrestLoad(91791, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91790, (unsigned long )0, (long long )27);
    __CrestApply2(91789, 12, (long long )(tmp___8 == 27));
# 721 "xmltok_impl.c"
    if (tmp___8 == 27) {
      __CrestBranch(91792, 59555, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(91793, 59556, 0);

    }
    }
    {
    __CrestLoad(91796, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91795, (unsigned long )0, (long long )26);
    __CrestApply2(91794, 12, (long long )(tmp___8 == 26));
# 721 "xmltok_impl.c"
    if (tmp___8 == 26) {
      __CrestBranch(91797, 59558, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(91798, 59559, 0);

    }
    }
    {
    __CrestLoad(91801, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91800, (unsigned long )0, (long long )25);
    __CrestApply2(91799, 12, (long long )(tmp___8 == 25));
# 721 "xmltok_impl.c"
    if (tmp___8 == 25) {
      __CrestBranch(91802, 59561, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(91803, 59562, 0);

    }
    }
    {
    __CrestLoad(91806, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91805, (unsigned long )0, (long long )24);
    __CrestApply2(91804, 12, (long long )(tmp___8 == 24));
# 721 "xmltok_impl.c"
    if (tmp___8 == 24) {
      __CrestBranch(91807, 59564, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(91808, 59565, 0);

    }
    }
    {
    __CrestLoad(91811, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91810, (unsigned long )0, (long long )22);
    __CrestApply2(91809, 12, (long long )(tmp___8 == 22));
# 721 "xmltok_impl.c"
    if (tmp___8 == 22) {
      __CrestBranch(91812, 59567, 1);
# 721 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(91813, 59568, 0);

    }
    }
    {
    __CrestLoad(91816, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91815, (unsigned long )0, (long long )5);
    __CrestApply2(91814, 12, (long long )(tmp___8 == 5));
# 721 "xmltok_impl.c"
    if (tmp___8 == 5) {
      __CrestBranch(91817, 59570, 1);
# 721 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(91818, 59571, 0);

    }
    }
    {
    __CrestLoad(91821, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91820, (unsigned long )0, (long long )6);
    __CrestApply2(91819, 12, (long long )(tmp___8 == 6));
# 721 "xmltok_impl.c"
    if (tmp___8 == 6) {
      __CrestBranch(91822, 59573, 1);
# 721 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(91823, 59574, 0);

    }
    }
    {
    __CrestLoad(91826, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91825, (unsigned long )0, (long long )7);
    __CrestApply2(91824, 12, (long long )(tmp___8 == 7));
# 721 "xmltok_impl.c"
    if (tmp___8 == 7) {
      __CrestBranch(91827, 59576, 1);
# 721 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(91828, 59577, 0);

    }
    }
    {
    __CrestLoad(91831, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91830, (unsigned long )0, (long long )23);
    __CrestApply2(91829, 12, (long long )(tmp___8 == 23));
# 723 "xmltok_impl.c"
    if (tmp___8 == 23) {
      __CrestBranch(91832, 59579, 1);
# 723 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(91833, 59580, 0);

    }
    }
    {
    __CrestLoad(91836, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91835, (unsigned long )0, (long long )10);
    __CrestApply2(91834, 12, (long long )(tmp___8 == 10));
# 740 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(91837, 59582, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91838, 59583, 0);

    }
    }
    {
    __CrestLoad(91841, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91840, (unsigned long )0, (long long )9);
    __CrestApply2(91839, 12, (long long )(tmp___8 == 9));
# 740 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(91842, 59585, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91843, 59586, 0);

    }
    }
    {
    __CrestLoad(91846, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91845, (unsigned long )0, (long long )21);
    __CrestApply2(91844, 12, (long long )(tmp___8 == 21));
# 740 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(91847, 59588, 1);
# 740 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(91848, 59589, 0);

    }
    }
    {
    __CrestLoad(91851, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91850, (unsigned long )0, (long long )11);
    __CrestApply2(91849, 12, (long long )(tmp___8 == 11));
# 761 "xmltok_impl.c"
    if (tmp___8 == 11) {
      __CrestBranch(91852, 59591, 1);
# 761 "xmltok_impl.c"
      goto gt;
    } else {
      __CrestBranch(91853, 59592, 0);

    }
    }
    {
    __CrestLoad(91856, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(91855, (unsigned long )0, (long long )17);
    __CrestApply2(91854, 12, (long long )(tmp___8 == 17));
# 765 "xmltok_impl.c"
    if (tmp___8 == 17) {
      __CrestBranch(91857, 59594, 1);
# 765 "xmltok_impl.c"
      goto sol;
    } else {
      __CrestBranch(91858, 59595, 0);

    }
    }
# 776 "xmltok_impl.c"
    goto switch_default___2;
    case_29___0:
    {
# 721 "xmltok_impl.c"
    mem_39 = ptr + 0;
# 721 "xmltok_impl.c"
    mem_40 = ptr + 1;
# 721 "xmltok_impl.c"
    mem_41 = ptr + 1;
    {
    __CrestLoad(91867, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_39] << 3) + (int const )((int )((unsigned char )*mem_40) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_39] << 3) + (int const )((int )((unsigned char )*mem_40) >> 5)]);
    __CrestLoad(91866, (unsigned long )0, (long long )1);
    __CrestLoad(91865, (unsigned long )mem_41, (long long )*mem_41);
    __CrestLoad(91864, (unsigned long )0, (long long )31);
    __CrestApply2(91863, 5, (long long )((int )((unsigned char )*mem_41) & 31));
    __CrestApply2(91862, 8, (long long )(1 << ((int )((unsigned char )*mem_41) & 31)));
    __CrestApply2(91861, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_39] << 3) + (int const )((int )((unsigned char )*mem_40) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_41) & 31))));
    __CrestLoad(91860, (unsigned long )0, (long long )0);
    __CrestApply2(91859, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_39] << 3) + (int const )((int )((unsigned char )*mem_40) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_41) & 31))) == 0));
# 721 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_39] << 3) + (int const )((int )((unsigned char )*mem_40) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_41) & 31))) == 0) {
      __CrestBranch(91868, 59600, 1);
# 721 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91870, (unsigned long )0, (long long )0);
      __CrestStore(91871, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
      __retres60 = 0;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91869, 59603, 0);

    }
    }
    }
    case_27___0:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 721 "xmltok_impl.c"
    ptr += 2;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_5___0:
    {
    __CrestLoad(91876, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91875, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91874, 18, (long long )(end - ptr));
    __CrestLoad(91873, (unsigned long )0, (long long )2L);
    __CrestApply2(91872, 16, (long long )(end - ptr < 2L));
# 721 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(91877, 59607, 1);
      __CrestLoad(91879, (unsigned long )0, (long long )-2);
      __CrestStore(91880, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
      __retres60 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91878, 59609, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91881, (unsigned long )0, (long long )0);
    __CrestStore(91882, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
    __retres60 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 2;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_6___0:
    {
    __CrestLoad(91887, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91886, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91885, 18, (long long )(end - ptr));
    __CrestLoad(91884, (unsigned long )0, (long long )3L);
    __CrestApply2(91883, 16, (long long )(end - ptr < 3L));
# 721 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(91888, 59616, 1);
      __CrestLoad(91890, (unsigned long )0, (long long )-2);
      __CrestStore(91891, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
      __retres60 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91889, 59618, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91892, (unsigned long )0, (long long )0);
    __CrestStore(91893, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
    __retres60 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 3;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_7___0:
    {
    __CrestLoad(91898, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91897, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91896, 18, (long long )(end - ptr));
    __CrestLoad(91895, (unsigned long )0, (long long )4L);
    __CrestApply2(91894, 16, (long long )(end - ptr < 4L));
# 721 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(91899, 59625, 1);
      __CrestLoad(91901, (unsigned long )0, (long long )-2);
      __CrestStore(91902, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
      __retres60 = -2;
# 721 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91900, 59627, 0);

    }
    }
# 721 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91903, (unsigned long )0, (long long )0);
    __CrestStore(91904, (unsigned long )(& __retres60));
# 721 "xmltok_impl.c"
    __retres60 = 0;
# 721 "xmltok_impl.c"
    goto return_label;
# 721 "xmltok_impl.c"
    ptr += 4;
# 721 "xmltok_impl.c"
    goto switch_break___1;
    case_23:
    {
    __CrestLoad(91907, (unsigned long )(& hadColon), (long long )hadColon);
    __CrestLoad(91906, (unsigned long )0, (long long )0);
    __CrestApply2(91905, 13, (long long )(hadColon != 0));
# 724 "xmltok_impl.c"
    if (hadColon != 0) {
      __CrestBranch(91908, 59634, 1);
# 725 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91910, (unsigned long )0, (long long )0);
      __CrestStore(91911, (unsigned long )(& __retres60));
# 726 "xmltok_impl.c"
      __retres60 = 0;
# 726 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91909, 59637, 0);

    }
    }
    __CrestLoad(91912, (unsigned long )0, (long long )1);
    __CrestStore(91913, (unsigned long )(& hadColon));
# 728 "xmltok_impl.c"
    hadColon = 1;
# 729 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(91916, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(91915, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(91914, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 730 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(91917, 59640, 1);
      __CrestLoad(91919, (unsigned long )0, (long long )-1);
      __CrestStore(91920, (unsigned long )(& __retres60));
# 731 "xmltok_impl.c"
      __retres60 = -1;
# 731 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91918, 59642, 0);

    }
    }
    {
# 732 "xmltok_impl.c"
    mem_42 = ptr + 0;
    {
    __CrestLoad(91923, (unsigned long )mem_42, (long long )*mem_42);
    __CrestLoad(91922, (unsigned long )0, (long long )0);
    __CrestApply2(91921, 12, (long long )((int const )*mem_42 == 0));
# 732 "xmltok_impl.c"
    if ((int const )*mem_42 == 0) {
      __CrestBranch(91924, 59646, 1);
# 732 "xmltok_impl.c"
      mem_43 = ptr + 1;
# 732 "xmltok_impl.c"
      mem_44 = (struct normal_encoding *)enc;
      __CrestLoad(91926, (unsigned long )(& mem_44->type[(unsigned char )*mem_43]),
                  (long long )mem_44->type[(unsigned char )*mem_43]);
      __CrestStore(91927, (unsigned long )(& tmp___10));
# 732 "xmltok_impl.c"
      tmp___10 = (int )mem_44->type[(unsigned char )*mem_43];
    } else {
      __CrestBranch(91925, 59647, 0);
# 732 "xmltok_impl.c"
      mem_45 = ptr + 0;
# 732 "xmltok_impl.c"
      mem_46 = ptr + 1;
      __CrestLoad(91928, (unsigned long )mem_45, (long long )*mem_45);
      __CrestLoad(91929, (unsigned long )mem_46, (long long )*mem_46);
# 732 "xmltok_impl.c"
      tmp___9 = unicode_byte_type((char )*mem_45, (char )*mem_46);
      __CrestHandleReturn(91931, (long long )tmp___9);
      __CrestStore(91930, (unsigned long )(& tmp___9));
      __CrestLoad(91932, (unsigned long )(& tmp___9), (long long )tmp___9);
      __CrestStore(91933, (unsigned long )(& tmp___10));
# 732 "xmltok_impl.c"
      tmp___10 = tmp___9;
    }
    }
    }
    {
    {
    __CrestLoad(91936, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91935, (unsigned long )0, (long long )29);
    __CrestApply2(91934, 12, (long long )(tmp___10 == 29));
# 733 "xmltok_impl.c"
    if (tmp___10 == 29) {
      __CrestBranch(91937, 59650, 1);
# 733 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(91938, 59651, 0);

    }
    }
    {
    __CrestLoad(91941, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91940, (unsigned long )0, (long long )24);
    __CrestApply2(91939, 12, (long long )(tmp___10 == 24));
# 733 "xmltok_impl.c"
    if (tmp___10 == 24) {
      __CrestBranch(91942, 59653, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(91943, 59654, 0);

    }
    }
    {
    __CrestLoad(91946, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91945, (unsigned long )0, (long long )22);
    __CrestApply2(91944, 12, (long long )(tmp___10 == 22));
# 733 "xmltok_impl.c"
    if (tmp___10 == 22) {
      __CrestBranch(91947, 59656, 1);
# 733 "xmltok_impl.c"
      goto case_24___1;
    } else {
      __CrestBranch(91948, 59657, 0);

    }
    }
    {
    __CrestLoad(91951, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91950, (unsigned long )0, (long long )5);
    __CrestApply2(91949, 12, (long long )(tmp___10 == 5));
# 733 "xmltok_impl.c"
    if (tmp___10 == 5) {
      __CrestBranch(91952, 59659, 1);
# 733 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(91953, 59660, 0);

    }
    }
    {
    __CrestLoad(91956, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91955, (unsigned long )0, (long long )6);
    __CrestApply2(91954, 12, (long long )(tmp___10 == 6));
# 733 "xmltok_impl.c"
    if (tmp___10 == 6) {
      __CrestBranch(91957, 59662, 1);
# 733 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(91958, 59663, 0);

    }
    }
    {
    __CrestLoad(91961, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestLoad(91960, (unsigned long )0, (long long )7);
    __CrestApply2(91959, 12, (long long )(tmp___10 == 7));
# 733 "xmltok_impl.c"
    if (tmp___10 == 7) {
      __CrestBranch(91962, 59665, 1);
# 733 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(91963, 59666, 0);

    }
    }
# 734 "xmltok_impl.c"
    goto switch_default___0;
    case_29___1:
    {
# 733 "xmltok_impl.c"
    mem_47 = ptr + 0;
# 733 "xmltok_impl.c"
    mem_48 = ptr + 1;
# 733 "xmltok_impl.c"
    mem_49 = ptr + 1;
    {
    __CrestLoad(91972, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_47] << 3) + (int const )((int )((unsigned char )*mem_48) >> 5)]),
                (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_47] << 3) + (int const )((int )((unsigned char )*mem_48) >> 5)]);
    __CrestLoad(91971, (unsigned long )0, (long long )1);
    __CrestLoad(91970, (unsigned long )mem_49, (long long )*mem_49);
    __CrestLoad(91969, (unsigned long )0, (long long )31);
    __CrestApply2(91968, 5, (long long )((int )((unsigned char )*mem_49) & 31));
    __CrestApply2(91967, 8, (long long )(1 << ((int )((unsigned char )*mem_49) & 31)));
    __CrestApply2(91966, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_47] << 3) + (int const )((int )((unsigned char )*mem_48) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_49) & 31))));
    __CrestLoad(91965, (unsigned long )0, (long long )0);
    __CrestApply2(91964, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_47] << 3) + (int const )((int )((unsigned char )*mem_48) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_49) & 31))) == 0));
# 733 "xmltok_impl.c"
    if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_47] << 3) + (int const )((int )((unsigned char )*mem_48) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_49) & 31))) == 0) {
      __CrestBranch(91973, 59671, 1);
# 733 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(91975, (unsigned long )0, (long long )0);
      __CrestStore(91976, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
      __retres60 = 0;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91974, 59674, 0);

    }
    }
    }
    case_24___1:
    case_22___1:
# 733 "xmltok_impl.c"
    ptr += 2;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_5___1:
    {
    __CrestLoad(91981, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91980, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91979, 18, (long long )(end - ptr));
    __CrestLoad(91978, (unsigned long )0, (long long )2L);
    __CrestApply2(91977, 16, (long long )(end - ptr < 2L));
# 733 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(91982, 59678, 1);
      __CrestLoad(91984, (unsigned long )0, (long long )-2);
      __CrestStore(91985, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
      __retres60 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91983, 59680, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91986, (unsigned long )0, (long long )0);
    __CrestStore(91987, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
    __retres60 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 2;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_6___1:
    {
    __CrestLoad(91992, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(91991, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(91990, 18, (long long )(end - ptr));
    __CrestLoad(91989, (unsigned long )0, (long long )3L);
    __CrestApply2(91988, 16, (long long )(end - ptr < 3L));
# 733 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(91993, 59687, 1);
      __CrestLoad(91995, (unsigned long )0, (long long )-2);
      __CrestStore(91996, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
      __retres60 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(91994, 59689, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(91997, (unsigned long )0, (long long )0);
    __CrestStore(91998, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
    __retres60 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 3;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    case_7___1:
    {
    __CrestLoad(92003, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92002, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92001, 18, (long long )(end - ptr));
    __CrestLoad(92000, (unsigned long )0, (long long )4L);
    __CrestApply2(91999, 16, (long long )(end - ptr < 4L));
# 733 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(92004, 59696, 1);
      __CrestLoad(92006, (unsigned long )0, (long long )-2);
      __CrestStore(92007, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
      __retres60 = -2;
# 733 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92005, 59698, 0);

    }
    }
# 733 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92008, (unsigned long )0, (long long )0);
    __CrestStore(92009, (unsigned long )(& __retres60));
# 733 "xmltok_impl.c"
    __retres60 = 0;
# 733 "xmltok_impl.c"
    goto return_label;
# 733 "xmltok_impl.c"
    ptr += 4;
# 733 "xmltok_impl.c"
    goto switch_break___2;
    switch_default___0:
# 735 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92010, (unsigned long )0, (long long )0);
    __CrestStore(92011, (unsigned long )(& __retres60));
# 736 "xmltok_impl.c"
    __retres60 = 0;
# 736 "xmltok_impl.c"
    goto return_label;
    switch_break___2: ;
    }
# 738 "xmltok_impl.c"
    goto switch_break___1;
    case_10:
    case_9:
    case_21:
# 742 "xmltok_impl.c"
    ptr += 2;
    {
# 743 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(92014, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(92013, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(92012, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 743 "xmltok_impl.c"
      if ((unsigned long )ptr != (unsigned long )end) {
        __CrestBranch(92015, 59714, 1);

      } else {
        __CrestBranch(92016, 59715, 0);
# 743 "xmltok_impl.c"
        goto while_break___0;
      }
      }
      {
# 744 "xmltok_impl.c"
      mem_50 = ptr + 0;
      {
      __CrestLoad(92019, (unsigned long )mem_50, (long long )*mem_50);
      __CrestLoad(92018, (unsigned long )0, (long long )0);
      __CrestApply2(92017, 12, (long long )((int const )*mem_50 == 0));
# 744 "xmltok_impl.c"
      if ((int const )*mem_50 == 0) {
        __CrestBranch(92020, 59719, 1);
# 744 "xmltok_impl.c"
        mem_51 = ptr + 1;
# 744 "xmltok_impl.c"
        mem_52 = (struct normal_encoding *)enc;
        __CrestLoad(92022, (unsigned long )(& mem_52->type[(unsigned char )*mem_51]),
                    (long long )mem_52->type[(unsigned char )*mem_51]);
        __CrestStore(92023, (unsigned long )(& tmp___12));
# 744 "xmltok_impl.c"
        tmp___12 = (int )mem_52->type[(unsigned char )*mem_51];
      } else {
        __CrestBranch(92021, 59720, 0);
# 744 "xmltok_impl.c"
        mem_53 = ptr + 0;
# 744 "xmltok_impl.c"
        mem_54 = ptr + 1;
        __CrestLoad(92024, (unsigned long )mem_53, (long long )*mem_53);
        __CrestLoad(92025, (unsigned long )mem_54, (long long )*mem_54);
# 744 "xmltok_impl.c"
        tmp___11 = unicode_byte_type((char )*mem_53, (char )*mem_54);
        __CrestHandleReturn(92027, (long long )tmp___11);
        __CrestStore(92026, (unsigned long )(& tmp___11));
        __CrestLoad(92028, (unsigned long )(& tmp___11), (long long )tmp___11);
        __CrestStore(92029, (unsigned long )(& tmp___12));
# 744 "xmltok_impl.c"
        tmp___12 = tmp___11;
      }
      }
      }
      {
      {
      __CrestLoad(92032, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92031, (unsigned long )0, (long long )29);
      __CrestApply2(92030, 12, (long long )(tmp___12 == 29));
# 745 "xmltok_impl.c"
      if (tmp___12 == 29) {
        __CrestBranch(92033, 59723, 1);
# 745 "xmltok_impl.c"
        goto case_29___2;
      } else {
        __CrestBranch(92034, 59724, 0);

      }
      }
      {
      __CrestLoad(92037, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92036, (unsigned long )0, (long long )24);
      __CrestApply2(92035, 12, (long long )(tmp___12 == 24));
# 745 "xmltok_impl.c"
      if (tmp___12 == 24) {
        __CrestBranch(92038, 59726, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(92039, 59727, 0);

      }
      }
      {
      __CrestLoad(92042, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92041, (unsigned long )0, (long long )22);
      __CrestApply2(92040, 12, (long long )(tmp___12 == 22));
# 745 "xmltok_impl.c"
      if (tmp___12 == 22) {
        __CrestBranch(92043, 59729, 1);
# 745 "xmltok_impl.c"
        goto case_24___2;
      } else {
        __CrestBranch(92044, 59730, 0);

      }
      }
      {
      __CrestLoad(92047, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92046, (unsigned long )0, (long long )5);
      __CrestApply2(92045, 12, (long long )(tmp___12 == 5));
# 745 "xmltok_impl.c"
      if (tmp___12 == 5) {
        __CrestBranch(92048, 59732, 1);
# 745 "xmltok_impl.c"
        goto case_5___2;
      } else {
        __CrestBranch(92049, 59733, 0);

      }
      }
      {
      __CrestLoad(92052, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92051, (unsigned long )0, (long long )6);
      __CrestApply2(92050, 12, (long long )(tmp___12 == 6));
# 745 "xmltok_impl.c"
      if (tmp___12 == 6) {
        __CrestBranch(92053, 59735, 1);
# 745 "xmltok_impl.c"
        goto case_6___2;
      } else {
        __CrestBranch(92054, 59736, 0);

      }
      }
      {
      __CrestLoad(92057, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92056, (unsigned long )0, (long long )7);
      __CrestApply2(92055, 12, (long long )(tmp___12 == 7));
# 745 "xmltok_impl.c"
      if (tmp___12 == 7) {
        __CrestBranch(92058, 59738, 1);
# 745 "xmltok_impl.c"
        goto case_7___2;
      } else {
        __CrestBranch(92059, 59739, 0);

      }
      }
      {
      __CrestLoad(92062, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92061, (unsigned long )0, (long long )11);
      __CrestApply2(92060, 12, (long long )(tmp___12 == 11));
# 746 "xmltok_impl.c"
      if (tmp___12 == 11) {
        __CrestBranch(92063, 59741, 1);
# 746 "xmltok_impl.c"
        goto case_11;
      } else {
        __CrestBranch(92064, 59742, 0);

      }
      }
      {
      __CrestLoad(92067, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92066, (unsigned long )0, (long long )17);
      __CrestApply2(92065, 12, (long long )(tmp___12 == 17));
# 748 "xmltok_impl.c"
      if (tmp___12 == 17) {
        __CrestBranch(92068, 59744, 1);
# 748 "xmltok_impl.c"
        goto case_17___0;
      } else {
        __CrestBranch(92069, 59745, 0);

      }
      }
      {
      __CrestLoad(92072, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92071, (unsigned long )0, (long long )10);
      __CrestApply2(92070, 12, (long long )(tmp___12 == 10));
# 750 "xmltok_impl.c"
      if (tmp___12 == 10) {
        __CrestBranch(92073, 59747, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(92074, 59748, 0);

      }
      }
      {
      __CrestLoad(92077, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92076, (unsigned long )0, (long long )9);
      __CrestApply2(92075, 12, (long long )(tmp___12 == 9));
# 750 "xmltok_impl.c"
      if (tmp___12 == 9) {
        __CrestBranch(92078, 59750, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(92079, 59751, 0);

      }
      }
      {
      __CrestLoad(92082, (unsigned long )(& tmp___12), (long long )tmp___12);
      __CrestLoad(92081, (unsigned long )0, (long long )21);
      __CrestApply2(92080, 12, (long long )(tmp___12 == 21));
# 750 "xmltok_impl.c"
      if (tmp___12 == 21) {
        __CrestBranch(92083, 59753, 1);
# 750 "xmltok_impl.c"
        goto case_10___0;
      } else {
        __CrestBranch(92084, 59754, 0);

      }
      }
# 753 "xmltok_impl.c"
      goto switch_default___1;
      case_29___2:
      {
# 745 "xmltok_impl.c"
      mem_55 = ptr + 0;
# 745 "xmltok_impl.c"
      mem_56 = ptr + 1;
# 745 "xmltok_impl.c"
      mem_57 = ptr + 1;
      {
      __CrestLoad(92093, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)]),
                  (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)]);
      __CrestLoad(92092, (unsigned long )0, (long long )1);
      __CrestLoad(92091, (unsigned long )mem_57, (long long )*mem_57);
      __CrestLoad(92090, (unsigned long )0, (long long )31);
      __CrestApply2(92089, 5, (long long )((int )((unsigned char )*mem_57) & 31));
      __CrestApply2(92088, 8, (long long )(1 << ((int )((unsigned char )*mem_57) & 31)));
      __CrestApply2(92087, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))));
      __CrestLoad(92086, (unsigned long )0, (long long )0);
      __CrestApply2(92085, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))) == 0));
# 745 "xmltok_impl.c"
      if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_55] << 3) + (int const )((int )((unsigned char )*mem_56) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_57) & 31))) == 0) {
        __CrestBranch(92094, 59759, 1);
# 745 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(92096, (unsigned long )0, (long long )0);
        __CrestStore(92097, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
        __retres60 = 0;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(92095, 59762, 0);

      }
      }
      }
      case_24___2:
      case_22___2:
# 745 "xmltok_impl.c"
      ptr += 2;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_5___2:
      {
      __CrestLoad(92102, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(92101, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(92100, 18, (long long )(end - ptr));
      __CrestLoad(92099, (unsigned long )0, (long long )2L);
      __CrestApply2(92098, 16, (long long )(end - ptr < 2L));
# 745 "xmltok_impl.c"
      if (end - ptr < 2L) {
        __CrestBranch(92103, 59766, 1);
        __CrestLoad(92105, (unsigned long )0, (long long )-2);
        __CrestStore(92106, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
        __retres60 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(92104, 59768, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92107, (unsigned long )0, (long long )0);
      __CrestStore(92108, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
      __retres60 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 2;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_6___2:
      {
      __CrestLoad(92113, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(92112, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(92111, 18, (long long )(end - ptr));
      __CrestLoad(92110, (unsigned long )0, (long long )3L);
      __CrestApply2(92109, 16, (long long )(end - ptr < 3L));
# 745 "xmltok_impl.c"
      if (end - ptr < 3L) {
        __CrestBranch(92114, 59775, 1);
        __CrestLoad(92116, (unsigned long )0, (long long )-2);
        __CrestStore(92117, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
        __retres60 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(92115, 59777, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92118, (unsigned long )0, (long long )0);
      __CrestStore(92119, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
      __retres60 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 3;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_7___2:
      {
      __CrestLoad(92124, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestLoad(92123, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestApply2(92122, 18, (long long )(end - ptr));
      __CrestLoad(92121, (unsigned long )0, (long long )4L);
      __CrestApply2(92120, 16, (long long )(end - ptr < 4L));
# 745 "xmltok_impl.c"
      if (end - ptr < 4L) {
        __CrestBranch(92125, 59784, 1);
        __CrestLoad(92127, (unsigned long )0, (long long )-2);
        __CrestStore(92128, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
        __retres60 = -2;
# 745 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(92126, 59786, 0);

      }
      }
# 745 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92129, (unsigned long )0, (long long )0);
      __CrestStore(92130, (unsigned long )(& __retres60));
# 745 "xmltok_impl.c"
      __retres60 = 0;
# 745 "xmltok_impl.c"
      goto return_label;
# 745 "xmltok_impl.c"
      ptr += 4;
# 745 "xmltok_impl.c"
      goto switch_break___3;
      case_11:
# 747 "xmltok_impl.c"
      goto gt;
      case_17___0:
# 749 "xmltok_impl.c"
      goto sol;
      case_10___0:
      case_9___0:
      case_21___0:
# 751 "xmltok_impl.c"
      ptr += 2;
# 752 "xmltok_impl.c"
      goto while_continue___0;
      switch_default___1:
# 754 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92131, (unsigned long )0, (long long )0);
      __CrestStore(92132, (unsigned long )(& __retres60));
# 755 "xmltok_impl.c"
      __retres60 = 0;
# 755 "xmltok_impl.c"
      goto return_label;
      switch_break___3: ;
      }
# 757 "xmltok_impl.c"
      tmp___13 = big2_scanAtts(enc, ptr, end, nextTokPtr);
      __CrestHandleReturn(92134, (long long )tmp___13);
      __CrestStore(92133, (unsigned long )(& tmp___13));
      __CrestLoad(92135, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestStore(92136, (unsigned long )(& __retres60));
# 757 "xmltok_impl.c"
      __retres60 = tmp___13;
# 757 "xmltok_impl.c"
      goto return_label;
    }
    while_break___0: ;
    }
    __CrestLoad(92137, (unsigned long )0, (long long )-1);
    __CrestStore(92138, (unsigned long )(& __retres60));
# 759 "xmltok_impl.c"
    __retres60 = -1;
# 759 "xmltok_impl.c"
    goto return_label;
    gt:
    case_11___0:
# 763 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(92139, (unsigned long )0, (long long )2);
    __CrestStore(92140, (unsigned long )(& __retres60));
# 764 "xmltok_impl.c"
    __retres60 = 2;
# 764 "xmltok_impl.c"
    goto return_label;
    sol:
    case_17___1:
# 767 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(92143, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(92142, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(92141, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 768 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(92144, 59811, 1);
      __CrestLoad(92146, (unsigned long )0, (long long )-1);
      __CrestStore(92147, (unsigned long )(& __retres60));
# 769 "xmltok_impl.c"
      __retres60 = -1;
# 769 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92145, 59813, 0);

    }
    }
    {
# 770 "xmltok_impl.c"
    mem_58 = ptr + 0;
    {
    __CrestLoad(92150, (unsigned long )mem_58, (long long )*mem_58);
    __CrestLoad(92149, (unsigned long )0, (long long )0);
    __CrestApply2(92148, 12, (long long )((int const )*mem_58 == 0));
# 770 "xmltok_impl.c"
    if ((int const )*mem_58 == 0) {
      __CrestBranch(92151, 59817, 1);
      {
# 770 "xmltok_impl.c"
      mem_59 = ptr + 1;
      {
      __CrestLoad(92155, (unsigned long )mem_59, (long long )*mem_59);
      __CrestLoad(92154, (unsigned long )0, (long long )62);
      __CrestApply2(92153, 12, (long long )((int const )*mem_59 == 62));
# 770 "xmltok_impl.c"
      if ((int const )*mem_59 == 62) {
        __CrestBranch(92156, 59820, 1);

      } else {
        __CrestBranch(92157, 59821, 0);
# 771 "xmltok_impl.c"
        *nextTokPtr = ptr;
        __CrestLoad(92158, (unsigned long )0, (long long )0);
        __CrestStore(92159, (unsigned long )(& __retres60));
# 772 "xmltok_impl.c"
        __retres60 = 0;
# 772 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(92152, 59824, 0);
# 771 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92160, (unsigned long )0, (long long )0);
      __CrestStore(92161, (unsigned long )(& __retres60));
# 772 "xmltok_impl.c"
      __retres60 = 0;
# 772 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 774 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(92162, (unsigned long )0, (long long )4);
    __CrestStore(92163, (unsigned long )(& __retres60));
# 775 "xmltok_impl.c"
    __retres60 = 4;
# 775 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 777 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92164, (unsigned long )0, (long long )0);
    __CrestStore(92165, (unsigned long )(& __retres60));
# 778 "xmltok_impl.c"
    __retres60 = 0;
# 778 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(92166, (unsigned long )0, (long long )-1);
  __CrestStore(92167, (unsigned long )(& __retres60));
# 781 "xmltok_impl.c"
  __retres60 = -1;
  return_label:
  {
  __CrestLoad(92168, (unsigned long )(& __retres60), (long long )__retres60);
  __CrestReturn(92169);
# 684 "xmltok_impl.c"
  return (__retres60);
  }
}
}
# 784 "xmltok_impl.c"
static int big2_contentTok(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  struct normal_encoding *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  struct normal_encoding *mem_30 ;
  char const *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  int __retres37 ;

  {
  __CrestCall(92170, 913);

  {
  __CrestLoad(92173, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92172, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92171, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 788 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92174, 59838, 1);
    __CrestLoad(92176, (unsigned long )0, (long long )-4);
    __CrestStore(92177, (unsigned long )(& __retres37));
# 789 "xmltok_impl.c"
    __retres37 = -4;
# 789 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92175, 59840, 0);

  }
  }
  __CrestLoad(92180, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92179, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92178, 18, (long long )(end - ptr));
  __CrestStore(92181, (unsigned long )(& n));
# 791 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(92186, (unsigned long )(& n), (long long )n);
  __CrestLoad(92185, (unsigned long )0, (long long )1UL);
  __CrestApply2(92184, 5, (long long )(n & 1UL));
  __CrestLoad(92183, (unsigned long )0, (long long )0);
  __CrestApply2(92182, 13, (long long )((n & 1UL) != 0));
# 792 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(92187, 59843, 1);
    __CrestLoad(92191, (unsigned long )(& n), (long long )n);
    __CrestLoad(92190, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(92189, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(92192, (unsigned long )(& n));
# 793 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(92195, (unsigned long )(& n), (long long )n);
    __CrestLoad(92194, (unsigned long )0, (long long )0UL);
    __CrestApply2(92193, 12, (long long )(n == 0UL));
# 794 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(92196, 59845, 1);
      __CrestLoad(92198, (unsigned long )0, (long long )-1);
      __CrestStore(92199, (unsigned long )(& __retres37));
# 795 "xmltok_impl.c"
      __retres37 = -1;
# 795 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92197, 59847, 0);

    }
    }
# 796 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(92188, 59849, 0);

  }
  }
  {
# 799 "xmltok_impl.c"
  mem_14 = ptr + 0;
  {
  __CrestLoad(92202, (unsigned long )mem_14, (long long )*mem_14);
  __CrestLoad(92201, (unsigned long )0, (long long )0);
  __CrestApply2(92200, 12, (long long )((int const )*mem_14 == 0));
# 799 "xmltok_impl.c"
  if ((int const )*mem_14 == 0) {
    __CrestBranch(92203, 59853, 1);
# 799 "xmltok_impl.c"
    mem_15 = ptr + 1;
# 799 "xmltok_impl.c"
    mem_16 = (struct normal_encoding *)enc;
    __CrestLoad(92205, (unsigned long )(& mem_16->type[(unsigned char )*mem_15]),
                (long long )mem_16->type[(unsigned char )*mem_15]);
    __CrestStore(92206, (unsigned long )(& tmp___0));
# 799 "xmltok_impl.c"
    tmp___0 = (int )mem_16->type[(unsigned char )*mem_15];
  } else {
    __CrestBranch(92204, 59854, 0);
# 799 "xmltok_impl.c"
    mem_17 = ptr + 0;
# 799 "xmltok_impl.c"
    mem_18 = ptr + 1;
    __CrestLoad(92207, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(92208, (unsigned long )mem_18, (long long )*mem_18);
# 799 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_17, (char )*mem_18);
    __CrestHandleReturn(92210, (long long )tmp);
    __CrestStore(92209, (unsigned long )(& tmp));
    __CrestLoad(92211, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(92212, (unsigned long )(& tmp___0));
# 799 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(92215, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92214, (unsigned long )0, (long long )2);
  __CrestApply2(92213, 12, (long long )(tmp___0 == 2));
# 800 "xmltok_impl.c"
  if (tmp___0 == 2) {
    __CrestBranch(92216, 59857, 1);
# 800 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(92217, 59858, 0);

  }
  }
  {
  __CrestLoad(92220, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92219, (unsigned long )0, (long long )3);
  __CrestApply2(92218, 12, (long long )(tmp___0 == 3));
# 802 "xmltok_impl.c"
  if (tmp___0 == 3) {
    __CrestBranch(92221, 59860, 1);
# 802 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(92222, 59861, 0);

  }
  }
  {
  __CrestLoad(92225, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92224, (unsigned long )0, (long long )9);
  __CrestApply2(92223, 12, (long long )(tmp___0 == 9));
# 804 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(92226, 59863, 1);
# 804 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(92227, 59864, 0);

  }
  }
  {
  __CrestLoad(92230, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92229, (unsigned long )0, (long long )10);
  __CrestApply2(92228, 12, (long long )(tmp___0 == 10));
# 812 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(92231, 59866, 1);
# 812 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(92232, 59867, 0);

  }
  }
  {
  __CrestLoad(92235, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92234, (unsigned long )0, (long long )4);
  __CrestApply2(92233, 12, (long long )(tmp___0 == 4));
# 815 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(92236, 59869, 1);
# 815 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(92237, 59870, 0);

  }
  }
  {
  __CrestLoad(92240, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92239, (unsigned long )0, (long long )5);
  __CrestApply2(92238, 12, (long long )(tmp___0 == 5));
# 830 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(92241, 59872, 1);
# 830 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(92242, 59873, 0);

  }
  }
  {
  __CrestLoad(92245, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92244, (unsigned long )0, (long long )6);
  __CrestApply2(92243, 12, (long long )(tmp___0 == 6));
# 830 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(92246, 59875, 1);
# 830 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(92247, 59876, 0);

  }
  }
  {
  __CrestLoad(92250, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92249, (unsigned long )0, (long long )7);
  __CrestApply2(92248, 12, (long long )(tmp___0 == 7));
# 830 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(92251, 59878, 1);
# 830 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(92252, 59879, 0);

  }
  }
  {
  __CrestLoad(92255, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92254, (unsigned long )0, (long long )8);
  __CrestApply2(92253, 12, (long long )(tmp___0 == 8));
# 830 "xmltok_impl.c"
  if (tmp___0 == 8) {
    __CrestBranch(92256, 59881, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(92257, 59882, 0);

  }
  }
  {
  __CrestLoad(92260, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92259, (unsigned long )0, (long long )1);
  __CrestApply2(92258, 12, (long long )(tmp___0 == 1));
# 830 "xmltok_impl.c"
  if (tmp___0 == 1) {
    __CrestBranch(92261, 59884, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(92262, 59885, 0);

  }
  }
  {
  __CrestLoad(92265, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92264, (unsigned long )0, (long long )0);
  __CrestApply2(92263, 12, (long long )(tmp___0 == 0));
# 830 "xmltok_impl.c"
  if (tmp___0 == 0) {
    __CrestBranch(92266, 59887, 1);
# 830 "xmltok_impl.c"
    goto case_8;
  } else {
    __CrestBranch(92267, 59888, 0);

  }
  }
# 831 "xmltok_impl.c"
  goto switch_default;
  case_2:
# 801 "xmltok_impl.c"
  tmp___1 = big2_scanLt(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(92269, (long long )tmp___1);
  __CrestStore(92268, (unsigned long )(& tmp___1));
  __CrestLoad(92270, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(92271, (unsigned long )(& __retres37));
# 801 "xmltok_impl.c"
  __retres37 = tmp___1;
# 801 "xmltok_impl.c"
  goto return_label;
  case_3:
# 803 "xmltok_impl.c"
  tmp___2 = big2_scanRef(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(92273, (long long )tmp___2);
  __CrestStore(92272, (unsigned long )(& tmp___2));
  __CrestLoad(92274, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(92275, (unsigned long )(& __retres37));
# 803 "xmltok_impl.c"
  __retres37 = tmp___2;
# 803 "xmltok_impl.c"
  goto return_label;
  case_9:
# 805 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(92278, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92277, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92276, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 806 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92279, 59898, 1);
    __CrestLoad(92281, (unsigned long )0, (long long )-3);
    __CrestStore(92282, (unsigned long )(& __retres37));
# 807 "xmltok_impl.c"
    __retres37 = -3;
# 807 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92280, 59900, 0);

  }
  }
  {
# 808 "xmltok_impl.c"
  mem_19 = ptr + 0;
  {
  __CrestLoad(92285, (unsigned long )mem_19, (long long )*mem_19);
  __CrestLoad(92284, (unsigned long )0, (long long )0);
  __CrestApply2(92283, 12, (long long )((int const )*mem_19 == 0));
# 808 "xmltok_impl.c"
  if ((int const )*mem_19 == 0) {
    __CrestBranch(92286, 59904, 1);
# 808 "xmltok_impl.c"
    mem_20 = ptr + 1;
# 808 "xmltok_impl.c"
    mem_21 = (struct normal_encoding *)enc;
    __CrestLoad(92288, (unsigned long )(& mem_21->type[(unsigned char )*mem_20]),
                (long long )mem_21->type[(unsigned char )*mem_20]);
    __CrestStore(92289, (unsigned long )(& tmp___4));
# 808 "xmltok_impl.c"
    tmp___4 = (int )mem_21->type[(unsigned char )*mem_20];
  } else {
    __CrestBranch(92287, 59905, 0);
# 808 "xmltok_impl.c"
    mem_22 = ptr + 0;
# 808 "xmltok_impl.c"
    mem_23 = ptr + 1;
    __CrestLoad(92290, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(92291, (unsigned long )mem_23, (long long )*mem_23);
# 808 "xmltok_impl.c"
    tmp___3 = unicode_byte_type((char )*mem_22, (char )*mem_23);
    __CrestHandleReturn(92293, (long long )tmp___3);
    __CrestStore(92292, (unsigned long )(& tmp___3));
    __CrestLoad(92294, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestStore(92295, (unsigned long )(& tmp___4));
# 808 "xmltok_impl.c"
    tmp___4 = tmp___3;
  }
  }
  }
  {
  __CrestLoad(92298, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(92297, (unsigned long )0, (long long )10);
  __CrestApply2(92296, 12, (long long )(tmp___4 == 10));
# 808 "xmltok_impl.c"
  if (tmp___4 == 10) {
    __CrestBranch(92299, 59907, 1);
# 809 "xmltok_impl.c"
    ptr += 2;
  } else {
    __CrestBranch(92300, 59908, 0);

  }
  }
# 810 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92301, (unsigned long )0, (long long )7);
  __CrestStore(92302, (unsigned long )(& __retres37));
# 811 "xmltok_impl.c"
  __retres37 = 7;
# 811 "xmltok_impl.c"
  goto return_label;
  case_10:
# 813 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(92303, (unsigned long )0, (long long )7);
  __CrestStore(92304, (unsigned long )(& __retres37));
# 814 "xmltok_impl.c"
  __retres37 = 7;
# 814 "xmltok_impl.c"
  goto return_label;
  case_4:
# 816 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(92307, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92306, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92305, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 817 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92308, 59917, 1);
    __CrestLoad(92310, (unsigned long )0, (long long )-5);
    __CrestStore(92311, (unsigned long )(& __retres37));
# 818 "xmltok_impl.c"
    __retres37 = -5;
# 818 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92309, 59919, 0);

  }
  }
  {
# 819 "xmltok_impl.c"
  mem_24 = ptr + 0;
  {
  __CrestLoad(92314, (unsigned long )mem_24, (long long )*mem_24);
  __CrestLoad(92313, (unsigned long )0, (long long )0);
  __CrestApply2(92312, 12, (long long )((int const )*mem_24 == 0));
# 819 "xmltok_impl.c"
  if ((int const )*mem_24 == 0) {
    __CrestBranch(92315, 59923, 1);
    {
# 819 "xmltok_impl.c"
    mem_25 = ptr + 1;
    {
    __CrestLoad(92319, (unsigned long )mem_25, (long long )*mem_25);
    __CrestLoad(92318, (unsigned long )0, (long long )93);
    __CrestApply2(92317, 12, (long long )((int const )*mem_25 == 93));
# 819 "xmltok_impl.c"
    if ((int const )*mem_25 == 93) {
      __CrestBranch(92320, 59926, 1);

    } else {
      __CrestBranch(92321, 59927, 0);
# 820 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(92316, 59928, 0);
# 820 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 821 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(92324, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92323, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92322, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 822 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92325, 59931, 1);
    __CrestLoad(92327, (unsigned long )0, (long long )-5);
    __CrestStore(92328, (unsigned long )(& __retres37));
# 823 "xmltok_impl.c"
    __retres37 = -5;
# 823 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92326, 59933, 0);

  }
  }
  {
# 824 "xmltok_impl.c"
  mem_26 = ptr + 0;
  {
  __CrestLoad(92331, (unsigned long )mem_26, (long long )*mem_26);
  __CrestLoad(92330, (unsigned long )0, (long long )0);
  __CrestApply2(92329, 12, (long long )((int const )*mem_26 == 0));
# 824 "xmltok_impl.c"
  if ((int const )*mem_26 == 0) {
    __CrestBranch(92332, 59937, 1);
    {
# 824 "xmltok_impl.c"
    mem_27 = ptr + 1;
    {
    __CrestLoad(92336, (unsigned long )mem_27, (long long )*mem_27);
    __CrestLoad(92335, (unsigned long )0, (long long )62);
    __CrestApply2(92334, 12, (long long )((int const )*mem_27 == 62));
# 824 "xmltok_impl.c"
    if ((int const )*mem_27 == 62) {
      __CrestBranch(92337, 59940, 1);

    } else {
      __CrestBranch(92338, 59941, 0);
# 825 "xmltok_impl.c"
      ptr -= 2;
# 826 "xmltok_impl.c"
      goto switch_break;
    }
    }
    }
  } else {
    __CrestBranch(92333, 59943, 0);
# 825 "xmltok_impl.c"
    ptr -= 2;
# 826 "xmltok_impl.c"
    goto switch_break;
  }
  }
  }
# 828 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92339, (unsigned long )0, (long long )0);
  __CrestStore(92340, (unsigned long )(& __retres37));
# 829 "xmltok_impl.c"
  __retres37 = 0;
# 829 "xmltok_impl.c"
  goto return_label;
  case_5:
  {
  __CrestLoad(92345, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92344, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92343, 18, (long long )(end - ptr));
  __CrestLoad(92342, (unsigned long )0, (long long )2L);
  __CrestApply2(92341, 16, (long long )(end - ptr < 2L));
# 830 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(92346, 59949, 1);
    __CrestLoad(92348, (unsigned long )0, (long long )-2);
    __CrestStore(92349, (unsigned long )(& __retres37));
# 830 "xmltok_impl.c"
    __retres37 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92347, 59951, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 2;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(92354, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92353, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92352, 18, (long long )(end - ptr));
  __CrestLoad(92351, (unsigned long )0, (long long )3L);
  __CrestApply2(92350, 16, (long long )(end - ptr < 3L));
# 830 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(92355, 59955, 1);
    __CrestLoad(92357, (unsigned long )0, (long long )-2);
    __CrestStore(92358, (unsigned long )(& __retres37));
# 830 "xmltok_impl.c"
    __retres37 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92356, 59957, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 3;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(92363, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92362, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92361, 18, (long long )(end - ptr));
  __CrestLoad(92360, (unsigned long )0, (long long )4L);
  __CrestApply2(92359, 16, (long long )(end - ptr < 4L));
# 830 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(92364, 59961, 1);
    __CrestLoad(92366, (unsigned long )0, (long long )-2);
    __CrestStore(92367, (unsigned long )(& __retres37));
# 830 "xmltok_impl.c"
    __retres37 = -2;
# 830 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92365, 59963, 0);

  }
  }
# 830 "xmltok_impl.c"
  ptr += 4;
# 830 "xmltok_impl.c"
  goto switch_break;
  case_8:
  case_1:
  case_0:
# 830 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92368, (unsigned long )0, (long long )0);
  __CrestStore(92369, (unsigned long )(& __retres37));
# 830 "xmltok_impl.c"
  __retres37 = 0;
# 830 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 832 "xmltok_impl.c"
  ptr += 2;
# 833 "xmltok_impl.c"
  goto switch_break;
  switch_break: ;
  }
  {
# 835 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(92372, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(92371, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(92370, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 835 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(92373, 59976, 1);

    } else {
      __CrestBranch(92374, 59977, 0);
# 835 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 836 "xmltok_impl.c"
    mem_28 = ptr + 0;
    {
    __CrestLoad(92377, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(92376, (unsigned long )0, (long long )0);
    __CrestApply2(92375, 12, (long long )((int const )*mem_28 == 0));
# 836 "xmltok_impl.c"
    if ((int const )*mem_28 == 0) {
      __CrestBranch(92378, 59981, 1);
# 836 "xmltok_impl.c"
      mem_29 = ptr + 1;
# 836 "xmltok_impl.c"
      mem_30 = (struct normal_encoding *)enc;
      __CrestLoad(92380, (unsigned long )(& mem_30->type[(unsigned char )*mem_29]),
                  (long long )mem_30->type[(unsigned char )*mem_29]);
      __CrestStore(92381, (unsigned long )(& tmp___6));
# 836 "xmltok_impl.c"
      tmp___6 = (int )mem_30->type[(unsigned char )*mem_29];
    } else {
      __CrestBranch(92379, 59982, 0);
# 836 "xmltok_impl.c"
      mem_31 = ptr + 0;
# 836 "xmltok_impl.c"
      mem_32 = ptr + 1;
      __CrestLoad(92382, (unsigned long )mem_31, (long long )*mem_31);
      __CrestLoad(92383, (unsigned long )mem_32, (long long )*mem_32);
# 836 "xmltok_impl.c"
      tmp___5 = unicode_byte_type((char )*mem_31, (char )*mem_32);
      __CrestHandleReturn(92385, (long long )tmp___5);
      __CrestStore(92384, (unsigned long )(& tmp___5));
      __CrestLoad(92386, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestStore(92387, (unsigned long )(& tmp___6));
# 836 "xmltok_impl.c"
      tmp___6 = tmp___5;
    }
    }
    }
    {
    {
    __CrestLoad(92390, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92389, (unsigned long )0, (long long )5);
    __CrestApply2(92388, 12, (long long )(tmp___6 == 5));
# 845 "xmltok_impl.c"
    if (tmp___6 == 5) {
      __CrestBranch(92391, 59985, 1);
# 845 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(92392, 59986, 0);

    }
    }
    {
    __CrestLoad(92395, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92394, (unsigned long )0, (long long )6);
    __CrestApply2(92393, 12, (long long )(tmp___6 == 6));
# 845 "xmltok_impl.c"
    if (tmp___6 == 6) {
      __CrestBranch(92396, 59988, 1);
# 845 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(92397, 59989, 0);

    }
    }
    {
    __CrestLoad(92400, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92399, (unsigned long )0, (long long )7);
    __CrestApply2(92398, 12, (long long )(tmp___6 == 7));
# 845 "xmltok_impl.c"
    if (tmp___6 == 7) {
      __CrestBranch(92401, 59991, 1);
# 845 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(92402, 59992, 0);

    }
    }
    {
    __CrestLoad(92405, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92404, (unsigned long )0, (long long )4);
    __CrestApply2(92403, 12, (long long )(tmp___6 == 4));
# 847 "xmltok_impl.c"
    if (tmp___6 == 4) {
      __CrestBranch(92406, 59994, 1);
# 847 "xmltok_impl.c"
      goto case_4___0;
    } else {
      __CrestBranch(92407, 59995, 0);

    }
    }
    {
    __CrestLoad(92410, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92409, (unsigned long )0, (long long )10);
    __CrestApply2(92408, 12, (long long )(tmp___6 == 10));
# 869 "xmltok_impl.c"
    if (tmp___6 == 10) {
      __CrestBranch(92411, 59997, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92412, 59998, 0);

    }
    }
    {
    __CrestLoad(92415, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92414, (unsigned long )0, (long long )9);
    __CrestApply2(92413, 12, (long long )(tmp___6 == 9));
# 869 "xmltok_impl.c"
    if (tmp___6 == 9) {
      __CrestBranch(92416, 60000, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92417, 60001, 0);

    }
    }
    {
    __CrestLoad(92420, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92419, (unsigned long )0, (long long )8);
    __CrestApply2(92418, 12, (long long )(tmp___6 == 8));
# 869 "xmltok_impl.c"
    if (tmp___6 == 8) {
      __CrestBranch(92421, 60003, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92422, 60004, 0);

    }
    }
    {
    __CrestLoad(92425, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92424, (unsigned long )0, (long long )1);
    __CrestApply2(92423, 12, (long long )(tmp___6 == 1));
# 869 "xmltok_impl.c"
    if (tmp___6 == 1) {
      __CrestBranch(92426, 60006, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92427, 60007, 0);

    }
    }
    {
    __CrestLoad(92430, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92429, (unsigned long )0, (long long )0);
    __CrestApply2(92428, 12, (long long )(tmp___6 == 0));
# 869 "xmltok_impl.c"
    if (tmp___6 == 0) {
      __CrestBranch(92431, 60009, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92432, 60010, 0);

    }
    }
    {
    __CrestLoad(92435, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92434, (unsigned long )0, (long long )2);
    __CrestApply2(92433, 12, (long long )(tmp___6 == 2));
# 869 "xmltok_impl.c"
    if (tmp___6 == 2) {
      __CrestBranch(92436, 60012, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92437, 60013, 0);

    }
    }
    {
    __CrestLoad(92440, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(92439, (unsigned long )0, (long long )3);
    __CrestApply2(92438, 12, (long long )(tmp___6 == 3));
# 869 "xmltok_impl.c"
    if (tmp___6 == 3) {
      __CrestBranch(92441, 60015, 1);
# 869 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(92442, 60016, 0);

    }
    }
# 872 "xmltok_impl.c"
    goto switch_default___0;
    case_5___0:
    {
    __CrestLoad(92447, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92446, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92445, 18, (long long )(end - ptr));
    __CrestLoad(92444, (unsigned long )0, (long long )2L);
    __CrestApply2(92443, 16, (long long )(end - ptr < 2L));
# 845 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(92448, 60019, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92450, (unsigned long )0, (long long )6);
      __CrestStore(92451, (unsigned long )(& __retres37));
# 845 "xmltok_impl.c"
      __retres37 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92449, 60022, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 2;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(92456, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92455, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92454, 18, (long long )(end - ptr));
    __CrestLoad(92453, (unsigned long )0, (long long )3L);
    __CrestApply2(92452, 16, (long long )(end - ptr < 3L));
# 845 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(92457, 60026, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92459, (unsigned long )0, (long long )6);
      __CrestStore(92460, (unsigned long )(& __retres37));
# 845 "xmltok_impl.c"
      __retres37 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92458, 60029, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 3;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(92465, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92464, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92463, 18, (long long )(end - ptr));
    __CrestLoad(92462, (unsigned long )0, (long long )4L);
    __CrestApply2(92461, 16, (long long )(end - ptr < 4L));
# 845 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(92466, 60033, 1);
# 845 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92468, (unsigned long )0, (long long )6);
      __CrestStore(92469, (unsigned long )(& __retres37));
# 845 "xmltok_impl.c"
      __retres37 = 6;
# 845 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92467, 60036, 0);

    }
    }
# 845 "xmltok_impl.c"
    ptr += 4;
# 845 "xmltok_impl.c"
    goto switch_break___0;
    case_4___0:
    {
    __CrestLoad(92474, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(92473, (unsigned long )0, (long long )2);
    __CrestApply2(92472, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(92471, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(92470, 13, (long long )((unsigned long )(ptr + 2) != (unsigned long )end));
# 848 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) != (unsigned long )end) {
      __CrestBranch(92475, 60040, 1);
      {
# 849 "xmltok_impl.c"
      mem_33 = (ptr + 2) + 0;
      {
      __CrestLoad(92479, (unsigned long )mem_33, (long long )*mem_33);
      __CrestLoad(92478, (unsigned long )0, (long long )0);
      __CrestApply2(92477, 12, (long long )((int const )*mem_33 == 0));
# 849 "xmltok_impl.c"
      if ((int const )*mem_33 == 0) {
        __CrestBranch(92480, 60043, 1);
        {
# 849 "xmltok_impl.c"
        mem_34 = (ptr + 2) + 1;
        {
        __CrestLoad(92484, (unsigned long )mem_34, (long long )*mem_34);
        __CrestLoad(92483, (unsigned long )0, (long long )93);
        __CrestApply2(92482, 12, (long long )((int const )*mem_34 == 93));
# 849 "xmltok_impl.c"
        if ((int const )*mem_34 == 93) {
          __CrestBranch(92485, 60046, 1);

        } else {
          __CrestBranch(92486, 60047, 0);
# 850 "xmltok_impl.c"
          ptr += 2;
# 851 "xmltok_impl.c"
          goto switch_break___0;
        }
        }
        }
      } else {
        __CrestBranch(92481, 60049, 0);
# 850 "xmltok_impl.c"
        ptr += 2;
# 851 "xmltok_impl.c"
        goto switch_break___0;
      }
      }
      }
      {
      __CrestLoad(92491, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(92490, (unsigned long )0, (long long )4);
      __CrestApply2(92489, 18, (long long )((unsigned long )(ptr + 4)));
      __CrestLoad(92488, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(92487, 13, (long long )((unsigned long )(ptr + 4) != (unsigned long )end));
# 853 "xmltok_impl.c"
      if ((unsigned long )(ptr + 4) != (unsigned long )end) {
        __CrestBranch(92492, 60052, 1);
        {
# 854 "xmltok_impl.c"
        mem_35 = (ptr + 4) + 0;
        {
        __CrestLoad(92496, (unsigned long )mem_35, (long long )*mem_35);
        __CrestLoad(92495, (unsigned long )0, (long long )0);
        __CrestApply2(92494, 12, (long long )((int const )*mem_35 == 0));
# 854 "xmltok_impl.c"
        if ((int const )*mem_35 == 0) {
          __CrestBranch(92497, 60055, 1);
          {
# 854 "xmltok_impl.c"
          mem_36 = (ptr + 4) + 1;
          {
          __CrestLoad(92501, (unsigned long )mem_36, (long long )*mem_36);
          __CrestLoad(92500, (unsigned long )0, (long long )62);
          __CrestApply2(92499, 12, (long long )((int const )*mem_36 == 62));
# 854 "xmltok_impl.c"
          if ((int const )*mem_36 == 62) {
            __CrestBranch(92502, 60058, 1);

          } else {
            __CrestBranch(92503, 60059, 0);
# 855 "xmltok_impl.c"
            ptr += 2;
# 856 "xmltok_impl.c"
            goto switch_break___0;
          }
          }
          }
        } else {
          __CrestBranch(92498, 60061, 0);
# 855 "xmltok_impl.c"
          ptr += 2;
# 856 "xmltok_impl.c"
          goto switch_break___0;
        }
        }
        }
# 858 "xmltok_impl.c"
        *nextTokPtr = ptr + 4;
        __CrestLoad(92504, (unsigned long )0, (long long )0);
        __CrestStore(92505, (unsigned long )(& __retres37));
# 859 "xmltok_impl.c"
        __retres37 = 0;
# 859 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(92493, 60066, 0);

      }
      }
    } else {
      __CrestBranch(92476, 60067, 0);

    }
    }
    case_10___0:
    case_9___0:
    case_8___0:
    case_1___0:
    case_0___0:
    case_2___0:
    case_3___0:
# 870 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92506, (unsigned long )0, (long long )6);
    __CrestStore(92507, (unsigned long )(& __retres37));
# 871 "xmltok_impl.c"
    __retres37 = 6;
# 871 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 873 "xmltok_impl.c"
    ptr += 2;
# 874 "xmltok_impl.c"
    goto switch_break___0;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
# 877 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92508, (unsigned long )0, (long long )6);
  __CrestStore(92509, (unsigned long )(& __retres37));
# 878 "xmltok_impl.c"
  __retres37 = 6;
  return_label:
  {
  __CrestLoad(92510, (unsigned long )(& __retres37), (long long )__retres37);
  __CrestReturn(92511);
# 784 "xmltok_impl.c"
  return (__retres37);
  }
}
}
# 883 "xmltok_impl.c"
static int big2_scanPercent(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  int __retres25 ;

  {
  __CrestCall(92512, 914);

  {
  __CrestLoad(92515, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92514, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92513, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 887 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92516, 60079, 1);
    __CrestLoad(92518, (unsigned long )0, (long long )-1);
    __CrestStore(92519, (unsigned long )(& __retres25));
# 888 "xmltok_impl.c"
    __retres25 = -1;
# 888 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92517, 60081, 0);

  }
  }
  {
# 889 "xmltok_impl.c"
  mem_9 = ptr + 0;
  {
  __CrestLoad(92522, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(92521, (unsigned long )0, (long long )0);
  __CrestApply2(92520, 12, (long long )((int const )*mem_9 == 0));
# 889 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(92523, 60085, 1);
# 889 "xmltok_impl.c"
    mem_10 = ptr + 1;
# 889 "xmltok_impl.c"
    mem_11 = (struct normal_encoding *)enc;
    __CrestLoad(92525, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                (long long )mem_11->type[(unsigned char )*mem_10]);
    __CrestStore(92526, (unsigned long )(& tmp___0));
# 889 "xmltok_impl.c"
    tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
  } else {
    __CrestBranch(92524, 60086, 0);
# 889 "xmltok_impl.c"
    mem_12 = ptr + 0;
# 889 "xmltok_impl.c"
    mem_13 = ptr + 1;
    __CrestLoad(92527, (unsigned long )mem_12, (long long )*mem_12);
    __CrestLoad(92528, (unsigned long )mem_13, (long long )*mem_13);
# 889 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
    __CrestHandleReturn(92530, (long long )tmp);
    __CrestStore(92529, (unsigned long )(& tmp));
    __CrestLoad(92531, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(92532, (unsigned long )(& tmp___0));
# 889 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(92535, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92534, (unsigned long )0, (long long )29);
  __CrestApply2(92533, 12, (long long )(tmp___0 == 29));
# 890 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(92536, 60089, 1);
# 890 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(92537, 60090, 0);

  }
  }
  {
  __CrestLoad(92540, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92539, (unsigned long )0, (long long )24);
  __CrestApply2(92538, 12, (long long )(tmp___0 == 24));
# 890 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(92541, 60092, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(92542, 60093, 0);

  }
  }
  {
  __CrestLoad(92545, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92544, (unsigned long )0, (long long )22);
  __CrestApply2(92543, 12, (long long )(tmp___0 == 22));
# 890 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(92546, 60095, 1);
# 890 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(92547, 60096, 0);

  }
  }
  {
  __CrestLoad(92550, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92549, (unsigned long )0, (long long )5);
  __CrestApply2(92548, 12, (long long )(tmp___0 == 5));
# 890 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(92551, 60098, 1);
# 890 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(92552, 60099, 0);

  }
  }
  {
  __CrestLoad(92555, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92554, (unsigned long )0, (long long )6);
  __CrestApply2(92553, 12, (long long )(tmp___0 == 6));
# 890 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(92556, 60101, 1);
# 890 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(92557, 60102, 0);

  }
  }
  {
  __CrestLoad(92560, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92559, (unsigned long )0, (long long )7);
  __CrestApply2(92558, 12, (long long )(tmp___0 == 7));
# 890 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(92561, 60104, 1);
# 890 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(92562, 60105, 0);

  }
  }
  {
  __CrestLoad(92565, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92564, (unsigned long )0, (long long )30);
  __CrestApply2(92563, 12, (long long )(tmp___0 == 30));
# 891 "xmltok_impl.c"
  if (tmp___0 == 30) {
    __CrestBranch(92566, 60107, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(92567, 60108, 0);

  }
  }
  {
  __CrestLoad(92570, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92569, (unsigned long )0, (long long )9);
  __CrestApply2(92568, 12, (long long )(tmp___0 == 9));
# 891 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(92571, 60110, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(92572, 60111, 0);

  }
  }
  {
  __CrestLoad(92575, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92574, (unsigned long )0, (long long )10);
  __CrestApply2(92573, 12, (long long )(tmp___0 == 10));
# 891 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(92576, 60113, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(92577, 60114, 0);

  }
  }
  {
  __CrestLoad(92580, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92579, (unsigned long )0, (long long )21);
  __CrestApply2(92578, 12, (long long )(tmp___0 == 21));
# 891 "xmltok_impl.c"
  if (tmp___0 == 21) {
    __CrestBranch(92581, 60116, 1);
# 891 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(92582, 60117, 0);

  }
  }
# 894 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 890 "xmltok_impl.c"
  mem_14 = ptr + 0;
# 890 "xmltok_impl.c"
  mem_15 = ptr + 1;
# 890 "xmltok_impl.c"
  mem_16 = ptr + 1;
  {
  __CrestLoad(92591, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]);
  __CrestLoad(92590, (unsigned long )0, (long long )1);
  __CrestLoad(92589, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(92588, (unsigned long )0, (long long )31);
  __CrestApply2(92587, 5, (long long )((int )((unsigned char )*mem_16) & 31));
  __CrestApply2(92586, 8, (long long )(1 << ((int )((unsigned char )*mem_16) & 31)));
  __CrestApply2(92585, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))));
  __CrestLoad(92584, (unsigned long )0, (long long )0);
  __CrestApply2(92583, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0));
# 890 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0) {
    __CrestBranch(92592, 60122, 1);
# 890 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92594, (unsigned long )0, (long long )0);
    __CrestStore(92595, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = 0;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92593, 60125, 0);

  }
  }
  }
  case_24:
  case_22:
# 890 "xmltok_impl.c"
  ptr += 2;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(92600, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92599, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92598, 18, (long long )(end - ptr));
  __CrestLoad(92597, (unsigned long )0, (long long )2L);
  __CrestApply2(92596, 16, (long long )(end - ptr < 2L));
# 890 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(92601, 60129, 1);
    __CrestLoad(92603, (unsigned long )0, (long long )-2);
    __CrestStore(92604, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92602, 60131, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92605, (unsigned long )0, (long long )0);
  __CrestStore(92606, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
  __retres25 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 2;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(92611, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92610, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92609, 18, (long long )(end - ptr));
  __CrestLoad(92608, (unsigned long )0, (long long )3L);
  __CrestApply2(92607, 16, (long long )(end - ptr < 3L));
# 890 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(92612, 60138, 1);
    __CrestLoad(92614, (unsigned long )0, (long long )-2);
    __CrestStore(92615, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92613, 60140, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92616, (unsigned long )0, (long long )0);
  __CrestStore(92617, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
  __retres25 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 3;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(92622, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92621, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92620, 18, (long long )(end - ptr));
  __CrestLoad(92619, (unsigned long )0, (long long )4L);
  __CrestApply2(92618, 16, (long long )(end - ptr < 4L));
# 890 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(92623, 60147, 1);
    __CrestLoad(92625, (unsigned long )0, (long long )-2);
    __CrestStore(92626, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
    __retres25 = -2;
# 890 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92624, 60149, 0);

  }
  }
# 890 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92627, (unsigned long )0, (long long )0);
  __CrestStore(92628, (unsigned long )(& __retres25));
# 890 "xmltok_impl.c"
  __retres25 = 0;
# 890 "xmltok_impl.c"
  goto return_label;
# 890 "xmltok_impl.c"
  ptr += 4;
# 890 "xmltok_impl.c"
  goto switch_break;
  case_30:
  case_9:
  case_10:
  case_21:
# 892 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92629, (unsigned long )0, (long long )22);
  __CrestStore(92630, (unsigned long )(& __retres25));
# 893 "xmltok_impl.c"
  __retres25 = 22;
# 893 "xmltok_impl.c"
  goto return_label;
  switch_default:
# 895 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92631, (unsigned long )0, (long long )0);
  __CrestStore(92632, (unsigned long )(& __retres25));
# 896 "xmltok_impl.c"
  __retres25 = 0;
# 896 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 898 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(92635, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(92634, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(92633, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 898 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(92636, 60166, 1);

    } else {
      __CrestBranch(92637, 60167, 0);
# 898 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 899 "xmltok_impl.c"
    mem_17 = ptr + 0;
    {
    __CrestLoad(92640, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(92639, (unsigned long )0, (long long )0);
    __CrestApply2(92638, 12, (long long )((int const )*mem_17 == 0));
# 899 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(92641, 60171, 1);
# 899 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 899 "xmltok_impl.c"
      mem_19 = (struct normal_encoding *)enc;
      __CrestLoad(92643, (unsigned long )(& mem_19->type[(unsigned char )*mem_18]),
                  (long long )mem_19->type[(unsigned char )*mem_18]);
      __CrestStore(92644, (unsigned long )(& tmp___2));
# 899 "xmltok_impl.c"
      tmp___2 = (int )mem_19->type[(unsigned char )*mem_18];
    } else {
      __CrestBranch(92642, 60172, 0);
# 899 "xmltok_impl.c"
      mem_20 = ptr + 0;
# 899 "xmltok_impl.c"
      mem_21 = ptr + 1;
      __CrestLoad(92645, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(92646, (unsigned long )mem_21, (long long )*mem_21);
# 899 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_20, (char )*mem_21);
      __CrestHandleReturn(92648, (long long )tmp___1);
      __CrestStore(92647, (unsigned long )(& tmp___1));
      __CrestLoad(92649, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(92650, (unsigned long )(& tmp___2));
# 899 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(92653, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92652, (unsigned long )0, (long long )29);
    __CrestApply2(92651, 12, (long long )(tmp___2 == 29));
# 900 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(92654, 60175, 1);
# 900 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(92655, 60176, 0);

    }
    }
    {
    __CrestLoad(92658, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92657, (unsigned long )0, (long long )27);
    __CrestApply2(92656, 12, (long long )(tmp___2 == 27));
# 900 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(92659, 60178, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92660, 60179, 0);

    }
    }
    {
    __CrestLoad(92663, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92662, (unsigned long )0, (long long )26);
    __CrestApply2(92661, 12, (long long )(tmp___2 == 26));
# 900 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(92664, 60181, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92665, 60182, 0);

    }
    }
    {
    __CrestLoad(92668, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92667, (unsigned long )0, (long long )25);
    __CrestApply2(92666, 12, (long long )(tmp___2 == 25));
# 900 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(92669, 60184, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92670, 60185, 0);

    }
    }
    {
    __CrestLoad(92673, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92672, (unsigned long )0, (long long )24);
    __CrestApply2(92671, 12, (long long )(tmp___2 == 24));
# 900 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(92674, 60187, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92675, 60188, 0);

    }
    }
    {
    __CrestLoad(92678, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92677, (unsigned long )0, (long long )22);
    __CrestApply2(92676, 12, (long long )(tmp___2 == 22));
# 900 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(92679, 60190, 1);
# 900 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92680, 60191, 0);

    }
    }
    {
    __CrestLoad(92683, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92682, (unsigned long )0, (long long )5);
    __CrestApply2(92681, 12, (long long )(tmp___2 == 5));
# 900 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(92684, 60193, 1);
# 900 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(92685, 60194, 0);

    }
    }
    {
    __CrestLoad(92688, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92687, (unsigned long )0, (long long )6);
    __CrestApply2(92686, 12, (long long )(tmp___2 == 6));
# 900 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(92689, 60196, 1);
# 900 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(92690, 60197, 0);

    }
    }
    {
    __CrestLoad(92693, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92692, (unsigned long )0, (long long )7);
    __CrestApply2(92691, 12, (long long )(tmp___2 == 7));
# 900 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(92694, 60199, 1);
# 900 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(92695, 60200, 0);

    }
    }
    {
    __CrestLoad(92698, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92697, (unsigned long )0, (long long )18);
    __CrestApply2(92696, 12, (long long )(tmp___2 == 18));
# 901 "xmltok_impl.c"
    if (tmp___2 == 18) {
      __CrestBranch(92699, 60202, 1);
# 901 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(92700, 60203, 0);

    }
    }
# 904 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 900 "xmltok_impl.c"
    mem_22 = ptr + 0;
# 900 "xmltok_impl.c"
    mem_23 = ptr + 1;
# 900 "xmltok_impl.c"
    mem_24 = ptr + 1;
    {
    __CrestLoad(92709, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]);
    __CrestLoad(92708, (unsigned long )0, (long long )1);
    __CrestLoad(92707, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(92706, (unsigned long )0, (long long )31);
    __CrestApply2(92705, 5, (long long )((int )((unsigned char )*mem_24) & 31));
    __CrestApply2(92704, 8, (long long )(1 << ((int )((unsigned char )*mem_24) & 31)));
    __CrestApply2(92703, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))));
    __CrestLoad(92702, (unsigned long )0, (long long )0);
    __CrestApply2(92701, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0));
# 900 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0) {
      __CrestBranch(92710, 60208, 1);
# 900 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92712, (unsigned long )0, (long long )0);
      __CrestStore(92713, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = 0;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92711, 60211, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 900 "xmltok_impl.c"
    ptr += 2;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(92718, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92717, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92716, 18, (long long )(end - ptr));
    __CrestLoad(92715, (unsigned long )0, (long long )2L);
    __CrestApply2(92714, 16, (long long )(end - ptr < 2L));
# 900 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(92719, 60215, 1);
      __CrestLoad(92721, (unsigned long )0, (long long )-2);
      __CrestStore(92722, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92720, 60217, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92723, (unsigned long )0, (long long )0);
    __CrestStore(92724, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
    __retres25 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 2;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(92729, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92728, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92727, 18, (long long )(end - ptr));
    __CrestLoad(92726, (unsigned long )0, (long long )3L);
    __CrestApply2(92725, 16, (long long )(end - ptr < 3L));
# 900 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(92730, 60224, 1);
      __CrestLoad(92732, (unsigned long )0, (long long )-2);
      __CrestStore(92733, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92731, 60226, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92734, (unsigned long )0, (long long )0);
    __CrestStore(92735, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
    __retres25 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 3;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(92740, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92739, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92738, 18, (long long )(end - ptr));
    __CrestLoad(92737, (unsigned long )0, (long long )4L);
    __CrestApply2(92736, 16, (long long )(end - ptr < 4L));
# 900 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(92741, 60233, 1);
      __CrestLoad(92743, (unsigned long )0, (long long )-2);
      __CrestStore(92744, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
      __retres25 = -2;
# 900 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92742, 60235, 0);

    }
    }
# 900 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92745, (unsigned long )0, (long long )0);
    __CrestStore(92746, (unsigned long )(& __retres25));
# 900 "xmltok_impl.c"
    __retres25 = 0;
# 900 "xmltok_impl.c"
    goto return_label;
# 900 "xmltok_impl.c"
    ptr += 4;
# 900 "xmltok_impl.c"
    goto switch_break___0;
    case_18:
# 902 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(92747, (unsigned long )0, (long long )28);
    __CrestStore(92748, (unsigned long )(& __retres25));
# 903 "xmltok_impl.c"
    __retres25 = 28;
# 903 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 905 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92749, (unsigned long )0, (long long )0);
    __CrestStore(92750, (unsigned long )(& __retres25));
# 906 "xmltok_impl.c"
    __retres25 = 0;
# 906 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(92751, (unsigned long )0, (long long )-1);
  __CrestStore(92752, (unsigned long )(& __retres25));
# 909 "xmltok_impl.c"
  __retres25 = -1;
  return_label:
  {
  __CrestLoad(92753, (unsigned long )(& __retres25), (long long )__retres25);
  __CrestReturn(92754);
# 883 "xmltok_impl.c"
  return (__retres25);
  }
}
}
# 912 "xmltok_impl.c"
static int big2_scanPoundName(ENCODING const *enc , char const *ptr , char const *end ,
                              char const **nextTokPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  struct normal_encoding *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  int __retres25 ;

  {
  __CrestCall(92755, 915);

  {
  __CrestLoad(92758, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(92757, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(92756, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 916 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(92759, 60252, 1);
    __CrestLoad(92761, (unsigned long )0, (long long )-1);
    __CrestStore(92762, (unsigned long )(& __retres25));
# 917 "xmltok_impl.c"
    __retres25 = -1;
# 917 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92760, 60254, 0);

  }
  }
  {
# 918 "xmltok_impl.c"
  mem_9 = ptr + 0;
  {
  __CrestLoad(92765, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(92764, (unsigned long )0, (long long )0);
  __CrestApply2(92763, 12, (long long )((int const )*mem_9 == 0));
# 918 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(92766, 60258, 1);
# 918 "xmltok_impl.c"
    mem_10 = ptr + 1;
# 918 "xmltok_impl.c"
    mem_11 = (struct normal_encoding *)enc;
    __CrestLoad(92768, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                (long long )mem_11->type[(unsigned char )*mem_10]);
    __CrestStore(92769, (unsigned long )(& tmp___0));
# 918 "xmltok_impl.c"
    tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
  } else {
    __CrestBranch(92767, 60259, 0);
# 918 "xmltok_impl.c"
    mem_12 = ptr + 0;
# 918 "xmltok_impl.c"
    mem_13 = ptr + 1;
    __CrestLoad(92770, (unsigned long )mem_12, (long long )*mem_12);
    __CrestLoad(92771, (unsigned long )mem_13, (long long )*mem_13);
# 918 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
    __CrestHandleReturn(92773, (long long )tmp);
    __CrestStore(92772, (unsigned long )(& tmp));
    __CrestLoad(92774, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(92775, (unsigned long )(& tmp___0));
# 918 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(92778, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92777, (unsigned long )0, (long long )29);
  __CrestApply2(92776, 12, (long long )(tmp___0 == 29));
# 919 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(92779, 60262, 1);
# 919 "xmltok_impl.c"
    goto case_29;
  } else {
    __CrestBranch(92780, 60263, 0);

  }
  }
  {
  __CrestLoad(92783, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92782, (unsigned long )0, (long long )24);
  __CrestApply2(92781, 12, (long long )(tmp___0 == 24));
# 919 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(92784, 60265, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(92785, 60266, 0);

  }
  }
  {
  __CrestLoad(92788, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92787, (unsigned long )0, (long long )22);
  __CrestApply2(92786, 12, (long long )(tmp___0 == 22));
# 919 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(92789, 60268, 1);
# 919 "xmltok_impl.c"
    goto case_24;
  } else {
    __CrestBranch(92790, 60269, 0);

  }
  }
  {
  __CrestLoad(92793, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92792, (unsigned long )0, (long long )5);
  __CrestApply2(92791, 12, (long long )(tmp___0 == 5));
# 919 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(92794, 60271, 1);
# 919 "xmltok_impl.c"
    goto case_5;
  } else {
    __CrestBranch(92795, 60272, 0);

  }
  }
  {
  __CrestLoad(92798, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92797, (unsigned long )0, (long long )6);
  __CrestApply2(92796, 12, (long long )(tmp___0 == 6));
# 919 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(92799, 60274, 1);
# 919 "xmltok_impl.c"
    goto case_6;
  } else {
    __CrestBranch(92800, 60275, 0);

  }
  }
  {
  __CrestLoad(92803, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(92802, (unsigned long )0, (long long )7);
  __CrestApply2(92801, 12, (long long )(tmp___0 == 7));
# 919 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(92804, 60277, 1);
# 919 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(92805, 60278, 0);

  }
  }
# 920 "xmltok_impl.c"
  goto switch_default;
  case_29:
  {
# 919 "xmltok_impl.c"
  mem_14 = ptr + 0;
# 919 "xmltok_impl.c"
  mem_15 = ptr + 1;
# 919 "xmltok_impl.c"
  mem_16 = ptr + 1;
  {
  __CrestLoad(92814, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)]);
  __CrestLoad(92813, (unsigned long )0, (long long )1);
  __CrestLoad(92812, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(92811, (unsigned long )0, (long long )31);
  __CrestApply2(92810, 5, (long long )((int )((unsigned char )*mem_16) & 31));
  __CrestApply2(92809, 8, (long long )(1 << ((int )((unsigned char )*mem_16) & 31)));
  __CrestApply2(92808, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))));
  __CrestLoad(92807, (unsigned long )0, (long long )0);
  __CrestApply2(92806, 12, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0));
# 919 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_14] << 3) + (int const )((int )((unsigned char )*mem_15) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_16) & 31))) == 0) {
    __CrestBranch(92815, 60283, 1);
# 919 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92817, (unsigned long )0, (long long )0);
    __CrestStore(92818, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = 0;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92816, 60286, 0);

  }
  }
  }
  case_24:
  case_22:
# 919 "xmltok_impl.c"
  ptr += 2;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_5:
  {
  __CrestLoad(92823, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92822, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92821, 18, (long long )(end - ptr));
  __CrestLoad(92820, (unsigned long )0, (long long )2L);
  __CrestApply2(92819, 16, (long long )(end - ptr < 2L));
# 919 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(92824, 60290, 1);
    __CrestLoad(92826, (unsigned long )0, (long long )-2);
    __CrestStore(92827, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92825, 60292, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92828, (unsigned long )0, (long long )0);
  __CrestStore(92829, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
  __retres25 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 2;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_6:
  {
  __CrestLoad(92834, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92833, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92832, 18, (long long )(end - ptr));
  __CrestLoad(92831, (unsigned long )0, (long long )3L);
  __CrestApply2(92830, 16, (long long )(end - ptr < 3L));
# 919 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(92835, 60299, 1);
    __CrestLoad(92837, (unsigned long )0, (long long )-2);
    __CrestStore(92838, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92836, 60301, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92839, (unsigned long )0, (long long )0);
  __CrestStore(92840, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
  __retres25 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 3;
# 919 "xmltok_impl.c"
  goto switch_break;
  case_7:
  {
  __CrestLoad(92845, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(92844, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(92843, 18, (long long )(end - ptr));
  __CrestLoad(92842, (unsigned long )0, (long long )4L);
  __CrestApply2(92841, 16, (long long )(end - ptr < 4L));
# 919 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(92846, 60308, 1);
    __CrestLoad(92848, (unsigned long )0, (long long )-2);
    __CrestStore(92849, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
    __retres25 = -2;
# 919 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(92847, 60310, 0);

  }
  }
# 919 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92850, (unsigned long )0, (long long )0);
  __CrestStore(92851, (unsigned long )(& __retres25));
# 919 "xmltok_impl.c"
  __retres25 = 0;
# 919 "xmltok_impl.c"
  goto return_label;
# 919 "xmltok_impl.c"
  ptr += 4;
# 919 "xmltok_impl.c"
  goto switch_break;
  switch_default:
# 921 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(92852, (unsigned long )0, (long long )0);
  __CrestStore(92853, (unsigned long )(& __retres25));
# 922 "xmltok_impl.c"
  __retres25 = 0;
# 922 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 924 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(92856, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(92855, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(92854, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 924 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(92857, 60324, 1);

    } else {
      __CrestBranch(92858, 60325, 0);
# 924 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 925 "xmltok_impl.c"
    mem_17 = ptr + 0;
    {
    __CrestLoad(92861, (unsigned long )mem_17, (long long )*mem_17);
    __CrestLoad(92860, (unsigned long )0, (long long )0);
    __CrestApply2(92859, 12, (long long )((int const )*mem_17 == 0));
# 925 "xmltok_impl.c"
    if ((int const )*mem_17 == 0) {
      __CrestBranch(92862, 60329, 1);
# 925 "xmltok_impl.c"
      mem_18 = ptr + 1;
# 925 "xmltok_impl.c"
      mem_19 = (struct normal_encoding *)enc;
      __CrestLoad(92864, (unsigned long )(& mem_19->type[(unsigned char )*mem_18]),
                  (long long )mem_19->type[(unsigned char )*mem_18]);
      __CrestStore(92865, (unsigned long )(& tmp___2));
# 925 "xmltok_impl.c"
      tmp___2 = (int )mem_19->type[(unsigned char )*mem_18];
    } else {
      __CrestBranch(92863, 60330, 0);
# 925 "xmltok_impl.c"
      mem_20 = ptr + 0;
# 925 "xmltok_impl.c"
      mem_21 = ptr + 1;
      __CrestLoad(92866, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(92867, (unsigned long )mem_21, (long long )*mem_21);
# 925 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_20, (char )*mem_21);
      __CrestHandleReturn(92869, (long long )tmp___1);
      __CrestStore(92868, (unsigned long )(& tmp___1));
      __CrestLoad(92870, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(92871, (unsigned long )(& tmp___2));
# 925 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(92874, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92873, (unsigned long )0, (long long )29);
    __CrestApply2(92872, 12, (long long )(tmp___2 == 29));
# 926 "xmltok_impl.c"
    if (tmp___2 == 29) {
      __CrestBranch(92875, 60333, 1);
# 926 "xmltok_impl.c"
      goto case_29___0;
    } else {
      __CrestBranch(92876, 60334, 0);

    }
    }
    {
    __CrestLoad(92879, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92878, (unsigned long )0, (long long )27);
    __CrestApply2(92877, 12, (long long )(tmp___2 == 27));
# 926 "xmltok_impl.c"
    if (tmp___2 == 27) {
      __CrestBranch(92880, 60336, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92881, 60337, 0);

    }
    }
    {
    __CrestLoad(92884, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92883, (unsigned long )0, (long long )26);
    __CrestApply2(92882, 12, (long long )(tmp___2 == 26));
# 926 "xmltok_impl.c"
    if (tmp___2 == 26) {
      __CrestBranch(92885, 60339, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92886, 60340, 0);

    }
    }
    {
    __CrestLoad(92889, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92888, (unsigned long )0, (long long )25);
    __CrestApply2(92887, 12, (long long )(tmp___2 == 25));
# 926 "xmltok_impl.c"
    if (tmp___2 == 25) {
      __CrestBranch(92890, 60342, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92891, 60343, 0);

    }
    }
    {
    __CrestLoad(92894, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92893, (unsigned long )0, (long long )24);
    __CrestApply2(92892, 12, (long long )(tmp___2 == 24));
# 926 "xmltok_impl.c"
    if (tmp___2 == 24) {
      __CrestBranch(92895, 60345, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92896, 60346, 0);

    }
    }
    {
    __CrestLoad(92899, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92898, (unsigned long )0, (long long )22);
    __CrestApply2(92897, 12, (long long )(tmp___2 == 22));
# 926 "xmltok_impl.c"
    if (tmp___2 == 22) {
      __CrestBranch(92900, 60348, 1);
# 926 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(92901, 60349, 0);

    }
    }
    {
    __CrestLoad(92904, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92903, (unsigned long )0, (long long )5);
    __CrestApply2(92902, 12, (long long )(tmp___2 == 5));
# 926 "xmltok_impl.c"
    if (tmp___2 == 5) {
      __CrestBranch(92905, 60351, 1);
# 926 "xmltok_impl.c"
      goto case_5___0;
    } else {
      __CrestBranch(92906, 60352, 0);

    }
    }
    {
    __CrestLoad(92909, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92908, (unsigned long )0, (long long )6);
    __CrestApply2(92907, 12, (long long )(tmp___2 == 6));
# 926 "xmltok_impl.c"
    if (tmp___2 == 6) {
      __CrestBranch(92910, 60354, 1);
# 926 "xmltok_impl.c"
      goto case_6___0;
    } else {
      __CrestBranch(92911, 60355, 0);

    }
    }
    {
    __CrestLoad(92914, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92913, (unsigned long )0, (long long )7);
    __CrestApply2(92912, 12, (long long )(tmp___2 == 7));
# 926 "xmltok_impl.c"
    if (tmp___2 == 7) {
      __CrestBranch(92915, 60357, 1);
# 926 "xmltok_impl.c"
      goto case_7___0;
    } else {
      __CrestBranch(92916, 60358, 0);

    }
    }
    {
    __CrestLoad(92919, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92918, (unsigned long )0, (long long )36);
    __CrestApply2(92917, 12, (long long )(tmp___2 == 36));
# 928 "xmltok_impl.c"
    if (tmp___2 == 36) {
      __CrestBranch(92920, 60360, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92921, 60361, 0);

    }
    }
    {
    __CrestLoad(92924, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92923, (unsigned long )0, (long long )30);
    __CrestApply2(92922, 12, (long long )(tmp___2 == 30));
# 928 "xmltok_impl.c"
    if (tmp___2 == 30) {
      __CrestBranch(92925, 60363, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92926, 60364, 0);

    }
    }
    {
    __CrestLoad(92929, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92928, (unsigned long )0, (long long )11);
    __CrestApply2(92927, 12, (long long )(tmp___2 == 11));
# 928 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(92930, 60366, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92931, 60367, 0);

    }
    }
    {
    __CrestLoad(92934, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92933, (unsigned long )0, (long long )32);
    __CrestApply2(92932, 12, (long long )(tmp___2 == 32));
# 928 "xmltok_impl.c"
    if (tmp___2 == 32) {
      __CrestBranch(92935, 60369, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92936, 60370, 0);

    }
    }
    {
    __CrestLoad(92939, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92938, (unsigned long )0, (long long )21);
    __CrestApply2(92937, 12, (long long )(tmp___2 == 21));
# 928 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(92940, 60372, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92941, 60373, 0);

    }
    }
    {
    __CrestLoad(92944, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92943, (unsigned long )0, (long long )10);
    __CrestApply2(92942, 12, (long long )(tmp___2 == 10));
# 928 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(92945, 60375, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92946, 60376, 0);

    }
    }
    {
    __CrestLoad(92949, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(92948, (unsigned long )0, (long long )9);
    __CrestApply2(92947, 12, (long long )(tmp___2 == 9));
# 928 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(92950, 60378, 1);
# 928 "xmltok_impl.c"
      goto case_36;
    } else {
      __CrestBranch(92951, 60379, 0);

    }
    }
# 931 "xmltok_impl.c"
    goto switch_default___0;
    case_29___0:
    {
# 926 "xmltok_impl.c"
    mem_22 = ptr + 0;
# 926 "xmltok_impl.c"
    mem_23 = ptr + 1;
# 926 "xmltok_impl.c"
    mem_24 = ptr + 1;
    {
    __CrestLoad(92960, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)]);
    __CrestLoad(92959, (unsigned long )0, (long long )1);
    __CrestLoad(92958, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(92957, (unsigned long )0, (long long )31);
    __CrestApply2(92956, 5, (long long )((int )((unsigned char )*mem_24) & 31));
    __CrestApply2(92955, 8, (long long )(1 << ((int )((unsigned char )*mem_24) & 31)));
    __CrestApply2(92954, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))));
    __CrestLoad(92953, (unsigned long )0, (long long )0);
    __CrestApply2(92952, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0));
# 926 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_22] << 3) + (int const )((int )((unsigned char )*mem_23) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_24) & 31))) == 0) {
      __CrestBranch(92961, 60384, 1);
# 926 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(92963, (unsigned long )0, (long long )0);
      __CrestStore(92964, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = 0;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92962, 60387, 0);

    }
    }
    }
    case_27:
    case_26:
    case_25:
    case_24___0:
    case_22___0:
# 926 "xmltok_impl.c"
    ptr += 2;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_5___0:
    {
    __CrestLoad(92969, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92968, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92967, 18, (long long )(end - ptr));
    __CrestLoad(92966, (unsigned long )0, (long long )2L);
    __CrestApply2(92965, 16, (long long )(end - ptr < 2L));
# 926 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(92970, 60391, 1);
      __CrestLoad(92972, (unsigned long )0, (long long )-2);
      __CrestStore(92973, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92971, 60393, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92974, (unsigned long )0, (long long )0);
    __CrestStore(92975, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
    __retres25 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 2;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_6___0:
    {
    __CrestLoad(92980, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92979, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92978, 18, (long long )(end - ptr));
    __CrestLoad(92977, (unsigned long )0, (long long )3L);
    __CrestApply2(92976, 16, (long long )(end - ptr < 3L));
# 926 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(92981, 60400, 1);
      __CrestLoad(92983, (unsigned long )0, (long long )-2);
      __CrestStore(92984, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92982, 60402, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92985, (unsigned long )0, (long long )0);
    __CrestStore(92986, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
    __retres25 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 3;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_7___0:
    {
    __CrestLoad(92991, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(92990, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(92989, 18, (long long )(end - ptr));
    __CrestLoad(92988, (unsigned long )0, (long long )4L);
    __CrestApply2(92987, 16, (long long )(end - ptr < 4L));
# 926 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(92992, 60409, 1);
      __CrestLoad(92994, (unsigned long )0, (long long )-2);
      __CrestStore(92995, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
      __retres25 = -2;
# 926 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(92993, 60411, 0);

    }
    }
# 926 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92996, (unsigned long )0, (long long )0);
    __CrestStore(92997, (unsigned long )(& __retres25));
# 926 "xmltok_impl.c"
    __retres25 = 0;
# 926 "xmltok_impl.c"
    goto return_label;
# 926 "xmltok_impl.c"
    ptr += 4;
# 926 "xmltok_impl.c"
    goto switch_break___0;
    case_36:
    case_30:
    case_11:
    case_32:
    case_21:
    case_10:
    case_9:
# 929 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(92998, (unsigned long )0, (long long )20);
    __CrestStore(92999, (unsigned long )(& __retres25));
# 930 "xmltok_impl.c"
    __retres25 = 20;
# 930 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
# 932 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93000, (unsigned long )0, (long long )0);
    __CrestStore(93001, (unsigned long )(& __retres25));
# 933 "xmltok_impl.c"
    __retres25 = 0;
# 933 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(93002, (unsigned long )0, (long long )-20);
  __CrestStore(93003, (unsigned long )(& __retres25));
# 936 "xmltok_impl.c"
  __retres25 = -20;
  return_label:
  {
  __CrestLoad(93004, (unsigned long )(& __retres25), (long long )__retres25);
  __CrestReturn(93005);
# 912 "xmltok_impl.c"
  return (__retres25);
  }
}
}
# 939 "xmltok_impl.c"
static int big2_scanLit(int open , ENCODING const *enc , char const *ptr , char const *end ,
                        char const **nextTokPtr )
{
  int t ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_11 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  struct normal_encoding *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  int __retres21 ;

  {
  __CrestCall(93007, 916);
  __CrestStore(93006, (unsigned long )(& open));
  {
# 944 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(93010, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93009, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93008, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 944 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(93011, 60431, 1);

    } else {
      __CrestBranch(93012, 60432, 0);
# 944 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 945 "xmltok_impl.c"
    mem_11 = ptr + 0;
    {
    __CrestLoad(93015, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(93014, (unsigned long )0, (long long )0);
    __CrestApply2(93013, 12, (long long )((int const )*mem_11 == 0));
# 945 "xmltok_impl.c"
    if ((int const )*mem_11 == 0) {
      __CrestBranch(93016, 60436, 1);
# 945 "xmltok_impl.c"
      mem_12 = ptr + 1;
# 945 "xmltok_impl.c"
      mem_13 = (struct normal_encoding *)enc;
      __CrestLoad(93018, (unsigned long )(& mem_13->type[(unsigned char )*mem_12]),
                  (long long )mem_13->type[(unsigned char )*mem_12]);
      __CrestStore(93019, (unsigned long )(& tmp___0));
# 945 "xmltok_impl.c"
      tmp___0 = (int )mem_13->type[(unsigned char )*mem_12];
    } else {
      __CrestBranch(93017, 60437, 0);
# 945 "xmltok_impl.c"
      mem_14 = ptr + 0;
# 945 "xmltok_impl.c"
      mem_15 = ptr + 1;
      __CrestLoad(93020, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(93021, (unsigned long )mem_15, (long long )*mem_15);
# 945 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_14, (char )*mem_15);
      __CrestHandleReturn(93023, (long long )tmp);
      __CrestStore(93022, (unsigned long )(& tmp));
      __CrestLoad(93024, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(93025, (unsigned long )(& tmp___0));
# 945 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    __CrestLoad(93026, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestStore(93027, (unsigned long )(& t));
# 945 "xmltok_impl.c"
    t = tmp___0;
    {
    {
    __CrestLoad(93030, (unsigned long )(& t), (long long )t);
    __CrestLoad(93029, (unsigned long )0, (long long )5);
    __CrestApply2(93028, 12, (long long )(t == 5));
# 947 "xmltok_impl.c"
    if (t == 5) {
      __CrestBranch(93031, 60441, 1);
# 947 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(93032, 60442, 0);

    }
    }
    {
    __CrestLoad(93035, (unsigned long )(& t), (long long )t);
    __CrestLoad(93034, (unsigned long )0, (long long )6);
    __CrestApply2(93033, 12, (long long )(t == 6));
# 947 "xmltok_impl.c"
    if (t == 6) {
      __CrestBranch(93036, 60444, 1);
# 947 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(93037, 60445, 0);

    }
    }
    {
    __CrestLoad(93040, (unsigned long )(& t), (long long )t);
    __CrestLoad(93039, (unsigned long )0, (long long )7);
    __CrestApply2(93038, 12, (long long )(t == 7));
# 947 "xmltok_impl.c"
    if (t == 7) {
      __CrestBranch(93041, 60447, 1);
# 947 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(93042, 60448, 0);

    }
    }
    {
    __CrestLoad(93045, (unsigned long )(& t), (long long )t);
    __CrestLoad(93044, (unsigned long )0, (long long )8);
    __CrestApply2(93043, 12, (long long )(t == 8));
# 947 "xmltok_impl.c"
    if (t == 8) {
      __CrestBranch(93046, 60450, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(93047, 60451, 0);

    }
    }
    {
    __CrestLoad(93050, (unsigned long )(& t), (long long )t);
    __CrestLoad(93049, (unsigned long )0, (long long )1);
    __CrestApply2(93048, 12, (long long )(t == 1));
# 947 "xmltok_impl.c"
    if (t == 1) {
      __CrestBranch(93051, 60453, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(93052, 60454, 0);

    }
    }
    {
    __CrestLoad(93055, (unsigned long )(& t), (long long )t);
    __CrestLoad(93054, (unsigned long )0, (long long )0);
    __CrestApply2(93053, 12, (long long )(t == 0));
# 947 "xmltok_impl.c"
    if (t == 0) {
      __CrestBranch(93056, 60456, 1);
# 947 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(93057, 60457, 0);

    }
    }
    {
    __CrestLoad(93060, (unsigned long )(& t), (long long )t);
    __CrestLoad(93059, (unsigned long )0, (long long )13);
    __CrestApply2(93058, 12, (long long )(t == 13));
# 949 "xmltok_impl.c"
    if (t == 13) {
      __CrestBranch(93061, 60459, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(93062, 60460, 0);

    }
    }
    {
    __CrestLoad(93065, (unsigned long )(& t), (long long )t);
    __CrestLoad(93064, (unsigned long )0, (long long )12);
    __CrestApply2(93063, 12, (long long )(t == 12));
# 949 "xmltok_impl.c"
    if (t == 12) {
      __CrestBranch(93066, 60462, 1);
# 949 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(93067, 60463, 0);

    }
    }
# 963 "xmltok_impl.c"
    goto switch_default___0;
    case_5:
    {
    __CrestLoad(93072, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93071, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93070, 18, (long long )(end - ptr));
    __CrestLoad(93069, (unsigned long )0, (long long )2L);
    __CrestApply2(93068, 16, (long long )(end - ptr < 2L));
# 947 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(93073, 60466, 1);
      __CrestLoad(93075, (unsigned long )0, (long long )-2);
      __CrestStore(93076, (unsigned long )(& __retres21));
# 947 "xmltok_impl.c"
      __retres21 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93074, 60468, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 2;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(93081, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93080, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93079, 18, (long long )(end - ptr));
    __CrestLoad(93078, (unsigned long )0, (long long )3L);
    __CrestApply2(93077, 16, (long long )(end - ptr < 3L));
# 947 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(93082, 60472, 1);
      __CrestLoad(93084, (unsigned long )0, (long long )-2);
      __CrestStore(93085, (unsigned long )(& __retres21));
# 947 "xmltok_impl.c"
      __retres21 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93083, 60474, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 3;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(93090, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93089, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93088, 18, (long long )(end - ptr));
    __CrestLoad(93087, (unsigned long )0, (long long )4L);
    __CrestApply2(93086, 16, (long long )(end - ptr < 4L));
# 947 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(93091, 60478, 1);
      __CrestLoad(93093, (unsigned long )0, (long long )-2);
      __CrestStore(93094, (unsigned long )(& __retres21));
# 947 "xmltok_impl.c"
      __retres21 = -2;
# 947 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93092, 60480, 0);

    }
    }
# 947 "xmltok_impl.c"
    ptr += 4;
# 947 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 947 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93095, (unsigned long )0, (long long )0);
    __CrestStore(93096, (unsigned long )(& __retres21));
# 947 "xmltok_impl.c"
    __retres21 = 0;
# 947 "xmltok_impl.c"
    goto return_label;
    case_13:
    case_12:
# 950 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(93099, (unsigned long )(& t), (long long )t);
    __CrestLoad(93098, (unsigned long )(& open), (long long )open);
    __CrestApply2(93097, 13, (long long )(t != open));
# 951 "xmltok_impl.c"
    if (t != open) {
      __CrestBranch(93100, 60488, 1);
# 952 "xmltok_impl.c"
      goto switch_break;
    } else {
      __CrestBranch(93101, 60489, 0);

    }
    }
    {
    __CrestLoad(93104, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93103, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93102, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 953 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(93105, 60491, 1);
      __CrestLoad(93107, (unsigned long )0, (long long )-27);
      __CrestStore(93108, (unsigned long )(& __retres21));
# 954 "xmltok_impl.c"
      __retres21 = -27;
# 954 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93106, 60493, 0);

    }
    }
# 955 "xmltok_impl.c"
    *nextTokPtr = ptr;
    {
# 956 "xmltok_impl.c"
    mem_16 = ptr + 0;
    {
    __CrestLoad(93111, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(93110, (unsigned long )0, (long long )0);
    __CrestApply2(93109, 12, (long long )((int const )*mem_16 == 0));
# 956 "xmltok_impl.c"
    if ((int const )*mem_16 == 0) {
      __CrestBranch(93112, 60498, 1);
# 956 "xmltok_impl.c"
      mem_17 = ptr + 1;
# 956 "xmltok_impl.c"
      mem_18 = (struct normal_encoding *)enc;
      __CrestLoad(93114, (unsigned long )(& mem_18->type[(unsigned char )*mem_17]),
                  (long long )mem_18->type[(unsigned char )*mem_17]);
      __CrestStore(93115, (unsigned long )(& tmp___2));
# 956 "xmltok_impl.c"
      tmp___2 = (int )mem_18->type[(unsigned char )*mem_17];
    } else {
      __CrestBranch(93113, 60499, 0);
# 956 "xmltok_impl.c"
      mem_19 = ptr + 0;
# 956 "xmltok_impl.c"
      mem_20 = ptr + 1;
      __CrestLoad(93116, (unsigned long )mem_19, (long long )*mem_19);
      __CrestLoad(93117, (unsigned long )mem_20, (long long )*mem_20);
# 956 "xmltok_impl.c"
      tmp___1 = unicode_byte_type((char )*mem_19, (char )*mem_20);
      __CrestHandleReturn(93119, (long long )tmp___1);
      __CrestStore(93118, (unsigned long )(& tmp___1));
      __CrestLoad(93120, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(93121, (unsigned long )(& tmp___2));
# 956 "xmltok_impl.c"
      tmp___2 = tmp___1;
    }
    }
    }
    {
    {
    __CrestLoad(93124, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93123, (unsigned long )0, (long long )20);
    __CrestApply2(93122, 12, (long long )(tmp___2 == 20));
# 958 "xmltok_impl.c"
    if (tmp___2 == 20) {
      __CrestBranch(93125, 60502, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93126, 60503, 0);

    }
    }
    {
    __CrestLoad(93129, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93128, (unsigned long )0, (long long )30);
    __CrestApply2(93127, 12, (long long )(tmp___2 == 30));
# 958 "xmltok_impl.c"
    if (tmp___2 == 30) {
      __CrestBranch(93130, 60505, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93131, 60506, 0);

    }
    }
    {
    __CrestLoad(93134, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93133, (unsigned long )0, (long long )11);
    __CrestApply2(93132, 12, (long long )(tmp___2 == 11));
# 958 "xmltok_impl.c"
    if (tmp___2 == 11) {
      __CrestBranch(93135, 60508, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93136, 60509, 0);

    }
    }
    {
    __CrestLoad(93139, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93138, (unsigned long )0, (long long )10);
    __CrestApply2(93137, 12, (long long )(tmp___2 == 10));
# 958 "xmltok_impl.c"
    if (tmp___2 == 10) {
      __CrestBranch(93140, 60511, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93141, 60512, 0);

    }
    }
    {
    __CrestLoad(93144, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93143, (unsigned long )0, (long long )9);
    __CrestApply2(93142, 12, (long long )(tmp___2 == 9));
# 958 "xmltok_impl.c"
    if (tmp___2 == 9) {
      __CrestBranch(93145, 60514, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93146, 60515, 0);

    }
    }
    {
    __CrestLoad(93149, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(93148, (unsigned long )0, (long long )21);
    __CrestApply2(93147, 12, (long long )(tmp___2 == 21));
# 958 "xmltok_impl.c"
    if (tmp___2 == 21) {
      __CrestBranch(93150, 60517, 1);
# 958 "xmltok_impl.c"
      goto case_20;
    } else {
      __CrestBranch(93151, 60518, 0);

    }
    }
# 960 "xmltok_impl.c"
    goto switch_default;
    case_20:
    case_30:
    case_11:
    case_10:
    case_9:
    case_21:
    __CrestLoad(93152, (unsigned long )0, (long long )27);
    __CrestStore(93153, (unsigned long )(& __retres21));
# 959 "xmltok_impl.c"
    __retres21 = 27;
# 959 "xmltok_impl.c"
    goto return_label;
    switch_default:
    __CrestLoad(93154, (unsigned long )0, (long long )0);
    __CrestStore(93155, (unsigned long )(& __retres21));
# 961 "xmltok_impl.c"
    __retres21 = 0;
# 961 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    switch_default___0:
# 964 "xmltok_impl.c"
    ptr += 2;
# 965 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(93156, (unsigned long )0, (long long )-1);
  __CrestStore(93157, (unsigned long )(& __retres21));
# 968 "xmltok_impl.c"
  __retres21 = -1;
  return_label:
  {
  __CrestLoad(93158, (unsigned long )(& __retres21), (long long )__retres21);
  __CrestReturn(93159);
# 939 "xmltok_impl.c"
  return (__retres21);
  }
}
}
# 971 "xmltok_impl.c"
static int big2_prologTok(ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int tok ;
  size_t n ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  char const *mem_25 ;
  char const *mem_26 ;
  struct normal_encoding *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  char const *mem_31 ;
  struct normal_encoding *mem_32 ;
  char const *mem_33 ;
  char const *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  struct normal_encoding *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  char const *mem_40 ;
  char const *mem_41 ;
  char const *mem_42 ;
  char const *mem_43 ;
  char const *mem_44 ;
  char const *mem_45 ;
  struct normal_encoding *mem_46 ;
  char const *mem_47 ;
  char const *mem_48 ;
  char const *mem_49 ;
  char const *mem_50 ;
  char const *mem_51 ;
  char const *mem_52 ;
  char const *mem_53 ;
  char const *mem_54 ;
  char const *mem_55 ;
  char const *mem_56 ;
  struct normal_encoding *mem_57 ;
  char const *mem_58 ;
  char const *mem_59 ;
  char const *mem_60 ;
  char const *mem_61 ;
  char const *mem_62 ;
  char const *mem_63 ;
  char const *mem_64 ;
  struct normal_encoding *mem_65 ;
  char const *mem_66 ;
  char const *mem_67 ;
  char const *mem_68 ;
  char const *mem_69 ;
  char const *mem_70 ;
  int __retres71 ;

  {
  __CrestCall(93160, 917);

  {
  __CrestLoad(93163, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(93162, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(93161, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 976 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(93164, 60532, 1);
    __CrestLoad(93166, (unsigned long )0, (long long )-4);
    __CrestStore(93167, (unsigned long )(& __retres71));
# 977 "xmltok_impl.c"
    __retres71 = -4;
# 977 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93165, 60534, 0);

  }
  }
  __CrestLoad(93170, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(93169, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(93168, 18, (long long )(end - ptr));
  __CrestStore(93171, (unsigned long )(& n));
# 979 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(93176, (unsigned long )(& n), (long long )n);
  __CrestLoad(93175, (unsigned long )0, (long long )1UL);
  __CrestApply2(93174, 5, (long long )(n & 1UL));
  __CrestLoad(93173, (unsigned long )0, (long long )0);
  __CrestApply2(93172, 13, (long long )((n & 1UL) != 0));
# 980 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(93177, 60537, 1);
    __CrestLoad(93181, (unsigned long )(& n), (long long )n);
    __CrestLoad(93180, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(93179, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(93182, (unsigned long )(& n));
# 981 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
    {
    __CrestLoad(93185, (unsigned long )(& n), (long long )n);
    __CrestLoad(93184, (unsigned long )0, (long long )0UL);
    __CrestApply2(93183, 12, (long long )(n == 0UL));
# 982 "xmltok_impl.c"
    if (n == 0UL) {
      __CrestBranch(93186, 60539, 1);
      __CrestLoad(93188, (unsigned long )0, (long long )-1);
      __CrestStore(93189, (unsigned long )(& __retres71));
# 983 "xmltok_impl.c"
      __retres71 = -1;
# 983 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93187, 60541, 0);

    }
    }
# 984 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(93178, 60543, 0);

  }
  }
  {
# 987 "xmltok_impl.c"
  mem_25 = ptr + 0;
  {
  __CrestLoad(93192, (unsigned long )mem_25, (long long )*mem_25);
  __CrestLoad(93191, (unsigned long )0, (long long )0);
  __CrestApply2(93190, 12, (long long )((int const )*mem_25 == 0));
# 987 "xmltok_impl.c"
  if ((int const )*mem_25 == 0) {
    __CrestBranch(93193, 60547, 1);
# 987 "xmltok_impl.c"
    mem_26 = ptr + 1;
# 987 "xmltok_impl.c"
    mem_27 = (struct normal_encoding *)enc;
    __CrestLoad(93195, (unsigned long )(& mem_27->type[(unsigned char )*mem_26]),
                (long long )mem_27->type[(unsigned char )*mem_26]);
    __CrestStore(93196, (unsigned long )(& tmp___0));
# 987 "xmltok_impl.c"
    tmp___0 = (int )mem_27->type[(unsigned char )*mem_26];
  } else {
    __CrestBranch(93194, 60548, 0);
# 987 "xmltok_impl.c"
    mem_28 = ptr + 0;
# 987 "xmltok_impl.c"
    mem_29 = ptr + 1;
    __CrestLoad(93197, (unsigned long )mem_28, (long long )*mem_28);
    __CrestLoad(93198, (unsigned long )mem_29, (long long )*mem_29);
# 987 "xmltok_impl.c"
    tmp = unicode_byte_type((char )*mem_28, (char )*mem_29);
    __CrestHandleReturn(93200, (long long )tmp);
    __CrestStore(93199, (unsigned long )(& tmp));
    __CrestLoad(93201, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(93202, (unsigned long )(& tmp___0));
# 987 "xmltok_impl.c"
    tmp___0 = tmp;
  }
  }
  }
  {
  {
  __CrestLoad(93205, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93204, (unsigned long )0, (long long )12);
  __CrestApply2(93203, 12, (long long )(tmp___0 == 12));
# 988 "xmltok_impl.c"
  if (tmp___0 == 12) {
    __CrestBranch(93206, 60551, 1);
# 988 "xmltok_impl.c"
    goto case_12;
  } else {
    __CrestBranch(93207, 60552, 0);

  }
  }
  {
  __CrestLoad(93210, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93209, (unsigned long )0, (long long )13);
  __CrestApply2(93208, 12, (long long )(tmp___0 == 13));
# 990 "xmltok_impl.c"
  if (tmp___0 == 13) {
    __CrestBranch(93211, 60554, 1);
# 990 "xmltok_impl.c"
    goto case_13;
  } else {
    __CrestBranch(93212, 60555, 0);

  }
  }
  {
  __CrestLoad(93215, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93214, (unsigned long )0, (long long )2);
  __CrestApply2(93213, 12, (long long )(tmp___0 == 2));
# 992 "xmltok_impl.c"
  if (tmp___0 == 2) {
    __CrestBranch(93216, 60557, 1);
# 992 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(93217, 60558, 0);

  }
  }
  {
  __CrestLoad(93220, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93219, (unsigned long )0, (long long )9);
  __CrestApply2(93218, 12, (long long )(tmp___0 == 9));
# 1014 "xmltok_impl.c"
  if (tmp___0 == 9) {
    __CrestBranch(93221, 60560, 1);
# 1014 "xmltok_impl.c"
    goto case_9;
  } else {
    __CrestBranch(93222, 60561, 0);

  }
  }
  {
  __CrestLoad(93225, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93224, (unsigned long )0, (long long )10);
  __CrestApply2(93223, 12, (long long )(tmp___0 == 10));
# 1021 "xmltok_impl.c"
  if (tmp___0 == 10) {
    __CrestBranch(93226, 60563, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(93227, 60564, 0);

  }
  }
  {
  __CrestLoad(93230, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93229, (unsigned long )0, (long long )21);
  __CrestApply2(93228, 12, (long long )(tmp___0 == 21));
# 1021 "xmltok_impl.c"
  if (tmp___0 == 21) {
    __CrestBranch(93231, 60566, 1);
# 1021 "xmltok_impl.c"
    goto case_10;
  } else {
    __CrestBranch(93232, 60567, 0);

  }
  }
  {
  __CrestLoad(93235, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93234, (unsigned long )0, (long long )30);
  __CrestApply2(93233, 12, (long long )(tmp___0 == 30));
# 1041 "xmltok_impl.c"
  if (tmp___0 == 30) {
    __CrestBranch(93236, 60569, 1);
# 1041 "xmltok_impl.c"
    goto case_30;
  } else {
    __CrestBranch(93237, 60570, 0);

  }
  }
  {
  __CrestLoad(93240, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93239, (unsigned long )0, (long long )35);
  __CrestApply2(93238, 12, (long long )(tmp___0 == 35));
# 1043 "xmltok_impl.c"
  if (tmp___0 == 35) {
    __CrestBranch(93241, 60572, 1);
# 1043 "xmltok_impl.c"
    goto case_35;
  } else {
    __CrestBranch(93242, 60573, 0);

  }
  }
  {
  __CrestLoad(93245, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93244, (unsigned long )0, (long long )20);
  __CrestApply2(93243, 12, (long long )(tmp___0 == 20));
# 1046 "xmltok_impl.c"
  if (tmp___0 == 20) {
    __CrestBranch(93246, 60575, 1);
# 1046 "xmltok_impl.c"
    goto case_20;
  } else {
    __CrestBranch(93247, 60576, 0);

  }
  }
  {
  __CrestLoad(93250, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93249, (unsigned long )0, (long long )4);
  __CrestApply2(93248, 12, (long long )(tmp___0 == 4));
# 1049 "xmltok_impl.c"
  if (tmp___0 == 4) {
    __CrestBranch(93251, 60578, 1);
# 1049 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(93252, 60579, 0);

  }
  }
  {
  __CrestLoad(93255, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93254, (unsigned long )0, (long long )31);
  __CrestApply2(93253, 12, (long long )(tmp___0 == 31));
# 1063 "xmltok_impl.c"
  if (tmp___0 == 31) {
    __CrestBranch(93256, 60581, 1);
# 1063 "xmltok_impl.c"
    goto case_31;
  } else {
    __CrestBranch(93257, 60582, 0);

  }
  }
  {
  __CrestLoad(93260, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93259, (unsigned long )0, (long long )32);
  __CrestApply2(93258, 12, (long long )(tmp___0 == 32));
# 1066 "xmltok_impl.c"
  if (tmp___0 == 32) {
    __CrestBranch(93261, 60584, 1);
# 1066 "xmltok_impl.c"
    goto case_32;
  } else {
    __CrestBranch(93262, 60585, 0);

  }
  }
  {
  __CrestLoad(93265, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93264, (unsigned long )0, (long long )36);
  __CrestApply2(93263, 12, (long long )(tmp___0 == 36));
# 1088 "xmltok_impl.c"
  if (tmp___0 == 36) {
    __CrestBranch(93266, 60587, 1);
# 1088 "xmltok_impl.c"
    goto case_36___0;
  } else {
    __CrestBranch(93267, 60588, 0);

  }
  }
  {
  __CrestLoad(93270, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93269, (unsigned long )0, (long long )11);
  __CrestApply2(93268, 12, (long long )(tmp___0 == 11));
# 1091 "xmltok_impl.c"
  if (tmp___0 == 11) {
    __CrestBranch(93271, 60590, 1);
# 1091 "xmltok_impl.c"
    goto case_11___0;
  } else {
    __CrestBranch(93272, 60591, 0);

  }
  }
  {
  __CrestLoad(93275, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93274, (unsigned long )0, (long long )19);
  __CrestApply2(93273, 12, (long long )(tmp___0 == 19));
# 1094 "xmltok_impl.c"
  if (tmp___0 == 19) {
    __CrestBranch(93276, 60593, 1);
# 1094 "xmltok_impl.c"
    goto case_19;
  } else {
    __CrestBranch(93277, 60594, 0);

  }
  }
  {
  __CrestLoad(93280, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93279, (unsigned long )0, (long long )5);
  __CrestApply2(93278, 12, (long long )(tmp___0 == 5));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 5) {
    __CrestBranch(93281, 60596, 1);
# 1112 "xmltok_impl.c"
    goto case_5___0;
  } else {
    __CrestBranch(93282, 60597, 0);

  }
  }
  {
  __CrestLoad(93285, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93284, (unsigned long )0, (long long )6);
  __CrestApply2(93283, 12, (long long )(tmp___0 == 6));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 6) {
    __CrestBranch(93286, 60599, 1);
# 1112 "xmltok_impl.c"
    goto case_6___0;
  } else {
    __CrestBranch(93287, 60600, 0);

  }
  }
  {
  __CrestLoad(93290, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93289, (unsigned long )0, (long long )7);
  __CrestApply2(93288, 12, (long long )(tmp___0 == 7));
# 1112 "xmltok_impl.c"
  if (tmp___0 == 7) {
    __CrestBranch(93291, 60602, 1);
# 1112 "xmltok_impl.c"
    goto case_7___0;
  } else {
    __CrestBranch(93292, 60603, 0);

  }
  }
  {
  __CrestLoad(93295, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93294, (unsigned long )0, (long long )24);
  __CrestApply2(93293, 12, (long long )(tmp___0 == 24));
# 1115 "xmltok_impl.c"
  if (tmp___0 == 24) {
    __CrestBranch(93296, 60605, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(93297, 60606, 0);

  }
  }
  {
  __CrestLoad(93300, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93299, (unsigned long )0, (long long )22);
  __CrestApply2(93298, 12, (long long )(tmp___0 == 22));
# 1115 "xmltok_impl.c"
  if (tmp___0 == 22) {
    __CrestBranch(93301, 60608, 1);
# 1115 "xmltok_impl.c"
    goto case_24___0;
  } else {
    __CrestBranch(93302, 60609, 0);

  }
  }
  {
  __CrestLoad(93305, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93304, (unsigned long )0, (long long )23);
  __CrestApply2(93303, 12, (long long )(tmp___0 == 23));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 23) {
    __CrestBranch(93306, 60611, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(93307, 60612, 0);

  }
  }
  {
  __CrestLoad(93310, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93309, (unsigned long )0, (long long )27);
  __CrestApply2(93308, 12, (long long )(tmp___0 == 27));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 27) {
    __CrestBranch(93311, 60614, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(93312, 60615, 0);

  }
  }
  {
  __CrestLoad(93315, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93314, (unsigned long )0, (long long )26);
  __CrestApply2(93313, 12, (long long )(tmp___0 == 26));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 26) {
    __CrestBranch(93316, 60617, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(93317, 60618, 0);

  }
  }
  {
  __CrestLoad(93320, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93319, (unsigned long )0, (long long )25);
  __CrestApply2(93318, 12, (long long )(tmp___0 == 25));
# 1123 "xmltok_impl.c"
  if (tmp___0 == 25) {
    __CrestBranch(93321, 60620, 1);
# 1123 "xmltok_impl.c"
    goto case_23;
  } else {
    __CrestBranch(93322, 60621, 0);

  }
  }
  {
  __CrestLoad(93325, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(93324, (unsigned long )0, (long long )29);
  __CrestApply2(93323, 12, (long long )(tmp___0 == 29));
# 1128 "xmltok_impl.c"
  if (tmp___0 == 29) {
    __CrestBranch(93326, 60623, 1);
# 1128 "xmltok_impl.c"
    goto case_29___0;
  } else {
    __CrestBranch(93327, 60624, 0);

  }
  }
# 1140 "xmltok_impl.c"
  goto switch_default___0;
  case_12:
  __CrestLoad(93328, (unsigned long )0, (long long )12);
# 989 "xmltok_impl.c"
  tmp___1 = big2_scanLit(12, enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93330, (long long )tmp___1);
  __CrestStore(93329, (unsigned long )(& tmp___1));
  __CrestLoad(93331, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(93332, (unsigned long )(& __retres71));
# 989 "xmltok_impl.c"
  __retres71 = tmp___1;
# 989 "xmltok_impl.c"
  goto return_label;
  case_13:
  __CrestLoad(93333, (unsigned long )0, (long long )13);
# 991 "xmltok_impl.c"
  tmp___2 = big2_scanLit(13, enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93335, (long long )tmp___2);
  __CrestStore(93334, (unsigned long )(& tmp___2));
  __CrestLoad(93336, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(93337, (unsigned long )(& __retres71));
# 991 "xmltok_impl.c"
  __retres71 = tmp___2;
# 991 "xmltok_impl.c"
  goto return_label;
  case_2:
# 994 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(93340, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(93339, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(93338, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 995 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(93341, 60634, 1);
    __CrestLoad(93343, (unsigned long )0, (long long )-1);
    __CrestStore(93344, (unsigned long )(& __retres71));
# 996 "xmltok_impl.c"
    __retres71 = -1;
# 996 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93342, 60636, 0);

  }
  }
  {
# 997 "xmltok_impl.c"
  mem_30 = ptr + 0;
  {
  __CrestLoad(93347, (unsigned long )mem_30, (long long )*mem_30);
  __CrestLoad(93346, (unsigned long )0, (long long )0);
  __CrestApply2(93345, 12, (long long )((int const )*mem_30 == 0));
# 997 "xmltok_impl.c"
  if ((int const )*mem_30 == 0) {
    __CrestBranch(93348, 60640, 1);
# 997 "xmltok_impl.c"
    mem_31 = ptr + 1;
# 997 "xmltok_impl.c"
    mem_32 = (struct normal_encoding *)enc;
    __CrestLoad(93350, (unsigned long )(& mem_32->type[(unsigned char )*mem_31]),
                (long long )mem_32->type[(unsigned char )*mem_31]);
    __CrestStore(93351, (unsigned long )(& tmp___4));
# 997 "xmltok_impl.c"
    tmp___4 = (int )mem_32->type[(unsigned char )*mem_31];
  } else {
    __CrestBranch(93349, 60641, 0);
# 997 "xmltok_impl.c"
    mem_33 = ptr + 0;
# 997 "xmltok_impl.c"
    mem_34 = ptr + 1;
    __CrestLoad(93352, (unsigned long )mem_33, (long long )*mem_33);
    __CrestLoad(93353, (unsigned long )mem_34, (long long )*mem_34);
# 997 "xmltok_impl.c"
    tmp___3 = unicode_byte_type((char )*mem_33, (char )*mem_34);
    __CrestHandleReturn(93355, (long long )tmp___3);
    __CrestStore(93354, (unsigned long )(& tmp___3));
    __CrestLoad(93356, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestStore(93357, (unsigned long )(& tmp___4));
# 997 "xmltok_impl.c"
    tmp___4 = tmp___3;
  }
  }
  }
  {
  {
  __CrestLoad(93360, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93359, (unsigned long )0, (long long )16);
  __CrestApply2(93358, 12, (long long )(tmp___4 == 16));
# 998 "xmltok_impl.c"
  if (tmp___4 == 16) {
    __CrestBranch(93361, 60644, 1);
# 998 "xmltok_impl.c"
    goto case_16;
  } else {
    __CrestBranch(93362, 60645, 0);

  }
  }
  {
  __CrestLoad(93365, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93364, (unsigned long )0, (long long )15);
  __CrestApply2(93363, 12, (long long )(tmp___4 == 15));
# 1000 "xmltok_impl.c"
  if (tmp___4 == 15) {
    __CrestBranch(93366, 60647, 1);
# 1000 "xmltok_impl.c"
    goto case_15;
  } else {
    __CrestBranch(93367, 60648, 0);

  }
  }
  {
  __CrestLoad(93370, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93369, (unsigned long )0, (long long )7);
  __CrestApply2(93368, 12, (long long )(tmp___4 == 7));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 7) {
    __CrestBranch(93371, 60650, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93372, 60651, 0);

  }
  }
  {
  __CrestLoad(93375, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93374, (unsigned long )0, (long long )6);
  __CrestApply2(93373, 12, (long long )(tmp___4 == 6));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 6) {
    __CrestBranch(93376, 60653, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93377, 60654, 0);

  }
  }
  {
  __CrestLoad(93380, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93379, (unsigned long )0, (long long )5);
  __CrestApply2(93378, 12, (long long )(tmp___4 == 5));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 5) {
    __CrestBranch(93381, 60656, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93382, 60657, 0);

  }
  }
  {
  __CrestLoad(93385, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93384, (unsigned long )0, (long long )29);
  __CrestApply2(93383, 12, (long long )(tmp___4 == 29));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 29) {
    __CrestBranch(93386, 60659, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93387, 60660, 0);

  }
  }
  {
  __CrestLoad(93390, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93389, (unsigned long )0, (long long )24);
  __CrestApply2(93388, 12, (long long )(tmp___4 == 24));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 24) {
    __CrestBranch(93391, 60662, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93392, 60663, 0);

  }
  }
  {
  __CrestLoad(93395, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(93394, (unsigned long )0, (long long )22);
  __CrestApply2(93393, 12, (long long )(tmp___4 == 22));
# 1007 "xmltok_impl.c"
  if (tmp___4 == 22) {
    __CrestBranch(93396, 60665, 1);
# 1007 "xmltok_impl.c"
    goto case_7;
  } else {
    __CrestBranch(93397, 60666, 0);

  }
  }
# 997 "xmltok_impl.c"
  goto switch_break___0;
  case_16:
# 999 "xmltok_impl.c"
  tmp___5 = big2_scanDecl(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93399, (long long )tmp___5);
  __CrestStore(93398, (unsigned long )(& tmp___5));
  __CrestLoad(93400, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(93401, (unsigned long )(& __retres71));
# 999 "xmltok_impl.c"
  __retres71 = tmp___5;
# 999 "xmltok_impl.c"
  goto return_label;
  case_15:
# 1001 "xmltok_impl.c"
  tmp___6 = big2_scanPi(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93403, (long long )tmp___6);
  __CrestStore(93402, (unsigned long )(& tmp___6));
  __CrestLoad(93404, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(93405, (unsigned long )(& __retres71));
# 1001 "xmltok_impl.c"
  __retres71 = tmp___6;
# 1001 "xmltok_impl.c"
  goto return_label;
  case_7:
  case_6:
  case_5:
  case_29:
  case_24:
  case_22:
# 1008 "xmltok_impl.c"
  *nextTokPtr = ptr - 2;
  __CrestLoad(93406, (unsigned long )0, (long long )29);
  __CrestStore(93407, (unsigned long )(& __retres71));
# 1009 "xmltok_impl.c"
  __retres71 = 29;
# 1009 "xmltok_impl.c"
  goto return_label;
  switch_break___0: ;
  }
# 1011 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93408, (unsigned long )0, (long long )0);
  __CrestStore(93409, (unsigned long )(& __retres71));
# 1012 "xmltok_impl.c"
  __retres71 = 0;
# 1012 "xmltok_impl.c"
  goto return_label;
  case_9:
  {
  __CrestLoad(93414, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(93413, (unsigned long )0, (long long )2);
  __CrestApply2(93412, 18, (long long )((unsigned long )(ptr + 2)));
  __CrestLoad(93411, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(93410, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 1015 "xmltok_impl.c"
  if ((unsigned long )(ptr + 2) == (unsigned long )end) {
    __CrestBranch(93415, 60682, 1);
# 1016 "xmltok_impl.c"
    *nextTokPtr = end;
    __CrestLoad(93417, (unsigned long )0, (long long )-15);
    __CrestStore(93418, (unsigned long )(& __retres71));
# 1018 "xmltok_impl.c"
    __retres71 = -15;
# 1018 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93416, 60685, 0);

  }
  }
  case_10:
  case_21:
  {
# 1022 "xmltok_impl.c"
  while (1) {
    while_continue: ;
# 1023 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(93421, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93420, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93419, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1024 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(93422, 60691, 1);
# 1025 "xmltok_impl.c"
      goto while_break;
    } else {
      __CrestBranch(93423, 60692, 0);

    }
    }
    {
# 1026 "xmltok_impl.c"
    mem_35 = ptr + 0;
    {
    __CrestLoad(93426, (unsigned long )mem_35, (long long )*mem_35);
    __CrestLoad(93425, (unsigned long )0, (long long )0);
    __CrestApply2(93424, 12, (long long )((int const )*mem_35 == 0));
# 1026 "xmltok_impl.c"
    if ((int const )*mem_35 == 0) {
      __CrestBranch(93427, 60696, 1);
# 1026 "xmltok_impl.c"
      mem_36 = ptr + 1;
# 1026 "xmltok_impl.c"
      mem_37 = (struct normal_encoding *)enc;
      __CrestLoad(93429, (unsigned long )(& mem_37->type[(unsigned char )*mem_36]),
                  (long long )mem_37->type[(unsigned char )*mem_36]);
      __CrestStore(93430, (unsigned long )(& tmp___8));
# 1026 "xmltok_impl.c"
      tmp___8 = (int )mem_37->type[(unsigned char )*mem_36];
    } else {
      __CrestBranch(93428, 60697, 0);
# 1026 "xmltok_impl.c"
      mem_38 = ptr + 0;
# 1026 "xmltok_impl.c"
      mem_39 = ptr + 1;
      __CrestLoad(93431, (unsigned long )mem_38, (long long )*mem_38);
      __CrestLoad(93432, (unsigned long )mem_39, (long long )*mem_39);
# 1026 "xmltok_impl.c"
      tmp___7 = unicode_byte_type((char )*mem_38, (char )*mem_39);
      __CrestHandleReturn(93434, (long long )tmp___7);
      __CrestStore(93433, (unsigned long )(& tmp___7));
      __CrestLoad(93435, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestStore(93436, (unsigned long )(& tmp___8));
# 1026 "xmltok_impl.c"
      tmp___8 = tmp___7;
    }
    }
    }
    {
    {
    __CrestLoad(93439, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(93438, (unsigned long )0, (long long )10);
    __CrestApply2(93437, 12, (long long )(tmp___8 == 10));
# 1027 "xmltok_impl.c"
    if (tmp___8 == 10) {
      __CrestBranch(93440, 60700, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(93441, 60701, 0);

    }
    }
    {
    __CrestLoad(93444, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(93443, (unsigned long )0, (long long )21);
    __CrestApply2(93442, 12, (long long )(tmp___8 == 21));
# 1027 "xmltok_impl.c"
    if (tmp___8 == 21) {
      __CrestBranch(93445, 60703, 1);
# 1027 "xmltok_impl.c"
      goto case_10___0;
    } else {
      __CrestBranch(93446, 60704, 0);

    }
    }
    {
    __CrestLoad(93449, (unsigned long )(& tmp___8), (long long )tmp___8);
    __CrestLoad(93448, (unsigned long )0, (long long )9);
    __CrestApply2(93447, 12, (long long )(tmp___8 == 9));
# 1029 "xmltok_impl.c"
    if (tmp___8 == 9) {
      __CrestBranch(93450, 60706, 1);
# 1029 "xmltok_impl.c"
      goto case_9___0;
    } else {
      __CrestBranch(93451, 60707, 0);

    }
    }
# 1034 "xmltok_impl.c"
    goto switch_default;
    case_10___0:
    case_21___0:
# 1028 "xmltok_impl.c"
    goto switch_break___1;
    case_9___0:
    {
    __CrestLoad(93456, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93455, (unsigned long )0, (long long )2);
    __CrestApply2(93454, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(93453, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93452, 13, (long long )((unsigned long )(ptr + 2) != (unsigned long )end));
# 1031 "xmltok_impl.c"
    if ((unsigned long )(ptr + 2) != (unsigned long )end) {
      __CrestBranch(93457, 60711, 1);
# 1032 "xmltok_impl.c"
      goto switch_break___1;
    } else {
      __CrestBranch(93458, 60712, 0);

    }
    }
    switch_default:
# 1035 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93459, (unsigned long )0, (long long )15);
    __CrestStore(93460, (unsigned long )(& __retres71));
# 1036 "xmltok_impl.c"
    __retres71 = 15;
# 1036 "xmltok_impl.c"
    goto return_label;
    switch_break___1: ;
    }
  }
  while_break: ;
  }
# 1039 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93461, (unsigned long )0, (long long )15);
  __CrestStore(93462, (unsigned long )(& __retres71));
# 1040 "xmltok_impl.c"
  __retres71 = 15;
# 1040 "xmltok_impl.c"
  goto return_label;
  case_30:
# 1042 "xmltok_impl.c"
  tmp___9 = big2_scanPercent(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93464, (long long )tmp___9);
  __CrestStore(93463, (unsigned long )(& tmp___9));
  __CrestLoad(93465, (unsigned long )(& tmp___9), (long long )tmp___9);
  __CrestStore(93466, (unsigned long )(& __retres71));
# 1042 "xmltok_impl.c"
  __retres71 = tmp___9;
# 1042 "xmltok_impl.c"
  goto return_label;
  case_35:
# 1044 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93467, (unsigned long )0, (long long )38);
  __CrestStore(93468, (unsigned long )(& __retres71));
# 1045 "xmltok_impl.c"
  __retres71 = 38;
# 1045 "xmltok_impl.c"
  goto return_label;
  case_20:
# 1047 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93469, (unsigned long )0, (long long )25);
  __CrestStore(93470, (unsigned long )(& __retres71));
# 1048 "xmltok_impl.c"
  __retres71 = 25;
# 1048 "xmltok_impl.c"
  goto return_label;
  case_4:
# 1050 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(93473, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(93472, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(93471, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1051 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(93474, 60732, 1);
    __CrestLoad(93476, (unsigned long )0, (long long )-26);
    __CrestStore(93477, (unsigned long )(& __retres71));
# 1052 "xmltok_impl.c"
    __retres71 = -26;
# 1052 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93475, 60734, 0);

  }
  }
  {
# 1053 "xmltok_impl.c"
  mem_40 = ptr + 0;
  {
  __CrestLoad(93480, (unsigned long )mem_40, (long long )*mem_40);
  __CrestLoad(93479, (unsigned long )0, (long long )0);
  __CrestApply2(93478, 12, (long long )((int const )*mem_40 == 0));
# 1053 "xmltok_impl.c"
  if ((int const )*mem_40 == 0) {
    __CrestBranch(93481, 60738, 1);
    {
# 1053 "xmltok_impl.c"
    mem_41 = ptr + 1;
    {
    __CrestLoad(93485, (unsigned long )mem_41, (long long )*mem_41);
    __CrestLoad(93484, (unsigned long )0, (long long )93);
    __CrestApply2(93483, 12, (long long )((int const )*mem_41 == 93));
# 1053 "xmltok_impl.c"
    if ((int const )*mem_41 == 93) {
      __CrestBranch(93486, 60741, 1);
      {
      __CrestLoad(93492, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(93491, (unsigned long )0, (long long )2);
      __CrestApply2(93490, 18, (long long )((unsigned long )(ptr + 2)));
      __CrestLoad(93489, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(93488, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 1054 "xmltok_impl.c"
      if ((unsigned long )(ptr + 2) == (unsigned long )end) {
        __CrestBranch(93493, 60742, 1);
        __CrestLoad(93495, (unsigned long )0, (long long )-1);
        __CrestStore(93496, (unsigned long )(& __retres71));
# 1055 "xmltok_impl.c"
        __retres71 = -1;
# 1055 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(93494, 60744, 0);

      }
      }
      {
# 1056 "xmltok_impl.c"
      mem_42 = (ptr + 2) + 0;
      {
      __CrestLoad(93499, (unsigned long )mem_42, (long long )*mem_42);
      __CrestLoad(93498, (unsigned long )0, (long long )0);
      __CrestApply2(93497, 12, (long long )((int const )*mem_42 == 0));
# 1056 "xmltok_impl.c"
      if ((int const )*mem_42 == 0) {
        __CrestBranch(93500, 60748, 1);
        {
# 1056 "xmltok_impl.c"
        mem_43 = (ptr + 2) + 1;
        {
        __CrestLoad(93504, (unsigned long )mem_43, (long long )*mem_43);
        __CrestLoad(93503, (unsigned long )0, (long long )62);
        __CrestApply2(93502, 12, (long long )((int const )*mem_43 == 62));
# 1056 "xmltok_impl.c"
        if ((int const )*mem_43 == 62) {
          __CrestBranch(93505, 60751, 1);
# 1057 "xmltok_impl.c"
          *nextTokPtr = ptr + 4;
          __CrestLoad(93507, (unsigned long )0, (long long )34);
          __CrestStore(93508, (unsigned long )(& __retres71));
# 1058 "xmltok_impl.c"
          __retres71 = 34;
# 1058 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(93506, 60754, 0);

        }
        }
        }
      } else {
        __CrestBranch(93501, 60755, 0);

      }
      }
      }
    } else {
      __CrestBranch(93487, 60756, 0);

    }
    }
    }
  } else {
    __CrestBranch(93482, 60757, 0);

  }
  }
  }
# 1061 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93509, (unsigned long )0, (long long )26);
  __CrestStore(93510, (unsigned long )(& __retres71));
# 1062 "xmltok_impl.c"
  __retres71 = 26;
# 1062 "xmltok_impl.c"
  goto return_label;
  case_31:
# 1064 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93511, (unsigned long )0, (long long )23);
  __CrestStore(93512, (unsigned long )(& __retres71));
# 1065 "xmltok_impl.c"
  __retres71 = 23;
# 1065 "xmltok_impl.c"
  goto return_label;
  case_32:
# 1067 "xmltok_impl.c"
  ptr += 2;
  {
  __CrestLoad(93515, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(93514, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(93513, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1068 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(93516, 60766, 1);
    __CrestLoad(93518, (unsigned long )0, (long long )-24);
    __CrestStore(93519, (unsigned long )(& __retres71));
# 1069 "xmltok_impl.c"
    __retres71 = -24;
# 1069 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93517, 60768, 0);

  }
  }
  {
# 1070 "xmltok_impl.c"
  mem_44 = ptr + 0;
  {
  __CrestLoad(93522, (unsigned long )mem_44, (long long )*mem_44);
  __CrestLoad(93521, (unsigned long )0, (long long )0);
  __CrestApply2(93520, 12, (long long )((int const )*mem_44 == 0));
# 1070 "xmltok_impl.c"
  if ((int const )*mem_44 == 0) {
    __CrestBranch(93523, 60772, 1);
# 1070 "xmltok_impl.c"
    mem_45 = ptr + 1;
# 1070 "xmltok_impl.c"
    mem_46 = (struct normal_encoding *)enc;
    __CrestLoad(93525, (unsigned long )(& mem_46->type[(unsigned char )*mem_45]),
                (long long )mem_46->type[(unsigned char )*mem_45]);
    __CrestStore(93526, (unsigned long )(& tmp___11));
# 1070 "xmltok_impl.c"
    tmp___11 = (int )mem_46->type[(unsigned char )*mem_45];
  } else {
    __CrestBranch(93524, 60773, 0);
# 1070 "xmltok_impl.c"
    mem_47 = ptr + 0;
# 1070 "xmltok_impl.c"
    mem_48 = ptr + 1;
    __CrestLoad(93527, (unsigned long )mem_47, (long long )*mem_47);
    __CrestLoad(93528, (unsigned long )mem_48, (long long )*mem_48);
# 1070 "xmltok_impl.c"
    tmp___10 = unicode_byte_type((char )*mem_47, (char )*mem_48);
    __CrestHandleReturn(93530, (long long )tmp___10);
    __CrestStore(93529, (unsigned long )(& tmp___10));
    __CrestLoad(93531, (unsigned long )(& tmp___10), (long long )tmp___10);
    __CrestStore(93532, (unsigned long )(& tmp___11));
# 1070 "xmltok_impl.c"
    tmp___11 = tmp___10;
  }
  }
  }
  {
  {
  __CrestLoad(93535, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93534, (unsigned long )0, (long long )33);
  __CrestApply2(93533, 12, (long long )(tmp___11 == 33));
# 1071 "xmltok_impl.c"
  if (tmp___11 == 33) {
    __CrestBranch(93536, 60776, 1);
# 1071 "xmltok_impl.c"
    goto case_33;
  } else {
    __CrestBranch(93537, 60777, 0);

  }
  }
  {
  __CrestLoad(93540, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93539, (unsigned long )0, (long long )15);
  __CrestApply2(93538, 12, (long long )(tmp___11 == 15));
# 1074 "xmltok_impl.c"
  if (tmp___11 == 15) {
    __CrestBranch(93541, 60779, 1);
# 1074 "xmltok_impl.c"
    goto case_15___0;
  } else {
    __CrestBranch(93542, 60780, 0);

  }
  }
  {
  __CrestLoad(93545, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93544, (unsigned long )0, (long long )34);
  __CrestApply2(93543, 12, (long long )(tmp___11 == 34));
# 1077 "xmltok_impl.c"
  if (tmp___11 == 34) {
    __CrestBranch(93546, 60782, 1);
# 1077 "xmltok_impl.c"
    goto case_34;
  } else {
    __CrestBranch(93547, 60783, 0);

  }
  }
  {
  __CrestLoad(93550, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93549, (unsigned long )0, (long long )32);
  __CrestApply2(93548, 12, (long long )(tmp___11 == 32));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 32) {
    __CrestBranch(93551, 60785, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93552, 60786, 0);

  }
  }
  {
  __CrestLoad(93555, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93554, (unsigned long )0, (long long )36);
  __CrestApply2(93553, 12, (long long )(tmp___11 == 36));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 36) {
    __CrestBranch(93556, 60788, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93557, 60789, 0);

  }
  }
  {
  __CrestLoad(93560, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93559, (unsigned long )0, (long long )35);
  __CrestApply2(93558, 12, (long long )(tmp___11 == 35));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 35) {
    __CrestBranch(93561, 60791, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93562, 60792, 0);

  }
  }
  {
  __CrestLoad(93565, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93564, (unsigned long )0, (long long )11);
  __CrestApply2(93563, 12, (long long )(tmp___11 == 11));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 11) {
    __CrestBranch(93566, 60794, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93567, 60795, 0);

  }
  }
  {
  __CrestLoad(93570, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93569, (unsigned long )0, (long long )21);
  __CrestApply2(93568, 12, (long long )(tmp___11 == 21));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 21) {
    __CrestBranch(93571, 60797, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93572, 60798, 0);

  }
  }
  {
  __CrestLoad(93575, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93574, (unsigned long )0, (long long )10);
  __CrestApply2(93573, 12, (long long )(tmp___11 == 10));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 10) {
    __CrestBranch(93576, 60800, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93577, 60801, 0);

  }
  }
  {
  __CrestLoad(93580, (unsigned long )(& tmp___11), (long long )tmp___11);
  __CrestLoad(93579, (unsigned long )0, (long long )9);
  __CrestApply2(93578, 12, (long long )(tmp___11 == 9));
# 1082 "xmltok_impl.c"
  if (tmp___11 == 9) {
    __CrestBranch(93581, 60803, 1);
# 1082 "xmltok_impl.c"
    goto case_32___0;
  } else {
    __CrestBranch(93582, 60804, 0);

  }
  }
# 1070 "xmltok_impl.c"
  goto switch_break___2;
  case_33:
# 1072 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93583, (unsigned long )0, (long long )36);
  __CrestStore(93584, (unsigned long )(& __retres71));
# 1073 "xmltok_impl.c"
  __retres71 = 36;
# 1073 "xmltok_impl.c"
  goto return_label;
  case_15___0:
# 1075 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93585, (unsigned long )0, (long long )35);
  __CrestStore(93586, (unsigned long )(& __retres71));
# 1076 "xmltok_impl.c"
  __retres71 = 35;
# 1076 "xmltok_impl.c"
  goto return_label;
  case_34:
# 1078 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93587, (unsigned long )0, (long long )37);
  __CrestStore(93588, (unsigned long )(& __retres71));
# 1079 "xmltok_impl.c"
  __retres71 = 37;
# 1079 "xmltok_impl.c"
  goto return_label;
  case_32___0:
  case_36:
  case_35___0:
  case_11:
  case_21___1:
  case_10___1:
  case_9___1:
# 1083 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93589, (unsigned long )0, (long long )24);
  __CrestStore(93590, (unsigned long )(& __retres71));
# 1084 "xmltok_impl.c"
  __retres71 = 24;
# 1084 "xmltok_impl.c"
  goto return_label;
  switch_break___2: ;
  }
# 1086 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93591, (unsigned long )0, (long long )0);
  __CrestStore(93592, (unsigned long )(& __retres71));
# 1087 "xmltok_impl.c"
  __retres71 = 0;
# 1087 "xmltok_impl.c"
  goto return_label;
  case_36___0:
# 1089 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93593, (unsigned long )0, (long long )21);
  __CrestStore(93594, (unsigned long )(& __retres71));
# 1090 "xmltok_impl.c"
  __retres71 = 21;
# 1090 "xmltok_impl.c"
  goto return_label;
  case_11___0:
# 1092 "xmltok_impl.c"
  *nextTokPtr = ptr + 2;
  __CrestLoad(93595, (unsigned long )0, (long long )17);
  __CrestStore(93596, (unsigned long )(& __retres71));
# 1093 "xmltok_impl.c"
  __retres71 = 17;
# 1093 "xmltok_impl.c"
  goto return_label;
  case_19:
# 1095 "xmltok_impl.c"
  tmp___12 = big2_scanPoundName(enc, ptr + 2, end, nextTokPtr);
  __CrestHandleReturn(93598, (long long )tmp___12);
  __CrestStore(93597, (unsigned long )(& tmp___12));
  __CrestLoad(93599, (unsigned long )(& tmp___12), (long long )tmp___12);
  __CrestStore(93600, (unsigned long )(& __retres71));
# 1095 "xmltok_impl.c"
  __retres71 = tmp___12;
# 1095 "xmltok_impl.c"
  goto return_label;
  case_5___0:
  {
  __CrestLoad(93605, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(93604, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(93603, 18, (long long )(end - ptr));
  __CrestLoad(93602, (unsigned long )0, (long long )2L);
  __CrestApply2(93601, 16, (long long )(end - ptr < 2L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 2L) {
    __CrestBranch(93606, 60832, 1);
    __CrestLoad(93608, (unsigned long )0, (long long )-2);
    __CrestStore(93609, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
    __retres71 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93607, 60834, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93610, (unsigned long )0, (long long )0);
  __CrestStore(93611, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
  __retres71 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_6___0:
  {
  __CrestLoad(93616, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(93615, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(93614, 18, (long long )(end - ptr));
  __CrestLoad(93613, (unsigned long )0, (long long )3L);
  __CrestApply2(93612, 16, (long long )(end - ptr < 3L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 3L) {
    __CrestBranch(93617, 60839, 1);
    __CrestLoad(93619, (unsigned long )0, (long long )-2);
    __CrestStore(93620, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
    __retres71 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93618, 60841, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93621, (unsigned long )0, (long long )0);
  __CrestStore(93622, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
  __retres71 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_7___0:
  {
  __CrestLoad(93627, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(93626, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(93625, 18, (long long )(end - ptr));
  __CrestLoad(93624, (unsigned long )0, (long long )4L);
  __CrestApply2(93623, 16, (long long )(end - ptr < 4L));
# 1112 "xmltok_impl.c"
  if (end - ptr < 4L) {
    __CrestBranch(93628, 60846, 1);
    __CrestLoad(93630, (unsigned long )0, (long long )-2);
    __CrestStore(93631, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
    __retres71 = -2;
# 1112 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(93629, 60848, 0);

  }
  }
# 1112 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93632, (unsigned long )0, (long long )0);
  __CrestStore(93633, (unsigned long )(& __retres71));
# 1112 "xmltok_impl.c"
  __retres71 = 0;
# 1112 "xmltok_impl.c"
  goto return_label;
  case_24___0:
  case_22___0:
  __CrestLoad(93634, (unsigned long )0, (long long )18);
  __CrestStore(93635, (unsigned long )(& tok));
# 1116 "xmltok_impl.c"
  tok = 18;
# 1117 "xmltok_impl.c"
  ptr += 2;
# 1118 "xmltok_impl.c"
  goto switch_break;
  case_23:
  case_27:
  case_26:
  case_25:
  __CrestLoad(93636, (unsigned long )0, (long long )19);
  __CrestStore(93637, (unsigned long )(& tok));
# 1125 "xmltok_impl.c"
  tok = 19;
# 1126 "xmltok_impl.c"
  ptr += 2;
# 1127 "xmltok_impl.c"
  goto switch_break;
  case_29___0:
  {
# 1129 "xmltok_impl.c"
  mem_49 = ptr + 0;
# 1129 "xmltok_impl.c"
  mem_50 = ptr + 1;
# 1129 "xmltok_impl.c"
  mem_51 = ptr + 1;
  {
  __CrestLoad(93646, (unsigned long )(& namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_49] << 3) + (int const )((int )((unsigned char )*mem_50) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_49] << 3) + (int const )((int )((unsigned char )*mem_50) >> 5)]);
  __CrestLoad(93645, (unsigned long )0, (long long )1);
  __CrestLoad(93644, (unsigned long )mem_51, (long long )*mem_51);
  __CrestLoad(93643, (unsigned long )0, (long long )31);
  __CrestApply2(93642, 5, (long long )((int )((unsigned char )*mem_51) & 31));
  __CrestApply2(93641, 8, (long long )(1 << ((int )((unsigned char )*mem_51) & 31)));
  __CrestApply2(93640, 5, (long long )(namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_49] << 3) + (int const )((int )((unsigned char )*mem_50) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_51) & 31))));
  __CrestLoad(93639, (unsigned long )0, (long long )0);
  __CrestApply2(93638, 13, (long long )((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_49] << 3) + (int const )((int )((unsigned char )*mem_50) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_51) & 31))) != 0));
# 1129 "xmltok_impl.c"
  if ((namingBitmap[((int const )nmstrtPages[(unsigned char )*mem_49] << 3) + (int const )((int )((unsigned char )*mem_50) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_51) & 31))) != 0) {
    __CrestBranch(93647, 60859, 1);
# 1130 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(93649, (unsigned long )0, (long long )18);
    __CrestStore(93650, (unsigned long )(& tok));
# 1131 "xmltok_impl.c"
    tok = 18;
# 1132 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(93648, 60861, 0);

  }
  }
  }
  {
# 1134 "xmltok_impl.c"
  mem_52 = ptr + 0;
# 1134 "xmltok_impl.c"
  mem_53 = ptr + 1;
# 1134 "xmltok_impl.c"
  mem_54 = ptr + 1;
  {
  __CrestLoad(93659, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_52] << 3) + (int const )((int )((unsigned char )*mem_53) >> 5)]),
              (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_52] << 3) + (int const )((int )((unsigned char )*mem_53) >> 5)]);
  __CrestLoad(93658, (unsigned long )0, (long long )1);
  __CrestLoad(93657, (unsigned long )mem_54, (long long )*mem_54);
  __CrestLoad(93656, (unsigned long )0, (long long )31);
  __CrestApply2(93655, 5, (long long )((int )((unsigned char )*mem_54) & 31));
  __CrestApply2(93654, 8, (long long )(1 << ((int )((unsigned char )*mem_54) & 31)));
  __CrestApply2(93653, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_52] << 3) + (int const )((int )((unsigned char )*mem_53) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_54) & 31))));
  __CrestLoad(93652, (unsigned long )0, (long long )0);
  __CrestApply2(93651, 13, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_52] << 3) + (int const )((int )((unsigned char )*mem_53) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_54) & 31))) != 0));
# 1134 "xmltok_impl.c"
  if ((namingBitmap[((int const )namePages[(unsigned char )*mem_52] << 3) + (int const )((int )((unsigned char )*mem_53) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_54) & 31))) != 0) {
    __CrestBranch(93660, 60865, 1);
# 1135 "xmltok_impl.c"
    ptr += 2;
    __CrestLoad(93662, (unsigned long )0, (long long )19);
    __CrestStore(93663, (unsigned long )(& tok));
# 1136 "xmltok_impl.c"
    tok = 19;
# 1137 "xmltok_impl.c"
    goto switch_break;
  } else {
    __CrestBranch(93661, 60867, 0);

  }
  }
  }
  switch_default___0:
# 1141 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(93664, (unsigned long )0, (long long )0);
  __CrestStore(93665, (unsigned long )(& __retres71));
# 1142 "xmltok_impl.c"
  __retres71 = 0;
# 1142 "xmltok_impl.c"
  goto return_label;
  switch_break: ;
  }
  {
# 1144 "xmltok_impl.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(93668, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93667, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93666, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1144 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(93669, 60876, 1);

    } else {
      __CrestBranch(93670, 60877, 0);
# 1144 "xmltok_impl.c"
      goto while_break___0;
    }
    }
    {
# 1145 "xmltok_impl.c"
    mem_55 = ptr + 0;
    {
    __CrestLoad(93673, (unsigned long )mem_55, (long long )*mem_55);
    __CrestLoad(93672, (unsigned long )0, (long long )0);
    __CrestApply2(93671, 12, (long long )((int const )*mem_55 == 0));
# 1145 "xmltok_impl.c"
    if ((int const )*mem_55 == 0) {
      __CrestBranch(93674, 60881, 1);
# 1145 "xmltok_impl.c"
      mem_56 = ptr + 1;
# 1145 "xmltok_impl.c"
      mem_57 = (struct normal_encoding *)enc;
      __CrestLoad(93676, (unsigned long )(& mem_57->type[(unsigned char )*mem_56]),
                  (long long )mem_57->type[(unsigned char )*mem_56]);
      __CrestStore(93677, (unsigned long )(& tmp___14));
# 1145 "xmltok_impl.c"
      tmp___14 = (int )mem_57->type[(unsigned char )*mem_56];
    } else {
      __CrestBranch(93675, 60882, 0);
# 1145 "xmltok_impl.c"
      mem_58 = ptr + 0;
# 1145 "xmltok_impl.c"
      mem_59 = ptr + 1;
      __CrestLoad(93678, (unsigned long )mem_58, (long long )*mem_58);
      __CrestLoad(93679, (unsigned long )mem_59, (long long )*mem_59);
# 1145 "xmltok_impl.c"
      tmp___13 = unicode_byte_type((char )*mem_58, (char )*mem_59);
      __CrestHandleReturn(93681, (long long )tmp___13);
      __CrestStore(93680, (unsigned long )(& tmp___13));
      __CrestLoad(93682, (unsigned long )(& tmp___13), (long long )tmp___13);
      __CrestStore(93683, (unsigned long )(& tmp___14));
# 1145 "xmltok_impl.c"
      tmp___14 = tmp___13;
    }
    }
    }
    {
    {
    __CrestLoad(93686, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93685, (unsigned long )0, (long long )29);
    __CrestApply2(93684, 12, (long long )(tmp___14 == 29));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 29) {
      __CrestBranch(93687, 60885, 1);
# 1146 "xmltok_impl.c"
      goto case_29___1;
    } else {
      __CrestBranch(93688, 60886, 0);

    }
    }
    {
    __CrestLoad(93691, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93690, (unsigned long )0, (long long )27);
    __CrestApply2(93689, 12, (long long )(tmp___14 == 27));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 27) {
      __CrestBranch(93692, 60888, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(93693, 60889, 0);

    }
    }
    {
    __CrestLoad(93696, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93695, (unsigned long )0, (long long )26);
    __CrestApply2(93694, 12, (long long )(tmp___14 == 26));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 26) {
      __CrestBranch(93697, 60891, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(93698, 60892, 0);

    }
    }
    {
    __CrestLoad(93701, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93700, (unsigned long )0, (long long )25);
    __CrestApply2(93699, 12, (long long )(tmp___14 == 25));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 25) {
      __CrestBranch(93702, 60894, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(93703, 60895, 0);

    }
    }
    {
    __CrestLoad(93706, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93705, (unsigned long )0, (long long )24);
    __CrestApply2(93704, 12, (long long )(tmp___14 == 24));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 24) {
      __CrestBranch(93707, 60897, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(93708, 60898, 0);

    }
    }
    {
    __CrestLoad(93711, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93710, (unsigned long )0, (long long )22);
    __CrestApply2(93709, 12, (long long )(tmp___14 == 22));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 22) {
      __CrestBranch(93712, 60900, 1);
# 1146 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(93713, 60901, 0);

    }
    }
    {
    __CrestLoad(93716, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93715, (unsigned long )0, (long long )5);
    __CrestApply2(93714, 12, (long long )(tmp___14 == 5));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 5) {
      __CrestBranch(93717, 60903, 1);
# 1146 "xmltok_impl.c"
      goto case_5___1;
    } else {
      __CrestBranch(93718, 60904, 0);

    }
    }
    {
    __CrestLoad(93721, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93720, (unsigned long )0, (long long )6);
    __CrestApply2(93719, 12, (long long )(tmp___14 == 6));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 6) {
      __CrestBranch(93722, 60906, 1);
# 1146 "xmltok_impl.c"
      goto case_6___1;
    } else {
      __CrestBranch(93723, 60907, 0);

    }
    }
    {
    __CrestLoad(93726, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93725, (unsigned long )0, (long long )7);
    __CrestApply2(93724, 12, (long long )(tmp___14 == 7));
# 1146 "xmltok_impl.c"
    if (tmp___14 == 7) {
      __CrestBranch(93727, 60909, 1);
# 1146 "xmltok_impl.c"
      goto case_7___1;
    } else {
      __CrestBranch(93728, 60910, 0);

    }
    }
    {
    __CrestLoad(93731, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93730, (unsigned long )0, (long long )10);
    __CrestApply2(93729, 12, (long long )(tmp___14 == 10));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 10) {
      __CrestBranch(93732, 60912, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93733, 60913, 0);

    }
    }
    {
    __CrestLoad(93736, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93735, (unsigned long )0, (long long )9);
    __CrestApply2(93734, 12, (long long )(tmp___14 == 9));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 9) {
      __CrestBranch(93737, 60915, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93738, 60916, 0);

    }
    }
    {
    __CrestLoad(93741, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93740, (unsigned long )0, (long long )21);
    __CrestApply2(93739, 12, (long long )(tmp___14 == 21));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 21) {
      __CrestBranch(93742, 60918, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93743, 60919, 0);

    }
    }
    {
    __CrestLoad(93746, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93745, (unsigned long )0, (long long )30);
    __CrestApply2(93744, 12, (long long )(tmp___14 == 30));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 30) {
      __CrestBranch(93747, 60921, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93748, 60922, 0);

    }
    }
    {
    __CrestLoad(93751, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93750, (unsigned long )0, (long long )20);
    __CrestApply2(93749, 12, (long long )(tmp___14 == 20));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 20) {
      __CrestBranch(93752, 60924, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93753, 60925, 0);

    }
    }
    {
    __CrestLoad(93756, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93755, (unsigned long )0, (long long )36);
    __CrestApply2(93754, 12, (long long )(tmp___14 == 36));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 36) {
      __CrestBranch(93757, 60927, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93758, 60928, 0);

    }
    }
    {
    __CrestLoad(93761, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93760, (unsigned long )0, (long long )35);
    __CrestApply2(93759, 12, (long long )(tmp___14 == 35));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 35) {
      __CrestBranch(93762, 60930, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93763, 60931, 0);

    }
    }
    {
    __CrestLoad(93766, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93765, (unsigned long )0, (long long )32);
    __CrestApply2(93764, 12, (long long )(tmp___14 == 32));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 32) {
      __CrestBranch(93767, 60933, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93768, 60934, 0);

    }
    }
    {
    __CrestLoad(93771, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93770, (unsigned long )0, (long long )11);
    __CrestApply2(93769, 12, (long long )(tmp___14 == 11));
# 1149 "xmltok_impl.c"
    if (tmp___14 == 11) {
      __CrestBranch(93772, 60936, 1);
# 1149 "xmltok_impl.c"
      goto case_10___2;
    } else {
      __CrestBranch(93773, 60937, 0);

    }
    }
    {
    __CrestLoad(93776, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93775, (unsigned long )0, (long long )23);
    __CrestApply2(93774, 12, (long long )(tmp___14 == 23));
# 1153 "xmltok_impl.c"
    if (tmp___14 == 23) {
      __CrestBranch(93777, 60939, 1);
# 1153 "xmltok_impl.c"
      goto case_23___0;
    } else {
      __CrestBranch(93778, 60940, 0);

    }
    }
    {
    __CrestLoad(93781, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93780, (unsigned long )0, (long long )34);
    __CrestApply2(93779, 12, (long long )(tmp___14 == 34));
# 1173 "xmltok_impl.c"
    if (tmp___14 == 34) {
      __CrestBranch(93782, 60942, 1);
# 1173 "xmltok_impl.c"
      goto case_34___0;
    } else {
      __CrestBranch(93783, 60943, 0);

    }
    }
    {
    __CrestLoad(93786, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93785, (unsigned long )0, (long long )33);
    __CrestApply2(93784, 12, (long long )(tmp___14 == 33));
# 1180 "xmltok_impl.c"
    if (tmp___14 == 33) {
      __CrestBranch(93787, 60945, 1);
# 1180 "xmltok_impl.c"
      goto case_33___0;
    } else {
      __CrestBranch(93788, 60946, 0);

    }
    }
    {
    __CrestLoad(93791, (unsigned long )(& tmp___14), (long long )tmp___14);
    __CrestLoad(93790, (unsigned long )0, (long long )15);
    __CrestApply2(93789, 12, (long long )(tmp___14 == 15));
# 1187 "xmltok_impl.c"
    if (tmp___14 == 15) {
      __CrestBranch(93792, 60948, 1);
# 1187 "xmltok_impl.c"
      goto case_15___1;
    } else {
      __CrestBranch(93793, 60949, 0);

    }
    }
# 1194 "xmltok_impl.c"
    goto switch_default___2;
    case_29___1:
    {
# 1146 "xmltok_impl.c"
    mem_60 = ptr + 0;
# 1146 "xmltok_impl.c"
    mem_61 = ptr + 1;
# 1146 "xmltok_impl.c"
    mem_62 = ptr + 1;
    {
    __CrestLoad(93802, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_60] << 3) + (int const )((int )((unsigned char )*mem_61) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_60] << 3) + (int const )((int )((unsigned char )*mem_61) >> 5)]);
    __CrestLoad(93801, (unsigned long )0, (long long )1);
    __CrestLoad(93800, (unsigned long )mem_62, (long long )*mem_62);
    __CrestLoad(93799, (unsigned long )0, (long long )31);
    __CrestApply2(93798, 5, (long long )((int )((unsigned char )*mem_62) & 31));
    __CrestApply2(93797, 8, (long long )(1 << ((int )((unsigned char )*mem_62) & 31)));
    __CrestApply2(93796, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_60] << 3) + (int const )((int )((unsigned char )*mem_61) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_62) & 31))));
    __CrestLoad(93795, (unsigned long )0, (long long )0);
    __CrestApply2(93794, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_60] << 3) + (int const )((int )((unsigned char )*mem_61) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_62) & 31))) == 0));
# 1146 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_60] << 3) + (int const )((int )((unsigned char )*mem_61) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_62) & 31))) == 0) {
      __CrestBranch(93803, 60954, 1);
# 1146 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(93805, (unsigned long )0, (long long )0);
      __CrestStore(93806, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
      __retres71 = 0;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93804, 60957, 0);

    }
    }
    }
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___1:
    case_22___1:
# 1146 "xmltok_impl.c"
    ptr += 2;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_5___1:
    {
    __CrestLoad(93811, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93810, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93809, 18, (long long )(end - ptr));
    __CrestLoad(93808, (unsigned long )0, (long long )2L);
    __CrestApply2(93807, 16, (long long )(end - ptr < 2L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(93812, 60961, 1);
      __CrestLoad(93814, (unsigned long )0, (long long )-2);
      __CrestStore(93815, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
      __retres71 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93813, 60963, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93816, (unsigned long )0, (long long )0);
    __CrestStore(93817, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
    __retres71 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 2;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_6___1:
    {
    __CrestLoad(93822, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93821, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93820, 18, (long long )(end - ptr));
    __CrestLoad(93819, (unsigned long )0, (long long )3L);
    __CrestApply2(93818, 16, (long long )(end - ptr < 3L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(93823, 60970, 1);
      __CrestLoad(93825, (unsigned long )0, (long long )-2);
      __CrestStore(93826, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
      __retres71 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93824, 60972, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93827, (unsigned long )0, (long long )0);
    __CrestStore(93828, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
    __retres71 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 3;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_7___1:
    {
    __CrestLoad(93833, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93832, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93831, 18, (long long )(end - ptr));
    __CrestLoad(93830, (unsigned long )0, (long long )4L);
    __CrestApply2(93829, 16, (long long )(end - ptr < 4L));
# 1146 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(93834, 60979, 1);
      __CrestLoad(93836, (unsigned long )0, (long long )-2);
      __CrestStore(93837, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
      __retres71 = -2;
# 1146 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93835, 60981, 0);

    }
    }
# 1146 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93838, (unsigned long )0, (long long )0);
    __CrestStore(93839, (unsigned long )(& __retres71));
# 1146 "xmltok_impl.c"
    __retres71 = 0;
# 1146 "xmltok_impl.c"
    goto return_label;
# 1146 "xmltok_impl.c"
    ptr += 4;
# 1146 "xmltok_impl.c"
    goto switch_break___3;
    case_10___2:
    case_9___2:
    case_21___2:
    case_30___0:
    case_20___0:
    case_36___1:
    case_35___1:
    case_32___1:
    case_11___1:
# 1150 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93840, (unsigned long )(& tok), (long long )tok);
    __CrestStore(93841, (unsigned long )(& __retres71));
# 1151 "xmltok_impl.c"
    __retres71 = tok;
# 1151 "xmltok_impl.c"
    goto return_label;
    case_23___0:
# 1154 "xmltok_impl.c"
    ptr += 2;
    {
    {
    __CrestLoad(93844, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(93843, (unsigned long )0, (long long )18);
    __CrestApply2(93842, 12, (long long )(tok == 18));
# 1156 "xmltok_impl.c"
    if (tok == 18) {
      __CrestBranch(93845, 60993, 1);
# 1156 "xmltok_impl.c"
      goto case_18;
    } else {
      __CrestBranch(93846, 60994, 0);

    }
    }
    {
    __CrestLoad(93849, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(93848, (unsigned long )0, (long long )41);
    __CrestApply2(93847, 12, (long long )(tok == 41));
# 1167 "xmltok_impl.c"
    if (tok == 41) {
      __CrestBranch(93850, 60996, 1);
# 1167 "xmltok_impl.c"
      goto case_41;
    } else {
      __CrestBranch(93851, 60997, 0);

    }
    }
# 1155 "xmltok_impl.c"
    goto switch_break___4;
    case_18:
    {
    __CrestLoad(93854, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(93853, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(93852, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1157 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(93855, 61000, 1);
      __CrestLoad(93857, (unsigned long )0, (long long )-1);
      __CrestStore(93858, (unsigned long )(& __retres71));
# 1158 "xmltok_impl.c"
      __retres71 = -1;
# 1158 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93856, 61002, 0);

    }
    }
    __CrestLoad(93859, (unsigned long )0, (long long )41);
    __CrestStore(93860, (unsigned long )(& tok));
# 1159 "xmltok_impl.c"
    tok = 41;
    {
# 1160 "xmltok_impl.c"
    mem_63 = ptr + 0;
    {
    __CrestLoad(93863, (unsigned long )mem_63, (long long )*mem_63);
    __CrestLoad(93862, (unsigned long )0, (long long )0);
    __CrestApply2(93861, 12, (long long )((int const )*mem_63 == 0));
# 1160 "xmltok_impl.c"
    if ((int const )*mem_63 == 0) {
      __CrestBranch(93864, 61007, 1);
# 1160 "xmltok_impl.c"
      mem_64 = ptr + 1;
# 1160 "xmltok_impl.c"
      mem_65 = (struct normal_encoding *)enc;
      __CrestLoad(93866, (unsigned long )(& mem_65->type[(unsigned char )*mem_64]),
                  (long long )mem_65->type[(unsigned char )*mem_64]);
      __CrestStore(93867, (unsigned long )(& tmp___16));
# 1160 "xmltok_impl.c"
      tmp___16 = (int )mem_65->type[(unsigned char )*mem_64];
    } else {
      __CrestBranch(93865, 61008, 0);
# 1160 "xmltok_impl.c"
      mem_66 = ptr + 0;
# 1160 "xmltok_impl.c"
      mem_67 = ptr + 1;
      __CrestLoad(93868, (unsigned long )mem_66, (long long )*mem_66);
      __CrestLoad(93869, (unsigned long )mem_67, (long long )*mem_67);
# 1160 "xmltok_impl.c"
      tmp___15 = unicode_byte_type((char )*mem_66, (char )*mem_67);
      __CrestHandleReturn(93871, (long long )tmp___15);
      __CrestStore(93870, (unsigned long )(& tmp___15));
      __CrestLoad(93872, (unsigned long )(& tmp___15), (long long )tmp___15);
      __CrestStore(93873, (unsigned long )(& tmp___16));
# 1160 "xmltok_impl.c"
      tmp___16 = tmp___15;
    }
    }
    }
    {
    {
    __CrestLoad(93876, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93875, (unsigned long )0, (long long )29);
    __CrestApply2(93874, 12, (long long )(tmp___16 == 29));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 29) {
      __CrestBranch(93877, 61011, 1);
# 1161 "xmltok_impl.c"
      goto case_29___2;
    } else {
      __CrestBranch(93878, 61012, 0);

    }
    }
    {
    __CrestLoad(93881, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93880, (unsigned long )0, (long long )27);
    __CrestApply2(93879, 12, (long long )(tmp___16 == 27));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 27) {
      __CrestBranch(93882, 61014, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(93883, 61015, 0);

    }
    }
    {
    __CrestLoad(93886, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93885, (unsigned long )0, (long long )26);
    __CrestApply2(93884, 12, (long long )(tmp___16 == 26));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 26) {
      __CrestBranch(93887, 61017, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(93888, 61018, 0);

    }
    }
    {
    __CrestLoad(93891, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93890, (unsigned long )0, (long long )25);
    __CrestApply2(93889, 12, (long long )(tmp___16 == 25));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 25) {
      __CrestBranch(93892, 61020, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(93893, 61021, 0);

    }
    }
    {
    __CrestLoad(93896, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93895, (unsigned long )0, (long long )24);
    __CrestApply2(93894, 12, (long long )(tmp___16 == 24));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 24) {
      __CrestBranch(93897, 61023, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(93898, 61024, 0);

    }
    }
    {
    __CrestLoad(93901, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93900, (unsigned long )0, (long long )22);
    __CrestApply2(93899, 12, (long long )(tmp___16 == 22));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 22) {
      __CrestBranch(93902, 61026, 1);
# 1161 "xmltok_impl.c"
      goto case_27___1;
    } else {
      __CrestBranch(93903, 61027, 0);

    }
    }
    {
    __CrestLoad(93906, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93905, (unsigned long )0, (long long )5);
    __CrestApply2(93904, 12, (long long )(tmp___16 == 5));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 5) {
      __CrestBranch(93907, 61029, 1);
# 1161 "xmltok_impl.c"
      goto case_5___2;
    } else {
      __CrestBranch(93908, 61030, 0);

    }
    }
    {
    __CrestLoad(93911, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93910, (unsigned long )0, (long long )6);
    __CrestApply2(93909, 12, (long long )(tmp___16 == 6));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 6) {
      __CrestBranch(93912, 61032, 1);
# 1161 "xmltok_impl.c"
      goto case_6___2;
    } else {
      __CrestBranch(93913, 61033, 0);

    }
    }
    {
    __CrestLoad(93916, (unsigned long )(& tmp___16), (long long )tmp___16);
    __CrestLoad(93915, (unsigned long )0, (long long )7);
    __CrestApply2(93914, 12, (long long )(tmp___16 == 7));
# 1161 "xmltok_impl.c"
    if (tmp___16 == 7) {
      __CrestBranch(93917, 61035, 1);
# 1161 "xmltok_impl.c"
      goto case_7___2;
    } else {
      __CrestBranch(93918, 61036, 0);

    }
    }
# 1162 "xmltok_impl.c"
    goto switch_default___1;
    case_29___2:
    {
# 1161 "xmltok_impl.c"
    mem_68 = ptr + 0;
# 1161 "xmltok_impl.c"
    mem_69 = ptr + 1;
# 1161 "xmltok_impl.c"
    mem_70 = ptr + 1;
    {
    __CrestLoad(93927, (unsigned long )(& namingBitmap[((int const )namePages[(unsigned char )*mem_68] << 3) + (int const )((int )((unsigned char )*mem_69) >> 5)]),
                (long long )namingBitmap[((int const )namePages[(unsigned char )*mem_68] << 3) + (int const )((int )((unsigned char )*mem_69) >> 5)]);
    __CrestLoad(93926, (unsigned long )0, (long long )1);
    __CrestLoad(93925, (unsigned long )mem_70, (long long )*mem_70);
    __CrestLoad(93924, (unsigned long )0, (long long )31);
    __CrestApply2(93923, 5, (long long )((int )((unsigned char )*mem_70) & 31));
    __CrestApply2(93922, 8, (long long )(1 << ((int )((unsigned char )*mem_70) & 31)));
    __CrestApply2(93921, 5, (long long )(namingBitmap[((int const )namePages[(unsigned char )*mem_68] << 3) + (int const )((int )((unsigned char )*mem_69) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_70) & 31))));
    __CrestLoad(93920, (unsigned long )0, (long long )0);
    __CrestApply2(93919, 12, (long long )((namingBitmap[((int const )namePages[(unsigned char )*mem_68] << 3) + (int const )((int )((unsigned char )*mem_69) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_70) & 31))) == 0));
# 1161 "xmltok_impl.c"
    if ((namingBitmap[((int const )namePages[(unsigned char )*mem_68] << 3) + (int const )((int )((unsigned char )*mem_69) >> 5)] & (unsigned int const )(1 << ((int )((unsigned char )*mem_70) & 31))) == 0) {
      __CrestBranch(93928, 61041, 1);
# 1161 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(93930, (unsigned long )0, (long long )0);
      __CrestStore(93931, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
      __retres71 = 0;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93929, 61044, 0);

    }
    }
    }
    case_27___1:
    case_26___1:
    case_25___1:
    case_24___2:
    case_22___2:
# 1161 "xmltok_impl.c"
    ptr += 2;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_5___2:
    {
    __CrestLoad(93936, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93935, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93934, 18, (long long )(end - ptr));
    __CrestLoad(93933, (unsigned long )0, (long long )2L);
    __CrestApply2(93932, 16, (long long )(end - ptr < 2L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(93937, 61048, 1);
      __CrestLoad(93939, (unsigned long )0, (long long )-2);
      __CrestStore(93940, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
      __retres71 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93938, 61050, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93941, (unsigned long )0, (long long )0);
    __CrestStore(93942, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
    __retres71 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 2;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_6___2:
    {
    __CrestLoad(93947, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93946, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93945, 18, (long long )(end - ptr));
    __CrestLoad(93944, (unsigned long )0, (long long )3L);
    __CrestApply2(93943, 16, (long long )(end - ptr < 3L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(93948, 61057, 1);
      __CrestLoad(93950, (unsigned long )0, (long long )-2);
      __CrestStore(93951, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
      __retres71 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93949, 61059, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93952, (unsigned long )0, (long long )0);
    __CrestStore(93953, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
    __retres71 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 3;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    case_7___2:
    {
    __CrestLoad(93958, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(93957, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(93956, 18, (long long )(end - ptr));
    __CrestLoad(93955, (unsigned long )0, (long long )4L);
    __CrestApply2(93954, 16, (long long )(end - ptr < 4L));
# 1161 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(93959, 61066, 1);
      __CrestLoad(93961, (unsigned long )0, (long long )-2);
      __CrestStore(93962, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
      __retres71 = -2;
# 1161 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93960, 61068, 0);

    }
    }
# 1161 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93963, (unsigned long )0, (long long )0);
    __CrestStore(93964, (unsigned long )(& __retres71));
# 1161 "xmltok_impl.c"
    __retres71 = 0;
# 1161 "xmltok_impl.c"
    goto return_label;
# 1161 "xmltok_impl.c"
    ptr += 4;
# 1161 "xmltok_impl.c"
    goto switch_break___5;
    switch_default___1:
    __CrestLoad(93965, (unsigned long )0, (long long )19);
    __CrestStore(93966, (unsigned long )(& tok));
# 1163 "xmltok_impl.c"
    tok = 19;
# 1164 "xmltok_impl.c"
    goto switch_break___5;
    switch_break___5: ;
    }
# 1166 "xmltok_impl.c"
    goto switch_break___4;
    case_41:
    __CrestLoad(93967, (unsigned long )0, (long long )19);
    __CrestStore(93968, (unsigned long )(& tok));
# 1168 "xmltok_impl.c"
    tok = 19;
# 1169 "xmltok_impl.c"
    goto switch_break___4;
    switch_break___4: ;
    }
# 1171 "xmltok_impl.c"
    goto switch_break___3;
    case_34___0:
    {
    __CrestLoad(93971, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(93970, (unsigned long )0, (long long )19);
    __CrestApply2(93969, 12, (long long )(tok == 19));
# 1174 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(93972, 61083, 1);
# 1175 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(93974, (unsigned long )0, (long long )0);
      __CrestStore(93975, (unsigned long )(& __retres71));
# 1176 "xmltok_impl.c"
      __retres71 = 0;
# 1176 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93973, 61086, 0);

    }
    }
# 1178 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(93976, (unsigned long )0, (long long )32);
    __CrestStore(93977, (unsigned long )(& __retres71));
# 1179 "xmltok_impl.c"
    __retres71 = 32;
# 1179 "xmltok_impl.c"
    goto return_label;
    case_33___0:
    {
    __CrestLoad(93980, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(93979, (unsigned long )0, (long long )19);
    __CrestApply2(93978, 12, (long long )(tok == 19));
# 1181 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(93981, 61091, 1);
# 1182 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(93983, (unsigned long )0, (long long )0);
      __CrestStore(93984, (unsigned long )(& __retres71));
# 1183 "xmltok_impl.c"
      __retres71 = 0;
# 1183 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93982, 61094, 0);

    }
    }
# 1185 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(93985, (unsigned long )0, (long long )31);
    __CrestStore(93986, (unsigned long )(& __retres71));
# 1186 "xmltok_impl.c"
    __retres71 = 31;
# 1186 "xmltok_impl.c"
    goto return_label;
    case_15___1:
    {
    __CrestLoad(93989, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(93988, (unsigned long )0, (long long )19);
    __CrestApply2(93987, 12, (long long )(tok == 19));
# 1188 "xmltok_impl.c"
    if (tok == 19) {
      __CrestBranch(93990, 61099, 1);
# 1189 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(93992, (unsigned long )0, (long long )0);
      __CrestStore(93993, (unsigned long )(& __retres71));
# 1190 "xmltok_impl.c"
      __retres71 = 0;
# 1190 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(93991, 61102, 0);

    }
    }
# 1192 "xmltok_impl.c"
    *nextTokPtr = ptr + 2;
    __CrestLoad(93994, (unsigned long )0, (long long )30);
    __CrestStore(93995, (unsigned long )(& __retres71));
# 1193 "xmltok_impl.c"
    __retres71 = 30;
# 1193 "xmltok_impl.c"
    goto return_label;
    switch_default___2:
# 1195 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(93996, (unsigned long )0, (long long )0);
    __CrestStore(93997, (unsigned long )(& __retres71));
# 1196 "xmltok_impl.c"
    __retres71 = 0;
# 1196 "xmltok_impl.c"
    goto return_label;
    switch_break___3: ;
    }
  }
  while_break___0: ;
  }
  __CrestLoad(93999, (unsigned long )(& tok), (long long )tok);
  __CrestApply1(93998, 19, (long long )(- tok));
  __CrestStore(94000, (unsigned long )(& __retres71));
# 1199 "xmltok_impl.c"
  __retres71 = - tok;
  return_label:
  {
  __CrestLoad(94001, (unsigned long )(& __retres71), (long long )__retres71);
  __CrestReturn(94002);
# 971 "xmltok_impl.c"
  return (__retres71);
  }
}
}
# 1202 "xmltok_impl.c"
static int big2_attributeValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                                  char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const *mem_11 ;
  char const *mem_12 ;
  struct normal_encoding *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  struct normal_encoding *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  int __retres21 ;

  {
  __CrestCall(94003, 918);

  {
  __CrestLoad(94006, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(94005, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(94004, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1207 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(94007, 61114, 1);
    __CrestLoad(94009, (unsigned long )0, (long long )-4);
    __CrestStore(94010, (unsigned long )(& __retres21));
# 1208 "xmltok_impl.c"
    __retres21 = -4;
# 1208 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(94008, 61116, 0);

  }
  }
# 1209 "xmltok_impl.c"
  start = ptr;
  {
# 1210 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(94013, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94012, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94011, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1210 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(94014, 61122, 1);

    } else {
      __CrestBranch(94015, 61123, 0);
# 1210 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1211 "xmltok_impl.c"
    mem_11 = ptr + 0;
    {
    __CrestLoad(94018, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(94017, (unsigned long )0, (long long )0);
    __CrestApply2(94016, 12, (long long )((int const )*mem_11 == 0));
# 1211 "xmltok_impl.c"
    if ((int const )*mem_11 == 0) {
      __CrestBranch(94019, 61127, 1);
# 1211 "xmltok_impl.c"
      mem_12 = ptr + 1;
# 1211 "xmltok_impl.c"
      mem_13 = (struct normal_encoding *)enc;
      __CrestLoad(94021, (unsigned long )(& mem_13->type[(unsigned char )*mem_12]),
                  (long long )mem_13->type[(unsigned char )*mem_12]);
      __CrestStore(94022, (unsigned long )(& tmp___0));
# 1211 "xmltok_impl.c"
      tmp___0 = (int )mem_13->type[(unsigned char )*mem_12];
    } else {
      __CrestBranch(94020, 61128, 0);
# 1211 "xmltok_impl.c"
      mem_14 = ptr + 0;
# 1211 "xmltok_impl.c"
      mem_15 = ptr + 1;
      __CrestLoad(94023, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(94024, (unsigned long )mem_15, (long long )*mem_15);
# 1211 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_14, (char )*mem_15);
      __CrestHandleReturn(94026, (long long )tmp);
      __CrestStore(94025, (unsigned long )(& tmp));
      __CrestLoad(94027, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(94028, (unsigned long )(& tmp___0));
# 1211 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(94031, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94030, (unsigned long )0, (long long )5);
    __CrestApply2(94029, 12, (long long )(tmp___0 == 5));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(94032, 61131, 1);
# 1214 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(94033, 61132, 0);

    }
    }
    {
    __CrestLoad(94036, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94035, (unsigned long )0, (long long )6);
    __CrestApply2(94034, 12, (long long )(tmp___0 == 6));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(94037, 61134, 1);
# 1214 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(94038, 61135, 0);

    }
    }
    {
    __CrestLoad(94041, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94040, (unsigned long )0, (long long )7);
    __CrestApply2(94039, 12, (long long )(tmp___0 == 7));
# 1214 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(94042, 61137, 1);
# 1214 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(94043, 61138, 0);

    }
    }
    {
    __CrestLoad(94046, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94045, (unsigned long )0, (long long )3);
    __CrestApply2(94044, 12, (long long )(tmp___0 == 3));
# 1216 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(94047, 61140, 1);
# 1216 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(94048, 61141, 0);

    }
    }
    {
    __CrestLoad(94051, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94050, (unsigned long )0, (long long )2);
    __CrestApply2(94049, 12, (long long )(tmp___0 == 2));
# 1221 "xmltok_impl.c"
    if (tmp___0 == 2) {
      __CrestBranch(94052, 61143, 1);
# 1221 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(94053, 61144, 0);

    }
    }
    {
    __CrestLoad(94056, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94055, (unsigned long )0, (long long )10);
    __CrestApply2(94054, 12, (long long )(tmp___0 == 10));
# 1225 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(94057, 61146, 1);
# 1225 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(94058, 61147, 0);

    }
    }
    {
    __CrestLoad(94061, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94060, (unsigned long )0, (long long )9);
    __CrestApply2(94059, 12, (long long )(tmp___0 == 9));
# 1232 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(94062, 61149, 1);
# 1232 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(94063, 61150, 0);

    }
    }
    {
    __CrestLoad(94066, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94065, (unsigned long )0, (long long )21);
    __CrestApply2(94064, 12, (long long )(tmp___0 == 21));
# 1244 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(94067, 61152, 1);
# 1244 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(94068, 61153, 0);

    }
    }
# 1251 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1214 "xmltok_impl.c"
    ptr += 2;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1214 "xmltok_impl.c"
    ptr += 3;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1214 "xmltok_impl.c"
    ptr += 4;
# 1214 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(94071, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94070, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94069, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1217 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94072, 61162, 1);
# 1218 "xmltok_impl.c"
      tmp___1 = big2_scanRef(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(94075, (long long )tmp___1);
      __CrestStore(94074, (unsigned long )(& tmp___1));
      __CrestLoad(94076, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(94077, (unsigned long )(& __retres21));
# 1218 "xmltok_impl.c"
      __retres21 = tmp___1;
# 1218 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94073, 61165, 0);

    }
    }
# 1219 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94078, (unsigned long )0, (long long )6);
    __CrestStore(94079, (unsigned long )(& __retres21));
# 1220 "xmltok_impl.c"
    __retres21 = 6;
# 1220 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1223 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94080, (unsigned long )0, (long long )0);
    __CrestStore(94081, (unsigned long )(& __retres21));
# 1224 "xmltok_impl.c"
    __retres21 = 0;
# 1224 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(94084, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94083, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94082, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1226 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94085, 61173, 1);
# 1227 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(94087, (unsigned long )0, (long long )7);
      __CrestStore(94088, (unsigned long )(& __retres21));
# 1228 "xmltok_impl.c"
      __retres21 = 7;
# 1228 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94086, 61176, 0);

    }
    }
# 1230 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94089, (unsigned long )0, (long long )6);
    __CrestStore(94090, (unsigned long )(& __retres21));
# 1231 "xmltok_impl.c"
    __retres21 = 6;
# 1231 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(94093, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94092, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94091, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1233 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94094, 61181, 1);
# 1234 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(94098, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(94097, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(94096, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1235 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(94099, 61183, 1);
        __CrestLoad(94101, (unsigned long )0, (long long )-3);
        __CrestStore(94102, (unsigned long )(& __retres21));
# 1236 "xmltok_impl.c"
        __retres21 = -3;
# 1236 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(94100, 61185, 0);

      }
      }
      {
# 1237 "xmltok_impl.c"
      mem_16 = ptr + 0;
      {
      __CrestLoad(94105, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(94104, (unsigned long )0, (long long )0);
      __CrestApply2(94103, 12, (long long )((int const )*mem_16 == 0));
# 1237 "xmltok_impl.c"
      if ((int const )*mem_16 == 0) {
        __CrestBranch(94106, 61189, 1);
# 1237 "xmltok_impl.c"
        mem_17 = ptr + 1;
# 1237 "xmltok_impl.c"
        mem_18 = (struct normal_encoding *)enc;
        __CrestLoad(94108, (unsigned long )(& mem_18->type[(unsigned char )*mem_17]),
                    (long long )mem_18->type[(unsigned char )*mem_17]);
        __CrestStore(94109, (unsigned long )(& tmp___3));
# 1237 "xmltok_impl.c"
        tmp___3 = (int )mem_18->type[(unsigned char )*mem_17];
      } else {
        __CrestBranch(94107, 61190, 0);
# 1237 "xmltok_impl.c"
        mem_19 = ptr + 0;
# 1237 "xmltok_impl.c"
        mem_20 = ptr + 1;
        __CrestLoad(94110, (unsigned long )mem_19, (long long )*mem_19);
        __CrestLoad(94111, (unsigned long )mem_20, (long long )*mem_20);
# 1237 "xmltok_impl.c"
        tmp___2 = unicode_byte_type((char )*mem_19, (char )*mem_20);
        __CrestHandleReturn(94113, (long long )tmp___2);
        __CrestStore(94112, (unsigned long )(& tmp___2));
        __CrestLoad(94114, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(94115, (unsigned long )(& tmp___3));
# 1237 "xmltok_impl.c"
        tmp___3 = tmp___2;
      }
      }
      }
      {
      __CrestLoad(94118, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(94117, (unsigned long )0, (long long )10);
      __CrestApply2(94116, 12, (long long )(tmp___3 == 10));
# 1237 "xmltok_impl.c"
      if (tmp___3 == 10) {
        __CrestBranch(94119, 61192, 1);
# 1238 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(94120, 61193, 0);

      }
      }
# 1239 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(94121, (unsigned long )0, (long long )7);
      __CrestStore(94122, (unsigned long )(& __retres21));
# 1240 "xmltok_impl.c"
      __retres21 = 7;
# 1240 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94095, 61197, 0);

    }
    }
# 1242 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94123, (unsigned long )0, (long long )6);
    __CrestStore(94124, (unsigned long )(& __retres21));
# 1243 "xmltok_impl.c"
    __retres21 = 6;
# 1243 "xmltok_impl.c"
    goto return_label;
    case_21:
    {
    __CrestLoad(94127, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94126, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94125, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1245 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94128, 61202, 1);
# 1246 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(94130, (unsigned long )0, (long long )39);
      __CrestStore(94131, (unsigned long )(& __retres21));
# 1247 "xmltok_impl.c"
      __retres21 = 39;
# 1247 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94129, 61205, 0);

    }
    }
# 1249 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94132, (unsigned long )0, (long long )6);
    __CrestStore(94133, (unsigned long )(& __retres21));
# 1250 "xmltok_impl.c"
    __retres21 = 6;
# 1250 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1252 "xmltok_impl.c"
    ptr += 2;
# 1253 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
# 1256 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(94134, (unsigned long )0, (long long )6);
  __CrestStore(94135, (unsigned long )(& __retres21));
# 1257 "xmltok_impl.c"
  __retres21 = 6;
  return_label:
  {
  __CrestLoad(94136, (unsigned long )(& __retres21), (long long )__retres21);
  __CrestReturn(94137);
# 1202 "xmltok_impl.c"
  return (__retres21);
  }
}
}
# 1260 "xmltok_impl.c"
static int big2_entityValueTok(ENCODING const *enc , char const *ptr , char const *end ,
                               char const **nextTokPtr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tok ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  struct normal_encoding *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  int __retres24 ;

  {
  __CrestCall(94138, 919);

  {
  __CrestLoad(94141, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(94140, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(94139, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1265 "xmltok_impl.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(94142, 61217, 1);
    __CrestLoad(94144, (unsigned long )0, (long long )-4);
    __CrestStore(94145, (unsigned long )(& __retres24));
# 1266 "xmltok_impl.c"
    __retres24 = -4;
# 1266 "xmltok_impl.c"
    goto return_label;
  } else {
    __CrestBranch(94143, 61219, 0);

  }
  }
# 1267 "xmltok_impl.c"
  start = ptr;
  {
# 1268 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(94148, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94147, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94146, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1268 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(94149, 61225, 1);

    } else {
      __CrestBranch(94150, 61226, 0);
# 1268 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1269 "xmltok_impl.c"
    mem_14 = ptr + 0;
    {
    __CrestLoad(94153, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(94152, (unsigned long )0, (long long )0);
    __CrestApply2(94151, 12, (long long )((int const )*mem_14 == 0));
# 1269 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(94154, 61230, 1);
# 1269 "xmltok_impl.c"
      mem_15 = ptr + 1;
# 1269 "xmltok_impl.c"
      mem_16 = (struct normal_encoding *)enc;
      __CrestLoad(94156, (unsigned long )(& mem_16->type[(unsigned char )*mem_15]),
                  (long long )mem_16->type[(unsigned char )*mem_15]);
      __CrestStore(94157, (unsigned long )(& tmp___0));
# 1269 "xmltok_impl.c"
      tmp___0 = (int )mem_16->type[(unsigned char )*mem_15];
    } else {
      __CrestBranch(94155, 61231, 0);
# 1269 "xmltok_impl.c"
      mem_17 = ptr + 0;
# 1269 "xmltok_impl.c"
      mem_18 = ptr + 1;
      __CrestLoad(94158, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(94159, (unsigned long )mem_18, (long long )*mem_18);
# 1269 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_17, (char )*mem_18);
      __CrestHandleReturn(94161, (long long )tmp);
      __CrestStore(94160, (unsigned long )(& tmp));
      __CrestLoad(94162, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(94163, (unsigned long )(& tmp___0));
# 1269 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(94166, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94165, (unsigned long )0, (long long )5);
    __CrestApply2(94164, 12, (long long )(tmp___0 == 5));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(94167, 61234, 1);
# 1272 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(94168, 61235, 0);

    }
    }
    {
    __CrestLoad(94171, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94170, (unsigned long )0, (long long )6);
    __CrestApply2(94169, 12, (long long )(tmp___0 == 6));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(94172, 61237, 1);
# 1272 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(94173, 61238, 0);

    }
    }
    {
    __CrestLoad(94176, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94175, (unsigned long )0, (long long )7);
    __CrestApply2(94174, 12, (long long )(tmp___0 == 7));
# 1272 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(94177, 61240, 1);
# 1272 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(94178, 61241, 0);

    }
    }
    {
    __CrestLoad(94181, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94180, (unsigned long )0, (long long )3);
    __CrestApply2(94179, 12, (long long )(tmp___0 == 3));
# 1274 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(94182, 61243, 1);
# 1274 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(94183, 61244, 0);

    }
    }
    {
    __CrestLoad(94186, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94185, (unsigned long )0, (long long )30);
    __CrestApply2(94184, 12, (long long )(tmp___0 == 30));
# 1279 "xmltok_impl.c"
    if (tmp___0 == 30) {
      __CrestBranch(94187, 61246, 1);
# 1279 "xmltok_impl.c"
      goto case_30;
    } else {
      __CrestBranch(94188, 61247, 0);

    }
    }
    {
    __CrestLoad(94191, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94190, (unsigned long )0, (long long )10);
    __CrestApply2(94189, 12, (long long )(tmp___0 == 10));
# 1287 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(94192, 61249, 1);
# 1287 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(94193, 61250, 0);

    }
    }
    {
    __CrestLoad(94196, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94195, (unsigned long )0, (long long )9);
    __CrestApply2(94194, 12, (long long )(tmp___0 == 9));
# 1294 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(94197, 61252, 1);
# 1294 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(94198, 61253, 0);

    }
    }
# 1306 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1272 "xmltok_impl.c"
    ptr += 2;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1272 "xmltok_impl.c"
    ptr += 3;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1272 "xmltok_impl.c"
    ptr += 4;
# 1272 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(94201, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94200, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94199, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1275 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94202, 61262, 1);
# 1276 "xmltok_impl.c"
      tmp___1 = big2_scanRef(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(94205, (long long )tmp___1);
      __CrestStore(94204, (unsigned long )(& tmp___1));
      __CrestLoad(94206, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(94207, (unsigned long )(& __retres24));
# 1276 "xmltok_impl.c"
      __retres24 = tmp___1;
# 1276 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94203, 61265, 0);

    }
    }
# 1277 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94208, (unsigned long )0, (long long )6);
    __CrestStore(94209, (unsigned long )(& __retres24));
# 1278 "xmltok_impl.c"
    __retres24 = 6;
# 1278 "xmltok_impl.c"
    goto return_label;
    case_30:
    {
    __CrestLoad(94212, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94211, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94210, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1280 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94213, 61270, 1);
# 1281 "xmltok_impl.c"
      tmp___2 = big2_scanPercent(enc, ptr + 2, end, nextTokPtr);
      __CrestHandleReturn(94216, (long long )tmp___2);
      __CrestStore(94215, (unsigned long )(& tmp___2));
      __CrestLoad(94217, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(94218, (unsigned long )(& tok));
# 1281 "xmltok_impl.c"
      tok = tmp___2;
      {
      __CrestLoad(94221, (unsigned long )(& tok), (long long )tok);
      __CrestLoad(94220, (unsigned long )0, (long long )22);
      __CrestApply2(94219, 12, (long long )(tok == 22));
# 1283 "xmltok_impl.c"
      if (tok == 22) {
        __CrestBranch(94222, 61272, 1);
        __CrestLoad(94224, (unsigned long )0, (long long )0);
        __CrestStore(94225, (unsigned long )(& tmp___3));
# 1283 "xmltok_impl.c"
        tmp___3 = 0;
      } else {
        __CrestBranch(94223, 61273, 0);
        __CrestLoad(94226, (unsigned long )(& tok), (long long )tok);
        __CrestStore(94227, (unsigned long )(& tmp___3));
# 1283 "xmltok_impl.c"
        tmp___3 = tok;
      }
      }
      __CrestLoad(94228, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestStore(94229, (unsigned long )(& __retres24));
# 1283 "xmltok_impl.c"
      __retres24 = tmp___3;
# 1283 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94214, 61276, 0);

    }
    }
# 1285 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94230, (unsigned long )0, (long long )6);
    __CrestStore(94231, (unsigned long )(& __retres24));
# 1286 "xmltok_impl.c"
    __retres24 = 6;
# 1286 "xmltok_impl.c"
    goto return_label;
    case_10:
    {
    __CrestLoad(94234, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94233, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94232, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1288 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94235, 61281, 1);
# 1289 "xmltok_impl.c"
      *nextTokPtr = ptr + 2;
      __CrestLoad(94237, (unsigned long )0, (long long )7);
      __CrestStore(94238, (unsigned long )(& __retres24));
# 1290 "xmltok_impl.c"
      __retres24 = 7;
# 1290 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94236, 61284, 0);

    }
    }
# 1292 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94239, (unsigned long )0, (long long )6);
    __CrestStore(94240, (unsigned long )(& __retres24));
# 1293 "xmltok_impl.c"
    __retres24 = 6;
# 1293 "xmltok_impl.c"
    goto return_label;
    case_9:
    {
    __CrestLoad(94243, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94242, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(94241, 12, (long long )((unsigned long )ptr == (unsigned long )start));
# 1295 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )start) {
      __CrestBranch(94244, 61289, 1);
# 1296 "xmltok_impl.c"
      ptr += 2;
      {
      __CrestLoad(94248, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
      __CrestLoad(94247, (unsigned long )(& end), (long long )((unsigned long )end));
      __CrestApply2(94246, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1297 "xmltok_impl.c"
      if ((unsigned long )ptr == (unsigned long )end) {
        __CrestBranch(94249, 61291, 1);
        __CrestLoad(94251, (unsigned long )0, (long long )-3);
        __CrestStore(94252, (unsigned long )(& __retres24));
# 1298 "xmltok_impl.c"
        __retres24 = -3;
# 1298 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(94250, 61293, 0);

      }
      }
      {
# 1299 "xmltok_impl.c"
      mem_19 = ptr + 0;
      {
      __CrestLoad(94255, (unsigned long )mem_19, (long long )*mem_19);
      __CrestLoad(94254, (unsigned long )0, (long long )0);
      __CrestApply2(94253, 12, (long long )((int const )*mem_19 == 0));
# 1299 "xmltok_impl.c"
      if ((int const )*mem_19 == 0) {
        __CrestBranch(94256, 61297, 1);
# 1299 "xmltok_impl.c"
        mem_20 = ptr + 1;
# 1299 "xmltok_impl.c"
        mem_21 = (struct normal_encoding *)enc;
        __CrestLoad(94258, (unsigned long )(& mem_21->type[(unsigned char )*mem_20]),
                    (long long )mem_21->type[(unsigned char )*mem_20]);
        __CrestStore(94259, (unsigned long )(& tmp___5));
# 1299 "xmltok_impl.c"
        tmp___5 = (int )mem_21->type[(unsigned char )*mem_20];
      } else {
        __CrestBranch(94257, 61298, 0);
# 1299 "xmltok_impl.c"
        mem_22 = ptr + 0;
# 1299 "xmltok_impl.c"
        mem_23 = ptr + 1;
        __CrestLoad(94260, (unsigned long )mem_22, (long long )*mem_22);
        __CrestLoad(94261, (unsigned long )mem_23, (long long )*mem_23);
# 1299 "xmltok_impl.c"
        tmp___4 = unicode_byte_type((char )*mem_22, (char )*mem_23);
        __CrestHandleReturn(94263, (long long )tmp___4);
        __CrestStore(94262, (unsigned long )(& tmp___4));
        __CrestLoad(94264, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestStore(94265, (unsigned long )(& tmp___5));
# 1299 "xmltok_impl.c"
        tmp___5 = tmp___4;
      }
      }
      }
      {
      __CrestLoad(94268, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(94267, (unsigned long )0, (long long )10);
      __CrestApply2(94266, 12, (long long )(tmp___5 == 10));
# 1299 "xmltok_impl.c"
      if (tmp___5 == 10) {
        __CrestBranch(94269, 61300, 1);
# 1300 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(94270, 61301, 0);

      }
      }
# 1301 "xmltok_impl.c"
      *nextTokPtr = ptr;
      __CrestLoad(94271, (unsigned long )0, (long long )7);
      __CrestStore(94272, (unsigned long )(& __retres24));
# 1302 "xmltok_impl.c"
      __retres24 = 7;
# 1302 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94245, 61305, 0);

    }
    }
# 1304 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94273, (unsigned long )0, (long long )6);
    __CrestStore(94274, (unsigned long )(& __retres24));
# 1305 "xmltok_impl.c"
    __retres24 = 6;
# 1305 "xmltok_impl.c"
    goto return_label;
    switch_default:
# 1307 "xmltok_impl.c"
    ptr += 2;
# 1308 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
# 1311 "xmltok_impl.c"
  *nextTokPtr = ptr;
  __CrestLoad(94275, (unsigned long )0, (long long )6);
  __CrestStore(94276, (unsigned long )(& __retres24));
# 1312 "xmltok_impl.c"
  __retres24 = 6;
  return_label:
  {
  __CrestLoad(94277, (unsigned long )(& __retres24), (long long )__retres24);
  __CrestReturn(94278);
# 1260 "xmltok_impl.c"
  return (__retres24);
  }
}
}
# 1317 "xmltok_impl.c"
static int big2_ignoreSectionTok(ENCODING const *enc , char const *ptr , char const *end ,
                                 char const **nextTokPtr )
{
  int level ;
  size_t n ;
  int tmp ;
  int tmp___0 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  int __retres22 ;

  {
  __CrestCall(94279, 920);

  __CrestLoad(94280, (unsigned long )0, (long long )0);
  __CrestStore(94281, (unsigned long )(& level));
# 1321 "xmltok_impl.c"
  level = 0;
  __CrestLoad(94284, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(94283, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(94282, 18, (long long )(end - ptr));
  __CrestStore(94285, (unsigned long )(& n));
# 1323 "xmltok_impl.c"
  n = (size_t )(end - ptr);
  {
  __CrestLoad(94290, (unsigned long )(& n), (long long )n);
  __CrestLoad(94289, (unsigned long )0, (long long )1UL);
  __CrestApply2(94288, 5, (long long )(n & 1UL));
  __CrestLoad(94287, (unsigned long )0, (long long )0);
  __CrestApply2(94286, 13, (long long )((n & 1UL) != 0));
# 1324 "xmltok_impl.c"
  if ((n & 1UL) != 0) {
    __CrestBranch(94291, 61318, 1);
    __CrestLoad(94295, (unsigned long )(& n), (long long )n);
    __CrestLoad(94294, (unsigned long )0, (long long )0xfffffffffffffffeUL);
    __CrestApply2(94293, 5, (long long )(n & 0xfffffffffffffffeUL));
    __CrestStore(94296, (unsigned long )(& n));
# 1325 "xmltok_impl.c"
    n &= 0xfffffffffffffffeUL;
# 1326 "xmltok_impl.c"
    end = ptr + n;
  } else {
    __CrestBranch(94292, 61319, 0);

  }
  }
  {
# 1329 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(94299, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94298, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94297, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1329 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(94300, 61324, 1);

    } else {
      __CrestBranch(94301, 61325, 0);
# 1329 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1330 "xmltok_impl.c"
    mem_9 = ptr + 0;
    {
    __CrestLoad(94304, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(94303, (unsigned long )0, (long long )0);
    __CrestApply2(94302, 12, (long long )((int const )*mem_9 == 0));
# 1330 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(94305, 61329, 1);
# 1330 "xmltok_impl.c"
      mem_10 = ptr + 1;
# 1330 "xmltok_impl.c"
      mem_11 = (struct normal_encoding *)enc;
      __CrestLoad(94307, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                  (long long )mem_11->type[(unsigned char )*mem_10]);
      __CrestStore(94308, (unsigned long )(& tmp___0));
# 1330 "xmltok_impl.c"
      tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
    } else {
      __CrestBranch(94306, 61330, 0);
# 1330 "xmltok_impl.c"
      mem_12 = ptr + 0;
# 1330 "xmltok_impl.c"
      mem_13 = ptr + 1;
      __CrestLoad(94309, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(94310, (unsigned long )mem_13, (long long )*mem_13);
# 1330 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
      __CrestHandleReturn(94312, (long long )tmp);
      __CrestStore(94311, (unsigned long )(& tmp));
      __CrestLoad(94313, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(94314, (unsigned long )(& tmp___0));
# 1330 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(94317, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94316, (unsigned long )0, (long long )5);
    __CrestApply2(94315, 12, (long long )(tmp___0 == 5));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(94318, 61333, 1);
# 1331 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(94319, 61334, 0);

    }
    }
    {
    __CrestLoad(94322, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94321, (unsigned long )0, (long long )6);
    __CrestApply2(94320, 12, (long long )(tmp___0 == 6));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(94323, 61336, 1);
# 1331 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(94324, 61337, 0);

    }
    }
    {
    __CrestLoad(94327, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94326, (unsigned long )0, (long long )7);
    __CrestApply2(94325, 12, (long long )(tmp___0 == 7));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(94328, 61339, 1);
# 1331 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(94329, 61340, 0);

    }
    }
    {
    __CrestLoad(94332, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94331, (unsigned long )0, (long long )8);
    __CrestApply2(94330, 12, (long long )(tmp___0 == 8));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 8) {
      __CrestBranch(94333, 61342, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(94334, 61343, 0);

    }
    }
    {
    __CrestLoad(94337, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94336, (unsigned long )0, (long long )1);
    __CrestApply2(94335, 12, (long long )(tmp___0 == 1));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 1) {
      __CrestBranch(94338, 61345, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(94339, 61346, 0);

    }
    }
    {
    __CrestLoad(94342, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94341, (unsigned long )0, (long long )0);
    __CrestApply2(94340, 12, (long long )(tmp___0 == 0));
# 1331 "xmltok_impl.c"
    if (tmp___0 == 0) {
      __CrestBranch(94343, 61348, 1);
# 1331 "xmltok_impl.c"
      goto case_8;
    } else {
      __CrestBranch(94344, 61349, 0);

    }
    }
    {
    __CrestLoad(94347, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94346, (unsigned long )0, (long long )2);
    __CrestApply2(94345, 12, (long long )(tmp___0 == 2));
# 1332 "xmltok_impl.c"
    if (tmp___0 == 2) {
      __CrestBranch(94348, 61351, 1);
# 1332 "xmltok_impl.c"
      goto case_2;
    } else {
      __CrestBranch(94349, 61352, 0);

    }
    }
    {
    __CrestLoad(94352, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94351, (unsigned long )0, (long long )4);
    __CrestApply2(94350, 12, (long long )(tmp___0 == 4));
# 1344 "xmltok_impl.c"
    if (tmp___0 == 4) {
      __CrestBranch(94353, 61354, 1);
# 1344 "xmltok_impl.c"
      goto case_4;
    } else {
      __CrestBranch(94354, 61355, 0);

    }
    }
# 1360 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(94359, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(94358, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(94357, 18, (long long )(end - ptr));
    __CrestLoad(94356, (unsigned long )0, (long long )2L);
    __CrestApply2(94355, 16, (long long )(end - ptr < 2L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 2L) {
      __CrestBranch(94360, 61358, 1);
      __CrestLoad(94362, (unsigned long )0, (long long )-2);
      __CrestStore(94363, (unsigned long )(& __retres22));
# 1331 "xmltok_impl.c"
      __retres22 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94361, 61360, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 2;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(94368, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(94367, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(94366, 18, (long long )(end - ptr));
    __CrestLoad(94365, (unsigned long )0, (long long )3L);
    __CrestApply2(94364, 16, (long long )(end - ptr < 3L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 3L) {
      __CrestBranch(94369, 61364, 1);
      __CrestLoad(94371, (unsigned long )0, (long long )-2);
      __CrestStore(94372, (unsigned long )(& __retres22));
# 1331 "xmltok_impl.c"
      __retres22 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94370, 61366, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 3;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(94377, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestLoad(94376, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestApply2(94375, 18, (long long )(end - ptr));
    __CrestLoad(94374, (unsigned long )0, (long long )4L);
    __CrestApply2(94373, 16, (long long )(end - ptr < 4L));
# 1331 "xmltok_impl.c"
    if (end - ptr < 4L) {
      __CrestBranch(94378, 61370, 1);
      __CrestLoad(94380, (unsigned long )0, (long long )-2);
      __CrestStore(94381, (unsigned long )(& __retres22));
# 1331 "xmltok_impl.c"
      __retres22 = -2;
# 1331 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94379, 61372, 0);

    }
    }
# 1331 "xmltok_impl.c"
    ptr += 4;
# 1331 "xmltok_impl.c"
    goto switch_break;
    case_8:
    case_1:
    case_0:
# 1331 "xmltok_impl.c"
    *nextTokPtr = ptr;
    __CrestLoad(94382, (unsigned long )0, (long long )0);
    __CrestStore(94383, (unsigned long )(& __retres22));
# 1331 "xmltok_impl.c"
    __retres22 = 0;
# 1331 "xmltok_impl.c"
    goto return_label;
    case_2:
# 1333 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(94386, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94385, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94384, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1333 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(94387, 61380, 1);
      __CrestLoad(94389, (unsigned long )0, (long long )-1);
      __CrestStore(94390, (unsigned long )(& __retres22));
# 1334 "xmltok_impl.c"
      __retres22 = -1;
# 1334 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94388, 61382, 0);

    }
    }
    {
# 1335 "xmltok_impl.c"
    mem_14 = ptr + 0;
    {
    __CrestLoad(94393, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(94392, (unsigned long )0, (long long )0);
    __CrestApply2(94391, 12, (long long )((int const )*mem_14 == 0));
# 1335 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(94394, 61386, 1);
      {
# 1335 "xmltok_impl.c"
      mem_15 = ptr + 1;
      {
      __CrestLoad(94398, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(94397, (unsigned long )0, (long long )33);
      __CrestApply2(94396, 12, (long long )((int const )*mem_15 == 33));
# 1335 "xmltok_impl.c"
      if ((int const )*mem_15 == 33) {
        __CrestBranch(94399, 61389, 1);
# 1336 "xmltok_impl.c"
        ptr += 2;
        {
        __CrestLoad(94403, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
        __CrestLoad(94402, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestApply2(94401, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1336 "xmltok_impl.c"
        if ((unsigned long )ptr == (unsigned long )end) {
          __CrestBranch(94404, 61391, 1);
          __CrestLoad(94406, (unsigned long )0, (long long )-1);
          __CrestStore(94407, (unsigned long )(& __retres22));
# 1337 "xmltok_impl.c"
          __retres22 = -1;
# 1337 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(94405, 61393, 0);

        }
        }
        {
# 1338 "xmltok_impl.c"
        mem_16 = ptr + 0;
        {
        __CrestLoad(94410, (unsigned long )mem_16, (long long )*mem_16);
        __CrestLoad(94409, (unsigned long )0, (long long )0);
        __CrestApply2(94408, 12, (long long )((int const )*mem_16 == 0));
# 1338 "xmltok_impl.c"
        if ((int const )*mem_16 == 0) {
          __CrestBranch(94411, 61397, 1);
          {
# 1338 "xmltok_impl.c"
          mem_17 = ptr + 1;
          {
          __CrestLoad(94415, (unsigned long )mem_17, (long long )*mem_17);
          __CrestLoad(94414, (unsigned long )0, (long long )91);
          __CrestApply2(94413, 12, (long long )((int const )*mem_17 == 91));
# 1338 "xmltok_impl.c"
          if ((int const )*mem_17 == 91) {
            __CrestBranch(94416, 61400, 1);
            __CrestLoad(94420, (unsigned long )(& level), (long long )level);
            __CrestLoad(94419, (unsigned long )0, (long long )1);
            __CrestApply2(94418, 0, (long long )(level + 1));
            __CrestStore(94421, (unsigned long )(& level));
# 1339 "xmltok_impl.c"
            level ++;
# 1340 "xmltok_impl.c"
            ptr += 2;
          } else {
            __CrestBranch(94417, 61401, 0);

          }
          }
          }
        } else {
          __CrestBranch(94412, 61402, 0);

        }
        }
        }
      } else {
        __CrestBranch(94400, 61403, 0);

      }
      }
      }
    } else {
      __CrestBranch(94395, 61404, 0);

    }
    }
    }
# 1343 "xmltok_impl.c"
    goto switch_break;
    case_4:
# 1345 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(94424, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94423, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94422, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1345 "xmltok_impl.c"
    if ((unsigned long )ptr == (unsigned long )end) {
      __CrestBranch(94425, 61408, 1);
      __CrestLoad(94427, (unsigned long )0, (long long )-1);
      __CrestStore(94428, (unsigned long )(& __retres22));
# 1346 "xmltok_impl.c"
      __retres22 = -1;
# 1346 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94426, 61410, 0);

    }
    }
    {
# 1347 "xmltok_impl.c"
    mem_18 = ptr + 0;
    {
    __CrestLoad(94431, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(94430, (unsigned long )0, (long long )0);
    __CrestApply2(94429, 12, (long long )((int const )*mem_18 == 0));
# 1347 "xmltok_impl.c"
    if ((int const )*mem_18 == 0) {
      __CrestBranch(94432, 61414, 1);
      {
# 1347 "xmltok_impl.c"
      mem_19 = ptr + 1;
      {
      __CrestLoad(94436, (unsigned long )mem_19, (long long )*mem_19);
      __CrestLoad(94435, (unsigned long )0, (long long )93);
      __CrestApply2(94434, 12, (long long )((int const )*mem_19 == 93));
# 1347 "xmltok_impl.c"
      if ((int const )*mem_19 == 93) {
        __CrestBranch(94437, 61417, 1);
# 1348 "xmltok_impl.c"
        ptr += 2;
        {
        __CrestLoad(94441, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
        __CrestLoad(94440, (unsigned long )(& end), (long long )((unsigned long )end));
        __CrestApply2(94439, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1348 "xmltok_impl.c"
        if ((unsigned long )ptr == (unsigned long )end) {
          __CrestBranch(94442, 61419, 1);
          __CrestLoad(94444, (unsigned long )0, (long long )-1);
          __CrestStore(94445, (unsigned long )(& __retres22));
# 1349 "xmltok_impl.c"
          __retres22 = -1;
# 1349 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(94443, 61421, 0);

        }
        }
        {
# 1350 "xmltok_impl.c"
        mem_20 = ptr + 0;
        {
        __CrestLoad(94448, (unsigned long )mem_20, (long long )*mem_20);
        __CrestLoad(94447, (unsigned long )0, (long long )0);
        __CrestApply2(94446, 12, (long long )((int const )*mem_20 == 0));
# 1350 "xmltok_impl.c"
        if ((int const )*mem_20 == 0) {
          __CrestBranch(94449, 61425, 1);
          {
# 1350 "xmltok_impl.c"
          mem_21 = ptr + 1;
          {
          __CrestLoad(94453, (unsigned long )mem_21, (long long )*mem_21);
          __CrestLoad(94452, (unsigned long )0, (long long )62);
          __CrestApply2(94451, 12, (long long )((int const )*mem_21 == 62));
# 1350 "xmltok_impl.c"
          if ((int const )*mem_21 == 62) {
            __CrestBranch(94454, 61428, 1);
# 1351 "xmltok_impl.c"
            ptr += 2;
            {
            __CrestLoad(94458, (unsigned long )(& level), (long long )level);
            __CrestLoad(94457, (unsigned long )0, (long long )0);
            __CrestApply2(94456, 12, (long long )(level == 0));
# 1352 "xmltok_impl.c"
            if (level == 0) {
              __CrestBranch(94459, 61430, 1);
# 1353 "xmltok_impl.c"
              *nextTokPtr = ptr;
              __CrestLoad(94461, (unsigned long )0, (long long )42);
              __CrestStore(94462, (unsigned long )(& __retres22));
# 1354 "xmltok_impl.c"
              __retres22 = 42;
# 1354 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(94460, 61433, 0);

            }
            }
            __CrestLoad(94465, (unsigned long )(& level), (long long )level);
            __CrestLoad(94464, (unsigned long )0, (long long )1);
            __CrestApply2(94463, 1, (long long )(level - 1));
            __CrestStore(94466, (unsigned long )(& level));
# 1356 "xmltok_impl.c"
            level --;
          } else {
            __CrestBranch(94455, 61435, 0);

          }
          }
          }
        } else {
          __CrestBranch(94450, 61436, 0);

        }
        }
        }
      } else {
        __CrestBranch(94438, 61437, 0);

      }
      }
      }
    } else {
      __CrestBranch(94433, 61438, 0);

    }
    }
    }
# 1359 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1361 "xmltok_impl.c"
    ptr += 2;
# 1362 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
  }
  while_break: ;
  }
  __CrestLoad(94467, (unsigned long )0, (long long )-1);
  __CrestStore(94468, (unsigned long )(& __retres22));
# 1365 "xmltok_impl.c"
  __retres22 = -1;
  return_label:
  {
  __CrestLoad(94469, (unsigned long )(& __retres22), (long long )__retres22);
  __CrestReturn(94470);
# 1317 "xmltok_impl.c"
  return (__retres22);
  }
}
}
# 1370 "xmltok_impl.c"
static int big2_isPublicId(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **badPtr )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  int __retres20 ;

  {
  __CrestCall(94471, 921);
# 1374 "xmltok_impl.c"
  ptr += 2;
# 1375 "xmltok_impl.c"
  end -= 2;
  {
# 1376 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(94474, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(94473, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(94472, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1376 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(94475, 61451, 1);

    } else {
      __CrestBranch(94476, 61452, 0);
# 1376 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1377 "xmltok_impl.c"
    mem_9 = ptr + 0;
    {
    __CrestLoad(94479, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(94478, (unsigned long )0, (long long )0);
    __CrestApply2(94477, 12, (long long )((int const )*mem_9 == 0));
# 1377 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(94480, 61456, 1);
# 1377 "xmltok_impl.c"
      mem_10 = ptr + 1;
# 1377 "xmltok_impl.c"
      mem_11 = (struct normal_encoding *)enc;
      __CrestLoad(94482, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                  (long long )mem_11->type[(unsigned char )*mem_10]);
      __CrestStore(94483, (unsigned long )(& tmp___0));
# 1377 "xmltok_impl.c"
      tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
    } else {
      __CrestBranch(94481, 61457, 0);
# 1377 "xmltok_impl.c"
      mem_12 = ptr + 0;
# 1377 "xmltok_impl.c"
      mem_13 = ptr + 1;
      __CrestLoad(94484, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(94485, (unsigned long )mem_13, (long long )*mem_13);
# 1377 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
      __CrestHandleReturn(94487, (long long )tmp);
      __CrestStore(94486, (unsigned long )(& tmp));
      __CrestLoad(94488, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(94489, (unsigned long )(& tmp___0));
# 1377 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(94492, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94491, (unsigned long )0, (long long )23);
    __CrestApply2(94490, 12, (long long )(tmp___0 == 23));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(94493, 61460, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94494, 61461, 0);

    }
    }
    {
    __CrestLoad(94497, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94496, (unsigned long )0, (long long )19);
    __CrestApply2(94495, 12, (long long )(tmp___0 == 19));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 19) {
      __CrestBranch(94498, 61463, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94499, 61464, 0);

    }
    }
    {
    __CrestLoad(94502, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94501, (unsigned long )0, (long long )30);
    __CrestApply2(94500, 12, (long long )(tmp___0 == 30));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 30) {
      __CrestBranch(94503, 61466, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94504, 61467, 0);

    }
    }
    {
    __CrestLoad(94507, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94506, (unsigned long )0, (long long )33);
    __CrestApply2(94505, 12, (long long )(tmp___0 == 33));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 33) {
      __CrestBranch(94508, 61469, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94509, 61470, 0);

    }
    }
    {
    __CrestLoad(94512, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94511, (unsigned long )0, (long long )16);
    __CrestApply2(94510, 12, (long long )(tmp___0 == 16));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 16) {
      __CrestBranch(94513, 61472, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94514, 61473, 0);

    }
    }
    {
    __CrestLoad(94517, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94516, (unsigned long )0, (long long )18);
    __CrestApply2(94515, 12, (long long )(tmp___0 == 18));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 18) {
      __CrestBranch(94518, 61475, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94519, 61476, 0);

    }
    }
    {
    __CrestLoad(94522, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94521, (unsigned long )0, (long long )10);
    __CrestApply2(94520, 12, (long long )(tmp___0 == 10));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(94523, 61478, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94524, 61479, 0);

    }
    }
    {
    __CrestLoad(94527, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94526, (unsigned long )0, (long long )9);
    __CrestApply2(94525, 12, (long long )(tmp___0 == 9));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(94528, 61481, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94529, 61482, 0);

    }
    }
    {
    __CrestLoad(94532, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94531, (unsigned long )0, (long long )15);
    __CrestApply2(94530, 12, (long long )(tmp___0 == 15));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 15) {
      __CrestBranch(94533, 61484, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94534, 61485, 0);

    }
    }
    {
    __CrestLoad(94537, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94536, (unsigned long )0, (long long )14);
    __CrestApply2(94535, 12, (long long )(tmp___0 == 14));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 14) {
      __CrestBranch(94538, 61487, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94539, 61488, 0);

    }
    }
    {
    __CrestLoad(94542, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94541, (unsigned long )0, (long long )17);
    __CrestApply2(94540, 12, (long long )(tmp___0 == 17));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 17) {
      __CrestBranch(94543, 61490, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94544, 61491, 0);

    }
    }
    {
    __CrestLoad(94547, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94546, (unsigned long )0, (long long )35);
    __CrestApply2(94545, 12, (long long )(tmp___0 == 35));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 35) {
      __CrestBranch(94548, 61493, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94549, 61494, 0);

    }
    }
    {
    __CrestLoad(94552, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94551, (unsigned long )0, (long long )34);
    __CrestApply2(94550, 12, (long long )(tmp___0 == 34));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 34) {
      __CrestBranch(94553, 61496, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94554, 61497, 0);

    }
    }
    {
    __CrestLoad(94557, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94556, (unsigned long )0, (long long )32);
    __CrestApply2(94555, 12, (long long )(tmp___0 == 32));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 32) {
      __CrestBranch(94558, 61499, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94559, 61500, 0);

    }
    }
    {
    __CrestLoad(94562, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94561, (unsigned long )0, (long long )31);
    __CrestApply2(94560, 12, (long long )(tmp___0 == 31));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 31) {
      __CrestBranch(94563, 61502, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94564, 61503, 0);

    }
    }
    {
    __CrestLoad(94567, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94566, (unsigned long )0, (long long )13);
    __CrestApply2(94565, 12, (long long )(tmp___0 == 13));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 13) {
      __CrestBranch(94568, 61505, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94569, 61506, 0);

    }
    }
    {
    __CrestLoad(94572, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94571, (unsigned long )0, (long long )27);
    __CrestApply2(94570, 12, (long long )(tmp___0 == 27));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(94573, 61508, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94574, 61509, 0);

    }
    }
    {
    __CrestLoad(94577, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94576, (unsigned long )0, (long long )24);
    __CrestApply2(94575, 12, (long long )(tmp___0 == 24));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(94578, 61511, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94579, 61512, 0);

    }
    }
    {
    __CrestLoad(94582, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94581, (unsigned long )0, (long long )25);
    __CrestApply2(94580, 12, (long long )(tmp___0 == 25));
# 1397 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(94583, 61514, 1);
# 1397 "xmltok_impl.c"
      goto case_23;
    } else {
      __CrestBranch(94584, 61515, 0);

    }
    }
    {
    __CrestLoad(94587, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94586, (unsigned long )0, (long long )21);
    __CrestApply2(94585, 12, (long long )(tmp___0 == 21));
# 1400 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(94588, 61517, 1);
# 1400 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(94589, 61518, 0);

    }
    }
    {
    __CrestLoad(94592, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94591, (unsigned long )0, (long long )22);
    __CrestApply2(94590, 12, (long long )(tmp___0 == 22));
# 1407 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(94593, 61520, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(94594, 61521, 0);

    }
    }
    {
    __CrestLoad(94597, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94596, (unsigned long )0, (long long )26);
    __CrestApply2(94595, 12, (long long )(tmp___0 == 26));
# 1407 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(94598, 61523, 1);
# 1407 "xmltok_impl.c"
      goto case_22;
    } else {
      __CrestBranch(94599, 61524, 0);

    }
    }
# 1410 "xmltok_impl.c"
    goto switch_default;
    case_23:
    case_19:
    case_30:
    case_33:
    case_16:
    case_18:
    case_10:
    case_9:
    case_15:
    case_14:
    case_17:
    case_35:
    case_34:
    case_32:
    case_31:
    case_13:
    case_27:
    case_24:
    case_25:
# 1399 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
# 1401 "xmltok_impl.c"
    mem_14 = ptr + 0;
    {
    __CrestLoad(94602, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(94601, (unsigned long )0, (long long )0);
    __CrestApply2(94600, 12, (long long )((int const )*mem_14 == 0));
# 1401 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(94603, 61530, 1);
      {
# 1401 "xmltok_impl.c"
      mem_15 = ptr + 1;
      {
      __CrestLoad(94607, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(94606, (unsigned long )0, (long long )9);
      __CrestApply2(94605, 12, (long long )((int const )*mem_15 == 9));
# 1401 "xmltok_impl.c"
      if ((int const )*mem_15 == 9) {
        __CrestBranch(94608, 61533, 1);
# 1402 "xmltok_impl.c"
        *badPtr = ptr;
        __CrestLoad(94610, (unsigned long )0, (long long )0);
        __CrestStore(94611, (unsigned long )(& __retres20));
# 1403 "xmltok_impl.c"
        __retres20 = 0;
# 1403 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(94609, 61536, 0);

      }
      }
      }
    } else {
      __CrestBranch(94604, 61537, 0);

    }
    }
    }
# 1405 "xmltok_impl.c"
    goto switch_break;
    case_22:
    case_26:
    {
# 1408 "xmltok_impl.c"
    mem_16 = ptr + 0;
    {
    __CrestLoad(94614, (unsigned long )mem_16, (long long )*mem_16);
    __CrestLoad(94613, (unsigned long )0, (long long )0);
    __CrestApply2(94612, 12, (long long )((int const )*mem_16 == 0));
# 1408 "xmltok_impl.c"
    if ((int const )*mem_16 == 0) {
      __CrestBranch(94615, 61542, 1);
# 1408 "xmltok_impl.c"
      mem_17 = ptr + 1;
      __CrestLoad(94617, (unsigned long )mem_17, (long long )*mem_17);
      __CrestStore(94618, (unsigned long )(& tmp___1));
# 1408 "xmltok_impl.c"
      tmp___1 = (int const )*mem_17;
    } else {
      __CrestBranch(94616, 61543, 0);
      __CrestLoad(94619, (unsigned long )0, (long long )((int const )-1));
      __CrestStore(94620, (unsigned long )(& tmp___1));
# 1408 "xmltok_impl.c"
      tmp___1 = (int const )-1;
    }
    }
    }
    {
    __CrestLoad(94625, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(94624, (unsigned long )0, (long long )-128);
    __CrestApply2(94623, 5, (long long )(tmp___1 & -128));
    __CrestLoad(94622, (unsigned long )0, (long long )0);
    __CrestApply2(94621, 13, (long long )((tmp___1 & -128) != 0));
# 1408 "xmltok_impl.c"
    if ((tmp___1 & -128) != 0) {
      __CrestBranch(94626, 61545, 1);

    } else {
      __CrestBranch(94627, 61546, 0);
# 1409 "xmltok_impl.c"
      goto switch_break;
    }
    }
    switch_default:
    {
# 1411 "xmltok_impl.c"
    mem_18 = ptr + 0;
    {
    __CrestLoad(94630, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(94629, (unsigned long )0, (long long )0);
    __CrestApply2(94628, 12, (long long )((int const )*mem_18 == 0));
# 1411 "xmltok_impl.c"
    if ((int const )*mem_18 == 0) {
      __CrestBranch(94631, 61550, 1);
# 1411 "xmltok_impl.c"
      mem_19 = ptr + 1;
      __CrestLoad(94633, (unsigned long )mem_19, (long long )*mem_19);
      __CrestStore(94634, (unsigned long )(& tmp___2));
# 1411 "xmltok_impl.c"
      tmp___2 = (int const )*mem_19;
    } else {
      __CrestBranch(94632, 61551, 0);
      __CrestLoad(94635, (unsigned long )0, (long long )((int const )-1));
      __CrestStore(94636, (unsigned long )(& tmp___2));
# 1411 "xmltok_impl.c"
      tmp___2 = (int const )-1;
    }
    }
    }
    {
    {
    __CrestLoad(94639, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(94638, (unsigned long )0, (long long )64);
    __CrestApply2(94637, 12, (long long )(tmp___2 == 64));
# 1413 "xmltok_impl.c"
    if (tmp___2 == 64) {
      __CrestBranch(94640, 61554, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(94641, 61555, 0);

    }
    }
    {
    __CrestLoad(94644, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(94643, (unsigned long )0, (long long )36);
    __CrestApply2(94642, 12, (long long )(tmp___2 == 36));
# 1413 "xmltok_impl.c"
    if (tmp___2 == 36) {
      __CrestBranch(94645, 61557, 1);
# 1413 "xmltok_impl.c"
      goto case_64;
    } else {
      __CrestBranch(94646, 61558, 0);

    }
    }
# 1415 "xmltok_impl.c"
    goto switch_default___0;
    case_64:
    case_36:
# 1414 "xmltok_impl.c"
    goto switch_break___0;
    switch_default___0:
# 1416 "xmltok_impl.c"
    *badPtr = ptr;
    __CrestLoad(94647, (unsigned long )0, (long long )0);
    __CrestStore(94648, (unsigned long )(& __retres20));
# 1417 "xmltok_impl.c"
    __retres20 = 0;
# 1417 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
# 1419 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
# 1376 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
  __CrestLoad(94649, (unsigned long )0, (long long )1);
  __CrestStore(94650, (unsigned long )(& __retres20));
# 1422 "xmltok_impl.c"
  __retres20 = 1;
  return_label:
  {
  __CrestLoad(94651, (unsigned long )(& __retres20), (long long )__retres20);
  __CrestReturn(94652);
# 1370 "xmltok_impl.c"
  return (__retres20);
  }
}
}
# 1430 "xmltok_impl.c"
static int big2_getAtts(ENCODING const *enc , char const *ptr , int attsMax ,
                        ATTRIBUTE *atts )
{
  enum __anonenum_state_1045544530 state ;
  int nAtts ;
  int open ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  ATTRIBUTE *mem_19 ;
  ATTRIBUTE *mem_20 ;
  ATTRIBUTE *mem_21 ;
  ATTRIBUTE *mem_22 ;
  ATTRIBUTE *mem_23 ;
  ATTRIBUTE *mem_24 ;
  ATTRIBUTE *mem_25 ;
  ATTRIBUTE *mem_26 ;
  ATTRIBUTE *mem_27 ;
  ATTRIBUTE *mem_28 ;
  ATTRIBUTE *mem_29 ;
  ATTRIBUTE *mem_30 ;
  ATTRIBUTE *mem_31 ;
  ATTRIBUTE *mem_32 ;
  ATTRIBUTE *mem_33 ;
  ATTRIBUTE *mem_34 ;
  char const *mem_35 ;
  char const *mem_36 ;
  ATTRIBUTE *mem_37 ;
  char const *mem_38 ;
  char const *mem_39 ;
  ATTRIBUTE *mem_40 ;
  char const *mem_41 ;
  char const *mem_42 ;
  struct normal_encoding *mem_43 ;
  char const *mem_44 ;
  char const *mem_45 ;
  ATTRIBUTE *mem_46 ;
  ATTRIBUTE *mem_47 ;
  int __retres48 ;

  {
  __CrestCall(94654, 922);
  __CrestStore(94653, (unsigned long )(& attsMax));
  __CrestLoad(94655, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )1));
  __CrestStore(94656, (unsigned long )(& state));
# 1434 "xmltok_impl.c"
  state = (enum __anonenum_state_1045544530 )1;
  __CrestLoad(94657, (unsigned long )0, (long long )0);
  __CrestStore(94658, (unsigned long )(& nAtts));
# 1435 "xmltok_impl.c"
  nAtts = 0;
  __CrestLoad(94659, (unsigned long )0, (long long )0);
  __CrestStore(94660, (unsigned long )(& open));
# 1436 "xmltok_impl.c"
  open = 0;
# 1439 "xmltok_impl.c"
  ptr += 2;
  {
# 1439 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1440 "xmltok_impl.c"
    mem_14 = ptr + 0;
    {
    __CrestLoad(94663, (unsigned long )mem_14, (long long )*mem_14);
    __CrestLoad(94662, (unsigned long )0, (long long )0);
    __CrestApply2(94661, 12, (long long )((int const )*mem_14 == 0));
# 1440 "xmltok_impl.c"
    if ((int const )*mem_14 == 0) {
      __CrestBranch(94664, 61578, 1);
# 1440 "xmltok_impl.c"
      mem_15 = ptr + 1;
# 1440 "xmltok_impl.c"
      mem_16 = (struct normal_encoding *)enc;
      __CrestLoad(94666, (unsigned long )(& mem_16->type[(unsigned char )*mem_15]),
                  (long long )mem_16->type[(unsigned char )*mem_15]);
      __CrestStore(94667, (unsigned long )(& tmp___0));
# 1440 "xmltok_impl.c"
      tmp___0 = (int )mem_16->type[(unsigned char )*mem_15];
    } else {
      __CrestBranch(94665, 61579, 0);
# 1440 "xmltok_impl.c"
      mem_17 = ptr + 0;
# 1440 "xmltok_impl.c"
      mem_18 = ptr + 1;
      __CrestLoad(94668, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(94669, (unsigned long )mem_18, (long long )*mem_18);
# 1440 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_17, (char )*mem_18);
      __CrestHandleReturn(94671, (long long )tmp);
      __CrestStore(94670, (unsigned long )(& tmp));
      __CrestLoad(94672, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(94673, (unsigned long )(& tmp___0));
# 1440 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(94676, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94675, (unsigned long )0, (long long )5);
    __CrestApply2(94674, 12, (long long )(tmp___0 == 5));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(94677, 61582, 1);
# 1451 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(94678, 61583, 0);

    }
    }
    {
    __CrestLoad(94681, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94680, (unsigned long )0, (long long )6);
    __CrestApply2(94679, 12, (long long )(tmp___0 == 6));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(94682, 61585, 1);
# 1451 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(94683, 61586, 0);

    }
    }
    {
    __CrestLoad(94686, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94685, (unsigned long )0, (long long )7);
    __CrestApply2(94684, 12, (long long )(tmp___0 == 7));
# 1451 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(94687, 61588, 1);
# 1451 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(94688, 61589, 0);

    }
    }
    {
    __CrestLoad(94691, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94690, (unsigned long )0, (long long )24);
    __CrestApply2(94689, 12, (long long )(tmp___0 == 24));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(94692, 61591, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(94693, 61592, 0);

    }
    }
    {
    __CrestLoad(94696, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94695, (unsigned long )0, (long long )22);
    __CrestApply2(94694, 12, (long long )(tmp___0 == 22));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(94697, 61594, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(94698, 61595, 0);

    }
    }
    {
    __CrestLoad(94701, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94700, (unsigned long )0, (long long )29);
    __CrestApply2(94699, 12, (long long )(tmp___0 == 29));
# 1455 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(94702, 61597, 1);
# 1455 "xmltok_impl.c"
      goto case_24;
    } else {
      __CrestBranch(94703, 61598, 0);

    }
    }
    {
    __CrestLoad(94706, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94705, (unsigned long )0, (long long )12);
    __CrestApply2(94704, 12, (long long )(tmp___0 == 12));
# 1459 "xmltok_impl.c"
    if (tmp___0 == 12) {
      __CrestBranch(94707, 61600, 1);
# 1459 "xmltok_impl.c"
      goto case_12;
    } else {
      __CrestBranch(94708, 61601, 0);

    }
    }
    {
    __CrestLoad(94711, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94710, (unsigned long )0, (long long )13);
    __CrestApply2(94709, 12, (long long )(tmp___0 == 13));
# 1473 "xmltok_impl.c"
    if (tmp___0 == 13) {
      __CrestBranch(94712, 61603, 1);
# 1473 "xmltok_impl.c"
      goto case_13;
    } else {
      __CrestBranch(94713, 61604, 0);

    }
    }
    {
    __CrestLoad(94716, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94715, (unsigned long )0, (long long )3);
    __CrestApply2(94714, 12, (long long )(tmp___0 == 3));
# 1487 "xmltok_impl.c"
    if (tmp___0 == 3) {
      __CrestBranch(94717, 61606, 1);
# 1487 "xmltok_impl.c"
      goto case_3;
    } else {
      __CrestBranch(94718, 61607, 0);

    }
    }
    {
    __CrestLoad(94721, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94720, (unsigned long )0, (long long )21);
    __CrestApply2(94719, 12, (long long )(tmp___0 == 21));
# 1491 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(94722, 61609, 1);
# 1491 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(94723, 61610, 0);

    }
    }
    {
    __CrestLoad(94726, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94725, (unsigned long )0, (long long )10);
    __CrestApply2(94724, 12, (long long )(tmp___0 == 10));
# 1503 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(94727, 61612, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(94728, 61613, 0);

    }
    }
    {
    __CrestLoad(94731, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94730, (unsigned long )0, (long long )9);
    __CrestApply2(94729, 12, (long long )(tmp___0 == 9));
# 1503 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(94732, 61615, 1);
# 1503 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(94733, 61616, 0);

    }
    }
    {
    __CrestLoad(94736, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94735, (unsigned long )0, (long long )17);
    __CrestApply2(94734, 12, (long long )(tmp___0 == 17));
# 1512 "xmltok_impl.c"
    if (tmp___0 == 17) {
      __CrestBranch(94737, 61618, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(94738, 61619, 0);

    }
    }
    {
    __CrestLoad(94741, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(94740, (unsigned long )0, (long long )11);
    __CrestApply2(94739, 12, (long long )(tmp___0 == 11));
# 1512 "xmltok_impl.c"
    if (tmp___0 == 11) {
      __CrestBranch(94742, 61621, 1);
# 1512 "xmltok_impl.c"
      goto case_17;
    } else {
      __CrestBranch(94743, 61622, 0);

    }
    }
# 1516 "xmltok_impl.c"
    goto switch_default;
    case_5:
    {
    __CrestLoad(94746, (unsigned long )(& state), (long long )state);
    __CrestLoad(94745, (unsigned long )0, (long long )0U);
    __CrestApply2(94744, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(94747, 61625, 1);
      {
      __CrestLoad(94751, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94750, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94749, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94752, 61626, 1);
# 1451 "xmltok_impl.c"
        mem_19 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_19->name = ptr;
# 1451 "xmltok_impl.c"
        mem_20 = atts + nAtts;
        __CrestLoad(94754, (unsigned long )0, (long long )(char)1);
        __CrestStore(94755, (unsigned long )(& mem_20->normalized));
# 1451 "xmltok_impl.c"
        mem_20->normalized = (char)1;
      } else {
        __CrestBranch(94753, 61627, 0);

      }
      }
      __CrestLoad(94756, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )1));
      __CrestStore(94757, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )1;
    } else {
      __CrestBranch(94748, 61629, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 0;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_6:
    {
    __CrestLoad(94760, (unsigned long )(& state), (long long )state);
    __CrestLoad(94759, (unsigned long )0, (long long )0U);
    __CrestApply2(94758, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(94761, 61633, 1);
      {
      __CrestLoad(94765, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94764, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94763, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94766, 61634, 1);
# 1451 "xmltok_impl.c"
        mem_21 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_21->name = ptr;
# 1451 "xmltok_impl.c"
        mem_22 = atts + nAtts;
        __CrestLoad(94768, (unsigned long )0, (long long )(char)1);
        __CrestStore(94769, (unsigned long )(& mem_22->normalized));
# 1451 "xmltok_impl.c"
        mem_22->normalized = (char)1;
      } else {
        __CrestBranch(94767, 61635, 0);

      }
      }
      __CrestLoad(94770, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )1));
      __CrestStore(94771, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )1;
    } else {
      __CrestBranch(94762, 61637, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr ++;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_7:
    {
    __CrestLoad(94774, (unsigned long )(& state), (long long )state);
    __CrestLoad(94773, (unsigned long )0, (long long )0U);
    __CrestApply2(94772, 12, (long long )((unsigned int )state == 0U));
# 1451 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(94775, 61641, 1);
      {
      __CrestLoad(94779, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94778, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94777, 16, (long long )(nAtts < attsMax));
# 1451 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94780, 61642, 1);
# 1451 "xmltok_impl.c"
        mem_23 = atts + nAtts;
# 1451 "xmltok_impl.c"
        mem_23->name = ptr;
# 1451 "xmltok_impl.c"
        mem_24 = atts + nAtts;
        __CrestLoad(94782, (unsigned long )0, (long long )(char)1);
        __CrestStore(94783, (unsigned long )(& mem_24->normalized));
# 1451 "xmltok_impl.c"
        mem_24->normalized = (char)1;
      } else {
        __CrestBranch(94781, 61643, 0);

      }
      }
      __CrestLoad(94784, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )1));
      __CrestStore(94785, (unsigned long )(& state));
# 1451 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )1;
    } else {
      __CrestBranch(94776, 61645, 0);

    }
    }
# 1451 "xmltok_impl.c"
    ptr += 2;
# 1451 "xmltok_impl.c"
    goto switch_break;
    case_24:
    case_22:
    case_29:
    {
    __CrestLoad(94788, (unsigned long )(& state), (long long )state);
    __CrestLoad(94787, (unsigned long )0, (long long )0U);
    __CrestApply2(94786, 12, (long long )((unsigned int )state == 0U));
# 1456 "xmltok_impl.c"
    if ((unsigned int )state == 0U) {
      __CrestBranch(94789, 61649, 1);
      {
      __CrestLoad(94793, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94792, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94791, 16, (long long )(nAtts < attsMax));
# 1456 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94794, 61650, 1);
# 1456 "xmltok_impl.c"
        mem_25 = atts + nAtts;
# 1456 "xmltok_impl.c"
        mem_25->name = ptr;
# 1456 "xmltok_impl.c"
        mem_26 = atts + nAtts;
        __CrestLoad(94796, (unsigned long )0, (long long )(char)1);
        __CrestStore(94797, (unsigned long )(& mem_26->normalized));
# 1456 "xmltok_impl.c"
        mem_26->normalized = (char)1;
      } else {
        __CrestBranch(94795, 61651, 0);

      }
      }
      __CrestLoad(94798, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )1));
      __CrestStore(94799, (unsigned long )(& state));
# 1456 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )1;
    } else {
      __CrestBranch(94790, 61653, 0);

    }
    }
# 1457 "xmltok_impl.c"
    goto switch_break;
    case_12:
    {
    __CrestLoad(94802, (unsigned long )(& state), (long long )state);
    __CrestLoad(94801, (unsigned long )0, (long long )2U);
    __CrestApply2(94800, 13, (long long )((unsigned int )state != 2U));
# 1460 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(94803, 61656, 1);
      {
      __CrestLoad(94807, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94806, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94805, 16, (long long )(nAtts < attsMax));
# 1461 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94808, 61657, 1);
# 1462 "xmltok_impl.c"
        mem_27 = atts + nAtts;
# 1462 "xmltok_impl.c"
        mem_27->valuePtr = ptr + 2;
      } else {
        __CrestBranch(94809, 61658, 0);

      }
      }
      __CrestLoad(94810, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )2));
      __CrestStore(94811, (unsigned long )(& state));
# 1463 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )2;
      __CrestLoad(94812, (unsigned long )0, (long long )12);
      __CrestStore(94813, (unsigned long )(& open));
# 1464 "xmltok_impl.c"
      open = 12;
    } else {
      __CrestBranch(94804, 61660, 0);
      {
      __CrestLoad(94816, (unsigned long )(& open), (long long )open);
      __CrestLoad(94815, (unsigned long )0, (long long )12);
      __CrestApply2(94814, 12, (long long )(open == 12));
# 1466 "xmltok_impl.c"
      if (open == 12) {
        __CrestBranch(94817, 61661, 1);
        __CrestLoad(94819, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )0));
        __CrestStore(94820, (unsigned long )(& state));
# 1467 "xmltok_impl.c"
        state = (enum __anonenum_state_1045544530 )0;
        {
        __CrestLoad(94823, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94822, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(94821, 16, (long long )(nAtts < attsMax));
# 1468 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(94824, 61663, 1);
# 1469 "xmltok_impl.c"
          mem_28 = atts + nAtts;
# 1469 "xmltok_impl.c"
          mem_28->valueEnd = ptr;
        } else {
          __CrestBranch(94825, 61664, 0);

        }
        }
        __CrestLoad(94828, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94827, (unsigned long )0, (long long )1);
        __CrestApply2(94826, 0, (long long )(nAtts + 1));
        __CrestStore(94829, (unsigned long )(& nAtts));
# 1470 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(94818, 61666, 0);

      }
      }
    }
    }
# 1472 "xmltok_impl.c"
    goto switch_break;
    case_13:
    {
    __CrestLoad(94832, (unsigned long )(& state), (long long )state);
    __CrestLoad(94831, (unsigned long )0, (long long )2U);
    __CrestApply2(94830, 13, (long long )((unsigned int )state != 2U));
# 1474 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(94833, 61669, 1);
      {
      __CrestLoad(94837, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestLoad(94836, (unsigned long )(& attsMax), (long long )attsMax);
      __CrestApply2(94835, 16, (long long )(nAtts < attsMax));
# 1475 "xmltok_impl.c"
      if (nAtts < attsMax) {
        __CrestBranch(94838, 61670, 1);
# 1476 "xmltok_impl.c"
        mem_29 = atts + nAtts;
# 1476 "xmltok_impl.c"
        mem_29->valuePtr = ptr + 2;
      } else {
        __CrestBranch(94839, 61671, 0);

      }
      }
      __CrestLoad(94840, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )2));
      __CrestStore(94841, (unsigned long )(& state));
# 1477 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )2;
      __CrestLoad(94842, (unsigned long )0, (long long )13);
      __CrestStore(94843, (unsigned long )(& open));
# 1478 "xmltok_impl.c"
      open = 13;
    } else {
      __CrestBranch(94834, 61673, 0);
      {
      __CrestLoad(94846, (unsigned long )(& open), (long long )open);
      __CrestLoad(94845, (unsigned long )0, (long long )13);
      __CrestApply2(94844, 12, (long long )(open == 13));
# 1480 "xmltok_impl.c"
      if (open == 13) {
        __CrestBranch(94847, 61674, 1);
        __CrestLoad(94849, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )0));
        __CrestStore(94850, (unsigned long )(& state));
# 1481 "xmltok_impl.c"
        state = (enum __anonenum_state_1045544530 )0;
        {
        __CrestLoad(94853, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94852, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(94851, 16, (long long )(nAtts < attsMax));
# 1482 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(94854, 61676, 1);
# 1483 "xmltok_impl.c"
          mem_30 = atts + nAtts;
# 1483 "xmltok_impl.c"
          mem_30->valueEnd = ptr;
        } else {
          __CrestBranch(94855, 61677, 0);

        }
        }
        __CrestLoad(94858, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94857, (unsigned long )0, (long long )1);
        __CrestApply2(94856, 0, (long long )(nAtts + 1));
        __CrestStore(94859, (unsigned long )(& nAtts));
# 1484 "xmltok_impl.c"
        nAtts ++;
      } else {
        __CrestBranch(94848, 61679, 0);

      }
      }
    }
    }
# 1486 "xmltok_impl.c"
    goto switch_break;
    case_3:
    {
    __CrestLoad(94862, (unsigned long )(& nAtts), (long long )nAtts);
    __CrestLoad(94861, (unsigned long )(& attsMax), (long long )attsMax);
    __CrestApply2(94860, 16, (long long )(nAtts < attsMax));
# 1488 "xmltok_impl.c"
    if (nAtts < attsMax) {
      __CrestBranch(94863, 61682, 1);
# 1489 "xmltok_impl.c"
      mem_31 = atts + nAtts;
      __CrestLoad(94865, (unsigned long )0, (long long )(char)0);
      __CrestStore(94866, (unsigned long )(& mem_31->normalized));
# 1489 "xmltok_impl.c"
      mem_31->normalized = (char)0;
    } else {
      __CrestBranch(94864, 61683, 0);

    }
    }
# 1490 "xmltok_impl.c"
    goto switch_break;
    case_21:
    {
    __CrestLoad(94869, (unsigned long )(& state), (long long )state);
    __CrestLoad(94868, (unsigned long )0, (long long )1U);
    __CrestApply2(94867, 12, (long long )((unsigned int )state == 1U));
# 1492 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(94870, 61686, 1);
      __CrestLoad(94872, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )0));
      __CrestStore(94873, (unsigned long )(& state));
# 1493 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )0;
    } else {
      __CrestBranch(94871, 61687, 0);
      {
      __CrestLoad(94876, (unsigned long )(& state), (long long )state);
      __CrestLoad(94875, (unsigned long )0, (long long )2U);
      __CrestApply2(94874, 12, (long long )((unsigned int )state == 2U));
# 1494 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(94877, 61688, 1);
        {
        __CrestLoad(94881, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94880, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(94879, 16, (long long )(nAtts < attsMax));
# 1494 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(94882, 61689, 1);
          {
# 1494 "xmltok_impl.c"
          mem_32 = atts + nAtts;
          {
          __CrestLoad(94886, (unsigned long )(& mem_32->normalized), (long long )mem_32->normalized);
          __CrestLoad(94885, (unsigned long )0, (long long )0);
          __CrestApply2(94884, 13, (long long )(mem_32->normalized != 0));
# 1494 "xmltok_impl.c"
          if (mem_32->normalized != 0) {
            __CrestBranch(94887, 61692, 1);
            {
# 1494 "xmltok_impl.c"
            mem_33 = atts + nAtts;
            {
            __CrestLoad(94891, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
            __CrestLoad(94890, (unsigned long )(& mem_33->valuePtr), (long long )((unsigned long )mem_33->valuePtr));
            __CrestApply2(94889, 12, (long long )((unsigned long )ptr == (unsigned long )mem_33->valuePtr));
# 1494 "xmltok_impl.c"
            if ((unsigned long )ptr == (unsigned long )mem_33->valuePtr) {
              __CrestBranch(94892, 61695, 1);
# 1501 "xmltok_impl.c"
              mem_34 = atts + nAtts;
              __CrestLoad(94894, (unsigned long )0, (long long )(char)0);
              __CrestStore(94895, (unsigned long )(& mem_34->normalized));
# 1501 "xmltok_impl.c"
              mem_34->normalized = (char)0;
            } else {
              __CrestBranch(94893, 61696, 0);
              {
# 1494 "xmltok_impl.c"
              mem_35 = ptr + 0;
              {
              __CrestLoad(94898, (unsigned long )mem_35, (long long )*mem_35);
              __CrestLoad(94897, (unsigned long )0, (long long )0);
              __CrestApply2(94896, 12, (long long )((int const )*mem_35 == 0));
# 1494 "xmltok_impl.c"
              if ((int const )*mem_35 == 0) {
                __CrestBranch(94899, 61699, 1);
# 1494 "xmltok_impl.c"
                mem_36 = ptr + 1;
                __CrestLoad(94901, (unsigned long )mem_36, (long long )*mem_36);
                __CrestStore(94902, (unsigned long )(& tmp___1));
# 1494 "xmltok_impl.c"
                tmp___1 = (int const )*mem_36;
              } else {
                __CrestBranch(94900, 61700, 0);
                __CrestLoad(94903, (unsigned long )0, (long long )((int const )-1));
                __CrestStore(94904, (unsigned long )(& tmp___1));
# 1494 "xmltok_impl.c"
                tmp___1 = (int const )-1;
              }
              }
              }
              {
              __CrestLoad(94907, (unsigned long )(& tmp___1), (long long )tmp___1);
              __CrestLoad(94906, (unsigned long )0, (long long )32);
              __CrestApply2(94905, 13, (long long )(tmp___1 != 32));
# 1494 "xmltok_impl.c"
              if (tmp___1 != 32) {
                __CrestBranch(94908, 61702, 1);
# 1501 "xmltok_impl.c"
                mem_37 = atts + nAtts;
                __CrestLoad(94910, (unsigned long )0, (long long )(char)0);
                __CrestStore(94911, (unsigned long )(& mem_37->normalized));
# 1501 "xmltok_impl.c"
                mem_37->normalized = (char)0;
              } else {
                __CrestBranch(94909, 61703, 0);
                {
# 1494 "xmltok_impl.c"
                mem_38 = (ptr + 2) + 0;
                {
                __CrestLoad(94914, (unsigned long )mem_38, (long long )*mem_38);
                __CrestLoad(94913, (unsigned long )0, (long long )0);
                __CrestApply2(94912, 12, (long long )((int const )*mem_38 == 0));
# 1494 "xmltok_impl.c"
                if ((int const )*mem_38 == 0) {
                  __CrestBranch(94915, 61706, 1);
# 1494 "xmltok_impl.c"
                  mem_39 = (ptr + 2) + 1;
                  __CrestLoad(94917, (unsigned long )mem_39, (long long )*mem_39);
                  __CrestStore(94918, (unsigned long )(& tmp___2));
# 1494 "xmltok_impl.c"
                  tmp___2 = (int const )*mem_39;
                } else {
                  __CrestBranch(94916, 61707, 0);
                  __CrestLoad(94919, (unsigned long )0, (long long )((int const )-1));
                  __CrestStore(94920, (unsigned long )(& tmp___2));
# 1494 "xmltok_impl.c"
                  tmp___2 = (int const )-1;
                }
                }
                }
                {
                __CrestLoad(94923, (unsigned long )(& tmp___2), (long long )tmp___2);
                __CrestLoad(94922, (unsigned long )0, (long long )32);
                __CrestApply2(94921, 12, (long long )(tmp___2 == 32));
# 1494 "xmltok_impl.c"
                if (tmp___2 == 32) {
                  __CrestBranch(94924, 61709, 1);
# 1501 "xmltok_impl.c"
                  mem_40 = atts + nAtts;
                  __CrestLoad(94926, (unsigned long )0, (long long )(char)0);
                  __CrestStore(94927, (unsigned long )(& mem_40->normalized));
# 1501 "xmltok_impl.c"
                  mem_40->normalized = (char)0;
                } else {
                  __CrestBranch(94925, 61710, 0);
                  {
# 1494 "xmltok_impl.c"
                  mem_41 = (ptr + 2) + 0;
                  {
                  __CrestLoad(94930, (unsigned long )mem_41, (long long )*mem_41);
                  __CrestLoad(94929, (unsigned long )0, (long long )0);
                  __CrestApply2(94928, 12, (long long )((int const )*mem_41 == 0));
# 1494 "xmltok_impl.c"
                  if ((int const )*mem_41 == 0) {
                    __CrestBranch(94931, 61713, 1);
# 1494 "xmltok_impl.c"
                    mem_42 = (ptr + 2) + 1;
# 1494 "xmltok_impl.c"
                    mem_43 = (struct normal_encoding *)enc;
                    __CrestLoad(94933, (unsigned long )(& mem_43->type[(unsigned char )*mem_42]),
                                (long long )mem_43->type[(unsigned char )*mem_42]);
                    __CrestStore(94934, (unsigned long )(& tmp___4));
# 1494 "xmltok_impl.c"
                    tmp___4 = (int )mem_43->type[(unsigned char )*mem_42];
                  } else {
                    __CrestBranch(94932, 61714, 0);
# 1494 "xmltok_impl.c"
                    mem_44 = (ptr + 2) + 0;
# 1494 "xmltok_impl.c"
                    mem_45 = (ptr + 2) + 1;
                    __CrestLoad(94935, (unsigned long )mem_44, (long long )*mem_44);
                    __CrestLoad(94936, (unsigned long )mem_45, (long long )*mem_45);
# 1494 "xmltok_impl.c"
                    tmp___3 = unicode_byte_type((char )*mem_44, (char )*mem_45);
                    __CrestHandleReturn(94938, (long long )tmp___3);
                    __CrestStore(94937, (unsigned long )(& tmp___3));
                    __CrestLoad(94939, (unsigned long )(& tmp___3), (long long )tmp___3);
                    __CrestStore(94940, (unsigned long )(& tmp___4));
# 1494 "xmltok_impl.c"
                    tmp___4 = tmp___3;
                  }
                  }
                  }
                  {
                  __CrestLoad(94943, (unsigned long )(& tmp___4), (long long )tmp___4);
                  __CrestLoad(94942, (unsigned long )(& open), (long long )open);
                  __CrestApply2(94941, 12, (long long )(tmp___4 == open));
# 1494 "xmltok_impl.c"
                  if (tmp___4 == open) {
                    __CrestBranch(94944, 61716, 1);
# 1501 "xmltok_impl.c"
                    mem_46 = atts + nAtts;
                    __CrestLoad(94946, (unsigned long )0, (long long )(char)0);
                    __CrestStore(94947, (unsigned long )(& mem_46->normalized));
# 1501 "xmltok_impl.c"
                    mem_46->normalized = (char)0;
                  } else {
                    __CrestBranch(94945, 61717, 0);

                  }
                  }
                }
                }
              }
              }
            }
            }
            }
          } else {
            __CrestBranch(94888, 61718, 0);

          }
          }
          }
        } else {
          __CrestBranch(94883, 61719, 0);

        }
        }
      } else {
        __CrestBranch(94878, 61720, 0);

      }
      }
    }
    }
# 1502 "xmltok_impl.c"
    goto switch_break;
    case_10:
    case_9:
    {
    __CrestLoad(94950, (unsigned long )(& state), (long long )state);
    __CrestLoad(94949, (unsigned long )0, (long long )1U);
    __CrestApply2(94948, 12, (long long )((unsigned int )state == 1U));
# 1506 "xmltok_impl.c"
    if ((unsigned int )state == 1U) {
      __CrestBranch(94951, 61723, 1);
      __CrestLoad(94953, (unsigned long )0, (long long )((enum __anonenum_state_1045544530 )0));
      __CrestStore(94954, (unsigned long )(& state));
# 1507 "xmltok_impl.c"
      state = (enum __anonenum_state_1045544530 )0;
    } else {
      __CrestBranch(94952, 61724, 0);
      {
      __CrestLoad(94957, (unsigned long )(& state), (long long )state);
      __CrestLoad(94956, (unsigned long )0, (long long )2U);
      __CrestApply2(94955, 12, (long long )((unsigned int )state == 2U));
# 1508 "xmltok_impl.c"
      if ((unsigned int )state == 2U) {
        __CrestBranch(94958, 61725, 1);
        {
        __CrestLoad(94962, (unsigned long )(& nAtts), (long long )nAtts);
        __CrestLoad(94961, (unsigned long )(& attsMax), (long long )attsMax);
        __CrestApply2(94960, 16, (long long )(nAtts < attsMax));
# 1508 "xmltok_impl.c"
        if (nAtts < attsMax) {
          __CrestBranch(94963, 61726, 1);
# 1509 "xmltok_impl.c"
          mem_47 = atts + nAtts;
          __CrestLoad(94965, (unsigned long )0, (long long )(char)0);
          __CrestStore(94966, (unsigned long )(& mem_47->normalized));
# 1509 "xmltok_impl.c"
          mem_47->normalized = (char)0;
        } else {
          __CrestBranch(94964, 61727, 0);

        }
        }
      } else {
        __CrestBranch(94959, 61728, 0);

      }
      }
    }
    }
# 1510 "xmltok_impl.c"
    goto switch_break;
    case_17:
    case_11:
    {
    __CrestLoad(94969, (unsigned long )(& state), (long long )state);
    __CrestLoad(94968, (unsigned long )0, (long long )2U);
    __CrestApply2(94967, 13, (long long )((unsigned int )state != 2U));
# 1513 "xmltok_impl.c"
    if ((unsigned int )state != 2U) {
      __CrestBranch(94970, 61731, 1);
      __CrestLoad(94972, (unsigned long )(& nAtts), (long long )nAtts);
      __CrestStore(94973, (unsigned long )(& __retres48));
# 1514 "xmltok_impl.c"
      __retres48 = nAtts;
# 1514 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(94971, 61733, 0);

    }
    }
# 1515 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1517 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
# 1439 "xmltok_impl.c"
    ptr += 2;
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(94974, (unsigned long )(& __retres48), (long long )__retres48);
  __CrestReturn(94975);
# 1430 "xmltok_impl.c"
  return (__retres48);
  }
}
}
# 1523 "xmltok_impl.c"
static int big2_charRefNumber(ENCODING const *enc , char const *ptr )
{
  int result ;
  int c ;
  int tmp ;
  int c___0 ;
  int tmp___0 ;
  int tmp___1 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  int __retres19 ;

  {
  __CrestCall(94976, 923);

  __CrestLoad(94977, (unsigned long )0, (long long )0);
  __CrestStore(94978, (unsigned long )(& result));
# 1526 "xmltok_impl.c"
  result = 0;
# 1528 "xmltok_impl.c"
  ptr += 4;
  {
# 1529 "xmltok_impl.c"
  mem_9 = ptr + 0;
  {
  __CrestLoad(94981, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(94980, (unsigned long )0, (long long )0);
  __CrestApply2(94979, 12, (long long )((int const )*mem_9 == 0));
# 1529 "xmltok_impl.c"
  if ((int const )*mem_9 == 0) {
    __CrestBranch(94982, 61744, 1);
    {
# 1529 "xmltok_impl.c"
    mem_10 = ptr + 1;
    {
    __CrestLoad(94986, (unsigned long )mem_10, (long long )*mem_10);
    __CrestLoad(94985, (unsigned long )0, (long long )120);
    __CrestApply2(94984, 12, (long long )((int const )*mem_10 == 120));
# 1529 "xmltok_impl.c"
    if ((int const )*mem_10 == 120) {
      __CrestBranch(94987, 61747, 1);
# 1530 "xmltok_impl.c"
      ptr += 2;
      {
# 1530 "xmltok_impl.c"
      while (1) {
        while_continue: ;
        {
# 1530 "xmltok_impl.c"
        mem_11 = ptr + 0;
        {
        __CrestLoad(94991, (unsigned long )mem_11, (long long )*mem_11);
        __CrestLoad(94990, (unsigned long )0, (long long )0);
        __CrestApply2(94989, 12, (long long )((int const )*mem_11 == 0));
# 1530 "xmltok_impl.c"
        if ((int const )*mem_11 == 0) {
          __CrestBranch(94992, 61754, 1);
          {
# 1530 "xmltok_impl.c"
          mem_12 = ptr + 1;
          {
          __CrestLoad(94996, (unsigned long )mem_12, (long long )*mem_12);
          __CrestLoad(94995, (unsigned long )0, (long long )59);
          __CrestApply2(94994, 12, (long long )((int const )*mem_12 == 59));
# 1530 "xmltok_impl.c"
          if ((int const )*mem_12 == 59) {
            __CrestBranch(94997, 61757, 1);
# 1530 "xmltok_impl.c"
            goto while_break;
          } else {
            __CrestBranch(94998, 61758, 0);

          }
          }
          }
        } else {
          __CrestBranch(94993, 61759, 0);

        }
        }
        }
        {
# 1533 "xmltok_impl.c"
        mem_13 = ptr + 0;
        {
        __CrestLoad(95001, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(95000, (unsigned long )0, (long long )0);
        __CrestApply2(94999, 12, (long long )((int const )*mem_13 == 0));
# 1533 "xmltok_impl.c"
        if ((int const )*mem_13 == 0) {
          __CrestBranch(95002, 61763, 1);
# 1533 "xmltok_impl.c"
          mem_14 = ptr + 1;
          __CrestLoad(95004, (unsigned long )mem_14, (long long )*mem_14);
          __CrestStore(95005, (unsigned long )(& tmp));
# 1533 "xmltok_impl.c"
          tmp = (int const )*mem_14;
        } else {
          __CrestBranch(95003, 61764, 0);
          __CrestLoad(95006, (unsigned long )0, (long long )((int const )-1));
          __CrestStore(95007, (unsigned long )(& tmp));
# 1533 "xmltok_impl.c"
          tmp = (int const )-1;
        }
        }
        }
        __CrestLoad(95008, (unsigned long )(& tmp), (long long )tmp);
        __CrestStore(95009, (unsigned long )(& c));
# 1533 "xmltok_impl.c"
        c = (int )tmp;
        {
        {
        __CrestLoad(95012, (unsigned long )(& c), (long long )c);
        __CrestLoad(95011, (unsigned long )0, (long long )57);
        __CrestApply2(95010, 12, (long long )(c == 57));
# 1536 "xmltok_impl.c"
        if (c == 57) {
          __CrestBranch(95013, 61768, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95014, 61769, 0);

        }
        }
        {
        __CrestLoad(95017, (unsigned long )(& c), (long long )c);
        __CrestLoad(95016, (unsigned long )0, (long long )56);
        __CrestApply2(95015, 12, (long long )(c == 56));
# 1536 "xmltok_impl.c"
        if (c == 56) {
          __CrestBranch(95018, 61771, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95019, 61772, 0);

        }
        }
        {
        __CrestLoad(95022, (unsigned long )(& c), (long long )c);
        __CrestLoad(95021, (unsigned long )0, (long long )55);
        __CrestApply2(95020, 12, (long long )(c == 55));
# 1536 "xmltok_impl.c"
        if (c == 55) {
          __CrestBranch(95023, 61774, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95024, 61775, 0);

        }
        }
        {
        __CrestLoad(95027, (unsigned long )(& c), (long long )c);
        __CrestLoad(95026, (unsigned long )0, (long long )54);
        __CrestApply2(95025, 12, (long long )(c == 54));
# 1536 "xmltok_impl.c"
        if (c == 54) {
          __CrestBranch(95028, 61777, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95029, 61778, 0);

        }
        }
        {
        __CrestLoad(95032, (unsigned long )(& c), (long long )c);
        __CrestLoad(95031, (unsigned long )0, (long long )53);
        __CrestApply2(95030, 12, (long long )(c == 53));
# 1536 "xmltok_impl.c"
        if (c == 53) {
          __CrestBranch(95033, 61780, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95034, 61781, 0);

        }
        }
        {
        __CrestLoad(95037, (unsigned long )(& c), (long long )c);
        __CrestLoad(95036, (unsigned long )0, (long long )52);
        __CrestApply2(95035, 12, (long long )(c == 52));
# 1536 "xmltok_impl.c"
        if (c == 52) {
          __CrestBranch(95038, 61783, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95039, 61784, 0);

        }
        }
        {
        __CrestLoad(95042, (unsigned long )(& c), (long long )c);
        __CrestLoad(95041, (unsigned long )0, (long long )51);
        __CrestApply2(95040, 12, (long long )(c == 51));
# 1536 "xmltok_impl.c"
        if (c == 51) {
          __CrestBranch(95043, 61786, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95044, 61787, 0);

        }
        }
        {
        __CrestLoad(95047, (unsigned long )(& c), (long long )c);
        __CrestLoad(95046, (unsigned long )0, (long long )50);
        __CrestApply2(95045, 12, (long long )(c == 50));
# 1536 "xmltok_impl.c"
        if (c == 50) {
          __CrestBranch(95048, 61789, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95049, 61790, 0);

        }
        }
        {
        __CrestLoad(95052, (unsigned long )(& c), (long long )c);
        __CrestLoad(95051, (unsigned long )0, (long long )49);
        __CrestApply2(95050, 12, (long long )(c == 49));
# 1536 "xmltok_impl.c"
        if (c == 49) {
          __CrestBranch(95053, 61792, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95054, 61793, 0);

        }
        }
        {
        __CrestLoad(95057, (unsigned long )(& c), (long long )c);
        __CrestLoad(95056, (unsigned long )0, (long long )48);
        __CrestApply2(95055, 12, (long long )(c == 48));
# 1536 "xmltok_impl.c"
        if (c == 48) {
          __CrestBranch(95058, 61795, 1);
# 1536 "xmltok_impl.c"
          goto case_57;
        } else {
          __CrestBranch(95059, 61796, 0);

        }
        }
        {
        __CrestLoad(95062, (unsigned long )(& c), (long long )c);
        __CrestLoad(95061, (unsigned long )0, (long long )70);
        __CrestApply2(95060, 12, (long long )(c == 70));
# 1541 "xmltok_impl.c"
        if (c == 70) {
          __CrestBranch(95063, 61798, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95064, 61799, 0);

        }
        }
        {
        __CrestLoad(95067, (unsigned long )(& c), (long long )c);
        __CrestLoad(95066, (unsigned long )0, (long long )69);
        __CrestApply2(95065, 12, (long long )(c == 69));
# 1541 "xmltok_impl.c"
        if (c == 69) {
          __CrestBranch(95068, 61801, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95069, 61802, 0);

        }
        }
        {
        __CrestLoad(95072, (unsigned long )(& c), (long long )c);
        __CrestLoad(95071, (unsigned long )0, (long long )68);
        __CrestApply2(95070, 12, (long long )(c == 68));
# 1541 "xmltok_impl.c"
        if (c == 68) {
          __CrestBranch(95073, 61804, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95074, 61805, 0);

        }
        }
        {
        __CrestLoad(95077, (unsigned long )(& c), (long long )c);
        __CrestLoad(95076, (unsigned long )0, (long long )67);
        __CrestApply2(95075, 12, (long long )(c == 67));
# 1541 "xmltok_impl.c"
        if (c == 67) {
          __CrestBranch(95078, 61807, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95079, 61808, 0);

        }
        }
        {
        __CrestLoad(95082, (unsigned long )(& c), (long long )c);
        __CrestLoad(95081, (unsigned long )0, (long long )66);
        __CrestApply2(95080, 12, (long long )(c == 66));
# 1541 "xmltok_impl.c"
        if (c == 66) {
          __CrestBranch(95083, 61810, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95084, 61811, 0);

        }
        }
        {
        __CrestLoad(95087, (unsigned long )(& c), (long long )c);
        __CrestLoad(95086, (unsigned long )0, (long long )65);
        __CrestApply2(95085, 12, (long long )(c == 65));
# 1541 "xmltok_impl.c"
        if (c == 65) {
          __CrestBranch(95088, 61813, 1);
# 1541 "xmltok_impl.c"
          goto case_70;
        } else {
          __CrestBranch(95089, 61814, 0);

        }
        }
        {
        __CrestLoad(95092, (unsigned long )(& c), (long long )c);
        __CrestLoad(95091, (unsigned long )0, (long long )102);
        __CrestApply2(95090, 12, (long long )(c == 102));
# 1546 "xmltok_impl.c"
        if (c == 102) {
          __CrestBranch(95093, 61816, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95094, 61817, 0);

        }
        }
        {
        __CrestLoad(95097, (unsigned long )(& c), (long long )c);
        __CrestLoad(95096, (unsigned long )0, (long long )101);
        __CrestApply2(95095, 12, (long long )(c == 101));
# 1546 "xmltok_impl.c"
        if (c == 101) {
          __CrestBranch(95098, 61819, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95099, 61820, 0);

        }
        }
        {
        __CrestLoad(95102, (unsigned long )(& c), (long long )c);
        __CrestLoad(95101, (unsigned long )0, (long long )100);
        __CrestApply2(95100, 12, (long long )(c == 100));
# 1546 "xmltok_impl.c"
        if (c == 100) {
          __CrestBranch(95103, 61822, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95104, 61823, 0);

        }
        }
        {
        __CrestLoad(95107, (unsigned long )(& c), (long long )c);
        __CrestLoad(95106, (unsigned long )0, (long long )99);
        __CrestApply2(95105, 12, (long long )(c == 99));
# 1546 "xmltok_impl.c"
        if (c == 99) {
          __CrestBranch(95108, 61825, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95109, 61826, 0);

        }
        }
        {
        __CrestLoad(95112, (unsigned long )(& c), (long long )c);
        __CrestLoad(95111, (unsigned long )0, (long long )98);
        __CrestApply2(95110, 12, (long long )(c == 98));
# 1546 "xmltok_impl.c"
        if (c == 98) {
          __CrestBranch(95113, 61828, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95114, 61829, 0);

        }
        }
        {
        __CrestLoad(95117, (unsigned long )(& c), (long long )c);
        __CrestLoad(95116, (unsigned long )0, (long long )97);
        __CrestApply2(95115, 12, (long long )(c == 97));
# 1546 "xmltok_impl.c"
        if (c == 97) {
          __CrestBranch(95118, 61831, 1);
# 1546 "xmltok_impl.c"
          goto case_102;
        } else {
          __CrestBranch(95119, 61832, 0);

        }
        }
# 1534 "xmltok_impl.c"
        goto switch_break;
        case_57:
        case_56:
        case_55:
        case_54:
        case_53:
        case_52:
        case_51:
        case_50:
        case_49:
        case_48:
        __CrestLoad(95122, (unsigned long )(& result), (long long )result);
        __CrestLoad(95121, (unsigned long )0, (long long )4);
        __CrestApply2(95120, 8, (long long )(result << 4));
        __CrestStore(95123, (unsigned long )(& result));
# 1537 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(95128, (unsigned long )(& result), (long long )result);
        __CrestLoad(95127, (unsigned long )(& c), (long long )c);
        __CrestLoad(95126, (unsigned long )0, (long long )48);
        __CrestApply2(95125, 1, (long long )(c - 48));
        __CrestApply2(95124, 6, (long long )(result | (c - 48)));
        __CrestStore(95129, (unsigned long )(& result));
# 1538 "xmltok_impl.c"
        result |= c - 48;
# 1539 "xmltok_impl.c"
        goto switch_break;
        case_70:
        case_69:
        case_68:
        case_67:
        case_66:
        case_65:
        __CrestLoad(95132, (unsigned long )(& result), (long long )result);
        __CrestLoad(95131, (unsigned long )0, (long long )4);
        __CrestApply2(95130, 8, (long long )(result << 4));
        __CrestStore(95133, (unsigned long )(& result));
# 1542 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(95140, (unsigned long )(& result), (long long )result);
        __CrestLoad(95139, (unsigned long )0, (long long )10);
        __CrestLoad(95138, (unsigned long )(& c), (long long )c);
        __CrestLoad(95137, (unsigned long )0, (long long )65);
        __CrestApply2(95136, 1, (long long )(c - 65));
        __CrestApply2(95135, 0, (long long )(10 + (c - 65)));
        __CrestApply2(95134, 0, (long long )(result + (10 + (c - 65))));
        __CrestStore(95141, (unsigned long )(& result));
# 1543 "xmltok_impl.c"
        result += 10 + (c - 65);
# 1544 "xmltok_impl.c"
        goto switch_break;
        case_102:
        case_101:
        case_100:
        case_99:
        case_98:
        case_97:
        __CrestLoad(95144, (unsigned long )(& result), (long long )result);
        __CrestLoad(95143, (unsigned long )0, (long long )4);
        __CrestApply2(95142, 8, (long long )(result << 4));
        __CrestStore(95145, (unsigned long )(& result));
# 1547 "xmltok_impl.c"
        result <<= 4;
        __CrestLoad(95152, (unsigned long )(& result), (long long )result);
        __CrestLoad(95151, (unsigned long )0, (long long )10);
        __CrestLoad(95150, (unsigned long )(& c), (long long )c);
        __CrestLoad(95149, (unsigned long )0, (long long )97);
        __CrestApply2(95148, 1, (long long )(c - 97));
        __CrestApply2(95147, 0, (long long )(10 + (c - 97)));
        __CrestApply2(95146, 0, (long long )(result + (10 + (c - 97))));
        __CrestStore(95153, (unsigned long )(& result));
# 1548 "xmltok_impl.c"
        result += 10 + (c - 97);
# 1549 "xmltok_impl.c"
        goto switch_break;
        switch_break: ;
        }
        {
        __CrestLoad(95156, (unsigned long )(& result), (long long )result);
        __CrestLoad(95155, (unsigned long )0, (long long )1114112);
        __CrestApply2(95154, 17, (long long )(result >= 1114112));
# 1551 "xmltok_impl.c"
        if (result >= 1114112) {
          __CrestBranch(95157, 61842, 1);
          __CrestLoad(95159, (unsigned long )0, (long long )-1);
          __CrestStore(95160, (unsigned long )(& __retres19));
# 1552 "xmltok_impl.c"
          __retres19 = -1;
# 1552 "xmltok_impl.c"
          goto return_label;
        } else {
          __CrestBranch(95158, 61844, 0);

        }
        }
# 1530 "xmltok_impl.c"
        ptr += 2;
      }
      while_break: ;
      }
    } else {
      __CrestBranch(94988, 61847, 0);
# 1529 "xmltok_impl.c"
      goto _L;
    }
    }
    }
  } else {
    __CrestBranch(94983, 61848, 0);
    _L:
    {
# 1556 "xmltok_impl.c"
    while (1) {
      while_continue___0: ;
      {
# 1556 "xmltok_impl.c"
      mem_15 = ptr + 0;
      {
      __CrestLoad(95163, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(95162, (unsigned long )0, (long long )0);
      __CrestApply2(95161, 12, (long long )((int const )*mem_15 == 0));
# 1556 "xmltok_impl.c"
      if ((int const )*mem_15 == 0) {
        __CrestBranch(95164, 61854, 1);
        {
# 1556 "xmltok_impl.c"
        mem_16 = ptr + 1;
        {
        __CrestLoad(95168, (unsigned long )mem_16, (long long )*mem_16);
        __CrestLoad(95167, (unsigned long )0, (long long )59);
        __CrestApply2(95166, 12, (long long )((int const )*mem_16 == 59));
# 1556 "xmltok_impl.c"
        if ((int const )*mem_16 == 59) {
          __CrestBranch(95169, 61857, 1);
# 1556 "xmltok_impl.c"
          goto while_break___0;
        } else {
          __CrestBranch(95170, 61858, 0);

        }
        }
        }
      } else {
        __CrestBranch(95165, 61859, 0);

      }
      }
      }
      {
# 1557 "xmltok_impl.c"
      mem_17 = ptr + 0;
      {
      __CrestLoad(95173, (unsigned long )mem_17, (long long )*mem_17);
      __CrestLoad(95172, (unsigned long )0, (long long )0);
      __CrestApply2(95171, 12, (long long )((int const )*mem_17 == 0));
# 1557 "xmltok_impl.c"
      if ((int const )*mem_17 == 0) {
        __CrestBranch(95174, 61863, 1);
# 1557 "xmltok_impl.c"
        mem_18 = ptr + 1;
        __CrestLoad(95176, (unsigned long )mem_18, (long long )*mem_18);
        __CrestStore(95177, (unsigned long )(& tmp___0));
# 1557 "xmltok_impl.c"
        tmp___0 = (int const )*mem_18;
      } else {
        __CrestBranch(95175, 61864, 0);
        __CrestLoad(95178, (unsigned long )0, (long long )((int const )-1));
        __CrestStore(95179, (unsigned long )(& tmp___0));
# 1557 "xmltok_impl.c"
        tmp___0 = (int const )-1;
      }
      }
      }
      __CrestLoad(95180, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(95181, (unsigned long )(& c___0));
# 1557 "xmltok_impl.c"
      c___0 = (int )tmp___0;
      __CrestLoad(95184, (unsigned long )(& result), (long long )result);
      __CrestLoad(95183, (unsigned long )0, (long long )10);
      __CrestApply2(95182, 2, (long long )(result * 10));
      __CrestStore(95185, (unsigned long )(& result));
# 1558 "xmltok_impl.c"
      result *= 10;
      __CrestLoad(95190, (unsigned long )(& result), (long long )result);
      __CrestLoad(95189, (unsigned long )(& c___0), (long long )c___0);
      __CrestLoad(95188, (unsigned long )0, (long long )48);
      __CrestApply2(95187, 1, (long long )(c___0 - 48));
      __CrestApply2(95186, 0, (long long )(result + (c___0 - 48)));
      __CrestStore(95191, (unsigned long )(& result));
# 1559 "xmltok_impl.c"
      result += c___0 - 48;
      {
      __CrestLoad(95194, (unsigned long )(& result), (long long )result);
      __CrestLoad(95193, (unsigned long )0, (long long )1114112);
      __CrestApply2(95192, 17, (long long )(result >= 1114112));
# 1560 "xmltok_impl.c"
      if (result >= 1114112) {
        __CrestBranch(95195, 61867, 1);
        __CrestLoad(95197, (unsigned long )0, (long long )-1);
        __CrestStore(95198, (unsigned long )(& __retres19));
# 1561 "xmltok_impl.c"
        __retres19 = -1;
# 1561 "xmltok_impl.c"
        goto return_label;
      } else {
        __CrestBranch(95196, 61869, 0);

      }
      }
# 1556 "xmltok_impl.c"
      ptr += 2;
    }
    while_break___0: ;
    }
  }
  }
  }
  __CrestLoad(95199, (unsigned long )(& result), (long long )result);
# 1564 "xmltok_impl.c"
  tmp___1 = checkCharRefNumber(result);
  __CrestHandleReturn(95201, (long long )tmp___1);
  __CrestStore(95200, (unsigned long )(& tmp___1));
  __CrestLoad(95202, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(95203, (unsigned long )(& __retres19));
# 1564 "xmltok_impl.c"
  __retres19 = tmp___1;
  return_label:
  {
  __CrestLoad(95204, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(95205);
# 1523 "xmltok_impl.c"
  return (__retres19);
  }
}
}
# 1567 "xmltok_impl.c"
static int big2_predefinedEntityName(ENCODING const *enc , char const *ptr , char const *end )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_6 ;
  char const *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  char const *mem_10 ;
  char const *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  char const *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;
  char const *mem_19 ;
  char const *mem_20 ;
  char const *mem_21 ;
  char const *mem_22 ;
  char const *mem_23 ;
  char const *mem_24 ;
  char const *mem_25 ;
  char const *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  int __retres30 ;

  {
  __CrestCall(95206, 924);

  {
  {
  __CrestLoad(95213, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(95212, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(95211, 18, (long long )(end - ptr));
  __CrestLoad(95210, (unsigned long )0, (long long )2L);
  __CrestApply2(95209, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(95208, (unsigned long )0, (long long )2L);
  __CrestApply2(95207, 12, (long long )((end - ptr) / 2L == 2L));
# 1572 "xmltok_impl.c"
  if ((end - ptr) / 2L == 2L) {
    __CrestBranch(95214, 61877, 1);
# 1572 "xmltok_impl.c"
    goto case_2;
  } else {
    __CrestBranch(95215, 61878, 0);

  }
  }
  {
  __CrestLoad(95222, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(95221, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(95220, 18, (long long )(end - ptr));
  __CrestLoad(95219, (unsigned long )0, (long long )2L);
  __CrestApply2(95218, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(95217, (unsigned long )0, (long long )3L);
  __CrestApply2(95216, 12, (long long )((end - ptr) / 2L == 3L));
# 1582 "xmltok_impl.c"
  if ((end - ptr) / 2L == 3L) {
    __CrestBranch(95223, 61880, 1);
# 1582 "xmltok_impl.c"
    goto case_3;
  } else {
    __CrestBranch(95224, 61881, 0);

  }
  }
  {
  __CrestLoad(95231, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestLoad(95230, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestApply2(95229, 18, (long long )(end - ptr));
  __CrestLoad(95228, (unsigned long )0, (long long )2L);
  __CrestApply2(95227, 3, (long long )((end - ptr) / 2L));
  __CrestLoad(95226, (unsigned long )0, (long long )4L);
  __CrestApply2(95225, 12, (long long )((end - ptr) / 2L == 4L));
# 1592 "xmltok_impl.c"
  if ((end - ptr) / 2L == 4L) {
    __CrestBranch(95232, 61883, 1);
# 1592 "xmltok_impl.c"
    goto case_4;
  } else {
    __CrestBranch(95233, 61884, 0);

  }
  }
# 1571 "xmltok_impl.c"
  goto switch_break;
  case_2:
  {
# 1573 "xmltok_impl.c"
  mem_6 = (ptr + 2) + 0;
  {
  __CrestLoad(95236, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(95235, (unsigned long )0, (long long )0);
  __CrestApply2(95234, 12, (long long )((int const )*mem_6 == 0));
# 1573 "xmltok_impl.c"
  if ((int const )*mem_6 == 0) {
    __CrestBranch(95237, 61889, 1);
    {
# 1573 "xmltok_impl.c"
    mem_7 = (ptr + 2) + 1;
    {
    __CrestLoad(95241, (unsigned long )mem_7, (long long )*mem_7);
    __CrestLoad(95240, (unsigned long )0, (long long )116);
    __CrestApply2(95239, 12, (long long )((int const )*mem_7 == 116));
# 1573 "xmltok_impl.c"
    if ((int const )*mem_7 == 116) {
      __CrestBranch(95242, 61892, 1);
      {
# 1574 "xmltok_impl.c"
      mem_8 = ptr + 0;
      {
      __CrestLoad(95246, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(95245, (unsigned long )0, (long long )0);
      __CrestApply2(95244, 12, (long long )((int const )*mem_8 == 0));
# 1574 "xmltok_impl.c"
      if ((int const )*mem_8 == 0) {
        __CrestBranch(95247, 61895, 1);
# 1574 "xmltok_impl.c"
        mem_9 = ptr + 1;
        __CrestLoad(95249, (unsigned long )mem_9, (long long )*mem_9);
        __CrestStore(95250, (unsigned long )(& tmp));
# 1574 "xmltok_impl.c"
        tmp = (int const )*mem_9;
      } else {
        __CrestBranch(95248, 61896, 0);
        __CrestLoad(95251, (unsigned long )0, (long long )((int const )-1));
        __CrestStore(95252, (unsigned long )(& tmp));
# 1574 "xmltok_impl.c"
        tmp = (int const )-1;
      }
      }
      }
      {
      {
      __CrestLoad(95255, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(95254, (unsigned long )0, (long long )108);
      __CrestApply2(95253, 12, (long long )(tmp == 108));
# 1575 "xmltok_impl.c"
      if (tmp == 108) {
        __CrestBranch(95256, 61899, 1);
# 1575 "xmltok_impl.c"
        goto case_108;
      } else {
        __CrestBranch(95257, 61900, 0);

      }
      }
      {
      __CrestLoad(95260, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(95259, (unsigned long )0, (long long )103);
      __CrestApply2(95258, 12, (long long )(tmp == 103));
# 1577 "xmltok_impl.c"
      if (tmp == 103) {
        __CrestBranch(95261, 61902, 1);
# 1577 "xmltok_impl.c"
        goto case_103;
      } else {
        __CrestBranch(95262, 61903, 0);

      }
      }
# 1574 "xmltok_impl.c"
      goto switch_break___0;
      case_108:
      __CrestLoad(95263, (unsigned long )0, (long long )60);
      __CrestStore(95264, (unsigned long )(& __retres30));
# 1576 "xmltok_impl.c"
      __retres30 = 60;
# 1576 "xmltok_impl.c"
      goto return_label;
      case_103:
      __CrestLoad(95265, (unsigned long )0, (long long )62);
      __CrestStore(95266, (unsigned long )(& __retres30));
# 1578 "xmltok_impl.c"
      __retres30 = 62;
# 1578 "xmltok_impl.c"
      goto return_label;
      switch_break___0: ;
      }
    } else {
      __CrestBranch(95243, 61910, 0);

    }
    }
    }
  } else {
    __CrestBranch(95238, 61911, 0);

  }
  }
  }
# 1581 "xmltok_impl.c"
  goto switch_break;
  case_3:
  {
# 1583 "xmltok_impl.c"
  mem_10 = ptr + 0;
  {
  __CrestLoad(95269, (unsigned long )mem_10, (long long )*mem_10);
  __CrestLoad(95268, (unsigned long )0, (long long )0);
  __CrestApply2(95267, 12, (long long )((int const )*mem_10 == 0));
# 1583 "xmltok_impl.c"
  if ((int const )*mem_10 == 0) {
    __CrestBranch(95270, 61916, 1);
    {
# 1583 "xmltok_impl.c"
    mem_11 = ptr + 1;
    {
    __CrestLoad(95274, (unsigned long )mem_11, (long long )*mem_11);
    __CrestLoad(95273, (unsigned long )0, (long long )97);
    __CrestApply2(95272, 12, (long long )((int const )*mem_11 == 97));
# 1583 "xmltok_impl.c"
    if ((int const )*mem_11 == 97) {
      __CrestBranch(95275, 61919, 1);
# 1584 "xmltok_impl.c"
      ptr += 2;
      {
# 1585 "xmltok_impl.c"
      mem_12 = ptr + 0;
      {
      __CrestLoad(95279, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(95278, (unsigned long )0, (long long )0);
      __CrestApply2(95277, 12, (long long )((int const )*mem_12 == 0));
# 1585 "xmltok_impl.c"
      if ((int const )*mem_12 == 0) {
        __CrestBranch(95280, 61923, 1);
        {
# 1585 "xmltok_impl.c"
        mem_13 = ptr + 1;
        {
        __CrestLoad(95284, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(95283, (unsigned long )0, (long long )109);
        __CrestApply2(95282, 12, (long long )((int const )*mem_13 == 109));
# 1585 "xmltok_impl.c"
        if ((int const )*mem_13 == 109) {
          __CrestBranch(95285, 61926, 1);
# 1586 "xmltok_impl.c"
          ptr += 2;
          {
# 1587 "xmltok_impl.c"
          mem_14 = ptr + 0;
          {
          __CrestLoad(95289, (unsigned long )mem_14, (long long )*mem_14);
          __CrestLoad(95288, (unsigned long )0, (long long )0);
          __CrestApply2(95287, 12, (long long )((int const )*mem_14 == 0));
# 1587 "xmltok_impl.c"
          if ((int const )*mem_14 == 0) {
            __CrestBranch(95290, 61930, 1);
            {
# 1587 "xmltok_impl.c"
            mem_15 = ptr + 1;
            {
            __CrestLoad(95294, (unsigned long )mem_15, (long long )*mem_15);
            __CrestLoad(95293, (unsigned long )0, (long long )112);
            __CrestApply2(95292, 12, (long long )((int const )*mem_15 == 112));
# 1587 "xmltok_impl.c"
            if ((int const )*mem_15 == 112) {
              __CrestBranch(95295, 61933, 1);
              __CrestLoad(95297, (unsigned long )0, (long long )38);
              __CrestStore(95298, (unsigned long )(& __retres30));
# 1588 "xmltok_impl.c"
              __retres30 = 38;
# 1588 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(95296, 61935, 0);

            }
            }
            }
          } else {
            __CrestBranch(95291, 61936, 0);

          }
          }
          }
        } else {
          __CrestBranch(95286, 61937, 0);

        }
        }
        }
      } else {
        __CrestBranch(95281, 61938, 0);

      }
      }
      }
    } else {
      __CrestBranch(95276, 61939, 0);

    }
    }
    }
  } else {
    __CrestBranch(95271, 61940, 0);

  }
  }
  }
# 1591 "xmltok_impl.c"
  goto switch_break;
  case_4:
  {
# 1593 "xmltok_impl.c"
  mem_16 = ptr + 0;
  {
  __CrestLoad(95301, (unsigned long )mem_16, (long long )*mem_16);
  __CrestLoad(95300, (unsigned long )0, (long long )0);
  __CrestApply2(95299, 12, (long long )((int const )*mem_16 == 0));
# 1593 "xmltok_impl.c"
  if ((int const )*mem_16 == 0) {
    __CrestBranch(95302, 61945, 1);
# 1593 "xmltok_impl.c"
    mem_17 = ptr + 1;
    __CrestLoad(95304, (unsigned long )mem_17, (long long )*mem_17);
    __CrestStore(95305, (unsigned long )(& tmp___0));
# 1593 "xmltok_impl.c"
    tmp___0 = (int const )*mem_17;
  } else {
    __CrestBranch(95303, 61946, 0);
    __CrestLoad(95306, (unsigned long )0, (long long )((int const )-1));
    __CrestStore(95307, (unsigned long )(& tmp___0));
# 1593 "xmltok_impl.c"
    tmp___0 = (int const )-1;
  }
  }
  }
  {
  {
  __CrestLoad(95310, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(95309, (unsigned long )0, (long long )113);
  __CrestApply2(95308, 12, (long long )(tmp___0 == 113));
# 1594 "xmltok_impl.c"
  if (tmp___0 == 113) {
    __CrestBranch(95311, 61949, 1);
# 1594 "xmltok_impl.c"
    goto case_113;
  } else {
    __CrestBranch(95312, 61950, 0);

  }
  }
  {
  __CrestLoad(95315, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(95314, (unsigned long )0, (long long )97);
  __CrestApply2(95313, 12, (long long )(tmp___0 == 97));
# 1605 "xmltok_impl.c"
  if (tmp___0 == 97) {
    __CrestBranch(95316, 61952, 1);
# 1605 "xmltok_impl.c"
    goto case_97;
  } else {
    __CrestBranch(95317, 61953, 0);

  }
  }
# 1593 "xmltok_impl.c"
  goto switch_break___1;
  case_113:
# 1595 "xmltok_impl.c"
  ptr += 2;
  {
# 1596 "xmltok_impl.c"
  mem_18 = ptr + 0;
  {
  __CrestLoad(95320, (unsigned long )mem_18, (long long )*mem_18);
  __CrestLoad(95319, (unsigned long )0, (long long )0);
  __CrestApply2(95318, 12, (long long )((int const )*mem_18 == 0));
# 1596 "xmltok_impl.c"
  if ((int const )*mem_18 == 0) {
    __CrestBranch(95321, 61959, 1);
    {
# 1596 "xmltok_impl.c"
    mem_19 = ptr + 1;
    {
    __CrestLoad(95325, (unsigned long )mem_19, (long long )*mem_19);
    __CrestLoad(95324, (unsigned long )0, (long long )117);
    __CrestApply2(95323, 12, (long long )((int const )*mem_19 == 117));
# 1596 "xmltok_impl.c"
    if ((int const )*mem_19 == 117) {
      __CrestBranch(95326, 61962, 1);
# 1597 "xmltok_impl.c"
      ptr += 2;
      {
# 1598 "xmltok_impl.c"
      mem_20 = ptr + 0;
      {
      __CrestLoad(95330, (unsigned long )mem_20, (long long )*mem_20);
      __CrestLoad(95329, (unsigned long )0, (long long )0);
      __CrestApply2(95328, 12, (long long )((int const )*mem_20 == 0));
# 1598 "xmltok_impl.c"
      if ((int const )*mem_20 == 0) {
        __CrestBranch(95331, 61966, 1);
        {
# 1598 "xmltok_impl.c"
        mem_21 = ptr + 1;
        {
        __CrestLoad(95335, (unsigned long )mem_21, (long long )*mem_21);
        __CrestLoad(95334, (unsigned long )0, (long long )111);
        __CrestApply2(95333, 12, (long long )((int const )*mem_21 == 111));
# 1598 "xmltok_impl.c"
        if ((int const )*mem_21 == 111) {
          __CrestBranch(95336, 61969, 1);
# 1599 "xmltok_impl.c"
          ptr += 2;
          {
# 1600 "xmltok_impl.c"
          mem_22 = ptr + 0;
          {
          __CrestLoad(95340, (unsigned long )mem_22, (long long )*mem_22);
          __CrestLoad(95339, (unsigned long )0, (long long )0);
          __CrestApply2(95338, 12, (long long )((int const )*mem_22 == 0));
# 1600 "xmltok_impl.c"
          if ((int const )*mem_22 == 0) {
            __CrestBranch(95341, 61973, 1);
            {
# 1600 "xmltok_impl.c"
            mem_23 = ptr + 1;
            {
            __CrestLoad(95345, (unsigned long )mem_23, (long long )*mem_23);
            __CrestLoad(95344, (unsigned long )0, (long long )116);
            __CrestApply2(95343, 12, (long long )((int const )*mem_23 == 116));
# 1600 "xmltok_impl.c"
            if ((int const )*mem_23 == 116) {
              __CrestBranch(95346, 61976, 1);
              __CrestLoad(95348, (unsigned long )0, (long long )34);
              __CrestStore(95349, (unsigned long )(& __retres30));
# 1601 "xmltok_impl.c"
              __retres30 = 34;
# 1601 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(95347, 61978, 0);

            }
            }
            }
          } else {
            __CrestBranch(95342, 61979, 0);

          }
          }
          }
        } else {
          __CrestBranch(95337, 61980, 0);

        }
        }
        }
      } else {
        __CrestBranch(95332, 61981, 0);

      }
      }
      }
    } else {
      __CrestBranch(95327, 61982, 0);

    }
    }
    }
  } else {
    __CrestBranch(95322, 61983, 0);

  }
  }
  }
# 1604 "xmltok_impl.c"
  goto switch_break___1;
  case_97:
# 1606 "xmltok_impl.c"
  ptr += 2;
  {
# 1607 "xmltok_impl.c"
  mem_24 = ptr + 0;
  {
  __CrestLoad(95352, (unsigned long )mem_24, (long long )*mem_24);
  __CrestLoad(95351, (unsigned long )0, (long long )0);
  __CrestApply2(95350, 12, (long long )((int const )*mem_24 == 0));
# 1607 "xmltok_impl.c"
  if ((int const )*mem_24 == 0) {
    __CrestBranch(95353, 61989, 1);
    {
# 1607 "xmltok_impl.c"
    mem_25 = ptr + 1;
    {
    __CrestLoad(95357, (unsigned long )mem_25, (long long )*mem_25);
    __CrestLoad(95356, (unsigned long )0, (long long )112);
    __CrestApply2(95355, 12, (long long )((int const )*mem_25 == 112));
# 1607 "xmltok_impl.c"
    if ((int const )*mem_25 == 112) {
      __CrestBranch(95358, 61992, 1);
# 1608 "xmltok_impl.c"
      ptr += 2;
      {
# 1609 "xmltok_impl.c"
      mem_26 = ptr + 0;
      {
      __CrestLoad(95362, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(95361, (unsigned long )0, (long long )0);
      __CrestApply2(95360, 12, (long long )((int const )*mem_26 == 0));
# 1609 "xmltok_impl.c"
      if ((int const )*mem_26 == 0) {
        __CrestBranch(95363, 61996, 1);
        {
# 1609 "xmltok_impl.c"
        mem_27 = ptr + 1;
        {
        __CrestLoad(95367, (unsigned long )mem_27, (long long )*mem_27);
        __CrestLoad(95366, (unsigned long )0, (long long )111);
        __CrestApply2(95365, 12, (long long )((int const )*mem_27 == 111));
# 1609 "xmltok_impl.c"
        if ((int const )*mem_27 == 111) {
          __CrestBranch(95368, 61999, 1);
# 1610 "xmltok_impl.c"
          ptr += 2;
          {
# 1611 "xmltok_impl.c"
          mem_28 = ptr + 0;
          {
          __CrestLoad(95372, (unsigned long )mem_28, (long long )*mem_28);
          __CrestLoad(95371, (unsigned long )0, (long long )0);
          __CrestApply2(95370, 12, (long long )((int const )*mem_28 == 0));
# 1611 "xmltok_impl.c"
          if ((int const )*mem_28 == 0) {
            __CrestBranch(95373, 62003, 1);
            {
# 1611 "xmltok_impl.c"
            mem_29 = ptr + 1;
            {
            __CrestLoad(95377, (unsigned long )mem_29, (long long )*mem_29);
            __CrestLoad(95376, (unsigned long )0, (long long )115);
            __CrestApply2(95375, 12, (long long )((int const )*mem_29 == 115));
# 1611 "xmltok_impl.c"
            if ((int const )*mem_29 == 115) {
              __CrestBranch(95378, 62006, 1);
              __CrestLoad(95380, (unsigned long )0, (long long )39);
              __CrestStore(95381, (unsigned long )(& __retres30));
# 1612 "xmltok_impl.c"
              __retres30 = 39;
# 1612 "xmltok_impl.c"
              goto return_label;
            } else {
              __CrestBranch(95379, 62008, 0);

            }
            }
            }
          } else {
            __CrestBranch(95374, 62009, 0);

          }
          }
          }
        } else {
          __CrestBranch(95369, 62010, 0);

        }
        }
        }
      } else {
        __CrestBranch(95364, 62011, 0);

      }
      }
      }
    } else {
      __CrestBranch(95359, 62012, 0);

    }
    }
    }
  } else {
    __CrestBranch(95354, 62013, 0);

  }
  }
  }
# 1615 "xmltok_impl.c"
  goto switch_break___1;
  switch_break___1: ;
  }
  switch_break: ;
  }
  __CrestLoad(95382, (unsigned long )0, (long long )0);
  __CrestStore(95383, (unsigned long )(& __retres30));
# 1618 "xmltok_impl.c"
  __retres30 = 0;
  return_label:
  {
  __CrestLoad(95384, (unsigned long )(& __retres30), (long long )__retres30);
  __CrestReturn(95385);
# 1567 "xmltok_impl.c"
  return (__retres30);
  }
}
}
# 1621 "xmltok_impl.c"
static int big2_sameName(ENCODING const *enc , char const *ptr1 , char const *ptr2 )
{
  int tmp ;
  int tmp___0 ;
  char const *tmp___1 ;
  char const *tmp___2 ;
  char const *tmp___3 ;
  char const *tmp___4 ;
  char const *tmp___5 ;
  char const *tmp___6 ;
  char const *tmp___7 ;
  char const *tmp___8 ;
  char const *tmp___9 ;
  char const *tmp___10 ;
  char const *tmp___11 ;
  char const *tmp___12 ;
  int tmp___17 ;
  int tmp___18 ;
  char const *mem_24 ;
  char const *mem_25 ;
  struct normal_encoding *mem_26 ;
  char const *mem_27 ;
  char const *mem_28 ;
  char const *mem_29 ;
  char const *mem_30 ;
  struct normal_encoding *mem_31 ;
  char const *mem_32 ;
  char const *mem_33 ;
  int __retres34 ;

  {
  __CrestCall(95386, 925);

  {
# 1624 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1625 "xmltok_impl.c"
    mem_24 = ptr1 + 0;
    {
    __CrestLoad(95389, (unsigned long )mem_24, (long long )*mem_24);
    __CrestLoad(95388, (unsigned long )0, (long long )0);
    __CrestApply2(95387, 12, (long long )((int const )*mem_24 == 0));
# 1625 "xmltok_impl.c"
    if ((int const )*mem_24 == 0) {
      __CrestBranch(95390, 62025, 1);
# 1625 "xmltok_impl.c"
      mem_25 = ptr1 + 1;
# 1625 "xmltok_impl.c"
      mem_26 = (struct normal_encoding *)enc;
      __CrestLoad(95392, (unsigned long )(& mem_26->type[(unsigned char )*mem_25]),
                  (long long )mem_26->type[(unsigned char )*mem_25]);
      __CrestStore(95393, (unsigned long )(& tmp___0));
# 1625 "xmltok_impl.c"
      tmp___0 = (int )mem_26->type[(unsigned char )*mem_25];
    } else {
      __CrestBranch(95391, 62026, 0);
# 1625 "xmltok_impl.c"
      mem_27 = ptr1 + 0;
# 1625 "xmltok_impl.c"
      mem_28 = ptr1 + 1;
      __CrestLoad(95394, (unsigned long )mem_27, (long long )*mem_27);
      __CrestLoad(95395, (unsigned long )mem_28, (long long )*mem_28);
# 1625 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_27, (char )*mem_28);
      __CrestHandleReturn(95397, (long long )tmp);
      __CrestStore(95396, (unsigned long )(& tmp));
      __CrestLoad(95398, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(95399, (unsigned long )(& tmp___0));
# 1625 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(95402, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95401, (unsigned long )0, (long long )7);
    __CrestApply2(95400, 12, (long long )(tmp___0 == 7));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(95403, 62029, 1);
# 1630 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(95404, 62030, 0);

    }
    }
    {
    __CrestLoad(95407, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95406, (unsigned long )0, (long long )6);
    __CrestApply2(95405, 12, (long long )(tmp___0 == 6));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(95408, 62032, 1);
# 1630 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(95409, 62033, 0);

    }
    }
    {
    __CrestLoad(95412, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95411, (unsigned long )0, (long long )5);
    __CrestApply2(95410, 12, (long long )(tmp___0 == 5));
# 1630 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(95413, 62035, 1);
# 1630 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(95414, 62036, 0);

    }
    }
    {
    __CrestLoad(95417, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95416, (unsigned long )0, (long long )27);
    __CrestApply2(95415, 12, (long long )(tmp___0 == 27));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(95418, 62038, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95419, 62039, 0);

    }
    }
    {
    __CrestLoad(95422, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95421, (unsigned long )0, (long long )26);
    __CrestApply2(95420, 12, (long long )(tmp___0 == 26));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(95423, 62041, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95424, 62042, 0);

    }
    }
    {
    __CrestLoad(95427, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95426, (unsigned long )0, (long long )25);
    __CrestApply2(95425, 12, (long long )(tmp___0 == 25));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(95428, 62044, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95429, 62045, 0);

    }
    }
    {
    __CrestLoad(95432, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95431, (unsigned long )0, (long long )24);
    __CrestApply2(95430, 12, (long long )(tmp___0 == 24));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(95433, 62047, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95434, 62048, 0);

    }
    }
    {
    __CrestLoad(95437, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95436, (unsigned long )0, (long long )23);
    __CrestApply2(95435, 12, (long long )(tmp___0 == 23));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(95438, 62050, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95439, 62051, 0);

    }
    }
    {
    __CrestLoad(95442, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95441, (unsigned long )0, (long long )22);
    __CrestApply2(95440, 12, (long long )(tmp___0 == 22));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(95443, 62053, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95444, 62054, 0);

    }
    }
    {
    __CrestLoad(95447, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95446, (unsigned long )0, (long long )29);
    __CrestApply2(95445, 12, (long long )(tmp___0 == 29));
# 1644 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(95448, 62056, 1);
# 1644 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95449, 62057, 0);

    }
    }
# 1660 "xmltok_impl.c"
    goto switch_default;
    case_7:
# 1630 "xmltok_impl.c"
    tmp___1 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___2 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(95452, (unsigned long )tmp___1, (long long )*tmp___1);
    __CrestLoad(95451, (unsigned long )tmp___2, (long long )*tmp___2);
    __CrestApply2(95450, 13, (long long )((int const )*tmp___1 != (int const )*tmp___2));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___1 != (int const )*tmp___2) {
      __CrestBranch(95453, 62061, 1);
      __CrestLoad(95455, (unsigned long )0, (long long )0);
      __CrestStore(95456, (unsigned long )(& __retres34));
# 1630 "xmltok_impl.c"
      __retres34 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95454, 62063, 0);

    }
    }
    case_6:
# 1630 "xmltok_impl.c"
    tmp___3 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___4 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(95459, (unsigned long )tmp___3, (long long )*tmp___3);
    __CrestLoad(95458, (unsigned long )tmp___4, (long long )*tmp___4);
    __CrestApply2(95457, 13, (long long )((int const )*tmp___3 != (int const )*tmp___4));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___3 != (int const )*tmp___4) {
      __CrestBranch(95460, 62066, 1);
      __CrestLoad(95462, (unsigned long )0, (long long )0);
      __CrestStore(95463, (unsigned long )(& __retres34));
# 1630 "xmltok_impl.c"
      __retres34 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95461, 62068, 0);

    }
    }
    case_5:
# 1630 "xmltok_impl.c"
    tmp___5 = ptr1;
# 1630 "xmltok_impl.c"
    ptr1 ++;
# 1630 "xmltok_impl.c"
    tmp___6 = ptr2;
# 1630 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(95466, (unsigned long )tmp___5, (long long )*tmp___5);
    __CrestLoad(95465, (unsigned long )tmp___6, (long long )*tmp___6);
    __CrestApply2(95464, 13, (long long )((int const )*tmp___5 != (int const )*tmp___6));
# 1630 "xmltok_impl.c"
    if ((int const )*tmp___5 != (int const )*tmp___6) {
      __CrestBranch(95467, 62071, 1);
      __CrestLoad(95469, (unsigned long )0, (long long )0);
      __CrestStore(95470, (unsigned long )(& __retres34));
# 1630 "xmltok_impl.c"
      __retres34 = 0;
# 1630 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95468, 62073, 0);

    }
    }
# 1633 "xmltok_impl.c"
    tmp___7 = ptr1;
# 1633 "xmltok_impl.c"
    ptr1 ++;
# 1633 "xmltok_impl.c"
    tmp___8 = ptr2;
# 1633 "xmltok_impl.c"
    ptr2 ++;
    {
    __CrestLoad(95473, (unsigned long )tmp___7, (long long )*tmp___7);
    __CrestLoad(95472, (unsigned long )tmp___8, (long long )*tmp___8);
    __CrestApply2(95471, 13, (long long )((int const )*tmp___7 != (int const )*tmp___8));
# 1633 "xmltok_impl.c"
    if ((int const )*tmp___7 != (int const )*tmp___8) {
      __CrestBranch(95474, 62076, 1);
      __CrestLoad(95476, (unsigned long )0, (long long )0);
      __CrestStore(95477, (unsigned long )(& __retres34));
# 1634 "xmltok_impl.c"
      __retres34 = 0;
# 1634 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95475, 62078, 0);

    }
    }
# 1635 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1645 "xmltok_impl.c"
    tmp___9 = ptr2;
# 1645 "xmltok_impl.c"
    ptr2 ++;
# 1645 "xmltok_impl.c"
    tmp___10 = ptr1;
# 1645 "xmltok_impl.c"
    ptr1 ++;
    {
    __CrestLoad(95480, (unsigned long )tmp___9, (long long )*tmp___9);
    __CrestLoad(95479, (unsigned long )tmp___10, (long long )*tmp___10);
    __CrestApply2(95478, 13, (long long )((int const )*tmp___9 != (int const )*tmp___10));
# 1645 "xmltok_impl.c"
    if ((int const )*tmp___9 != (int const )*tmp___10) {
      __CrestBranch(95481, 62082, 1);
      __CrestLoad(95483, (unsigned long )0, (long long )0);
      __CrestStore(95484, (unsigned long )(& __retres34));
# 1646 "xmltok_impl.c"
      __retres34 = 0;
# 1646 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95482, 62084, 0);

    }
    }
# 1648 "xmltok_impl.c"
    tmp___11 = ptr2;
# 1648 "xmltok_impl.c"
    ptr2 ++;
# 1648 "xmltok_impl.c"
    tmp___12 = ptr1;
# 1648 "xmltok_impl.c"
    ptr1 ++;
    {
    __CrestLoad(95487, (unsigned long )tmp___11, (long long )*tmp___11);
    __CrestLoad(95486, (unsigned long )tmp___12, (long long )*tmp___12);
    __CrestApply2(95485, 13, (long long )((int const )*tmp___11 != (int const )*tmp___12));
# 1648 "xmltok_impl.c"
    if ((int const )*tmp___11 != (int const )*tmp___12) {
      __CrestBranch(95488, 62087, 1);
      __CrestLoad(95490, (unsigned long )0, (long long )0);
      __CrestStore(95491, (unsigned long )(& __retres34));
# 1649 "xmltok_impl.c"
      __retres34 = 0;
# 1649 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95489, 62089, 0);

    }
    }
# 1659 "xmltok_impl.c"
    goto switch_break;
    switch_default: ;
    {
# 1663 "xmltok_impl.c"
    mem_29 = ptr2 + 0;
    {
    __CrestLoad(95494, (unsigned long )mem_29, (long long )*mem_29);
    __CrestLoad(95493, (unsigned long )0, (long long )0);
    __CrestApply2(95492, 12, (long long )((int const )*mem_29 == 0));
# 1663 "xmltok_impl.c"
    if ((int const )*mem_29 == 0) {
      __CrestBranch(95495, 62095, 1);
# 1663 "xmltok_impl.c"
      mem_30 = ptr2 + 1;
# 1663 "xmltok_impl.c"
      mem_31 = (struct normal_encoding *)enc;
      __CrestLoad(95497, (unsigned long )(& mem_31->type[(unsigned char )*mem_30]),
                  (long long )mem_31->type[(unsigned char )*mem_30]);
      __CrestStore(95498, (unsigned long )(& tmp___18));
# 1663 "xmltok_impl.c"
      tmp___18 = (int )mem_31->type[(unsigned char )*mem_30];
    } else {
      __CrestBranch(95496, 62096, 0);
# 1663 "xmltok_impl.c"
      mem_32 = ptr2 + 0;
# 1663 "xmltok_impl.c"
      mem_33 = ptr2 + 1;
      __CrestLoad(95499, (unsigned long )mem_32, (long long )*mem_32);
      __CrestLoad(95500, (unsigned long )mem_33, (long long )*mem_33);
# 1663 "xmltok_impl.c"
      tmp___17 = unicode_byte_type((char )*mem_32, (char )*mem_33);
      __CrestHandleReturn(95502, (long long )tmp___17);
      __CrestStore(95501, (unsigned long )(& tmp___17));
      __CrestLoad(95503, (unsigned long )(& tmp___17), (long long )tmp___17);
      __CrestStore(95504, (unsigned long )(& tmp___18));
# 1663 "xmltok_impl.c"
      tmp___18 = tmp___17;
    }
    }
    }
    {
    {
    __CrestLoad(95507, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95506, (unsigned long )0, (long long )27);
    __CrestApply2(95505, 12, (long long )(tmp___18 == 27));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 27) {
      __CrestBranch(95508, 62099, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95509, 62100, 0);

    }
    }
    {
    __CrestLoad(95512, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95511, (unsigned long )0, (long long )26);
    __CrestApply2(95510, 12, (long long )(tmp___18 == 26));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 26) {
      __CrestBranch(95513, 62102, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95514, 62103, 0);

    }
    }
    {
    __CrestLoad(95517, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95516, (unsigned long )0, (long long )25);
    __CrestApply2(95515, 12, (long long )(tmp___18 == 25));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 25) {
      __CrestBranch(95518, 62105, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95519, 62106, 0);

    }
    }
    {
    __CrestLoad(95522, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95521, (unsigned long )0, (long long )24);
    __CrestApply2(95520, 12, (long long )(tmp___18 == 24));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 24) {
      __CrestBranch(95523, 62108, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95524, 62109, 0);

    }
    }
    {
    __CrestLoad(95527, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95526, (unsigned long )0, (long long )23);
    __CrestApply2(95525, 12, (long long )(tmp___18 == 23));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 23) {
      __CrestBranch(95528, 62111, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95529, 62112, 0);

    }
    }
    {
    __CrestLoad(95532, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95531, (unsigned long )0, (long long )22);
    __CrestApply2(95530, 12, (long long )(tmp___18 == 22));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 22) {
      __CrestBranch(95533, 62114, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95534, 62115, 0);

    }
    }
    {
    __CrestLoad(95537, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95536, (unsigned long )0, (long long )29);
    __CrestApply2(95535, 12, (long long )(tmp___18 == 29));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 29) {
      __CrestBranch(95538, 62117, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95539, 62118, 0);

    }
    }
    {
    __CrestLoad(95542, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95541, (unsigned long )0, (long long )7);
    __CrestApply2(95540, 12, (long long )(tmp___18 == 7));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 7) {
      __CrestBranch(95543, 62120, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95544, 62121, 0);

    }
    }
    {
    __CrestLoad(95547, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95546, (unsigned long )0, (long long )6);
    __CrestApply2(95545, 12, (long long )(tmp___18 == 6));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 6) {
      __CrestBranch(95548, 62123, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95549, 62124, 0);

    }
    }
    {
    __CrestLoad(95552, (unsigned long )(& tmp___18), (long long )tmp___18);
    __CrestLoad(95551, (unsigned long )0, (long long )5);
    __CrestApply2(95550, 12, (long long )(tmp___18 == 5));
# 1675 "xmltok_impl.c"
    if (tmp___18 == 5) {
      __CrestBranch(95553, 62126, 1);
# 1675 "xmltok_impl.c"
      goto case_27___0;
    } else {
      __CrestBranch(95554, 62127, 0);

    }
    }
# 1677 "xmltok_impl.c"
    goto switch_default___0;
    case_27___0:
    case_26___0:
    case_25___0:
    case_24___0:
    case_23___0:
    case_22___0:
    case_29___0:
    case_7___0:
    case_6___0:
    case_5___0:
    __CrestLoad(95555, (unsigned long )0, (long long )0);
    __CrestStore(95556, (unsigned long )(& __retres34));
# 1676 "xmltok_impl.c"
    __retres34 = 0;
# 1676 "xmltok_impl.c"
    goto return_label;
    switch_default___0:
    __CrestLoad(95557, (unsigned long )0, (long long )1);
    __CrestStore(95558, (unsigned long )(& __retres34));
# 1678 "xmltok_impl.c"
    __retres34 = 1;
# 1678 "xmltok_impl.c"
    goto return_label;
    switch_break___0: ;
    }
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(95559, (unsigned long )(& __retres34), (long long )__retres34);
  __CrestReturn(95560);
# 1621 "xmltok_impl.c"
  return (__retres34);
  }
}
}
# 1685 "xmltok_impl.c"
static int big2_nameMatchesAscii(ENCODING const *enc , char const *ptr1 , char const *end1 ,
                                 char const *ptr2 )
{
  char const *mem_5 ;
  char const *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(95561, 926);

  {
# 1689 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(95564, (unsigned long )ptr2, (long long )*ptr2);
    __CrestLoad(95563, (unsigned long )0, (long long )0);
    __CrestApply2(95562, 13, (long long )(*ptr2 != 0));
# 1689 "xmltok_impl.c"
    if (*ptr2 != 0) {
      __CrestBranch(95565, 62141, 1);

    } else {
      __CrestBranch(95566, 62142, 0);
# 1689 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(95569, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
    __CrestLoad(95568, (unsigned long )(& end1), (long long )((unsigned long )end1));
    __CrestApply2(95567, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
# 1690 "xmltok_impl.c"
    if ((unsigned long )ptr1 == (unsigned long )end1) {
      __CrestBranch(95570, 62144, 1);
      __CrestLoad(95572, (unsigned long )0, (long long )0);
      __CrestStore(95573, (unsigned long )(& __retres7));
# 1691 "xmltok_impl.c"
      __retres7 = 0;
# 1691 "xmltok_impl.c"
      goto return_label;
    } else {
      __CrestBranch(95571, 62146, 0);

    }
    }
    {
# 1692 "xmltok_impl.c"
    mem_5 = ptr1 + 0;
    {
    __CrestLoad(95576, (unsigned long )mem_5, (long long )*mem_5);
    __CrestLoad(95575, (unsigned long )0, (long long )0);
    __CrestApply2(95574, 12, (long long )((int const )*mem_5 == 0));
# 1692 "xmltok_impl.c"
    if ((int const )*mem_5 == 0) {
      __CrestBranch(95577, 62150, 1);
      {
# 1692 "xmltok_impl.c"
      mem_6 = ptr1 + 1;
      {
      __CrestLoad(95581, (unsigned long )mem_6, (long long )*mem_6);
      __CrestLoad(95580, (unsigned long )ptr2, (long long )*ptr2);
      __CrestApply2(95579, 12, (long long )((int const )*mem_6 == (int const )*ptr2));
# 1692 "xmltok_impl.c"
      if ((int const )*mem_6 == (int const )*ptr2) {
        __CrestBranch(95582, 62153, 1);

      } else {
        __CrestBranch(95583, 62154, 0);
        __CrestLoad(95584, (unsigned long )0, (long long )0);
        __CrestStore(95585, (unsigned long )(& __retres7));
# 1693 "xmltok_impl.c"
        __retres7 = 0;
# 1693 "xmltok_impl.c"
        goto return_label;
      }
      }
      }
    } else {
      __CrestBranch(95578, 62156, 0);
      __CrestLoad(95586, (unsigned long )0, (long long )0);
      __CrestStore(95587, (unsigned long )(& __retres7));
# 1693 "xmltok_impl.c"
      __retres7 = 0;
# 1693 "xmltok_impl.c"
      goto return_label;
    }
    }
    }
# 1689 "xmltok_impl.c"
    ptr1 += 2;
# 1689 "xmltok_impl.c"
    ptr2 ++;
  }
  while_break: ;
  }
  __CrestLoad(95590, (unsigned long )(& ptr1), (long long )((unsigned long )ptr1));
  __CrestLoad(95589, (unsigned long )(& end1), (long long )((unsigned long )end1));
  __CrestApply2(95588, 12, (long long )((unsigned long )ptr1 == (unsigned long )end1));
  __CrestStore(95591, (unsigned long )(& __retres7));
# 1695 "xmltok_impl.c"
  __retres7 = (unsigned long )ptr1 == (unsigned long )end1;
  return_label:
  {
  __CrestLoad(95592, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(95593);
# 1685 "xmltok_impl.c"
  return (__retres7);
  }
}
}
# 1698 "xmltok_impl.c"
static int big2_nameLength(ENCODING const *enc , char const *ptr )
{
  char const *start ;
  int tmp ;
  int tmp___0 ;
  char const *mem_6 ;
  char const *mem_7 ;
  struct normal_encoding *mem_8 ;
  char const *mem_9 ;
  char const *mem_10 ;
  int __retres11 ;

  {
  __CrestCall(95594, 927);
# 1701 "xmltok_impl.c"
  start = ptr;
  {
# 1702 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1703 "xmltok_impl.c"
    mem_6 = ptr + 0;
    {
    __CrestLoad(95597, (unsigned long )mem_6, (long long )*mem_6);
    __CrestLoad(95596, (unsigned long )0, (long long )0);
    __CrestApply2(95595, 12, (long long )((int const )*mem_6 == 0));
# 1703 "xmltok_impl.c"
    if ((int const )*mem_6 == 0) {
      __CrestBranch(95598, 62169, 1);
# 1703 "xmltok_impl.c"
      mem_7 = ptr + 1;
# 1703 "xmltok_impl.c"
      mem_8 = (struct normal_encoding *)enc;
      __CrestLoad(95600, (unsigned long )(& mem_8->type[(unsigned char )*mem_7]),
                  (long long )mem_8->type[(unsigned char )*mem_7]);
      __CrestStore(95601, (unsigned long )(& tmp___0));
# 1703 "xmltok_impl.c"
      tmp___0 = (int )mem_8->type[(unsigned char )*mem_7];
    } else {
      __CrestBranch(95599, 62170, 0);
# 1703 "xmltok_impl.c"
      mem_9 = ptr + 0;
# 1703 "xmltok_impl.c"
      mem_10 = ptr + 1;
      __CrestLoad(95602, (unsigned long )mem_9, (long long )*mem_9);
      __CrestLoad(95603, (unsigned long )mem_10, (long long )*mem_10);
# 1703 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_9, (char )*mem_10);
      __CrestHandleReturn(95605, (long long )tmp);
      __CrestStore(95604, (unsigned long )(& tmp));
      __CrestLoad(95606, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(95607, (unsigned long )(& tmp___0));
# 1703 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(95610, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95609, (unsigned long )0, (long long )5);
    __CrestApply2(95608, 12, (long long )(tmp___0 == 5));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(95611, 62173, 1);
# 1706 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(95612, 62174, 0);

    }
    }
    {
    __CrestLoad(95615, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95614, (unsigned long )0, (long long )6);
    __CrestApply2(95613, 12, (long long )(tmp___0 == 6));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(95616, 62176, 1);
# 1706 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(95617, 62177, 0);

    }
    }
    {
    __CrestLoad(95620, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95619, (unsigned long )0, (long long )7);
    __CrestApply2(95618, 12, (long long )(tmp___0 == 7));
# 1706 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(95621, 62179, 1);
# 1706 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(95622, 62180, 0);

    }
    }
    {
    __CrestLoad(95625, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95624, (unsigned long )0, (long long )27);
    __CrestApply2(95623, 12, (long long )(tmp___0 == 27));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 27) {
      __CrestBranch(95626, 62182, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95627, 62183, 0);

    }
    }
    {
    __CrestLoad(95630, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95629, (unsigned long )0, (long long )26);
    __CrestApply2(95628, 12, (long long )(tmp___0 == 26));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 26) {
      __CrestBranch(95631, 62185, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95632, 62186, 0);

    }
    }
    {
    __CrestLoad(95635, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95634, (unsigned long )0, (long long )25);
    __CrestApply2(95633, 12, (long long )(tmp___0 == 25));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 25) {
      __CrestBranch(95636, 62188, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95637, 62189, 0);

    }
    }
    {
    __CrestLoad(95640, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95639, (unsigned long )0, (long long )24);
    __CrestApply2(95638, 12, (long long )(tmp___0 == 24));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 24) {
      __CrestBranch(95641, 62191, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95642, 62192, 0);

    }
    }
    {
    __CrestLoad(95645, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95644, (unsigned long )0, (long long )23);
    __CrestApply2(95643, 12, (long long )(tmp___0 == 23));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 23) {
      __CrestBranch(95646, 62194, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95647, 62195, 0);

    }
    }
    {
    __CrestLoad(95650, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95649, (unsigned long )0, (long long )22);
    __CrestApply2(95648, 12, (long long )(tmp___0 == 22));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 22) {
      __CrestBranch(95651, 62197, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95652, 62198, 0);

    }
    }
    {
    __CrestLoad(95655, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95654, (unsigned long )0, (long long )29);
    __CrestApply2(95653, 12, (long long )(tmp___0 == 29));
# 1716 "xmltok_impl.c"
    if (tmp___0 == 29) {
      __CrestBranch(95656, 62200, 1);
# 1716 "xmltok_impl.c"
      goto case_27;
    } else {
      __CrestBranch(95657, 62201, 0);

    }
    }
# 1719 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1706 "xmltok_impl.c"
    ptr += 2;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1706 "xmltok_impl.c"
    ptr += 3;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1706 "xmltok_impl.c"
    ptr += 4;
# 1706 "xmltok_impl.c"
    goto switch_break;
    case_27:
    case_26:
    case_25:
    case_24:
    case_23:
    case_22:
    case_29:
# 1717 "xmltok_impl.c"
    ptr += 2;
# 1718 "xmltok_impl.c"
    goto switch_break;
    switch_default:
    __CrestLoad(95660, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(95659, (unsigned long )(& start), (long long )((unsigned long )start));
    __CrestApply2(95658, 18, (long long )(ptr - start));
    __CrestStore(95661, (unsigned long )(& __retres11));
# 1720 "xmltok_impl.c"
    __retres11 = (int )(ptr - start);
# 1720 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestLoad(95662, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(95663);
# 1698 "xmltok_impl.c"
  return (__retres11);
  }
}
}
# 1725 "xmltok_impl.c"
static char const *big2_skipS(ENCODING const *enc , char const *ptr )
{
  int tmp ;
  int tmp___0 ;
  char const *mem_5 ;
  char const *mem_6 ;
  struct normal_encoding *mem_7 ;
  char const *mem_8 ;
  char const *mem_9 ;
  char const *__retres10 ;

  {
  __CrestCall(95664, 928);

  {
# 1728 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
# 1729 "xmltok_impl.c"
    mem_5 = ptr + 0;
    {
    __CrestLoad(95667, (unsigned long )mem_5, (long long )*mem_5);
    __CrestLoad(95666, (unsigned long )0, (long long )0);
    __CrestApply2(95665, 12, (long long )((int const )*mem_5 == 0));
# 1729 "xmltok_impl.c"
    if ((int const )*mem_5 == 0) {
      __CrestBranch(95668, 62222, 1);
# 1729 "xmltok_impl.c"
      mem_6 = ptr + 1;
# 1729 "xmltok_impl.c"
      mem_7 = (struct normal_encoding *)enc;
      __CrestLoad(95670, (unsigned long )(& mem_7->type[(unsigned char )*mem_6]),
                  (long long )mem_7->type[(unsigned char )*mem_6]);
      __CrestStore(95671, (unsigned long )(& tmp___0));
# 1729 "xmltok_impl.c"
      tmp___0 = (int )mem_7->type[(unsigned char )*mem_6];
    } else {
      __CrestBranch(95669, 62223, 0);
# 1729 "xmltok_impl.c"
      mem_8 = ptr + 0;
# 1729 "xmltok_impl.c"
      mem_9 = ptr + 1;
      __CrestLoad(95672, (unsigned long )mem_8, (long long )*mem_8);
      __CrestLoad(95673, (unsigned long )mem_9, (long long )*mem_9);
# 1729 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_8, (char )*mem_9);
      __CrestHandleReturn(95675, (long long )tmp);
      __CrestStore(95674, (unsigned long )(& tmp));
      __CrestLoad(95676, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(95677, (unsigned long )(& tmp___0));
# 1729 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(95680, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95679, (unsigned long )0, (long long )21);
    __CrestApply2(95678, 12, (long long )(tmp___0 == 21));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 21) {
      __CrestBranch(95681, 62226, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(95682, 62227, 0);

    }
    }
    {
    __CrestLoad(95685, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95684, (unsigned long )0, (long long )9);
    __CrestApply2(95683, 12, (long long )(tmp___0 == 9));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(95686, 62229, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(95687, 62230, 0);

    }
    }
    {
    __CrestLoad(95690, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95689, (unsigned long )0, (long long )10);
    __CrestApply2(95688, 12, (long long )(tmp___0 == 10));
# 1732 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(95691, 62232, 1);
# 1732 "xmltok_impl.c"
      goto case_21;
    } else {
      __CrestBranch(95692, 62233, 0);

    }
    }
# 1735 "xmltok_impl.c"
    goto switch_default;
    case_21:
    case_9:
    case_10:
# 1733 "xmltok_impl.c"
    ptr += 2;
# 1734 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1736 "xmltok_impl.c"
    __retres10 = ptr;
# 1736 "xmltok_impl.c"
    goto return_label;
    switch_break: ;
    }
  }
  while_break: ;
  }
  return_label:
  {
  __CrestReturn(95693);
# 1725 "xmltok_impl.c"
  return (__retres10);
  }
}
}
# 1741 "xmltok_impl.c"
static void big2_updatePosition(ENCODING const *enc , char const *ptr , char const *end ,
                                POSITION *pos )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_9 ;
  char const *mem_10 ;
  struct normal_encoding *mem_11 ;
  char const *mem_12 ;
  char const *mem_13 ;
  char const *mem_14 ;
  char const *mem_15 ;
  struct normal_encoding *mem_16 ;
  char const *mem_17 ;
  char const *mem_18 ;

  {
  __CrestCall(95694, 929);

  {
# 1747 "xmltok_impl.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(95697, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(95696, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(95695, 16, (long long )((unsigned long )ptr < (unsigned long )end));
# 1747 "xmltok_impl.c"
    if ((unsigned long )ptr < (unsigned long )end) {
      __CrestBranch(95698, 62246, 1);

    } else {
      __CrestBranch(95699, 62247, 0);
# 1747 "xmltok_impl.c"
      goto while_break;
    }
    }
    {
# 1748 "xmltok_impl.c"
    mem_9 = ptr + 0;
    {
    __CrestLoad(95702, (unsigned long )mem_9, (long long )*mem_9);
    __CrestLoad(95701, (unsigned long )0, (long long )0);
    __CrestApply2(95700, 12, (long long )((int const )*mem_9 == 0));
# 1748 "xmltok_impl.c"
    if ((int const )*mem_9 == 0) {
      __CrestBranch(95703, 62251, 1);
# 1748 "xmltok_impl.c"
      mem_10 = ptr + 1;
# 1748 "xmltok_impl.c"
      mem_11 = (struct normal_encoding *)enc;
      __CrestLoad(95705, (unsigned long )(& mem_11->type[(unsigned char )*mem_10]),
                  (long long )mem_11->type[(unsigned char )*mem_10]);
      __CrestStore(95706, (unsigned long )(& tmp___0));
# 1748 "xmltok_impl.c"
      tmp___0 = (int )mem_11->type[(unsigned char )*mem_10];
    } else {
      __CrestBranch(95704, 62252, 0);
# 1748 "xmltok_impl.c"
      mem_12 = ptr + 0;
# 1748 "xmltok_impl.c"
      mem_13 = ptr + 1;
      __CrestLoad(95707, (unsigned long )mem_12, (long long )*mem_12);
      __CrestLoad(95708, (unsigned long )mem_13, (long long )*mem_13);
# 1748 "xmltok_impl.c"
      tmp = unicode_byte_type((char )*mem_12, (char )*mem_13);
      __CrestHandleReturn(95710, (long long )tmp);
      __CrestStore(95709, (unsigned long )(& tmp));
      __CrestLoad(95711, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(95712, (unsigned long )(& tmp___0));
# 1748 "xmltok_impl.c"
      tmp___0 = tmp;
    }
    }
    }
    {
    {
    __CrestLoad(95715, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95714, (unsigned long )0, (long long )5);
    __CrestApply2(95713, 12, (long long )(tmp___0 == 5));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 5) {
      __CrestBranch(95716, 62255, 1);
# 1753 "xmltok_impl.c"
      goto case_5;
    } else {
      __CrestBranch(95717, 62256, 0);

    }
    }
    {
    __CrestLoad(95720, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95719, (unsigned long )0, (long long )6);
    __CrestApply2(95718, 12, (long long )(tmp___0 == 6));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 6) {
      __CrestBranch(95721, 62258, 1);
# 1753 "xmltok_impl.c"
      goto case_6;
    } else {
      __CrestBranch(95722, 62259, 0);

    }
    }
    {
    __CrestLoad(95725, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95724, (unsigned long )0, (long long )7);
    __CrestApply2(95723, 12, (long long )(tmp___0 == 7));
# 1753 "xmltok_impl.c"
    if (tmp___0 == 7) {
      __CrestBranch(95726, 62261, 1);
# 1753 "xmltok_impl.c"
      goto case_7;
    } else {
      __CrestBranch(95727, 62262, 0);

    }
    }
    {
    __CrestLoad(95730, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95729, (unsigned long )0, (long long )10);
    __CrestApply2(95728, 12, (long long )(tmp___0 == 10));
# 1755 "xmltok_impl.c"
    if (tmp___0 == 10) {
      __CrestBranch(95731, 62264, 1);
# 1755 "xmltok_impl.c"
      goto case_10;
    } else {
      __CrestBranch(95732, 62265, 0);

    }
    }
    {
    __CrestLoad(95735, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(95734, (unsigned long )0, (long long )9);
    __CrestApply2(95733, 12, (long long )(tmp___0 == 9));
# 1760 "xmltok_impl.c"
    if (tmp___0 == 9) {
      __CrestBranch(95736, 62267, 1);
# 1760 "xmltok_impl.c"
      goto case_9;
    } else {
      __CrestBranch(95737, 62268, 0);

    }
    }
# 1767 "xmltok_impl.c"
    goto switch_default;
    case_5:
# 1753 "xmltok_impl.c"
    ptr += 2;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_6:
# 1753 "xmltok_impl.c"
    ptr += 3;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_7:
# 1753 "xmltok_impl.c"
    ptr += 4;
# 1753 "xmltok_impl.c"
    goto switch_break;
    case_10:
    __CrestLoad(95738, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(95739, (unsigned long )(& pos->columnNumber));
# 1756 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
    __CrestLoad(95742, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(95741, (unsigned long )0, (long long )1UL);
    __CrestApply2(95740, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(95743, (unsigned long )(& pos->lineNumber));
# 1757 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1758 "xmltok_impl.c"
    ptr += 2;
# 1759 "xmltok_impl.c"
    goto switch_break;
    case_9:
    __CrestLoad(95746, (unsigned long )(& pos->lineNumber), (long long )pos->lineNumber);
    __CrestLoad(95745, (unsigned long )0, (long long )1UL);
    __CrestApply2(95744, 0, (long long )(pos->lineNumber + 1UL));
    __CrestStore(95747, (unsigned long )(& pos->lineNumber));
# 1761 "xmltok_impl.c"
    (pos->lineNumber) ++;
# 1762 "xmltok_impl.c"
    ptr += 2;
    {
    __CrestLoad(95750, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(95749, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(95748, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1763 "xmltok_impl.c"
    if ((unsigned long )ptr != (unsigned long )end) {
      __CrestBranch(95751, 62280, 1);
      {
# 1763 "xmltok_impl.c"
      mem_14 = ptr + 0;
      {
      __CrestLoad(95755, (unsigned long )mem_14, (long long )*mem_14);
      __CrestLoad(95754, (unsigned long )0, (long long )0);
      __CrestApply2(95753, 12, (long long )((int const )*mem_14 == 0));
# 1763 "xmltok_impl.c"
      if ((int const )*mem_14 == 0) {
        __CrestBranch(95756, 62283, 1);
# 1763 "xmltok_impl.c"
        mem_15 = ptr + 1;
# 1763 "xmltok_impl.c"
        mem_16 = (struct normal_encoding *)enc;
        __CrestLoad(95758, (unsigned long )(& mem_16->type[(unsigned char )*mem_15]),
                    (long long )mem_16->type[(unsigned char )*mem_15]);
        __CrestStore(95759, (unsigned long )(& tmp___2));
# 1763 "xmltok_impl.c"
        tmp___2 = (int )mem_16->type[(unsigned char )*mem_15];
      } else {
        __CrestBranch(95757, 62284, 0);
# 1763 "xmltok_impl.c"
        mem_17 = ptr + 0;
# 1763 "xmltok_impl.c"
        mem_18 = ptr + 1;
        __CrestLoad(95760, (unsigned long )mem_17, (long long )*mem_17);
        __CrestLoad(95761, (unsigned long )mem_18, (long long )*mem_18);
# 1763 "xmltok_impl.c"
        tmp___1 = unicode_byte_type((char )*mem_17, (char )*mem_18);
        __CrestHandleReturn(95763, (long long )tmp___1);
        __CrestStore(95762, (unsigned long )(& tmp___1));
        __CrestLoad(95764, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(95765, (unsigned long )(& tmp___2));
# 1763 "xmltok_impl.c"
        tmp___2 = tmp___1;
      }
      }
      }
      {
      __CrestLoad(95768, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(95767, (unsigned long )0, (long long )10);
      __CrestApply2(95766, 12, (long long )(tmp___2 == 10));
# 1763 "xmltok_impl.c"
      if (tmp___2 == 10) {
        __CrestBranch(95769, 62286, 1);
# 1764 "xmltok_impl.c"
        ptr += 2;
      } else {
        __CrestBranch(95770, 62287, 0);

      }
      }
    } else {
      __CrestBranch(95752, 62288, 0);

    }
    }
    __CrestLoad(95771, (unsigned long )0, (long long )((XML_Size )-1));
    __CrestStore(95772, (unsigned long )(& pos->columnNumber));
# 1765 "xmltok_impl.c"
    pos->columnNumber = (XML_Size )-1;
# 1766 "xmltok_impl.c"
    goto switch_break;
    switch_default:
# 1768 "xmltok_impl.c"
    ptr += 2;
# 1769 "xmltok_impl.c"
    goto switch_break;
    switch_break: ;
    }
    __CrestLoad(95775, (unsigned long )(& pos->columnNumber), (long long )pos->columnNumber);
    __CrestLoad(95774, (unsigned long )0, (long long )1UL);
    __CrestApply2(95773, 0, (long long )(pos->columnNumber + 1UL));
    __CrestStore(95776, (unsigned long )(& pos->columnNumber));
# 1771 "xmltok_impl.c"
    (pos->columnNumber) ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(95777);
# 1741 "xmltok_impl.c"
  return;
  }
}
}
# 858 "xmltok.c"
static struct normal_encoding const big2_encoding_ns =
# 858 "xmltok.c"
     {{{& big2_prologTok, & big2_contentTok, & big2_cdataSectionTok, & big2_ignoreSectionTok},
     {& big2_attributeValueTok, & big2_entityValueTok}, & big2_sameName, & big2_nameMatchesAscii,
     & big2_nameLength, & big2_skipS, & big2_getAtts, & big2_charRefNumber, & big2_predefinedEntityName,
     & big2_updatePosition, & big2_isPublicId, & big2_toUtf8, & big2_toUtf16, 2, (char)0,
     (char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)21, (unsigned char)10, (unsigned char)0,
                (unsigned char)0, (unsigned char)9, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)21, (unsigned char)16, (unsigned char)12, (unsigned char)19,
                (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
                (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34,
                (unsigned char)35, (unsigned char)27, (unsigned char)26, (unsigned char)17,
                (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
                (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
                (unsigned char)25, (unsigned char)25, (unsigned char)23, (unsigned char)18,
                (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15,
                (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
                (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)20,
                (unsigned char)28, (unsigned char)4, (unsigned char)28, (unsigned char)22,
                (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
                (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)36, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26,
                (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 875 "xmltok.c"
static struct normal_encoding const big2_encoding =
# 875 "xmltok.c"
     {{{& big2_prologTok, & big2_contentTok, & big2_cdataSectionTok, & big2_ignoreSectionTok},
     {& big2_attributeValueTok, & big2_entityValueTok}, & big2_sameName, & big2_nameMatchesAscii,
     & big2_nameLength, & big2_skipS, & big2_getAtts, & big2_charRefNumber, & big2_predefinedEntityName,
     & big2_updatePosition, & big2_isPublicId, & big2_toUtf8, & big2_toUtf16, 2, (char)0,
     (char)0}, {(unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)21, (unsigned char)10, (unsigned char)0,
                (unsigned char)0, (unsigned char)9, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
                (unsigned char)21, (unsigned char)16, (unsigned char)12, (unsigned char)19,
                (unsigned char)28, (unsigned char)30, (unsigned char)3, (unsigned char)13,
                (unsigned char)31, (unsigned char)32, (unsigned char)33, (unsigned char)34,
                (unsigned char)35, (unsigned char)27, (unsigned char)26, (unsigned char)17,
                (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
                (unsigned char)25, (unsigned char)25, (unsigned char)25, (unsigned char)25,
                (unsigned char)25, (unsigned char)25, (unsigned char)22, (unsigned char)18,
                (unsigned char)2, (unsigned char)14, (unsigned char)11, (unsigned char)15,
                (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
                (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)20,
                (unsigned char)28, (unsigned char)4, (unsigned char)28, (unsigned char)22,
                (unsigned char)28, (unsigned char)24, (unsigned char)24, (unsigned char)24,
                (unsigned char)24, (unsigned char)24, (unsigned char)24, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)36, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)28, (unsigned char)22, (unsigned char)28, (unsigned char)26,
                (unsigned char)28, (unsigned char)28, (unsigned char)22, (unsigned char)28,
                (unsigned char)28, (unsigned char)28, (unsigned char)28, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)28,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22,
                (unsigned char)22, (unsigned char)22, (unsigned char)22, (unsigned char)22},
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0, (int (*)(ENCODING const * ,
                                                               char const * ))0,
    (int (*)(ENCODING const * , char const * ))0};
# 922 "xmltok.c"
static int streqci(char const *s1 , char const *s2 )
{
  char c1 ;
  char const *tmp ;
  char c2 ;
  char const *tmp___0 ;
  int __retres7 ;

  {
  __CrestCall(95778, 930);

  {
# 925 "xmltok.c"
  while (1) {
    while_continue: ;
# 926 "xmltok.c"
    tmp = s1;
# 926 "xmltok.c"
    s1 ++;
    __CrestLoad(95779, (unsigned long )tmp, (long long )*tmp);
    __CrestStore(95780, (unsigned long )(& c1));
# 926 "xmltok.c"
    c1 = (char )*tmp;
# 927 "xmltok.c"
    tmp___0 = s2;
# 927 "xmltok.c"
    s2 ++;
    __CrestLoad(95781, (unsigned long )tmp___0, (long long )*tmp___0);
    __CrestStore(95782, (unsigned long )(& c2));
# 927 "xmltok.c"
    c2 = (char )*tmp___0;
    {
    __CrestLoad(95785, (unsigned long )0, (long long )97);
    __CrestLoad(95784, (unsigned long )(& c1), (long long )c1);
    __CrestApply2(95783, 15, (long long )(97 <= (int )c1));
# 928 "xmltok.c"
    if (97 <= (int )c1) {
      __CrestBranch(95786, 62303, 1);
      {
      __CrestLoad(95790, (unsigned long )(& c1), (long long )c1);
      __CrestLoad(95789, (unsigned long )0, (long long )122);
      __CrestApply2(95788, 15, (long long )((int )c1 <= 122));
# 928 "xmltok.c"
      if ((int )c1 <= 122) {
        __CrestBranch(95791, 62304, 1);
        __CrestLoad(95795, (unsigned long )(& c1), (long long )c1);
        __CrestLoad(95794, (unsigned long )0, (long long )-32);
        __CrestApply2(95793, 0, (long long )((int )c1 + -32));
        __CrestStore(95796, (unsigned long )(& c1));
# 929 "xmltok.c"
        c1 = (char )((int )c1 + -32);
      } else {
        __CrestBranch(95792, 62305, 0);

      }
      }
    } else {
      __CrestBranch(95787, 62306, 0);

    }
    }
    {
    __CrestLoad(95799, (unsigned long )0, (long long )97);
    __CrestLoad(95798, (unsigned long )(& c2), (long long )c2);
    __CrestApply2(95797, 15, (long long )(97 <= (int )c2));
# 930 "xmltok.c"
    if (97 <= (int )c2) {
      __CrestBranch(95800, 62308, 1);
      {
      __CrestLoad(95804, (unsigned long )(& c2), (long long )c2);
      __CrestLoad(95803, (unsigned long )0, (long long )122);
      __CrestApply2(95802, 15, (long long )((int )c2 <= 122));
# 930 "xmltok.c"
      if ((int )c2 <= 122) {
        __CrestBranch(95805, 62309, 1);
        __CrestLoad(95809, (unsigned long )(& c2), (long long )c2);
        __CrestLoad(95808, (unsigned long )0, (long long )-32);
        __CrestApply2(95807, 0, (long long )((int )c2 + -32));
        __CrestStore(95810, (unsigned long )(& c2));
# 931 "xmltok.c"
        c2 = (char )((int )c2 + -32);
      } else {
        __CrestBranch(95806, 62310, 0);

      }
      }
    } else {
      __CrestBranch(95801, 62311, 0);

    }
    }
    {
    __CrestLoad(95813, (unsigned long )(& c1), (long long )c1);
    __CrestLoad(95812, (unsigned long )(& c2), (long long )c2);
    __CrestApply2(95811, 13, (long long )((int )c1 != (int )c2));
# 932 "xmltok.c"
    if ((int )c1 != (int )c2) {
      __CrestBranch(95814, 62313, 1);
      __CrestLoad(95816, (unsigned long )0, (long long )0);
      __CrestStore(95817, (unsigned long )(& __retres7));
# 933 "xmltok.c"
      __retres7 = 0;
# 933 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(95815, 62315, 0);

    }
    }
    {
    __CrestLoad(95820, (unsigned long )(& c1), (long long )c1);
    __CrestLoad(95819, (unsigned long )0, (long long )0);
    __CrestApply2(95818, 12, (long long )(c1 == 0));
# 934 "xmltok.c"
    if (c1 == 0) {
      __CrestBranch(95821, 62317, 1);
# 935 "xmltok.c"
      goto while_break;
    } else {
      __CrestBranch(95822, 62318, 0);

    }
    }
  }
  while_break: ;
  }
  __CrestLoad(95823, (unsigned long )0, (long long )1);
  __CrestStore(95824, (unsigned long )(& __retres7));
# 937 "xmltok.c"
  __retres7 = 1;
  return_label:
  {
  __CrestLoad(95825, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(95826);
# 922 "xmltok.c"
  return (__retres7);
  }
}
}
# 940 "xmltok.c"
static void initUpdatePosition(ENCODING const *enc , char const *ptr , char const *end ,
                               POSITION *pos )
{


  {
  __CrestCall(95827, 931);
# 944 "xmltok.c"
  normal_updatePosition(& utf8_encoding.enc, ptr, end, pos);
  __CrestClearStack(95828);

  {
  __CrestReturn(95829);
# 940 "xmltok.c"
  return;
  }
}
}
# 947 "xmltok.c"
static int toAscii(ENCODING const *enc , char const *ptr , char const *end )
{
  char buf[1] ;
  char *p ;
  void (*mem_6)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                char **toP , char const *toLim ) ;
  int __retres7 ;

  {
  __CrestCall(95830, 932);
# 951 "xmltok.c"
  p = buf;
# 952 "xmltok.c"
  mem_6 = enc->utf8Convert;
# 952 "xmltok.c"
  (*mem_6)(enc, & ptr, end, & p, (char const *)(p + 1));
  __CrestClearStack(95831);
  {
  __CrestLoad(95834, (unsigned long )(& p), (long long )((unsigned long )p));
  __CrestLoad(95833, (unsigned long )0, (long long )((unsigned long )(buf)));
  __CrestApply2(95832, 12, (long long )((unsigned long )p == (unsigned long )(buf)));
# 953 "xmltok.c"
  if ((unsigned long )p == (unsigned long )(buf)) {
    __CrestBranch(95835, 62327, 1);
    __CrestLoad(95837, (unsigned long )0, (long long )-1);
    __CrestStore(95838, (unsigned long )(& __retres7));
# 954 "xmltok.c"
    __retres7 = -1;
# 954 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(95836, 62329, 0);
    __CrestLoad(95839, (unsigned long )(& buf[0]), (long long )buf[0]);
    __CrestStore(95840, (unsigned long )(& __retres7));
# 956 "xmltok.c"
    __retres7 = (int )buf[0];
# 956 "xmltok.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(95841, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(95842);
# 947 "xmltok.c"
  return (__retres7);
  }
}
}
# 959 "xmltok.c"
static int isSpace(int c )
{
  int __retres2 ;

  {
  __CrestCall(95844, 933);
  __CrestStore(95843, (unsigned long )(& c));
  {
  {
  __CrestLoad(95847, (unsigned long )(& c), (long long )c);
  __CrestLoad(95846, (unsigned long )0, (long long )9);
  __CrestApply2(95845, 12, (long long )(c == 9));
# 966 "xmltok.c"
  if (c == 9) {
    __CrestBranch(95848, 62334, 1);
# 966 "xmltok.c"
    goto case_9;
  } else {
    __CrestBranch(95849, 62335, 0);

  }
  }
  {
  __CrestLoad(95852, (unsigned long )(& c), (long long )c);
  __CrestLoad(95851, (unsigned long )0, (long long )10);
  __CrestApply2(95850, 12, (long long )(c == 10));
# 966 "xmltok.c"
  if (c == 10) {
    __CrestBranch(95853, 62337, 1);
# 966 "xmltok.c"
    goto case_9;
  } else {
    __CrestBranch(95854, 62338, 0);

  }
  }
  {
  __CrestLoad(95857, (unsigned long )(& c), (long long )c);
  __CrestLoad(95856, (unsigned long )0, (long long )13);
  __CrestApply2(95855, 12, (long long )(c == 13));
# 966 "xmltok.c"
  if (c == 13) {
    __CrestBranch(95858, 62340, 1);
# 966 "xmltok.c"
    goto case_9;
  } else {
    __CrestBranch(95859, 62341, 0);

  }
  }
  {
  __CrestLoad(95862, (unsigned long )(& c), (long long )c);
  __CrestLoad(95861, (unsigned long )0, (long long )32);
  __CrestApply2(95860, 12, (long long )(c == 32));
# 966 "xmltok.c"
  if (c == 32) {
    __CrestBranch(95863, 62343, 1);
# 966 "xmltok.c"
    goto case_9;
  } else {
    __CrestBranch(95864, 62344, 0);

  }
  }
# 962 "xmltok.c"
  goto switch_break;
  case_9:
  case_10:
  case_13:
  case_32:
  __CrestLoad(95865, (unsigned long )0, (long long )1);
  __CrestStore(95866, (unsigned long )(& __retres2));
# 967 "xmltok.c"
  __retres2 = 1;
# 967 "xmltok.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(95867, (unsigned long )0, (long long )0);
  __CrestStore(95868, (unsigned long )(& __retres2));
# 969 "xmltok.c"
  __retres2 = 0;
  return_label:
  {
  __CrestLoad(95869, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(95870);
# 959 "xmltok.c"
  return (__retres2);
  }
}
}
# 975 "xmltok.c"
static int parsePseudoAttribute(ENCODING const *enc , char const *ptr , char const *end ,
                                char const **namePtr , char const **nameEndPtr ,
                                char const **valPtr , char const **nextTokPtr )
{
  int c ;
  char open ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int __retres17 ;

  {
  __CrestCall(95871, 934);

  {
  __CrestLoad(95874, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(95873, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(95872, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 986 "xmltok.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(95875, 62352, 1);
# 987 "xmltok.c"
    *namePtr = (char const *)((void *)0);
    __CrestLoad(95877, (unsigned long )0, (long long )1);
    __CrestStore(95878, (unsigned long )(& __retres17));
# 988 "xmltok.c"
    __retres17 = 1;
# 988 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(95876, 62355, 0);

  }
  }
# 990 "xmltok.c"
  tmp = toAscii(enc, ptr, end);
  __CrestHandleReturn(95880, (long long )tmp);
  __CrestStore(95879, (unsigned long )(& tmp));
  __CrestLoad(95881, (unsigned long )(& tmp), (long long )tmp);
# 990 "xmltok.c"
  tmp___0 = isSpace(tmp);
  __CrestHandleReturn(95883, (long long )tmp___0);
  __CrestStore(95882, (unsigned long )(& tmp___0));
  {
  __CrestLoad(95886, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(95885, (unsigned long )0, (long long )0);
  __CrestApply2(95884, 13, (long long )(tmp___0 != 0));
# 990 "xmltok.c"
  if (tmp___0 != 0) {
    __CrestBranch(95887, 62358, 1);

  } else {
    __CrestBranch(95888, 62359, 0);
# 991 "xmltok.c"
    *nextTokPtr = ptr;
    __CrestLoad(95889, (unsigned long )0, (long long )0);
    __CrestStore(95890, (unsigned long )(& __retres17));
# 992 "xmltok.c"
    __retres17 = 0;
# 992 "xmltok.c"
    goto return_label;
  }
  }
  {
# 994 "xmltok.c"
  while (1) {
    while_continue: ;
# 995 "xmltok.c"
    ptr += enc->minBytesPerChar;
# 994 "xmltok.c"
    tmp___1 = toAscii(enc, ptr, end);
    __CrestHandleReturn(95892, (long long )tmp___1);
    __CrestStore(95891, (unsigned long )(& tmp___1));
    __CrestLoad(95893, (unsigned long )(& tmp___1), (long long )tmp___1);
# 994 "xmltok.c"
    tmp___2 = isSpace(tmp___1);
    __CrestHandleReturn(95895, (long long )tmp___2);
    __CrestStore(95894, (unsigned long )(& tmp___2));
    {
    __CrestLoad(95898, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestLoad(95897, (unsigned long )0, (long long )0);
    __CrestApply2(95896, 13, (long long )(tmp___2 != 0));
# 994 "xmltok.c"
    if (tmp___2 != 0) {
      __CrestBranch(95899, 62367, 1);

    } else {
      __CrestBranch(95900, 62368, 0);
# 994 "xmltok.c"
      goto while_break;
    }
    }
  }
  while_break: ;
  }
  {
  __CrestLoad(95903, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(95902, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(95901, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 997 "xmltok.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(95904, 62371, 1);
# 998 "xmltok.c"
    *namePtr = (char const *)((void *)0);
    __CrestLoad(95906, (unsigned long )0, (long long )1);
    __CrestStore(95907, (unsigned long )(& __retres17));
# 999 "xmltok.c"
    __retres17 = 1;
# 999 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(95905, 62374, 0);

  }
  }
# 1001 "xmltok.c"
  *namePtr = ptr;
  {
# 1002 "xmltok.c"
  while (1) {
    while_continue___0: ;
# 1003 "xmltok.c"
    c = toAscii(enc, ptr, end);
    __CrestHandleReturn(95909, (long long )c);
    __CrestStore(95908, (unsigned long )(& c));
    {
    __CrestLoad(95912, (unsigned long )(& c), (long long )c);
    __CrestLoad(95911, (unsigned long )0, (long long )-1);
    __CrestApply2(95910, 12, (long long )(c == -1));
# 1004 "xmltok.c"
    if (c == -1) {
      __CrestBranch(95913, 62381, 1);
# 1005 "xmltok.c"
      *nextTokPtr = ptr;
      __CrestLoad(95915, (unsigned long )0, (long long )0);
      __CrestStore(95916, (unsigned long )(& __retres17));
# 1006 "xmltok.c"
      __retres17 = 0;
# 1006 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(95914, 62384, 0);

    }
    }
    {
    __CrestLoad(95919, (unsigned long )(& c), (long long )c);
    __CrestLoad(95918, (unsigned long )0, (long long )61);
    __CrestApply2(95917, 12, (long long )(c == 61));
# 1008 "xmltok.c"
    if (c == 61) {
      __CrestBranch(95920, 62386, 1);
# 1009 "xmltok.c"
      *nameEndPtr = ptr;
# 1010 "xmltok.c"
      goto while_break___0;
    } else {
      __CrestBranch(95921, 62388, 0);

    }
    }
    __CrestLoad(95922, (unsigned long )(& c), (long long )c);
# 1012 "xmltok.c"
    tmp___4 = isSpace(c);
    __CrestHandleReturn(95924, (long long )tmp___4);
    __CrestStore(95923, (unsigned long )(& tmp___4));
    {
    __CrestLoad(95927, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestLoad(95926, (unsigned long )0, (long long )0);
    __CrestApply2(95925, 13, (long long )(tmp___4 != 0));
# 1012 "xmltok.c"
    if (tmp___4 != 0) {
      __CrestBranch(95928, 62391, 1);
# 1013 "xmltok.c"
      *nameEndPtr = ptr;
      {
# 1014 "xmltok.c"
      while (1) {
        while_continue___1: ;
# 1015 "xmltok.c"
        ptr += enc->minBytesPerChar;
# 1014 "xmltok.c"
        c = toAscii(enc, ptr, end);
        __CrestHandleReturn(95931, (long long )c);
        __CrestStore(95930, (unsigned long )(& c));
        __CrestLoad(95932, (unsigned long )(& c), (long long )c);
# 1014 "xmltok.c"
        tmp___3 = isSpace(c);
        __CrestHandleReturn(95934, (long long )tmp___3);
        __CrestStore(95933, (unsigned long )(& tmp___3));
        {
        __CrestLoad(95937, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestLoad(95936, (unsigned long )0, (long long )0);
        __CrestApply2(95935, 13, (long long )(tmp___3 != 0));
# 1014 "xmltok.c"
        if (tmp___3 != 0) {
          __CrestBranch(95938, 62397, 1);

        } else {
          __CrestBranch(95939, 62398, 0);
# 1014 "xmltok.c"
          goto while_break___1;
        }
        }
      }
      while_break___1: ;
      }
      {
      __CrestLoad(95942, (unsigned long )(& c), (long long )c);
      __CrestLoad(95941, (unsigned long )0, (long long )61);
      __CrestApply2(95940, 13, (long long )(c != 61));
# 1017 "xmltok.c"
      if (c != 61) {
        __CrestBranch(95943, 62401, 1);
# 1018 "xmltok.c"
        *nextTokPtr = ptr;
        __CrestLoad(95945, (unsigned long )0, (long long )0);
        __CrestStore(95946, (unsigned long )(& __retres17));
# 1019 "xmltok.c"
        __retres17 = 0;
# 1019 "xmltok.c"
        goto return_label;
      } else {
        __CrestBranch(95944, 62404, 0);

      }
      }
# 1021 "xmltok.c"
      goto while_break___0;
    } else {
      __CrestBranch(95929, 62406, 0);

    }
    }
# 1023 "xmltok.c"
    ptr += enc->minBytesPerChar;
  }
  while_break___0: ;
  }
  {
  __CrestLoad(95949, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(95948, (unsigned long )namePtr, (long long )((unsigned long )*namePtr));
  __CrestApply2(95947, 12, (long long )((unsigned long )ptr == (unsigned long )*namePtr));
# 1025 "xmltok.c"
  if ((unsigned long )ptr == (unsigned long )*namePtr) {
    __CrestBranch(95950, 62410, 1);
# 1026 "xmltok.c"
    *nextTokPtr = ptr;
    __CrestLoad(95952, (unsigned long )0, (long long )0);
    __CrestStore(95953, (unsigned long )(& __retres17));
# 1027 "xmltok.c"
    __retres17 = 0;
# 1027 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(95951, 62413, 0);

  }
  }
# 1029 "xmltok.c"
  ptr += enc->minBytesPerChar;
# 1030 "xmltok.c"
  c = toAscii(enc, ptr, end);
  __CrestHandleReturn(95955, (long long )c);
  __CrestStore(95954, (unsigned long )(& c));
  {
# 1031 "xmltok.c"
  while (1) {
    while_continue___2: ;
    __CrestLoad(95956, (unsigned long )(& c), (long long )c);
# 1031 "xmltok.c"
    tmp___5 = isSpace(c);
    __CrestHandleReturn(95958, (long long )tmp___5);
    __CrestStore(95957, (unsigned long )(& tmp___5));
    {
    __CrestLoad(95961, (unsigned long )(& tmp___5), (long long )tmp___5);
    __CrestLoad(95960, (unsigned long )0, (long long )0);
    __CrestApply2(95959, 13, (long long )(tmp___5 != 0));
# 1031 "xmltok.c"
    if (tmp___5 != 0) {
      __CrestBranch(95962, 62420, 1);

    } else {
      __CrestBranch(95963, 62421, 0);
# 1031 "xmltok.c"
      goto while_break___2;
    }
    }
# 1032 "xmltok.c"
    ptr += enc->minBytesPerChar;
# 1033 "xmltok.c"
    c = toAscii(enc, ptr, end);
    __CrestHandleReturn(95965, (long long )c);
    __CrestStore(95964, (unsigned long )(& c));
  }
  while_break___2: ;
  }
  {
  __CrestLoad(95968, (unsigned long )(& c), (long long )c);
  __CrestLoad(95967, (unsigned long )0, (long long )34);
  __CrestApply2(95966, 13, (long long )(c != 34));
# 1035 "xmltok.c"
  if (c != 34) {
    __CrestBranch(95969, 62425, 1);
    {
    __CrestLoad(95973, (unsigned long )(& c), (long long )c);
    __CrestLoad(95972, (unsigned long )0, (long long )39);
    __CrestApply2(95971, 13, (long long )(c != 39));
# 1035 "xmltok.c"
    if (c != 39) {
      __CrestBranch(95974, 62426, 1);
# 1036 "xmltok.c"
      *nextTokPtr = ptr;
      __CrestLoad(95976, (unsigned long )0, (long long )0);
      __CrestStore(95977, (unsigned long )(& __retres17));
# 1037 "xmltok.c"
      __retres17 = 0;
# 1037 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(95975, 62429, 0);

    }
    }
  } else {
    __CrestBranch(95970, 62430, 0);

  }
  }
  __CrestLoad(95978, (unsigned long )(& c), (long long )c);
  __CrestStore(95979, (unsigned long )(& open));
# 1039 "xmltok.c"
  open = (char )c;
# 1040 "xmltok.c"
  ptr += enc->minBytesPerChar;
# 1041 "xmltok.c"
  *valPtr = ptr;
  {
# 1042 "xmltok.c"
  while (1) {
    while_continue___3: ;
# 1043 "xmltok.c"
    c = toAscii(enc, ptr, end);
    __CrestHandleReturn(95981, (long long )c);
    __CrestStore(95980, (unsigned long )(& c));
    {
    __CrestLoad(95984, (unsigned long )(& c), (long long )c);
    __CrestLoad(95983, (unsigned long )(& open), (long long )open);
    __CrestApply2(95982, 12, (long long )(c == (int )open));
# 1044 "xmltok.c"
    if (c == (int )open) {
      __CrestBranch(95985, 62437, 1);
# 1045 "xmltok.c"
      goto while_break___3;
    } else {
      __CrestBranch(95986, 62438, 0);

    }
    }
    {
    __CrestLoad(95989, (unsigned long )0, (long long )97);
    __CrestLoad(95988, (unsigned long )(& c), (long long )c);
    __CrestApply2(95987, 15, (long long )(97 <= c));
# 1046 "xmltok.c"
    if (97 <= c) {
      __CrestBranch(95990, 62440, 1);
      {
      __CrestLoad(95994, (unsigned long )(& c), (long long )c);
      __CrestLoad(95993, (unsigned long )0, (long long )122);
      __CrestApply2(95992, 15, (long long )(c <= 122));
# 1046 "xmltok.c"
      if (c <= 122) {
        __CrestBranch(95995, 62441, 1);

      } else {
        __CrestBranch(95996, 62442, 0);
# 1046 "xmltok.c"
        goto _L___1;
      }
      }
    } else {
      __CrestBranch(95991, 62443, 0);
      _L___1:
      {
      __CrestLoad(95999, (unsigned long )0, (long long )65);
      __CrestLoad(95998, (unsigned long )(& c), (long long )c);
      __CrestApply2(95997, 15, (long long )(65 <= c));
# 1046 "xmltok.c"
      if (65 <= c) {
        __CrestBranch(96000, 62444, 1);
        {
        __CrestLoad(96004, (unsigned long )(& c), (long long )c);
        __CrestLoad(96003, (unsigned long )0, (long long )90);
        __CrestApply2(96002, 15, (long long )(c <= 90));
# 1046 "xmltok.c"
        if (c <= 90) {
          __CrestBranch(96005, 62445, 1);

        } else {
          __CrestBranch(96006, 62446, 0);
# 1046 "xmltok.c"
          goto _L___0;
        }
        }
      } else {
        __CrestBranch(96001, 62447, 0);
        _L___0:
        {
        __CrestLoad(96009, (unsigned long )0, (long long )48);
        __CrestLoad(96008, (unsigned long )(& c), (long long )c);
        __CrestApply2(96007, 15, (long long )(48 <= c));
# 1046 "xmltok.c"
        if (48 <= c) {
          __CrestBranch(96010, 62448, 1);
          {
          __CrestLoad(96014, (unsigned long )(& c), (long long )c);
          __CrestLoad(96013, (unsigned long )0, (long long )57);
          __CrestApply2(96012, 15, (long long )(c <= 57));
# 1046 "xmltok.c"
          if (c <= 57) {
            __CrestBranch(96015, 62449, 1);

          } else {
            __CrestBranch(96016, 62450, 0);
# 1046 "xmltok.c"
            goto _L;
          }
          }
        } else {
          __CrestBranch(96011, 62451, 0);
          _L:
          {
          __CrestLoad(96019, (unsigned long )(& c), (long long )c);
          __CrestLoad(96018, (unsigned long )0, (long long )46);
          __CrestApply2(96017, 13, (long long )(c != 46));
# 1046 "xmltok.c"
          if (c != 46) {
            __CrestBranch(96020, 62452, 1);
            {
            __CrestLoad(96024, (unsigned long )(& c), (long long )c);
            __CrestLoad(96023, (unsigned long )0, (long long )45);
            __CrestApply2(96022, 13, (long long )(c != 45));
# 1046 "xmltok.c"
            if (c != 45) {
              __CrestBranch(96025, 62453, 1);
              {
              __CrestLoad(96029, (unsigned long )(& c), (long long )c);
              __CrestLoad(96028, (unsigned long )0, (long long )95);
              __CrestApply2(96027, 13, (long long )(c != 95));
# 1046 "xmltok.c"
              if (c != 95) {
                __CrestBranch(96030, 62454, 1);
# 1052 "xmltok.c"
                *nextTokPtr = ptr;
                __CrestLoad(96032, (unsigned long )0, (long long )0);
                __CrestStore(96033, (unsigned long )(& __retres17));
# 1053 "xmltok.c"
                __retres17 = 0;
# 1053 "xmltok.c"
                goto return_label;
              } else {
                __CrestBranch(96031, 62457, 0);

              }
              }
            } else {
              __CrestBranch(96026, 62458, 0);

            }
            }
          } else {
            __CrestBranch(96021, 62459, 0);

          }
          }
        }
        }
      }
      }
    }
    }
# 1042 "xmltok.c"
    ptr += enc->minBytesPerChar;
  }
  while_break___3: ;
  }
# 1056 "xmltok.c"
  *nextTokPtr = ptr + enc->minBytesPerChar;
  __CrestLoad(96034, (unsigned long )0, (long long )1);
  __CrestStore(96035, (unsigned long )(& __retres17));
# 1057 "xmltok.c"
  __retres17 = 1;
  return_label:
  {
  __CrestLoad(96036, (unsigned long )(& __retres17), (long long )__retres17);
  __CrestReturn(96037);
# 975 "xmltok.c"
  return (__retres17);
  }
}
}
# 1060 "xmltok.c"
static char const KW_version[8] =
# 1060 "xmltok.c"
  { (char const )118, (char const )101, (char const )114, (char const )115,
        (char const )105, (char const )111, (char const )110, (char const )'\000'};
# 1064 "xmltok.c"
static char const KW_encoding[9] =
# 1064 "xmltok.c"
  { (char const )101, (char const )110, (char const )99, (char const )111,
        (char const )100, (char const )105, (char const )110, (char const )103,
        (char const )'\000'};
# 1068 "xmltok.c"
static char const KW_standalone[11] =
# 1068 "xmltok.c"
  { (char const )115, (char const )116, (char const )97, (char const )110,
        (char const )100, (char const )97, (char const )108, (char const )111,
        (char const )110, (char const )101, (char const )'\000'};
# 1073 "xmltok.c"
static char const KW_yes[4] = { (char const )121, (char const )101, (char const )115, (char const )'\000'};
# 1077 "xmltok.c"
static char const KW_no[3] = { (char const )110, (char const )111, (char const )'\000'};
# 1081 "xmltok.c"
static int doParseXmlDecl(ENCODING const *(*encodingFinder)(ENCODING const * ,
                                                              char const * , char const * ) ,
                          int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
                          char const *end , char const **badPtr , char const **versionPtr ,
                          char const **versionEndPtr , char const **encodingName ,
                          ENCODING const **encoding , int *standalone )
{
  char const *val ;
  char const *name ;
  char const *nameEnd ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int c ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int (*mem_27)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_28)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_29)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_30)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_31)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres32 ;

  {
  __CrestCall(96039, 935);
  __CrestStore(96038, (unsigned long )(& isGeneralTextEntity));
# 1096 "xmltok.c"
  val = (char const *)((void *)0);
# 1097 "xmltok.c"
  name = (char const *)((void *)0);
# 1098 "xmltok.c"
  nameEnd = (char const *)((void *)0);
# 1099 "xmltok.c"
  ptr += 5 * (int )enc->minBytesPerChar;
# 1100 "xmltok.c"
  end -= 2 * (int )enc->minBytesPerChar;
# 1101 "xmltok.c"
  tmp = parsePseudoAttribute(enc, ptr, end, & name, & nameEnd, & val, & ptr);
  __CrestHandleReturn(96041, (long long )tmp);
  __CrestStore(96040, (unsigned long )(& tmp));
  {
  __CrestLoad(96044, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(96043, (unsigned long )0, (long long )0);
  __CrestApply2(96042, 13, (long long )(tmp != 0));
# 1101 "xmltok.c"
  if (tmp != 0) {
    __CrestBranch(96045, 62467, 1);
    {
    __CrestLoad(96049, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(96048, (unsigned long )0, (long long )0);
    __CrestApply2(96047, 12, (long long )(name == 0));
# 1101 "xmltok.c"
    if (name == 0) {
      __CrestBranch(96050, 62468, 1);
# 1103 "xmltok.c"
      *badPtr = ptr;
      __CrestLoad(96052, (unsigned long )0, (long long )0);
      __CrestStore(96053, (unsigned long )(& __retres32));
# 1104 "xmltok.c"
      __retres32 = 0;
# 1104 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96051, 62471, 0);

    }
    }
  } else {
    __CrestBranch(96046, 62472, 0);
# 1103 "xmltok.c"
    *badPtr = ptr;
    __CrestLoad(96054, (unsigned long )0, (long long )0);
    __CrestStore(96055, (unsigned long )(& __retres32));
# 1104 "xmltok.c"
    __retres32 = 0;
# 1104 "xmltok.c"
    goto return_label;
  }
  }
# 1106 "xmltok.c"
  mem_27 = enc->nameMatchesAscii;
# 1106 "xmltok.c"
  tmp___1 = (*mem_27)(enc, name, nameEnd, KW_version);
  __CrestHandleReturn(96057, (long long )tmp___1);
  __CrestStore(96056, (unsigned long )(& tmp___1));
  {
  __CrestLoad(96060, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(96059, (unsigned long )0, (long long )0);
  __CrestApply2(96058, 13, (long long )(tmp___1 != 0));
# 1106 "xmltok.c"
  if (tmp___1 != 0) {
    __CrestBranch(96061, 62477, 1);
    {
    __CrestLoad(96065, (unsigned long )(& versionPtr), (long long )((unsigned long )versionPtr));
    __CrestLoad(96064, (unsigned long )0, (long long )0);
    __CrestApply2(96063, 13, (long long )(versionPtr != 0));
# 1113 "xmltok.c"
    if (versionPtr != 0) {
      __CrestBranch(96066, 62478, 1);
# 1114 "xmltok.c"
      *versionPtr = val;
    } else {
      __CrestBranch(96067, 62479, 0);

    }
    }
    {
    __CrestLoad(96070, (unsigned long )(& versionEndPtr), (long long )((unsigned long )versionEndPtr));
    __CrestLoad(96069, (unsigned long )0, (long long )0);
    __CrestApply2(96068, 13, (long long )(versionEndPtr != 0));
# 1115 "xmltok.c"
    if (versionEndPtr != 0) {
      __CrestBranch(96071, 62481, 1);
# 1116 "xmltok.c"
      *versionEndPtr = ptr;
    } else {
      __CrestBranch(96072, 62482, 0);

    }
    }
# 1117 "xmltok.c"
    tmp___0 = parsePseudoAttribute(enc, ptr, end, & name, & nameEnd, & val, & ptr);
    __CrestHandleReturn(96074, (long long )tmp___0);
    __CrestStore(96073, (unsigned long )(& tmp___0));
    {
    __CrestLoad(96077, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(96076, (unsigned long )0, (long long )0);
    __CrestApply2(96075, 13, (long long )(tmp___0 != 0));
# 1117 "xmltok.c"
    if (tmp___0 != 0) {
      __CrestBranch(96078, 62485, 1);

    } else {
      __CrestBranch(96079, 62486, 0);
# 1118 "xmltok.c"
      *badPtr = ptr;
      __CrestLoad(96080, (unsigned long )0, (long long )0);
      __CrestStore(96081, (unsigned long )(& __retres32));
# 1119 "xmltok.c"
      __retres32 = 0;
# 1119 "xmltok.c"
      goto return_label;
    }
    }
    {
    __CrestLoad(96084, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(96083, (unsigned long )0, (long long )0);
    __CrestApply2(96082, 12, (long long )(name == 0));
# 1121 "xmltok.c"
    if (name == 0) {
      __CrestBranch(96085, 62490, 1);
      {
      __CrestLoad(96089, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
      __CrestLoad(96088, (unsigned long )0, (long long )0);
      __CrestApply2(96087, 13, (long long )(isGeneralTextEntity != 0));
# 1122 "xmltok.c"
      if (isGeneralTextEntity != 0) {
        __CrestBranch(96090, 62491, 1);
# 1124 "xmltok.c"
        *badPtr = ptr;
        __CrestLoad(96092, (unsigned long )0, (long long )0);
        __CrestStore(96093, (unsigned long )(& __retres32));
# 1125 "xmltok.c"
        __retres32 = 0;
# 1125 "xmltok.c"
        goto return_label;
      } else {
        __CrestBranch(96091, 62494, 0);

      }
      }
      __CrestLoad(96094, (unsigned long )0, (long long )1);
      __CrestStore(96095, (unsigned long )(& __retres32));
# 1127 "xmltok.c"
      __retres32 = 1;
# 1127 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96086, 62497, 0);

    }
    }
  } else {
    __CrestBranch(96062, 62498, 0);
    {
    __CrestLoad(96098, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
    __CrestLoad(96097, (unsigned long )0, (long long )0);
    __CrestApply2(96096, 12, (long long )(isGeneralTextEntity == 0));
# 1107 "xmltok.c"
    if (isGeneralTextEntity == 0) {
      __CrestBranch(96099, 62499, 1);
# 1108 "xmltok.c"
      *badPtr = name;
      __CrestLoad(96101, (unsigned long )0, (long long )0);
      __CrestStore(96102, (unsigned long )(& __retres32));
# 1109 "xmltok.c"
      __retres32 = 0;
# 1109 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96100, 62502, 0);

    }
    }
  }
  }
# 1130 "xmltok.c"
  mem_28 = enc->nameMatchesAscii;
# 1130 "xmltok.c"
  tmp___4 = (*mem_28)(enc, name, nameEnd, KW_encoding);
  __CrestHandleReturn(96104, (long long )tmp___4);
  __CrestStore(96103, (unsigned long )(& tmp___4));
  {
  __CrestLoad(96107, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestLoad(96106, (unsigned long )0, (long long )0);
  __CrestApply2(96105, 13, (long long )(tmp___4 != 0));
# 1130 "xmltok.c"
  if (tmp___4 != 0) {
    __CrestBranch(96108, 62505, 1);
# 1131 "xmltok.c"
    tmp___2 = toAscii(enc, val, end);
    __CrestHandleReturn(96111, (long long )tmp___2);
    __CrestStore(96110, (unsigned long )(& tmp___2));
    __CrestLoad(96112, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestStore(96113, (unsigned long )(& c));
# 1131 "xmltok.c"
    c = tmp___2;
    {
    __CrestLoad(96116, (unsigned long )0, (long long )97);
    __CrestLoad(96115, (unsigned long )(& c), (long long )c);
    __CrestApply2(96114, 15, (long long )(97 <= c));
# 1132 "xmltok.c"
    if (97 <= c) {
      __CrestBranch(96117, 62507, 1);
      {
      __CrestLoad(96121, (unsigned long )(& c), (long long )c);
      __CrestLoad(96120, (unsigned long )0, (long long )122);
      __CrestApply2(96119, 15, (long long )(c <= 122));
# 1132 "xmltok.c"
      if (c <= 122) {
        __CrestBranch(96122, 62508, 1);

      } else {
        __CrestBranch(96123, 62509, 0);
# 1132 "xmltok.c"
        goto _L;
      }
      }
    } else {
      __CrestBranch(96118, 62510, 0);
      _L:
      {
      __CrestLoad(96126, (unsigned long )0, (long long )65);
      __CrestLoad(96125, (unsigned long )(& c), (long long )c);
      __CrestApply2(96124, 15, (long long )(65 <= c));
# 1132 "xmltok.c"
      if (65 <= c) {
        __CrestBranch(96127, 62511, 1);
        {
        __CrestLoad(96131, (unsigned long )(& c), (long long )c);
        __CrestLoad(96130, (unsigned long )0, (long long )90);
        __CrestApply2(96129, 15, (long long )(c <= 90));
# 1132 "xmltok.c"
        if (c <= 90) {
          __CrestBranch(96132, 62512, 1);

        } else {
          __CrestBranch(96133, 62513, 0);
# 1133 "xmltok.c"
          *badPtr = val;
          __CrestLoad(96134, (unsigned long )0, (long long )0);
          __CrestStore(96135, (unsigned long )(& __retres32));
# 1134 "xmltok.c"
          __retres32 = 0;
# 1134 "xmltok.c"
          goto return_label;
        }
        }
      } else {
        __CrestBranch(96128, 62516, 0);
# 1133 "xmltok.c"
        *badPtr = val;
        __CrestLoad(96136, (unsigned long )0, (long long )0);
        __CrestStore(96137, (unsigned long )(& __retres32));
# 1134 "xmltok.c"
        __retres32 = 0;
# 1134 "xmltok.c"
        goto return_label;
      }
      }
    }
    }
    {
    __CrestLoad(96140, (unsigned long )(& encodingName), (long long )((unsigned long )encodingName));
    __CrestLoad(96139, (unsigned long )0, (long long )0);
    __CrestApply2(96138, 13, (long long )(encodingName != 0));
# 1136 "xmltok.c"
    if (encodingName != 0) {
      __CrestBranch(96141, 62520, 1);
# 1137 "xmltok.c"
      *encodingName = val;
    } else {
      __CrestBranch(96142, 62521, 0);

    }
    }
    {
    __CrestLoad(96145, (unsigned long )(& encoding), (long long )((unsigned long )encoding));
    __CrestLoad(96144, (unsigned long )0, (long long )0);
    __CrestApply2(96143, 13, (long long )(encoding != 0));
# 1138 "xmltok.c"
    if (encoding != 0) {
      __CrestBranch(96146, 62523, 1);
# 1139 "xmltok.c"
      *encoding = (*encodingFinder)(enc, val, ptr - enc->minBytesPerChar);
      __CrestClearStack(96148);
    } else {
      __CrestBranch(96147, 62524, 0);

    }
    }
# 1140 "xmltok.c"
    tmp___3 = parsePseudoAttribute(enc, ptr, end, & name, & nameEnd, & val, & ptr);
    __CrestHandleReturn(96150, (long long )tmp___3);
    __CrestStore(96149, (unsigned long )(& tmp___3));
    {
    __CrestLoad(96153, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestLoad(96152, (unsigned long )0, (long long )0);
    __CrestApply2(96151, 13, (long long )(tmp___3 != 0));
# 1140 "xmltok.c"
    if (tmp___3 != 0) {
      __CrestBranch(96154, 62527, 1);

    } else {
      __CrestBranch(96155, 62528, 0);
# 1141 "xmltok.c"
      *badPtr = ptr;
      __CrestLoad(96156, (unsigned long )0, (long long )0);
      __CrestStore(96157, (unsigned long )(& __retres32));
# 1142 "xmltok.c"
      __retres32 = 0;
# 1142 "xmltok.c"
      goto return_label;
    }
    }
    {
    __CrestLoad(96160, (unsigned long )(& name), (long long )((unsigned long )name));
    __CrestLoad(96159, (unsigned long )0, (long long )0);
    __CrestApply2(96158, 12, (long long )(name == 0));
# 1144 "xmltok.c"
    if (name == 0) {
      __CrestBranch(96161, 62532, 1);
      __CrestLoad(96163, (unsigned long )0, (long long )1);
      __CrestStore(96164, (unsigned long )(& __retres32));
# 1145 "xmltok.c"
      __retres32 = 1;
# 1145 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96162, 62534, 0);

    }
    }
  } else {
    __CrestBranch(96109, 62535, 0);

  }
  }
# 1147 "xmltok.c"
  mem_29 = enc->nameMatchesAscii;
# 1147 "xmltok.c"
  tmp___5 = (*mem_29)(enc, name, nameEnd, KW_standalone);
  __CrestHandleReturn(96166, (long long )tmp___5);
  __CrestStore(96165, (unsigned long )(& tmp___5));
  {
  __CrestLoad(96169, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestLoad(96168, (unsigned long )0, (long long )0);
  __CrestApply2(96167, 13, (long long )(tmp___5 != 0));
# 1147 "xmltok.c"
  if (tmp___5 != 0) {
    __CrestBranch(96170, 62538, 1);
    {
    __CrestLoad(96174, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
    __CrestLoad(96173, (unsigned long )0, (long long )0);
    __CrestApply2(96172, 13, (long long )(isGeneralTextEntity != 0));
# 1147 "xmltok.c"
    if (isGeneralTextEntity != 0) {
      __CrestBranch(96175, 62539, 1);
# 1149 "xmltok.c"
      *badPtr = name;
      __CrestLoad(96177, (unsigned long )0, (long long )0);
      __CrestStore(96178, (unsigned long )(& __retres32));
# 1150 "xmltok.c"
      __retres32 = 0;
# 1150 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96176, 62542, 0);

    }
    }
  } else {
    __CrestBranch(96171, 62543, 0);
# 1149 "xmltok.c"
    *badPtr = name;
    __CrestLoad(96179, (unsigned long )0, (long long )0);
    __CrestStore(96180, (unsigned long )(& __retres32));
# 1150 "xmltok.c"
    __retres32 = 0;
# 1150 "xmltok.c"
    goto return_label;
  }
  }
# 1152 "xmltok.c"
  mem_30 = enc->nameMatchesAscii;
# 1152 "xmltok.c"
  tmp___7 = (*mem_30)(enc, val, ptr - enc->minBytesPerChar, KW_yes);
  __CrestHandleReturn(96182, (long long )tmp___7);
  __CrestStore(96181, (unsigned long )(& tmp___7));
  {
  __CrestLoad(96185, (unsigned long )(& tmp___7), (long long )tmp___7);
  __CrestLoad(96184, (unsigned long )0, (long long )0);
  __CrestApply2(96183, 13, (long long )(tmp___7 != 0));
# 1152 "xmltok.c"
  if (tmp___7 != 0) {
    __CrestBranch(96186, 62548, 1);
    {
    __CrestLoad(96190, (unsigned long )(& standalone), (long long )((unsigned long )standalone));
    __CrestLoad(96189, (unsigned long )0, (long long )0);
    __CrestApply2(96188, 13, (long long )(standalone != 0));
# 1153 "xmltok.c"
    if (standalone != 0) {
      __CrestBranch(96191, 62549, 1);
      __CrestLoad(96193, (unsigned long )0, (long long )1);
      __CrestStore(96194, (unsigned long )standalone);
# 1154 "xmltok.c"
      *standalone = 1;
    } else {
      __CrestBranch(96192, 62550, 0);

    }
    }
  } else {
    __CrestBranch(96187, 62551, 0);
# 1156 "xmltok.c"
    mem_31 = enc->nameMatchesAscii;
# 1156 "xmltok.c"
    tmp___6 = (*mem_31)(enc, val, ptr - enc->minBytesPerChar, KW_no);
    __CrestHandleReturn(96196, (long long )tmp___6);
    __CrestStore(96195, (unsigned long )(& tmp___6));
    {
    __CrestLoad(96199, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(96198, (unsigned long )0, (long long )0);
    __CrestApply2(96197, 13, (long long )(tmp___6 != 0));
# 1156 "xmltok.c"
    if (tmp___6 != 0) {
      __CrestBranch(96200, 62553, 1);
      {
      __CrestLoad(96204, (unsigned long )(& standalone), (long long )((unsigned long )standalone));
      __CrestLoad(96203, (unsigned long )0, (long long )0);
      __CrestApply2(96202, 13, (long long )(standalone != 0));
# 1157 "xmltok.c"
      if (standalone != 0) {
        __CrestBranch(96205, 62554, 1);
        __CrestLoad(96207, (unsigned long )0, (long long )0);
        __CrestStore(96208, (unsigned long )standalone);
# 1158 "xmltok.c"
        *standalone = 0;
      } else {
        __CrestBranch(96206, 62555, 0);

      }
      }
    } else {
      __CrestBranch(96201, 62556, 0);
# 1161 "xmltok.c"
      *badPtr = val;
      __CrestLoad(96209, (unsigned long )0, (long long )0);
      __CrestStore(96210, (unsigned long )(& __retres32));
# 1162 "xmltok.c"
      __retres32 = 0;
# 1162 "xmltok.c"
      goto return_label;
    }
    }
  }
  }
  {
# 1164 "xmltok.c"
  while (1) {
    while_continue: ;
# 1164 "xmltok.c"
    tmp___8 = toAscii(enc, ptr, end);
    __CrestHandleReturn(96212, (long long )tmp___8);
    __CrestStore(96211, (unsigned long )(& tmp___8));
    __CrestLoad(96213, (unsigned long )(& tmp___8), (long long )tmp___8);
# 1164 "xmltok.c"
    tmp___9 = isSpace(tmp___8);
    __CrestHandleReturn(96215, (long long )tmp___9);
    __CrestStore(96214, (unsigned long )(& tmp___9));
    {
    __CrestLoad(96218, (unsigned long )(& tmp___9), (long long )tmp___9);
    __CrestLoad(96217, (unsigned long )0, (long long )0);
    __CrestApply2(96216, 13, (long long )(tmp___9 != 0));
# 1164 "xmltok.c"
    if (tmp___9 != 0) {
      __CrestBranch(96219, 62564, 1);

    } else {
      __CrestBranch(96220, 62565, 0);
# 1164 "xmltok.c"
      goto while_break;
    }
    }
# 1165 "xmltok.c"
    ptr += enc->minBytesPerChar;
  }
  while_break: ;
  }
  {
  __CrestLoad(96223, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(96222, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(96221, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 1166 "xmltok.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(96224, 62569, 1);
# 1167 "xmltok.c"
    *badPtr = ptr;
    __CrestLoad(96226, (unsigned long )0, (long long )0);
    __CrestStore(96227, (unsigned long )(& __retres32));
# 1168 "xmltok.c"
    __retres32 = 0;
# 1168 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96225, 62572, 0);

  }
  }
  __CrestLoad(96228, (unsigned long )0, (long long )1);
  __CrestStore(96229, (unsigned long )(& __retres32));
# 1170 "xmltok.c"
  __retres32 = 1;
  return_label:
  {
  __CrestLoad(96230, (unsigned long )(& __retres32), (long long )__retres32);
  __CrestReturn(96231);
# 1081 "xmltok.c"
  return (__retres32);
  }
}
}
# 1173 "xmltok.c"
static int checkCharRefNumber(int result )
{
  int __retres2 ;

  {
  __CrestCall(96233, 936);
  __CrestStore(96232, (unsigned long )(& result));
  {
  {
  __CrestLoad(96238, (unsigned long )(& result), (long long )result);
  __CrestLoad(96237, (unsigned long )0, (long long )8);
  __CrestApply2(96236, 9, (long long )(result >> 8));
  __CrestLoad(96235, (unsigned long )0, (long long )223);
  __CrestApply2(96234, 12, (long long )(result >> 8 == 223));
# 1178 "xmltok.c"
  if (result >> 8 == 223) {
    __CrestBranch(96239, 62577, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96240, 62578, 0);

  }
  }
  {
  __CrestLoad(96245, (unsigned long )(& result), (long long )result);
  __CrestLoad(96244, (unsigned long )0, (long long )8);
  __CrestApply2(96243, 9, (long long )(result >> 8));
  __CrestLoad(96242, (unsigned long )0, (long long )222);
  __CrestApply2(96241, 12, (long long )(result >> 8 == 222));
# 1178 "xmltok.c"
  if (result >> 8 == 222) {
    __CrestBranch(96246, 62580, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96247, 62581, 0);

  }
  }
  {
  __CrestLoad(96252, (unsigned long )(& result), (long long )result);
  __CrestLoad(96251, (unsigned long )0, (long long )8);
  __CrestApply2(96250, 9, (long long )(result >> 8));
  __CrestLoad(96249, (unsigned long )0, (long long )221);
  __CrestApply2(96248, 12, (long long )(result >> 8 == 221));
# 1178 "xmltok.c"
  if (result >> 8 == 221) {
    __CrestBranch(96253, 62583, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96254, 62584, 0);

  }
  }
  {
  __CrestLoad(96259, (unsigned long )(& result), (long long )result);
  __CrestLoad(96258, (unsigned long )0, (long long )8);
  __CrestApply2(96257, 9, (long long )(result >> 8));
  __CrestLoad(96256, (unsigned long )0, (long long )220);
  __CrestApply2(96255, 12, (long long )(result >> 8 == 220));
# 1178 "xmltok.c"
  if (result >> 8 == 220) {
    __CrestBranch(96260, 62586, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96261, 62587, 0);

  }
  }
  {
  __CrestLoad(96266, (unsigned long )(& result), (long long )result);
  __CrestLoad(96265, (unsigned long )0, (long long )8);
  __CrestApply2(96264, 9, (long long )(result >> 8));
  __CrestLoad(96263, (unsigned long )0, (long long )219);
  __CrestApply2(96262, 12, (long long )(result >> 8 == 219));
# 1178 "xmltok.c"
  if (result >> 8 == 219) {
    __CrestBranch(96267, 62589, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96268, 62590, 0);

  }
  }
  {
  __CrestLoad(96273, (unsigned long )(& result), (long long )result);
  __CrestLoad(96272, (unsigned long )0, (long long )8);
  __CrestApply2(96271, 9, (long long )(result >> 8));
  __CrestLoad(96270, (unsigned long )0, (long long )218);
  __CrestApply2(96269, 12, (long long )(result >> 8 == 218));
# 1178 "xmltok.c"
  if (result >> 8 == 218) {
    __CrestBranch(96274, 62592, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96275, 62593, 0);

  }
  }
  {
  __CrestLoad(96280, (unsigned long )(& result), (long long )result);
  __CrestLoad(96279, (unsigned long )0, (long long )8);
  __CrestApply2(96278, 9, (long long )(result >> 8));
  __CrestLoad(96277, (unsigned long )0, (long long )217);
  __CrestApply2(96276, 12, (long long )(result >> 8 == 217));
# 1178 "xmltok.c"
  if (result >> 8 == 217) {
    __CrestBranch(96281, 62595, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96282, 62596, 0);

  }
  }
  {
  __CrestLoad(96287, (unsigned long )(& result), (long long )result);
  __CrestLoad(96286, (unsigned long )0, (long long )8);
  __CrestApply2(96285, 9, (long long )(result >> 8));
  __CrestLoad(96284, (unsigned long )0, (long long )216);
  __CrestApply2(96283, 12, (long long )(result >> 8 == 216));
# 1178 "xmltok.c"
  if (result >> 8 == 216) {
    __CrestBranch(96288, 62598, 1);
# 1178 "xmltok.c"
    goto case_223;
  } else {
    __CrestBranch(96289, 62599, 0);

  }
  }
  {
  __CrestLoad(96294, (unsigned long )(& result), (long long )result);
  __CrestLoad(96293, (unsigned long )0, (long long )8);
  __CrestApply2(96292, 9, (long long )(result >> 8));
  __CrestLoad(96291, (unsigned long )0, (long long )0);
  __CrestApply2(96290, 12, (long long )(result >> 8 == 0));
# 1180 "xmltok.c"
  if (result >> 8 == 0) {
    __CrestBranch(96295, 62601, 1);
# 1180 "xmltok.c"
    goto case_0;
  } else {
    __CrestBranch(96296, 62602, 0);

  }
  }
  {
  __CrestLoad(96301, (unsigned long )(& result), (long long )result);
  __CrestLoad(96300, (unsigned long )0, (long long )8);
  __CrestApply2(96299, 9, (long long )(result >> 8));
  __CrestLoad(96298, (unsigned long )0, (long long )255);
  __CrestApply2(96297, 12, (long long )(result >> 8 == 255));
# 1184 "xmltok.c"
  if (result >> 8 == 255) {
    __CrestBranch(96302, 62604, 1);
# 1184 "xmltok.c"
    goto case_255;
  } else {
    __CrestBranch(96303, 62605, 0);

  }
  }
# 1176 "xmltok.c"
  goto switch_break;
  case_223:
  case_222:
  case_221:
  case_220:
  case_219:
  case_218:
  case_217:
  case_216:
  __CrestLoad(96304, (unsigned long )0, (long long )-1);
  __CrestStore(96305, (unsigned long )(& __retres2));
# 1179 "xmltok.c"
  __retres2 = -1;
# 1179 "xmltok.c"
  goto return_label;
  case_0:
  {
  __CrestLoad(96308, (unsigned long )(& latin1_encoding.type[result]), (long long )latin1_encoding.type[result]);
  __CrestLoad(96307, (unsigned long )0, (long long )0);
  __CrestApply2(96306, 12, (long long )((int )latin1_encoding.type[result] == 0));
# 1181 "xmltok.c"
  if ((int )latin1_encoding.type[result] == 0) {
    __CrestBranch(96309, 62610, 1);
    __CrestLoad(96311, (unsigned long )0, (long long )-1);
    __CrestStore(96312, (unsigned long )(& __retres2));
# 1182 "xmltok.c"
    __retres2 = -1;
# 1182 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96310, 62612, 0);

  }
  }
# 1183 "xmltok.c"
  goto switch_break;
  case_255:
  {
  __CrestLoad(96315, (unsigned long )(& result), (long long )result);
  __CrestLoad(96314, (unsigned long )0, (long long )65534);
  __CrestApply2(96313, 12, (long long )(result == 65534));
# 1185 "xmltok.c"
  if (result == 65534) {
    __CrestBranch(96316, 62615, 1);
    __CrestLoad(96318, (unsigned long )0, (long long )-1);
    __CrestStore(96319, (unsigned long )(& __retres2));
# 1186 "xmltok.c"
    __retres2 = -1;
# 1186 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96317, 62617, 0);
    {
    __CrestLoad(96322, (unsigned long )(& result), (long long )result);
    __CrestLoad(96321, (unsigned long )0, (long long )65535);
    __CrestApply2(96320, 12, (long long )(result == 65535));
# 1185 "xmltok.c"
    if (result == 65535) {
      __CrestBranch(96323, 62618, 1);
      __CrestLoad(96325, (unsigned long )0, (long long )-1);
      __CrestStore(96326, (unsigned long )(& __retres2));
# 1186 "xmltok.c"
      __retres2 = -1;
# 1186 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96324, 62620, 0);

    }
    }
  }
  }
# 1187 "xmltok.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(96327, (unsigned long )(& result), (long long )result);
  __CrestStore(96328, (unsigned long )(& __retres2));
# 1189 "xmltok.c"
  __retres2 = result;
  return_label:
  {
  __CrestLoad(96329, (unsigned long )(& __retres2), (long long )__retres2);
  __CrestReturn(96330);
# 1173 "xmltok.c"
  return (__retres2);
  }
}
}
# 1192 "xmltok.c"
int XmlUtf8Encode(int c , char *buf )
{
  char *mem_3 ;
  char *mem_4 ;
  char *mem_5 ;
  char *mem_6 ;
  char *mem_7 ;
  char *mem_8 ;
  char *mem_9 ;
  char *mem_10 ;
  char *mem_11 ;
  char *mem_12 ;
  int __retres13 ;

  {
  __CrestCall(96332, 937);
  __CrestStore(96331, (unsigned long )(& c));
  {
  __CrestLoad(96335, (unsigned long )(& c), (long long )c);
  __CrestLoad(96334, (unsigned long )0, (long long )0);
  __CrestApply2(96333, 16, (long long )(c < 0));
# 1202 "xmltok.c"
  if (c < 0) {
    __CrestBranch(96336, 62626, 1);
    __CrestLoad(96338, (unsigned long )0, (long long )0);
    __CrestStore(96339, (unsigned long )(& __retres13));
# 1203 "xmltok.c"
    __retres13 = 0;
# 1203 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96337, 62628, 0);

  }
  }
  {
  __CrestLoad(96342, (unsigned long )(& c), (long long )c);
  __CrestLoad(96341, (unsigned long )0, (long long )128);
  __CrestApply2(96340, 16, (long long )(c < 128));
# 1204 "xmltok.c"
  if (c < 128) {
    __CrestBranch(96343, 62630, 1);
# 1205 "xmltok.c"
    mem_3 = buf + 0;
    __CrestLoad(96345, (unsigned long )(& c), (long long )c);
    __CrestStore(96346, (unsigned long )mem_3);
# 1205 "xmltok.c"
    *mem_3 = (char )c;
    __CrestLoad(96347, (unsigned long )0, (long long )1);
    __CrestStore(96348, (unsigned long )(& __retres13));
# 1206 "xmltok.c"
    __retres13 = 1;
# 1206 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96344, 62633, 0);

  }
  }
  {
  __CrestLoad(96351, (unsigned long )(& c), (long long )c);
  __CrestLoad(96350, (unsigned long )0, (long long )2048);
  __CrestApply2(96349, 16, (long long )(c < 2048));
# 1208 "xmltok.c"
  if (c < 2048) {
    __CrestBranch(96352, 62635, 1);
# 1209 "xmltok.c"
    mem_4 = buf + 0;
    __CrestLoad(96358, (unsigned long )(& c), (long long )c);
    __CrestLoad(96357, (unsigned long )0, (long long )6);
    __CrestApply2(96356, 9, (long long )(c >> 6));
    __CrestLoad(96355, (unsigned long )0, (long long )192);
    __CrestApply2(96354, 6, (long long )((c >> 6) | 192));
    __CrestStore(96359, (unsigned long )mem_4);
# 1209 "xmltok.c"
    *mem_4 = (char )((c >> 6) | 192);
# 1210 "xmltok.c"
    mem_5 = buf + 1;
    __CrestLoad(96364, (unsigned long )(& c), (long long )c);
    __CrestLoad(96363, (unsigned long )0, (long long )63);
    __CrestApply2(96362, 5, (long long )(c & 63));
    __CrestLoad(96361, (unsigned long )0, (long long )128);
    __CrestApply2(96360, 6, (long long )((c & 63) | 128));
    __CrestStore(96365, (unsigned long )mem_5);
# 1210 "xmltok.c"
    *mem_5 = (char )((c & 63) | 128);
    __CrestLoad(96366, (unsigned long )0, (long long )2);
    __CrestStore(96367, (unsigned long )(& __retres13));
# 1211 "xmltok.c"
    __retres13 = 2;
# 1211 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96353, 62638, 0);

  }
  }
  {
  __CrestLoad(96370, (unsigned long )(& c), (long long )c);
  __CrestLoad(96369, (unsigned long )0, (long long )65536);
  __CrestApply2(96368, 16, (long long )(c < 65536));
# 1213 "xmltok.c"
  if (c < 65536) {
    __CrestBranch(96371, 62640, 1);
# 1214 "xmltok.c"
    mem_6 = buf + 0;
    __CrestLoad(96377, (unsigned long )(& c), (long long )c);
    __CrestLoad(96376, (unsigned long )0, (long long )12);
    __CrestApply2(96375, 9, (long long )(c >> 12));
    __CrestLoad(96374, (unsigned long )0, (long long )224);
    __CrestApply2(96373, 6, (long long )((c >> 12) | 224));
    __CrestStore(96378, (unsigned long )mem_6);
# 1214 "xmltok.c"
    *mem_6 = (char )((c >> 12) | 224);
# 1215 "xmltok.c"
    mem_7 = buf + 1;
    __CrestLoad(96385, (unsigned long )(& c), (long long )c);
    __CrestLoad(96384, (unsigned long )0, (long long )6);
    __CrestApply2(96383, 9, (long long )(c >> 6));
    __CrestLoad(96382, (unsigned long )0, (long long )63);
    __CrestApply2(96381, 5, (long long )((c >> 6) & 63));
    __CrestLoad(96380, (unsigned long )0, (long long )128);
    __CrestApply2(96379, 6, (long long )(((c >> 6) & 63) | 128));
    __CrestStore(96386, (unsigned long )mem_7);
# 1215 "xmltok.c"
    *mem_7 = (char )(((c >> 6) & 63) | 128);
# 1216 "xmltok.c"
    mem_8 = buf + 2;
    __CrestLoad(96391, (unsigned long )(& c), (long long )c);
    __CrestLoad(96390, (unsigned long )0, (long long )63);
    __CrestApply2(96389, 5, (long long )(c & 63));
    __CrestLoad(96388, (unsigned long )0, (long long )128);
    __CrestApply2(96387, 6, (long long )((c & 63) | 128));
    __CrestStore(96392, (unsigned long )mem_8);
# 1216 "xmltok.c"
    *mem_8 = (char )((c & 63) | 128);
    __CrestLoad(96393, (unsigned long )0, (long long )3);
    __CrestStore(96394, (unsigned long )(& __retres13));
# 1217 "xmltok.c"
    __retres13 = 3;
# 1217 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96372, 62643, 0);

  }
  }
  {
  __CrestLoad(96397, (unsigned long )(& c), (long long )c);
  __CrestLoad(96396, (unsigned long )0, (long long )1114112);
  __CrestApply2(96395, 16, (long long )(c < 1114112));
# 1219 "xmltok.c"
  if (c < 1114112) {
    __CrestBranch(96398, 62645, 1);
# 1220 "xmltok.c"
    mem_9 = buf + 0;
    __CrestLoad(96404, (unsigned long )(& c), (long long )c);
    __CrestLoad(96403, (unsigned long )0, (long long )18);
    __CrestApply2(96402, 9, (long long )(c >> 18));
    __CrestLoad(96401, (unsigned long )0, (long long )240);
    __CrestApply2(96400, 6, (long long )((c >> 18) | 240));
    __CrestStore(96405, (unsigned long )mem_9);
# 1220 "xmltok.c"
    *mem_9 = (char )((c >> 18) | 240);
# 1221 "xmltok.c"
    mem_10 = buf + 1;
    __CrestLoad(96412, (unsigned long )(& c), (long long )c);
    __CrestLoad(96411, (unsigned long )0, (long long )12);
    __CrestApply2(96410, 9, (long long )(c >> 12));
    __CrestLoad(96409, (unsigned long )0, (long long )63);
    __CrestApply2(96408, 5, (long long )((c >> 12) & 63));
    __CrestLoad(96407, (unsigned long )0, (long long )128);
    __CrestApply2(96406, 6, (long long )(((c >> 12) & 63) | 128));
    __CrestStore(96413, (unsigned long )mem_10);
# 1221 "xmltok.c"
    *mem_10 = (char )(((c >> 12) & 63) | 128);
# 1222 "xmltok.c"
    mem_11 = buf + 2;
    __CrestLoad(96420, (unsigned long )(& c), (long long )c);
    __CrestLoad(96419, (unsigned long )0, (long long )6);
    __CrestApply2(96418, 9, (long long )(c >> 6));
    __CrestLoad(96417, (unsigned long )0, (long long )63);
    __CrestApply2(96416, 5, (long long )((c >> 6) & 63));
    __CrestLoad(96415, (unsigned long )0, (long long )128);
    __CrestApply2(96414, 6, (long long )(((c >> 6) & 63) | 128));
    __CrestStore(96421, (unsigned long )mem_11);
# 1222 "xmltok.c"
    *mem_11 = (char )(((c >> 6) & 63) | 128);
# 1223 "xmltok.c"
    mem_12 = buf + 3;
    __CrestLoad(96426, (unsigned long )(& c), (long long )c);
    __CrestLoad(96425, (unsigned long )0, (long long )63);
    __CrestApply2(96424, 5, (long long )(c & 63));
    __CrestLoad(96423, (unsigned long )0, (long long )128);
    __CrestApply2(96422, 6, (long long )((c & 63) | 128));
    __CrestStore(96427, (unsigned long )mem_12);
# 1223 "xmltok.c"
    *mem_12 = (char )((c & 63) | 128);
    __CrestLoad(96428, (unsigned long )0, (long long )4);
    __CrestStore(96429, (unsigned long )(& __retres13));
# 1224 "xmltok.c"
    __retres13 = 4;
# 1224 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96399, 62648, 0);

  }
  }
  __CrestLoad(96430, (unsigned long )0, (long long )0);
  __CrestStore(96431, (unsigned long )(& __retres13));
# 1226 "xmltok.c"
  __retres13 = 0;
  return_label:
  {
  __CrestLoad(96432, (unsigned long )(& __retres13), (long long )__retres13);
  __CrestReturn(96433);
# 1192 "xmltok.c"
  return (__retres13);
  }
}
}
# 1229 "xmltok.c"
int XmlUtf16Encode(int charNum , unsigned short *buf )
{
  unsigned short *mem_3 ;
  unsigned short *mem_4 ;
  unsigned short *mem_5 ;
  int __retres6 ;

  {
  __CrestCall(96435, 938);
  __CrestStore(96434, (unsigned long )(& charNum));
  {
  __CrestLoad(96438, (unsigned long )(& charNum), (long long )charNum);
  __CrestLoad(96437, (unsigned long )0, (long long )0);
  __CrestApply2(96436, 16, (long long )(charNum < 0));
# 1232 "xmltok.c"
  if (charNum < 0) {
    __CrestBranch(96439, 62652, 1);
    __CrestLoad(96441, (unsigned long )0, (long long )0);
    __CrestStore(96442, (unsigned long )(& __retres6));
# 1233 "xmltok.c"
    __retres6 = 0;
# 1233 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96440, 62654, 0);

  }
  }
  {
  __CrestLoad(96445, (unsigned long )(& charNum), (long long )charNum);
  __CrestLoad(96444, (unsigned long )0, (long long )65536);
  __CrestApply2(96443, 16, (long long )(charNum < 65536));
# 1234 "xmltok.c"
  if (charNum < 65536) {
    __CrestBranch(96446, 62656, 1);
# 1235 "xmltok.c"
    mem_3 = buf + 0;
    __CrestLoad(96448, (unsigned long )(& charNum), (long long )charNum);
    __CrestStore(96449, (unsigned long )mem_3);
# 1235 "xmltok.c"
    *mem_3 = (unsigned short )charNum;
    __CrestLoad(96450, (unsigned long )0, (long long )1);
    __CrestStore(96451, (unsigned long )(& __retres6));
# 1236 "xmltok.c"
    __retres6 = 1;
# 1236 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96447, 62659, 0);

  }
  }
  {
  __CrestLoad(96454, (unsigned long )(& charNum), (long long )charNum);
  __CrestLoad(96453, (unsigned long )0, (long long )1114112);
  __CrestApply2(96452, 16, (long long )(charNum < 1114112));
# 1238 "xmltok.c"
  if (charNum < 1114112) {
    __CrestBranch(96455, 62661, 1);
    __CrestLoad(96459, (unsigned long )(& charNum), (long long )charNum);
    __CrestLoad(96458, (unsigned long )0, (long long )65536);
    __CrestApply2(96457, 1, (long long )(charNum - 65536));
    __CrestStore(96460, (unsigned long )(& charNum));
# 1239 "xmltok.c"
    charNum -= 65536;
# 1240 "xmltok.c"
    mem_4 = buf + 0;
    __CrestLoad(96465, (unsigned long )(& charNum), (long long )charNum);
    __CrestLoad(96464, (unsigned long )0, (long long )10);
    __CrestApply2(96463, 9, (long long )(charNum >> 10));
    __CrestLoad(96462, (unsigned long )0, (long long )55296);
    __CrestApply2(96461, 0, (long long )((charNum >> 10) + 55296));
    __CrestStore(96466, (unsigned long )mem_4);
# 1240 "xmltok.c"
    *mem_4 = (unsigned short )((charNum >> 10) + 55296);
# 1241 "xmltok.c"
    mem_5 = buf + 1;
    __CrestLoad(96471, (unsigned long )(& charNum), (long long )charNum);
    __CrestLoad(96470, (unsigned long )0, (long long )1023);
    __CrestApply2(96469, 5, (long long )(charNum & 1023));
    __CrestLoad(96468, (unsigned long )0, (long long )56320);
    __CrestApply2(96467, 0, (long long )((charNum & 1023) + 56320));
    __CrestStore(96472, (unsigned long )mem_5);
# 1241 "xmltok.c"
    *mem_5 = (unsigned short )((charNum & 1023) + 56320);
    __CrestLoad(96473, (unsigned long )0, (long long )2);
    __CrestStore(96474, (unsigned long )(& __retres6));
# 1242 "xmltok.c"
    __retres6 = 2;
# 1242 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96456, 62664, 0);

  }
  }
  __CrestLoad(96475, (unsigned long )0, (long long )0);
  __CrestStore(96476, (unsigned long )(& __retres6));
# 1244 "xmltok.c"
  __retres6 = 0;
  return_label:
  {
  __CrestLoad(96477, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(96478);
# 1229 "xmltok.c"
  return (__retres6);
  }
}
}
# 1257 "xmltok.c"
int XmlSizeOfUnknownEncoding(void)
{
  int __retres1 ;

  {
  __CrestCall(96479, 939);

  __CrestLoad(96480, (unsigned long )0, (long long )((int )sizeof(struct unknown_encoding )));
  __CrestStore(96481, (unsigned long )(& __retres1));
# 1260 "xmltok.c"
  __retres1 = (int )sizeof(struct unknown_encoding );
  {
  __CrestLoad(96482, (unsigned long )(& __retres1), (long long )__retres1);
  __CrestReturn(96483);
# 1257 "xmltok.c"
  return (__retres1);
  }
}
}
# 1263 "xmltok.c"
static int unknown_isName(ENCODING const *enc , char const *p )
{
  struct unknown_encoding const *uenc ;
  int c ;
  int tmp ;
  int (*mem_6)(void *userData , char const *p ) ;
  int __retres7 ;

  {
  __CrestCall(96484, 940);
# 1266 "xmltok.c"
  uenc = (struct unknown_encoding const *)enc;
# 1267 "xmltok.c"
  mem_6 = uenc->convert;
# 1267 "xmltok.c"
  tmp = (*mem_6)((void *)uenc->userData, p);
  __CrestHandleReturn(96486, (long long )tmp);
  __CrestStore(96485, (unsigned long )(& tmp));
  __CrestLoad(96487, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(96488, (unsigned long )(& c));
# 1267 "xmltok.c"
  c = tmp;
  {
  __CrestLoad(96493, (unsigned long )(& c), (long long )c);
  __CrestLoad(96492, (unsigned long )0, (long long )-65536);
  __CrestApply2(96491, 5, (long long )(c & -65536));
  __CrestLoad(96490, (unsigned long )0, (long long )0);
  __CrestApply2(96489, 13, (long long )((c & -65536) != 0));
# 1268 "xmltok.c"
  if ((c & -65536) != 0) {
    __CrestBranch(96494, 62671, 1);
    __CrestLoad(96496, (unsigned long )0, (long long )0);
    __CrestStore(96497, (unsigned long )(& __retres7));
# 1269 "xmltok.c"
    __retres7 = 0;
# 1269 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96495, 62673, 0);

  }
  }
  __CrestLoad(96506, (unsigned long )(& namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)]),
              (long long )namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)]);
  __CrestLoad(96505, (unsigned long )0, (long long )1);
  __CrestLoad(96504, (unsigned long )(& c), (long long )c);
  __CrestLoad(96503, (unsigned long )0, (long long )255);
  __CrestApply2(96502, 5, (long long )(c & 255));
  __CrestLoad(96501, (unsigned long )0, (long long )31);
  __CrestApply2(96500, 5, (long long )((c & 255) & 31));
  __CrestApply2(96499, 8, (long long )(1 << ((c & 255) & 31)));
  __CrestApply2(96498, 5, (long long )(namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))));
  __CrestStore(96507, (unsigned long )(& __retres7));
# 1270 "xmltok.c"
  __retres7 = (int )(namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31)));
  return_label:
  {
  __CrestLoad(96508, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(96509);
# 1263 "xmltok.c"
  return (__retres7);
  }
}
}
# 1273 "xmltok.c"
static int unknown_isNmstrt(ENCODING const *enc , char const *p )
{
  struct unknown_encoding const *uenc ;
  int c ;
  int tmp ;
  int (*mem_6)(void *userData , char const *p ) ;
  int __retres7 ;

  {
  __CrestCall(96510, 941);
# 1276 "xmltok.c"
  uenc = (struct unknown_encoding const *)enc;
# 1277 "xmltok.c"
  mem_6 = uenc->convert;
# 1277 "xmltok.c"
  tmp = (*mem_6)((void *)uenc->userData, p);
  __CrestHandleReturn(96512, (long long )tmp);
  __CrestStore(96511, (unsigned long )(& tmp));
  __CrestLoad(96513, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(96514, (unsigned long )(& c));
# 1277 "xmltok.c"
  c = tmp;
  {
  __CrestLoad(96519, (unsigned long )(& c), (long long )c);
  __CrestLoad(96518, (unsigned long )0, (long long )-65536);
  __CrestApply2(96517, 5, (long long )(c & -65536));
  __CrestLoad(96516, (unsigned long )0, (long long )0);
  __CrestApply2(96515, 13, (long long )((c & -65536) != 0));
# 1278 "xmltok.c"
  if ((c & -65536) != 0) {
    __CrestBranch(96520, 62678, 1);
    __CrestLoad(96522, (unsigned long )0, (long long )0);
    __CrestStore(96523, (unsigned long )(& __retres7));
# 1279 "xmltok.c"
    __retres7 = 0;
# 1279 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96521, 62680, 0);

  }
  }
  __CrestLoad(96532, (unsigned long )(& namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)]),
              (long long )namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)]);
  __CrestLoad(96531, (unsigned long )0, (long long )1);
  __CrestLoad(96530, (unsigned long )(& c), (long long )c);
  __CrestLoad(96529, (unsigned long )0, (long long )255);
  __CrestApply2(96528, 5, (long long )(c & 255));
  __CrestLoad(96527, (unsigned long )0, (long long )31);
  __CrestApply2(96526, 5, (long long )((c & 255) & 31));
  __CrestApply2(96525, 8, (long long )(1 << ((c & 255) & 31)));
  __CrestApply2(96524, 5, (long long )(namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))));
  __CrestStore(96533, (unsigned long )(& __retres7));
# 1280 "xmltok.c"
  __retres7 = (int )(namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31)));
  return_label:
  {
  __CrestLoad(96534, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(96535);
# 1273 "xmltok.c"
  return (__retres7);
  }
}
}
# 1283 "xmltok.c"
static int unknown_isInvalid(ENCODING const *enc , char const *p )
{
  struct unknown_encoding const *uenc ;
  int c ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_8)(void *userData , char const *p ) ;

  {
  __CrestCall(96536, 942);
# 1286 "xmltok.c"
  uenc = (struct unknown_encoding const *)enc;
# 1287 "xmltok.c"
  mem_8 = uenc->convert;
# 1287 "xmltok.c"
  tmp = (*mem_8)((void *)uenc->userData, p);
  __CrestHandleReturn(96538, (long long )tmp);
  __CrestStore(96537, (unsigned long )(& tmp));
  __CrestLoad(96539, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(96540, (unsigned long )(& c));
# 1287 "xmltok.c"
  c = tmp;
  {
  __CrestLoad(96545, (unsigned long )(& c), (long long )c);
  __CrestLoad(96544, (unsigned long )0, (long long )-65536);
  __CrestApply2(96543, 5, (long long )(c & -65536));
  __CrestLoad(96542, (unsigned long )0, (long long )0);
  __CrestApply2(96541, 13, (long long )((c & -65536) != 0));
# 1288 "xmltok.c"
  if ((c & -65536) != 0) {
    __CrestBranch(96546, 62685, 1);
    __CrestLoad(96548, (unsigned long )0, (long long )1);
    __CrestStore(96549, (unsigned long )(& tmp___1));
# 1288 "xmltok.c"
    tmp___1 = 1;
  } else {
    __CrestBranch(96547, 62686, 0);
    __CrestLoad(96550, (unsigned long )(& c), (long long )c);
# 1288 "xmltok.c"
    tmp___0 = checkCharRefNumber(c);
    __CrestHandleReturn(96552, (long long )tmp___0);
    __CrestStore(96551, (unsigned long )(& tmp___0));
    {
    __CrestLoad(96555, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(96554, (unsigned long )0, (long long )0);
    __CrestApply2(96553, 16, (long long )(tmp___0 < 0));
# 1288 "xmltok.c"
    if (tmp___0 < 0) {
      __CrestBranch(96556, 62688, 1);
      __CrestLoad(96558, (unsigned long )0, (long long )1);
      __CrestStore(96559, (unsigned long )(& tmp___1));
# 1288 "xmltok.c"
      tmp___1 = 1;
    } else {
      __CrestBranch(96557, 62689, 0);
      __CrestLoad(96560, (unsigned long )0, (long long )0);
      __CrestStore(96561, (unsigned long )(& tmp___1));
# 1288 "xmltok.c"
      tmp___1 = 0;
    }
    }
  }
  }
  {
  __CrestLoad(96562, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestReturn(96563);
# 1288 "xmltok.c"
  return (tmp___1);
  }
}
}
# 1291 "xmltok.c"
static void unknown_toUtf8(ENCODING const *enc , char const **fromP , char const *fromLim ,
                           char **toP , char const *toLim )
{
  struct unknown_encoding const *uenc ;
  char buf[4] ;
  char const *utf8 ;
  int n ;
  char const *tmp ;
  int c ;
  int tmp___0 ;
  char *tmp___1 ;
  char const *tmp___2 ;
  char const *mem_15 ;
  int (*mem_16)(void *userData , char const *p ) ;
  char const *mem_17 ;
  struct normal_encoding const *mem_18 ;

  {
  __CrestCall(96564, 943);
# 1296 "xmltok.c"
  uenc = (struct unknown_encoding const *)enc;
  {
# 1298 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(96567, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(96566, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(96565, 12, (long long )((unsigned long )*fromP == (unsigned long )fromLim));
# 1301 "xmltok.c"
    if ((unsigned long )*fromP == (unsigned long )fromLim) {
      __CrestBranch(96568, 62696, 1);
# 1302 "xmltok.c"
      goto while_break;
    } else {
      __CrestBranch(96569, 62697, 0);

    }
    }
# 1303 "xmltok.c"
    mem_15 = *fromP;
# 1303 "xmltok.c"
    utf8 = (char const *)(uenc->utf8[(unsigned char )*mem_15]);
# 1304 "xmltok.c"
    tmp = utf8;
# 1304 "xmltok.c"
    utf8 ++;
    __CrestLoad(96570, (unsigned long )tmp, (long long )*tmp);
    __CrestStore(96571, (unsigned long )(& n));
# 1304 "xmltok.c"
    n = (int )*tmp;
    {
    __CrestLoad(96574, (unsigned long )(& n), (long long )n);
    __CrestLoad(96573, (unsigned long )0, (long long )0);
    __CrestApply2(96572, 12, (long long )(n == 0));
# 1305 "xmltok.c"
    if (n == 0) {
      __CrestBranch(96575, 62700, 1);
# 1306 "xmltok.c"
      mem_16 = uenc->convert;
# 1306 "xmltok.c"
      tmp___0 = (*mem_16)((void *)uenc->userData, *fromP);
      __CrestHandleReturn(96578, (long long )tmp___0);
      __CrestStore(96577, (unsigned long )(& tmp___0));
      __CrestLoad(96579, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(96580, (unsigned long )(& c));
# 1306 "xmltok.c"
      c = tmp___0;
      __CrestLoad(96581, (unsigned long )(& c), (long long )c);
# 1307 "xmltok.c"
      n = XmlUtf8Encode(c, buf);
      __CrestHandleReturn(96583, (long long )n);
      __CrestStore(96582, (unsigned long )(& n));
      {
      __CrestLoad(96588, (unsigned long )(& n), (long long )n);
      __CrestLoad(96587, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestLoad(96586, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestApply2(96585, 18, (long long )(toLim - (char const *)*toP));
      __CrestApply2(96584, 14, (long long )((long )n > toLim - (char const *)*toP));
# 1308 "xmltok.c"
      if ((long )n > toLim - (char const *)*toP) {
        __CrestBranch(96589, 62702, 1);
# 1309 "xmltok.c"
        goto while_break;
      } else {
        __CrestBranch(96590, 62703, 0);

      }
      }
# 1310 "xmltok.c"
      utf8 = (char const *)(buf);
# 1311 "xmltok.c"
      mem_17 = *fromP;
# 1311 "xmltok.c"
      mem_18 = (struct normal_encoding const *)enc;
# 1311 "xmltok.c"
      *fromP += (int )mem_18->type[(unsigned char )*mem_17] - 3;
    } else {
      __CrestBranch(96576, 62705, 0);
      {
      __CrestLoad(96595, (unsigned long )(& n), (long long )n);
      __CrestLoad(96594, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestLoad(96593, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestApply2(96592, 18, (long long )(toLim - (char const *)*toP));
      __CrestApply2(96591, 14, (long long )((long )n > toLim - (char const *)*toP));
# 1315 "xmltok.c"
      if ((long )n > toLim - (char const *)*toP) {
        __CrestBranch(96596, 62706, 1);
# 1316 "xmltok.c"
        goto while_break;
      } else {
        __CrestBranch(96597, 62707, 0);

      }
      }
# 1317 "xmltok.c"
      (*fromP) ++;
    }
    }
    {
# 1319 "xmltok.c"
    while (1) {
      while_continue___0: ;
# 1320 "xmltok.c"
      tmp___1 = *toP;
# 1320 "xmltok.c"
      (*toP) ++;
# 1320 "xmltok.c"
      tmp___2 = utf8;
# 1320 "xmltok.c"
      utf8 ++;
      __CrestLoad(96598, (unsigned long )tmp___2, (long long )*tmp___2);
      __CrestStore(96599, (unsigned long )tmp___1);
# 1320 "xmltok.c"
      *tmp___1 = (char )*tmp___2;
      __CrestLoad(96602, (unsigned long )(& n), (long long )n);
      __CrestLoad(96601, (unsigned long )0, (long long )1);
      __CrestApply2(96600, 1, (long long )(n - 1));
      __CrestStore(96603, (unsigned long )(& n));
# 1319 "xmltok.c"
      n --;
      {
      __CrestLoad(96606, (unsigned long )(& n), (long long )n);
      __CrestLoad(96605, (unsigned long )0, (long long )0);
      __CrestApply2(96604, 13, (long long )(n != 0));
# 1319 "xmltok.c"
      if (n != 0) {
        __CrestBranch(96607, 62714, 1);

      } else {
        __CrestBranch(96608, 62715, 0);
# 1319 "xmltok.c"
        goto while_break___0;
      }
      }
    }
    while_break___0: ;
    }
  }
  while_break: ;
  }

  {
  __CrestReturn(96609);
# 1291 "xmltok.c"
  return;
  }
}
}
# 1325 "xmltok.c"
static void unknown_toUtf16(ENCODING const *enc , char const **fromP , char const *fromLim ,
                            unsigned short **toP , unsigned short const *toLim )
{
  struct unknown_encoding const *uenc ;
  unsigned short c ;
  int tmp ;
  unsigned short *tmp___0 ;
  char const *mem_10 ;
  int (*mem_11)(void *userData , char const *p ) ;
  char const *mem_12 ;
  struct normal_encoding const *mem_13 ;

  {
  __CrestCall(96610, 944);
# 1330 "xmltok.c"
  uenc = (struct unknown_encoding const *)enc;
  {
# 1331 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(96613, (unsigned long )fromP, (long long )((unsigned long )*fromP));
    __CrestLoad(96612, (unsigned long )(& fromLim), (long long )((unsigned long )fromLim));
    __CrestApply2(96611, 13, (long long )((unsigned long )*fromP != (unsigned long )fromLim));
# 1331 "xmltok.c"
    if ((unsigned long )*fromP != (unsigned long )fromLim) {
      __CrestBranch(96614, 62725, 1);
      {
      __CrestLoad(96618, (unsigned long )toP, (long long )((unsigned long )*toP));
      __CrestLoad(96617, (unsigned long )(& toLim), (long long )((unsigned long )toLim));
      __CrestApply2(96616, 13, (long long )((unsigned long )*toP != (unsigned long )toLim));
# 1331 "xmltok.c"
      if ((unsigned long )*toP != (unsigned long )toLim) {
        __CrestBranch(96619, 62726, 1);

      } else {
        __CrestBranch(96620, 62727, 0);
# 1331 "xmltok.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(96615, 62728, 0);
# 1331 "xmltok.c"
      goto while_break;
    }
    }
# 1332 "xmltok.c"
    mem_10 = *fromP;
    __CrestLoad(96621, (unsigned long )(& uenc->utf16[(unsigned char )*mem_10]), (long long )uenc->utf16[(unsigned char )*mem_10]);
    __CrestStore(96622, (unsigned long )(& c));
# 1332 "xmltok.c"
    c = uenc->utf16[(unsigned char )*mem_10];
    {
    __CrestLoad(96625, (unsigned long )(& c), (long long )c);
    __CrestLoad(96624, (unsigned long )0, (long long )0);
    __CrestApply2(96623, 12, (long long )((int )c == 0));
# 1333 "xmltok.c"
    if ((int )c == 0) {
      __CrestBranch(96626, 62731, 1);
# 1334 "xmltok.c"
      mem_11 = uenc->convert;
# 1334 "xmltok.c"
      tmp = (*mem_11)((void *)uenc->userData, *fromP);
      __CrestHandleReturn(96629, (long long )tmp);
      __CrestStore(96628, (unsigned long )(& tmp));
      __CrestLoad(96630, (unsigned long )(& tmp), (long long )tmp);
      __CrestStore(96631, (unsigned long )(& c));
# 1334 "xmltok.c"
      c = (unsigned short )tmp;
# 1336 "xmltok.c"
      mem_12 = *fromP;
# 1336 "xmltok.c"
      mem_13 = (struct normal_encoding const *)enc;
# 1336 "xmltok.c"
      *fromP += (int )mem_13->type[(unsigned char )*mem_12] - 3;
    } else {
      __CrestBranch(96627, 62732, 0);
# 1340 "xmltok.c"
      (*fromP) ++;
    }
    }
# 1341 "xmltok.c"
    tmp___0 = *toP;
# 1341 "xmltok.c"
    (*toP) ++;
    __CrestLoad(96632, (unsigned long )(& c), (long long )c);
    __CrestStore(96633, (unsigned long )tmp___0);
# 1341 "xmltok.c"
    *tmp___0 = c;
  }
  while_break: ;
  }

  {
  __CrestReturn(96634);
# 1325 "xmltok.c"
  return;
  }
}
}
# 1345 "xmltok.c"
ENCODING *XmlInitUnknownEncoding(void *mem , int *table , int (*convert)(void *userData ,
                                                                         char const *p ) ,
                                 void *userData )
{
  int i ;
  struct unknown_encoding *e ;
  int c ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char *mem_11 ;
  char *mem_12 ;
  int *mem_13 ;
  int *mem_14 ;
  ENCODING *__retres15 ;

  {
  __CrestCall(96635, 945);
# 1352 "xmltok.c"
  e = (struct unknown_encoding *)mem;
  __CrestLoad(96636, (unsigned long )0, (long long )0);
  __CrestStore(96637, (unsigned long )(& i));
# 1353 "xmltok.c"
  i = 0;
  {
# 1353 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(96640, (unsigned long )(& i), (long long )i);
    __CrestLoad(96639, (unsigned long )0, (long long )((int )sizeof(struct normal_encoding )));
    __CrestApply2(96638, 16, (long long )(i < (int )sizeof(struct normal_encoding )));
# 1353 "xmltok.c"
    if (i < (int )sizeof(struct normal_encoding )) {
      __CrestBranch(96641, 62742, 1);

    } else {
      __CrestBranch(96642, 62743, 0);
# 1353 "xmltok.c"
      goto while_break;
    }
    }
# 1354 "xmltok.c"
    mem_11 = (char *)mem + i;
# 1354 "xmltok.c"
    mem_12 = (char *)(& latin1_encoding) + i;
    __CrestLoad(96643, (unsigned long )mem_12, (long long )*mem_12);
    __CrestStore(96644, (unsigned long )mem_11);
# 1354 "xmltok.c"
    *mem_11 = *mem_12;
    __CrestLoad(96647, (unsigned long )(& i), (long long )i);
    __CrestLoad(96646, (unsigned long )0, (long long )1);
    __CrestApply2(96645, 0, (long long )(i + 1));
    __CrestStore(96648, (unsigned long )(& i));
# 1353 "xmltok.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(96649, (unsigned long )0, (long long )0);
  __CrestStore(96650, (unsigned long )(& i));
# 1355 "xmltok.c"
  i = 0;
  {
# 1355 "xmltok.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(96653, (unsigned long )(& i), (long long )i);
    __CrestLoad(96652, (unsigned long )0, (long long )128);
    __CrestApply2(96651, 16, (long long )(i < 128));
# 1355 "xmltok.c"
    if (i < 128) {
      __CrestBranch(96654, 62751, 1);

    } else {
      __CrestBranch(96655, 62752, 0);
# 1355 "xmltok.c"
      goto while_break___0;
    }
    }
    {
    __CrestLoad(96658, (unsigned long )(& latin1_encoding.type[i]), (long long )latin1_encoding.type[i]);
    __CrestLoad(96657, (unsigned long )0, (long long )28);
    __CrestApply2(96656, 13, (long long )((int )latin1_encoding.type[i] != 28));
# 1356 "xmltok.c"
    if ((int )latin1_encoding.type[i] != 28) {
      __CrestBranch(96659, 62754, 1);
      {
      __CrestLoad(96663, (unsigned long )(& latin1_encoding.type[i]), (long long )latin1_encoding.type[i]);
      __CrestLoad(96662, (unsigned long )0, (long long )0);
      __CrestApply2(96661, 13, (long long )((int )latin1_encoding.type[i] != 0));
# 1356 "xmltok.c"
      if ((int )latin1_encoding.type[i] != 0) {
        __CrestBranch(96664, 62755, 1);
        {
# 1356 "xmltok.c"
        mem_13 = table + i;
        {
        __CrestLoad(96668, (unsigned long )mem_13, (long long )*mem_13);
        __CrestLoad(96667, (unsigned long )(& i), (long long )i);
        __CrestApply2(96666, 13, (long long )(*mem_13 != i));
# 1356 "xmltok.c"
        if (*mem_13 != i) {
          __CrestBranch(96669, 62758, 1);
# 1359 "xmltok.c"
          __retres15 = (ENCODING *)0;
# 1359 "xmltok.c"
          goto return_label;
        } else {
          __CrestBranch(96670, 62760, 0);

        }
        }
        }
      } else {
        __CrestBranch(96665, 62761, 0);

      }
      }
    } else {
      __CrestBranch(96660, 62762, 0);

    }
    }
    __CrestLoad(96673, (unsigned long )(& i), (long long )i);
    __CrestLoad(96672, (unsigned long )0, (long long )1);
    __CrestApply2(96671, 0, (long long )(i + 1));
    __CrestStore(96674, (unsigned long )(& i));
# 1355 "xmltok.c"
    i ++;
  }
  while_break___0: ;
  }
  __CrestLoad(96675, (unsigned long )0, (long long )0);
  __CrestStore(96676, (unsigned long )(& i));
# 1360 "xmltok.c"
  i = 0;
  {
# 1360 "xmltok.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(96679, (unsigned long )(& i), (long long )i);
    __CrestLoad(96678, (unsigned long )0, (long long )256);
    __CrestApply2(96677, 16, (long long )(i < 256));
# 1360 "xmltok.c"
    if (i < 256) {
      __CrestBranch(96680, 62770, 1);

    } else {
      __CrestBranch(96681, 62771, 0);
# 1360 "xmltok.c"
      goto while_break___1;
    }
    }
# 1361 "xmltok.c"
    mem_14 = table + i;
    __CrestLoad(96682, (unsigned long )mem_14, (long long )*mem_14);
    __CrestStore(96683, (unsigned long )(& c));
# 1361 "xmltok.c"
    c = *mem_14;
    {
    __CrestLoad(96686, (unsigned long )(& c), (long long )c);
    __CrestLoad(96685, (unsigned long )0, (long long )-1);
    __CrestApply2(96684, 12, (long long )(c == -1));
# 1362 "xmltok.c"
    if (c == -1) {
      __CrestBranch(96687, 62774, 1);
      __CrestLoad(96689, (unsigned long )0, (long long )(unsigned char)1);
      __CrestStore(96690, (unsigned long )(& e->normal.type[i]));
# 1363 "xmltok.c"
      e->normal.type[i] = (unsigned char)1;
      __CrestLoad(96691, (unsigned long )0, (long long )(unsigned short)65535);
      __CrestStore(96692, (unsigned long )(& e->utf16[i]));
# 1365 "xmltok.c"
      e->utf16[i] = (unsigned short)65535;
      __CrestLoad(96693, (unsigned long )0, (long long )(char)1);
      __CrestStore(96694, (unsigned long )(& e->utf8[i][0]));
# 1366 "xmltok.c"
      e->utf8[i][0] = (char)1;
      __CrestLoad(96695, (unsigned long )0, (long long )(char)0);
      __CrestStore(96696, (unsigned long )(& e->utf8[i][1]));
# 1367 "xmltok.c"
      e->utf8[i][1] = (char)0;
    } else {
      __CrestBranch(96688, 62775, 0);
      {
      __CrestLoad(96699, (unsigned long )(& c), (long long )c);
      __CrestLoad(96698, (unsigned long )0, (long long )0);
      __CrestApply2(96697, 16, (long long )(c < 0));
# 1369 "xmltok.c"
      if (c < 0) {
        __CrestBranch(96700, 62776, 1);
        {
        __CrestLoad(96704, (unsigned long )(& c), (long long )c);
        __CrestLoad(96703, (unsigned long )0, (long long )-4);
        __CrestApply2(96702, 16, (long long )(c < -4));
# 1370 "xmltok.c"
        if (c < -4) {
          __CrestBranch(96705, 62777, 1);
# 1371 "xmltok.c"
          __retres15 = (ENCODING *)0;
# 1371 "xmltok.c"
          goto return_label;
        } else {
          __CrestBranch(96706, 62779, 0);

        }
        }
        __CrestLoad(96711, (unsigned long )0, (long long )5);
        __CrestLoad(96710, (unsigned long )(& c), (long long )c);
        __CrestLoad(96709, (unsigned long )0, (long long )2);
        __CrestApply2(96708, 0, (long long )(c + 2));
        __CrestApply2(96707, 1, (long long )(5 - (c + 2)));
        __CrestStore(96712, (unsigned long )(& e->normal.type[i]));
# 1372 "xmltok.c"
        e->normal.type[i] = (unsigned char )(5 - (c + 2));
        __CrestLoad(96713, (unsigned long )0, (long long )(char)0);
        __CrestStore(96714, (unsigned long )(& e->utf8[i][0]));
# 1373 "xmltok.c"
        e->utf8[i][0] = (char)0;
        __CrestLoad(96715, (unsigned long )0, (long long )(unsigned short)0);
        __CrestStore(96716, (unsigned long )(& e->utf16[i]));
# 1374 "xmltok.c"
        e->utf16[i] = (unsigned short)0;
      } else {
        __CrestBranch(96701, 62781, 0);
        {
        __CrestLoad(96719, (unsigned long )(& c), (long long )c);
        __CrestLoad(96718, (unsigned long )0, (long long )128);
        __CrestApply2(96717, 16, (long long )(c < 128));
# 1376 "xmltok.c"
        if (c < 128) {
          __CrestBranch(96720, 62782, 1);
          {
          __CrestLoad(96724, (unsigned long )(& latin1_encoding.type[c]), (long long )latin1_encoding.type[c]);
          __CrestLoad(96723, (unsigned long )0, (long long )28);
          __CrestApply2(96722, 13, (long long )((int )latin1_encoding.type[c] != 28));
# 1377 "xmltok.c"
          if ((int )latin1_encoding.type[c] != 28) {
            __CrestBranch(96725, 62783, 1);
            {
            __CrestLoad(96729, (unsigned long )(& latin1_encoding.type[c]), (long long )latin1_encoding.type[c]);
            __CrestLoad(96728, (unsigned long )0, (long long )0);
            __CrestApply2(96727, 13, (long long )((int )latin1_encoding.type[c] != 0));
# 1377 "xmltok.c"
            if ((int )latin1_encoding.type[c] != 0) {
              __CrestBranch(96730, 62784, 1);
              {
              __CrestLoad(96734, (unsigned long )(& c), (long long )c);
              __CrestLoad(96733, (unsigned long )(& i), (long long )i);
              __CrestApply2(96732, 13, (long long )(c != i));
# 1377 "xmltok.c"
              if (c != i) {
                __CrestBranch(96735, 62785, 1);
# 1380 "xmltok.c"
                __retres15 = (ENCODING *)0;
# 1380 "xmltok.c"
                goto return_label;
              } else {
                __CrestBranch(96736, 62787, 0);

              }
              }
            } else {
              __CrestBranch(96731, 62788, 0);

            }
            }
          } else {
            __CrestBranch(96726, 62789, 0);

          }
          }
          __CrestLoad(96737, (unsigned long )(& latin1_encoding.type[c]), (long long )latin1_encoding.type[c]);
          __CrestStore(96738, (unsigned long )(& e->normal.type[i]));
# 1381 "xmltok.c"
          e->normal.type[i] = latin1_encoding.type[c];
          __CrestLoad(96739, (unsigned long )0, (long long )(char)1);
          __CrestStore(96740, (unsigned long )(& e->utf8[i][0]));
# 1382 "xmltok.c"
          e->utf8[i][0] = (char)1;
          __CrestLoad(96741, (unsigned long )(& c), (long long )c);
          __CrestStore(96742, (unsigned long )(& e->utf8[i][1]));
# 1383 "xmltok.c"
          e->utf8[i][1] = (char )c;
          {
          __CrestLoad(96745, (unsigned long )(& c), (long long )c);
          __CrestLoad(96744, (unsigned long )0, (long long )0);
          __CrestApply2(96743, 12, (long long )(c == 0));
# 1384 "xmltok.c"
          if (c == 0) {
            __CrestBranch(96746, 62792, 1);
            __CrestLoad(96748, (unsigned long )0, (long long )65535);
            __CrestStore(96749, (unsigned long )(& tmp));
# 1384 "xmltok.c"
            tmp = 65535;
          } else {
            __CrestBranch(96747, 62793, 0);
            __CrestLoad(96750, (unsigned long )(& c), (long long )c);
            __CrestStore(96751, (unsigned long )(& tmp));
# 1384 "xmltok.c"
            tmp = c;
          }
          }
          __CrestLoad(96752, (unsigned long )(& tmp), (long long )tmp);
          __CrestStore(96753, (unsigned long )(& e->utf16[i]));
# 1384 "xmltok.c"
          e->utf16[i] = (unsigned short )tmp;
        } else {
          __CrestBranch(96721, 62795, 0);
          __CrestLoad(96754, (unsigned long )(& c), (long long )c);
# 1386 "xmltok.c"
          tmp___1 = checkCharRefNumber(c);
          __CrestHandleReturn(96756, (long long )tmp___1);
          __CrestStore(96755, (unsigned long )(& tmp___1));
          {
          __CrestLoad(96759, (unsigned long )(& tmp___1), (long long )tmp___1);
          __CrestLoad(96758, (unsigned long )0, (long long )0);
          __CrestApply2(96757, 16, (long long )(tmp___1 < 0));
# 1386 "xmltok.c"
          if (tmp___1 < 0) {
            __CrestBranch(96760, 62797, 1);
            __CrestLoad(96762, (unsigned long )0, (long long )(unsigned char)0);
            __CrestStore(96763, (unsigned long )(& e->normal.type[i]));
# 1387 "xmltok.c"
            e->normal.type[i] = (unsigned char)0;
            __CrestLoad(96764, (unsigned long )0, (long long )(unsigned short)65535);
            __CrestStore(96765, (unsigned long )(& e->utf16[i]));
# 1389 "xmltok.c"
            e->utf16[i] = (unsigned short)65535;
            __CrestLoad(96766, (unsigned long )0, (long long )(char)1);
            __CrestStore(96767, (unsigned long )(& e->utf8[i][0]));
# 1390 "xmltok.c"
            e->utf8[i][0] = (char)1;
            __CrestLoad(96768, (unsigned long )0, (long long )(char)0);
            __CrestStore(96769, (unsigned long )(& e->utf8[i][1]));
# 1391 "xmltok.c"
            e->utf8[i][1] = (char)0;
          } else {
            __CrestBranch(96761, 62798, 0);
            {
            __CrestLoad(96772, (unsigned long )(& c), (long long )c);
            __CrestLoad(96771, (unsigned long )0, (long long )65535);
            __CrestApply2(96770, 14, (long long )(c > 65535));
# 1394 "xmltok.c"
            if (c > 65535) {
              __CrestBranch(96773, 62799, 1);
# 1395 "xmltok.c"
              __retres15 = (ENCODING *)0;
# 1395 "xmltok.c"
              goto return_label;
            } else {
              __CrestBranch(96774, 62801, 0);

            }
            }
            {
            __CrestLoad(96785, (unsigned long )(& namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)]),
                        (long long )namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)]);
            __CrestLoad(96784, (unsigned long )0, (long long )1);
            __CrestLoad(96783, (unsigned long )(& c), (long long )c);
            __CrestLoad(96782, (unsigned long )0, (long long )255);
            __CrestApply2(96781, 5, (long long )(c & 255));
            __CrestLoad(96780, (unsigned long )0, (long long )31);
            __CrestApply2(96779, 5, (long long )((c & 255) & 31));
            __CrestApply2(96778, 8, (long long )(1 << ((c & 255) & 31)));
            __CrestApply2(96777, 5, (long long )(namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))));
            __CrestLoad(96776, (unsigned long )0, (long long )0);
            __CrestApply2(96775, 13, (long long )((namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))) != 0));
# 1396 "xmltok.c"
            if ((namingBitmap[((int const )nmstrtPages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))) != 0) {
              __CrestBranch(96786, 62803, 1);
              __CrestLoad(96788, (unsigned long )0, (long long )(unsigned char)22);
              __CrestStore(96789, (unsigned long )(& e->normal.type[i]));
# 1397 "xmltok.c"
              e->normal.type[i] = (unsigned char)22;
            } else {
              __CrestBranch(96787, 62804, 0);
              {
              __CrestLoad(96800, (unsigned long )(& namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)]),
                          (long long )namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)]);
              __CrestLoad(96799, (unsigned long )0, (long long )1);
              __CrestLoad(96798, (unsigned long )(& c), (long long )c);
              __CrestLoad(96797, (unsigned long )0, (long long )255);
              __CrestApply2(96796, 5, (long long )(c & 255));
              __CrestLoad(96795, (unsigned long )0, (long long )31);
              __CrestApply2(96794, 5, (long long )((c & 255) & 31));
              __CrestApply2(96793, 8, (long long )(1 << ((c & 255) & 31)));
              __CrestApply2(96792, 5, (long long )(namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))));
              __CrestLoad(96791, (unsigned long )0, (long long )0);
              __CrestApply2(96790, 13, (long long )((namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))) != 0));
# 1398 "xmltok.c"
              if ((namingBitmap[((int const )namePages[c >> 8] << 3) + (int const )((c & 255) >> 5)] & (unsigned int const )(1 << ((c & 255) & 31))) != 0) {
                __CrestBranch(96801, 62805, 1);
                __CrestLoad(96803, (unsigned long )0, (long long )(unsigned char)26);
                __CrestStore(96804, (unsigned long )(& e->normal.type[i]));
# 1399 "xmltok.c"
                e->normal.type[i] = (unsigned char)26;
              } else {
                __CrestBranch(96802, 62806, 0);
                __CrestLoad(96805, (unsigned long )0, (long long )(unsigned char)28);
                __CrestStore(96806, (unsigned long )(& e->normal.type[i]));
# 1401 "xmltok.c"
                e->normal.type[i] = (unsigned char)28;
              }
              }
            }
            }
            __CrestLoad(96807, (unsigned long )(& c), (long long )c);
# 1402 "xmltok.c"
            tmp___0 = XmlUtf8Encode(c, e->utf8[i] + 1);
            __CrestHandleReturn(96809, (long long )tmp___0);
            __CrestStore(96808, (unsigned long )(& tmp___0));
            __CrestLoad(96810, (unsigned long )(& tmp___0), (long long )tmp___0);
            __CrestStore(96811, (unsigned long )(& e->utf8[i][0]));
# 1402 "xmltok.c"
            e->utf8[i][0] = (char )tmp___0;
            __CrestLoad(96812, (unsigned long )(& c), (long long )c);
            __CrestStore(96813, (unsigned long )(& e->utf16[i]));
# 1403 "xmltok.c"
            e->utf16[i] = (unsigned short )c;
          }
          }
        }
        }
      }
      }
    }
    }
    __CrestLoad(96816, (unsigned long )(& i), (long long )i);
    __CrestLoad(96815, (unsigned long )0, (long long )1);
    __CrestApply2(96814, 0, (long long )(i + 1));
    __CrestStore(96817, (unsigned long )(& i));
# 1360 "xmltok.c"
    i ++;
  }
  while_break___1: ;
  }
# 1406 "xmltok.c"
  e->userData = userData;
# 1407 "xmltok.c"
  e->convert = convert;
  {
  __CrestLoad(96820, (unsigned long )(& convert), (long long )((unsigned long )convert));
  __CrestLoad(96819, (unsigned long )0, (long long )0);
  __CrestApply2(96818, 13, (long long )(convert != 0));
# 1408 "xmltok.c"
  if (convert != 0) {
    __CrestBranch(96821, 62812, 1);
# 1409 "xmltok.c"
    e->normal.isName2 = & unknown_isName;
# 1410 "xmltok.c"
    e->normal.isName3 = & unknown_isName;
# 1411 "xmltok.c"
    e->normal.isName4 = & unknown_isName;
# 1412 "xmltok.c"
    e->normal.isNmstrt2 = & unknown_isNmstrt;
# 1413 "xmltok.c"
    e->normal.isNmstrt3 = & unknown_isNmstrt;
# 1414 "xmltok.c"
    e->normal.isNmstrt4 = & unknown_isNmstrt;
# 1415 "xmltok.c"
    e->normal.isInvalid2 = & unknown_isInvalid;
# 1416 "xmltok.c"
    e->normal.isInvalid3 = & unknown_isInvalid;
# 1417 "xmltok.c"
    e->normal.isInvalid4 = & unknown_isInvalid;
  } else {
    __CrestBranch(96822, 62813, 0);

  }
  }
# 1419 "xmltok.c"
  e->normal.enc.utf8Convert = & unknown_toUtf8;
# 1420 "xmltok.c"
  e->normal.enc.utf16Convert = & unknown_toUtf16;
# 1421 "xmltok.c"
  __retres15 = & e->normal.enc;
  return_label:
  {
  __CrestReturn(96823);
# 1345 "xmltok.c"
  return (__retres15);
  }
}
}
# 1438 "xmltok.c"
static char const KW_ISO_8859_1[11] =
# 1438 "xmltok.c"
  { (char const )73, (char const )83, (char const )79, (char const )45,
        (char const )56, (char const )56, (char const )53, (char const )57,
        (char const )45, (char const )49, (char const )'\000'};
# 1442 "xmltok.c"
static char const KW_US_ASCII[9] =
# 1442 "xmltok.c"
  { (char const )85, (char const )83, (char const )45, (char const )65,
        (char const )83, (char const )67, (char const )73, (char const )73,
        (char const )'\000'};
# 1446 "xmltok.c"
static char const KW_UTF_8[6] = { (char const )85, (char const )84, (char const )70, (char const )45,
        (char const )56, (char const )'\000'};
# 1449 "xmltok.c"
static char const KW_UTF_16[7] = { (char const )85, (char const )84, (char const )70, (char const )45,
        (char const )49, (char const )54, (char const )'\000'};
# 1452 "xmltok.c"
static char const KW_UTF_16BE[9] =
# 1452 "xmltok.c"
  { (char const )85, (char const )84, (char const )70, (char const )45,
        (char const )49, (char const )54, (char const )66, (char const )69,
        (char const )'\000'};
# 1456 "xmltok.c"
static char const KW_UTF_16LE[9] =
# 1456 "xmltok.c"
  { (char const )85, (char const )84, (char const )70, (char const )45,
        (char const )49, (char const )54, (char const )76, (char const )69,
        (char const )'\000'};
# 1464 "xmltok.c"
static int getEncodingIndex(char const *name ) ;
# 1464 "xmltok.c"
static char const * const encodingNames[6] = { (char const * const )(KW_ISO_8859_1), (char const * const )(KW_US_ASCII), (char const * const )(KW_UTF_8), (char const * const )(KW_UTF_16),
        (char const * const )(KW_UTF_16BE), (char const * const )(KW_UTF_16LE)};
# 1461 "xmltok.c"
static int getEncodingIndex(char const *name )
{
  int i ;
  int tmp ;
  int __retres4 ;

  {
  __CrestCall(96824, 946);

  {
  __CrestLoad(96827, (unsigned long )(& name), (long long )((unsigned long )name));
  __CrestLoad(96826, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(96825, 12, (long long )((unsigned long )name == (unsigned long )((void *)0)));
# 1473 "xmltok.c"
  if ((unsigned long )name == (unsigned long )((void *)0)) {
    __CrestBranch(96828, 62818, 1);
    __CrestLoad(96830, (unsigned long )0, (long long )6);
    __CrestStore(96831, (unsigned long )(& __retres4));
# 1474 "xmltok.c"
    __retres4 = 6;
# 1474 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96829, 62820, 0);

  }
  }
  __CrestLoad(96832, (unsigned long )0, (long long )0);
  __CrestStore(96833, (unsigned long )(& i));
# 1475 "xmltok.c"
  i = 0;
  {
# 1475 "xmltok.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(96836, (unsigned long )(& i), (long long )i);
    __CrestLoad(96835, (unsigned long )0, (long long )((int )(sizeof(encodingNames) / sizeof(encodingNames[0]))));
    __CrestApply2(96834, 16, (long long )(i < (int )(sizeof(encodingNames) / sizeof(encodingNames[0]))));
# 1475 "xmltok.c"
    if (i < (int )(sizeof(encodingNames) / sizeof(encodingNames[0]))) {
      __CrestBranch(96837, 62826, 1);

    } else {
      __CrestBranch(96838, 62827, 0);
# 1475 "xmltok.c"
      goto while_break;
    }
    }
# 1476 "xmltok.c"
    tmp = streqci(name, (char const *)encodingNames[i]);
    __CrestHandleReturn(96840, (long long )tmp);
    __CrestStore(96839, (unsigned long )(& tmp));
    {
    __CrestLoad(96843, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(96842, (unsigned long )0, (long long )0);
    __CrestApply2(96841, 13, (long long )(tmp != 0));
# 1476 "xmltok.c"
    if (tmp != 0) {
      __CrestBranch(96844, 62830, 1);
      __CrestLoad(96846, (unsigned long )(& i), (long long )i);
      __CrestStore(96847, (unsigned long )(& __retres4));
# 1477 "xmltok.c"
      __retres4 = i;
# 1477 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(96845, 62832, 0);

    }
    }
    __CrestLoad(96850, (unsigned long )(& i), (long long )i);
    __CrestLoad(96849, (unsigned long )0, (long long )1);
    __CrestApply2(96848, 0, (long long )(i + 1));
    __CrestStore(96851, (unsigned long )(& i));
# 1475 "xmltok.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(96852, (unsigned long )0, (long long )-1);
  __CrestStore(96853, (unsigned long )(& __retres4));
# 1478 "xmltok.c"
  __retres4 = -1;
  return_label:
  {
  __CrestLoad(96854, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(96855);
# 1461 "xmltok.c"
  return (__retres4);
  }
}
}
# 1496 "xmltok.c"
static int initScan(ENCODING const * const *encodingTable , INIT_ENCODING const *enc ,
                    int state , char const *ptr , char const *end , char const **nextTokPtr )
{
  ENCODING const **encPtr ;
  int tmp ;
  int e ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const *mem_13 ;
  char const *mem_14 ;
  ENCODING const * const *mem_15 ;
  ENCODING const * const *mem_16 ;
  ENCODING const *mem_17 ;
  SCANNER mem_18 ;
  ENCODING const * const *mem_19 ;
  char const *mem_20 ;
  ENCODING const * const *mem_21 ;
  char const *mem_22 ;
  ENCODING const * const *mem_23 ;
  ENCODING const *mem_24 ;
  SCANNER mem_25 ;
  char const *mem_26 ;
  ENCODING const * const *mem_27 ;
  ENCODING const *mem_28 ;
  SCANNER mem_29 ;
  ENCODING const * const *mem_30 ;
  ENCODING const *mem_31 ;
  SCANNER mem_32 ;
  int __retres33 ;

  {
  __CrestCall(96857, 947);
  __CrestStore(96856, (unsigned long )(& state));
  {
  __CrestLoad(96860, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(96859, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(96858, 12, (long long )((unsigned long )ptr == (unsigned long )end));
# 1506 "xmltok.c"
  if ((unsigned long )ptr == (unsigned long )end) {
    __CrestBranch(96861, 62838, 1);
    __CrestLoad(96863, (unsigned long )0, (long long )-4);
    __CrestStore(96864, (unsigned long )(& __retres33));
# 1507 "xmltok.c"
    __retres33 = -4;
# 1507 "xmltok.c"
    goto return_label;
  } else {
    __CrestBranch(96862, 62840, 0);

  }
  }
# 1508 "xmltok.c"
  encPtr = (ENCODING const **)enc->encPtr;
  {
  __CrestLoad(96869, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(96868, (unsigned long )0, (long long )1);
  __CrestApply2(96867, 18, (long long )((unsigned long )(ptr + 1)));
  __CrestLoad(96866, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(96865, 12, (long long )((unsigned long )(ptr + 1) == (unsigned long )end));
# 1509 "xmltok.c"
  if ((unsigned long )(ptr + 1) == (unsigned long )end) {
    __CrestBranch(96870, 62843, 1);
    {
    {
    __CrestLoad(96874, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96873, (unsigned long )0, (long long )4);
    __CrestApply2(96872, 12, (long long )((int )enc->initEnc.isUtf16 == 4));
# 1521 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 4) {
      __CrestBranch(96875, 62845, 1);
# 1521 "xmltok.c"
      goto case_4;
    } else {
      __CrestBranch(96876, 62846, 0);

    }
    }
    {
    __CrestLoad(96879, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96878, (unsigned long )0, (long long )5);
    __CrestApply2(96877, 12, (long long )((int )enc->initEnc.isUtf16 == 5));
# 1521 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 5) {
      __CrestBranch(96880, 62848, 1);
# 1521 "xmltok.c"
      goto case_4;
    } else {
      __CrestBranch(96881, 62849, 0);

    }
    }
    {
    __CrestLoad(96884, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96883, (unsigned long )0, (long long )3);
    __CrestApply2(96882, 12, (long long )((int )enc->initEnc.isUtf16 == 3));
# 1521 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 3) {
      __CrestBranch(96885, 62851, 1);
# 1521 "xmltok.c"
      goto case_4;
    } else {
      __CrestBranch(96886, 62852, 0);

    }
    }
# 1518 "xmltok.c"
    goto switch_break;
    case_4:
    case_5:
    case_3:
    __CrestLoad(96887, (unsigned long )0, (long long )-1);
    __CrestStore(96888, (unsigned long )(& __retres33));
# 1522 "xmltok.c"
    __retres33 = -1;
# 1522 "xmltok.c"
    goto return_label;
    switch_break: ;
    }
    {
    {
    __CrestLoad(96891, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(96890, (unsigned long )0, (long long )239);
    __CrestApply2(96889, 12, (long long )((int )((unsigned char )*ptr) == 239));
# 1527 "xmltok.c"
    if ((int )((unsigned char )*ptr) == 239) {
      __CrestBranch(96892, 62859, 1);
# 1527 "xmltok.c"
      goto case_239;
    } else {
      __CrestBranch(96893, 62860, 0);

    }
    }
    {
    __CrestLoad(96896, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(96895, (unsigned long )0, (long long )255);
    __CrestApply2(96894, 12, (long long )((int )((unsigned char )*ptr) == 255));
# 1527 "xmltok.c"
    if ((int )((unsigned char )*ptr) == 255) {
      __CrestBranch(96897, 62862, 1);
# 1527 "xmltok.c"
      goto case_239;
    } else {
      __CrestBranch(96898, 62863, 0);

    }
    }
    {
    __CrestLoad(96901, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(96900, (unsigned long )0, (long long )254);
    __CrestApply2(96899, 12, (long long )((int )((unsigned char )*ptr) == 254));
# 1527 "xmltok.c"
    if ((int )((unsigned char )*ptr) == 254) {
      __CrestBranch(96902, 62865, 1);
# 1527 "xmltok.c"
      goto case_239;
    } else {
      __CrestBranch(96903, 62866, 0);

    }
    }
    {
    __CrestLoad(96906, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(96905, (unsigned long )0, (long long )60);
    __CrestApply2(96904, 12, (long long )((int )((unsigned char )*ptr) == 60));
# 1533 "xmltok.c"
    if ((int )((unsigned char )*ptr) == 60) {
      __CrestBranch(96907, 62868, 1);
# 1533 "xmltok.c"
      goto case_60;
    } else {
      __CrestBranch(96908, 62869, 0);

    }
    }
    {
    __CrestLoad(96911, (unsigned long )ptr, (long long )*ptr);
    __CrestLoad(96910, (unsigned long )0, (long long )0);
    __CrestApply2(96909, 12, (long long )((int )((unsigned char )*ptr) == 0));
# 1533 "xmltok.c"
    if ((int )((unsigned char )*ptr) == 0) {
      __CrestBranch(96912, 62871, 1);
# 1533 "xmltok.c"
      goto case_60;
    } else {
      __CrestBranch(96913, 62872, 0);

    }
    }
# 1524 "xmltok.c"
    goto switch_break___0;
    case_239:
    case_255:
    case_254:
    {
    __CrestLoad(96916, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96915, (unsigned long )0, (long long )0);
    __CrestApply2(96914, 12, (long long )((int )enc->initEnc.isUtf16 == 0));
# 1528 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 0) {
      __CrestBranch(96917, 62875, 1);
      {
      __CrestLoad(96921, (unsigned long )(& state), (long long )state);
      __CrestLoad(96920, (unsigned long )0, (long long )1);
      __CrestApply2(96919, 12, (long long )(state == 1));
# 1528 "xmltok.c"
      if (state == 1) {
        __CrestBranch(96922, 62876, 1);
# 1530 "xmltok.c"
        goto switch_break___0;
      } else {
        __CrestBranch(96923, 62877, 0);

      }
      }
    } else {
      __CrestBranch(96918, 62878, 0);

    }
    }
    case_60:
    case_0:
    __CrestLoad(96924, (unsigned long )0, (long long )-1);
    __CrestStore(96925, (unsigned long )(& __retres33));
# 1534 "xmltok.c"
    __retres33 = -1;
# 1534 "xmltok.c"
    goto return_label;
    switch_break___0: ;
    }
  } else {
    __CrestBranch(96871, 62882, 0);
    {
# 1538 "xmltok.c"
    mem_13 = ptr + 0;
# 1538 "xmltok.c"
    mem_14 = ptr + 1;
    {
    {
    __CrestLoad(96932, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(96931, (unsigned long )0, (long long )8);
    __CrestApply2(96930, 8, (long long )((int )((unsigned char )*mem_13) << 8));
    __CrestLoad(96929, (unsigned long )mem_14, (long long )*mem_14);
    __CrestApply2(96928, 6, (long long )(((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)));
    __CrestLoad(96927, (unsigned long )0, (long long )65279);
    __CrestApply2(96926, 12, (long long )((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 65279));
# 1539 "xmltok.c"
    if ((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 65279) {
      __CrestBranch(96933, 62886, 1);
# 1539 "xmltok.c"
      goto case_65279;
    } else {
      __CrestBranch(96934, 62887, 0);

    }
    }
    {
    __CrestLoad(96941, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(96940, (unsigned long )0, (long long )8);
    __CrestApply2(96939, 8, (long long )((int )((unsigned char )*mem_13) << 8));
    __CrestLoad(96938, (unsigned long )mem_14, (long long )*mem_14);
    __CrestApply2(96937, 6, (long long )(((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)));
    __CrestLoad(96936, (unsigned long )0, (long long )15360);
    __CrestApply2(96935, 12, (long long )((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 15360));
# 1547 "xmltok.c"
    if ((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 15360) {
      __CrestBranch(96942, 62889, 1);
# 1547 "xmltok.c"
      goto case_15360;
    } else {
      __CrestBranch(96943, 62890, 0);

    }
    }
    {
    __CrestLoad(96950, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(96949, (unsigned long )0, (long long )8);
    __CrestApply2(96948, 8, (long long )((int )((unsigned char )*mem_13) << 8));
    __CrestLoad(96947, (unsigned long )mem_14, (long long )*mem_14);
    __CrestApply2(96946, 6, (long long )(((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)));
    __CrestLoad(96945, (unsigned long )0, (long long )65534);
    __CrestApply2(96944, 12, (long long )((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 65534));
# 1554 "xmltok.c"
    if ((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 65534) {
      __CrestBranch(96951, 62892, 1);
# 1554 "xmltok.c"
      goto case_65534;
    } else {
      __CrestBranch(96952, 62893, 0);

    }
    }
    {
    __CrestLoad(96959, (unsigned long )mem_13, (long long )*mem_13);
    __CrestLoad(96958, (unsigned long )0, (long long )8);
    __CrestApply2(96957, 8, (long long )((int )((unsigned char )*mem_13) << 8));
    __CrestLoad(96956, (unsigned long )mem_14, (long long )*mem_14);
    __CrestApply2(96955, 6, (long long )(((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)));
    __CrestLoad(96954, (unsigned long )0, (long long )61371);
    __CrestApply2(96953, 12, (long long )((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 61371));
# 1561 "xmltok.c"
    if ((((int )((unsigned char )*mem_13) << 8) | (int )((unsigned char )*mem_14)) == 61371) {
      __CrestBranch(96960, 62895, 1);
# 1561 "xmltok.c"
      goto case_61371;
    } else {
      __CrestBranch(96961, 62896, 0);

    }
    }
# 1583 "xmltok.c"
    goto switch_default;
    case_65279:
    {
    __CrestLoad(96964, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96963, (unsigned long )0, (long long )0);
    __CrestApply2(96962, 12, (long long )((int )enc->initEnc.isUtf16 == 0));
# 1540 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 0) {
      __CrestBranch(96965, 62899, 1);
      {
      __CrestLoad(96969, (unsigned long )(& state), (long long )state);
      __CrestLoad(96968, (unsigned long )0, (long long )1);
      __CrestApply2(96967, 12, (long long )(state == 1));
# 1540 "xmltok.c"
      if (state == 1) {
        __CrestBranch(96970, 62900, 1);
# 1542 "xmltok.c"
        goto switch_break___1;
      } else {
        __CrestBranch(96971, 62901, 0);

      }
      }
    } else {
      __CrestBranch(96966, 62902, 0);

    }
    }
# 1543 "xmltok.c"
    *nextTokPtr = ptr + 2;
# 1544 "xmltok.c"
    mem_15 = encodingTable + 4;
# 1544 "xmltok.c"
    *encPtr = (ENCODING const *)*mem_15;
    __CrestLoad(96972, (unsigned long )0, (long long )14);
    __CrestStore(96973, (unsigned long )(& __retres33));
# 1545 "xmltok.c"
    __retres33 = 14;
# 1545 "xmltok.c"
    goto return_label;
    case_15360:
    {
    __CrestLoad(96976, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96975, (unsigned long )0, (long long )4);
    __CrestApply2(96974, 12, (long long )((int )enc->initEnc.isUtf16 == 4));
# 1548 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 4) {
      __CrestBranch(96977, 62907, 1);
# 1548 "xmltok.c"
      goto _L;
    } else {
      __CrestBranch(96978, 62908, 0);
      {
      __CrestLoad(96981, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
      __CrestLoad(96980, (unsigned long )0, (long long )3);
      __CrestApply2(96979, 12, (long long )((int )enc->initEnc.isUtf16 == 3));
# 1548 "xmltok.c"
      if ((int )enc->initEnc.isUtf16 == 3) {
        __CrestBranch(96982, 62909, 1);
        _L:
        {
        __CrestLoad(96986, (unsigned long )(& state), (long long )state);
        __CrestLoad(96985, (unsigned long )0, (long long )1);
        __CrestApply2(96984, 12, (long long )(state == 1));
# 1548 "xmltok.c"
        if (state == 1) {
          __CrestBranch(96987, 62910, 1);
# 1551 "xmltok.c"
          goto switch_break___1;
        } else {
          __CrestBranch(96988, 62911, 0);

        }
        }
      } else {
        __CrestBranch(96983, 62912, 0);

      }
      }
    }
    }
# 1552 "xmltok.c"
    mem_16 = encodingTable + 5;
# 1552 "xmltok.c"
    *encPtr = (ENCODING const *)*mem_16;
# 1553 "xmltok.c"
    mem_17 = *encPtr;
# 1553 "xmltok.c"
    mem_18 = mem_17->scanners[state];
# 1553 "xmltok.c"
    tmp = (*mem_18)(*encPtr, ptr, end, nextTokPtr);
    __CrestHandleReturn(96990, (long long )tmp);
    __CrestStore(96989, (unsigned long )(& tmp));
    __CrestLoad(96991, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(96992, (unsigned long )(& __retres33));
# 1553 "xmltok.c"
    __retres33 = tmp;
# 1553 "xmltok.c"
    goto return_label;
    case_65534:
    {
    __CrestLoad(96995, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
    __CrestLoad(96994, (unsigned long )0, (long long )0);
    __CrestApply2(96993, 12, (long long )((int )enc->initEnc.isUtf16 == 0));
# 1555 "xmltok.c"
    if ((int )enc->initEnc.isUtf16 == 0) {
      __CrestBranch(96996, 62917, 1);
      {
      __CrestLoad(97000, (unsigned long )(& state), (long long )state);
      __CrestLoad(96999, (unsigned long )0, (long long )1);
      __CrestApply2(96998, 12, (long long )(state == 1));
# 1555 "xmltok.c"
      if (state == 1) {
        __CrestBranch(97001, 62918, 1);
# 1557 "xmltok.c"
        goto switch_break___1;
      } else {
        __CrestBranch(97002, 62919, 0);

      }
      }
    } else {
      __CrestBranch(96997, 62920, 0);

    }
    }
# 1558 "xmltok.c"
    *nextTokPtr = ptr + 2;
# 1559 "xmltok.c"
    mem_19 = encodingTable + 5;
# 1559 "xmltok.c"
    *encPtr = (ENCODING const *)*mem_19;
    __CrestLoad(97003, (unsigned long )0, (long long )14);
    __CrestStore(97004, (unsigned long )(& __retres33));
# 1560 "xmltok.c"
    __retres33 = 14;
# 1560 "xmltok.c"
    goto return_label;
    case_61371:
    {
    __CrestLoad(97007, (unsigned long )(& state), (long long )state);
    __CrestLoad(97006, (unsigned long )0, (long long )1);
    __CrestApply2(97005, 12, (long long )(state == 1));
# 1569 "xmltok.c"
    if (state == 1) {
      __CrestBranch(97008, 62925, 1);
      __CrestLoad(97010, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
      __CrestStore(97011, (unsigned long )(& e));
# 1570 "xmltok.c"
      e = (int )enc->initEnc.isUtf16;
      {
      __CrestLoad(97014, (unsigned long )(& e), (long long )e);
      __CrestLoad(97013, (unsigned long )0, (long long )0);
      __CrestApply2(97012, 12, (long long )(e == 0));
# 1571 "xmltok.c"
      if (e == 0) {
        __CrestBranch(97015, 62927, 1);
# 1573 "xmltok.c"
        goto switch_break___1;
      } else {
        __CrestBranch(97016, 62928, 0);
        {
        __CrestLoad(97019, (unsigned long )(& e), (long long )e);
        __CrestLoad(97018, (unsigned long )0, (long long )4);
        __CrestApply2(97017, 12, (long long )(e == 4));
# 1571 "xmltok.c"
        if (e == 4) {
          __CrestBranch(97020, 62929, 1);
# 1573 "xmltok.c"
          goto switch_break___1;
        } else {
          __CrestBranch(97021, 62930, 0);
          {
          __CrestLoad(97024, (unsigned long )(& e), (long long )e);
          __CrestLoad(97023, (unsigned long )0, (long long )5);
          __CrestApply2(97022, 12, (long long )(e == 5));
# 1571 "xmltok.c"
          if (e == 5) {
            __CrestBranch(97025, 62931, 1);
# 1573 "xmltok.c"
            goto switch_break___1;
          } else {
            __CrestBranch(97026, 62932, 0);
            {
            __CrestLoad(97029, (unsigned long )(& e), (long long )e);
            __CrestLoad(97028, (unsigned long )0, (long long )3);
            __CrestApply2(97027, 12, (long long )(e == 3));
# 1571 "xmltok.c"
            if (e == 3) {
              __CrestBranch(97030, 62933, 1);
# 1573 "xmltok.c"
              goto switch_break___1;
            } else {
              __CrestBranch(97031, 62934, 0);

            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(97009, 62935, 0);

    }
    }
    {
    __CrestLoad(97036, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
    __CrestLoad(97035, (unsigned long )0, (long long )2);
    __CrestApply2(97034, 18, (long long )((unsigned long )(ptr + 2)));
    __CrestLoad(97033, (unsigned long )(& end), (long long )((unsigned long )end));
    __CrestApply2(97032, 12, (long long )((unsigned long )(ptr + 2) == (unsigned long )end));
# 1575 "xmltok.c"
    if ((unsigned long )(ptr + 2) == (unsigned long )end) {
      __CrestBranch(97037, 62937, 1);
      __CrestLoad(97039, (unsigned long )0, (long long )-1);
      __CrestStore(97040, (unsigned long )(& __retres33));
# 1576 "xmltok.c"
      __retres33 = -1;
# 1576 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(97038, 62939, 0);

    }
    }
    {
# 1577 "xmltok.c"
    mem_20 = ptr + 2;
    {
    __CrestLoad(97043, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(97042, (unsigned long )0, (long long )191);
    __CrestApply2(97041, 12, (long long )((int )((unsigned char )*mem_20) == 191));
# 1577 "xmltok.c"
    if ((int )((unsigned char )*mem_20) == 191) {
      __CrestBranch(97044, 62943, 1);
# 1578 "xmltok.c"
      *nextTokPtr = ptr + 3;
# 1579 "xmltok.c"
      mem_21 = encodingTable + 2;
# 1579 "xmltok.c"
      *encPtr = (ENCODING const *)*mem_21;
      __CrestLoad(97046, (unsigned long )0, (long long )14);
      __CrestStore(97047, (unsigned long )(& __retres33));
# 1580 "xmltok.c"
      __retres33 = 14;
# 1580 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(97045, 62946, 0);

    }
    }
    }
# 1582 "xmltok.c"
    goto switch_break___1;
    switch_default:
    {
# 1584 "xmltok.c"
    mem_22 = ptr + 0;
    {
    __CrestLoad(97050, (unsigned long )mem_22, (long long )*mem_22);
    __CrestLoad(97049, (unsigned long )0, (long long )0);
    __CrestApply2(97048, 12, (long long )((int const )*mem_22 == 0));
# 1584 "xmltok.c"
    if ((int const )*mem_22 == 0) {
      __CrestBranch(97051, 62951, 1);
      {
      __CrestLoad(97055, (unsigned long )(& state), (long long )state);
      __CrestLoad(97054, (unsigned long )0, (long long )1);
      __CrestApply2(97053, 12, (long long )(state == 1));
# 1591 "xmltok.c"
      if (state == 1) {
        __CrestBranch(97056, 62952, 1);
        {
        __CrestLoad(97060, (unsigned long )(& enc->initEnc.isUtf16), (long long )enc->initEnc.isUtf16);
        __CrestLoad(97059, (unsigned long )0, (long long )5);
        __CrestApply2(97058, 12, (long long )((int )enc->initEnc.isUtf16 == 5));
# 1591 "xmltok.c"
        if ((int )enc->initEnc.isUtf16 == 5) {
          __CrestBranch(97061, 62953, 1);
# 1592 "xmltok.c"
          goto switch_break___1;
        } else {
          __CrestBranch(97062, 62954, 0);

        }
        }
      } else {
        __CrestBranch(97057, 62955, 0);

      }
      }
# 1593 "xmltok.c"
      mem_23 = encodingTable + 4;
# 1593 "xmltok.c"
      *encPtr = (ENCODING const *)*mem_23;
# 1594 "xmltok.c"
      mem_24 = *encPtr;
# 1594 "xmltok.c"
      mem_25 = mem_24->scanners[state];
# 1594 "xmltok.c"
      tmp___0 = (*mem_25)(*encPtr, ptr, end, nextTokPtr);
      __CrestHandleReturn(97064, (long long )tmp___0);
      __CrestStore(97063, (unsigned long )(& tmp___0));
      __CrestLoad(97065, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestStore(97066, (unsigned long )(& __retres33));
# 1594 "xmltok.c"
      __retres33 = tmp___0;
# 1594 "xmltok.c"
      goto return_label;
    } else {
      __CrestBranch(97052, 62959, 0);
      {
# 1596 "xmltok.c"
      mem_26 = ptr + 1;
      {
      __CrestLoad(97069, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(97068, (unsigned long )0, (long long )0);
      __CrestApply2(97067, 12, (long long )((int const )*mem_26 == 0));
# 1596 "xmltok.c"
      if ((int const )*mem_26 == 0) {
        __CrestBranch(97070, 62962, 1);
        {
        __CrestLoad(97074, (unsigned long )(& state), (long long )state);
        __CrestLoad(97073, (unsigned long )0, (long long )1);
        __CrestApply2(97072, 12, (long long )(state == 1));
# 1606 "xmltok.c"
        if (state == 1) {
          __CrestBranch(97075, 62963, 1);
# 1607 "xmltok.c"
          goto switch_break___1;
        } else {
          __CrestBranch(97076, 62964, 0);

        }
        }
# 1608 "xmltok.c"
        mem_27 = encodingTable + 5;
# 1608 "xmltok.c"
        *encPtr = (ENCODING const *)*mem_27;
# 1609 "xmltok.c"
        mem_28 = *encPtr;
# 1609 "xmltok.c"
        mem_29 = mem_28->scanners[state];
# 1609 "xmltok.c"
        tmp___1 = (*mem_29)(*encPtr, ptr, end, nextTokPtr);
        __CrestHandleReturn(97078, (long long )tmp___1);
        __CrestStore(97077, (unsigned long )(& tmp___1));
        __CrestLoad(97079, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(97080, (unsigned long )(& __retres33));
# 1609 "xmltok.c"
        __retres33 = tmp___1;
# 1609 "xmltok.c"
        goto return_label;
      } else {
        __CrestBranch(97071, 62968, 0);

      }
      }
      }
    }
    }
    }
# 1611 "xmltok.c"
    goto switch_break___1;
    switch_break___1: ;
    }
    }
  }
  }
# 1614 "xmltok.c"
  mem_30 = encodingTable + (int )enc->initEnc.isUtf16;
# 1614 "xmltok.c"
  *encPtr = (ENCODING const *)*mem_30;
# 1615 "xmltok.c"
  mem_31 = *encPtr;
# 1615 "xmltok.c"
  mem_32 = mem_31->scanners[state];
# 1615 "xmltok.c"
  tmp___2 = (*mem_32)(*encPtr, ptr, end, nextTokPtr);
  __CrestHandleReturn(97082, (long long )tmp___2);
  __CrestStore(97081, (unsigned long )(& tmp___2));
  __CrestLoad(97083, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(97084, (unsigned long )(& __retres33));
# 1615 "xmltok.c"
  __retres33 = tmp___2;
  return_label:
  {
  __CrestLoad(97085, (unsigned long )(& __retres33), (long long )__retres33);
  __CrestReturn(97086);
# 1496 "xmltok.c"
  return (__retres33);
  }
}
}
# 8 "xmltok_ns.c"
ENCODING const *XmlGetUtf8InternalEncoding(void)
{
  ENCODING const *__retres1 ;

  {
  __CrestCall(97087, 948);
# 11 "xmltok_ns.c"
  __retres1 = & internal_utf8_encoding.enc;
  {
  __CrestReturn(97088);
# 8 "xmltok_ns.c"
  return (__retres1);
  }
}
}
# 14 "xmltok_ns.c"
ENCODING const *XmlGetUtf16InternalEncoding(void)
{
  ENCODING const *__retres1 ;

  {
  __CrestCall(97089, 949);
# 18 "xmltok_ns.c"
  __retres1 = & internal_little2_encoding.enc;
  {
  __CrestReturn(97090);
# 14 "xmltok_ns.c"
  return (__retres1);
  }
}
}
# 29 "xmltok_ns.c"
static ENCODING const * const encodings[7] = { (ENCODING const * const )(& latin1_encoding.enc), (ENCODING const * const )(& ascii_encoding.enc), (ENCODING const * const )(& utf8_encoding.enc), (ENCODING const * const )(& big2_encoding.enc),
        (ENCODING const * const )(& big2_encoding.enc), (ENCODING const * const )(& little2_encoding.enc), (ENCODING const * const )(& utf8_encoding.enc)};
# 39 "xmltok_ns.c"
static int initScanProlog(ENCODING const *enc , char const *ptr , char const *end ,
                          char const **nextTokPtr )
{
  int tmp ;

  {
  __CrestCall(97091, 950);

  __CrestLoad(97092, (unsigned long )0, (long long )0);
# 43 "xmltok_ns.c"
  tmp = initScan(encodings, (INIT_ENCODING const *)enc, 0, ptr, end, nextTokPtr);
  __CrestHandleReturn(97094, (long long )tmp);
  __CrestStore(97093, (unsigned long )(& tmp));
  {
  __CrestLoad(97095, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97096);
# 43 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 47 "xmltok_ns.c"
static int initScanContent(ENCODING const *enc , char const *ptr , char const *end ,
                           char const **nextTokPtr )
{
  int tmp ;

  {
  __CrestCall(97097, 951);

  __CrestLoad(97098, (unsigned long )0, (long long )1);
# 51 "xmltok_ns.c"
  tmp = initScan(encodings, (INIT_ENCODING const *)enc, 1, ptr, end, nextTokPtr);
  __CrestHandleReturn(97100, (long long )tmp);
  __CrestStore(97099, (unsigned long )(& tmp));
  {
  __CrestLoad(97101, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97102);
# 51 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 55 "xmltok_ns.c"
int XmlInitEncoding(INIT_ENCODING *p , ENCODING const **encPtr , char const *name )
{
  int i ;
  int tmp ;
  int __retres6 ;

  {
  __CrestCall(97103, 952);
# 59 "xmltok_ns.c"
  tmp = getEncodingIndex(name);
  __CrestHandleReturn(97105, (long long )tmp);
  __CrestStore(97104, (unsigned long )(& tmp));
  __CrestLoad(97106, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97107, (unsigned long )(& i));
# 59 "xmltok_ns.c"
  i = tmp;
  {
  __CrestLoad(97110, (unsigned long )(& i), (long long )i);
  __CrestLoad(97109, (unsigned long )0, (long long )-1);
  __CrestApply2(97108, 12, (long long )(i == -1));
# 60 "xmltok_ns.c"
  if (i == -1) {
    __CrestBranch(97111, 62984, 1);
    __CrestLoad(97113, (unsigned long )0, (long long )0);
    __CrestStore(97114, (unsigned long )(& __retres6));
# 61 "xmltok_ns.c"
    __retres6 = 0;
# 61 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97112, 62986, 0);

  }
  }
  __CrestLoad(97115, (unsigned long )(& i), (long long )i);
  __CrestStore(97116, (unsigned long )(& p->initEnc.isUtf16));
# 62 "xmltok_ns.c"
  p->initEnc.isUtf16 = (char )i;
# 63 "xmltok_ns.c"
  p->initEnc.scanners[0] = & initScanProlog;
# 64 "xmltok_ns.c"
  p->initEnc.scanners[1] = & initScanContent;
# 65 "xmltok_ns.c"
  p->initEnc.updatePosition = & initUpdatePosition;
# 66 "xmltok_ns.c"
  p->encPtr = encPtr;
# 67 "xmltok_ns.c"
  *encPtr = (ENCODING const *)(& p->initEnc);
  __CrestLoad(97117, (unsigned long )0, (long long )1);
  __CrestStore(97118, (unsigned long )(& __retres6));
# 68 "xmltok_ns.c"
  __retres6 = 1;
  return_label:
  {
  __CrestLoad(97119, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(97120);
# 55 "xmltok_ns.c"
  return (__retres6);
  }
}
}
# 71 "xmltok_ns.c"
static ENCODING const *findEncoding(ENCODING const *enc , char const *ptr ,
                                      char const *end )
{
  char buf[128] ;
  char *p ;
  int i ;
  int tmp ;
  void (*mem_8)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                char **toP , char const *toLim ) ;
  ENCODING const *__retres9 ;

  {
  __CrestCall(97121, 953);
# 76 "xmltok_ns.c"
  p = buf;
# 78 "xmltok_ns.c"
  mem_8 = enc->utf8Convert;
# 78 "xmltok_ns.c"
  (*mem_8)(enc, & ptr, end, & p, (char const *)((p + 128) - 1));
  __CrestClearStack(97122);
  {
  __CrestLoad(97125, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(97124, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(97123, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 79 "xmltok_ns.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(97126, 62992, 1);
# 80 "xmltok_ns.c"
    __retres9 = (ENCODING const *)0;
# 80 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97127, 62994, 0);

  }
  }
  __CrestLoad(97128, (unsigned long )0, (long long )(char)0);
  __CrestStore(97129, (unsigned long )p);
# 81 "xmltok_ns.c"
  *p = (char)0;
# 82 "xmltok_ns.c"
  tmp = streqci((char const *)(buf), KW_UTF_16);
  __CrestHandleReturn(97131, (long long )tmp);
  __CrestStore(97130, (unsigned long )(& tmp));
  {
  __CrestLoad(97134, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97133, (unsigned long )0, (long long )0);
  __CrestApply2(97132, 13, (long long )(tmp != 0));
# 82 "xmltok_ns.c"
  if (tmp != 0) {
    __CrestBranch(97135, 62997, 1);
    {
    __CrestLoad(97139, (unsigned long )(& enc->minBytesPerChar), (long long )enc->minBytesPerChar);
    __CrestLoad(97138, (unsigned long )0, (long long )2);
    __CrestApply2(97137, 12, (long long )(enc->minBytesPerChar == 2));
# 82 "xmltok_ns.c"
    if (enc->minBytesPerChar == 2) {
      __CrestBranch(97140, 62998, 1);
# 83 "xmltok_ns.c"
      __retres9 = enc;
# 83 "xmltok_ns.c"
      goto return_label;
    } else {
      __CrestBranch(97141, 63000, 0);

    }
    }
  } else {
    __CrestBranch(97136, 63001, 0);

  }
  }
# 84 "xmltok_ns.c"
  i = getEncodingIndex((char const *)(buf));
  __CrestHandleReturn(97143, (long long )i);
  __CrestStore(97142, (unsigned long )(& i));
  {
  __CrestLoad(97146, (unsigned long )(& i), (long long )i);
  __CrestLoad(97145, (unsigned long )0, (long long )-1);
  __CrestApply2(97144, 12, (long long )(i == -1));
# 85 "xmltok_ns.c"
  if (i == -1) {
    __CrestBranch(97147, 63004, 1);
# 86 "xmltok_ns.c"
    __retres9 = (ENCODING const *)0;
# 86 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97148, 63006, 0);

  }
  }
# 87 "xmltok_ns.c"
  __retres9 = (ENCODING const *)encodings[i];
  return_label:
  {
  __CrestReturn(97149);
# 71 "xmltok_ns.c"
  return (__retres9);
  }
}
}
# 90 "xmltok_ns.c"
int XmlParseXmlDecl(int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
                    char const *end , char const **badPtr , char const **versionPtr ,
                    char const **versionEndPtr , char const **encodingName , ENCODING const **encoding ,
                    int *standalone )
{
  int tmp ;

  {
  __CrestCall(97151, 954);
  __CrestStore(97150, (unsigned long )(& isGeneralTextEntity));
  __CrestLoad(97152, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
# 102 "xmltok_ns.c"
  tmp = doParseXmlDecl(& findEncoding, isGeneralTextEntity, enc, ptr, end, badPtr,
                       versionPtr, versionEndPtr, encodingName, encoding, standalone);
  __CrestHandleReturn(97154, (long long )tmp);
  __CrestStore(97153, (unsigned long )(& tmp));
  {
  __CrestLoad(97155, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97156);
# 102 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 8 "xmltok_ns.c"
ENCODING const *XmlGetUtf8InternalEncodingNS(void)
{
  ENCODING const *__retres1 ;

  {
  __CrestCall(97157, 955);
# 11 "xmltok_ns.c"
  __retres1 = & internal_utf8_encoding_ns.enc;
  {
  __CrestReturn(97158);
# 8 "xmltok_ns.c"
  return (__retres1);
  }
}
}
# 14 "xmltok_ns.c"
ENCODING const *XmlGetUtf16InternalEncodingNS(void)
{
  ENCODING const *__retres1 ;

  {
  __CrestCall(97159, 956);
# 18 "xmltok_ns.c"
  __retres1 = & internal_little2_encoding_ns.enc;
  {
  __CrestReturn(97160);
# 14 "xmltok_ns.c"
  return (__retres1);
  }
}
}
# 29 "xmltok_ns.c"
static ENCODING const * const encodingsNS[7] = { (ENCODING const * const )(& latin1_encoding_ns.enc), (ENCODING const * const )(& ascii_encoding_ns.enc), (ENCODING const * const )(& utf8_encoding_ns.enc), (ENCODING const * const )(& big2_encoding_ns.enc),
        (ENCODING const * const )(& big2_encoding_ns.enc), (ENCODING const * const )(& little2_encoding_ns.enc), (ENCODING const * const )(& utf8_encoding_ns.enc)};
# 39 "xmltok_ns.c"
static int initScanPrologNS(ENCODING const *enc , char const *ptr , char const *end ,
                            char const **nextTokPtr )
{
  int tmp ;

  {
  __CrestCall(97161, 957);

  __CrestLoad(97162, (unsigned long )0, (long long )0);
# 43 "xmltok_ns.c"
  tmp = initScan(encodingsNS, (INIT_ENCODING const *)enc, 0, ptr, end, nextTokPtr);
  __CrestHandleReturn(97164, (long long )tmp);
  __CrestStore(97163, (unsigned long )(& tmp));
  {
  __CrestLoad(97165, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97166);
# 43 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 47 "xmltok_ns.c"
static int initScanContentNS(ENCODING const *enc , char const *ptr , char const *end ,
                             char const **nextTokPtr )
{
  int tmp ;

  {
  __CrestCall(97167, 958);

  __CrestLoad(97168, (unsigned long )0, (long long )1);
# 51 "xmltok_ns.c"
  tmp = initScan(encodingsNS, (INIT_ENCODING const *)enc, 1, ptr, end, nextTokPtr);
  __CrestHandleReturn(97170, (long long )tmp);
  __CrestStore(97169, (unsigned long )(& tmp));
  {
  __CrestLoad(97171, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97172);
# 51 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 55 "xmltok_ns.c"
int XmlInitEncodingNS(INIT_ENCODING *p , ENCODING const **encPtr , char const *name )
{
  int i ;
  int tmp ;
  int __retres6 ;

  {
  __CrestCall(97173, 959);
# 59 "xmltok_ns.c"
  tmp = getEncodingIndex(name);
  __CrestHandleReturn(97175, (long long )tmp);
  __CrestStore(97174, (unsigned long )(& tmp));
  __CrestLoad(97176, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97177, (unsigned long )(& i));
# 59 "xmltok_ns.c"
  i = tmp;
  {
  __CrestLoad(97180, (unsigned long )(& i), (long long )i);
  __CrestLoad(97179, (unsigned long )0, (long long )-1);
  __CrestApply2(97178, 12, (long long )(i == -1));
# 60 "xmltok_ns.c"
  if (i == -1) {
    __CrestBranch(97181, 63021, 1);
    __CrestLoad(97183, (unsigned long )0, (long long )0);
    __CrestStore(97184, (unsigned long )(& __retres6));
# 61 "xmltok_ns.c"
    __retres6 = 0;
# 61 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97182, 63023, 0);

  }
  }
  __CrestLoad(97185, (unsigned long )(& i), (long long )i);
  __CrestStore(97186, (unsigned long )(& p->initEnc.isUtf16));
# 62 "xmltok_ns.c"
  p->initEnc.isUtf16 = (char )i;
# 63 "xmltok_ns.c"
  p->initEnc.scanners[0] = & initScanPrologNS;
# 64 "xmltok_ns.c"
  p->initEnc.scanners[1] = & initScanContentNS;
# 65 "xmltok_ns.c"
  p->initEnc.updatePosition = & initUpdatePosition;
# 66 "xmltok_ns.c"
  p->encPtr = encPtr;
# 67 "xmltok_ns.c"
  *encPtr = (ENCODING const *)(& p->initEnc);
  __CrestLoad(97187, (unsigned long )0, (long long )1);
  __CrestStore(97188, (unsigned long )(& __retres6));
# 68 "xmltok_ns.c"
  __retres6 = 1;
  return_label:
  {
  __CrestLoad(97189, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(97190);
# 55 "xmltok_ns.c"
  return (__retres6);
  }
}
}
# 71 "xmltok_ns.c"
static ENCODING const *findEncodingNS(ENCODING const *enc , char const *ptr ,
                                        char const *end )
{
  char buf[128] ;
  char *p ;
  int i ;
  int tmp ;
  void (*mem_8)(ENCODING const *enc , char const **fromP , char const *fromLim ,
                char **toP , char const *toLim ) ;
  ENCODING const *__retres9 ;

  {
  __CrestCall(97191, 960);
# 76 "xmltok_ns.c"
  p = buf;
# 78 "xmltok_ns.c"
  mem_8 = enc->utf8Convert;
# 78 "xmltok_ns.c"
  (*mem_8)(enc, & ptr, end, & p, (char const *)((p + 128) - 1));
  __CrestClearStack(97192);
  {
  __CrestLoad(97195, (unsigned long )(& ptr), (long long )((unsigned long )ptr));
  __CrestLoad(97194, (unsigned long )(& end), (long long )((unsigned long )end));
  __CrestApply2(97193, 13, (long long )((unsigned long )ptr != (unsigned long )end));
# 79 "xmltok_ns.c"
  if ((unsigned long )ptr != (unsigned long )end) {
    __CrestBranch(97196, 63029, 1);
# 80 "xmltok_ns.c"
    __retres9 = (ENCODING const *)0;
# 80 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97197, 63031, 0);

  }
  }
  __CrestLoad(97198, (unsigned long )0, (long long )(char)0);
  __CrestStore(97199, (unsigned long )p);
# 81 "xmltok_ns.c"
  *p = (char)0;
# 82 "xmltok_ns.c"
  tmp = streqci((char const *)(buf), KW_UTF_16);
  __CrestHandleReturn(97201, (long long )tmp);
  __CrestStore(97200, (unsigned long )(& tmp));
  {
  __CrestLoad(97204, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97203, (unsigned long )0, (long long )0);
  __CrestApply2(97202, 13, (long long )(tmp != 0));
# 82 "xmltok_ns.c"
  if (tmp != 0) {
    __CrestBranch(97205, 63034, 1);
    {
    __CrestLoad(97209, (unsigned long )(& enc->minBytesPerChar), (long long )enc->minBytesPerChar);
    __CrestLoad(97208, (unsigned long )0, (long long )2);
    __CrestApply2(97207, 12, (long long )(enc->minBytesPerChar == 2));
# 82 "xmltok_ns.c"
    if (enc->minBytesPerChar == 2) {
      __CrestBranch(97210, 63035, 1);
# 83 "xmltok_ns.c"
      __retres9 = enc;
# 83 "xmltok_ns.c"
      goto return_label;
    } else {
      __CrestBranch(97211, 63037, 0);

    }
    }
  } else {
    __CrestBranch(97206, 63038, 0);

  }
  }
# 84 "xmltok_ns.c"
  i = getEncodingIndex((char const *)(buf));
  __CrestHandleReturn(97213, (long long )i);
  __CrestStore(97212, (unsigned long )(& i));
  {
  __CrestLoad(97216, (unsigned long )(& i), (long long )i);
  __CrestLoad(97215, (unsigned long )0, (long long )-1);
  __CrestApply2(97214, 12, (long long )(i == -1));
# 85 "xmltok_ns.c"
  if (i == -1) {
    __CrestBranch(97217, 63041, 1);
# 86 "xmltok_ns.c"
    __retres9 = (ENCODING const *)0;
# 86 "xmltok_ns.c"
    goto return_label;
  } else {
    __CrestBranch(97218, 63043, 0);

  }
  }
# 87 "xmltok_ns.c"
  __retres9 = (ENCODING const *)encodingsNS[i];
  return_label:
  {
  __CrestReturn(97219);
# 71 "xmltok_ns.c"
  return (__retres9);
  }
}
}
# 90 "xmltok_ns.c"
int XmlParseXmlDeclNS(int isGeneralTextEntity , ENCODING const *enc , char const *ptr ,
                      char const *end , char const **badPtr , char const **versionPtr ,
                      char const **versionEndPtr , char const **encodingName ,
                      ENCODING const **encoding , int *standalone )
{
  int tmp ;

  {
  __CrestCall(97221, 961);
  __CrestStore(97220, (unsigned long )(& isGeneralTextEntity));
  __CrestLoad(97222, (unsigned long )(& isGeneralTextEntity), (long long )isGeneralTextEntity);
# 102 "xmltok_ns.c"
  tmp = doParseXmlDecl(& findEncodingNS, isGeneralTextEntity, enc, ptr, end, badPtr,
                       versionPtr, versionEndPtr, encodingName, encoding, standalone);
  __CrestHandleReturn(97224, (long long )tmp);
  __CrestStore(97223, (unsigned long )(& tmp));
  {
  __CrestLoad(97225, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(97226);
# 102 "xmltok_ns.c"
  return (tmp);
  }
}
}
# 1639 "xmltok.c"
ENCODING *XmlInitUnknownEncodingNS(void *mem , int *table , int (*convert)(void *userData ,
                                                                           char const *p ) ,
                                   void *userData )
{
  ENCODING *enc ;
  ENCODING *tmp ;
  struct normal_encoding *mem_7 ;

  {
  __CrestCall(97227, 962);
# 1645 "xmltok.c"
  tmp = XmlInitUnknownEncoding(mem, table, convert, userData);
  __CrestClearStack(97228);
# 1645 "xmltok.c"
  enc = tmp;
  {
  __CrestLoad(97231, (unsigned long )(& enc), (long long )((unsigned long )enc));
  __CrestLoad(97230, (unsigned long )0, (long long )0);
  __CrestApply2(97229, 13, (long long )(enc != 0));
# 1646 "xmltok.c"
  if (enc != 0) {
    __CrestBranch(97232, 63050, 1);
# 1647 "xmltok.c"
    mem_7 = (struct normal_encoding *)enc;
    __CrestLoad(97234, (unsigned long )0, (long long )(unsigned char)23);
    __CrestStore(97235, (unsigned long )(& mem_7->type[58]));
# 1647 "xmltok.c"
    mem_7->type[58] = (unsigned char)23;
  } else {
    __CrestBranch(97233, 63051, 0);

  }
  }
  {
  __CrestReturn(97236);
# 1648 "xmltok.c"
  return (enc);
  }
}
}
# 1 "xmlrole.o"
#pragma merger("0","./xmlrole.i","-std=gnu99,-g,-O0,-Wall,-Wmissing-prototypes,-Wstrict-prototypes,-fexceptions")
# 33 "xmlrole.c"
static char const KW_ANY[4] = { (char const )65, (char const )78, (char const )89, (char const )'\000'};
# 35 "xmlrole.c"
static char const KW_ATTLIST[8] =
# 35 "xmlrole.c"
  { (char const )65, (char const )84, (char const )84, (char const )76,
        (char const )73, (char const )83, (char const )84, (char const )'\000'};
# 37 "xmlrole.c"
static char const KW_CDATA[6] = { (char const )67, (char const )68, (char const )65, (char const )84,
        (char const )65, (char const )'\000'};
# 39 "xmlrole.c"
static char const KW_DOCTYPE[8] =
# 39 "xmlrole.c"
  { (char const )68, (char const )79, (char const )67, (char const )84,
        (char const )89, (char const )80, (char const )69, (char const )'\000'};
# 41 "xmlrole.c"
static char const KW_ELEMENT[8] =
# 41 "xmlrole.c"
  { (char const )69, (char const )76, (char const )69, (char const )77,
        (char const )69, (char const )78, (char const )84, (char const )'\000'};
# 43 "xmlrole.c"
static char const KW_EMPTY[6] = { (char const )69, (char const )77, (char const )80, (char const )84,
        (char const )89, (char const )'\000'};
# 45 "xmlrole.c"
static char const KW_ENTITIES[9] =
# 45 "xmlrole.c"
  { (char const )69, (char const )78, (char const )84, (char const )73,
        (char const )84, (char const )73, (char const )69, (char const )83,
        (char const )'\000'};
# 48 "xmlrole.c"
static char const KW_ENTITY[7] = { (char const )69, (char const )78, (char const )84, (char const )73,
        (char const )84, (char const )89, (char const )'\000'};
# 50 "xmlrole.c"
static char const KW_FIXED[6] = { (char const )70, (char const )73, (char const )88, (char const )69,
        (char const )68, (char const )'\000'};
# 52 "xmlrole.c"
static char const KW_ID[3] = { (char const )73, (char const )68, (char const )'\000'};
# 54 "xmlrole.c"
static char const KW_IDREF[6] = { (char const )73, (char const )68, (char const )82, (char const )69,
        (char const )70, (char const )'\000'};
# 56 "xmlrole.c"
static char const KW_IDREFS[7] = { (char const )73, (char const )68, (char const )82, (char const )69,
        (char const )70, (char const )83, (char const )'\000'};
# 59 "xmlrole.c"
static char const KW_IGNORE[7] = { (char const )73, (char const )71, (char const )78, (char const )79,
        (char const )82, (char const )69, (char const )'\000'};
# 62 "xmlrole.c"
static char const KW_IMPLIED[8] =
# 62 "xmlrole.c"
  { (char const )73, (char const )77, (char const )80, (char const )76,
        (char const )73, (char const )69, (char const )68, (char const )'\000'};
# 65 "xmlrole.c"
static char const KW_INCLUDE[8] =
# 65 "xmlrole.c"
  { (char const )73, (char const )78, (char const )67, (char const )76,
        (char const )85, (char const )68, (char const )69, (char const )'\000'};
# 68 "xmlrole.c"
static char const KW_NDATA[6] = { (char const )78, (char const )68, (char const )65, (char const )84,
        (char const )65, (char const )'\000'};
# 70 "xmlrole.c"
static char const KW_NMTOKEN[8] =
# 70 "xmlrole.c"
  { (char const )78, (char const )77, (char const )84, (char const )79,
        (char const )75, (char const )69, (char const )78, (char const )'\000'};
# 72 "xmlrole.c"
static char const KW_NMTOKENS[9] =
# 72 "xmlrole.c"
  { (char const )78, (char const )77, (char const )84, (char const )79,
        (char const )75, (char const )69, (char const )78, (char const )83,
        (char const )'\000'};
# 75 "xmlrole.c"
static char const KW_NOTATION[9] =
# 75 "xmlrole.c"
  { (char const )78, (char const )79, (char const )84, (char const )65,
        (char const )84, (char const )73, (char const )79, (char const )78,
        (char const )'\000'};
# 78 "xmlrole.c"
static char const KW_PCDATA[7] = { (char const )80, (char const )67, (char const )68, (char const )65,
        (char const )84, (char const )65, (char const )'\000'};
# 80 "xmlrole.c"
static char const KW_PUBLIC[7] = { (char const )80, (char const )85, (char const )66, (char const )76,
        (char const )73, (char const )67, (char const )'\000'};
# 82 "xmlrole.c"
static char const KW_REQUIRED[9] =
# 82 "xmlrole.c"
  { (char const )82, (char const )69, (char const )81, (char const )85,
        (char const )73, (char const )82, (char const )69, (char const )68,
        (char const )'\000'};
# 85 "xmlrole.c"
static char const KW_SYSTEM[7] = { (char const )83, (char const )89, (char const )83, (char const )84,
        (char const )69, (char const )77, (char const )'\000'};
# 107 "xmlrole.c"
static int prolog0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int prolog1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int prolog2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int doctype5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int internalSubset(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                          ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity8(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity9(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int entity10(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int notation0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int notation1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int notation2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int notation3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int notation4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist8(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int attlist9(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int element7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int externalSubset0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                           ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int externalSubset1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                           ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int condSect0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int condSect1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int condSect2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int declClose(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc ) ;
# 107 "xmlrole.c"
static int error(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                 ENCODING const *enc ) ;
# 125 "xmlrole.c"
static int common(PROLOG_STATE *state , int tok ) ;
# 127 "xmlrole.c"
static int prolog0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int (*mem_8)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres9 ;

  {
  __CrestCall(97238, 963);
  __CrestStore(97237, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97241, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97240, (unsigned long )0, (long long )15);
  __CrestApply2(97239, 12, (long long )(tok == 15));
# 135 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97242, 63055, 1);
# 135 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97243, 63056, 0);

  }
  }
  {
  __CrestLoad(97246, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97245, (unsigned long )0, (long long )12);
  __CrestApply2(97244, 12, (long long )(tok == 12));
# 138 "xmlrole.c"
  if (tok == 12) {
    __CrestBranch(97247, 63058, 1);
# 138 "xmlrole.c"
    goto case_12;
  } else {
    __CrestBranch(97248, 63059, 0);

  }
  }
  {
  __CrestLoad(97251, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97250, (unsigned long )0, (long long )11);
  __CrestApply2(97249, 12, (long long )(tok == 11));
# 141 "xmlrole.c"
  if (tok == 11) {
    __CrestBranch(97252, 63061, 1);
# 141 "xmlrole.c"
    goto case_11;
  } else {
    __CrestBranch(97253, 63062, 0);

  }
  }
  {
  __CrestLoad(97256, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97255, (unsigned long )0, (long long )13);
  __CrestApply2(97254, 12, (long long )(tok == 13));
# 144 "xmlrole.c"
  if (tok == 13) {
    __CrestBranch(97257, 63064, 1);
# 144 "xmlrole.c"
    goto case_13;
  } else {
    __CrestBranch(97258, 63065, 0);

  }
  }
  {
  __CrestLoad(97261, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97260, (unsigned long )0, (long long )14);
  __CrestApply2(97259, 12, (long long )(tok == 14));
# 147 "xmlrole.c"
  if (tok == 14) {
    __CrestBranch(97262, 63067, 1);
# 147 "xmlrole.c"
    goto case_14;
  } else {
    __CrestBranch(97263, 63068, 0);

  }
  }
  {
  __CrestLoad(97266, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97265, (unsigned long )0, (long long )16);
  __CrestApply2(97264, 12, (long long )(tok == 16));
# 149 "xmlrole.c"
  if (tok == 16) {
    __CrestBranch(97267, 63070, 1);
# 149 "xmlrole.c"
    goto case_16;
  } else {
    __CrestBranch(97268, 63071, 0);

  }
  }
  {
  __CrestLoad(97271, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97270, (unsigned long )0, (long long )29);
  __CrestApply2(97269, 12, (long long )(tok == 29));
# 157 "xmlrole.c"
  if (tok == 29) {
    __CrestBranch(97272, 63073, 1);
# 157 "xmlrole.c"
    goto case_29;
  } else {
    __CrestBranch(97273, 63074, 0);

  }
  }
# 134 "xmlrole.c"
  goto switch_break;
  case_15:
# 136 "xmlrole.c"
  state->handler = & prolog1;
  __CrestLoad(97274, (unsigned long )0, (long long )0);
  __CrestStore(97275, (unsigned long )(& __retres9));
# 137 "xmlrole.c"
  __retres9 = 0;
# 137 "xmlrole.c"
  goto return_label;
  case_12:
# 139 "xmlrole.c"
  state->handler = & prolog1;
  __CrestLoad(97276, (unsigned long )0, (long long )1);
  __CrestStore(97277, (unsigned long )(& __retres9));
# 140 "xmlrole.c"
  __retres9 = 1;
# 140 "xmlrole.c"
  goto return_label;
  case_11:
# 142 "xmlrole.c"
  state->handler = & prolog1;
  __CrestLoad(97278, (unsigned long )0, (long long )55);
  __CrestStore(97279, (unsigned long )(& __retres9));
# 143 "xmlrole.c"
  __retres9 = 55;
# 143 "xmlrole.c"
  goto return_label;
  case_13:
# 145 "xmlrole.c"
  state->handler = & prolog1;
  __CrestLoad(97280, (unsigned long )0, (long long )56);
  __CrestStore(97281, (unsigned long )(& __retres9));
# 146 "xmlrole.c"
  __retres9 = 56;
# 146 "xmlrole.c"
  goto return_label;
  case_14:
  __CrestLoad(97282, (unsigned long )0, (long long )0);
  __CrestStore(97283, (unsigned long )(& __retres9));
# 148 "xmlrole.c"
  __retres9 = 0;
# 148 "xmlrole.c"
  goto return_label;
  case_16:
# 150 "xmlrole.c"
  mem_8 = enc->nameMatchesAscii;
# 150 "xmlrole.c"
  tmp = (*mem_8)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_DOCTYPE);
  __CrestHandleReturn(97285, (long long )tmp);
  __CrestStore(97284, (unsigned long )(& tmp));
  {
  __CrestLoad(97288, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97287, (unsigned long )0, (long long )0);
  __CrestApply2(97286, 13, (long long )(tmp != 0));
# 150 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97289, 63092, 1);

  } else {
    __CrestBranch(97290, 63093, 0);
# 154 "xmlrole.c"
    goto switch_break;
  }
  }
# 155 "xmlrole.c"
  state->handler = & doctype0;
  __CrestLoad(97291, (unsigned long )0, (long long )3);
  __CrestStore(97292, (unsigned long )(& __retres9));
# 156 "xmlrole.c"
  __retres9 = 3;
# 156 "xmlrole.c"
  goto return_label;
  case_29:
# 158 "xmlrole.c"
  state->handler = & error;
  __CrestLoad(97293, (unsigned long )0, (long long )2);
  __CrestStore(97294, (unsigned long )(& __retres9));
# 159 "xmlrole.c"
  __retres9 = 2;
# 159 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97295, (unsigned long )(& tok), (long long )tok);
# 161 "xmlrole.c"
  tmp___0 = common(state, tok);
  __CrestHandleReturn(97297, (long long )tmp___0);
  __CrestStore(97296, (unsigned long )(& tmp___0));
  __CrestLoad(97298, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(97299, (unsigned long )(& __retres9));
# 161 "xmlrole.c"
  __retres9 = tmp___0;
  return_label:
  {
  __CrestLoad(97300, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(97301);
# 127 "xmlrole.c"
  return (__retres9);
  }
}
}
# 164 "xmlrole.c"
static int prolog1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int (*mem_8)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres9 ;

  {
  __CrestCall(97303, 964);
  __CrestStore(97302, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97306, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97305, (unsigned long )0, (long long )15);
  __CrestApply2(97304, 12, (long long )(tok == 15));
# 172 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97307, 63106, 1);
# 172 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97308, 63107, 0);

  }
  }
  {
  __CrestLoad(97311, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97310, (unsigned long )0, (long long )11);
  __CrestApply2(97309, 12, (long long )(tok == 11));
# 174 "xmlrole.c"
  if (tok == 11) {
    __CrestBranch(97312, 63109, 1);
# 174 "xmlrole.c"
    goto case_11;
  } else {
    __CrestBranch(97313, 63110, 0);

  }
  }
  {
  __CrestLoad(97316, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97315, (unsigned long )0, (long long )13);
  __CrestApply2(97314, 12, (long long )(tok == 13));
# 176 "xmlrole.c"
  if (tok == 13) {
    __CrestBranch(97317, 63112, 1);
# 176 "xmlrole.c"
    goto case_13;
  } else {
    __CrestBranch(97318, 63113, 0);

  }
  }
  {
  __CrestLoad(97321, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97320, (unsigned long )0, (long long )14);
  __CrestApply2(97319, 12, (long long )(tok == 14));
# 178 "xmlrole.c"
  if (tok == 14) {
    __CrestBranch(97322, 63115, 1);
# 178 "xmlrole.c"
    goto case_14;
  } else {
    __CrestBranch(97323, 63116, 0);

  }
  }
  {
  __CrestLoad(97326, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97325, (unsigned long )0, (long long )16);
  __CrestApply2(97324, 12, (long long )(tok == 16));
# 180 "xmlrole.c"
  if (tok == 16) {
    __CrestBranch(97327, 63118, 1);
# 180 "xmlrole.c"
    goto case_16;
  } else {
    __CrestBranch(97328, 63119, 0);

  }
  }
  {
  __CrestLoad(97331, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97330, (unsigned long )0, (long long )29);
  __CrestApply2(97329, 12, (long long )(tok == 29));
# 188 "xmlrole.c"
  if (tok == 29) {
    __CrestBranch(97332, 63121, 1);
# 188 "xmlrole.c"
    goto case_29;
  } else {
    __CrestBranch(97333, 63122, 0);

  }
  }
# 171 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97334, (unsigned long )0, (long long )0);
  __CrestStore(97335, (unsigned long )(& __retres9));
# 173 "xmlrole.c"
  __retres9 = 0;
# 173 "xmlrole.c"
  goto return_label;
  case_11:
  __CrestLoad(97336, (unsigned long )0, (long long )55);
  __CrestStore(97337, (unsigned long )(& __retres9));
# 175 "xmlrole.c"
  __retres9 = 55;
# 175 "xmlrole.c"
  goto return_label;
  case_13:
  __CrestLoad(97338, (unsigned long )0, (long long )56);
  __CrestStore(97339, (unsigned long )(& __retres9));
# 177 "xmlrole.c"
  __retres9 = 56;
# 177 "xmlrole.c"
  goto return_label;
  case_14:
  __CrestLoad(97340, (unsigned long )0, (long long )0);
  __CrestStore(97341, (unsigned long )(& __retres9));
# 179 "xmlrole.c"
  __retres9 = 0;
# 179 "xmlrole.c"
  goto return_label;
  case_16:
# 181 "xmlrole.c"
  mem_8 = enc->nameMatchesAscii;
# 181 "xmlrole.c"
  tmp = (*mem_8)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_DOCTYPE);
  __CrestHandleReturn(97343, (long long )tmp);
  __CrestStore(97342, (unsigned long )(& tmp));
  {
  __CrestLoad(97346, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97345, (unsigned long )0, (long long )0);
  __CrestApply2(97344, 13, (long long )(tmp != 0));
# 181 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97347, 63134, 1);

  } else {
    __CrestBranch(97348, 63135, 0);
# 185 "xmlrole.c"
    goto switch_break;
  }
  }
# 186 "xmlrole.c"
  state->handler = & doctype0;
  __CrestLoad(97349, (unsigned long )0, (long long )3);
  __CrestStore(97350, (unsigned long )(& __retres9));
# 187 "xmlrole.c"
  __retres9 = 3;
# 187 "xmlrole.c"
  goto return_label;
  case_29:
# 189 "xmlrole.c"
  state->handler = & error;
  __CrestLoad(97351, (unsigned long )0, (long long )2);
  __CrestStore(97352, (unsigned long )(& __retres9));
# 190 "xmlrole.c"
  __retres9 = 2;
# 190 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97353, (unsigned long )(& tok), (long long )tok);
# 192 "xmlrole.c"
  tmp___0 = common(state, tok);
  __CrestHandleReturn(97355, (long long )tmp___0);
  __CrestStore(97354, (unsigned long )(& tmp___0));
  __CrestLoad(97356, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(97357, (unsigned long )(& __retres9));
# 192 "xmlrole.c"
  __retres9 = tmp___0;
  return_label:
  {
  __CrestLoad(97358, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(97359);
# 164 "xmlrole.c"
  return (__retres9);
  }
}
}
# 195 "xmlrole.c"
static int prolog2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97361, 965);
  __CrestStore(97360, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97364, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97363, (unsigned long )0, (long long )15);
  __CrestApply2(97362, 12, (long long )(tok == 15));
# 203 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97365, 63148, 1);
# 203 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97366, 63149, 0);

  }
  }
  {
  __CrestLoad(97369, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97368, (unsigned long )0, (long long )11);
  __CrestApply2(97367, 12, (long long )(tok == 11));
# 205 "xmlrole.c"
  if (tok == 11) {
    __CrestBranch(97370, 63151, 1);
# 205 "xmlrole.c"
    goto case_11;
  } else {
    __CrestBranch(97371, 63152, 0);

  }
  }
  {
  __CrestLoad(97374, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97373, (unsigned long )0, (long long )13);
  __CrestApply2(97372, 12, (long long )(tok == 13));
# 207 "xmlrole.c"
  if (tok == 13) {
    __CrestBranch(97375, 63154, 1);
# 207 "xmlrole.c"
    goto case_13;
  } else {
    __CrestBranch(97376, 63155, 0);

  }
  }
  {
  __CrestLoad(97379, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97378, (unsigned long )0, (long long )29);
  __CrestApply2(97377, 12, (long long )(tok == 29));
# 209 "xmlrole.c"
  if (tok == 29) {
    __CrestBranch(97380, 63157, 1);
# 209 "xmlrole.c"
    goto case_29;
  } else {
    __CrestBranch(97381, 63158, 0);

  }
  }
# 202 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97382, (unsigned long )0, (long long )0);
  __CrestStore(97383, (unsigned long )(& __retres7));
# 204 "xmlrole.c"
  __retres7 = 0;
# 204 "xmlrole.c"
  goto return_label;
  case_11:
  __CrestLoad(97384, (unsigned long )0, (long long )55);
  __CrestStore(97385, (unsigned long )(& __retres7));
# 206 "xmlrole.c"
  __retres7 = 55;
# 206 "xmlrole.c"
  goto return_label;
  case_13:
  __CrestLoad(97386, (unsigned long )0, (long long )56);
  __CrestStore(97387, (unsigned long )(& __retres7));
# 208 "xmlrole.c"
  __retres7 = 56;
# 208 "xmlrole.c"
  goto return_label;
  case_29:
# 210 "xmlrole.c"
  state->handler = & error;
  __CrestLoad(97388, (unsigned long )0, (long long )2);
  __CrestStore(97389, (unsigned long )(& __retres7));
# 211 "xmlrole.c"
  __retres7 = 2;
# 211 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97390, (unsigned long )(& tok), (long long )tok);
# 213 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97392, (long long )tmp);
  __CrestStore(97391, (unsigned long )(& tmp));
  __CrestLoad(97393, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97394, (unsigned long )(& __retres7));
# 213 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97395, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97396);
# 195 "xmlrole.c"
  return (__retres7);
  }
}
}
# 216 "xmlrole.c"
static int doctype0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97398, 966);
  __CrestStore(97397, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97401, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97400, (unsigned long )0, (long long )15);
  __CrestApply2(97399, 12, (long long )(tok == 15));
# 224 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97402, 63175, 1);
# 224 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97403, 63176, 0);

  }
  }
  {
  __CrestLoad(97406, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97405, (unsigned long )0, (long long )41);
  __CrestApply2(97404, 12, (long long )(tok == 41));
# 227 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(97407, 63178, 1);
# 227 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(97408, 63179, 0);

  }
  }
  {
  __CrestLoad(97411, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97410, (unsigned long )0, (long long )18);
  __CrestApply2(97409, 12, (long long )(tok == 18));
# 227 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97412, 63181, 1);
# 227 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(97413, 63182, 0);

  }
  }
# 223 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97414, (unsigned long )0, (long long )3);
  __CrestStore(97415, (unsigned long )(& __retres7));
# 225 "xmlrole.c"
  __retres7 = 3;
# 225 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 228 "xmlrole.c"
  state->handler = & doctype1;
  __CrestLoad(97416, (unsigned long )0, (long long )4);
  __CrestStore(97417, (unsigned long )(& __retres7));
# 229 "xmlrole.c"
  __retres7 = 4;
# 229 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97418, (unsigned long )(& tok), (long long )tok);
# 231 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97420, (long long )tmp);
  __CrestStore(97419, (unsigned long )(& tmp));
  __CrestLoad(97421, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97422, (unsigned long )(& __retres7));
# 231 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97423, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97424);
# 216 "xmlrole.c"
  return (__retres7);
  }
}
}
# 234 "xmlrole.c"
static int doctype1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(97426, 967);
  __CrestStore(97425, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97429, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97428, (unsigned long )0, (long long )15);
  __CrestApply2(97427, 12, (long long )(tok == 15));
# 242 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97430, 63195, 1);
# 242 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97431, 63196, 0);

  }
  }
  {
  __CrestLoad(97434, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97433, (unsigned long )0, (long long )25);
  __CrestApply2(97432, 12, (long long )(tok == 25));
# 244 "xmlrole.c"
  if (tok == 25) {
    __CrestBranch(97435, 63198, 1);
# 244 "xmlrole.c"
    goto case_25;
  } else {
    __CrestBranch(97436, 63199, 0);

  }
  }
  {
  __CrestLoad(97439, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97438, (unsigned long )0, (long long )17);
  __CrestApply2(97437, 12, (long long )(tok == 17));
# 247 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(97440, 63201, 1);
# 247 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(97441, 63202, 0);

  }
  }
  {
  __CrestLoad(97444, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97443, (unsigned long )0, (long long )18);
  __CrestApply2(97442, 12, (long long )(tok == 18));
# 250 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97445, 63204, 1);
# 250 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97446, 63205, 0);

  }
  }
# 241 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97447, (unsigned long )0, (long long )3);
  __CrestStore(97448, (unsigned long )(& __retres11));
# 243 "xmlrole.c"
  __retres11 = 3;
# 243 "xmlrole.c"
  goto return_label;
  case_25:
# 245 "xmlrole.c"
  state->handler = & internalSubset;
  __CrestLoad(97449, (unsigned long )0, (long long )7);
  __CrestStore(97450, (unsigned long )(& __retres11));
# 246 "xmlrole.c"
  __retres11 = 7;
# 246 "xmlrole.c"
  goto return_label;
  case_17:
# 248 "xmlrole.c"
  state->handler = & prolog2;
  __CrestLoad(97451, (unsigned long )0, (long long )8);
  __CrestStore(97452, (unsigned long )(& __retres11));
# 249 "xmlrole.c"
  __retres11 = 8;
# 249 "xmlrole.c"
  goto return_label;
  case_18:
# 251 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 251 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_SYSTEM);
  __CrestHandleReturn(97454, (long long )tmp);
  __CrestStore(97453, (unsigned long )(& tmp));
  {
  __CrestLoad(97457, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97456, (unsigned long )0, (long long )0);
  __CrestApply2(97455, 13, (long long )(tmp != 0));
# 251 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97458, 63217, 1);
# 252 "xmlrole.c"
    state->handler = & doctype3;
    __CrestLoad(97460, (unsigned long )0, (long long )3);
    __CrestStore(97461, (unsigned long )(& __retres11));
# 253 "xmlrole.c"
    __retres11 = 3;
# 253 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97459, 63220, 0);

  }
  }
# 255 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 255 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_PUBLIC);
  __CrestHandleReturn(97463, (long long )tmp___0);
  __CrestStore(97462, (unsigned long )(& tmp___0));
  {
  __CrestLoad(97466, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(97465, (unsigned long )0, (long long )0);
  __CrestApply2(97464, 13, (long long )(tmp___0 != 0));
# 255 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(97467, 63223, 1);
# 256 "xmlrole.c"
    state->handler = & doctype2;
    __CrestLoad(97469, (unsigned long )0, (long long )3);
    __CrestStore(97470, (unsigned long )(& __retres11));
# 257 "xmlrole.c"
    __retres11 = 3;
# 257 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97468, 63226, 0);

  }
  }
# 259 "xmlrole.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(97471, (unsigned long )(& tok), (long long )tok);
# 261 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(97473, (long long )tmp___1);
  __CrestStore(97472, (unsigned long )(& tmp___1));
  __CrestLoad(97474, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(97475, (unsigned long )(& __retres11));
# 261 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(97476, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(97477);
# 234 "xmlrole.c"
  return (__retres11);
  }
}
}
# 264 "xmlrole.c"
static int doctype2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97479, 968);
  __CrestStore(97478, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97482, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97481, (unsigned long )0, (long long )15);
  __CrestApply2(97480, 12, (long long )(tok == 15));
# 272 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97483, 63234, 1);
# 272 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97484, 63235, 0);

  }
  }
  {
  __CrestLoad(97487, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97486, (unsigned long )0, (long long )27);
  __CrestApply2(97485, 12, (long long )(tok == 27));
# 274 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97488, 63237, 1);
# 274 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97489, 63238, 0);

  }
  }
# 271 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97490, (unsigned long )0, (long long )3);
  __CrestStore(97491, (unsigned long )(& __retres7));
# 273 "xmlrole.c"
  __retres7 = 3;
# 273 "xmlrole.c"
  goto return_label;
  case_27:
# 275 "xmlrole.c"
  state->handler = & doctype3;
  __CrestLoad(97492, (unsigned long )0, (long long )6);
  __CrestStore(97493, (unsigned long )(& __retres7));
# 276 "xmlrole.c"
  __retres7 = 6;
# 276 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97494, (unsigned long )(& tok), (long long )tok);
# 278 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97496, (long long )tmp);
  __CrestStore(97495, (unsigned long )(& tmp));
  __CrestLoad(97497, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97498, (unsigned long )(& __retres7));
# 278 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97499, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97500);
# 264 "xmlrole.c"
  return (__retres7);
  }
}
}
# 281 "xmlrole.c"
static int doctype3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97502, 969);
  __CrestStore(97501, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97505, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97504, (unsigned long )0, (long long )15);
  __CrestApply2(97503, 12, (long long )(tok == 15));
# 289 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97506, 63251, 1);
# 289 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97507, 63252, 0);

  }
  }
  {
  __CrestLoad(97510, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97509, (unsigned long )0, (long long )27);
  __CrestApply2(97508, 12, (long long )(tok == 27));
# 291 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97511, 63254, 1);
# 291 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97512, 63255, 0);

  }
  }
# 288 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97513, (unsigned long )0, (long long )3);
  __CrestStore(97514, (unsigned long )(& __retres7));
# 290 "xmlrole.c"
  __retres7 = 3;
# 290 "xmlrole.c"
  goto return_label;
  case_27:
# 292 "xmlrole.c"
  state->handler = & doctype4;
  __CrestLoad(97515, (unsigned long )0, (long long )5);
  __CrestStore(97516, (unsigned long )(& __retres7));
# 293 "xmlrole.c"
  __retres7 = 5;
# 293 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97517, (unsigned long )(& tok), (long long )tok);
# 295 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97519, (long long )tmp);
  __CrestStore(97518, (unsigned long )(& tmp));
  __CrestLoad(97520, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97521, (unsigned long )(& __retres7));
# 295 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97522, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97523);
# 281 "xmlrole.c"
  return (__retres7);
  }
}
}
# 298 "xmlrole.c"
static int doctype4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97525, 970);
  __CrestStore(97524, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97528, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97527, (unsigned long )0, (long long )15);
  __CrestApply2(97526, 12, (long long )(tok == 15));
# 306 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97529, 63268, 1);
# 306 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97530, 63269, 0);

  }
  }
  {
  __CrestLoad(97533, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97532, (unsigned long )0, (long long )25);
  __CrestApply2(97531, 12, (long long )(tok == 25));
# 308 "xmlrole.c"
  if (tok == 25) {
    __CrestBranch(97534, 63271, 1);
# 308 "xmlrole.c"
    goto case_25;
  } else {
    __CrestBranch(97535, 63272, 0);

  }
  }
  {
  __CrestLoad(97538, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97537, (unsigned long )0, (long long )17);
  __CrestApply2(97536, 12, (long long )(tok == 17));
# 311 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(97539, 63274, 1);
# 311 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(97540, 63275, 0);

  }
  }
# 305 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97541, (unsigned long )0, (long long )3);
  __CrestStore(97542, (unsigned long )(& __retres7));
# 307 "xmlrole.c"
  __retres7 = 3;
# 307 "xmlrole.c"
  goto return_label;
  case_25:
# 309 "xmlrole.c"
  state->handler = & internalSubset;
  __CrestLoad(97543, (unsigned long )0, (long long )7);
  __CrestStore(97544, (unsigned long )(& __retres7));
# 310 "xmlrole.c"
  __retres7 = 7;
# 310 "xmlrole.c"
  goto return_label;
  case_17:
# 312 "xmlrole.c"
  state->handler = & prolog2;
  __CrestLoad(97545, (unsigned long )0, (long long )8);
  __CrestStore(97546, (unsigned long )(& __retres7));
# 313 "xmlrole.c"
  __retres7 = 8;
# 313 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97547, (unsigned long )(& tok), (long long )tok);
# 315 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97549, (long long )tmp);
  __CrestStore(97548, (unsigned long )(& tmp));
  __CrestLoad(97550, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97551, (unsigned long )(& __retres7));
# 315 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97552, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97553);
# 298 "xmlrole.c"
  return (__retres7);
  }
}
}
# 318 "xmlrole.c"
static int doctype5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97555, 971);
  __CrestStore(97554, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97558, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97557, (unsigned long )0, (long long )15);
  __CrestApply2(97556, 12, (long long )(tok == 15));
# 326 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97559, 63291, 1);
# 326 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97560, 63292, 0);

  }
  }
  {
  __CrestLoad(97563, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97562, (unsigned long )0, (long long )17);
  __CrestApply2(97561, 12, (long long )(tok == 17));
# 328 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(97564, 63294, 1);
# 328 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(97565, 63295, 0);

  }
  }
# 325 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97566, (unsigned long )0, (long long )3);
  __CrestStore(97567, (unsigned long )(& __retres7));
# 327 "xmlrole.c"
  __retres7 = 3;
# 327 "xmlrole.c"
  goto return_label;
  case_17:
# 329 "xmlrole.c"
  state->handler = & prolog2;
  __CrestLoad(97568, (unsigned long )0, (long long )8);
  __CrestStore(97569, (unsigned long )(& __retres7));
# 330 "xmlrole.c"
  __retres7 = 8;
# 330 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97570, (unsigned long )(& tok), (long long )tok);
# 332 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97572, (long long )tmp);
  __CrestStore(97571, (unsigned long )(& tmp));
  __CrestLoad(97573, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97574, (unsigned long )(& __retres7));
# 332 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97575, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97576);
# 318 "xmlrole.c"
  return (__retres7);
  }
}
}
# 335 "xmlrole.c"
static int internalSubset(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                          ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int (*mem_11)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_12)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_13)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_14)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres15 ;

  {
  __CrestCall(97578, 972);
  __CrestStore(97577, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97581, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97580, (unsigned long )0, (long long )15);
  __CrestApply2(97579, 12, (long long )(tok == 15));
# 343 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97582, 63308, 1);
# 343 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97583, 63309, 0);

  }
  }
  {
  __CrestLoad(97586, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97585, (unsigned long )0, (long long )16);
  __CrestApply2(97584, 12, (long long )(tok == 16));
# 345 "xmlrole.c"
  if (tok == 16) {
    __CrestBranch(97587, 63311, 1);
# 345 "xmlrole.c"
    goto case_16;
  } else {
    __CrestBranch(97588, 63312, 0);

  }
  }
  {
  __CrestLoad(97591, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97590, (unsigned long )0, (long long )11);
  __CrestApply2(97589, 12, (long long )(tok == 11));
# 375 "xmlrole.c"
  if (tok == 11) {
    __CrestBranch(97592, 63314, 1);
# 375 "xmlrole.c"
    goto case_11;
  } else {
    __CrestBranch(97593, 63315, 0);

  }
  }
  {
  __CrestLoad(97596, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97595, (unsigned long )0, (long long )13);
  __CrestApply2(97594, 12, (long long )(tok == 13));
# 377 "xmlrole.c"
  if (tok == 13) {
    __CrestBranch(97597, 63317, 1);
# 377 "xmlrole.c"
    goto case_13;
  } else {
    __CrestBranch(97598, 63318, 0);

  }
  }
  {
  __CrestLoad(97601, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97600, (unsigned long )0, (long long )28);
  __CrestApply2(97599, 12, (long long )(tok == 28));
# 379 "xmlrole.c"
  if (tok == 28) {
    __CrestBranch(97602, 63320, 1);
# 379 "xmlrole.c"
    goto case_28;
  } else {
    __CrestBranch(97603, 63321, 0);

  }
  }
  {
  __CrestLoad(97606, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97605, (unsigned long )0, (long long )26);
  __CrestApply2(97604, 12, (long long )(tok == 26));
# 381 "xmlrole.c"
  if (tok == 26) {
    __CrestBranch(97607, 63323, 1);
# 381 "xmlrole.c"
    goto case_26;
  } else {
    __CrestBranch(97608, 63324, 0);

  }
  }
  {
  __CrestLoad(97611, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97610, (unsigned long )0, (long long )-4);
  __CrestApply2(97609, 12, (long long )(tok == -4));
# 384 "xmlrole.c"
  if (tok == -4) {
    __CrestBranch(97612, 63326, 1);
# 384 "xmlrole.c"
    goto case_neg_4;
  } else {
    __CrestBranch(97613, 63327, 0);

  }
  }
# 342 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97614, (unsigned long )0, (long long )0);
  __CrestStore(97615, (unsigned long )(& __retres15));
# 344 "xmlrole.c"
  __retres15 = 0;
# 344 "xmlrole.c"
  goto return_label;
  case_16:
# 346 "xmlrole.c"
  mem_11 = enc->nameMatchesAscii;
# 346 "xmlrole.c"
  tmp = (*mem_11)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_ENTITY);
  __CrestHandleReturn(97617, (long long )tmp);
  __CrestStore(97616, (unsigned long )(& tmp));
  {
  __CrestLoad(97620, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97619, (unsigned long )0, (long long )0);
  __CrestApply2(97618, 13, (long long )(tmp != 0));
# 346 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97621, 63333, 1);
# 350 "xmlrole.c"
    state->handler = & entity0;
    __CrestLoad(97623, (unsigned long )0, (long long )11);
    __CrestStore(97624, (unsigned long )(& __retres15));
# 351 "xmlrole.c"
    __retres15 = 11;
# 351 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97622, 63336, 0);

  }
  }
# 353 "xmlrole.c"
  mem_12 = enc->nameMatchesAscii;
# 353 "xmlrole.c"
  tmp___0 = (*mem_12)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_ATTLIST);
  __CrestHandleReturn(97626, (long long )tmp___0);
  __CrestStore(97625, (unsigned long )(& tmp___0));
  {
  __CrestLoad(97629, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(97628, (unsigned long )0, (long long )0);
  __CrestApply2(97627, 13, (long long )(tmp___0 != 0));
# 353 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(97630, 63339, 1);
# 357 "xmlrole.c"
    state->handler = & attlist0;
    __CrestLoad(97632, (unsigned long )0, (long long )33);
    __CrestStore(97633, (unsigned long )(& __retres15));
# 358 "xmlrole.c"
    __retres15 = 33;
# 358 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97631, 63342, 0);

  }
  }
# 360 "xmlrole.c"
  mem_13 = enc->nameMatchesAscii;
# 360 "xmlrole.c"
  tmp___1 = (*mem_13)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_ELEMENT);
  __CrestHandleReturn(97635, (long long )tmp___1);
  __CrestStore(97634, (unsigned long )(& tmp___1));
  {
  __CrestLoad(97638, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(97637, (unsigned long )0, (long long )0);
  __CrestApply2(97636, 13, (long long )(tmp___1 != 0));
# 360 "xmlrole.c"
  if (tmp___1 != 0) {
    __CrestBranch(97639, 63345, 1);
# 364 "xmlrole.c"
    state->handler = & element0;
    __CrestLoad(97641, (unsigned long )0, (long long )39);
    __CrestStore(97642, (unsigned long )(& __retres15));
# 365 "xmlrole.c"
    __retres15 = 39;
# 365 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97640, 63348, 0);

  }
  }
# 367 "xmlrole.c"
  mem_14 = enc->nameMatchesAscii;
# 367 "xmlrole.c"
  tmp___2 = (*mem_14)(enc, ptr + 2 * (int )enc->minBytesPerChar, end, KW_NOTATION);
  __CrestHandleReturn(97644, (long long )tmp___2);
  __CrestStore(97643, (unsigned long )(& tmp___2));
  {
  __CrestLoad(97647, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestLoad(97646, (unsigned long )0, (long long )0);
  __CrestApply2(97645, 13, (long long )(tmp___2 != 0));
# 367 "xmlrole.c"
  if (tmp___2 != 0) {
    __CrestBranch(97648, 63351, 1);
# 371 "xmlrole.c"
    state->handler = & notation0;
    __CrestLoad(97650, (unsigned long )0, (long long )17);
    __CrestStore(97651, (unsigned long )(& __retres15));
# 372 "xmlrole.c"
    __retres15 = 17;
# 372 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97649, 63354, 0);

  }
  }
# 374 "xmlrole.c"
  goto switch_break;
  case_11:
  __CrestLoad(97652, (unsigned long )0, (long long )55);
  __CrestStore(97653, (unsigned long )(& __retres15));
# 376 "xmlrole.c"
  __retres15 = 55;
# 376 "xmlrole.c"
  goto return_label;
  case_13:
  __CrestLoad(97654, (unsigned long )0, (long long )56);
  __CrestStore(97655, (unsigned long )(& __retres15));
# 378 "xmlrole.c"
  __retres15 = 56;
# 378 "xmlrole.c"
  goto return_label;
  case_28:
  __CrestLoad(97656, (unsigned long )0, (long long )60);
  __CrestStore(97657, (unsigned long )(& __retres15));
# 380 "xmlrole.c"
  __retres15 = 60;
# 380 "xmlrole.c"
  goto return_label;
  case_26:
# 382 "xmlrole.c"
  state->handler = & doctype5;
  __CrestLoad(97658, (unsigned long )0, (long long )3);
  __CrestStore(97659, (unsigned long )(& __retres15));
# 383 "xmlrole.c"
  __retres15 = 3;
# 383 "xmlrole.c"
  goto return_label;
  case_neg_4:
  __CrestLoad(97660, (unsigned long )0, (long long )0);
  __CrestStore(97661, (unsigned long )(& __retres15));
# 385 "xmlrole.c"
  __retres15 = 0;
# 385 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97662, (unsigned long )(& tok), (long long )tok);
# 387 "xmlrole.c"
  tmp___3 = common(state, tok);
  __CrestHandleReturn(97664, (long long )tmp___3);
  __CrestStore(97663, (unsigned long )(& tmp___3));
  __CrestLoad(97665, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(97666, (unsigned long )(& __retres15));
# 387 "xmlrole.c"
  __retres15 = tmp___3;
  return_label:
  {
  __CrestLoad(97667, (unsigned long )(& __retres15), (long long )__retres15);
  __CrestReturn(97668);
# 335 "xmlrole.c"
  return (__retres15);
  }
}
}
# 392 "xmlrole.c"
static int externalSubset0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                           ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97670, 973);
  __CrestStore(97669, (unsigned long )(& tok));
# 399 "xmlrole.c"
  state->handler = & externalSubset1;
  {
  __CrestLoad(97673, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97672, (unsigned long )0, (long long )12);
  __CrestApply2(97671, 12, (long long )(tok == 12));
# 400 "xmlrole.c"
  if (tok == 12) {
    __CrestBranch(97674, 63373, 1);
    __CrestLoad(97676, (unsigned long )0, (long long )57);
    __CrestStore(97677, (unsigned long )(& __retres7));
# 401 "xmlrole.c"
    __retres7 = 57;
# 401 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97675, 63375, 0);

  }
  }
  __CrestLoad(97678, (unsigned long )(& tok), (long long )tok);
# 402 "xmlrole.c"
  tmp = externalSubset1(state, tok, ptr, end, enc);
  __CrestHandleReturn(97680, (long long )tmp);
  __CrestStore(97679, (unsigned long )(& tmp));
  __CrestLoad(97681, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97682, (unsigned long )(& __retres7));
# 402 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97683, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97684);
# 392 "xmlrole.c"
  return (__retres7);
  }
}
}
# 405 "xmlrole.c"
static int externalSubset1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                           ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int __retres8 ;

  {
  __CrestCall(97686, 974);
  __CrestStore(97685, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97689, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97688, (unsigned long )0, (long long )33);
  __CrestApply2(97687, 12, (long long )(tok == 33));
# 413 "xmlrole.c"
  if (tok == 33) {
    __CrestBranch(97690, 63381, 1);
# 413 "xmlrole.c"
    goto case_33;
  } else {
    __CrestBranch(97691, 63382, 0);

  }
  }
  {
  __CrestLoad(97694, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97693, (unsigned long )0, (long long )34);
  __CrestApply2(97692, 12, (long long )(tok == 34));
# 416 "xmlrole.c"
  if (tok == 34) {
    __CrestBranch(97695, 63384, 1);
# 416 "xmlrole.c"
    goto case_34;
  } else {
    __CrestBranch(97696, 63385, 0);

  }
  }
  {
  __CrestLoad(97699, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97698, (unsigned long )0, (long long )15);
  __CrestApply2(97697, 12, (long long )(tok == 15));
# 421 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97700, 63387, 1);
# 421 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97701, 63388, 0);

  }
  }
  {
  __CrestLoad(97704, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97703, (unsigned long )0, (long long )26);
  __CrestApply2(97702, 12, (long long )(tok == 26));
# 423 "xmlrole.c"
  if (tok == 26) {
    __CrestBranch(97705, 63390, 1);
# 423 "xmlrole.c"
    goto case_26;
  } else {
    __CrestBranch(97706, 63391, 0);

  }
  }
  {
  __CrestLoad(97709, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97708, (unsigned long )0, (long long )-4);
  __CrestApply2(97707, 12, (long long )(tok == -4));
# 425 "xmlrole.c"
  if (tok == -4) {
    __CrestBranch(97710, 63393, 1);
# 425 "xmlrole.c"
    goto case_neg_4;
  } else {
    __CrestBranch(97711, 63394, 0);

  }
  }
# 429 "xmlrole.c"
  goto switch_default;
  case_33:
# 414 "xmlrole.c"
  state->handler = & condSect0;
  __CrestLoad(97712, (unsigned long )0, (long long )0);
  __CrestStore(97713, (unsigned long )(& __retres8));
# 415 "xmlrole.c"
  __retres8 = 0;
# 415 "xmlrole.c"
  goto return_label;
  case_34:
  {
  __CrestLoad(97716, (unsigned long )(& state->includeLevel), (long long )state->includeLevel);
  __CrestLoad(97715, (unsigned long )0, (long long )0U);
  __CrestApply2(97714, 12, (long long )(state->includeLevel == 0U));
# 417 "xmlrole.c"
  if (state->includeLevel == 0U) {
    __CrestBranch(97717, 63400, 1);
# 418 "xmlrole.c"
    goto switch_break;
  } else {
    __CrestBranch(97718, 63401, 0);

  }
  }
  __CrestLoad(97721, (unsigned long )(& state->includeLevel), (long long )state->includeLevel);
  __CrestLoad(97720, (unsigned long )0, (long long )1U);
  __CrestApply2(97719, 1, (long long )(state->includeLevel - 1U));
  __CrestStore(97722, (unsigned long )(& state->includeLevel));
# 419 "xmlrole.c"
  (state->includeLevel) --;
  __CrestLoad(97723, (unsigned long )0, (long long )0);
  __CrestStore(97724, (unsigned long )(& __retres8));
# 420 "xmlrole.c"
  __retres8 = 0;
# 420 "xmlrole.c"
  goto return_label;
  case_15:
  __CrestLoad(97725, (unsigned long )0, (long long )0);
  __CrestStore(97726, (unsigned long )(& __retres8));
# 422 "xmlrole.c"
  __retres8 = 0;
# 422 "xmlrole.c"
  goto return_label;
  case_26:
# 424 "xmlrole.c"
  goto switch_break;
  case_neg_4:
  {
  __CrestLoad(97729, (unsigned long )(& state->includeLevel), (long long )state->includeLevel);
  __CrestLoad(97728, (unsigned long )0, (long long )0);
  __CrestApply2(97727, 13, (long long )(state->includeLevel != 0));
# 426 "xmlrole.c"
  if (state->includeLevel != 0) {
    __CrestBranch(97730, 63409, 1);
# 427 "xmlrole.c"
    goto switch_break;
  } else {
    __CrestBranch(97731, 63410, 0);

  }
  }
  __CrestLoad(97732, (unsigned long )0, (long long )0);
  __CrestStore(97733, (unsigned long )(& __retres8));
# 428 "xmlrole.c"
  __retres8 = 0;
# 428 "xmlrole.c"
  goto return_label;
  switch_default:
  __CrestLoad(97734, (unsigned long )(& tok), (long long )tok);
# 430 "xmlrole.c"
  tmp = internalSubset(state, tok, ptr, end, enc);
  __CrestHandleReturn(97736, (long long )tmp);
  __CrestStore(97735, (unsigned long )(& tmp));
  __CrestLoad(97737, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97738, (unsigned long )(& __retres8));
# 430 "xmlrole.c"
  __retres8 = tmp;
# 430 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97739, (unsigned long )(& tok), (long long )tok);
# 432 "xmlrole.c"
  tmp___0 = common(state, tok);
  __CrestHandleReturn(97741, (long long )tmp___0);
  __CrestStore(97740, (unsigned long )(& tmp___0));
  __CrestLoad(97742, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(97743, (unsigned long )(& __retres8));
# 432 "xmlrole.c"
  __retres8 = tmp___0;
  return_label:
  {
  __CrestLoad(97744, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(97745);
# 405 "xmlrole.c"
  return (__retres8);
  }
}
}
# 437 "xmlrole.c"
static int entity0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97747, 975);
  __CrestStore(97746, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97750, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97749, (unsigned long )0, (long long )15);
  __CrestApply2(97748, 12, (long long )(tok == 15));
# 445 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97751, 63422, 1);
# 445 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97752, 63423, 0);

  }
  }
  {
  __CrestLoad(97755, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97754, (unsigned long )0, (long long )22);
  __CrestApply2(97753, 12, (long long )(tok == 22));
# 447 "xmlrole.c"
  if (tok == 22) {
    __CrestBranch(97756, 63425, 1);
# 447 "xmlrole.c"
    goto case_22;
  } else {
    __CrestBranch(97757, 63426, 0);

  }
  }
  {
  __CrestLoad(97760, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97759, (unsigned long )0, (long long )18);
  __CrestApply2(97758, 12, (long long )(tok == 18));
# 450 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97761, 63428, 1);
# 450 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97762, 63429, 0);

  }
  }
# 444 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97763, (unsigned long )0, (long long )11);
  __CrestStore(97764, (unsigned long )(& __retres7));
# 446 "xmlrole.c"
  __retres7 = 11;
# 446 "xmlrole.c"
  goto return_label;
  case_22:
# 448 "xmlrole.c"
  state->handler = & entity1;
  __CrestLoad(97765, (unsigned long )0, (long long )11);
  __CrestStore(97766, (unsigned long )(& __retres7));
# 449 "xmlrole.c"
  __retres7 = 11;
# 449 "xmlrole.c"
  goto return_label;
  case_18:
# 451 "xmlrole.c"
  state->handler = & entity2;
  __CrestLoad(97767, (unsigned long )0, (long long )9);
  __CrestStore(97768, (unsigned long )(& __retres7));
# 452 "xmlrole.c"
  __retres7 = 9;
# 452 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97769, (unsigned long )(& tok), (long long )tok);
# 454 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97771, (long long )tmp);
  __CrestStore(97770, (unsigned long )(& tmp));
  __CrestLoad(97772, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97773, (unsigned long )(& __retres7));
# 454 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97774, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97775);
# 437 "xmlrole.c"
  return (__retres7);
  }
}
}
# 457 "xmlrole.c"
static int entity1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97777, 976);
  __CrestStore(97776, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97780, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97779, (unsigned long )0, (long long )15);
  __CrestApply2(97778, 12, (long long )(tok == 15));
# 465 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97781, 63445, 1);
# 465 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97782, 63446, 0);

  }
  }
  {
  __CrestLoad(97785, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97784, (unsigned long )0, (long long )18);
  __CrestApply2(97783, 12, (long long )(tok == 18));
# 467 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97786, 63448, 1);
# 467 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97787, 63449, 0);

  }
  }
# 464 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97788, (unsigned long )0, (long long )11);
  __CrestStore(97789, (unsigned long )(& __retres7));
# 466 "xmlrole.c"
  __retres7 = 11;
# 466 "xmlrole.c"
  goto return_label;
  case_18:
# 468 "xmlrole.c"
  state->handler = & entity7;
  __CrestLoad(97790, (unsigned long )0, (long long )10);
  __CrestStore(97791, (unsigned long )(& __retres7));
# 469 "xmlrole.c"
  __retres7 = 10;
# 469 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97792, (unsigned long )(& tok), (long long )tok);
# 471 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97794, (long long )tmp);
  __CrestStore(97793, (unsigned long )(& tmp));
  __CrestLoad(97795, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97796, (unsigned long )(& __retres7));
# 471 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97797, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97798);
# 457 "xmlrole.c"
  return (__retres7);
  }
}
}
# 474 "xmlrole.c"
static int entity2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(97800, 977);
  __CrestStore(97799, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97803, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97802, (unsigned long )0, (long long )15);
  __CrestApply2(97801, 12, (long long )(tok == 15));
# 482 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97804, 63462, 1);
# 482 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97805, 63463, 0);

  }
  }
  {
  __CrestLoad(97808, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97807, (unsigned long )0, (long long )18);
  __CrestApply2(97806, 12, (long long )(tok == 18));
# 484 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97809, 63465, 1);
# 484 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97810, 63466, 0);

  }
  }
  {
  __CrestLoad(97813, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97812, (unsigned long )0, (long long )27);
  __CrestApply2(97811, 12, (long long )(tok == 27));
# 494 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97814, 63468, 1);
# 494 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97815, 63469, 0);

  }
  }
# 481 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97816, (unsigned long )0, (long long )11);
  __CrestStore(97817, (unsigned long )(& __retres11));
# 483 "xmlrole.c"
  __retres11 = 11;
# 483 "xmlrole.c"
  goto return_label;
  case_18:
# 485 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 485 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_SYSTEM);
  __CrestHandleReturn(97819, (long long )tmp);
  __CrestStore(97818, (unsigned long )(& tmp));
  {
  __CrestLoad(97822, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97821, (unsigned long )0, (long long )0);
  __CrestApply2(97820, 13, (long long )(tmp != 0));
# 485 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97823, 63475, 1);
# 486 "xmlrole.c"
    state->handler = & entity4;
    __CrestLoad(97825, (unsigned long )0, (long long )11);
    __CrestStore(97826, (unsigned long )(& __retres11));
# 487 "xmlrole.c"
    __retres11 = 11;
# 487 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97824, 63478, 0);

  }
  }
# 489 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 489 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_PUBLIC);
  __CrestHandleReturn(97828, (long long )tmp___0);
  __CrestStore(97827, (unsigned long )(& tmp___0));
  {
  __CrestLoad(97831, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(97830, (unsigned long )0, (long long )0);
  __CrestApply2(97829, 13, (long long )(tmp___0 != 0));
# 489 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(97832, 63481, 1);
# 490 "xmlrole.c"
    state->handler = & entity3;
    __CrestLoad(97834, (unsigned long )0, (long long )11);
    __CrestStore(97835, (unsigned long )(& __retres11));
# 491 "xmlrole.c"
    __retres11 = 11;
# 491 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97833, 63484, 0);

  }
  }
# 493 "xmlrole.c"
  goto switch_break;
  case_27:
# 495 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(97836, (unsigned long )0, (long long )11);
  __CrestStore(97837, (unsigned long )(& state->role_none));
# 496 "xmlrole.c"
  state->role_none = 11;
  __CrestLoad(97838, (unsigned long )0, (long long )12);
  __CrestStore(97839, (unsigned long )(& __retres11));
# 497 "xmlrole.c"
  __retres11 = 12;
# 497 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97840, (unsigned long )(& tok), (long long )tok);
# 499 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(97842, (long long )tmp___1);
  __CrestStore(97841, (unsigned long )(& tmp___1));
  __CrestLoad(97843, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(97844, (unsigned long )(& __retres11));
# 499 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(97845, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(97846);
# 474 "xmlrole.c"
  return (__retres11);
  }
}
}
# 502 "xmlrole.c"
static int entity3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97848, 978);
  __CrestStore(97847, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97851, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97850, (unsigned long )0, (long long )15);
  __CrestApply2(97849, 12, (long long )(tok == 15));
# 510 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97852, 63495, 1);
# 510 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97853, 63496, 0);

  }
  }
  {
  __CrestLoad(97856, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97855, (unsigned long )0, (long long )27);
  __CrestApply2(97854, 12, (long long )(tok == 27));
# 512 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97857, 63498, 1);
# 512 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97858, 63499, 0);

  }
  }
# 509 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97859, (unsigned long )0, (long long )11);
  __CrestStore(97860, (unsigned long )(& __retres7));
# 511 "xmlrole.c"
  __retres7 = 11;
# 511 "xmlrole.c"
  goto return_label;
  case_27:
# 513 "xmlrole.c"
  state->handler = & entity4;
  __CrestLoad(97861, (unsigned long )0, (long long )14);
  __CrestStore(97862, (unsigned long )(& __retres7));
# 514 "xmlrole.c"
  __retres7 = 14;
# 514 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97863, (unsigned long )(& tok), (long long )tok);
# 516 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97865, (long long )tmp);
  __CrestStore(97864, (unsigned long )(& tmp));
  __CrestLoad(97866, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97867, (unsigned long )(& __retres7));
# 516 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97868, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97869);
# 502 "xmlrole.c"
  return (__retres7);
  }
}
}
# 519 "xmlrole.c"
static int entity4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97871, 979);
  __CrestStore(97870, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97874, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97873, (unsigned long )0, (long long )15);
  __CrestApply2(97872, 12, (long long )(tok == 15));
# 527 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97875, 63512, 1);
# 527 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97876, 63513, 0);

  }
  }
  {
  __CrestLoad(97879, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97878, (unsigned long )0, (long long )27);
  __CrestApply2(97877, 12, (long long )(tok == 27));
# 529 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97880, 63515, 1);
# 529 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97881, 63516, 0);

  }
  }
# 526 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97882, (unsigned long )0, (long long )11);
  __CrestStore(97883, (unsigned long )(& __retres7));
# 528 "xmlrole.c"
  __retres7 = 11;
# 528 "xmlrole.c"
  goto return_label;
  case_27:
# 530 "xmlrole.c"
  state->handler = & entity5;
  __CrestLoad(97884, (unsigned long )0, (long long )13);
  __CrestStore(97885, (unsigned long )(& __retres7));
# 531 "xmlrole.c"
  __retres7 = 13;
# 531 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97886, (unsigned long )(& tok), (long long )tok);
# 533 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97888, (long long )tmp);
  __CrestStore(97887, (unsigned long )(& tmp));
  __CrestLoad(97889, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97890, (unsigned long )(& __retres7));
# 533 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97891, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97892);
# 519 "xmlrole.c"
  return (__retres7);
  }
}
}
# 536 "xmlrole.c"
static int entity5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int (*mem_8)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres9 ;

  {
  __CrestCall(97894, 980);
  __CrestStore(97893, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97897, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97896, (unsigned long )0, (long long )15);
  __CrestApply2(97895, 12, (long long )(tok == 15));
# 544 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97898, 63529, 1);
# 544 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97899, 63530, 0);

  }
  }
  {
  __CrestLoad(97902, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97901, (unsigned long )0, (long long )17);
  __CrestApply2(97900, 12, (long long )(tok == 17));
# 546 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(97903, 63532, 1);
# 546 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(97904, 63533, 0);

  }
  }
  {
  __CrestLoad(97907, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97906, (unsigned long )0, (long long )18);
  __CrestApply2(97905, 12, (long long )(tok == 18));
# 549 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97908, 63535, 1);
# 549 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97909, 63536, 0);

  }
  }
# 543 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97910, (unsigned long )0, (long long )11);
  __CrestStore(97911, (unsigned long )(& __retres9));
# 545 "xmlrole.c"
  __retres9 = 11;
# 545 "xmlrole.c"
  goto return_label;
  case_17:
  {
  __CrestLoad(97914, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(97913, (unsigned long )0, (long long )0);
  __CrestApply2(97912, 13, (long long )(state->documentEntity != 0));
# 547 "xmlrole.c"
  if (state->documentEntity != 0) {
    __CrestBranch(97915, 63541, 1);
# 547 "xmlrole.c"
    state->handler = & internalSubset;
  } else {
    __CrestBranch(97916, 63542, 0);
# 547 "xmlrole.c"
    state->handler = & externalSubset1;
  }
  }
  __CrestLoad(97917, (unsigned long )0, (long long )15);
  __CrestStore(97918, (unsigned long )(& __retres9));
# 548 "xmlrole.c"
  __retres9 = 15;
# 548 "xmlrole.c"
  goto return_label;
  case_18:
# 550 "xmlrole.c"
  mem_8 = enc->nameMatchesAscii;
# 550 "xmlrole.c"
  tmp = (*mem_8)(enc, ptr, end, KW_NDATA);
  __CrestHandleReturn(97920, (long long )tmp);
  __CrestStore(97919, (unsigned long )(& tmp));
  {
  __CrestLoad(97923, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97922, (unsigned long )0, (long long )0);
  __CrestApply2(97921, 13, (long long )(tmp != 0));
# 550 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97924, 63547, 1);
# 551 "xmlrole.c"
    state->handler = & entity6;
    __CrestLoad(97926, (unsigned long )0, (long long )11);
    __CrestStore(97927, (unsigned long )(& __retres9));
# 552 "xmlrole.c"
    __retres9 = 11;
# 552 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97925, 63550, 0);

  }
  }
# 554 "xmlrole.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(97928, (unsigned long )(& tok), (long long )tok);
# 556 "xmlrole.c"
  tmp___0 = common(state, tok);
  __CrestHandleReturn(97930, (long long )tmp___0);
  __CrestStore(97929, (unsigned long )(& tmp___0));
  __CrestLoad(97931, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(97932, (unsigned long )(& __retres9));
# 556 "xmlrole.c"
  __retres9 = tmp___0;
  return_label:
  {
  __CrestLoad(97933, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(97934);
# 536 "xmlrole.c"
  return (__retres9);
  }
}
}
# 559 "xmlrole.c"
static int entity6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(97936, 981);
  __CrestStore(97935, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97939, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97938, (unsigned long )0, (long long )15);
  __CrestApply2(97937, 12, (long long )(tok == 15));
# 567 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97940, 63558, 1);
# 567 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97941, 63559, 0);

  }
  }
  {
  __CrestLoad(97944, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97943, (unsigned long )0, (long long )18);
  __CrestApply2(97942, 12, (long long )(tok == 18));
# 569 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97945, 63561, 1);
# 569 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97946, 63562, 0);

  }
  }
# 566 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97947, (unsigned long )0, (long long )11);
  __CrestStore(97948, (unsigned long )(& __retres7));
# 568 "xmlrole.c"
  __retres7 = 11;
# 568 "xmlrole.c"
  goto return_label;
  case_18:
# 570 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(97949, (unsigned long )0, (long long )11);
  __CrestStore(97950, (unsigned long )(& state->role_none));
# 571 "xmlrole.c"
  state->role_none = 11;
  __CrestLoad(97951, (unsigned long )0, (long long )16);
  __CrestStore(97952, (unsigned long )(& __retres7));
# 572 "xmlrole.c"
  __retres7 = 16;
# 572 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(97953, (unsigned long )(& tok), (long long )tok);
# 574 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(97955, (long long )tmp);
  __CrestStore(97954, (unsigned long )(& tmp));
  __CrestLoad(97956, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(97957, (unsigned long )(& __retres7));
# 574 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(97958, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(97959);
# 559 "xmlrole.c"
  return (__retres7);
  }
}
}
# 577 "xmlrole.c"
static int entity7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(97961, 982);
  __CrestStore(97960, (unsigned long )(& tok));
  {
  {
  __CrestLoad(97964, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97963, (unsigned long )0, (long long )15);
  __CrestApply2(97962, 12, (long long )(tok == 15));
# 585 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(97965, 63575, 1);
# 585 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(97966, 63576, 0);

  }
  }
  {
  __CrestLoad(97969, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97968, (unsigned long )0, (long long )18);
  __CrestApply2(97967, 12, (long long )(tok == 18));
# 587 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(97970, 63578, 1);
# 587 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(97971, 63579, 0);

  }
  }
  {
  __CrestLoad(97974, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(97973, (unsigned long )0, (long long )27);
  __CrestApply2(97972, 12, (long long )(tok == 27));
# 597 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(97975, 63581, 1);
# 597 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(97976, 63582, 0);

  }
  }
# 584 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(97977, (unsigned long )0, (long long )11);
  __CrestStore(97978, (unsigned long )(& __retres11));
# 586 "xmlrole.c"
  __retres11 = 11;
# 586 "xmlrole.c"
  goto return_label;
  case_18:
# 588 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 588 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_SYSTEM);
  __CrestHandleReturn(97980, (long long )tmp);
  __CrestStore(97979, (unsigned long )(& tmp));
  {
  __CrestLoad(97983, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(97982, (unsigned long )0, (long long )0);
  __CrestApply2(97981, 13, (long long )(tmp != 0));
# 588 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(97984, 63588, 1);
# 589 "xmlrole.c"
    state->handler = & entity9;
    __CrestLoad(97986, (unsigned long )0, (long long )11);
    __CrestStore(97987, (unsigned long )(& __retres11));
# 590 "xmlrole.c"
    __retres11 = 11;
# 590 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97985, 63591, 0);

  }
  }
# 592 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 592 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_PUBLIC);
  __CrestHandleReturn(97989, (long long )tmp___0);
  __CrestStore(97988, (unsigned long )(& tmp___0));
  {
  __CrestLoad(97992, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(97991, (unsigned long )0, (long long )0);
  __CrestApply2(97990, 13, (long long )(tmp___0 != 0));
# 592 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(97993, 63594, 1);
# 593 "xmlrole.c"
    state->handler = & entity8;
    __CrestLoad(97995, (unsigned long )0, (long long )11);
    __CrestStore(97996, (unsigned long )(& __retres11));
# 594 "xmlrole.c"
    __retres11 = 11;
# 594 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(97994, 63597, 0);

  }
  }
# 596 "xmlrole.c"
  goto switch_break;
  case_27:
# 598 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(97997, (unsigned long )0, (long long )11);
  __CrestStore(97998, (unsigned long )(& state->role_none));
# 599 "xmlrole.c"
  state->role_none = 11;
  __CrestLoad(97999, (unsigned long )0, (long long )12);
  __CrestStore(98000, (unsigned long )(& __retres11));
# 600 "xmlrole.c"
  __retres11 = 12;
# 600 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98001, (unsigned long )(& tok), (long long )tok);
# 602 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(98003, (long long )tmp___1);
  __CrestStore(98002, (unsigned long )(& tmp___1));
  __CrestLoad(98004, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(98005, (unsigned long )(& __retres11));
# 602 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(98006, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(98007);
# 577 "xmlrole.c"
  return (__retres11);
  }
}
}
# 605 "xmlrole.c"
static int entity8(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98009, 983);
  __CrestStore(98008, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98012, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98011, (unsigned long )0, (long long )15);
  __CrestApply2(98010, 12, (long long )(tok == 15));
# 613 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98013, 63608, 1);
# 613 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98014, 63609, 0);

  }
  }
  {
  __CrestLoad(98017, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98016, (unsigned long )0, (long long )27);
  __CrestApply2(98015, 12, (long long )(tok == 27));
# 615 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98018, 63611, 1);
# 615 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98019, 63612, 0);

  }
  }
# 612 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98020, (unsigned long )0, (long long )11);
  __CrestStore(98021, (unsigned long )(& __retres7));
# 614 "xmlrole.c"
  __retres7 = 11;
# 614 "xmlrole.c"
  goto return_label;
  case_27:
# 616 "xmlrole.c"
  state->handler = & entity9;
  __CrestLoad(98022, (unsigned long )0, (long long )14);
  __CrestStore(98023, (unsigned long )(& __retres7));
# 617 "xmlrole.c"
  __retres7 = 14;
# 617 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98024, (unsigned long )(& tok), (long long )tok);
# 619 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98026, (long long )tmp);
  __CrestStore(98025, (unsigned long )(& tmp));
  __CrestLoad(98027, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98028, (unsigned long )(& __retres7));
# 619 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98029, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98030);
# 605 "xmlrole.c"
  return (__retres7);
  }
}
}
# 622 "xmlrole.c"
static int entity9(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                   ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98032, 984);
  __CrestStore(98031, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98035, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98034, (unsigned long )0, (long long )15);
  __CrestApply2(98033, 12, (long long )(tok == 15));
# 630 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98036, 63625, 1);
# 630 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98037, 63626, 0);

  }
  }
  {
  __CrestLoad(98040, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98039, (unsigned long )0, (long long )27);
  __CrestApply2(98038, 12, (long long )(tok == 27));
# 632 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98041, 63628, 1);
# 632 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98042, 63629, 0);

  }
  }
# 629 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98043, (unsigned long )0, (long long )11);
  __CrestStore(98044, (unsigned long )(& __retres7));
# 631 "xmlrole.c"
  __retres7 = 11;
# 631 "xmlrole.c"
  goto return_label;
  case_27:
# 633 "xmlrole.c"
  state->handler = & entity10;
  __CrestLoad(98045, (unsigned long )0, (long long )13);
  __CrestStore(98046, (unsigned long )(& __retres7));
# 634 "xmlrole.c"
  __retres7 = 13;
# 634 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98047, (unsigned long )(& tok), (long long )tok);
# 636 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98049, (long long )tmp);
  __CrestStore(98048, (unsigned long )(& tmp));
  __CrestLoad(98050, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98051, (unsigned long )(& __retres7));
# 636 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98052, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98053);
# 622 "xmlrole.c"
  return (__retres7);
  }
}
}
# 639 "xmlrole.c"
static int entity10(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98055, 985);
  __CrestStore(98054, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98058, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98057, (unsigned long )0, (long long )15);
  __CrestApply2(98056, 12, (long long )(tok == 15));
# 647 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98059, 63642, 1);
# 647 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98060, 63643, 0);

  }
  }
  {
  __CrestLoad(98063, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98062, (unsigned long )0, (long long )17);
  __CrestApply2(98061, 12, (long long )(tok == 17));
# 649 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(98064, 63645, 1);
# 649 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(98065, 63646, 0);

  }
  }
# 646 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98066, (unsigned long )0, (long long )11);
  __CrestStore(98067, (unsigned long )(& __retres7));
# 648 "xmlrole.c"
  __retres7 = 11;
# 648 "xmlrole.c"
  goto return_label;
  case_17:
  {
  __CrestLoad(98070, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(98069, (unsigned long )0, (long long )0);
  __CrestApply2(98068, 13, (long long )(state->documentEntity != 0));
# 650 "xmlrole.c"
  if (state->documentEntity != 0) {
    __CrestBranch(98071, 63651, 1);
# 650 "xmlrole.c"
    state->handler = & internalSubset;
  } else {
    __CrestBranch(98072, 63652, 0);
# 650 "xmlrole.c"
    state->handler = & externalSubset1;
  }
  }
  __CrestLoad(98073, (unsigned long )0, (long long )15);
  __CrestStore(98074, (unsigned long )(& __retres7));
# 651 "xmlrole.c"
  __retres7 = 15;
# 651 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98075, (unsigned long )(& tok), (long long )tok);
# 653 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98077, (long long )tmp);
  __CrestStore(98076, (unsigned long )(& tmp));
  __CrestLoad(98078, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98079, (unsigned long )(& __retres7));
# 653 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98080, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98081);
# 639 "xmlrole.c"
  return (__retres7);
  }
}
}
# 656 "xmlrole.c"
static int notation0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98083, 986);
  __CrestStore(98082, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98086, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98085, (unsigned long )0, (long long )15);
  __CrestApply2(98084, 12, (long long )(tok == 15));
# 664 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98087, 63661, 1);
# 664 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98088, 63662, 0);

  }
  }
  {
  __CrestLoad(98091, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98090, (unsigned long )0, (long long )18);
  __CrestApply2(98089, 12, (long long )(tok == 18));
# 666 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98092, 63664, 1);
# 666 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98093, 63665, 0);

  }
  }
# 663 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98094, (unsigned long )0, (long long )17);
  __CrestStore(98095, (unsigned long )(& __retres7));
# 665 "xmlrole.c"
  __retres7 = 17;
# 665 "xmlrole.c"
  goto return_label;
  case_18:
# 667 "xmlrole.c"
  state->handler = & notation1;
  __CrestLoad(98096, (unsigned long )0, (long long )18);
  __CrestStore(98097, (unsigned long )(& __retres7));
# 668 "xmlrole.c"
  __retres7 = 18;
# 668 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98098, (unsigned long )(& tok), (long long )tok);
# 670 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98100, (long long )tmp);
  __CrestStore(98099, (unsigned long )(& tmp));
  __CrestLoad(98101, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98102, (unsigned long )(& __retres7));
# 670 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98103, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98104);
# 656 "xmlrole.c"
  return (__retres7);
  }
}
}
# 673 "xmlrole.c"
static int notation1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(98106, 987);
  __CrestStore(98105, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98109, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98108, (unsigned long )0, (long long )15);
  __CrestApply2(98107, 12, (long long )(tok == 15));
# 681 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98110, 63678, 1);
# 681 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98111, 63679, 0);

  }
  }
  {
  __CrestLoad(98114, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98113, (unsigned long )0, (long long )18);
  __CrestApply2(98112, 12, (long long )(tok == 18));
# 683 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98115, 63681, 1);
# 683 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98116, 63682, 0);

  }
  }
# 680 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98117, (unsigned long )0, (long long )17);
  __CrestStore(98118, (unsigned long )(& __retres11));
# 682 "xmlrole.c"
  __retres11 = 17;
# 682 "xmlrole.c"
  goto return_label;
  case_18:
# 684 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 684 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_SYSTEM);
  __CrestHandleReturn(98120, (long long )tmp);
  __CrestStore(98119, (unsigned long )(& tmp));
  {
  __CrestLoad(98123, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(98122, (unsigned long )0, (long long )0);
  __CrestApply2(98121, 13, (long long )(tmp != 0));
# 684 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(98124, 63688, 1);
# 685 "xmlrole.c"
    state->handler = & notation3;
    __CrestLoad(98126, (unsigned long )0, (long long )17);
    __CrestStore(98127, (unsigned long )(& __retres11));
# 686 "xmlrole.c"
    __retres11 = 17;
# 686 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98125, 63691, 0);

  }
  }
# 688 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 688 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_PUBLIC);
  __CrestHandleReturn(98129, (long long )tmp___0);
  __CrestStore(98128, (unsigned long )(& tmp___0));
  {
  __CrestLoad(98132, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(98131, (unsigned long )0, (long long )0);
  __CrestApply2(98130, 13, (long long )(tmp___0 != 0));
# 688 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(98133, 63694, 1);
# 689 "xmlrole.c"
    state->handler = & notation2;
    __CrestLoad(98135, (unsigned long )0, (long long )17);
    __CrestStore(98136, (unsigned long )(& __retres11));
# 690 "xmlrole.c"
    __retres11 = 17;
# 690 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98134, 63697, 0);

  }
  }
# 692 "xmlrole.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(98137, (unsigned long )(& tok), (long long )tok);
# 694 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(98139, (long long )tmp___1);
  __CrestStore(98138, (unsigned long )(& tmp___1));
  __CrestLoad(98140, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(98141, (unsigned long )(& __retres11));
# 694 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(98142, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(98143);
# 673 "xmlrole.c"
  return (__retres11);
  }
}
}
# 697 "xmlrole.c"
static int notation2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98145, 988);
  __CrestStore(98144, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98148, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98147, (unsigned long )0, (long long )15);
  __CrestApply2(98146, 12, (long long )(tok == 15));
# 705 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98149, 63705, 1);
# 705 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98150, 63706, 0);

  }
  }
  {
  __CrestLoad(98153, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98152, (unsigned long )0, (long long )27);
  __CrestApply2(98151, 12, (long long )(tok == 27));
# 707 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98154, 63708, 1);
# 707 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98155, 63709, 0);

  }
  }
# 704 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98156, (unsigned long )0, (long long )17);
  __CrestStore(98157, (unsigned long )(& __retres7));
# 706 "xmlrole.c"
  __retres7 = 17;
# 706 "xmlrole.c"
  goto return_label;
  case_27:
# 708 "xmlrole.c"
  state->handler = & notation4;
  __CrestLoad(98158, (unsigned long )0, (long long )21);
  __CrestStore(98159, (unsigned long )(& __retres7));
# 709 "xmlrole.c"
  __retres7 = 21;
# 709 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98160, (unsigned long )(& tok), (long long )tok);
# 711 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98162, (long long )tmp);
  __CrestStore(98161, (unsigned long )(& tmp));
  __CrestLoad(98163, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98164, (unsigned long )(& __retres7));
# 711 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98165, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98166);
# 697 "xmlrole.c"
  return (__retres7);
  }
}
}
# 714 "xmlrole.c"
static int notation3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98168, 989);
  __CrestStore(98167, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98171, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98170, (unsigned long )0, (long long )15);
  __CrestApply2(98169, 12, (long long )(tok == 15));
# 722 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98172, 63722, 1);
# 722 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98173, 63723, 0);

  }
  }
  {
  __CrestLoad(98176, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98175, (unsigned long )0, (long long )27);
  __CrestApply2(98174, 12, (long long )(tok == 27));
# 724 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98177, 63725, 1);
# 724 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98178, 63726, 0);

  }
  }
# 721 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98179, (unsigned long )0, (long long )17);
  __CrestStore(98180, (unsigned long )(& __retres7));
# 723 "xmlrole.c"
  __retres7 = 17;
# 723 "xmlrole.c"
  goto return_label;
  case_27:
# 725 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(98181, (unsigned long )0, (long long )17);
  __CrestStore(98182, (unsigned long )(& state->role_none));
# 726 "xmlrole.c"
  state->role_none = 17;
  __CrestLoad(98183, (unsigned long )0, (long long )19);
  __CrestStore(98184, (unsigned long )(& __retres7));
# 727 "xmlrole.c"
  __retres7 = 19;
# 727 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98185, (unsigned long )(& tok), (long long )tok);
# 729 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98187, (long long )tmp);
  __CrestStore(98186, (unsigned long )(& tmp));
  __CrestLoad(98188, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98189, (unsigned long )(& __retres7));
# 729 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98190, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98191);
# 714 "xmlrole.c"
  return (__retres7);
  }
}
}
# 732 "xmlrole.c"
static int notation4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98193, 990);
  __CrestStore(98192, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98196, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98195, (unsigned long )0, (long long )15);
  __CrestApply2(98194, 12, (long long )(tok == 15));
# 740 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98197, 63739, 1);
# 740 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98198, 63740, 0);

  }
  }
  {
  __CrestLoad(98201, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98200, (unsigned long )0, (long long )27);
  __CrestApply2(98199, 12, (long long )(tok == 27));
# 742 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98202, 63742, 1);
# 742 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98203, 63743, 0);

  }
  }
  {
  __CrestLoad(98206, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98205, (unsigned long )0, (long long )17);
  __CrestApply2(98204, 12, (long long )(tok == 17));
# 746 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(98207, 63745, 1);
# 746 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(98208, 63746, 0);

  }
  }
# 739 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98209, (unsigned long )0, (long long )17);
  __CrestStore(98210, (unsigned long )(& __retres7));
# 741 "xmlrole.c"
  __retres7 = 17;
# 741 "xmlrole.c"
  goto return_label;
  case_27:
# 743 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(98211, (unsigned long )0, (long long )17);
  __CrestStore(98212, (unsigned long )(& state->role_none));
# 744 "xmlrole.c"
  state->role_none = 17;
  __CrestLoad(98213, (unsigned long )0, (long long )19);
  __CrestStore(98214, (unsigned long )(& __retres7));
# 745 "xmlrole.c"
  __retres7 = 19;
# 745 "xmlrole.c"
  goto return_label;
  case_17:
  {
  __CrestLoad(98217, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(98216, (unsigned long )0, (long long )0);
  __CrestApply2(98215, 13, (long long )(state->documentEntity != 0));
# 747 "xmlrole.c"
  if (state->documentEntity != 0) {
    __CrestBranch(98218, 63754, 1);
# 747 "xmlrole.c"
    state->handler = & internalSubset;
  } else {
    __CrestBranch(98219, 63755, 0);
# 747 "xmlrole.c"
    state->handler = & externalSubset1;
  }
  }
  __CrestLoad(98220, (unsigned long )0, (long long )20);
  __CrestStore(98221, (unsigned long )(& __retres7));
# 748 "xmlrole.c"
  __retres7 = 20;
# 748 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98222, (unsigned long )(& tok), (long long )tok);
# 750 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98224, (long long )tmp);
  __CrestStore(98223, (unsigned long )(& tmp));
  __CrestLoad(98225, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98226, (unsigned long )(& __retres7));
# 750 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98227, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98228);
# 732 "xmlrole.c"
  return (__retres7);
  }
}
}
# 753 "xmlrole.c"
static int attlist0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98230, 991);
  __CrestStore(98229, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98233, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98232, (unsigned long )0, (long long )15);
  __CrestApply2(98231, 12, (long long )(tok == 15));
# 761 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98234, 63764, 1);
# 761 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98235, 63765, 0);

  }
  }
  {
  __CrestLoad(98238, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98237, (unsigned long )0, (long long )41);
  __CrestApply2(98236, 12, (long long )(tok == 41));
# 764 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98239, 63767, 1);
# 764 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98240, 63768, 0);

  }
  }
  {
  __CrestLoad(98243, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98242, (unsigned long )0, (long long )18);
  __CrestApply2(98241, 12, (long long )(tok == 18));
# 764 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98244, 63770, 1);
# 764 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98245, 63771, 0);

  }
  }
# 760 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98246, (unsigned long )0, (long long )33);
  __CrestStore(98247, (unsigned long )(& __retres7));
# 762 "xmlrole.c"
  __retres7 = 33;
# 762 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 765 "xmlrole.c"
  state->handler = & attlist1;
  __CrestLoad(98248, (unsigned long )0, (long long )34);
  __CrestStore(98249, (unsigned long )(& __retres7));
# 766 "xmlrole.c"
  __retres7 = 34;
# 766 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98250, (unsigned long )(& tok), (long long )tok);
# 768 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98252, (long long )tmp);
  __CrestStore(98251, (unsigned long )(& tmp));
  __CrestLoad(98253, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98254, (unsigned long )(& __retres7));
# 768 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98255, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98256);
# 753 "xmlrole.c"
  return (__retres7);
  }
}
}
# 771 "xmlrole.c"
static int attlist1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98258, 992);
  __CrestStore(98257, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98261, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98260, (unsigned long )0, (long long )15);
  __CrestApply2(98259, 12, (long long )(tok == 15));
# 779 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98262, 63784, 1);
# 779 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98263, 63785, 0);

  }
  }
  {
  __CrestLoad(98266, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98265, (unsigned long )0, (long long )17);
  __CrestApply2(98264, 12, (long long )(tok == 17));
# 781 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(98267, 63787, 1);
# 781 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(98268, 63788, 0);

  }
  }
  {
  __CrestLoad(98271, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98270, (unsigned long )0, (long long )41);
  __CrestApply2(98269, 12, (long long )(tok == 41));
# 785 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98272, 63790, 1);
# 785 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98273, 63791, 0);

  }
  }
  {
  __CrestLoad(98276, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98275, (unsigned long )0, (long long )18);
  __CrestApply2(98274, 12, (long long )(tok == 18));
# 785 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98277, 63793, 1);
# 785 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98278, 63794, 0);

  }
  }
# 778 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98279, (unsigned long )0, (long long )33);
  __CrestStore(98280, (unsigned long )(& __retres7));
# 780 "xmlrole.c"
  __retres7 = 33;
# 780 "xmlrole.c"
  goto return_label;
  case_17:
  {
  __CrestLoad(98283, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(98282, (unsigned long )0, (long long )0);
  __CrestApply2(98281, 13, (long long )(state->documentEntity != 0));
# 782 "xmlrole.c"
  if (state->documentEntity != 0) {
    __CrestBranch(98284, 63799, 1);
# 782 "xmlrole.c"
    state->handler = & internalSubset;
  } else {
    __CrestBranch(98285, 63800, 0);
# 782 "xmlrole.c"
    state->handler = & externalSubset1;
  }
  }
  __CrestLoad(98286, (unsigned long )0, (long long )33);
  __CrestStore(98287, (unsigned long )(& __retres7));
# 783 "xmlrole.c"
  __retres7 = 33;
# 783 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 786 "xmlrole.c"
  state->handler = & attlist2;
  __CrestLoad(98288, (unsigned long )0, (long long )22);
  __CrestStore(98289, (unsigned long )(& __retres7));
# 787 "xmlrole.c"
  __retres7 = 22;
# 787 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98290, (unsigned long )(& tok), (long long )tok);
# 789 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98292, (long long )tmp);
  __CrestStore(98291, (unsigned long )(& tmp));
  __CrestLoad(98293, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98294, (unsigned long )(& __retres7));
# 789 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98295, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98296);
# 771 "xmlrole.c"
  return (__retres7);
  }
}
}
# 804 "xmlrole.c"
static char const * const types[8] =
# 804 "xmlrole.c"
  { (char const * const )(KW_CDATA), (char const * const )(KW_ID), (char const * const )(KW_IDREF), (char const * const )(KW_IDREFS),
        (char const * const )(KW_ENTITY), (char const * const )(KW_ENTITIES), (char const * const )(KW_NMTOKEN), (char const * const )(KW_NMTOKENS)};
# 792 "xmlrole.c"
static int attlist2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int i ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_11)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres12 ;

  {
  __CrestCall(98298, 993);
  __CrestStore(98297, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98301, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98300, (unsigned long )0, (long long )15);
  __CrestApply2(98299, 12, (long long )(tok == 15));
# 800 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98302, 63812, 1);
# 800 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98303, 63813, 0);

  }
  }
  {
  __CrestLoad(98306, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98305, (unsigned long )0, (long long )18);
  __CrestApply2(98304, 12, (long long )(tok == 18));
# 802 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98307, 63815, 1);
# 802 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98308, 63816, 0);

  }
  }
  {
  __CrestLoad(98311, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98310, (unsigned long )0, (long long )23);
  __CrestApply2(98309, 12, (long long )(tok == 23));
# 826 "xmlrole.c"
  if (tok == 23) {
    __CrestBranch(98312, 63818, 1);
# 826 "xmlrole.c"
    goto case_23;
  } else {
    __CrestBranch(98313, 63819, 0);

  }
  }
# 799 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98314, (unsigned long )0, (long long )33);
  __CrestStore(98315, (unsigned long )(& __retres12));
# 801 "xmlrole.c"
  __retres12 = 33;
# 801 "xmlrole.c"
  goto return_label;
  case_18:
  __CrestLoad(98316, (unsigned long )0, (long long )0);
  __CrestStore(98317, (unsigned long )(& i));
# 815 "xmlrole.c"
  i = 0;
  {
# 815 "xmlrole.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(98320, (unsigned long )(& i), (long long )i);
    __CrestLoad(98319, (unsigned long )0, (long long )((int )(sizeof(types) / sizeof(types[0]))));
    __CrestApply2(98318, 16, (long long )(i < (int )(sizeof(types) / sizeof(types[0]))));
# 815 "xmlrole.c"
    if (i < (int )(sizeof(types) / sizeof(types[0]))) {
      __CrestBranch(98321, 63828, 1);

    } else {
      __CrestBranch(98322, 63829, 0);
# 815 "xmlrole.c"
      goto while_break;
    }
    }
# 816 "xmlrole.c"
    mem_10 = enc->nameMatchesAscii;
# 816 "xmlrole.c"
    tmp = (*mem_10)(enc, ptr, end, (char const *)types[i]);
    __CrestHandleReturn(98324, (long long )tmp);
    __CrestStore(98323, (unsigned long )(& tmp));
    {
    __CrestLoad(98327, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(98326, (unsigned long )0, (long long )0);
    __CrestApply2(98325, 13, (long long )(tmp != 0));
# 816 "xmlrole.c"
    if (tmp != 0) {
      __CrestBranch(98328, 63832, 1);
# 817 "xmlrole.c"
      state->handler = & attlist8;
      __CrestLoad(98332, (unsigned long )0, (long long )23);
      __CrestLoad(98331, (unsigned long )(& i), (long long )i);
      __CrestApply2(98330, 0, (long long )(23 + i));
      __CrestStore(98333, (unsigned long )(& __retres12));
# 818 "xmlrole.c"
      __retres12 = 23 + i;
# 818 "xmlrole.c"
      goto return_label;
    } else {
      __CrestBranch(98329, 63835, 0);

    }
    }
    __CrestLoad(98336, (unsigned long )(& i), (long long )i);
    __CrestLoad(98335, (unsigned long )0, (long long )1);
    __CrestApply2(98334, 0, (long long )(i + 1));
    __CrestStore(98337, (unsigned long )(& i));
# 815 "xmlrole.c"
    i ++;
  }
  while_break: ;
  }
# 821 "xmlrole.c"
  mem_11 = enc->nameMatchesAscii;
# 821 "xmlrole.c"
  tmp___0 = (*mem_11)(enc, ptr, end, KW_NOTATION);
  __CrestHandleReturn(98339, (long long )tmp___0);
  __CrestStore(98338, (unsigned long )(& tmp___0));
  {
  __CrestLoad(98342, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(98341, (unsigned long )0, (long long )0);
  __CrestApply2(98340, 13, (long long )(tmp___0 != 0));
# 821 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(98343, 63840, 1);
# 822 "xmlrole.c"
    state->handler = & attlist5;
    __CrestLoad(98345, (unsigned long )0, (long long )33);
    __CrestStore(98346, (unsigned long )(& __retres12));
# 823 "xmlrole.c"
    __retres12 = 33;
# 823 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98344, 63843, 0);

  }
  }
# 825 "xmlrole.c"
  goto switch_break;
  case_23:
# 827 "xmlrole.c"
  state->handler = & attlist3;
  __CrestLoad(98347, (unsigned long )0, (long long )33);
  __CrestStore(98348, (unsigned long )(& __retres12));
# 828 "xmlrole.c"
  __retres12 = 33;
# 828 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98349, (unsigned long )(& tok), (long long )tok);
# 830 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(98351, (long long )tmp___1);
  __CrestStore(98350, (unsigned long )(& tmp___1));
  __CrestLoad(98352, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(98353, (unsigned long )(& __retres12));
# 830 "xmlrole.c"
  __retres12 = tmp___1;
  return_label:
  {
  __CrestLoad(98354, (unsigned long )(& __retres12), (long long )__retres12);
  __CrestReturn(98355);
# 792 "xmlrole.c"
  return (__retres12);
  }
}
}
# 833 "xmlrole.c"
static int attlist3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98357, 994);
  __CrestStore(98356, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98360, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98359, (unsigned long )0, (long long )15);
  __CrestApply2(98358, 12, (long long )(tok == 15));
# 841 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98361, 63854, 1);
# 841 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98362, 63855, 0);

  }
  }
  {
  __CrestLoad(98365, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98364, (unsigned long )0, (long long )41);
  __CrestApply2(98363, 12, (long long )(tok == 41));
# 845 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98366, 63857, 1);
# 845 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98367, 63858, 0);

  }
  }
  {
  __CrestLoad(98370, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98369, (unsigned long )0, (long long )18);
  __CrestApply2(98368, 12, (long long )(tok == 18));
# 845 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98371, 63860, 1);
# 845 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98372, 63861, 0);

  }
  }
  {
  __CrestLoad(98375, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98374, (unsigned long )0, (long long )19);
  __CrestApply2(98373, 12, (long long )(tok == 19));
# 845 "xmlrole.c"
  if (tok == 19) {
    __CrestBranch(98376, 63863, 1);
# 845 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98377, 63864, 0);

  }
  }
# 840 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98378, (unsigned long )0, (long long )33);
  __CrestStore(98379, (unsigned long )(& __retres7));
# 842 "xmlrole.c"
  __retres7 = 33;
# 842 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
  case_19:
# 846 "xmlrole.c"
  state->handler = & attlist4;
  __CrestLoad(98380, (unsigned long )0, (long long )31);
  __CrestStore(98381, (unsigned long )(& __retres7));
# 847 "xmlrole.c"
  __retres7 = 31;
# 847 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98382, (unsigned long )(& tok), (long long )tok);
# 849 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98384, (long long )tmp);
  __CrestStore(98383, (unsigned long )(& tmp));
  __CrestLoad(98385, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98386, (unsigned long )(& __retres7));
# 849 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98387, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98388);
# 833 "xmlrole.c"
  return (__retres7);
  }
}
}
# 852 "xmlrole.c"
static int attlist4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98390, 995);
  __CrestStore(98389, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98393, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98392, (unsigned long )0, (long long )15);
  __CrestApply2(98391, 12, (long long )(tok == 15));
# 860 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98394, 63877, 1);
# 860 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98395, 63878, 0);

  }
  }
  {
  __CrestLoad(98398, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98397, (unsigned long )0, (long long )24);
  __CrestApply2(98396, 12, (long long )(tok == 24));
# 862 "xmlrole.c"
  if (tok == 24) {
    __CrestBranch(98399, 63880, 1);
# 862 "xmlrole.c"
    goto case_24;
  } else {
    __CrestBranch(98400, 63881, 0);

  }
  }
  {
  __CrestLoad(98403, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98402, (unsigned long )0, (long long )21);
  __CrestApply2(98401, 12, (long long )(tok == 21));
# 865 "xmlrole.c"
  if (tok == 21) {
    __CrestBranch(98404, 63883, 1);
# 865 "xmlrole.c"
    goto case_21;
  } else {
    __CrestBranch(98405, 63884, 0);

  }
  }
# 859 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98406, (unsigned long )0, (long long )33);
  __CrestStore(98407, (unsigned long )(& __retres7));
# 861 "xmlrole.c"
  __retres7 = 33;
# 861 "xmlrole.c"
  goto return_label;
  case_24:
# 863 "xmlrole.c"
  state->handler = & attlist8;
  __CrestLoad(98408, (unsigned long )0, (long long )33);
  __CrestStore(98409, (unsigned long )(& __retres7));
# 864 "xmlrole.c"
  __retres7 = 33;
# 864 "xmlrole.c"
  goto return_label;
  case_21:
# 866 "xmlrole.c"
  state->handler = & attlist3;
  __CrestLoad(98410, (unsigned long )0, (long long )33);
  __CrestStore(98411, (unsigned long )(& __retres7));
# 867 "xmlrole.c"
  __retres7 = 33;
# 867 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98412, (unsigned long )(& tok), (long long )tok);
# 869 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98414, (long long )tmp);
  __CrestStore(98413, (unsigned long )(& tmp));
  __CrestLoad(98415, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98416, (unsigned long )(& __retres7));
# 869 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98417, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98418);
# 852 "xmlrole.c"
  return (__retres7);
  }
}
}
# 872 "xmlrole.c"
static int attlist5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98420, 996);
  __CrestStore(98419, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98423, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98422, (unsigned long )0, (long long )15);
  __CrestApply2(98421, 12, (long long )(tok == 15));
# 880 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98424, 63900, 1);
# 880 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98425, 63901, 0);

  }
  }
  {
  __CrestLoad(98428, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98427, (unsigned long )0, (long long )23);
  __CrestApply2(98426, 12, (long long )(tok == 23));
# 882 "xmlrole.c"
  if (tok == 23) {
    __CrestBranch(98429, 63903, 1);
# 882 "xmlrole.c"
    goto case_23;
  } else {
    __CrestBranch(98430, 63904, 0);

  }
  }
# 879 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98431, (unsigned long )0, (long long )33);
  __CrestStore(98432, (unsigned long )(& __retres7));
# 881 "xmlrole.c"
  __retres7 = 33;
# 881 "xmlrole.c"
  goto return_label;
  case_23:
# 883 "xmlrole.c"
  state->handler = & attlist6;
  __CrestLoad(98433, (unsigned long )0, (long long )33);
  __CrestStore(98434, (unsigned long )(& __retres7));
# 884 "xmlrole.c"
  __retres7 = 33;
# 884 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98435, (unsigned long )(& tok), (long long )tok);
# 886 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98437, (long long )tmp);
  __CrestStore(98436, (unsigned long )(& tmp));
  __CrestLoad(98438, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98439, (unsigned long )(& __retres7));
# 886 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98440, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98441);
# 872 "xmlrole.c"
  return (__retres7);
  }
}
}
# 889 "xmlrole.c"
static int attlist6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98443, 997);
  __CrestStore(98442, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98446, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98445, (unsigned long )0, (long long )15);
  __CrestApply2(98444, 12, (long long )(tok == 15));
# 897 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98447, 63917, 1);
# 897 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98448, 63918, 0);

  }
  }
  {
  __CrestLoad(98451, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98450, (unsigned long )0, (long long )18);
  __CrestApply2(98449, 12, (long long )(tok == 18));
# 899 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98452, 63920, 1);
# 899 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98453, 63921, 0);

  }
  }
# 896 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98454, (unsigned long )0, (long long )33);
  __CrestStore(98455, (unsigned long )(& __retres7));
# 898 "xmlrole.c"
  __retres7 = 33;
# 898 "xmlrole.c"
  goto return_label;
  case_18:
# 900 "xmlrole.c"
  state->handler = & attlist7;
  __CrestLoad(98456, (unsigned long )0, (long long )32);
  __CrestStore(98457, (unsigned long )(& __retres7));
# 901 "xmlrole.c"
  __retres7 = 32;
# 901 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98458, (unsigned long )(& tok), (long long )tok);
# 903 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98460, (long long )tmp);
  __CrestStore(98459, (unsigned long )(& tmp));
  __CrestLoad(98461, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98462, (unsigned long )(& __retres7));
# 903 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98463, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98464);
# 889 "xmlrole.c"
  return (__retres7);
  }
}
}
# 906 "xmlrole.c"
static int attlist7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98466, 998);
  __CrestStore(98465, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98469, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98468, (unsigned long )0, (long long )15);
  __CrestApply2(98467, 12, (long long )(tok == 15));
# 914 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98470, 63934, 1);
# 914 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98471, 63935, 0);

  }
  }
  {
  __CrestLoad(98474, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98473, (unsigned long )0, (long long )24);
  __CrestApply2(98472, 12, (long long )(tok == 24));
# 916 "xmlrole.c"
  if (tok == 24) {
    __CrestBranch(98475, 63937, 1);
# 916 "xmlrole.c"
    goto case_24;
  } else {
    __CrestBranch(98476, 63938, 0);

  }
  }
  {
  __CrestLoad(98479, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98478, (unsigned long )0, (long long )21);
  __CrestApply2(98477, 12, (long long )(tok == 21));
# 919 "xmlrole.c"
  if (tok == 21) {
    __CrestBranch(98480, 63940, 1);
# 919 "xmlrole.c"
    goto case_21;
  } else {
    __CrestBranch(98481, 63941, 0);

  }
  }
# 913 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98482, (unsigned long )0, (long long )33);
  __CrestStore(98483, (unsigned long )(& __retres7));
# 915 "xmlrole.c"
  __retres7 = 33;
# 915 "xmlrole.c"
  goto return_label;
  case_24:
# 917 "xmlrole.c"
  state->handler = & attlist8;
  __CrestLoad(98484, (unsigned long )0, (long long )33);
  __CrestStore(98485, (unsigned long )(& __retres7));
# 918 "xmlrole.c"
  __retres7 = 33;
# 918 "xmlrole.c"
  goto return_label;
  case_21:
# 920 "xmlrole.c"
  state->handler = & attlist6;
  __CrestLoad(98486, (unsigned long )0, (long long )33);
  __CrestStore(98487, (unsigned long )(& __retres7));
# 921 "xmlrole.c"
  __retres7 = 33;
# 921 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98488, (unsigned long )(& tok), (long long )tok);
# 923 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98490, (long long )tmp);
  __CrestStore(98489, (unsigned long )(& tmp));
  __CrestLoad(98491, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98492, (unsigned long )(& __retres7));
# 923 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98493, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98494);
# 906 "xmlrole.c"
  return (__retres7);
  }
}
}
# 927 "xmlrole.c"
static int attlist8(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_11)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_12)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres13 ;

  {
  __CrestCall(98496, 999);
  __CrestStore(98495, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98499, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98498, (unsigned long )0, (long long )15);
  __CrestApply2(98497, 12, (long long )(tok == 15));
# 935 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98500, 63957, 1);
# 935 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98501, 63958, 0);

  }
  }
  {
  __CrestLoad(98504, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98503, (unsigned long )0, (long long )20);
  __CrestApply2(98502, 12, (long long )(tok == 20));
# 937 "xmlrole.c"
  if (tok == 20) {
    __CrestBranch(98505, 63960, 1);
# 937 "xmlrole.c"
    goto case_20;
  } else {
    __CrestBranch(98506, 63961, 0);

  }
  }
  {
  __CrestLoad(98509, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98508, (unsigned long )0, (long long )27);
  __CrestApply2(98507, 12, (long long )(tok == 27));
# 960 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98510, 63963, 1);
# 960 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98511, 63964, 0);

  }
  }
# 934 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98512, (unsigned long )0, (long long )33);
  __CrestStore(98513, (unsigned long )(& __retres13));
# 936 "xmlrole.c"
  __retres13 = 33;
# 936 "xmlrole.c"
  goto return_label;
  case_20:
# 938 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 938 "xmlrole.c"
  tmp = (*mem_10)(enc, ptr + enc->minBytesPerChar, end, KW_IMPLIED);
  __CrestHandleReturn(98515, (long long )tmp);
  __CrestStore(98514, (unsigned long )(& tmp));
  {
  __CrestLoad(98518, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(98517, (unsigned long )0, (long long )0);
  __CrestApply2(98516, 13, (long long )(tmp != 0));
# 938 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(98519, 63970, 1);
# 942 "xmlrole.c"
    state->handler = & attlist1;
    __CrestLoad(98521, (unsigned long )0, (long long )35);
    __CrestStore(98522, (unsigned long )(& __retres13));
# 943 "xmlrole.c"
    __retres13 = 35;
# 943 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98520, 63973, 0);

  }
  }
# 945 "xmlrole.c"
  mem_11 = enc->nameMatchesAscii;
# 945 "xmlrole.c"
  tmp___0 = (*mem_11)(enc, ptr + enc->minBytesPerChar, end, KW_REQUIRED);
  __CrestHandleReturn(98524, (long long )tmp___0);
  __CrestStore(98523, (unsigned long )(& tmp___0));
  {
  __CrestLoad(98527, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(98526, (unsigned long )0, (long long )0);
  __CrestApply2(98525, 13, (long long )(tmp___0 != 0));
# 945 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(98528, 63976, 1);
# 949 "xmlrole.c"
    state->handler = & attlist1;
    __CrestLoad(98530, (unsigned long )0, (long long )36);
    __CrestStore(98531, (unsigned long )(& __retres13));
# 950 "xmlrole.c"
    __retres13 = 36;
# 950 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98529, 63979, 0);

  }
  }
# 952 "xmlrole.c"
  mem_12 = enc->nameMatchesAscii;
# 952 "xmlrole.c"
  tmp___1 = (*mem_12)(enc, ptr + enc->minBytesPerChar, end, KW_FIXED);
  __CrestHandleReturn(98533, (long long )tmp___1);
  __CrestStore(98532, (unsigned long )(& tmp___1));
  {
  __CrestLoad(98536, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(98535, (unsigned long )0, (long long )0);
  __CrestApply2(98534, 13, (long long )(tmp___1 != 0));
# 952 "xmlrole.c"
  if (tmp___1 != 0) {
    __CrestBranch(98537, 63982, 1);
# 956 "xmlrole.c"
    state->handler = & attlist9;
    __CrestLoad(98539, (unsigned long )0, (long long )33);
    __CrestStore(98540, (unsigned long )(& __retres13));
# 957 "xmlrole.c"
    __retres13 = 33;
# 957 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98538, 63985, 0);

  }
  }
# 959 "xmlrole.c"
  goto switch_break;
  case_27:
# 961 "xmlrole.c"
  state->handler = & attlist1;
  __CrestLoad(98541, (unsigned long )0, (long long )37);
  __CrestStore(98542, (unsigned long )(& __retres13));
# 962 "xmlrole.c"
  __retres13 = 37;
# 962 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98543, (unsigned long )(& tok), (long long )tok);
# 964 "xmlrole.c"
  tmp___2 = common(state, tok);
  __CrestHandleReturn(98545, (long long )tmp___2);
  __CrestStore(98544, (unsigned long )(& tmp___2));
  __CrestLoad(98546, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(98547, (unsigned long )(& __retres13));
# 964 "xmlrole.c"
  __retres13 = tmp___2;
  return_label:
  {
  __CrestLoad(98548, (unsigned long )(& __retres13), (long long )__retres13);
  __CrestReturn(98549);
# 927 "xmlrole.c"
  return (__retres13);
  }
}
}
# 967 "xmlrole.c"
static int attlist9(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98551, 1000);
  __CrestStore(98550, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98554, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98553, (unsigned long )0, (long long )15);
  __CrestApply2(98552, 12, (long long )(tok == 15));
# 975 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98555, 63996, 1);
# 975 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98556, 63997, 0);

  }
  }
  {
  __CrestLoad(98559, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98558, (unsigned long )0, (long long )27);
  __CrestApply2(98557, 12, (long long )(tok == 27));
# 977 "xmlrole.c"
  if (tok == 27) {
    __CrestBranch(98560, 63999, 1);
# 977 "xmlrole.c"
    goto case_27;
  } else {
    __CrestBranch(98561, 64000, 0);

  }
  }
# 974 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98562, (unsigned long )0, (long long )33);
  __CrestStore(98563, (unsigned long )(& __retres7));
# 976 "xmlrole.c"
  __retres7 = 33;
# 976 "xmlrole.c"
  goto return_label;
  case_27:
# 978 "xmlrole.c"
  state->handler = & attlist1;
  __CrestLoad(98564, (unsigned long )0, (long long )38);
  __CrestStore(98565, (unsigned long )(& __retres7));
# 979 "xmlrole.c"
  __retres7 = 38;
# 979 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98566, (unsigned long )(& tok), (long long )tok);
# 981 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98568, (long long )tmp);
  __CrestStore(98567, (unsigned long )(& tmp));
  __CrestLoad(98569, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98570, (unsigned long )(& __retres7));
# 981 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98571, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98572);
# 967 "xmlrole.c"
  return (__retres7);
  }
}
}
# 984 "xmlrole.c"
static int element0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98574, 1001);
  __CrestStore(98573, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98577, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98576, (unsigned long )0, (long long )15);
  __CrestApply2(98575, 12, (long long )(tok == 15));
# 992 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98578, 64013, 1);
# 992 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98579, 64014, 0);

  }
  }
  {
  __CrestLoad(98582, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98581, (unsigned long )0, (long long )41);
  __CrestApply2(98580, 12, (long long )(tok == 41));
# 995 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98583, 64016, 1);
# 995 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98584, 64017, 0);

  }
  }
  {
  __CrestLoad(98587, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98586, (unsigned long )0, (long long )18);
  __CrestApply2(98585, 12, (long long )(tok == 18));
# 995 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98588, 64019, 1);
# 995 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98589, 64020, 0);

  }
  }
# 991 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98590, (unsigned long )0, (long long )39);
  __CrestStore(98591, (unsigned long )(& __retres7));
# 993 "xmlrole.c"
  __retres7 = 39;
# 993 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 996 "xmlrole.c"
  state->handler = & element1;
  __CrestLoad(98592, (unsigned long )0, (long long )40);
  __CrestStore(98593, (unsigned long )(& __retres7));
# 997 "xmlrole.c"
  __retres7 = 40;
# 997 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98594, (unsigned long )(& tok), (long long )tok);
# 999 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98596, (long long )tmp);
  __CrestStore(98595, (unsigned long )(& tmp));
  __CrestLoad(98597, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98598, (unsigned long )(& __retres7));
# 999 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98599, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98600);
# 984 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1002 "xmlrole.c"
static int element1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(98602, 1002);
  __CrestStore(98601, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98605, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98604, (unsigned long )0, (long long )15);
  __CrestApply2(98603, 12, (long long )(tok == 15));
# 1010 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98606, 64033, 1);
# 1010 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98607, 64034, 0);

  }
  }
  {
  __CrestLoad(98610, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98609, (unsigned long )0, (long long )18);
  __CrestApply2(98608, 12, (long long )(tok == 18));
# 1012 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98611, 64036, 1);
# 1012 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98612, 64037, 0);

  }
  }
  {
  __CrestLoad(98615, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98614, (unsigned long )0, (long long )23);
  __CrestApply2(98613, 12, (long long )(tok == 23));
# 1024 "xmlrole.c"
  if (tok == 23) {
    __CrestBranch(98616, 64039, 1);
# 1024 "xmlrole.c"
    goto case_23;
  } else {
    __CrestBranch(98617, 64040, 0);

  }
  }
# 1009 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98618, (unsigned long )0, (long long )39);
  __CrestStore(98619, (unsigned long )(& __retres11));
# 1011 "xmlrole.c"
  __retres11 = 39;
# 1011 "xmlrole.c"
  goto return_label;
  case_18:
# 1013 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 1013 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_EMPTY);
  __CrestHandleReturn(98621, (long long )tmp);
  __CrestStore(98620, (unsigned long )(& tmp));
  {
  __CrestLoad(98624, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(98623, (unsigned long )0, (long long )0);
  __CrestApply2(98622, 13, (long long )(tmp != 0));
# 1013 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(98625, 64046, 1);
# 1014 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98627, (unsigned long )0, (long long )39);
    __CrestStore(98628, (unsigned long )(& state->role_none));
# 1015 "xmlrole.c"
    state->role_none = 39;
    __CrestLoad(98629, (unsigned long )0, (long long )42);
    __CrestStore(98630, (unsigned long )(& __retres11));
# 1016 "xmlrole.c"
    __retres11 = 42;
# 1016 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98626, 64049, 0);

  }
  }
# 1018 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 1018 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_ANY);
  __CrestHandleReturn(98632, (long long )tmp___0);
  __CrestStore(98631, (unsigned long )(& tmp___0));
  {
  __CrestLoad(98635, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(98634, (unsigned long )0, (long long )0);
  __CrestApply2(98633, 13, (long long )(tmp___0 != 0));
# 1018 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(98636, 64052, 1);
# 1019 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98638, (unsigned long )0, (long long )39);
    __CrestStore(98639, (unsigned long )(& state->role_none));
# 1020 "xmlrole.c"
    state->role_none = 39;
    __CrestLoad(98640, (unsigned long )0, (long long )41);
    __CrestStore(98641, (unsigned long )(& __retres11));
# 1021 "xmlrole.c"
    __retres11 = 41;
# 1021 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98637, 64055, 0);

  }
  }
# 1023 "xmlrole.c"
  goto switch_break;
  case_23:
# 1025 "xmlrole.c"
  state->handler = & element2;
  __CrestLoad(98642, (unsigned long )0, (long long )1U);
  __CrestStore(98643, (unsigned long )(& state->level));
# 1026 "xmlrole.c"
  state->level = 1U;
  __CrestLoad(98644, (unsigned long )0, (long long )44);
  __CrestStore(98645, (unsigned long )(& __retres11));
# 1027 "xmlrole.c"
  __retres11 = 44;
# 1027 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98646, (unsigned long )(& tok), (long long )tok);
# 1029 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(98648, (long long )tmp___1);
  __CrestStore(98647, (unsigned long )(& tmp___1));
  __CrestLoad(98649, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(98650, (unsigned long )(& __retres11));
# 1029 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(98651, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(98652);
# 1002 "xmlrole.c"
  return (__retres11);
  }
}
}
# 1032 "xmlrole.c"
static int element2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int (*mem_8)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres9 ;

  {
  __CrestCall(98654, 1003);
  __CrestStore(98653, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98657, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98656, (unsigned long )0, (long long )15);
  __CrestApply2(98655, 12, (long long )(tok == 15));
# 1040 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98658, 64066, 1);
# 1040 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98659, 64067, 0);

  }
  }
  {
  __CrestLoad(98662, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98661, (unsigned long )0, (long long )20);
  __CrestApply2(98660, 12, (long long )(tok == 20));
# 1042 "xmlrole.c"
  if (tok == 20) {
    __CrestBranch(98663, 64069, 1);
# 1042 "xmlrole.c"
    goto case_20;
  } else {
    __CrestBranch(98664, 64070, 0);

  }
  }
  {
  __CrestLoad(98667, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98666, (unsigned long )0, (long long )23);
  __CrestApply2(98665, 12, (long long )(tok == 23));
# 1051 "xmlrole.c"
  if (tok == 23) {
    __CrestBranch(98668, 64072, 1);
# 1051 "xmlrole.c"
    goto case_23;
  } else {
    __CrestBranch(98669, 64073, 0);

  }
  }
  {
  __CrestLoad(98672, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98671, (unsigned long )0, (long long )41);
  __CrestApply2(98670, 12, (long long )(tok == 41));
# 1056 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98673, 64075, 1);
# 1056 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98674, 64076, 0);

  }
  }
  {
  __CrestLoad(98677, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98676, (unsigned long )0, (long long )18);
  __CrestApply2(98675, 12, (long long )(tok == 18));
# 1056 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98678, 64078, 1);
# 1056 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98679, 64079, 0);

  }
  }
  {
  __CrestLoad(98682, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98681, (unsigned long )0, (long long )30);
  __CrestApply2(98680, 12, (long long )(tok == 30));
# 1059 "xmlrole.c"
  if (tok == 30) {
    __CrestBranch(98683, 64081, 1);
# 1059 "xmlrole.c"
    goto case_30;
  } else {
    __CrestBranch(98684, 64082, 0);

  }
  }
  {
  __CrestLoad(98687, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98686, (unsigned long )0, (long long )31);
  __CrestApply2(98685, 12, (long long )(tok == 31));
# 1062 "xmlrole.c"
  if (tok == 31) {
    __CrestBranch(98688, 64084, 1);
# 1062 "xmlrole.c"
    goto case_31;
  } else {
    __CrestBranch(98689, 64085, 0);

  }
  }
  {
  __CrestLoad(98692, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98691, (unsigned long )0, (long long )32);
  __CrestApply2(98690, 12, (long long )(tok == 32));
# 1065 "xmlrole.c"
  if (tok == 32) {
    __CrestBranch(98693, 64087, 1);
# 1065 "xmlrole.c"
    goto case_32;
  } else {
    __CrestBranch(98694, 64088, 0);

  }
  }
# 1039 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98695, (unsigned long )0, (long long )39);
  __CrestStore(98696, (unsigned long )(& __retres9));
# 1041 "xmlrole.c"
  __retres9 = 39;
# 1041 "xmlrole.c"
  goto return_label;
  case_20:
# 1043 "xmlrole.c"
  mem_8 = enc->nameMatchesAscii;
# 1043 "xmlrole.c"
  tmp = (*mem_8)(enc, ptr + enc->minBytesPerChar, end, KW_PCDATA);
  __CrestHandleReturn(98698, (long long )tmp);
  __CrestStore(98697, (unsigned long )(& tmp));
  {
  __CrestLoad(98701, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(98700, (unsigned long )0, (long long )0);
  __CrestApply2(98699, 13, (long long )(tmp != 0));
# 1043 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(98702, 64094, 1);
# 1047 "xmlrole.c"
    state->handler = & element3;
    __CrestLoad(98704, (unsigned long )0, (long long )43);
    __CrestStore(98705, (unsigned long )(& __retres9));
# 1048 "xmlrole.c"
    __retres9 = 43;
# 1048 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(98703, 64097, 0);

  }
  }
# 1050 "xmlrole.c"
  goto switch_break;
  case_23:
  __CrestLoad(98706, (unsigned long )0, (long long )2U);
  __CrestStore(98707, (unsigned long )(& state->level));
# 1052 "xmlrole.c"
  state->level = 2U;
# 1053 "xmlrole.c"
  state->handler = & element6;
  __CrestLoad(98708, (unsigned long )0, (long long )44);
  __CrestStore(98709, (unsigned long )(& __retres9));
# 1054 "xmlrole.c"
  __retres9 = 44;
# 1054 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 1057 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98710, (unsigned long )0, (long long )51);
  __CrestStore(98711, (unsigned long )(& __retres9));
# 1058 "xmlrole.c"
  __retres9 = 51;
# 1058 "xmlrole.c"
  goto return_label;
  case_30:
# 1060 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98712, (unsigned long )0, (long long )53);
  __CrestStore(98713, (unsigned long )(& __retres9));
# 1061 "xmlrole.c"
  __retres9 = 53;
# 1061 "xmlrole.c"
  goto return_label;
  case_31:
# 1063 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98714, (unsigned long )0, (long long )52);
  __CrestStore(98715, (unsigned long )(& __retres9));
# 1064 "xmlrole.c"
  __retres9 = 52;
# 1064 "xmlrole.c"
  goto return_label;
  case_32:
# 1066 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98716, (unsigned long )0, (long long )54);
  __CrestStore(98717, (unsigned long )(& __retres9));
# 1067 "xmlrole.c"
  __retres9 = 54;
# 1067 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98718, (unsigned long )(& tok), (long long )tok);
# 1069 "xmlrole.c"
  tmp___0 = common(state, tok);
  __CrestHandleReturn(98720, (long long )tmp___0);
  __CrestStore(98719, (unsigned long )(& tmp___0));
  __CrestLoad(98721, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(98722, (unsigned long )(& __retres9));
# 1069 "xmlrole.c"
  __retres9 = tmp___0;
  return_label:
  {
  __CrestLoad(98723, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(98724);
# 1032 "xmlrole.c"
  return (__retres9);
  }
}
}
# 1072 "xmlrole.c"
static int element3(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98726, 1004);
  __CrestStore(98725, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98729, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98728, (unsigned long )0, (long long )15);
  __CrestApply2(98727, 12, (long long )(tok == 15));
# 1080 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98730, 64120, 1);
# 1080 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98731, 64121, 0);

  }
  }
  {
  __CrestLoad(98734, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98733, (unsigned long )0, (long long )24);
  __CrestApply2(98732, 12, (long long )(tok == 24));
# 1082 "xmlrole.c"
  if (tok == 24) {
    __CrestBranch(98735, 64123, 1);
# 1082 "xmlrole.c"
    goto case_24;
  } else {
    __CrestBranch(98736, 64124, 0);

  }
  }
  {
  __CrestLoad(98739, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98738, (unsigned long )0, (long long )36);
  __CrestApply2(98737, 12, (long long )(tok == 36));
# 1086 "xmlrole.c"
  if (tok == 36) {
    __CrestBranch(98740, 64126, 1);
# 1086 "xmlrole.c"
    goto case_36;
  } else {
    __CrestBranch(98741, 64127, 0);

  }
  }
  {
  __CrestLoad(98744, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98743, (unsigned long )0, (long long )21);
  __CrestApply2(98742, 12, (long long )(tok == 21));
# 1090 "xmlrole.c"
  if (tok == 21) {
    __CrestBranch(98745, 64129, 1);
# 1090 "xmlrole.c"
    goto case_21;
  } else {
    __CrestBranch(98746, 64130, 0);

  }
  }
# 1079 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98747, (unsigned long )0, (long long )39);
  __CrestStore(98748, (unsigned long )(& __retres7));
# 1081 "xmlrole.c"
  __retres7 = 39;
# 1081 "xmlrole.c"
  goto return_label;
  case_24:
# 1083 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(98749, (unsigned long )0, (long long )39);
  __CrestStore(98750, (unsigned long )(& state->role_none));
# 1084 "xmlrole.c"
  state->role_none = 39;
  __CrestLoad(98751, (unsigned long )0, (long long )45);
  __CrestStore(98752, (unsigned long )(& __retres7));
# 1085 "xmlrole.c"
  __retres7 = 45;
# 1085 "xmlrole.c"
  goto return_label;
  case_36:
# 1087 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(98753, (unsigned long )0, (long long )39);
  __CrestStore(98754, (unsigned long )(& state->role_none));
# 1088 "xmlrole.c"
  state->role_none = 39;
  __CrestLoad(98755, (unsigned long )0, (long long )46);
  __CrestStore(98756, (unsigned long )(& __retres7));
# 1089 "xmlrole.c"
  __retres7 = 46;
# 1089 "xmlrole.c"
  goto return_label;
  case_21:
# 1091 "xmlrole.c"
  state->handler = & element4;
  __CrestLoad(98757, (unsigned long )0, (long long )39);
  __CrestStore(98758, (unsigned long )(& __retres7));
# 1092 "xmlrole.c"
  __retres7 = 39;
# 1092 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98759, (unsigned long )(& tok), (long long )tok);
# 1094 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98761, (long long )tmp);
  __CrestStore(98760, (unsigned long )(& tmp));
  __CrestLoad(98762, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98763, (unsigned long )(& __retres7));
# 1094 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98764, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98765);
# 1072 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1097 "xmlrole.c"
static int element4(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98767, 1005);
  __CrestStore(98766, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98770, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98769, (unsigned long )0, (long long )15);
  __CrestApply2(98768, 12, (long long )(tok == 15));
# 1105 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98771, 64149, 1);
# 1105 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98772, 64150, 0);

  }
  }
  {
  __CrestLoad(98775, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98774, (unsigned long )0, (long long )41);
  __CrestApply2(98773, 12, (long long )(tok == 41));
# 1108 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98776, 64152, 1);
# 1108 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98777, 64153, 0);

  }
  }
  {
  __CrestLoad(98780, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98779, (unsigned long )0, (long long )18);
  __CrestApply2(98778, 12, (long long )(tok == 18));
# 1108 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98781, 64155, 1);
# 1108 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98782, 64156, 0);

  }
  }
# 1104 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98783, (unsigned long )0, (long long )39);
  __CrestStore(98784, (unsigned long )(& __retres7));
# 1106 "xmlrole.c"
  __retres7 = 39;
# 1106 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 1109 "xmlrole.c"
  state->handler = & element5;
  __CrestLoad(98785, (unsigned long )0, (long long )51);
  __CrestStore(98786, (unsigned long )(& __retres7));
# 1110 "xmlrole.c"
  __retres7 = 51;
# 1110 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98787, (unsigned long )(& tok), (long long )tok);
# 1112 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98789, (long long )tmp);
  __CrestStore(98788, (unsigned long )(& tmp));
  __CrestLoad(98790, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98791, (unsigned long )(& __retres7));
# 1112 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98792, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98793);
# 1097 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1115 "xmlrole.c"
static int element5(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98795, 1006);
  __CrestStore(98794, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98798, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98797, (unsigned long )0, (long long )15);
  __CrestApply2(98796, 12, (long long )(tok == 15));
# 1123 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98799, 64169, 1);
# 1123 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98800, 64170, 0);

  }
  }
  {
  __CrestLoad(98803, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98802, (unsigned long )0, (long long )36);
  __CrestApply2(98801, 12, (long long )(tok == 36));
# 1125 "xmlrole.c"
  if (tok == 36) {
    __CrestBranch(98804, 64172, 1);
# 1125 "xmlrole.c"
    goto case_36;
  } else {
    __CrestBranch(98805, 64173, 0);

  }
  }
  {
  __CrestLoad(98808, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98807, (unsigned long )0, (long long )21);
  __CrestApply2(98806, 12, (long long )(tok == 21));
# 1129 "xmlrole.c"
  if (tok == 21) {
    __CrestBranch(98809, 64175, 1);
# 1129 "xmlrole.c"
    goto case_21;
  } else {
    __CrestBranch(98810, 64176, 0);

  }
  }
# 1122 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98811, (unsigned long )0, (long long )39);
  __CrestStore(98812, (unsigned long )(& __retres7));
# 1124 "xmlrole.c"
  __retres7 = 39;
# 1124 "xmlrole.c"
  goto return_label;
  case_36:
# 1126 "xmlrole.c"
  state->handler = & declClose;
  __CrestLoad(98813, (unsigned long )0, (long long )39);
  __CrestStore(98814, (unsigned long )(& state->role_none));
# 1127 "xmlrole.c"
  state->role_none = 39;
  __CrestLoad(98815, (unsigned long )0, (long long )46);
  __CrestStore(98816, (unsigned long )(& __retres7));
# 1128 "xmlrole.c"
  __retres7 = 46;
# 1128 "xmlrole.c"
  goto return_label;
  case_21:
# 1130 "xmlrole.c"
  state->handler = & element4;
  __CrestLoad(98817, (unsigned long )0, (long long )39);
  __CrestStore(98818, (unsigned long )(& __retres7));
# 1131 "xmlrole.c"
  __retres7 = 39;
# 1131 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98819, (unsigned long )(& tok), (long long )tok);
# 1133 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98821, (long long )tmp);
  __CrestStore(98820, (unsigned long )(& tmp));
  __CrestLoad(98822, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98823, (unsigned long )(& __retres7));
# 1133 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98824, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98825);
# 1115 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1136 "xmlrole.c"
static int element6(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98827, 1007);
  __CrestStore(98826, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98830, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98829, (unsigned long )0, (long long )15);
  __CrestApply2(98828, 12, (long long )(tok == 15));
# 1144 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98831, 64192, 1);
# 1144 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98832, 64193, 0);

  }
  }
  {
  __CrestLoad(98835, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98834, (unsigned long )0, (long long )23);
  __CrestApply2(98833, 12, (long long )(tok == 23));
# 1146 "xmlrole.c"
  if (tok == 23) {
    __CrestBranch(98836, 64195, 1);
# 1146 "xmlrole.c"
    goto case_23;
  } else {
    __CrestBranch(98837, 64196, 0);

  }
  }
  {
  __CrestLoad(98840, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98839, (unsigned long )0, (long long )41);
  __CrestApply2(98838, 12, (long long )(tok == 41));
# 1150 "xmlrole.c"
  if (tok == 41) {
    __CrestBranch(98841, 64198, 1);
# 1150 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98842, 64199, 0);

  }
  }
  {
  __CrestLoad(98845, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98844, (unsigned long )0, (long long )18);
  __CrestApply2(98843, 12, (long long )(tok == 18));
# 1150 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98846, 64201, 1);
# 1150 "xmlrole.c"
    goto case_41;
  } else {
    __CrestBranch(98847, 64202, 0);

  }
  }
  {
  __CrestLoad(98850, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98849, (unsigned long )0, (long long )30);
  __CrestApply2(98848, 12, (long long )(tok == 30));
# 1153 "xmlrole.c"
  if (tok == 30) {
    __CrestBranch(98851, 64204, 1);
# 1153 "xmlrole.c"
    goto case_30;
  } else {
    __CrestBranch(98852, 64205, 0);

  }
  }
  {
  __CrestLoad(98855, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98854, (unsigned long )0, (long long )31);
  __CrestApply2(98853, 12, (long long )(tok == 31));
# 1156 "xmlrole.c"
  if (tok == 31) {
    __CrestBranch(98856, 64207, 1);
# 1156 "xmlrole.c"
    goto case_31;
  } else {
    __CrestBranch(98857, 64208, 0);

  }
  }
  {
  __CrestLoad(98860, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98859, (unsigned long )0, (long long )32);
  __CrestApply2(98858, 12, (long long )(tok == 32));
# 1159 "xmlrole.c"
  if (tok == 32) {
    __CrestBranch(98861, 64210, 1);
# 1159 "xmlrole.c"
    goto case_32;
  } else {
    __CrestBranch(98862, 64211, 0);

  }
  }
# 1143 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98863, (unsigned long )0, (long long )39);
  __CrestStore(98864, (unsigned long )(& __retres7));
# 1145 "xmlrole.c"
  __retres7 = 39;
# 1145 "xmlrole.c"
  goto return_label;
  case_23:
  __CrestLoad(98867, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98866, (unsigned long )0, (long long )1U);
  __CrestApply2(98865, 0, (long long )(state->level + 1U));
  __CrestStore(98868, (unsigned long )(& state->level));
# 1147 "xmlrole.c"
  (state->level) ++;
  __CrestLoad(98869, (unsigned long )0, (long long )44);
  __CrestStore(98870, (unsigned long )(& __retres7));
# 1148 "xmlrole.c"
  __retres7 = 44;
# 1148 "xmlrole.c"
  goto return_label;
  case_41:
  case_18:
# 1151 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98871, (unsigned long )0, (long long )51);
  __CrestStore(98872, (unsigned long )(& __retres7));
# 1152 "xmlrole.c"
  __retres7 = 51;
# 1152 "xmlrole.c"
  goto return_label;
  case_30:
# 1154 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98873, (unsigned long )0, (long long )53);
  __CrestStore(98874, (unsigned long )(& __retres7));
# 1155 "xmlrole.c"
  __retres7 = 53;
# 1155 "xmlrole.c"
  goto return_label;
  case_31:
# 1157 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98875, (unsigned long )0, (long long )52);
  __CrestStore(98876, (unsigned long )(& __retres7));
# 1158 "xmlrole.c"
  __retres7 = 52;
# 1158 "xmlrole.c"
  goto return_label;
  case_32:
# 1160 "xmlrole.c"
  state->handler = & element7;
  __CrestLoad(98877, (unsigned long )0, (long long )54);
  __CrestStore(98878, (unsigned long )(& __retres7));
# 1161 "xmlrole.c"
  __retres7 = 54;
# 1161 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98879, (unsigned long )(& tok), (long long )tok);
# 1163 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98881, (long long )tmp);
  __CrestStore(98880, (unsigned long )(& tmp));
  __CrestLoad(98882, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98883, (unsigned long )(& __retres7));
# 1163 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98884, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98885);
# 1136 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1166 "xmlrole.c"
static int element7(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                    ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(98887, 1008);
  __CrestStore(98886, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98890, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98889, (unsigned long )0, (long long )15);
  __CrestApply2(98888, 12, (long long )(tok == 15));
# 1174 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98891, 64236, 1);
# 1174 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98892, 64237, 0);

  }
  }
  {
  __CrestLoad(98895, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98894, (unsigned long )0, (long long )24);
  __CrestApply2(98893, 12, (long long )(tok == 24));
# 1176 "xmlrole.c"
  if (tok == 24) {
    __CrestBranch(98896, 64239, 1);
# 1176 "xmlrole.c"
    goto case_24;
  } else {
    __CrestBranch(98897, 64240, 0);

  }
  }
  {
  __CrestLoad(98900, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98899, (unsigned long )0, (long long )36);
  __CrestApply2(98898, 12, (long long )(tok == 36));
# 1183 "xmlrole.c"
  if (tok == 36) {
    __CrestBranch(98901, 64242, 1);
# 1183 "xmlrole.c"
    goto case_36;
  } else {
    __CrestBranch(98902, 64243, 0);

  }
  }
  {
  __CrestLoad(98905, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98904, (unsigned long )0, (long long )35);
  __CrestApply2(98903, 12, (long long )(tok == 35));
# 1190 "xmlrole.c"
  if (tok == 35) {
    __CrestBranch(98906, 64245, 1);
# 1190 "xmlrole.c"
    goto case_35;
  } else {
    __CrestBranch(98907, 64246, 0);

  }
  }
  {
  __CrestLoad(98910, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98909, (unsigned long )0, (long long )37);
  __CrestApply2(98908, 12, (long long )(tok == 37));
# 1197 "xmlrole.c"
  if (tok == 37) {
    __CrestBranch(98911, 64248, 1);
# 1197 "xmlrole.c"
    goto case_37;
  } else {
    __CrestBranch(98912, 64249, 0);

  }
  }
  {
  __CrestLoad(98915, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98914, (unsigned long )0, (long long )38);
  __CrestApply2(98913, 12, (long long )(tok == 38));
# 1204 "xmlrole.c"
  if (tok == 38) {
    __CrestBranch(98916, 64251, 1);
# 1204 "xmlrole.c"
    goto case_38;
  } else {
    __CrestBranch(98917, 64252, 0);

  }
  }
  {
  __CrestLoad(98920, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98919, (unsigned long )0, (long long )21);
  __CrestApply2(98918, 12, (long long )(tok == 21));
# 1207 "xmlrole.c"
  if (tok == 21) {
    __CrestBranch(98921, 64254, 1);
# 1207 "xmlrole.c"
    goto case_21;
  } else {
    __CrestBranch(98922, 64255, 0);

  }
  }
# 1173 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(98923, (unsigned long )0, (long long )39);
  __CrestStore(98924, (unsigned long )(& __retres7));
# 1175 "xmlrole.c"
  __retres7 = 39;
# 1175 "xmlrole.c"
  goto return_label;
  case_24:
  __CrestLoad(98927, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98926, (unsigned long )0, (long long )1U);
  __CrestApply2(98925, 1, (long long )(state->level - 1U));
  __CrestStore(98928, (unsigned long )(& state->level));
# 1177 "xmlrole.c"
  (state->level) --;
  {
  __CrestLoad(98931, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98930, (unsigned long )0, (long long )0U);
  __CrestApply2(98929, 12, (long long )(state->level == 0U));
# 1178 "xmlrole.c"
  if (state->level == 0U) {
    __CrestBranch(98932, 64261, 1);
# 1179 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98934, (unsigned long )0, (long long )39);
    __CrestStore(98935, (unsigned long )(& state->role_none));
# 1180 "xmlrole.c"
    state->role_none = 39;
  } else {
    __CrestBranch(98933, 64262, 0);

  }
  }
  __CrestLoad(98936, (unsigned long )0, (long long )45);
  __CrestStore(98937, (unsigned long )(& __retres7));
# 1182 "xmlrole.c"
  __retres7 = 45;
# 1182 "xmlrole.c"
  goto return_label;
  case_36:
  __CrestLoad(98940, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98939, (unsigned long )0, (long long )1U);
  __CrestApply2(98938, 1, (long long )(state->level - 1U));
  __CrestStore(98941, (unsigned long )(& state->level));
# 1184 "xmlrole.c"
  (state->level) --;
  {
  __CrestLoad(98944, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98943, (unsigned long )0, (long long )0U);
  __CrestApply2(98942, 12, (long long )(state->level == 0U));
# 1185 "xmlrole.c"
  if (state->level == 0U) {
    __CrestBranch(98945, 64267, 1);
# 1186 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98947, (unsigned long )0, (long long )39);
    __CrestStore(98948, (unsigned long )(& state->role_none));
# 1187 "xmlrole.c"
    state->role_none = 39;
  } else {
    __CrestBranch(98946, 64268, 0);

  }
  }
  __CrestLoad(98949, (unsigned long )0, (long long )46);
  __CrestStore(98950, (unsigned long )(& __retres7));
# 1189 "xmlrole.c"
  __retres7 = 46;
# 1189 "xmlrole.c"
  goto return_label;
  case_35:
  __CrestLoad(98953, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98952, (unsigned long )0, (long long )1U);
  __CrestApply2(98951, 1, (long long )(state->level - 1U));
  __CrestStore(98954, (unsigned long )(& state->level));
# 1191 "xmlrole.c"
  (state->level) --;
  {
  __CrestLoad(98957, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98956, (unsigned long )0, (long long )0U);
  __CrestApply2(98955, 12, (long long )(state->level == 0U));
# 1192 "xmlrole.c"
  if (state->level == 0U) {
    __CrestBranch(98958, 64273, 1);
# 1193 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98960, (unsigned long )0, (long long )39);
    __CrestStore(98961, (unsigned long )(& state->role_none));
# 1194 "xmlrole.c"
    state->role_none = 39;
  } else {
    __CrestBranch(98959, 64274, 0);

  }
  }
  __CrestLoad(98962, (unsigned long )0, (long long )47);
  __CrestStore(98963, (unsigned long )(& __retres7));
# 1196 "xmlrole.c"
  __retres7 = 47;
# 1196 "xmlrole.c"
  goto return_label;
  case_37:
  __CrestLoad(98966, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98965, (unsigned long )0, (long long )1U);
  __CrestApply2(98964, 1, (long long )(state->level - 1U));
  __CrestStore(98967, (unsigned long )(& state->level));
# 1198 "xmlrole.c"
  (state->level) --;
  {
  __CrestLoad(98970, (unsigned long )(& state->level), (long long )state->level);
  __CrestLoad(98969, (unsigned long )0, (long long )0U);
  __CrestApply2(98968, 12, (long long )(state->level == 0U));
# 1199 "xmlrole.c"
  if (state->level == 0U) {
    __CrestBranch(98971, 64279, 1);
# 1200 "xmlrole.c"
    state->handler = & declClose;
    __CrestLoad(98973, (unsigned long )0, (long long )39);
    __CrestStore(98974, (unsigned long )(& state->role_none));
# 1201 "xmlrole.c"
    state->role_none = 39;
  } else {
    __CrestBranch(98972, 64280, 0);

  }
  }
  __CrestLoad(98975, (unsigned long )0, (long long )48);
  __CrestStore(98976, (unsigned long )(& __retres7));
# 1203 "xmlrole.c"
  __retres7 = 48;
# 1203 "xmlrole.c"
  goto return_label;
  case_38:
# 1205 "xmlrole.c"
  state->handler = & element6;
  __CrestLoad(98977, (unsigned long )0, (long long )50);
  __CrestStore(98978, (unsigned long )(& __retres7));
# 1206 "xmlrole.c"
  __retres7 = 50;
# 1206 "xmlrole.c"
  goto return_label;
  case_21:
# 1208 "xmlrole.c"
  state->handler = & element6;
  __CrestLoad(98979, (unsigned long )0, (long long )49);
  __CrestStore(98980, (unsigned long )(& __retres7));
# 1209 "xmlrole.c"
  __retres7 = 49;
# 1209 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(98981, (unsigned long )(& tok), (long long )tok);
# 1211 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(98983, (long long )tmp);
  __CrestStore(98982, (unsigned long )(& tmp));
  __CrestLoad(98984, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(98985, (unsigned long )(& __retres7));
# 1211 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(98986, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(98987);
# 1166 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1216 "xmlrole.c"
static int condSect0(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int (*mem_9)(ENCODING const * , char const * , char const * , char const * ) ;
  int (*mem_10)(ENCODING const * , char const * , char const * , char const * ) ;
  int __retres11 ;

  {
  __CrestCall(98989, 1009);
  __CrestStore(98988, (unsigned long )(& tok));
  {
  {
  __CrestLoad(98992, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98991, (unsigned long )0, (long long )15);
  __CrestApply2(98990, 12, (long long )(tok == 15));
# 1224 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(98993, 64295, 1);
# 1224 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(98994, 64296, 0);

  }
  }
  {
  __CrestLoad(98997, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(98996, (unsigned long )0, (long long )18);
  __CrestApply2(98995, 12, (long long )(tok == 18));
# 1226 "xmlrole.c"
  if (tok == 18) {
    __CrestBranch(98998, 64298, 1);
# 1226 "xmlrole.c"
    goto case_18;
  } else {
    __CrestBranch(98999, 64299, 0);

  }
  }
# 1223 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(99000, (unsigned long )0, (long long )0);
  __CrestStore(99001, (unsigned long )(& __retres11));
# 1225 "xmlrole.c"
  __retres11 = 0;
# 1225 "xmlrole.c"
  goto return_label;
  case_18:
# 1227 "xmlrole.c"
  mem_9 = enc->nameMatchesAscii;
# 1227 "xmlrole.c"
  tmp = (*mem_9)(enc, ptr, end, KW_INCLUDE);
  __CrestHandleReturn(99003, (long long )tmp);
  __CrestStore(99002, (unsigned long )(& tmp));
  {
  __CrestLoad(99006, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(99005, (unsigned long )0, (long long )0);
  __CrestApply2(99004, 13, (long long )(tmp != 0));
# 1227 "xmlrole.c"
  if (tmp != 0) {
    __CrestBranch(99007, 64305, 1);
# 1228 "xmlrole.c"
    state->handler = & condSect1;
    __CrestLoad(99009, (unsigned long )0, (long long )0);
    __CrestStore(99010, (unsigned long )(& __retres11));
# 1229 "xmlrole.c"
    __retres11 = 0;
# 1229 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(99008, 64308, 0);

  }
  }
# 1231 "xmlrole.c"
  mem_10 = enc->nameMatchesAscii;
# 1231 "xmlrole.c"
  tmp___0 = (*mem_10)(enc, ptr, end, KW_IGNORE);
  __CrestHandleReturn(99012, (long long )tmp___0);
  __CrestStore(99011, (unsigned long )(& tmp___0));
  {
  __CrestLoad(99015, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(99014, (unsigned long )0, (long long )0);
  __CrestApply2(99013, 13, (long long )(tmp___0 != 0));
# 1231 "xmlrole.c"
  if (tmp___0 != 0) {
    __CrestBranch(99016, 64311, 1);
# 1232 "xmlrole.c"
    state->handler = & condSect2;
    __CrestLoad(99018, (unsigned long )0, (long long )0);
    __CrestStore(99019, (unsigned long )(& __retres11));
# 1233 "xmlrole.c"
    __retres11 = 0;
# 1233 "xmlrole.c"
    goto return_label;
  } else {
    __CrestBranch(99017, 64314, 0);

  }
  }
# 1235 "xmlrole.c"
  goto switch_break;
  switch_break: ;
  }
  __CrestLoad(99020, (unsigned long )(& tok), (long long )tok);
# 1237 "xmlrole.c"
  tmp___1 = common(state, tok);
  __CrestHandleReturn(99022, (long long )tmp___1);
  __CrestStore(99021, (unsigned long )(& tmp___1));
  __CrestLoad(99023, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(99024, (unsigned long )(& __retres11));
# 1237 "xmlrole.c"
  __retres11 = tmp___1;
  return_label:
  {
  __CrestLoad(99025, (unsigned long )(& __retres11), (long long )__retres11);
  __CrestReturn(99026);
# 1216 "xmlrole.c"
  return (__retres11);
  }
}
}
# 1240 "xmlrole.c"
static int condSect1(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(99028, 1010);
  __CrestStore(99027, (unsigned long )(& tok));
  {
  {
  __CrestLoad(99031, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99030, (unsigned long )0, (long long )15);
  __CrestApply2(99029, 12, (long long )(tok == 15));
# 1248 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(99032, 64322, 1);
# 1248 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(99033, 64323, 0);

  }
  }
  {
  __CrestLoad(99036, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99035, (unsigned long )0, (long long )25);
  __CrestApply2(99034, 12, (long long )(tok == 25));
# 1250 "xmlrole.c"
  if (tok == 25) {
    __CrestBranch(99037, 64325, 1);
# 1250 "xmlrole.c"
    goto case_25;
  } else {
    __CrestBranch(99038, 64326, 0);

  }
  }
# 1247 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(99039, (unsigned long )0, (long long )0);
  __CrestStore(99040, (unsigned long )(& __retres7));
# 1249 "xmlrole.c"
  __retres7 = 0;
# 1249 "xmlrole.c"
  goto return_label;
  case_25:
# 1251 "xmlrole.c"
  state->handler = & externalSubset1;
  __CrestLoad(99043, (unsigned long )(& state->includeLevel), (long long )state->includeLevel);
  __CrestLoad(99042, (unsigned long )0, (long long )1U);
  __CrestApply2(99041, 0, (long long )(state->includeLevel + 1U));
  __CrestStore(99044, (unsigned long )(& state->includeLevel));
# 1252 "xmlrole.c"
  (state->includeLevel) ++;
  __CrestLoad(99045, (unsigned long )0, (long long )0);
  __CrestStore(99046, (unsigned long )(& __retres7));
# 1253 "xmlrole.c"
  __retres7 = 0;
# 1253 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(99047, (unsigned long )(& tok), (long long )tok);
# 1255 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(99049, (long long )tmp);
  __CrestStore(99048, (unsigned long )(& tmp));
  __CrestLoad(99050, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(99051, (unsigned long )(& __retres7));
# 1255 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(99052, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(99053);
# 1240 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1258 "xmlrole.c"
static int condSect2(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(99055, 1011);
  __CrestStore(99054, (unsigned long )(& tok));
  {
  {
  __CrestLoad(99058, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99057, (unsigned long )0, (long long )15);
  __CrestApply2(99056, 12, (long long )(tok == 15));
# 1266 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(99059, 64339, 1);
# 1266 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(99060, 64340, 0);

  }
  }
  {
  __CrestLoad(99063, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99062, (unsigned long )0, (long long )25);
  __CrestApply2(99061, 12, (long long )(tok == 25));
# 1268 "xmlrole.c"
  if (tok == 25) {
    __CrestBranch(99064, 64342, 1);
# 1268 "xmlrole.c"
    goto case_25;
  } else {
    __CrestBranch(99065, 64343, 0);

  }
  }
# 1265 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(99066, (unsigned long )0, (long long )0);
  __CrestStore(99067, (unsigned long )(& __retres7));
# 1267 "xmlrole.c"
  __retres7 = 0;
# 1267 "xmlrole.c"
  goto return_label;
  case_25:
# 1269 "xmlrole.c"
  state->handler = & externalSubset1;
  __CrestLoad(99068, (unsigned long )0, (long long )58);
  __CrestStore(99069, (unsigned long )(& __retres7));
# 1270 "xmlrole.c"
  __retres7 = 58;
# 1270 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(99070, (unsigned long )(& tok), (long long )tok);
# 1272 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(99072, (long long )tmp);
  __CrestStore(99071, (unsigned long )(& tmp));
  __CrestLoad(99073, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(99074, (unsigned long )(& __retres7));
# 1272 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(99075, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(99076);
# 1258 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1277 "xmlrole.c"
static int declClose(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                     ENCODING const *enc )
{
  int tmp ;
  int __retres7 ;

  {
  __CrestCall(99078, 1012);
  __CrestStore(99077, (unsigned long )(& tok));
  {
  {
  __CrestLoad(99081, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99080, (unsigned long )0, (long long )15);
  __CrestApply2(99079, 12, (long long )(tok == 15));
# 1285 "xmlrole.c"
  if (tok == 15) {
    __CrestBranch(99082, 64356, 1);
# 1285 "xmlrole.c"
    goto case_15;
  } else {
    __CrestBranch(99083, 64357, 0);

  }
  }
  {
  __CrestLoad(99086, (unsigned long )(& tok), (long long )tok);
  __CrestLoad(99085, (unsigned long )0, (long long )17);
  __CrestApply2(99084, 12, (long long )(tok == 17));
# 1287 "xmlrole.c"
  if (tok == 17) {
    __CrestBranch(99087, 64359, 1);
# 1287 "xmlrole.c"
    goto case_17;
  } else {
    __CrestBranch(99088, 64360, 0);

  }
  }
# 1284 "xmlrole.c"
  goto switch_break;
  case_15:
  __CrestLoad(99089, (unsigned long )(& state->role_none), (long long )state->role_none);
  __CrestStore(99090, (unsigned long )(& __retres7));
# 1286 "xmlrole.c"
  __retres7 = state->role_none;
# 1286 "xmlrole.c"
  goto return_label;
  case_17:
  {
  __CrestLoad(99093, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(99092, (unsigned long )0, (long long )0);
  __CrestApply2(99091, 13, (long long )(state->documentEntity != 0));
# 1288 "xmlrole.c"
  if (state->documentEntity != 0) {
    __CrestBranch(99094, 64365, 1);
# 1288 "xmlrole.c"
    state->handler = & internalSubset;
  } else {
    __CrestBranch(99095, 64366, 0);
# 1288 "xmlrole.c"
    state->handler = & externalSubset1;
  }
  }
  __CrestLoad(99096, (unsigned long )(& state->role_none), (long long )state->role_none);
  __CrestStore(99097, (unsigned long )(& __retres7));
# 1289 "xmlrole.c"
  __retres7 = state->role_none;
# 1289 "xmlrole.c"
  goto return_label;
  switch_break: ;
  }
  __CrestLoad(99098, (unsigned long )(& tok), (long long )tok);
# 1291 "xmlrole.c"
  tmp = common(state, tok);
  __CrestHandleReturn(99100, (long long )tmp);
  __CrestStore(99099, (unsigned long )(& tmp));
  __CrestLoad(99101, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(99102, (unsigned long )(& __retres7));
# 1291 "xmlrole.c"
  __retres7 = tmp;
  return_label:
  {
  __CrestLoad(99103, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(99104);
# 1277 "xmlrole.c"
  return (__retres7);
  }
}
}
# 1294 "xmlrole.c"
static int error(PROLOG_STATE *state , int tok , char const *ptr , char const *end ,
                 ENCODING const *enc )
{
  int __retres6 ;

  {
  __CrestCall(99106, 1013);
  __CrestStore(99105, (unsigned long )(& tok));
  __CrestLoad(99107, (unsigned long )0, (long long )0);
  __CrestStore(99108, (unsigned long )(& __retres6));
# 1301 "xmlrole.c"
  __retres6 = 0;
  {
  __CrestLoad(99109, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(99110);
# 1294 "xmlrole.c"
  return (__retres6);
  }
}
}
# 1304 "xmlrole.c"
static int common(PROLOG_STATE *state , int tok )
{
  int __retres3 ;

  {
  __CrestCall(99112, 1014);
  __CrestStore(99111, (unsigned long )(& tok));
  {
  __CrestLoad(99115, (unsigned long )(& state->documentEntity), (long long )state->documentEntity);
  __CrestLoad(99114, (unsigned long )0, (long long )0);
  __CrestApply2(99113, 12, (long long )(state->documentEntity == 0));
# 1308 "xmlrole.c"
  if (state->documentEntity == 0) {
    __CrestBranch(99116, 64376, 1);
    {
    __CrestLoad(99120, (unsigned long )(& tok), (long long )tok);
    __CrestLoad(99119, (unsigned long )0, (long long )28);
    __CrestApply2(99118, 12, (long long )(tok == 28));
# 1308 "xmlrole.c"
    if (tok == 28) {
      __CrestBranch(99121, 64377, 1);
      __CrestLoad(99123, (unsigned long )0, (long long )59);
      __CrestStore(99124, (unsigned long )(& __retres3));
# 1309 "xmlrole.c"
      __retres3 = 59;
# 1309 "xmlrole.c"
      goto return_label;
    } else {
      __CrestBranch(99122, 64379, 0);

    }
    }
  } else {
    __CrestBranch(99117, 64380, 0);

  }
  }
# 1311 "xmlrole.c"
  state->handler = & error;
  __CrestLoad(99125, (unsigned long )0, (long long )-1);
  __CrestStore(99126, (unsigned long )(& __retres3));
# 1312 "xmlrole.c"
  __retres3 = -1;
  return_label:
  {
  __CrestLoad(99127, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(99128);
# 1304 "xmlrole.c"
  return (__retres3);
  }
}
}
# 1315 "xmlrole.c"
void XmlPrologStateInit(PROLOG_STATE *state )
{


  {
  __CrestCall(99129, 1015);
# 1318 "xmlrole.c"
  state->handler = & prolog0;
  __CrestLoad(99130, (unsigned long )0, (long long )1);
  __CrestStore(99131, (unsigned long )(& state->documentEntity));
# 1320 "xmlrole.c"
  state->documentEntity = 1;
  __CrestLoad(99132, (unsigned long )0, (long long )0U);
  __CrestStore(99133, (unsigned long )(& state->includeLevel));
# 1321 "xmlrole.c"
  state->includeLevel = 0U;
  __CrestLoad(99134, (unsigned long )0, (long long )0);
  __CrestStore(99135, (unsigned long )(& state->inEntityValue));
# 1322 "xmlrole.c"
  state->inEntityValue = 0;

  {
  __CrestReturn(99136);
# 1315 "xmlrole.c"
  return;
  }
}
}
# 1328 "xmlrole.c"
void XmlPrologStateInitExternalEntity(PROLOG_STATE *state )
{


  {
  __CrestCall(99137, 1016);
# 1331 "xmlrole.c"
  state->handler = & externalSubset0;
  __CrestLoad(99138, (unsigned long )0, (long long )0);
  __CrestStore(99139, (unsigned long )(& state->documentEntity));
# 1332 "xmlrole.c"
  state->documentEntity = 0;
  __CrestLoad(99140, (unsigned long )0, (long long )0U);
  __CrestStore(99141, (unsigned long )(& state->includeLevel));
# 1333 "xmlrole.c"
  state->includeLevel = 0U;

  {
  __CrestReturn(99142);
# 1328 "xmlrole.c"
  return;
  }
}
}
# 1 "elements.o"
#pragma merger("0","./elements.i","-std=gnu99,-g,-O0,-Wall,-Wmissing-prototypes,-Wstrict-prototypes,-fexceptions")
# 170 "/usr/include/stdio.h"
extern struct _IO_FILE *stderr ;
# 356 "/usr/include/stdio.h"
extern int fprintf(FILE * __restrict __stream , char const * __restrict __format
                   , ...) ;
# 580 "/usr/include/stdio.h"
extern int putchar(int __c ) ;
# 695 "/usr/include/stdio.h"
extern int puts(char const *__s ) ;
# 147 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) atoi)(char const *__nptr ) __attribute__((__pure__)) ;
# 27 "elements.c"
int SYMINPUT_SIZE ;
# 29 "elements.c"
void *sym_memcpy(void *dst , void const *src , size_t len )
{
  size_t i ;
  char *d ;
  char const *s ;
  char *mem_7 ;
  char const *mem_8 ;

  {
  __CrestCall(99144, 1017);
  __CrestStore(99143, (unsigned long )(& len));
# 33 "elements.c"
  d = (char *)dst;
# 34 "elements.c"
  s = (char const *)src;
  __CrestLoad(99145, (unsigned long )0, (long long )((size_t )0));
  __CrestStore(99146, (unsigned long )(& i));
# 36 "elements.c"
  i = (size_t )0;
  {
# 36 "elements.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(99149, (unsigned long )(& i), (long long )i);
    __CrestLoad(99148, (unsigned long )(& len), (long long )len);
    __CrestApply2(99147, 16, (long long )(i < len));
# 36 "elements.c"
    if (i < len) {
      __CrestBranch(99150, 64395, 1);

    } else {
      __CrestBranch(99151, 64396, 0);
# 36 "elements.c"
      goto while_break;
    }
    }
# 37 "elements.c"
    mem_7 = d + i;
# 37 "elements.c"
    mem_8 = s + i;
    __CrestLoad(99152, (unsigned long )mem_8, (long long )*mem_8);
    __CrestStore(99153, (unsigned long )mem_7);
# 37 "elements.c"
    *mem_7 = (char )*mem_8;
    __CrestLoad(99156, (unsigned long )(& i), (long long )i);
    __CrestLoad(99155, (unsigned long )0, (long long )1UL);
    __CrestApply2(99154, 0, (long long )(i + 1UL));
    __CrestStore(99157, (unsigned long )(& i));
# 36 "elements.c"
    i ++;
  }
  while_break: ;
  }
  {
  __CrestReturn(99158);
# 40 "elements.c"
  return (dst);
  }
}
}
# 43 "elements.c"
 __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const *Ptr1 ,
                                                                                        void const *Ptr2 ,
                                                                                        size_t Count ) __attribute__((__pure__)) ;
# 43 "elements.c"
int ( __attribute__((__nonnull__(1,2), __leaf__)) memcmp)(void const *Ptr1 , void const *Ptr2 ,
                                                          size_t Count )
{
  int v ;
  char *p1 ;
  char *p2 ;
  char *tmp ;
  char *tmp___0 ;
  size_t tmp___1 ;

  {
  __CrestCall(99160, 1018);
  __CrestStore(99159, (unsigned long )(& Count));
  __CrestLoad(99161, (unsigned long )0, (long long )0);
  __CrestStore(99162, (unsigned long )(& v));
# 46 "elements.c"
  v = 0;
# 47 "elements.c"
  p1 = (char *)Ptr1;
# 48 "elements.c"
  p2 = (char *)Ptr2;
  {
# 50 "elements.c"
  while (1) {
    while_continue: ;
    __CrestLoad(99163, (unsigned long )(& Count), (long long )Count);
    __CrestStore(99164, (unsigned long )(& tmp___1));
# 50 "elements.c"
    tmp___1 = Count;
    __CrestLoad(99167, (unsigned long )(& Count), (long long )Count);
    __CrestLoad(99166, (unsigned long )0, (long long )1UL);
    __CrestApply2(99165, 1, (long long )(Count - 1UL));
    __CrestStore(99168, (unsigned long )(& Count));
# 50 "elements.c"
    Count --;
    {
    __CrestLoad(99171, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestLoad(99170, (unsigned long )0, (long long )0UL);
    __CrestApply2(99169, 14, (long long )(tmp___1 > 0UL));
# 50 "elements.c"
    if (tmp___1 > 0UL) {
      __CrestBranch(99172, 64406, 1);
      {
      __CrestLoad(99176, (unsigned long )(& v), (long long )v);
      __CrestLoad(99175, (unsigned long )0, (long long )0);
      __CrestApply2(99174, 12, (long long )(v == 0));
# 50 "elements.c"
      if (v == 0) {
        __CrestBranch(99177, 64407, 1);

      } else {
        __CrestBranch(99178, 64408, 0);
# 50 "elements.c"
        goto while_break;
      }
      }
    } else {
      __CrestBranch(99173, 64409, 0);
# 50 "elements.c"
      goto while_break;
    }
    }
# 51 "elements.c"
    tmp = p1;
# 51 "elements.c"
    p1 ++;
# 51 "elements.c"
    tmp___0 = p2;
# 51 "elements.c"
    p2 ++;
    __CrestLoad(99181, (unsigned long )tmp, (long long )*tmp);
    __CrestLoad(99180, (unsigned long )tmp___0, (long long )*tmp___0);
    __CrestApply2(99179, 1, (long long )((int )*tmp - (int )*tmp___0));
    __CrestStore(99182, (unsigned long )(& v));
# 51 "elements.c"
    v = (int )*tmp - (int )*tmp___0;
  }
  while_break: ;
  }
  {
  __CrestLoad(99183, (unsigned long )(& v), (long long )v);
  __CrestReturn(99184);
# 54 "elements.c"
  return (v);
  }
}
}
# 58 "elements.c"
static void startElement(void *userData , char const *name , char const **atts )
{
  int i ;
  int *depthPtr ;

  {
  __CrestCall(99185, 1019);
# 62 "elements.c"
  depthPtr = (int *)userData;
  __CrestLoad(99186, (unsigned long )0, (long long )0);
  __CrestStore(99187, (unsigned long )(& i));
# 63 "elements.c"
  i = 0;
  {
# 63 "elements.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(99190, (unsigned long )(& i), (long long )i);
    __CrestLoad(99189, (unsigned long )depthPtr, (long long )*depthPtr);
    __CrestApply2(99188, 16, (long long )(i < *depthPtr));
# 63 "elements.c"
    if (i < *depthPtr) {
      __CrestBranch(99191, 64418, 1);

    } else {
      __CrestBranch(99192, 64419, 0);
# 63 "elements.c"
      goto while_break;
    }
    }
    __CrestLoad(99193, (unsigned long )0, (long long )'\t');
# 64 "elements.c"
    putchar('\t');
    __CrestClearStack(99194);
    __CrestLoad(99197, (unsigned long )(& i), (long long )i);
    __CrestLoad(99196, (unsigned long )0, (long long )1);
    __CrestApply2(99195, 0, (long long )(i + 1));
    __CrestStore(99198, (unsigned long )(& i));
# 63 "elements.c"
    i ++;
  }
  while_break: ;
  }
# 65 "elements.c"
  puts(name);
  __CrestClearStack(99199);
  __CrestLoad(99202, (unsigned long )depthPtr, (long long )*depthPtr);
  __CrestLoad(99201, (unsigned long )0, (long long )1);
  __CrestApply2(99200, 0, (long long )(*depthPtr + 1));
  __CrestStore(99203, (unsigned long )depthPtr);
# 66 "elements.c"
  (*depthPtr) ++;

  {
  __CrestReturn(99204);
# 58 "elements.c"
  return;
  }
}
}
# 69 "elements.c"
static void endElement(void *userData , char const *name )
{
  int *depthPtr ;

  {
  __CrestCall(99205, 1020);
# 72 "elements.c"
  depthPtr = (int *)userData;
  __CrestLoad(99208, (unsigned long )depthPtr, (long long )*depthPtr);
  __CrestLoad(99207, (unsigned long )0, (long long )1);
  __CrestApply2(99206, 1, (long long )(*depthPtr - 1));
  __CrestStore(99209, (unsigned long )depthPtr);
# 73 "elements.c"
  (*depthPtr) --;

  {
  __CrestReturn(99210);
# 69 "elements.c"
  return;
  }
}
}
# 76 "elements.c"
static void myDataHandler(void *userData , XML_Char const *s , int len )
{


  {
  __CrestCall(99212, 1021);
  __CrestStore(99211, (unsigned long )(& len));

  {
  __CrestReturn(99213);
# 76 "elements.c"
  return;
  }
}
}
# 82 "elements.c"
static void myCommentHandler(void *userData , XML_Char const *s )
{


  {
  __CrestCall(99214, 1022);


  {
  __CrestReturn(99215);
# 82 "elements.c"
  return;
  }
}
}
# 88 "elements.c"
static void myDefaultHandler(void *userdata , XML_Char const *s , int len )
{


  {
  __CrestCall(99217, 1023);
  __CrestStore(99216, (unsigned long )(& len));

  {
  __CrestReturn(99218);
# 88 "elements.c"
  return;
  }
}
}
# 94 "elements.c"
int myUnknownEncodingHandler(void *a , XML_Char const *b , XML_Encoding *info )
{
  int __retres4 ;

  {
  __CrestCall(99219, 1024);

  __CrestLoad(99220, (unsigned long )0, (long long )0);
  __CrestStore(99221, (unsigned long )(& __retres4));
# 97 "elements.c"
  __retres4 = 0;
  {
  __CrestLoad(99222, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(99223);
# 94 "elements.c"
  return (__retres4);
  }
}
}
# 100 "elements.c"
static void myVoidHandler(void *userdata )
{


  {
  __CrestCall(99224, 1025);


  {
  __CrestReturn(99225);
# 100 "elements.c"
  return;
  }
}
}
# 106 "elements.c"
static void myNamespaceDeclHandler(void *userData , XML_Char const *prefix , XML_Char const *uri )
{


  {
  __CrestCall(99226, 1026);


  {
  __CrestReturn(99227);
# 106 "elements.c"
  return;
  }
}
}
# 113 "elements.c"
static void myUnparsedEntityDeclHandler(void *userData , XML_Char const *entityName ,
                                        XML_Char const *base , XML_Char const *systemId ,
                                        XML_Char const *publicId , XML_Char const *notationName )
{


  {
  __CrestCall(99228, 1027);


  {
  __CrestReturn(99229);
# 113 "elements.c"
  return;
  }
}
}
# 123 "elements.c"
static void myProcessingInstruction(void *userData , XML_Char const *target , XML_Char const *data )
{


  {
  __CrestCall(99230, 1028);


  {
  __CrestReturn(99231);
# 123 "elements.c"
  return;
  }
}
}
# 130 "elements.c"
int main(int argc , char **argv )
{
  char *buf ;
  char a ;
  XML_Parser parser ;
  XML_Parser tmp ;
  int depth ;
  void *tmp___0 ;
  enum XML_Status tmp___1 ;
  char **mem_11 ;
  int __retres12 ;

  {
  __globinit_stdout();
  __CrestCall(99233, 1029);
  __CrestStore(99232, (unsigned long )(& argc));
  __CrestLoad(99234, (unsigned long )0, (long long )((char )'A'));
  __CrestStore(99235, (unsigned long )(& a));
# 134 "elements.c"
  a = (char )'A';
  __CrestLoad(99236, (unsigned long )0, (long long )((XML_Char )":"));
# 135 "elements.c"
  tmp = XML_ParserCreateNS("UTF-8", (XML_Char )":");
  __CrestClearStack(99237);
# 135 "elements.c"
  parser = tmp;
  __CrestLoad(99238, (unsigned long )0, (long long )0);
  __CrestStore(99239, (unsigned long )(& depth));
# 137 "elements.c"
  depth = 0;
# 138 "elements.c"
  XML_SetUserData(parser, (void *)(& depth));
  __CrestClearStack(99240);
# 139 "elements.c"
  XML_SetElementHandler(parser, & startElement, & endElement);
  __CrestClearStack(99241);
# 140 "elements.c"
  XML_SetCharacterDataHandler(parser, & myDataHandler);
  __CrestClearStack(99242);
# 141 "elements.c"
  XML_SetCommentHandler(parser, & myCommentHandler);
  __CrestClearStack(99243);
# 142 "elements.c"
  XML_SetDefaultHandler(parser, & myDefaultHandler);
  __CrestClearStack(99244);
# 143 "elements.c"
  XML_SetUnknownEncodingHandler(parser, & myUnknownEncodingHandler, (void *)(& a));
  __CrestClearStack(99245);
# 144 "elements.c"
  XML_SetCdataSectionHandler(parser, & myVoidHandler, & myVoidHandler);
  __CrestClearStack(99246);
  __CrestLoad(99247, (unsigned long )0, (long long )((enum XML_ParamEntityParsing )2));
# 145 "elements.c"
  XML_SetParamEntityParsing(parser, (enum XML_ParamEntityParsing )2);
  __CrestClearStack(99248);
# 146 "elements.c"
  XML_GetSpecifiedAttributeCount(parser);
  __CrestClearStack(99249);
# 147 "elements.c"
  XML_SetNamespaceDeclHandler(parser, & myNamespaceDeclHandler, (void (*)(void *userData ,
                                                                          XML_Char const *prefix ))(& myNamespaceDeclHandler));
  __CrestClearStack(99250);
# 148 "elements.c"
  XML_SetUnparsedEntityDeclHandler(parser, & myUnparsedEntityDeclHandler);
  __CrestClearStack(99251);
# 149 "elements.c"
  XML_SetProcessingInstructionHandler(parser, & myProcessingInstruction);
  __CrestClearStack(99252);
# 151 "elements.c"
  mem_11 = argv + 2;
# 151 "elements.c"
  SYMINPUT_SIZE = atoi((char const *)*mem_11);
  __CrestHandleReturn(99254, (long long )SYMINPUT_SIZE);
  __CrestStore(99253, (unsigned long )(& SYMINPUT_SIZE));
  __CrestLoad(99255, (unsigned long )(& SYMINPUT_SIZE), (long long )SYMINPUT_SIZE);
# 152 "elements.c"
  tmp___0 = malloc((size_t )SYMINPUT_SIZE);
  __CrestClearStack(99256);
# 152 "elements.c"
  buf = (char *)tmp___0;
  __CrestLoad(99257, (unsigned long )(& SYMINPUT_SIZE), (long long )SYMINPUT_SIZE);
  __CrestLoad(99258, (unsigned long )0, (long long )1);
# 154 "elements.c"
  tmp___1 = XML_Parse(parser, (char const *)buf, SYMINPUT_SIZE, 1);
  __CrestHandleReturn(99260, (long long )tmp___1);
  __CrestStore(99259, (unsigned long )(& tmp___1));
  __CrestLoad(99263, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(99262, (unsigned long )0, (long long )0U);
  __CrestApply2(99261, 12, (long long )((unsigned int )tmp___1 == 0U));
# 154 "elements.c"
  if ((unsigned int )tmp___1 == 0U) {
    __CrestBranch(99264, 64446, 1);
# 155 "elements.c"
    fprintf((FILE * __restrict )stderr, (char const * __restrict )"PARSE ERROR:%s\n",
            buf);
    __CrestClearStack(99266);
    __CrestLoad(99267, (unsigned long )0, (long long )1);
    __CrestStore(99268, (unsigned long )(& __retres12));
# 162 "elements.c"
    __retres12 = 1;
# 162 "elements.c"
    goto return_label;
  } else {
    __CrestBranch(99265, 64449, 0);

  }
# 164 "elements.c"
  XML_ParserFree(parser);
  __CrestClearStack(99269);
  __CrestLoad(99270, (unsigned long )0, (long long )0);
  __CrestStore(99271, (unsigned long )(& __retres12));
# 165 "elements.c"
  __retres12 = 0;
  return_label:
  {
  __CrestLoad(99272, (unsigned long )(& __retres12), (long long )__retres12);
  __CrestReturn(99273);
# 130 "elements.c"
  return (__retres12);
  }
}
}
void __globinit_stdout(void)
{


  {
  __CrestInit();
}
}
