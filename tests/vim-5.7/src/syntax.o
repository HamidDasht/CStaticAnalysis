#pragma merger("0","/tmp/cil-DVpoaCVp.i","-g,-O2,-Wall,-O0")
# 1 "syntax.c"
# 1 "/home/ubuntu/Desktop/devenv/tests/vim-5.7/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "syntax.c"
# 13 "syntax.c"
# 1 "vim.h" 1
# 20 "vim.h"
# 1 "config.h" 1
# 21 "vim.h" 2
# 59 "vim.h"
# 1 "feature.h" 1
# 60 "vim.h" 2
# 89 "vim.h"
# 1 "os_unix.h" 1
# 21 "os_unix.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 640 "/usr/include/stdio.h" 3 4

# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 942 "/usr/include/stdio.h" 3 4

# 22 "os_unix.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 23 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 24 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 237 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 262 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 283 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));
# 320 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 441 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 25 "os_unix.h" 2


# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 321 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 774 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 950 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 28 "os_unix.h" 2
# 42 "os_unix.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));





extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4

# 43 "os_unix.h" 2







# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 76 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 264 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/signal.h" 3 4


extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/signal.h" 3 4

# 127 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 207 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];
# 92 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));
# 362 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));




# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 51 "os_unix.h" 2
# 118 "os_unix.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 208 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 244 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 245 "/usr/include/dirent.h" 2 3 4
# 254 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 324 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 401 "/usr/include/dirent.h" 3 4

# 119 "os_unix.h" 2
# 138 "os_unix.h"
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 223 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/time.h" 3 4

# 139 "os_unix.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 142 "os_unix.h" 2
# 169 "os_unix.h"
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 58 "/usr/include/errno.h" 3 4

# 170 "os_unix.h" 2



# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 4)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (2, 3, 5)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 166 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
   __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 187 "/usr/include/pwd.h" 3 4

# 174 "os_unix.h" 2
# 339 "os_unix.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 123 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 277 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 392 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 658 "/usr/include/string.h" 3 4

# 340 "os_unix.h" 2


# 1 "/usr/include/strings.h" 1 3 4
# 343 "os_unix.h" 2
# 90 "vim.h" 2
# 110 "vim.h"
# 1 "osdef.h" 1
# 70 "osdef.h"

# 70 "osdef.h"
extern void (*sigset (int, void (*func) (int))) (int);
# 111 "vim.h" 2
# 165 "vim.h"
typedef unsigned char char_u;
typedef unsigned short short_u;
typedef unsigned int int_u;
typedef unsigned long long_u;






# 1 "ascii.h" 1
# 176 "vim.h" 2
# 1 "keymap.h" 1
# 121 "keymap.h"
enum key_extra
{
    KE_NAME = 3,

    KE_S_UP,
    KE_S_DOWN,

    KE_S_F1,
    KE_S_F2,
    KE_S_F3,
    KE_S_F4,
    KE_S_F5,
    KE_S_F6,
    KE_S_F7,
    KE_S_F8,
    KE_S_F9,
    KE_S_F10,

    KE_S_F11,
    KE_S_F12,
    KE_S_F13,
    KE_S_F14,
    KE_S_F15,
    KE_S_F16,
    KE_S_F17,
    KE_S_F18,
    KE_S_F19,
    KE_S_F20,

    KE_S_F21,
    KE_S_F22,
    KE_S_F23,
    KE_S_F24,
    KE_S_F25,
    KE_S_F26,
    KE_S_F27,
    KE_S_F28,
    KE_S_F29,
    KE_S_F30,

    KE_S_F31,
    KE_S_F32,
    KE_S_F33,
    KE_S_F34,
    KE_S_F35,

    KE_MOUSE,





    KE_LEFTMOUSE,
    KE_LEFTDRAG,
    KE_LEFTRELEASE,
    KE_MIDDLEMOUSE,
    KE_MIDDLEDRAG,
    KE_MIDDLERELEASE,
    KE_RIGHTMOUSE,
    KE_RIGHTDRAG,
    KE_RIGHTRELEASE,

    KE_IGNORE,

    KE_TAB,
    KE_S_TAB,

    KE_SNIFF,

    KE_XF1,
    KE_XF2,
    KE_XF3,
    KE_XF4,
    KE_XEND,
    KE_XHOME,

    KE_LEFTMOUSE_NM,
    KE_LEFTRELEASE_NM,

    KE_S_XF1,
    KE_S_XF2,
    KE_S_XF3,
    KE_S_XF4,

    KE_MOUSEDOWN,
    KE_MOUSEUP,

    KE_KINS,
    KE_KDEL,

    KE_CSI
};
# 177 "vim.h" 2
# 1 "term.h" 1
# 28 "term.h"
enum SpecialKey
{
    KS_NAME = 0,
    KS_CE,
    KS_AL,
    KS_CAL,
    KS_DL,
    KS_CDL,
    KS_CS,
    KS_CL,
    KS_CD,
    KS_DA,
    KS_DB,
    KS_VI,
    KS_VE,
    KS_VS,
    KS_ME,
    KS_MR,
    KS_MD,
    KS_SE,
    KS_SO,
    KS_CZH,
    KS_CZR,
    KS_UE,
    KS_US,
    KS_MS,
    KS_CM,
    KS_SR,
    KS_CRI,
    KS_VB,
    KS_KS,
    KS_KE,
    KS_TI,
    KS_TE,
    KS_BC,
    KS_CCS,
    KS_CCO,
    KS_CSF,
    KS_CSB,
    KS_XS,
    KS_MB,
    KS_CAF,
    KS_CAB,
    KS_LE,
    KS_ND,
    KS_CIS,
    KS_CIE,
    KS_TS,
    KS_FS,
    KS_CWP,
    KS_CWS,
    KS_CRV,
    KS_OP
};
# 93 "term.h"
extern char_u *(term_strings[]);
# 178 "vim.h" 2
# 1 "macros.h" 1
# 179 "vim.h" 2
# 590 "vim.h"
enum auto_event
{
    EVENT_BUFCREATE = 0,
    EVENT_BUFDELETE,
    EVENT_BUFENTER,
    EVENT_BUFFILEPOST,
    EVENT_BUFFILEPRE,
    EVENT_BUFLEAVE,
    EVENT_BUFNEWFILE,
    EVENT_BUFREADPOST,
    EVENT_BUFREADPRE,
    EVENT_BUFUNLOAD,
    EVENT_BUFHIDDEN,
    EVENT_BUFWRITEPOST,
    EVENT_BUFWRITEPRE,
    EVENT_FILEAPPENDPOST,
    EVENT_FILEAPPENDPRE,
    EVENT_FILECHANGEDSHELL,
    EVENT_FILEREADPOST,
    EVENT_FILEREADPRE,
    EVENT_FILETYPE,
    EVENT_FILEWRITEPOST,
    EVENT_FILEWRITEPRE,
    EVENT_FILTERREADPOST,
    EVENT_FILTERREADPRE,
    EVENT_FILTERWRITEPOST,
    EVENT_FILTERWRITEPRE,
    EVENT_FOCUSGAINED,
    EVENT_FOCUSLOST,
    EVENT_GUIENTER,
    EVENT_STDINREADPOST,
    EVENT_STDINREADPRE,
    EVENT_SYNTAX,
    EVENT_TERMCHANGED,
    EVENT_USER,
    EVENT_VIMENTER,
    EVENT_VIMLEAVE,
    EVENT_VIMLEAVEPRE,
    EVENT_WINENTER,
    EVENT_WINLEAVE,
    EVENT_FILEENCODING,
    EVENT_CURSORHOLD,
    NUM_EVENTS
};

typedef enum auto_event EVENT_T;





enum hlf_value
{
    HLF_8 = 0,
    HLF_AT,
    HLF_D,
    HLF_E,
    HLF_H,
    HLF_I,
    HLF_L,
    HLF_M,
    HLF_CM,
    HLF_N,
    HLF_R,
    HLF_S,
    HLF_SNC,
    HLF_T,
    HLF_V,
    HLF_VNC,
    HLF_W,
    HLF_WM,
    HLF_COUNT
};
# 809 "vim.h"
typedef long linenr_t;
typedef unsigned colnr_t;
# 827 "vim.h"
void mch_memmove (void *, void *, size_t);
# 884 "vim.h"
# 1 "regexp.h" 1
# 19 "regexp.h"
typedef struct
{
    char_u *startp[10];
    char_u *endp[10];
    char_u regstart;
    char_u reganch;
    char_u *regmust;
    int regmlen;
    char_u program[1];
} vim_regexp;
# 885 "vim.h" 2
# 1 "structs.h" 1
# 26 "structs.h"
typedef struct fpos FPOS;

struct fpos
{
    linenr_t lnum;
    colnr_t col;
};
# 56 "structs.h"
struct filemark
{
    FPOS mark;
    int fnum;
};




struct taggy
{
    char_u *tagname;
    struct filemark fmark;
    int cur_match;
};
# 82 "structs.h"
typedef struct window WIN;
typedef struct winfpos WINFPOS;

struct winfpos
{
    WINFPOS *wl_next;
    WINFPOS *wl_prev;
    WIN *wl_win;
    FPOS wl_fpos;
};





struct u_entry
{
    struct u_entry *ue_next;
    linenr_t ue_top;
    linenr_t ue_bot;
    linenr_t ue_lcount;
    char_u **ue_array;
    long ue_size;
};

struct u_header
{
    struct u_header *uh_next;
    struct u_header *uh_prev;
    struct u_entry *uh_entry;
    FPOS uh_cursor;
    int uh_flags;
    FPOS uh_namedm[26];
};
# 133 "structs.h"
typedef struct m_info info_t;




struct m_info
{

    long_u m_size;



    info_t *m_next;
};




struct m_block
{
    struct m_block *mb_next;
    info_t mb_info;
};






struct growarray
{
    int ga_len;
    int ga_room;
    int ga_itemsize;
    int ga_growsize;
    void *ga_data;
};





typedef struct block_hdr BHDR;
typedef struct memfile MEMFILE;
typedef long blocknr_t;
# 194 "structs.h"
struct block_hdr
{
    BHDR *bh_next;
    BHDR *bh_prev;
    BHDR *bh_hash_next;
    BHDR *bh_hash_prev;
    blocknr_t bh_bnum;
    char_u *bh_data;
    int bh_page_count;



    char bh_flags;
};







typedef struct nr_trans NR_TRANS;

struct nr_trans
{
    NR_TRANS *nt_next;
    NR_TRANS *nt_prev;
    blocknr_t nt_old_bnum;
    blocknr_t nt_new_bnum;
};
# 232 "structs.h"
struct memfile
{
    char_u *mf_fname;
    char_u *mf_ffname;
    int mf_fd;
    BHDR *mf_free_first;
    BHDR *mf_used_first;
    BHDR *mf_used_last;
    unsigned mf_used_count;
    unsigned mf_used_count_max;
    BHDR *mf_hash[64];
    NR_TRANS *mf_trans[64];
    blocknr_t mf_blocknr_max;
    blocknr_t mf_blocknr_min;
    blocknr_t mf_neg_count;
    blocknr_t mf_infile_count;
    unsigned mf_page_size;
    int mf_dirty;
};




typedef struct info_pointer IPTR;






struct info_pointer
{
    blocknr_t ip_bnum;
    linenr_t ip_low;
    linenr_t ip_high;
    int ip_index;
};


typedef struct ml_chunksize
{
    int mlcs_numlines;
    int mlcs_totalsize;
} ML_CHUNKSIZE;
# 284 "structs.h"
typedef struct memline MEMLINE;




struct memline
{
    linenr_t ml_line_count;

    MEMFILE *ml_mfp;





    int ml_flags;

    IPTR *ml_stack;
    int ml_stack_top;
    int ml_stack_size;

    linenr_t ml_line_lnum;
    char_u *ml_line_ptr;

    BHDR *ml_locked;
    linenr_t ml_locked_low;
    linenr_t ml_locked_high;
    int ml_locked_lineadd;

    ML_CHUNKSIZE *ml_chunksize;
    int ml_numchunks;
    int ml_usedchunks;

};





struct keyentry
{
    struct keyentry *next;
    int syn_inc_tag;
    short syn_id;
    short *next_list;
    short flags;
    char_u keyword[1];
};




struct syn_state
{
    struct growarray sst_ga;
    short *sst_next_list;

    int sst_next_flags;
};





struct attr_entry
{
    short ae_attr;
    union
    {
 struct
 {
     char_u *start;
     char_u *stop;
 } term;
 struct
 {
     char_u fg_color;
     char_u bg_color;
 } cterm;
# 371 "structs.h"
    } ae_u;
};
# 382 "structs.h"
typedef struct buffer BUF;

struct buffer
{
    MEMLINE b_ml;


    BUF *b_next;
    BUF *b_prev;

    int b_changed;




    int b_nwindows;

    int b_flags;







    char_u *b_ffname;
    char_u *b_sfname;
    char_u *b_fname;


    int b_dev;
    ino_t b_ino;
# 422 "structs.h"
    int b_fnum;
    WINFPOS *b_winfpos;


    long b_mtime;
    long b_mtime_read;

    FPOS b_namedm[26];


    FPOS b_visual_start;
    FPOS b_visual_end;
    int b_visual_mode;

    FPOS b_last_cursor;





    char b_chartab[256];




    FPOS b_op_start;
    FPOS b_op_end;


    int b_marks_read;





    struct u_header *b_u_oldhead;
    struct u_header *b_u_newhead;
    struct u_header *b_u_curhead;
    int b_u_numhead;
    int b_u_synced;




    char_u *b_u_line_ptr;
    linenr_t b_u_line_lnum;
    colnr_t b_u_line_colnr;




    struct m_block b_block_head;
    info_t *b_m_search;

    struct m_block *b_mb_current;

    int b_scanned;
# 487 "structs.h"
    int b_p_initialized;
    int b_p_ai, b_p_ro, b_p_lisp;
    int b_p_inf;

    char_u *b_p_cpt;

    int b_p_bin, b_p_eol, b_p_et, b_p_ml, b_p_tx, b_p_swf;

    int b_p_sn;


    long b_p_sw, b_p_sts, b_p_ts, b_p_tw, b_p_wm;
    char_u *b_p_ff, *b_p_fo;

    char_u *b_p_com;

    char_u *b_p_isk;




    char_u *b_p_key;

    char_u *b_p_nf;
    char_u *b_p_mps;


    long b_p_wm_nobin, b_p_tw_nobin;
    int b_p_ml_nobin, b_p_et_nobin;


    int b_p_ai_save, b_p_lisp_save;
    long b_p_tw_save, b_p_wm_save, b_p_sts_save;


    int b_p_si, b_p_si_save;


    int b_p_cin;
    int b_p_cin_save;
    char_u *b_p_cino;
    char_u *b_p_cink;


    char_u *b_p_cinw;


    char_u *b_p_syn;


    char_u *b_p_ft;






    int b_start_ffc;


    struct growarray b_vars;






    int b_may_swap;
    int b_did_warn;

    int b_help;


    int b_shortname;
# 577 "structs.h"
    struct keyentry **b_keywtab;
    struct keyentry **b_keywtab_ic;
    int b_syn_ic;
    struct growarray b_syn_patterns;
    struct growarray b_syn_clusters;
    int b_syn_sync_flags;
    short b_syn_sync_id;
    long b_syn_sync_minlines;
    long b_syn_sync_maxlines;
    char_u *b_syn_linecont_pat;
    vim_regexp *b_syn_linecont_prog;
    int b_syn_linecont_ic;
    int b_syn_topgrp;
# 601 "structs.h"
    struct syn_state *b_syn_states;
    int b_syn_states_len;
    linenr_t b_syn_states_lnum;
    linenr_t b_syn_change_lnum;

};






struct window
{
    BUF *w_buffer;

    WIN *w_prev;
    WIN *w_next;

    FPOS w_cursor;





    int w_valid;
    FPOS w_valid_cursor;

    colnr_t w_valid_leftcol;






    int w_wrow, w_wcol;





    int w_cline_height;

    int w_cline_row;

    colnr_t w_virtcol;






    colnr_t w_curswant;




    int w_set_curswant;






    linenr_t w_old_cursor_lnum;
    colnr_t w_old_cursor_fcol;
    colnr_t w_old_cursor_lcol;
    linenr_t w_old_visual_lnum;
    colnr_t w_old_curswant;

    linenr_t w_topline;

    linenr_t w_botline;

    int w_empty_rows;

    int w_winpos;
    int w_height;

    int w_status_height;

    int w_redr_status;
    int w_redr_type;


    FPOS w_ru_cursor;
    colnr_t w_ru_virtcol;
    linenr_t w_ru_topline;
    char w_ru_empty;

    colnr_t w_leftcol;

    colnr_t w_skipcol;






    int w_lsize_valid;
    linenr_t *w_lsize_lnum;
    char_u *w_lsize;

    int w_alt_fnum;

    int w_arg_idx;

    int w_arg_idx_invalid;






    int w_p_list,
  w_p_nu,






  w_p_wrap;

    int w_p_lbr;

    long w_p_scroll;


    int w_p_scb;
    long w_scbind_pos;

    int w_preview;


    struct growarray w_vars;







    FPOS w_pcmark;
    FPOS w_prev_pcmark;




    struct filemark w_jumplist[50];
    int w_jumplistlen;
    int w_jumplistidx;







    struct taggy w_tagstack[20];
    int w_tagstackidx;
    int w_tagstacklen;







    int w_fraction;
    int w_prev_fraction_row;
# 789 "structs.h"
};




typedef struct oparg
{
    int op_type;
    int regname;
    int motion_type;
    int inclusive;

    int end_adjusted;

    FPOS start;
    FPOS end;
    long line_count;

    int empty;

    int is_VIsual;
    int block_mode;
    colnr_t start_vcol;
    colnr_t end_vcol;
} OPARG;




typedef struct cmdarg
{
    OPARG *oap;
    int prechar;
    int cmdchar;
    int nchar;
    int extra_char;
    long count0;
    long count1;
} CMDARG;
# 886 "structs.h"
typedef struct VimMenu
{
    int modes;
    char_u *name;
    char_u *dname;
    int mnemonic;
    char_u *actext;
    int priority;



    char_u *strings[6];
    int noremap[6];
    struct VimMenu *children;
    struct VimMenu *next;
# 951 "structs.h"
} VimMenu;
# 886 "vim.h" 2
# 1019 "vim.h"
# 1 "globals.h" 1
# 29 "globals.h"
extern long Rows ;
extern long Columns ;
# 40 "globals.h"
extern char_u *NextScreen ;
extern char_u **LinePointers ;

extern int screen_Rows ;
extern int screen_Columns ;





extern int mod_mask ;
# 61 "globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;

extern int cmdline_crypt ;

extern int exec_from_reg ;

extern int modified ;

extern int tag_modified ;

extern int screen_cleared ;







extern colnr_t dollar_vcol ;




extern int expand_context ;
extern char_u *expand_pattern ;
extern int expand_set_path ;





extern int completion_length ;
extern int continue_status ;
extern int completion_interrupted ;
# 116 "globals.h"
extern int msg_col;
extern int msg_row;




extern int msg_scrolled;

extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;
extern int did_emsg;
extern int emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;

extern int quit_more ;
extern int more_back ;
extern int more_back_used ;

extern int newline_on_exit ;
extern int intr_char ;

extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;





extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_t sourcing_lnum ;

extern int scroll_region ;
extern int highlight_match ;
extern int search_match_len;
extern int no_smartcase ;
extern int need_check_timestamps ;
extern int highlight_attr[HLF_COUNT];




extern int highlight_user[9];

extern int highlight_stlnc[9];





extern int cterm_normal_fg_color ;
extern int cterm_normal_fg_bold ;
extern int cterm_normal_bg_color ;


extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;



extern BUF *au_new_curbuf ;






extern int mouse_row;
extern int mouse_col;
extern int mouse_past_bottom ;
extern int mouse_past_eol ;
extern int mouse_dragging ;
# 228 "globals.h"
extern VimMenu *root_menu ;




extern int sys_menu ;
# 277 "globals.h"
extern WIN *firstwin;
extern WIN *lastwin;
extern WIN *curwin;





extern BUF *firstbuf ;
extern BUF *lastbuf ;
extern BUF *curbuf ;




extern char_u **arg_files;
extern int arg_file_count;
extern int arg_had_last ;

extern int ru_col;

extern int ru_wid;

extern int sc_col;





extern int starting ;


extern int exiting ;

extern int full_screen ;



extern int restricted ;

extern int secure ;




extern int silent_mode ;



extern FPOS VIsual;
extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;



extern int VIsual_mode ;

extern int redo_VIsual_busy ;







extern FPOS where_paste_started;
# 354 "globals.h"
extern int did_ai ;





extern colnr_t ai_col ;
# 369 "globals.h"
extern int end_comment_pending ;
# 379 "globals.h"
extern int did_syncbind ;







extern int did_si ;





extern int can_si ;





extern int can_si_back ;





extern FPOS Insstart;





extern int orig_line_count ;
extern int vr_lines_changed ;
extern colnr_t vr_virtcol ;
extern int vr_virtoffset ;
# 448 "globals.h"
extern int State ;




extern int exmode_active ;
extern int ex_no_reprint ;

extern int Recording ;
extern int Exec_reg ;

extern int finish_op ;

extern int no_mapping ;
extern int allow_keys ;

extern int no_u_sync ;

extern int restart_edit ;
extern int arrow_used;




extern char_u *edit_submode ;
extern char_u *edit_submode_extra ;
extern enum hlf_value edit_submode_highl;
extern int ctrl_x_mode ;


extern int no_abbr ;

extern int fo_do_comments ;
# 504 "globals.h"
extern int confirm ;
extern int swap_exists_action ;



extern char_u *IObuff;
extern char_u *NameBuff;

extern char_u msg_buf[80];

extern int RedrawingDisabled ;






extern int readonlymode ;
extern int recoverymode ;

extern char_u *typebuf ;
extern int typebuflen;
extern int typeoff;
extern int typelen;
extern int KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern char_u chartab[256];

extern int must_redraw ;
extern int skip_redraw ;
extern int do_redraw ;

extern int need_highlight_changed ;
extern char_u *use_viminfo ;


extern FILE *scriptin[15];
extern int curscript ;
extern FILE *scriptout ;
extern int read_cmd_fd ;

extern int got_int ;




extern int termcap_active ;
extern int bangredo ;
extern int searchcmdlen;
extern int reg_ic ;
extern int reg_syn ;

extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int undo_off ;
extern int global_busy ;
extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *new_last_cmdline ;

extern char_u *autocmd_fname ;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;


extern int postponed_split ;
extern int g_do_tagpreview ;

extern int replace_offset ;

extern char_u *escape_chars ;


extern char_u *help_save_isk ;
extern long help_save_ts ;
extern int keep_help_flag ;






extern char_u *empty_option ;





extern int redir_off ;
extern FILE *redir_fd ;

extern int redir_reg ;







extern int save_p_ls ;
extern int wild_menu_showing ;
# 620 "globals.h"
extern char breakat_flags[256];



extern char *Version;
extern char *mediumVersion;



extern char *longVersion;
# 638 "globals.h"
extern char_u *default_vim_dir;
extern char_u *default_vimruntime_dir;
extern char_u *all_cflags;
extern char_u *all_lflags;



extern char_u *compiled_user;
extern char_u *compiled_sys;



extern int lcs_eol ;
extern int lcs_ext ;
extern int lcs_tab1 ;
extern int lcs_tab2 ;
extern int lcs_trail ;

extern char_u no_lines_msg[] ;


extern char_u wim_flags[4];





extern int stl_syntax ;




extern int no_hlsearch ;
# 705 "globals.h"
extern char_u e_abort[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_curdir[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;

extern char_u e_invexpr2[] ;

extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;

extern char_u e_letunexp[] ;

extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;



extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;

extern char_u e_nogvim[] ;


extern char_u e_nohebrew[] ;


extern char_u e_nofarsi[] ;

extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[] ;
extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notcreate[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notread[] ;
extern char_u e_nowrtmsg[] ;
extern char_u e_null[] ;

extern char_u e_number[] ;


extern char_u e_openerrf[] ;

extern char_u e_outofmem[] ;

extern char_u e_patnotf[] ;

extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;

extern char_u e_quickfix[] ;

extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[] ;

extern char_u e_readonlyvar[] ;


extern char_u e_readerrf[] ;

extern char_u e_scroll[] ;
extern char_u e_tagformat[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_toombra[] ;
extern char_u e_toomket[] ;
extern char_u e_toomsbra[] ;



extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_umark[] ;
extern char_u e_unknown[] ;
extern char_u e_write[] ;
extern char_u e_zerocount[] ;
# 1020 "vim.h" 2
# 1 "option.h" 1
# 254 "option.h"
extern int p_aw;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bsdir;





extern char_u *p_breakat;




extern long p_ch;

extern int p_confirm;

extern int p_cp;
extern char_u *p_cpo;






extern char_u *p_def;

extern char_u *p_dict;


extern int p_dg;

extern char_u *p_dir;
extern char_u *p_dy;
extern int p_ed;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;

extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;


extern char_u *p_ei;

extern int p_ek;
extern int p_exrc;
extern char_u *p_ffs;
extern char_u *p_fp;
extern int p_gd;
# 326 "option.h"
extern char_u *p_hf;
extern long p_hh;
extern int p_hid;
extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
# 341 "option.h"
extern int p_icon;
extern char_u *p_iconstring;

extern int p_ic;
extern int p_is;
extern int p_im;
extern char_u *p_inc;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_kp;
extern char_u *p_km;



extern long p_ls;
extern char_u *p_lcs;

extern int p_lz;
extern int p_magic;

extern char_u *p_mef;
extern char_u *p_mp;

extern long p_mat;

extern long p_mfd;

extern long p_mmd;
extern long p_mm;
extern long p_mmt;
extern long p_mls;
extern char_u *p_mouse;




extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pm;
extern char_u *p_path;
extern int p_remap;
extern long p_report;
extern long p_pvh;
# 398 "option.h"
extern int p_ru;


extern char_u *p_ruf;

extern long p_sj;
extern long p_so;

extern char_u *p_sbo;

extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;

extern char_u *p_sessopt;

extern char_u *p_sh;
extern char_u *p_shcf;

extern char_u *p_sp;

extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_srr;







extern char_u *p_stl;

extern int p_sr;
extern char_u *p_shm;

extern char_u *p_sbr;


extern int p_sc;

extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_sws;
extern char_u *p_swb;
extern int p_tbs;
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_terse;
extern int p_ta;
extern int p_to;
extern int p_timeout;
extern long p_tm;

extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;

extern int p_ttimeout;
extern long p_ttm;
extern int p_tbi;
extern int p_tf;



extern long p_ttyscroll;
extern char_u *p_ttym;
extern long p_ul;
extern long p_uc;
extern long p_ut;

extern char_u *p_viminfo;

extern int p_vb;
extern long p_verbose;
extern int p_warn;





extern char_u *p_wig;

extern int p_wiv;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern char_u *p_wim;

extern int p_wmnu;

extern long p_wh;
extern long p_wmh;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;
# 1021 "vim.h" 2
# 1 "ex_cmds.h" 1
# 78 "ex_cmds.h"
enum CMD_index

{
    CMD_append,
    CMD_abbreviate,
    CMD_abclear,
    CMD_all,
    CMD_amenu,
    CMD_anoremenu,
    CMD_args,
    CMD_argument,
    CMD_ascii,
    CMD_autocmd,
    CMD_augroup,
    CMD_aunmenu,
    CMD_buffer,
    CMD_bNext,
    CMD_ball,
    CMD_badd,
    CMD_bdelete,
    CMD_behave,
    CMD_blast,
    CMD_bmodified,
    CMD_bnext,
    CMD_bprevious,
    CMD_brewind,
    CMD_break,
    CMD_browse,
    CMD_buffers,
    CMD_bunload,
    CMD_change,
    CMD_cNext,
    CMD_cabbrev,
    CMD_cabclear,
    CMD_call,
    CMD_cc,
    CMD_cd,
    CMD_center,
    CMD_cfile,
    CMD_chdir,
    CMD_checkpath,
    CMD_clist,
    CMD_clast,
    CMD_close,
    CMD_cmap,
    CMD_cmapclear,
    CMD_cmenu,
    CMD_cnext,
    CMD_cnewer,
    CMD_cnfile,
    CMD_cnoremap,
    CMD_cnoreabbrev,
    CMD_cnoremenu,
    CMD_copy,
    CMD_colder,
    CMD_command,
    CMD_comclear,
    CMD_continue,
    CMD_confirm,
    CMD_cprevious,
    CMD_cquit,
    CMD_crewind,
    CMD_cscope,
    CMD_cstag,
    CMD_cunmap,
    CMD_cunabbrev,
    CMD_cunmenu,
    CMD_delete,
    CMD_delcommand,
    CMD_delfunction,
    CMD_display,
    CMD_digraphs,
    CMD_djump,
    CMD_dlist,
    CMD_doautocmd,
    CMD_doautoall,
    CMD_dsearch,
    CMD_dsplit,
    CMD_edit,
    CMD_echo,
    CMD_echohl,
    CMD_echon,
    CMD_else,
    CMD_elseif,
    CMD_exemenu,
    CMD_endif,
    CMD_endfunction,
    CMD_endwhile,
    CMD_ex,
    CMD_execute,
    CMD_exit,
    CMD_file,
    CMD_files,
    CMD_filetype,
    CMD_find,
    CMD_fixdel,
    CMD_function,
    CMD_global,
    CMD_goto,
    CMD_grep,
    CMD_gui,
    CMD_gvim,
    CMD_help,
    CMD_helpfind,
    CMD_highlight,
    CMD_hide,
    CMD_history,
    CMD_insert,
    CMD_iabbrev,
    CMD_iabclear,
    CMD_if,
    CMD_ijump,
    CMD_ilist,
    CMD_imap,
    CMD_imapclear,
    CMD_imenu,
    CMD_inoremap,
    CMD_inoreabbrev,
    CMD_inoremenu,
    CMD_intro,
    CMD_isearch,
    CMD_isplit,
    CMD_iunmap,
    CMD_iunabbrev,
    CMD_iunmenu,
    CMD_join,
    CMD_jumps,
    CMD_k,
    CMD_list,
    CMD_last,
    CMD_left,
    CMD_let,
    CMD_ls,
    CMD_move,
    CMD_mark,
    CMD_make,
    CMD_map,
    CMD_mapclear,
    CMD_marks,
    CMD_menu,
    CMD_messages,

    CMD_mkexrc,
    CMD_mksession,
    CMD_mkvimrc,
    CMD_mode,
    CMD_next,
    CMD_new,
    CMD_nmap,
    CMD_nmapclear,
    CMD_nmenu,
    CMD_nnoremap,
    CMD_nnoremenu,
    CMD_noremap,
    CMD_nohlsearch,
    CMD_noreabbrev,
    CMD_noremenu,
    CMD_normal,
    CMD_number,
    CMD_nunmap,
    CMD_nunmenu,
    CMD_open,
    CMD_omap,
    CMD_omapclear,
    CMD_omenu,
    CMD_only,
    CMD_onoremap,
    CMD_onoremenu,
    CMD_options,
    CMD_ounmap,
    CMD_ounmenu,
    CMD_print,
    CMD_pclose,
    CMD_perl,
    CMD_perldo,
    CMD_pop,
    CMD_ppop,
    CMD_preserve,
    CMD_previous,
    CMD_promptfind,
    CMD_promptrepl,
    CMD_ptag,
    CMD_ptNext,
    CMD_ptjump,
    CMD_ptlast,
    CMD_ptnext,
    CMD_ptprevious,
    CMD_ptrewind,
    CMD_ptselect,
    CMD_put,
    CMD_pwd,
    CMD_python,
    CMD_pyfile,
    CMD_quit,
    CMD_qall,
    CMD_read,
    CMD_recover,
    CMD_redo,
    CMD_redir,
    CMD_registers,
    CMD_resize,
    CMD_retab,
    CMD_return,
    CMD_rewind,
    CMD_right,
    CMD_rviminfo,
    CMD_substitute,
    CMD_sNext,
    CMD_sargument,
    CMD_sall,
    CMD_sbuffer,
    CMD_sbNext,
    CMD_sball,
    CMD_sblast,
    CMD_sbmodified,
    CMD_sbnext,
    CMD_sbprevious,
    CMD_sbrewind,
    CMD_set,
    CMD_sfind,
    CMD_shell,



    CMD_sleep,
    CMD_slast,
    CMD_smagic,
    CMD_snext,
    CMD_sniff,
    CMD_snomagic,
    CMD_source,
    CMD_split,
    CMD_sprevious,
    CMD_srewind,
    CMD_stop,
    CMD_stag,
    CMD_startinsert,
    CMD_stjump,
    CMD_stselect,
    CMD_sunhide,
    CMD_suspend,
    CMD_sview,
    CMD_swapname,
    CMD_syntax,
    CMD_syncbind,
    CMD_t,
    CMD_tNext,
    CMD_tag,
    CMD_tags,
    CMD_tcl,
    CMD_tcldo,
    CMD_tclfile,
    CMD_tearoff,
    CMD_tjump,
    CMD_tlast,
    CMD_tmenu,
    CMD_tnext,
    CMD_tprevious,
    CMD_trewind,
    CMD_tselect,
    CMD_tunmenu,
    CMD_undo,
    CMD_unabbreviate,
    CMD_unhide,
    CMD_unlet,
    CMD_unmap,
    CMD_unmenu,
    CMD_update,
    CMD_vglobal,
    CMD_version,
    CMD_visual,
    CMD_view,
    CMD_vmap,
    CMD_vmapclear,
    CMD_vmenu,
    CMD_vnoremap,
    CMD_vnoremenu,
    CMD_vunmap,
    CMD_vunmenu,
    CMD_write,
    CMD_wNext,
    CMD_wall,
    CMD_while,
    CMD_winsize,
    CMD_winpos,
    CMD_wnext,
    CMD_wprevious,
    CMD_wq,
    CMD_wqall,
    CMD_wviminfo,
    CMD_xit,
    CMD_xall,
    CMD_yank,
    CMD_z,


    CMD_bang,
    CMD_pound,
    CMD_and,
    CMD_star,
    CMD_lshift,
    CMD_equal,
    CMD_rshift,
    CMD_at,
    CMD_Next,
    CMD_Print,
    CMD_X,
    CMD_tilde,



    CMD_SIZE,
    CMD_USER = -1




};


typedef enum CMD_index CMDIDX;




typedef struct exarg
{
    char_u *arg;
    char_u *nextcmd;
    char_u *cmd;
    CMDIDX cmdidx;
    long argt;
    int skip;
    int forceit;
    int addr_count;
    linenr_t line1;
    linenr_t line2;
    char_u *do_ecmd_cmd;
    linenr_t do_ecmd_lnum;
    int append;
    int usefilter;
    int amount;
    int regname;

    int useridx;

} EXARG;
# 1022 "vim.h" 2
# 1 "proto.h" 1
# 30 "proto.h"
# 1 "proto/os_unix.pro" 1

void mch_write (char_u *s, int len) __attribute((crest_skip));
int mch_inchar (char_u *buf, int maxlen, long wtime);
int mch_char_avail (void);
long_u mch_avail_mem (int special);
void mch_delay (long msec, int ignoreinput);
void mch_suspend (void);
void mch_windinit (void);
void reset_signals (void);
int mch_check_win (int argc, char **argv);
int mch_input_isatty (void);
int mch_can_restore_title (void);
int mch_can_restore_icon (void);
void mch_settitle (char_u *title, char_u *icon);
void mch_restore_title (int which);
int vim_is_xterm (char_u *name);
int use_xterm_mouse (void);
int vim_is_iris (char_u *name);
int vim_is_fastterm (char_u *name);
int mch_get_user_name (char_u *s, int len);
int mch_get_uname (uid_t uid, char_u *s, int len);
void mch_get_host_name (char_u *s, int len);
long mch_get_pid (void);
int mch_dirname (char_u *buf, int len);
void slash_adjust (char_u *p);
int mch_FullName (char_u *fname, char_u *buf, int len, int force);
int mch_isFullName (char_u *fname);
long mch_getperm (char_u *name);
int mch_setperm (char_u *name, long perm);
void mch_hide (char_u *name);
int mch_isdir (char_u *name);
void mch_windexit (int r);
void mch_settmode (int tmode);
void get_stty (void);
void mch_setmouse (int on);
void check_mouse_termcode (void);
int mch_screenmode (char_u *arg);
int mch_get_winsize (void);
void mch_set_winsize (void);
int mch_call_shell (char_u *cmd, int options);
void mch_breakcheck (void);
int mch_expandpath (struct growarray *gap, char_u *path, int flags);
int mch_expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int mch_has_wildcard (char_u *p);
void setup_xterm_clip (void);
void start_xterm_trace (int button);
void stop_xterm_trace (void);
void clear_xterm_clip (void);
int clip_xterm_own_selection (void);
void clip_xterm_lose_selection (void);
void clip_xterm_request_selection (void);
void clip_xterm_set_selection (void);
# 31 "proto.h" 2
# 54 "proto.h"
# 1 "proto/buffer.pro" 1

int open_buffer (int read_stdin);
int buf_valid (BUF *buf);
void close_buffer (WIN *win, BUF *buf, int free_buf, int del_buf);
void buf_clear (BUF *buf);
void buf_freeall (BUF *buf, int del_buf);
char_u *do_bufdel (int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit);
int do_buffer (int action, int start, int dir, int count, int forceit);
void enter_buffer (BUF *buf);
BUF *buflist_new (char_u *ffname, char_u *sfname, linenr_t lnum, int use_curbuf);
void free_buf_options (BUF *buf, int free_p_ff);
int buflist_getfile (int n, linenr_t lnum, int options, int forceit);
void buflist_getfpos (void);
BUF *buflist_findname (char_u *ffname);
int buflist_findpat (char_u *pattern, char_u *pattern_end);
int ExpandBufnames (char_u *pat, int *num_file, char_u ***file, int options);
BUF *buflist_findnr (int nr);
char_u *buflist_nr2name (int n, int fullname, int helptail);
FPOS *buflist_findfpos (BUF *buf);
linenr_t buflist_findlnum (BUF *buf);
void buflist_list (void);
int buflist_name_nr (int fnum, char_u **fname, linenr_t *lnum);
int setfname (char_u *ffname, char_u *sfname, int message);
void setaltfname (char_u *ffname, char_u *sfname, linenr_t lnum);
char_u *getaltfname (int errmsg);
int buflist_add (char_u *fname);
void buflist_altfpos (void);
int otherfile (char_u *ffname);
void fileinfo (int fullname, int shorthelp, int dont_truncate);
void cursor_pos_info (void);
void col_print (char_u *buf, int col, int vcol);
void maketitle (void);
void resettitle (void);
int append_arg_number (WIN *wp, char_u *buf, int add_file, int maxlen);
char_u *fix_fname (char_u *fname);
void fname_expand (char_u **ffname, char_u **sfname);
void do_arg_all (int count, int forceit);
void do_buffer_all (int count, int all);
void do_modelines (void);
int read_viminfo_bufferlist (char_u *line, FILE *fp, int writing);
void write_viminfo_bufferlist (FILE *fp);
# 55 "proto.h" 2
# 1 "proto/charset.pro" 1

int init_chartab (void);
void trans_characters (char_u *buf, int bufsize);
char_u *transstr (char_u *s);
char_u *transchar (int c);
void transchar_nonprint (char_u *buf, int c);
int charsize (int c);
int vim_strsize (char_u *s);
int chartabsize (int c, colnr_t col);
int linetabsize (char_u *s);
int win_linetabsize (WIN *wp, char_u *s);
int vim_isIDc (int c);
int vim_iswordc (int c);
int vim_iswordc_buf (int c, BUF *buf);
int vim_isfilec (int c);
int vim_isprintc (int c);
int safe_vim_isprintc (int c);
int lbr_chartabsize (unsigned char *s, colnr_t col);
int win_lbr_chartabsize (WIN *wp, unsigned char *s, colnr_t col, int *head);
void getvcol (WIN *wp, FPOS *pos, colnr_t *start, colnr_t *cursor, colnr_t *end);
void getvcols (FPOS *pos1, FPOS *pos2, colnr_t *left, colnr_t *right);
char_u *skipwhite (char_u *p);
char_u *skipdigits (char_u *p);
int vim_isdigit (int c);
char_u *skiptowhite (char_u *p);
char_u *skiptowhite_esc (char_u *p);
long getdigits (char_u **pp);
int vim_isblankline (char_u *lbuf);
void vim_str2nr (char_u *start, int *hexp, int *len, int dooct, int dohex, long *nptr, unsigned long *unptr);
int hex2nr (int c);
# 56 "proto.h" 2

# 1 "proto/if_cscope.pro" 1

void do_cscope (EXARG *eap);
void do_cstag (EXARG *eap);
int cs_fgets (char_u *buf, int size);
void cs_free_tags (void);
void cs_print_tags (void);
# 58 "proto.h" 2

# 1 "proto/digraph.pro" 1

int do_digraph (int c);
int getdigraph (int char1, int char2, int meta);
void putdigraph (char_u *str);
void listdigraphs (void);
# 60 "proto.h" 2
# 1 "proto/edit.pro" 1

int edit (int cmdchar, int startln, long count);
void display_dollar (colnr_t col);
void change_indent (int type, int amount, int round, int replaced);
void truncate_spaces (char_u *line);
void backspace_until_column (int col);
int vim_is_ctrl_x_key (int c);
int ins_compl_add_infercase (char_u *str, int len, char_u *fname, int dir, int reuse);
void ins_compl_check_keys (void);
int get_literal (void);
void insertchar (unsigned c, int force_formatting, int second_indent, int ctrlv);
int comp_textwidth (int ff);
void stop_arrow (void);
void set_last_insert (int c);
void beginline (int flags);
int oneright (void);
int oneleft (void);
int cursor_up (long n, int upd_topline);
int cursor_down (long n, int upd_topline);
int stuff_inserted (int c, long count, int no_esc);
char_u *get_last_insert (void);
char_u *get_last_insert_save (void);
void replace_push (int c);
int get_replace_stack_virtcol (void);
void fixthisline (int (*get_the_indent)(void));
int in_cinkeys (int keytyped, int when, int line_is_empty);
int hkmap (int c);
void ins_scroll (void);
void ins_horscroll (void);
# 61 "proto.h" 2
# 1 "proto/eval.pro" 1

void set_internal_string_var (char_u *name, char_u *value);
int eval_to_bool (char_u *arg, int *error, char_u **nextcmd, int skip);
char_u *eval_to_string (char_u *arg, char_u **nextcmd);
void do_let (EXARG *eap);
void set_context_for_expression (char_u *arg, CMDIDX cmdidx);
void do_call (EXARG *eap);
void do_unlet (char_u *arg, int forceit);
char_u *get_user_var_name (int idx);
char_u *get_function_name (int idx);
char_u *get_expr_name (int idx);
void set_vim_var_nr (int idx, long val);
void set_vim_var_string (int idx, char_u *val);
void var_init (struct growarray *gap);
void var_clear (struct growarray *gap);
void do_echo (EXARG *eap, int echo);
void do_echohl (char_u *arg);
void do_execute (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
void do_function (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
char_u *get_user_func_name (int idx);
void do_delfunction (char_u *arg);
void *save_funccal (void);
void restore_funccal (void *fc);
void do_return (EXARG *eap);
char_u *get_func_line (int c, void *cookie, int indent);
int func_has_ended (void *cookie);
int func_has_abort (void *cookie);
int read_viminfo_varlist (char_u *line, FILE *fp, int writing);
void write_viminfo_varlist (FILE *fp);
int store_session_globals (FILE *fd);
int modify_fname (char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen);
char_u *do_string_sub (char_u *str, char_u *pat, char_u *sub, char_u *flags);
# 62 "proto.h" 2
# 1 "proto/ex_cmds.pro" 1

void do_ascii (void);
void do_align (EXARG *eap);
void do_retab (EXARG *eap);
int do_move (linenr_t line1, linenr_t line2, linenr_t dest);
void do_copy (linenr_t line1, linenr_t line2, linenr_t n);
void do_bang (int addr_count, linenr_t line1, linenr_t line2, int forceit, char_u *arg, int do_in, int do_out);
void do_shell (char_u *cmd, int flags);
char_u *make_filter_cmd (char_u *cmd, char_u *itmp, char_u *otmp);
int viminfo_error (char *message, char_u *line);
int read_viminfo (char_u *file, int want_info, int want_marks, int forceit);
void write_viminfo (char_u *file, int forceit);
char_u *viminfo_readstring (char_u *p, FILE *fp);
void viminfo_writestring (FILE *fd, char_u *p);
void do_fixdel (void);
void print_line_no_prefix (linenr_t lnum, int use_number);
void print_line (linenr_t lnum, int use_number);
void do_file (char_u *arg, int forceit);
int do_write (EXARG *eap);
void do_wnext (EXARG *eap);
void do_wqall (EXARG *eap);
int not_writing (void);
int getfile (int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_t lnum, int forceit);
int do_ecmd (int fnum, char_u *ffname, char_u *sfname, char_u *command, linenr_t newlnum, int flags);
void do_append (linenr_t lnum, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_change (linenr_t start, linenr_t end, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_z (linenr_t line, char_u *arg);
int check_restricted (void);
int check_secure (void);
void do_sub (EXARG *eap);
void do_glob (EXARG *eap);
int read_viminfo_sub_string (char_u *line, FILE *fp, int force);
void write_viminfo_sub_string (FILE *fp);
void prepare_tagpreview (void);
void do_help (EXARG *eap);
int help_heuristic (char_u *matched_string, int offset, int wrong_case);
int find_help_tags (char_u *arg, int *num_matches, char_u ***matches);
# 63 "proto.h" 2
# 1 "proto/ex_docmd.pro" 1

void do_exmode (void);
int do_cmdline (char_u *cmdline, char_u *(*getline)(int, void *, int), void *cookie, int flags);
char_u *set_one_cmd_context (char_u *buff);
int expand_filename (EXARG *eap, char_u **cmdlinep, char_u **errormsgp);
void separate_nextcmd (EXARG *eap);
int autowrite (BUF *buf, int forceit);
void autowrite_all (void);
int check_changed (BUF *buf, int checkaw, int mult_win, int forceit, int allbuf);
void dialog_changed (BUF *buf, int checkall);
int can_abandon (BUF *buf, int forceit);
int check_changed_any (int hidden);
int check_fname (void);
int buf_write_all (BUF *buf);
int rem_backslash (char_u *str);
void backslash_halve (char_u *p);
char_u *backslash_halve_save (char_u *p);
void check_arg_idx (WIN *win);
int ends_excmd (int c);
char_u *find_nextcmd (char_u *p);
char_u *check_nextcmd (char_u *p);
int do_source (char_u *fname, int check_other, int is_vimrc);
char *fgets_cr (char *s, int n, FILE *stream);
char_u *getsourceline (int c, void *cookie, int indent);
char_u *get_command_name (int idx);
char_u *get_user_commands (int idx);
char_u *get_user_cmd_flags (int idx);
char_u *get_user_cmd_nargs (int idx);
char_u *get_user_cmd_complete (int idx);
void not_exiting (void);
void do_argfile (EXARG *eap, int argn);
void handle_drop (int filec, char_u **filev, int split);
char_u *eval_vars (char_u *src, int *usedlen, linenr_t *lnump, char_u **errormsg, char_u *srcstart);
char_u *expand_sfile (char_u *arg);
int put_eol (FILE *fd);
void dialog_msg (char_u *buff, char *format, char_u *fname);
# 64 "proto.h" 2
# 1 "proto/ex_getln.pro" 1

char_u *getcmdline (int firstc, long count, int indent);
char_u *getcmdline_prompt (int firstc, char_u *prompt, int attr);
char_u *getexline (int c, void *dummy, int indent);
char_u *getexmodeline (int c, void *dummy, int indent);
int cmdline_overstrike (void);
int cmdline_at_end (void);
int put_on_cmdline (char_u *str, int len, int redraw);
void redrawcmdline (void);
void compute_cmdrow (void);
void gotocmdline (int clr);
char_u *ExpandOne (char_u *str, char_u *orig, int options, int mode);
void tilde_replace (char_u *orig_pat, int num_files, char_u **files);
char_u *addstar (char_u *fname, int len, int context);
int ExpandGeneric (vim_regexp *prog, int *num_file, char_u ***file, char_u *((*func)(int)));
int get_histtype (char_u *name);
void add_to_history (int histype, char_u *new_entry, int in_map);
int get_history_idx (int histype);
char_u *get_history_entry (int histype, int idx);
int clr_history (int histype);
int del_history_entry (int histype, char_u *str);
int del_history_idx (int histype, int idx);
void remove_key_from_history (void);
int get_list_range (char_u **str, int *num1, int *num2);
void do_history (char_u *arg);
void prepare_viminfo_history (int asklen);
int read_viminfo_history (char_u *line, FILE *fp);
void finish_viminfo_history (void);
void write_viminfo_history (FILE *fp);
void cmd_pchar (int c, int offset);
int cmd_gchar (int offset);
# 65 "proto.h" 2
# 1 "proto/fileio.pro" 1

void filemess (BUF *buf, char_u *name, char_u *s, int attr);
int readfile (char_u *fname, char_u *sfname, linenr_t from, linenr_t lines_to_skip, linenr_t lines_to_read, int flags);
int buf_write (BUF *buf, char_u *fname, char_u *sfname, linenr_t start, linenr_t end, int append, int forceit, int reset_changed, int filtering);
char_u *shorten_fname (char_u *full_path, char_u *dir_name);
void shorten_fnames (int force);
char_u *modname (char_u *fname, char_u *ext, int prepend_dot);
char_u *buf_modname (int shortname, char_u *fname, char_u *ext, int prepend_dot);
int vim_fgets (char_u *buf, int size, FILE *fp);
int vim_rename (char_u *from, char_u *to);
void check_timestamps (int focus);
int buf_check_timestamp (BUF *buf, int focus);
void write_lnum_adjust (linenr_t offset);
char_u *vim_tempname (int extra_char);
void do_augroup (char_u *arg);
int check_ei (void);
void do_autocmd (char_u *arg, int forceit);
int do_doautocmd (char_u *arg, int do_msg);
void do_autoall (char_u *arg);
int apply_autocmds (EVENT_T event, char_u *fname, char_u *fname_io, int force, BUF *buf);
int has_cursorhold (void);
char_u *get_augroup_name (int idx);
char_u *set_context_in_autocmd (char_u *arg, int doautocmd);
char_u *get_event_name (int idx);
int match_file_pat (char_u *pattern, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs);
char_u *file_pat_to_reg_pat (char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash);
# 66 "proto.h" 2
# 1 "proto/getchar.pro" 1

char_u *get_recorded (void);
char_u *get_inserted (void);
int stuff_empty (void);
void flush_buffers (int typeahead);
void ResetRedobuff (void);
void saveRedobuff (void);
void restoreRedobuff (void);
void AppendToRedobuff (char_u *s);
void AppendCharToRedobuff (int c);
void AppendNumberToRedobuff (long n);
void stuffReadbuff (char_u *s);
void stuffcharReadbuff (int c);
void stuffnumReadbuff (long n);
int start_redo (long count, int old_redo);
int start_redo_ins (void);
void stop_redo_ins (void);
int ins_typebuf (char_u *str, int noremap, int offset, int nottyped);
int typebuf_typed (void);
int typebuf_maplen (void);
void del_typebuf (int len, int offset);
int save_typebuf (void);
int openscript (char_u *name);
int using_script (void);
void updatescript (int c);
int vgetc (void);
int safe_vgetc (void);
int vpeekc (void);
int char_avail (void);
void vungetc (int c);
int inchar (char_u *buf, int maxlen, long wait_time);
int do_map (int maptype, char_u *keys, int mode, int abbrev, char_u **ambig);
int get_map_mode (char_u **cmdp, int forceit);
void map_clear (char_u *cmdp, int forceit, int abbr);
char_u *set_context_in_map_cmd (char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, CMDIDX cmdidx);
int ExpandMappings (vim_regexp *prog, int *num_file, char_u ***file);
int check_abbr (int c, char_u *ptr, int col, int mincol);
int makemap (FILE *fd);
int putescstr (FILE *fd, char_u *str, int set);
void check_map_keycodes (void);
char_u *check_map (char_u *keys, int mode, int exact);
void init_mappings (void);
# 67 "proto.h" 2



# 1 "proto/main.pro" 1

int process_env (char_u *env, int is_viminit);
void getout (int r);
int toF_TyA (int c);
int fkmap (int c);
void conv_to_pvim (void);
void conv_to_pstd (void);
char_u *lrswap (char_u *ibuf);
char_u *lrFswap (char_u *cmdbuf, int len);
char_u *lrF_sub (char_u *ibuf);
int cmdl_fkmap (int c);
int F_isalpha (int c);
int F_isdigit (int c);
int F_ischar (int c);
void farsi_fkey (int c);
# 71 "proto.h" 2
# 1 "proto/mark.pro" 1

int setmark (int c);
void setpcmark (void);
void checkpcmark (void);
FPOS *movemark (int count);
FPOS *getmark (int c, int changefile);
void fmarks_check_names (BUF *buf);
int check_mark (FPOS *pos);
void clrallmarks (BUF *buf);
char_u *fm_getname (struct filemark *fmark, int lead_len);
void do_marks (char_u *arg);
void do_jumps (void);
void mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
void set_last_cursor (WIN *win);
int read_viminfo_filemark (char_u *line, FILE *fp, int force);
void write_viminfo_filemarks (FILE *fp);
int removable (char_u *name);
int write_viminfo_marks (FILE *fp_out);
void copy_viminfo_marks (char_u *line, FILE *fp_in, FILE *fp_out, int count, int eof);
# 72 "proto.h" 2

void



smsg (char_u *, ...);
void



smsg_attr (int, char_u *, ...);

# 1 "proto/memfile.pro" 1

MEMFILE *mf_open (char_u *fname, int trunc_file);
int mf_open_file (MEMFILE *mfp, char_u *fname);
void mf_close (MEMFILE *mfp, int del_file);
void mf_close_file (BUF *buf, int getlines);
BHDR *mf_new (MEMFILE *mfp, int negative, int page_count);
BHDR *mf_get (MEMFILE *mfp, blocknr_t nr, int page_count);
void mf_put (MEMFILE *mfp, BHDR *hp, int dirty, int infile);
void mf_free (MEMFILE *mfp, BHDR *hp);
int mf_sync (MEMFILE *mfp, int flags);
int mf_release_all (void);
blocknr_t mf_trans_del (MEMFILE *mfp, blocknr_t old_nr);
void mf_set_ffname (MEMFILE *mfp);
void mf_fullname (MEMFILE *mfp);
int mf_need_trans (MEMFILE *mfp);
# 85 "proto.h" 2
# 1 "proto/memline.pro" 1

int ml_open (void);
void ml_setname (void);
void ml_open_files (void);
void ml_open_file (BUF *buf);
void check_need_swap (int newfile);
void ml_close (BUF *buf, int del_file);
void ml_close_all (int del_file);
void ml_close_notmod (void);
void ml_timestamp (BUF *buf);
void ml_recover (void);
int recover_names (char_u **fname, int list, int nr);
void ml_sync_all (int check_file, int check_char);
void ml_preserve (BUF *buf, int message);
char_u *ml_get (linenr_t lnum);
char_u *ml_get_pos (FPOS *pos);
char_u *ml_get_curline (void);
char_u *ml_get_cursor (void);
char_u *ml_get_buf (BUF *buf, linenr_t lnum, int will_change);
int ml_line_alloced (void);
int ml_append (linenr_t lnum, char_u *line, colnr_t len, int newfile);
int ml_replace (linenr_t lnum, char_u *line, int copy);
int ml_delete (linenr_t lnum, int message);
void ml_setmarked (linenr_t lnum);
linenr_t ml_firstmarked (void);
void ml_clearmarked (void);
char_u *get_file_in_dir (char_u *fname, char_u *dname);
void ml_setdirty (BUF *buf, int flag);
long ml_find_line_or_offset (BUF *buf, linenr_t line, long *offp);
void goto_byte (long cnt);
# 86 "proto.h" 2

# 1 "proto/menu.pro" 1

void do_menu (EXARG *eap);
char_u *set_context_in_menu_cmd (char_u *cmd, char_u *arg, int forceit);
char_u *get_menu_name (int idx);
char_u *get_menu_names (int idx);
char_u *menu_name_skip (char_u *name);
int get_menu_index (VimMenu *menu, int state);
int menubar_menu (char_u *name);
int popup_menu (char_u *name);
int toolbar_menu (char_u *name);
void gui_create_initial_menus (VimMenu *menu, VimMenu *parent);
void gui_update_menus (int modes);
int gui_is_menu_shortcut (int key);
void gui_show_popupmenu (void);
void gui_mch_toggle_tearoffs (int enable);
void execute_menu (char_u *path_name);
int is_menu_separator (char_u *name);
# 88 "proto.h" 2

# 1 "proto/message.pro" 1

int msg (char_u *s);
int msg_attr (char_u *s, int attr);
char_u *msg_strtrunc (char_u *s);
int emsg (char_u *s);
int emsg2 (char_u *s, char_u *a1);
int emsgn (char_u *s, long n);
char_u *msg_trunc_attr (char_u *s, int force, int attr);
char_u *msg_may_trunc (int force, char_u *s);
void ex_messages (void);
void wait_return (int redraw);
void msg_start (void);
void msg_starthere (void);
void msg_putchar (int c);
void msg_putchar_attr (int c, int attr);
void msg_outnum (long n);
void msg_home_replace (char_u *fname);
void msg_home_replace_hl (char_u *fname);
int msg_outtrans (char_u *str);
int msg_outtrans_attr (char_u *str, int attr);
int msg_outtrans_len (char_u *str, int len);
int msg_outtrans_len_attr (char_u *str, int len, int attr);
void msg_make (char_u *arg);
int msg_outtrans_special (char_u *str, int from);
char_u *str2special (char_u **sp, int from);
void str2specialbuf (char_u *sp, char_u *buf, int len);
void msg_prt_line (char_u *s);
void msg_puts (char_u *s);
void msg_puts_title (char_u *s);
void msg_puts_long (char_u *longstr);
void msg_puts_long_attr (char_u *longstr, int attr);
void msg_puts_long_len_attr (char_u *longstr, int len, int attr);
void msg_puts_attr (char_u *s, int attr);
void msg_moremsg (int full);
void repeat_message (void);
void msg_clr_eos (void);
void msg_clr_cmdline (void);
int msg_end (void);
void msg_check (void);
void give_warning (char_u *message, int hl);
void msg_advance (int col);
int do_dialog (int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton);
void display_confirm_msg (void);
int vim_dialog_yesno (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnocancel (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnoallcancel (int type, char_u *title, char_u *message, int dflt);
char_u *do_browse (int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, BUF *buf);
# 90 "proto.h" 2
# 1 "proto/misc1.pro" 1

int get_indent (void);
int get_indent_lnum (linenr_t lnum);
void set_indent (int size, int del_first);
int open_line (int dir, int redraw, int del_spaces, int old_indent);
int get_leader_len (char_u *line, char_u **flags, int backward);
int plines_check (linenr_t p);
int plines (linenr_t p);
int plines_win (WIN *wp, linenr_t p);
int plines_win_col (WIN *wp, linenr_t p, long column);
int plines_m (linenr_t first, linenr_t last);
int plines_m_win (WIN *wp, linenr_t first, linenr_t last);
void ins_char (int c);
void ins_str (char_u *s);
int del_char (int fixpos);
int del_chars (long count, int fixpos);
int truncate_line (int fixpos);
void del_lines (long nlines, int dowindow, int undo);
int gchar_pos (FPOS *pos);
int gchar_cursor (void);
void pchar_cursor (int c);
int inindent (int extra);
char_u *skip_to_option_part (char_u *p);
char *plural (long n);
void changed (void);
void unchanged (BUF *buf, int ff);
void check_status (BUF *buf);
void change_warning (int col);
int ask_yesno (char_u *str, int direct);
int get_keystroke (void);
int get_number (int colon);
void msgmore (long n);
void beep_flush (void);
void vim_beep (void);
void init_homedir (void);
void expand_env (char_u *src, char_u *dst, int dstlen);
char_u *expand_env_save (char_u *src);
void vim_setenv (char_u *name, char_u *val);
void home_replace (BUF *buf, char_u *src, char_u *dst, int dstlen, int one);
char_u *home_replace_save (BUF *buf, char_u *src);
int fullpathcmp (char_u *s1, char_u *s2, int checkname);
char_u *gettail (char_u *fname);
char_u *getnextcomp (char_u *fname);
char_u *get_past_head (char_u *path);
int vim_ispathsep (int c);
int vim_fnamecmp (char_u *x, char_u *y);
int vim_fnamencmp (char_u *x, char_u *y, size_t len);
char_u *concat_fnames (char_u *fname1, char_u *fname2, int sep);
void add_pathsep (char_u *p);
char_u *FullName_save (char_u *fname, int force);
FPOS *find_start_comment (int ind_maxcomment);
int cin_islabel (int ind_maxcomment);
int cin_iscase (char_u *s);
int cin_isscopedecl (char_u *s);
int get_c_indent (void);
int get_lisp_indent (void);
void preserve_exit (void);
int vim_fexists (char_u *fname);
void line_breakcheck (void);
int expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int match_suffix (char_u *fname);
void addfile (struct growarray *gap, char_u *f, int flags);
char_u *get_cmd_output (char_u *cmd, int flags);
void FreeWild (int num, char_u **file);
int goto_im (void);
# 91 "proto.h" 2
# 1 "proto/misc2.pro" 1

int coladvance (colnr_t wcol);
int inc_cursor (void);
int inc (FPOS *lp);
int incl (FPOS *lp);
int dec_cursor (void);
int dec (FPOS *lp);
int decl (FPOS *lp);
void check_cursor_lnum (void);
void check_cursor_col (void);
void adjust_cursor (void);
void adjust_cursor_col (void);
int leftcol_changed (void);
void vim_mem_profile_dump (void);
char_u *alloc (unsigned size);
char_u *alloc_clear (unsigned size);
char_u *alloc_check (unsigned size);
char_u *lalloc_clear (long_u size, int message);
char_u *lalloc (long_u size, int message);
void *mem_realloc (void *ptr, size_t size);
void do_outofmem_msg (void);
char_u *vim_strsave (char_u *string);
char_u *vim_strnsave (char_u *string, int len);
char_u *vim_strsave_escaped (char_u *string, char_u *esc_chars);
char_u *vim_strsave_up (char_u *string);
char_u *vim_strnsave_up (char_u *string, int len);
void copy_spaces (char_u *ptr, size_t count);
void copy_chars (char_u *ptr, size_t count, int c);
void del_trailing_spaces (char_u *ptr);
void vim_strncpy (char_u *to, char_u *from, int len);
int copy_option_part (char_u **option, char_u *buf, int maxlen, char *sep_chars);
void vim_free (void *x);
int vim_stricmp (char *s1, char *s2);
int vim_strnicmp (char *s1, char *s2, size_t len);
char_u *vim_strchr (char_u *string, int n);
char_u *vim_strrchr (char_u *string, int n);
int vim_isspace (int x);
void ga_clear (struct growarray *gap);
void ga_clear_strings (struct growarray *gap);
void ga_init (struct growarray *gap);
void ga_init2 (struct growarray *gap, int itemsize, int growsize);
int ga_grow (struct growarray *gap, int n);
void ga_concat (struct growarray *gap, char_u *s);
void ga_append (struct growarray *gap, int c);
int name_to_mod_mask (int c);
int simplify_key (int key, int *modifiers);
char_u *get_special_key_name (int c, int modifiers);
int trans_special (char_u **srcp, char_u *dst, int keycode);
int find_special_key (char_u **srcp, int *modp, int keycode);
int find_special_key_in_table (int c);
int get_special_key_code (char_u *name);
char_u *get_key_name (int i);
int get_mouse_button (int code, int *is_click, int *is_drag);
int get_pseudo_mouse_code (int button, int is_click, int is_drag);
int get_fileformat (BUF *buf);
void set_fileformat (int t);
int default_fileformat (void);
int call_shell (char_u *cmd, int opt);
int get_real_state (void);
int vim_chdirfile (char_u *fname);
char_u *parse_guicursor (void);
int get_cursor_idx (void);
int decrypt_byte (void);
int update_keys (int c);
void crypt_init_keys (char_u *passwd);
char_u *get_crypt_key (int store);
int get_user_name (char_u *buf, int len);
# 92 "proto.h" 2






# 1 "proto/normal.pro" 1

void normal_cmd (OPARG *oap, int toplevel);
void do_pending_operator (CMDARG *cap, char_u *searchbuff, int *command_busy, int old_col, int gui_yank, int dont_adjust_op_end);
int do_mouse (OPARG *oap, int c, int dir, long count, int fix_indent);
void check_visual_highlight (void);
void end_visual_mode (void);
int find_ident_under_cursor (char_u **string, int find_type);
void clear_showcmd (void);
int add_to_showcmd (int c);
void add_to_showcmd_c (int c);
void push_showcmd (void);
void pop_showcmd (void);
void do_check_scrollbind (int check);
void check_scrollbind (linenr_t topline_diff, long leftcol_diff);
void scroll_redraw (int up, long count);
void start_selection (void);
void may_start_select (int c);
# 99 "proto.h" 2
# 1 "proto/ops.pro" 1

int get_op_type (int char1, int char2);
int op_on_lines (int op);
int get_op_char (int optype);
int get_extra_op_char (int optype);
void op_shift (OPARG *oap, int curs_top, int amount);
void shift_line (int left, int round, int amount);
void op_reindent (OPARG *oap, int (*how)(void));
int get_expr_register (void);
void set_expr_line (char_u *new_line);
int valid_yank_reg (int regname, int writing);
int yank_register_mline (int regname);
int do_record (int c);
int do_execreg (int regname, int colon, int addcr);
int insert_reg (int regname, int literally);
int cmdline_paste (int regname, int literally);
int op_delete (OPARG *oap);
int op_replace (OPARG *oap, int c);
void op_tilde (OPARG *oap);
void swapchar (int op_type, FPOS *pos);
void op_insert (OPARG *oap, long count1);
int op_change (OPARG *oap);
void init_yank (void);
int op_yank (OPARG *oap, int deleting, int mess);
void do_put (int regname, int dir, long count, int flags);
int get_register_name (int num);
void do_dis (char_u *arg);
void dis_msg (char_u *p, int skip_esc);
void do_do_join (long count, int insert_space, int redraw);
int do_join (int insert_space, int redraw);
void op_format (OPARG *oap);
int do_addsub (int command, linenr_t Prenum1);
int read_viminfo_register (char_u *line, FILE *fp, int force);
void write_viminfo_registers (FILE *fp);
void clip_free_selection (void);
void clip_get_selection (void);
void clip_yank_selection (int type, char_u *str, long len);
int clip_convert_selection (char_u **str, long_u *len);
char_u *get_reg_contents (int regname);
void write_reg_contents (int name, char_u *str);
void clear_oparg (OPARG *oap);
# 100 "proto.h" 2
# 1 "proto/option.pro" 1

void set_init_1 (void);
void set_string_default (char *name, char_u *val);
void set_number_default (char *name, long val);
void set_init_2 (void);
void set_init_3 (void);
void init_gui_options (void);
void set_title_defaults (void);
int do_set (char_u *arg, int modeline);
void set_options_bin (int oldval, int newval);
int get_viminfo_parameter (int type);
char_u *find_viminfo_parameter (int type);
void check_options (void);
void check_buf_options (BUF *buf);
void free_string_option (char_u *p);
void set_term_option_alloced (char_u **p);
void set_string_option_direct (char_u *name, int opt_idx, char_u *val, int dofree);
char_u *check_stl_option (char_u *s);
int get_option_value (char_u *name, long *numval, char_u **stringval);
void set_option_value (char_u *name, long number, char_u *string);
char_u *get_term_code (char_u *tname);
char_u *get_highlight_default (void);
int makeset (FILE *fd);
void clear_termoptions (void);
void set_term_defaults (void);
void comp_col (void);
void win_copy_options (WIN *wp_from, WIN *wp_to);
void buf_copy_options (BUF *bp_from, BUF *bp_to, int flags);
void set_context_in_set_cmd (char_u *arg);
int ExpandSettings (vim_regexp *prog, int *num_file, char_u ***file);
int ExpandOldSetting (int *num_file, char_u ***file);
int has_format_option (int x);
int shortmess (int x);
void vimrc_found (void);
void change_compatible (int on);
int option_was_set (char_u *name);
int can_bs (int what);
# 101 "proto.h" 2
# 1 "proto/quickfix.pro" 1

int qf_init (char_u *efile, char_u *errorformat);
void qf_jump (int dir, int errornr, int forceit);
void qf_list (char_u *arg, int all);
void qf_older (int count);
void qf_newer (int count);
void qf_mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
# 102 "proto.h" 2
# 1 "proto/regexp.pro" 1

char_u *skip_regexp (char_u *p, int dirc, int magic);
vim_regexp *vim_regcomp (char_u *expr, int magic);
int vim_regcomp_had_eol (void);
int vim_regexec (vim_regexp *prog, char_u *string, int at_bol);
char_u *regtilde (char_u *source, int magic);
void vim_regnewptr (vim_regexp *prog, char_u *old_ptr, char_u *new_ptr);
int vim_regsub (vim_regexp *prog, char_u *source, char_u *dest, int copy, int magic);
# 103 "proto.h" 2
# 1 "proto/screen.pro" 1

void update_screenline (void);
void redraw_later (int type);
void redraw_all_later (int type);
void redraw_curbuf_later (int type);
void update_curbuf (int type);
void update_screen (int type);
void updateWindow (WIN *wp);
void update_other_win (void);
void status_redraw_all (void);
void redraw_statuslines (void);
void win_redr_status_matches (int num_matches, char_u **matches, int match);
void win_redr_status (WIN *wp);
int build_stl_str (WIN *wp, char_u *out, char_u *fmt, int fillchar, int maxlen);
void screen_putchar (int c, int row, int col, int attr);
void screen_puts (char_u *text, int row, int col, int attr);
void screen_start (void);
void screen_down (void);
void screen_stop_highlight (void);
void reset_cterm_colors (void);
void screen_fill (int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr);
void screenalloc (int clear);
void screenclear (void);
void update_topline_redraw (void);
void update_topline (void);
void update_curswant (void);
void windgoto (int row, int col);
void setcursor (void);
void scroll_cursor_top (int min_scroll, int always);
void scroll_cursor_bot (int min_scroll, int set_topbot);
void scroll_cursor_halfway (int atend);
void cursor_correct (void);
void changed_cline_bef_curs (void);
void changed_line_abv_curs (void);
void set_topline (WIN *wp, linenr_t lnum);
void validate_botline (void);
void invalidate_botline (void);
void invalidate_botline_win (WIN *wp);
void approximate_botline (void);
int botline_approximated (void);
int cursor_valid (void);
void validate_cursor (void);
void validate_cline_row (void);
int may_validate_crow (void);
void validate_virtcol (void);
void validate_cheight (void);
void validate_cursor_col (void);
void curs_columns (int scroll);
void scrolldown (long line_count);
void scrollup (long line_count);
void scrolldown_clamp (void);
void scrollup_clamp (void);
int win_ins_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
int win_del_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
void win_rest_invalid (WIN *wp);
int screen_del_lines (int off, int row, int line_count, int end, int force);
int showmode (void);
void unshowmode (int force);
void showruler (int always);
void check_for_delay (int check_msg_scroll);
int screen_valid (int clear);
int jump_to_mouse (int flags, int *inclusive);
int get_fpos_of_mouse (FPOS *mpos, WIN **mwin);
int redrawing (void);
int messaging (void);
int onepage (int dir, long count);
void halfpage (int flag, linenr_t Prenum);
void do_intro (void);
# 104 "proto.h" 2
# 1 "proto/search.pro" 1

vim_regexp *search_regcomp (char_u *pat, int pat_save, int pat_use, int options);
char_u *get_search_pat (void);
void save_search_patterns (void);
void restore_search_patterns (void);
void set_reg_ic (char_u *pat);
char_u *last_search_pat (void);
void set_last_search_pat (char_u *s, int idx, int magic, int setlast);
vim_regexp *last_pat_prog (void);
int searchit (BUF *buf, FPOS *pos, int dir, char_u *str, long count, int options, int pat_use);
int do_search (OPARG *oap, int dirc, char_u *str, long count, int options);
int search_for_exact_line (BUF *buf, FPOS *pos, int dir, char_u *pat);
int searchc (int c, int dir, int type, long count);
FPOS *findmatch (OPARG *oap, int initc);
FPOS *findmatchlimit (OPARG *oap, int initc, int flags, int maxtravel);
void showmatch (void);
int findsent (int dir, long count);
int findpar (OPARG *oap, int dir, long count, int what, int both);
int startPS (linenr_t lnum, int para, int both);
int fwd_word (long count, int type, int eol);
int bck_word (long count, int type, int stop);
int end_word (long count, int type, int stop, int empty);
int bckend_word (long count, int type, int eol);
int current_word (OPARG *oap, long count, int include, int type);
int current_sent (OPARG *oap, long count, int include);
int current_block (OPARG *oap, long count, int include, int what, int other);
int current_par (OPARG *oap, long count, int include, int type);
int linewhite (linenr_t lnum);
void find_pattern_in_path (char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_t start_lnum, linenr_t end_lnum);
int read_viminfo_search_pattern (char_u *line, FILE *fp, int force);
void write_viminfo_search_pattern (FILE *fp);
# 105 "proto.h" 2
# 1 "proto/syntax.pro" 1

void syntax_start (WIN *wp, linenr_t lnum);
void syn_changed (linenr_t lnum);
int syntax_check_changed (linenr_t lnum);
int get_syntax_attr (colnr_t col, char_u *line);
void syntax_clear (BUF *buf);
void do_syntax (EXARG *eap, char_u **cmdlinep);
int syntax_present (BUF *buf);
void set_context_in_syntax_cmd (char_u *arg);
char_u *get_syntax_name (int idx);
int syn_get_id (long line, long col, int trans);
void init_highlight (int both);
void do_highlight (char_u *line, int forceit, int init);
void set_normal_colors (void);
void hl_set_font_name (char_u *font_name);
void hl_set_bg_color_name (char_u *name);
void hl_set_fg_color_name (char_u *name);
struct attr_entry *syn_gui_attr2entry (int attr);
struct attr_entry *syn_term_attr2entry (int attr);
struct attr_entry *syn_cterm_attr2entry (int attr);
char_u *highlight_has_attr (int id, int flag, int modec);
char_u *highlight_color (int id, char_u *what, int modec);
int syn_name2id (char_u *name);
int highlight_exists (char_u *name);
int syn_check_group (char_u *pp, int len);
int syn_id2attr (int hl_id);
int syn_id2colors (int hl_id, int *fgp, int *bgp);
int syn_get_final_id (int hl_id);
void highlight_gui_started (void);
int highlight_changed (void);
void set_context_in_highlight_cmd (char_u *arg);
char_u *get_highlight_name (int idx);
void free_highlight_fonts (void);
# 106 "proto.h" 2
# 1 "proto/tag.pro" 1

int do_tag (char_u *tag, int type, int count, int forceit, int verbose);
void tag_freematch (void);
void do_tags (void);
int find_tags (char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount);
void simplify_filename (char_u *filename);
int expand_tags (int tagnames, char_u *pat, int *num_file, char_u ***file);
# 107 "proto.h" 2
# 1 "proto/term.pro" 1

int set_termname (char_u *term);
void set_mouse_termcode (int n, char_u *s);
void del_mouse_termcode (int n);
void getlinecol (void);
int add_termcap_entry (char_u *name, int force);
int term_is_8bit (char_u *name);
int term_is_gui (char_u *name);
char_u *tltoa (unsigned long i);
void termcapinit (char_u *name);
void out_flush (void) __attribute((crest_skip));
void out_trash (void);
void out_char (unsigned c);
void out_str_nf (char_u *s);
void out_str (char_u *s);
void term_windgoto (int row, int col);
void term_cursor_right (int i);
void term_append_lines (int line_count);
void term_delete_lines (int line_count);
void term_set_winpos (int x, int y);
void term_set_winsize (int width, int height);
void term_fg_color (int n);
void term_bg_color (int n);
void term_settitle (char_u *title);
void ttest (int pairs);
void add_long_to_buf (long_u val, char_u *dst);
int get_long_from_buf (char_u *buf, long_u *val);
void check_winsize (void);
void set_winsize (int width, int height, int mustset);
void settmode (int tmode);
void starttermcap (void);
void stoptermcap (void);
int swapping_screen (void);
void setmouse (void);
int mouse_has (int c);
int mouse_model_popup (void);
void scroll_start (void);
void cursor_on (void);
void cursor_off (void);
void scroll_region_set (WIN *wp, int off);
void scroll_region_reset (void);
void clear_termcodes (void);
void add_termcode (char_u *name, char_u *string, int use_8bit);
char_u *find_termcode (char_u *name);
char_u *get_termcode (int i);
void del_termcode (char_u *name);
int check_termcode (int max_offset, char_u *buf, int buflen);
char_u *replace_termcodes (char_u *from, char_u **bufp, int from_part, int do_lt);
int find_term_bykeys (char_u *src);
void show_termcodes (void);
int show_one_termcode (char_u *name, char_u *code, int printit);
char_u *translate_mapping (char_u *str, int expmap);
void update_tcap (int attr);
# 108 "proto.h" 2



# 1 "proto/ui.pro" 1

void ui_write (char_u *s, int len) __attribute((crest_skip));
void ui_inchar_undo (char_u *s, int len);
int ui_inchar (char_u *buf, int maxlen, long wtime);
int ui_char_avail (void);
void ui_delay (long msec, int ignoreinput);
void ui_suspend (void);
void suspend_shell (void);
int ui_get_winsize (void);
void ui_set_winsize (void);
void ui_breakcheck (void);
void clip_init (int can_use);
void clip_update_selection (void);
void clip_own_selection (void);
void clip_lose_selection (void);
void clip_copy_selection (void);
void clip_auto_select (void);
int clip_isautosel (void);
void clip_start_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_process_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_redraw_selection (int x, int y, int w, int h);
void clip_may_redraw_selection (int row, int col);
void clip_clear_selection (void);
void clip_may_clear_selection (int row1, int row2);
void clip_scroll_selection (int rows);
int clip_gen_own_selection (void);
void clip_gen_lose_selection (void);
void clip_gen_set_selection (void);
void clip_gen_request_selection (void);
int vim_is_input_buf_full (void);
int vim_is_input_buf_empty (void);
int vim_free_in_input_buf (void);
int vim_used_in_input_buf (void);
void add_to_input_buf (char_u *s, int len);
void push_raw_key (char_u *s, int len);
void trash_input_buf (void);
int read_from_input_buf (char_u *buf, long maxlen);
void fill_input_buf (int exit_on_error);
void read_error_exit (void);
void ui_cursor_shape (void);
int check_col (int col);
int check_row (int row);
void open_app_context (void);
void x11_setup_atoms (int *dpy);
void clip_x11_request_selection (int myShell, int *dpy);
void clip_x11_lose_selection (int myShell);
int clip_x11_own_selection (int myShell);
void clip_x11_set_selection (void);
# 112 "proto.h" 2
# 1 "proto/undo.pro" 1

int u_save_cursor (void);
int u_save (linenr_t top, linenr_t bot);
int u_savesub (linenr_t lnum);
int u_inssub (linenr_t lnum);
int u_savedel (linenr_t lnum, long nlines);
void u_undo (int count);
void u_redo (int count);
void u_sync (void);
void u_unchanged (BUF *buf);
void u_clearall (BUF *buf);
void u_saveline (linenr_t lnum);
void u_clearline (void);
void u_undoline (void);
void u_blockfree (BUF *buf);
int buf_changed (BUF *buf);
int curbuf_changed (void);
# 113 "proto.h" 2
# 1 "proto/version.pro" 1

void make_version (void);
int highest_patch (void);
void do_version (char_u *arg);
void list_version (void);
# 114 "proto.h" 2
# 1 "proto/window.pro" 1

void do_window (int nchar, long Prenum);
int win_split (int new_height, int redraw, int req_room);
int win_valid (WIN *win);
int win_count (void);
int make_windows (int count);
void win_move_after (WIN *win1, WIN *win2);
void win_equal (WIN *next_curwin, int redraw);
void close_windows (BUF *buf);
void close_window (WIN *win, int free_buf);
void close_others (int message, int forceit);
void win_init (WIN *wp);
WIN *win_goto_nr (int winnr);
void win_enter (WIN *wp, int undo_sync);
WIN *buf_jump_open_win (BUF *buf);
WIN *win_alloc (WIN *after);
void win_free (WIN *wp);
int win_alloc_lsize (WIN *wp);
void win_free_lsize (WIN *wp);
void screen_new_rows (void);
void win_setheight (int height);
void win_setminheight (void);
void win_drag_status_line (int offset);
void win_comp_scroll (WIN *wp);
void command_height (long old_p_ch);
void last_status (void);
char_u *file_name_at_cursor (int options, long count);
char_u *get_file_name_in_path (char_u *line, int col, int options, long count);
char_u *find_file_in_path (char_u *ptr, int len, int options, long count);
int min_rows (void);
int only_one_window (void);
void check_lnums (int do_curwin);
# 115 "proto.h" 2
# 1023 "vim.h" 2
# 14 "syntax.c" 2






struct hl_group
{
    char_u *sg_name;
    char_u *sg_name_u;

    int sg_term;
    char_u *sg_start;
    char_u *sg_stop;
    int sg_term_attr;

    int sg_cterm;
    int sg_cterm_bold;
    int sg_cterm_fg;
    int sg_cterm_bg;
    int sg_cterm_attr;
# 46 "syntax.c"
    int sg_link;
    int sg_set;
};






static struct growarray highlight_ga;





static int include_link = 0;






static char *(hl_name_table[]) =
    {"bold", "standout", "underline", "italic", "reverse", "inverse", "NONE"};
static int hl_attr_table[] =
    {0x02, 0x10, 0x08, 0x04, 0x01, 0x01, 0};

static int get_attr_entry (struct growarray *table, struct attr_entry *aep);
static int syn_namen2id (char_u *linep, int len);
static void syn_unadd_group (void);
static void set_hl_attr (int idx);
static void highlight_list_one (int id);
static int highlight_list_arg (int id, int didh, int type, int iarg, char_u *sarg, char *name);
static int syn_add_group (char_u *name);
static int syn_list_header (int did_header, int outlen, int id);
static void highlight_clear (int idx);
# 109 "syntax.c"
static char *(spo_name_tab[7]) =
     {"ms=", "me=", "hs=", "he=", "rs=", "re=", "lc="};
# 123 "syntax.c"
struct syn_pattern
{
    char sp_type;
    char sp_syncing;
    short sp_flags;
    int sp_syn_inc_tag;
    short sp_syn_id;
    short sp_syn_match_id;
    char_u *sp_pattern;
    vim_regexp *sp_prog;
    int sp_ic;
    short sp_off_flags;
    int sp_offsets[7];
    short *sp_cont_list;
    short *sp_next_list;
    int sp_sync_idx;
    int sp_line_id;
    int sp_startcol;
};
# 180 "syntax.c"
struct buf_state
{
    int bs_idx;
    int bs_flags;
};
# 199 "syntax.c"
static int current_attr = 0;

static int current_id = 0;
static int current_trans_id = 0;


struct syn_cluster
{
    char_u *scl_name;
    char_u *scl_name_u;
    short *scl_list;
};
# 232 "syntax.c"
static char_u **syn_cmdlinep;






static int current_syn_inc_tag = 0;
static int running_syn_inc_tag = 0;






static int keepend_level = -1;





struct state_item
{
    int si_idx;
    int si_id;
    int si_trans_id;
    int si_m_lnum;
    int si_m_startcol;
    int si_m_endcol;
    int si_h_startcol;
    int si_h_endcol;
    int si_eoe_col;
    int si_end_idx;
    int si_ends;
    int si_attr;
    int si_flags;

    short *si_cont_list;
    short *si_next_list;
};
# 284 "syntax.c"
static int next_match_col;
static int next_match_m_endcol;
static int next_match_h_startcol;
static int next_match_h_endcol;
static int next_match_idx;
static int next_match_flags;
static int next_match_eos_col;
static int next_match_eoe_col;
static int next_match_end_idx;
# 304 "syntax.c"
static BUF *syn_buf;
static linenr_t current_lnum = 0;
static int current_state_stored = 0;

static colnr_t current_col = 0;
static int current_finished = 0;
static struct growarray current_state
  = {0, 0, 0, 0, 
# 311 "syntax.c" 3 4
                ((void *)0)
# 311 "syntax.c"
                    };
static short *current_next_list = 
# 312 "syntax.c" 3 4
                                 ((void *)0)
# 312 "syntax.c"
                                     ;
static int current_next_flags = 0;
static int current_line_id = 0;



static void syn_sync (WIN *wp, linenr_t lnum);
static int syn_match_linecont (linenr_t lnum);
static void syn_start_line (void);
static void syn_free_all_states (BUF *buf);
static void syn_clear_states (int start, int end);
static void store_current_state (void);
static void invalidate_current_state (void);
static void validate_current_state (void);
static void copy_state_to_current (struct syn_state *from);
static void move_state (int from, int to);
static int syn_finish_line (int syncing);
static int syn_current_attr (int syncing, char_u *line);
static int did_match_already (int idx);
static struct state_item *push_next_match (struct state_item *cur_si, char_u *line);
static void check_state_ends (char_u *line);
static void update_si_attr (int idx);
static void check_keepend (void);
static void update_si_end (struct state_item *sip, char_u *line, int startcol);
static short *copy_id_list (short *list);
static int in_id_list (short *cont_list, int id, int inclvl, int contained);
static int syn_regexec (vim_regexp *prog, char_u *string, int at_bol);
static int push_current (int idx);
static void pop_current (void);
static char_u *find_endp (int idx, char_u *sstart, int at_bol, char_u **hl_endp, int *flagsp, char_u **end_endp, int *end_idx);
static char_u *syn_add_end_off (struct syn_pattern *spp, int idx, int extra);
static char_u *syn_add_start_off (struct syn_pattern *spp, int idx, int extra);
static int check_keyword_id (char_u *line, int startcol, int *endcol, int *flags, short **next_list, struct state_item *cur_si);
static void syn_cmd_case (EXARG *eap, int syncing);
static void syntax_sync_clear (void);
static void syn_remove_pattern (BUF *buf, int idx);
static void syn_clear_pattern (BUF *buf, int i);
static void syn_clear_cluster (BUF *buf, int i);
static void syn_cmd_clear (EXARG *eap, int syncing);
static void syn_clear_one (int id, int syncing);
static void syn_cmd_on (EXARG *eap, int syncing);
static void syn_cmd_manual (EXARG *eap, int syncing);
static void syn_cmd_off (EXARG *eap, int syncing);
static void syn_cmd_onoff (EXARG *eap, char *name);
static void syn_cmd_list (EXARG *eap, int syncing);
static void syn_lines_msg (void);
static void syn_list_one (int id, int syncing, int link_only);
static void syn_list_cluster (int id);
static void put_id_list (char_u *name, short *list, int attr);
static void put_pattern (char *s, int c, struct syn_pattern *spp, int attr);
static int syn_list_keywords (int id, struct keyentry **ktabp, int did_header, int attr);
static void syn_clear_keyword (int id, struct keyentry **ktabp);
static void free_keywtab (struct keyentry **ktabp);
static void add_keyword (char_u *name, int id, int flags, short *next_list);
static char_u *get_group_name (char_u *arg, char_u **name_end);
static char_u *get_syn_options (char_u *arg, int *flagsp, int *sync_idx, short **cont_list, short **next_list)
                                              ;
static void syn_cmd_include (EXARG *eap, int syncing);
static void syn_cmd_keyword (EXARG *eap, int syncing);
static void syn_cmd_match (EXARG *eap, int syncing);
static void syn_cmd_region (EXARG *eap, int syncing);



static int syn_compare_stub (const void *v1, const void *v2);

static void syn_cmd_cluster (EXARG *eap, int syncing);
static int syn_scl_name2id (char_u *name);
static int syn_scl_namen2id (char_u *linep, int len);
static int syn_check_cluster (char_u *pp, int len);
static int syn_add_cluster (char_u *name);
static void init_syn_patterns (void);
static char_u *get_syn_pattern (char_u *arg, struct syn_pattern *ci);
static void syn_cmd_sync (EXARG *eap, int syncing);
static int get_id_list (char_u **arg, int keylen, short **list);
static void syn_combine_list (short **clstr1, short **clstr2, int list_op);
static void syn_incl_toplevel (int id, int *flagsp);
# 397 "syntax.c"
    void
syntax_start(wp, lnum)
    WIN *wp;
    linenr_t lnum;
{
    long to, from, first;
    long diff;
    int idx;

    reg_syn = 1;




    if (syn_buf != wp->w_buffer)
    {
 invalidate_current_state();
 syn_buf = wp->w_buffer;
    }
# 429 "syntax.c"
    if (syn_buf->b_syn_states_len != Rows + 10)
    {
 syn_free_all_states(syn_buf);
 syn_buf->b_syn_states = (struct syn_state *)alloc_clear(
    (int)((Rows + 10) * sizeof(struct syn_state)));
 if (syn_buf->b_syn_states == 
# 434 "syntax.c" 3 4
                             ((void *)0)
# 434 "syntax.c"
                                 )
 {
     syn_buf->b_syn_states_len = 0;
     goto theend;
 }
 syn_buf->b_syn_states_len = Rows + 10;
 syn_buf->b_syn_states_lnum = 0;
 syn_buf->b_syn_change_lnum = (0x7fffffff);
    }




    if (syn_buf->b_syn_change_lnum != (0x7fffffff))
    {

 if (syn_buf->b_syn_change_lnum <
     syn_buf->b_syn_states_lnum + syn_buf->b_syn_states_len - 1)
 {

     if (syn_buf->b_syn_change_lnum < syn_buf->b_syn_states_lnum)
  idx = 0;
     else
  idx = syn_buf->b_syn_change_lnum -
            syn_buf->b_syn_states_lnum + 1;
     syn_clear_states(idx, syn_buf->b_syn_states_len);
 }
 if (syn_buf->b_syn_change_lnum <= current_lnum)
     invalidate_current_state();
 syn_buf->b_syn_change_lnum = (0x7fffffff);
    }





    if (wp->w_topline < syn_buf->b_syn_states_lnum)
    {




 to = syn_buf->b_syn_states_len - 1;
 if (wp->w_topline > 10)
     first = wp->w_topline - 10;
 else
     first = 0;
 from = to - (syn_buf->b_syn_states_lnum - first);
 while (from >= 0)
 {
     move_state((int)from, (int)to);
     --from;
     --to;
 }
 syn_clear_states(0, (int)(to + 1));
 syn_buf->b_syn_states_lnum = first;
    }
    else if ((diff = (wp->w_topline + wp->w_height) -
   (syn_buf->b_syn_states_lnum + syn_buf->b_syn_states_len)) > 0)
    {




 to = 0;
 from = to + diff;
 while (from < syn_buf->b_syn_states_len)
 {
     move_state((int)from, (int)to);
     ++from;
     ++to;
 }
 syn_clear_states((int)to, syn_buf->b_syn_states_len);
 syn_buf->b_syn_states_lnum += diff;
    }




    if (((&current_state)->ga_itemsize != 0)
     && current_lnum < lnum
     && current_lnum >= syn_buf->b_syn_states_lnum
     && current_lnum <
   syn_buf->b_syn_states_lnum + syn_buf->b_syn_states_len
     && current_lnum < syn_buf->b_ml.ml_line_count)
    {
 (void)syn_finish_line(0);
 if (!current_state_stored)
 {
     ++current_lnum;
     store_current_state();
 }






 if (current_lnum != lnum)
     invalidate_current_state();
    }
    else
 invalidate_current_state();






    if (((&current_state)->ga_itemsize == 0))
    {
 diff = syn_buf->b_syn_sync_minlines;
 if (diff < Rows * 2)
     diff = Rows * 2;
 if (lnum >= syn_buf->b_syn_states_lnum
  && lnum <= syn_buf->b_syn_states_lnum +
          syn_buf->b_syn_states_len + diff)
 {
     idx = lnum - syn_buf->b_syn_states_lnum;
     if (idx >= syn_buf->b_syn_states_len)
  idx = syn_buf->b_syn_states_len - 1;
     for ( ; idx >= 0; --idx)
     {
  if (((&syn_buf->b_syn_states[idx].sst_ga)->ga_itemsize != 0))
  {
      current_lnum = syn_buf->b_syn_states_lnum + idx;
      copy_state_to_current(&(syn_buf->b_syn_states[idx]));
      break;
  }
     }
 }
    }





    if (((&current_state)->ga_itemsize == 0))
 syn_sync(wp, lnum);




    while (current_lnum < lnum)
    {
 syn_start_line();
 (void)syn_finish_line(0);
 ++current_lnum;
 store_current_state();


 line_breakcheck();
 if (got_int)
 {
     current_lnum = lnum;
     break;
 }
    }

    syn_start_line();

theend:
    reg_syn = 0;
}
# 608 "syntax.c"
    static void
syn_sync(wp, start_lnum)
    WIN *wp;
    linenr_t start_lnum;
{
    BUF *curbuf_save;
    WIN *curwin_save;
    FPOS cursor_save;
    int idx;
    linenr_t lnum;
    linenr_t end_lnum;
    linenr_t break_lnum;
    int had_sync_point;
    struct state_item *cur_si;
    struct syn_pattern *spp;
    char_u *line;
    int found_flags = 0;
    int found_match_idx = 0;
    linenr_t found_current_lnum = 0;
    int found_current_col= 0;
    colnr_t found_m_endcol = 0;




    invalidate_current_state();







    start_lnum -= syn_buf->b_syn_sync_minlines + 10;
    if (start_lnum < 1)
 start_lnum = 1;
    current_lnum = start_lnum;




    if (syn_buf->b_syn_sync_flags & 0x01)
    {

 curwin_save = curwin;
 curwin = wp;
 curbuf_save = curbuf;
 curbuf = syn_buf;




 for ( ; start_lnum > 1; --start_lnum)
 {
     line = ml_get(start_lnum - 1);
     if (*line == '\000' || *(line + strlen((char *)(line)) - 1) != '\\')
  break;
 }
 current_lnum = start_lnum;


 cursor_save = wp->w_cursor;
 wp->w_cursor.lnum = start_lnum;
 wp->w_cursor.col = 0;






 if (find_start_comment((int)syn_buf->b_syn_sync_maxlines) != 
# 678 "syntax.c" 3 4
                                                             ((void *)0)
# 678 "syntax.c"
                                                                 )
 {
     for (idx = syn_buf->b_syn_patterns.ga_len; --idx >= 0; )
  if (((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx].sp_syn_id == syn_buf->b_syn_sync_id
   && ((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx].sp_type == 2)
  {
      validate_current_state();
      if (push_current(idx) == 1)
   update_si_attr(current_state.ga_len - 1);
      break;
  }
 }


 wp->w_cursor = cursor_save;
 curwin = curwin_save;
 curbuf = curbuf_save;
    }




    else if (syn_buf->b_syn_sync_flags & 0x02)
    {
 if (syn_buf->b_syn_sync_maxlines
     && start_lnum > syn_buf->b_syn_sync_maxlines)
     break_lnum = start_lnum - syn_buf->b_syn_sync_maxlines;
 else
     break_lnum = 0;

 end_lnum = start_lnum;
 lnum = start_lnum;
 while (--lnum > break_lnum)
 {

     line_breakcheck();
     if (got_int)
     {
  invalidate_current_state();
  current_lnum = start_lnum;
  break;
     }




     if (lnum > 1 && syn_match_linecont(lnum - 1))
  continue;




     validate_current_state();

     for (current_lnum = lnum; current_lnum < end_lnum; ++current_lnum)
     {
  syn_start_line();
  for (;;)
  {
      had_sync_point = syn_finish_line(1);




      if (had_sync_point && current_state.ga_len)
      {
   cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
   spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[cur_si->si_idx]);
   found_flags = spp->sp_flags;
   found_match_idx = spp->sp_sync_idx;
   found_current_lnum = current_lnum;
   found_current_col = current_col;
   found_m_endcol = cur_si->si_m_endcol;




   if (found_m_endcol > current_col)
       current_col = found_m_endcol;
   else
       ++current_col;



   ++current_col;
   check_state_ends(
        ml_get_buf(syn_buf, current_lnum, 0));
   --current_col;
      }
      else
   break;
  }
     }




     if (found_flags)
     {





  ga_clear(&current_state);
  if (found_match_idx >= 0 &&
   push_current(found_match_idx) == 1)
      update_si_attr(current_state.ga_len - 1);







  if (found_flags & 0x10)
  {
      if (current_state.ga_len)
      {
   cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
   cur_si->si_h_startcol = found_current_col;
   line = ml_get_buf(syn_buf, current_lnum, 0);
   update_si_end(cur_si, line, current_col);
      }
      current_col = found_m_endcol;
      current_lnum = found_current_lnum;
      (void)syn_finish_line(0);
      ++current_lnum;
  }
  else
      current_lnum = start_lnum;

  break;
     }

     end_lnum = lnum;
     invalidate_current_state();
 }


 if (lnum <= break_lnum)
 {
     invalidate_current_state();
     current_lnum = break_lnum + 1;
 }
    }

    validate_current_state();
}




    static int
syn_match_linecont(lnum)
    linenr_t lnum;
{
    if (syn_buf->b_syn_linecont_prog != 
# 835 "syntax.c" 3 4
                                       ((void *)0)
# 835 "syntax.c"
                                           )
    {
 reg_ic = syn_buf->b_syn_linecont_ic;
 return syn_regexec(syn_buf->b_syn_linecont_prog,
          ml_get_buf(syn_buf, lnum, 0), 1);
    }
    return 0;
}




    static void
syn_start_line()
{
    char_u *line;
    struct state_item *cur_si;
    int i;

    current_finished = 0;
    current_col = 0;







    if (current_state.ga_len)
    {
 line = ml_get_buf(syn_buf, current_lnum, 0);
 for (i = 0; i < current_state.ga_len; ++i)
 {
     cur_si = &((struct state_item *)(current_state.ga_data))[i];
     if ((cur_si->si_flags & 0x400)
          || i == current_state.ga_len - 1)
     {
  cur_si->si_h_startcol = 0;
  update_si_end(cur_si, line, 0);
     }
 }
 check_state_ends(line);
    }
    next_match_idx = -1;
    ++current_line_id;
}




    static void
syn_free_all_states(buf)
    BUF *buf;
{
    int idx;

    if (buf->b_syn_states != 
# 891 "syntax.c" 3 4
                            ((void *)0)
# 891 "syntax.c"
                                )
    {
 for (idx = 0; idx < buf->b_syn_states_len; ++idx)
     ga_clear(&(buf->b_syn_states[idx].sst_ga));
 vim_free(buf->b_syn_states);
 buf->b_syn_states = 
# 896 "syntax.c" 3 4
                    ((void *)0)
# 896 "syntax.c"
                        ;
 buf->b_syn_states_len = 0;
    }
}




    static void
syn_clear_states(start, end)
    int start, end;
{
    int idx;
    struct growarray *sp;

    for (idx = start; idx < end; ++idx)
    {
 sp = &(syn_buf->b_syn_states[idx].sst_ga);
 ga_clear(sp);
 sp->ga_itemsize = 0;
    }
}





    static void
store_current_state()
{
    long idx;
    int i;
    struct growarray *to;

    idx = current_lnum - syn_buf->b_syn_states_lnum;
    if (idx >= 0 && idx < syn_buf->b_syn_states_len)
    {
 to = &(syn_buf->b_syn_states[idx].sst_ga);
 if (to->ga_data != 
# 934 "syntax.c" 3 4
                   ((void *)0)
# 934 "syntax.c"
                       )
     ga_clear(to);
 else if (to->ga_itemsize == 0)
 {
     to->ga_itemsize = sizeof(struct buf_state);
     to->ga_growsize = 3;
 }
 if (current_state.ga_len && ga_grow(to, current_state.ga_len) != 0)
 {
     for (i = 0; i < current_state.ga_len; ++i)
     {
  ((struct buf_state *)((to)->ga_data))[i].bs_idx = ((struct state_item *)(current_state.ga_data))[i].si_idx;
  ((struct buf_state *)((to)->ga_data))[i].bs_flags = ((struct state_item *)(current_state.ga_data))[i].si_flags;
     }
     to->ga_len = current_state.ga_len;
     to->ga_room -= to->ga_len;
 }
 syn_buf->b_syn_states[idx].sst_next_list = current_next_list;
 syn_buf->b_syn_states[idx].sst_next_flags = current_next_flags;
    }
    current_state_stored = 1;
}




    static void
copy_state_to_current(from)
    struct syn_state *from;
{
    int i;
    struct growarray *ga = &(from->sst_ga);

    ga_clear(&current_state);
    validate_current_state();
    keepend_level = -1;
    if (ga->ga_len && ga_grow(&current_state, ga->ga_len) != 0)
    {
 for (i = 0; i < ga->ga_len; ++i)
 {
     ((struct state_item *)(current_state.ga_data))[i].si_idx = ((struct buf_state *)((ga)->ga_data))[i].bs_idx;
     ((struct state_item *)(current_state.ga_data))[i].si_flags = ((struct buf_state *)((ga)->ga_data))[i].bs_flags;
     if (keepend_level < 0 && (((struct state_item *)(current_state.ga_data))[i].si_flags & 0x400))
  keepend_level = i;
     ((struct state_item *)(current_state.ga_data))[i].si_m_endcol = 0;
     ((struct state_item *)(current_state.ga_data))[i].si_m_startcol = 0;
     ((struct state_item *)(current_state.ga_data))[i].si_m_lnum = 0;
     ((struct state_item *)(current_state.ga_data))[i].si_next_list =
         (((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[((struct state_item *)(current_state.ga_data))[i].si_idx]).sp_next_list;
     update_si_attr(i);
 }
 current_state.ga_len = ga->ga_len;
 current_state.ga_room -= current_state.ga_len;
    }
    current_next_list = from->sst_next_list;
    current_next_flags = from->sst_next_flags;
}

    static void
invalidate_current_state()
{
    ga_clear(&current_state);
    current_state.ga_itemsize = 0;
    current_next_list = 
# 997 "syntax.c" 3 4
                       ((void *)0)
# 997 "syntax.c"
                           ;
    keepend_level = -1;
}

    static void
validate_current_state()
{
    current_state.ga_itemsize = sizeof(struct state_item);
    current_state.ga_growsize = 3;
}




    static void
move_state(from, to)
    int from, to;
{
    ga_clear(&(syn_buf->b_syn_states[to].sst_ga));
    syn_buf->b_syn_states[to] = syn_buf->b_syn_states[from];
    ga_init(&(syn_buf->b_syn_states[from].sst_ga));
    syn_buf->b_syn_states[from].sst_ga.ga_itemsize = 0;
}
# 1029 "syntax.c"
    void
syn_changed(lnum)
    linenr_t lnum;
{
    if (curbuf->b_syn_change_lnum > lnum)
 curbuf->b_syn_change_lnum = lnum;
}






    int
syntax_check_changed(lnum)
    linenr_t lnum;
{
    struct growarray *ssp;
    int i;
    int retval = 1;
    long idx;

    reg_syn = 1;
# 1060 "syntax.c"
    idx = lnum - syn_buf->b_syn_states_lnum;
    if (((&current_state)->ga_itemsize != 0) && lnum == current_lnum + 1 &&
     idx >= 0 && idx < syn_buf->b_syn_states_len &&
     lnum < syn_buf->b_syn_change_lnum)
    {



 (void)syn_finish_line(0);

 ssp = &(syn_buf->b_syn_states[idx].sst_ga);
 if (((ssp)->ga_itemsize != 0))
 {




     if (ssp->ga_len == current_state.ga_len
      && syn_buf->b_syn_states[idx].sst_next_list
        == current_next_list)
     {
  for (i = current_state.ga_len; --i >= 0; )
      if (((struct buf_state *)((ssp)->ga_data))[i].bs_idx != ((struct state_item *)(current_state.ga_data))[i].si_idx)
   break;



  if (i < 0)
      retval = 0;
     }
 }




 ++current_lnum;
 store_current_state();
    }

    reg_syn = 0;


    if (retval)
 syn_changed(lnum);

    return retval;
}







    static int
syn_finish_line(syncing)
    int syncing;
{
    char_u *line;
    struct state_item *cur_si;

    if (!current_finished)
    {
 line = ml_get_buf(syn_buf, current_lnum, 0);
 while (!current_finished)
 {
     (void)syn_current_attr(syncing, line);



     if (syncing && current_state.ga_len)
     {



  cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
  if (((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[cur_si->si_idx].sp_flags
            & (0x10|0x20))
      return 1;



  ++current_col;
  check_state_ends(line);
  --current_col;
     }
     ++current_col;
 }
    }
    return 0;
}
# 1160 "syntax.c"
    int
get_syntax_attr(col, line)
    colnr_t col;
    char_u *line;
{
    int attr = 0;


    if (syn_buf->b_syn_states_len == 0)
 return 0;

    reg_syn = 1;


    if (((&current_state)->ga_itemsize == 0))
 validate_current_state();




    while (current_col <= col)
    {
 attr = syn_current_attr(0, line);
 ++current_col;
    }

    reg_syn = 0;
    return attr;
}




    static int
syn_current_attr(syncing, line)
    int syncing;
    char_u *line;
{
    int syn_id;
    char_u *endp;
    char_u *hl_endp = 
# 1200 "syntax.c" 3 4
                      ((void *)0)
# 1200 "syntax.c"
                          ;
    char_u *eoep;
    int end_idx;
    int idx;
    struct syn_pattern *spp;
    struct state_item *cur_si, *sip;
    int startcol;
    int hl_startcol;
    int eos_col;
    int endcol;
    int flags;
    short *next_list;
    int found_match;
    static int try_next_column = 0;





    if (*(line + current_col) == '\000' && current_col != 0)
    {



 if (next_match_idx >= 0 && next_match_col >= (int)current_col
        && next_match_col != (0x7fffffff))
     (void)push_next_match(
# 1226 "syntax.c" 3 4
                          ((void *)0)
# 1226 "syntax.c"
                              , line);

 current_finished = 1;
 current_state_stored = 0;
 return 0;
    }


    if (*(line + current_col) == '\000' || *(line + current_col + 1) == '\000')
    {
 current_finished = 1;
 current_state_stored = 0;
    }






    if (try_next_column)
    {
 next_match_idx = -1;
 try_next_column = 0;
    }






    do
    {
 found_match = 0;
 syn_id = 0;






 if (current_state.ga_len)
     cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
 else
     cur_si = 
# 1269 "syntax.c" 3 4
             ((void *)0)
# 1269 "syntax.c"
                 ;

 if (cur_si == 
# 1271 "syntax.c" 3 4
              ((void *)0) 
# 1271 "syntax.c"
                   || cur_si->si_cont_list != 
# 1271 "syntax.c" 3 4
                                              ((void *)0)
# 1271 "syntax.c"
                                                  )
 {




     if ( !syncing
      && (syn_buf->b_keywtab != 
# 1278 "syntax.c" 3 4
                               ((void *)0)
   
# 1279 "syntax.c"
  || syn_buf->b_keywtab_ic != 
# 1279 "syntax.c" 3 4
                              ((void *)0)
# 1279 "syntax.c"
                                  )
      && vim_iswordc_buf(line[current_col], syn_buf)
      && (current_col == 0
   || !vim_iswordc_buf(line[current_col - 1], syn_buf)))
     {
  syn_id = check_keyword_id(line, (int)current_col,
      &endcol, &flags, &next_list, cur_si);
  if (syn_id)
  {
      if (push_current(-1) == 1)
      {
   cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
   cur_si->si_m_startcol = current_col;
   cur_si->si_h_startcol = 0;
   cur_si->si_m_endcol = endcol;
   cur_si->si_h_endcol = endcol;
   cur_si->si_ends = 1;
   cur_si->si_end_idx = 0;
   cur_si->si_flags = flags;
   cur_si->si_id = syn_id;
   cur_si->si_trans_id = syn_id;
   if (flags & 0x02)
   {
       if (current_state.ga_len < 2)
       {
    cur_si->si_attr = 0;
    cur_si->si_trans_id = 0;
       }
       else
       {
    cur_si->si_attr = ((struct state_item *)(current_state.ga_data))[current_state.ga_len - 2]
                              .si_attr;
    cur_si->si_trans_id = ((struct state_item *)(current_state.ga_data))[current_state.ga_len - 2]
                              .si_trans_id;
       }
   }
   else
       cur_si->si_attr = syn_id2attr(syn_id);
   cur_si->si_cont_list = 
# 1317 "syntax.c" 3 4
                         ((void *)0)
# 1317 "syntax.c"
                             ;
   cur_si->si_next_list = next_list;
   check_keepend();
      }
      else
   vim_free(next_list);
  }
     }




     if (syn_id == 0 && syn_buf->b_syn_patterns.ga_len)
     {




  if (next_match_idx < 0 || next_match_col < (int)current_col)
  {




      next_match_idx = 0;
      next_match_col = (0x7fffffff);
      for (idx = syn_buf->b_syn_patterns.ga_len; --idx >= 0; )
      {
   spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx]);
   if ( spp->sp_syncing == syncing
    && (spp->sp_type == 1
        || spp->sp_type == 2)
    && ((current_next_list != 0
     && in_id_list(current_next_list,
      spp->sp_syn_id,
      spp->sp_syn_inc_tag, 0))
        || (current_next_list == 0
     && ((cur_si == 
# 1354 "syntax.c" 3 4
                   ((void *)0)
         
# 1355 "syntax.c"
        && !(spp->sp_flags & 0x01))
      || (cur_si != 
# 1356 "syntax.c" 3 4
                   ((void *)0)
      
# 1357 "syntax.c"
     && in_id_list(cur_si->si_cont_list,
      spp->sp_syn_id,
      spp->sp_syn_inc_tag,
          spp->sp_flags & 0x01))))))
   {
       int lc_col;




       if (spp->sp_line_id == current_line_id
     && spp->sp_startcol >= next_match_col)
    continue;
       spp->sp_line_id = current_line_id;

       lc_col = current_col - spp->sp_offsets[6];
       if (lc_col < 0)
    lc_col = 0;

       reg_ic = spp->sp_ic;
       if (!syn_regexec(spp->sp_prog, line + lc_col,
          lc_col == 0))
       {
    spp->sp_startcol = (0x7fffffff);
    continue;
       }




       startcol = syn_add_start_off(spp,
             0, -1) - line;
       if (startcol < 0)
    startcol = 0;
       spp->sp_startcol = startcol;




       if (startcol >= next_match_col)
    continue;






       if (did_match_already(idx))
       {
    try_next_column = 1;
    continue;
       }

       endp = spp->sp_prog->endp[0];


       hl_startcol = syn_add_start_off(spp,
             2, -1) - line;



       if (spp->sp_off_flags & (1 << 4))
    eos_col = (spp->sp_prog->startp[0] - line)
         + spp->sp_offsets[4] - 1;
       else
    eos_col = (endp - line) - 1
      + spp->sp_offsets[4];





       flags = 0;
       eoep = line;
       end_idx = 0;
       if (spp->sp_type == 2
        && (spp->sp_flags & 0x04))
    endp = find_endp(idx, endp, endp == line,
     &hl_endp, &flags, &eoep, &end_idx);






       else if (spp->sp_type == 1)
       {
    hl_endp = syn_add_end_off(spp, 3, 0);
    endp = syn_add_end_off(spp, 1, 0);
    if (endp + syncing <= line + startcol)
    {




        if (spp->sp_prog->startp[0] ==
       spp->sp_prog->endp[0])
     try_next_column = 1;
        continue;
    }
       }


       if (endp != 
# 1460 "syntax.c" 3 4
                  ((void *)0)
# 1460 "syntax.c"
                      )
       {
    if (hl_startcol < startcol)
        hl_startcol = startcol;
    if (hl_endp == 
# 1464 "syntax.c" 3 4
                  ((void *)0) 
# 1464 "syntax.c"
                       || hl_endp > endp)
        hl_endp = endp;

    next_match_idx = idx;
    next_match_col = startcol;
    next_match_m_endcol = endp - line;
    next_match_h_endcol = hl_endp - line;
    next_match_h_startcol = hl_startcol;
    next_match_flags = flags;
    next_match_eos_col = eos_col;
    next_match_eoe_col = eoep - line;
    next_match_end_idx = end_idx;
       }
   }
      }
  }




  if (next_match_idx >= 0 && next_match_col == (int)current_col)
  {
      cur_si = push_next_match(cur_si, line);
      found_match = 1;
  }
     }
 }




 if (current_next_list != 
# 1495 "syntax.c" 3 4
                         ((void *)0)
# 1495 "syntax.c"
                             )
 {





     if (!found_match
      && ( ((current_next_flags & 0x100)
       && ((line[current_col]) == ' ' || (line[current_col]) == '\t'))
   || ((current_next_flags & 0x200)
       && *line == '\000')))
  break;







     current_next_list = 
# 1515 "syntax.c" 3 4
                        ((void *)0)
# 1515 "syntax.c"
                            ;
     next_match_idx = -1;
     found_match = 1;
 }

    } while (found_match);





    current_attr = 0;

    current_id = 0;
    current_trans_id = 0;

    if (cur_si != 
# 1531 "syntax.c" 3 4
                 ((void *)0)
# 1531 "syntax.c"
                     )
    {
 for (idx = current_state.ga_len - 1; idx >= 0; --idx)
 {
     sip = &((struct state_item *)(current_state.ga_data))[idx];
     if ((int)current_col >= sip->si_h_startcol
          && (int)current_col <= sip->si_h_endcol)
     {
  current_attr = sip->si_attr;

  current_id = sip->si_id;
  current_trans_id = sip->si_trans_id;

  break;
     }
 }






 if (!syncing)
 {
     ++current_col;
     check_state_ends(line);
     --current_col;
 }
    }


    if (current_next_list != 
# 1562 "syntax.c" 3 4
                            ((void *)0)
     
# 1563 "syntax.c"
    && line[current_col + 1] == '\000'
     && !(current_next_flags & (0x80 | 0x200)))
 current_next_list = 
# 1565 "syntax.c" 3 4
                    ((void *)0)
# 1565 "syntax.c"
                        ;

    return current_attr;
}




    static int
did_match_already(idx)
    int idx;
{
    int i;

    for (i = current_state.ga_len; --i >= 0; )
    {
 if (((struct state_item *)(current_state.ga_data))[i].si_m_startcol == (int)current_col
  && ((struct state_item *)(current_state.ga_data))[i].si_m_lnum == (int)current_lnum
  && ((struct state_item *)(current_state.ga_data))[i].si_idx == idx)
     return 1;
    }
    return 0;
}




    static struct state_item *
push_next_match(cur_si, line)
    struct state_item *cur_si;
    char_u *line;
{
    struct syn_pattern *spp;

    spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[next_match_idx]);




    if (push_current(next_match_idx) == 1)
    {




 cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
 cur_si->si_h_startcol = next_match_h_startcol;
 cur_si->si_m_startcol = current_col;
 cur_si->si_m_lnum = current_lnum;
 cur_si->si_flags = spp->sp_flags;
 cur_si->si_next_list = spp->sp_next_list;
 if (spp->sp_type == 2 && !(spp->sp_flags & 0x04))
 {
     update_si_end(cur_si, line, next_match_m_endcol);
 }
 else
 {
     cur_si->si_m_endcol = next_match_m_endcol - 1;
     cur_si->si_h_endcol = next_match_h_endcol - 1;
     cur_si->si_ends = 1;
     cur_si->si_flags |= next_match_flags;
     cur_si->si_eoe_col = next_match_eoe_col;
     cur_si->si_end_idx = next_match_end_idx;
 }
 if (keepend_level < 0 && (cur_si->si_flags & 0x400))
     keepend_level = current_state.ga_len - 1;
 check_keepend();
 update_si_attr(current_state.ga_len - 1);





 if ( spp->sp_type == 2
  && spp->sp_syn_match_id != 0
  && push_current(next_match_idx) == 1)
 {
     cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
     cur_si->si_h_startcol = next_match_h_startcol;
     cur_si->si_m_startcol = current_col;
     cur_si->si_m_lnum = current_lnum;
     cur_si->si_m_endcol = next_match_eos_col;
     cur_si->si_h_endcol = next_match_eos_col;
     cur_si->si_ends = 1;
     cur_si->si_end_idx = 0;
     cur_si->si_flags = 0x40;
     cur_si->si_next_list = 
# 1651 "syntax.c" 3 4
                           ((void *)0)
# 1651 "syntax.c"
                               ;
     check_keepend();
     update_si_attr(current_state.ga_len - 1);
 }
    }

    next_match_idx = -1;

    return cur_si;
}




    static void
check_state_ends(line)
    char_u *line;
{
    struct state_item *cur_si;

    cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
    for (;;)
    {
 if (cur_si->si_m_endcol < (int)current_col && cur_si->si_ends)
 {






     if (cur_si->si_end_idx && cur_si->si_eoe_col >= (int)current_col)
     {
  cur_si->si_idx = cur_si->si_end_idx;
  cur_si->si_end_idx = 0;
  cur_si->si_m_endcol = cur_si->si_eoe_col;
  cur_si->si_h_endcol = cur_si->si_eoe_col;
  cur_si->si_flags |= 0x40;
  update_si_attr(current_state.ga_len - 1);
  break;
     }
     else
     {


  current_next_list = cur_si->si_next_list;
  current_next_flags = cur_si->si_flags;
  if (!(current_next_flags & (0x80 | 0x200))
   && line[current_col] == '\000')
      current_next_list = 
# 1700 "syntax.c" 3 4
                         ((void *)0)
# 1700 "syntax.c"
                             ;
  pop_current();

  if (current_state.ga_len == 0)
      break;
  cur_si = &((struct state_item *)(current_state.ga_data))[current_state.ga_len - 1];
# 1716 "syntax.c"
  if (((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[cur_si->si_idx].sp_type == 2
        && !(cur_si->si_flags & (0x40 | 0x400)))
  {
      update_si_end(cur_si, line, (int)current_col);
      if ((current_next_flags & 0x08)
       && keepend_level < 0
       && line[current_col] == '\000')
   break;
  }
     }
 }
 else
     break;
    }
}





    static void
update_si_attr(idx)
    int idx;
{
    struct state_item *sip = &((struct state_item *)(current_state.ga_data))[idx];
    struct syn_pattern *spp;

    spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[sip->si_idx]);
    if (sip->si_flags & 0x40)
 sip->si_id = spp->sp_syn_match_id;
    else
 sip->si_id = spp->sp_syn_id;
    sip->si_attr = syn_id2attr(sip->si_id);
    sip->si_trans_id = sip->si_id;
    if (sip->si_flags & 0x40)
 sip->si_cont_list = 
# 1751 "syntax.c" 3 4
                    ((void *)0)
# 1751 "syntax.c"
                        ;
    else
 sip->si_cont_list = spp->sp_cont_list;






    if ((spp->sp_flags & 0x02) && !(sip->si_flags & 0x40))
    {
 if (idx == 0)
 {
     sip->si_attr = 0;
     sip->si_trans_id = 0;
     if (sip->si_cont_list == 
# 1766 "syntax.c" 3 4
                             ((void *)0)
# 1766 "syntax.c"
                                 )
  sip->si_cont_list = (short *)-1;
 }
 else
 {
     sip->si_attr = ((struct state_item *)(current_state.ga_data))[idx - 1].si_attr;
     sip->si_trans_id = ((struct state_item *)(current_state.ga_data))[idx - 1].si_trans_id;
     if (sip->si_cont_list == 
# 1773 "syntax.c" 3 4
                             ((void *)0)
# 1773 "syntax.c"
                                 )
  sip->si_cont_list = ((struct state_item *)(current_state.ga_data))[idx - 1].si_cont_list;
 }
    }
}





    static void
check_keepend()
{
    int i;
    int maxend = (0x7fffffff);
    struct state_item *sip;





    if (keepend_level < 0)
 return;

    for (i = keepend_level; i < current_state.ga_len; ++i)
    {
 sip = &((struct state_item *)(current_state.ga_data))[i];
 if (maxend < (0x7fffffff))
 {
     if (sip->si_m_endcol > maxend)
  sip->si_m_endcol = maxend;
     if (sip->si_h_endcol > maxend)
  sip->si_h_endcol = maxend;
     if (sip->si_eoe_col > maxend)
  sip->si_eoe_col = maxend;
     sip->si_ends = 1;
 }
 if (sip->si_ends && (sip->si_flags & 0x400)
       && maxend > sip->si_m_endcol)
     maxend = sip->si_m_endcol;
    }
}







    static void
update_si_end(sip, line, startcol)
    struct state_item *sip;
    char_u *line;
    int startcol;
{
    char_u *endp;
    char_u *hl_endp;
    char_u *end_endp;
    int end_idx;





    end_idx = 0;
    endp = find_endp(sip->si_idx, line + startcol,
        startcol == 0, &hl_endp, &(sip->si_flags), &end_endp, &end_idx);
    if (endp == 
# 1840 "syntax.c" 3 4
               ((void *)0)
# 1840 "syntax.c"
                   )
    {

 if (((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[sip->si_idx].sp_flags & 0x04)
 {
     sip->si_ends = 1;
     sip->si_m_endcol = strlen((char *)(line)) - 1;
 }
 else
 {
     sip->si_ends = 0;
     sip->si_m_endcol = (0x7fffffff);
 }
 sip->si_h_endcol = sip->si_m_endcol;
    }
    else
    {

 sip->si_m_endcol = endp - line - 1;
 sip->si_h_endcol = hl_endp - line - 1;
 sip->si_ends = 1;
 sip->si_eoe_col = end_endp - line - 1;
 sip->si_end_idx = end_idx;
    }
    check_keepend();
}





    static int
push_current(idx)
    int idx;
{
    if (ga_grow(&current_state, 1) == 0)
 return 0;
    memset((&((struct state_item *)(current_state.ga_data))[current_state.ga_len]), (0), (sizeof(struct state_item)));
    ((struct state_item *)(current_state.ga_data))[current_state.ga_len].si_idx = idx;
    ++current_state.ga_len;
    --current_state.ga_room;
    return 1;
}




    static void
pop_current()
{
    if (current_state.ga_len)
    {
 --current_state.ga_len;
 ++current_state.ga_room;
    }

    next_match_idx = -1;


    if (keepend_level >= current_state.ga_len)
 keepend_level = -1;
}




    static char_u *
find_endp(idx, sstart, at_bol, hl_endp, flagsp, end_endp, end_idx)
    int idx;
    char_u *sstart;
    int at_bol;
    char_u **hl_endp;
    int *flagsp;
    char_u **end_endp;
    int *end_idx;
{
    char_u *endp;
    struct syn_pattern *spp, *spp_skip;
    char_u *p;
    int start_idx;
    int best_idx;
    char_u *best_ptr;






    spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx]);
    if (spp->sp_type != 2)
    {
 *hl_endp = sstart;
 return sstart;
    }




    for (;;)
    {
 spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx]);
 if (spp->sp_type != 2)
     break;
 ++idx;
    }




    if (spp->sp_type == 4)
    {
 spp_skip = spp;
 ++idx;
    }
    else
 spp_skip = 
# 1955 "syntax.c" 3 4
           ((void *)0)
# 1955 "syntax.c"
               ;

    endp = sstart;
    start_idx = idx;
    for (;;)
    {
 best_idx = -1;
 best_ptr = 
# 1962 "syntax.c" 3 4
           ((void *)0)
# 1962 "syntax.c"
               ;
 for (idx = start_idx; idx < syn_buf->b_syn_patterns.ga_len; ++idx)
 {
     spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[idx]);
     if (spp->sp_type != 3)
  break;

     reg_ic = spp->sp_ic;
     if (syn_regexec(spp->sp_prog, endp, (at_bol && endp == sstart)))
     {
  if (best_idx == -1 || spp->sp_prog->startp[0] < best_ptr)
  {
      best_idx = idx;
      best_ptr = spp->sp_prog->startp[0];
  }
     }
 }





 if (best_idx == -1)
     break;





 if ( spp_skip != 
# 1991 "syntax.c" 3 4
                    ((void *)0)
  
# 1992 "syntax.c"
 && (reg_ic = spp_skip->sp_ic,
   syn_regexec(spp_skip->sp_prog, endp,
        (at_bol && endp == sstart)))
  && spp_skip->sp_prog->startp[0] <= best_ptr)
 {

     p = syn_add_end_off(spp_skip, 1, 1);


     if (p <= endp)
  ++endp;
     else if (p <= spp_skip->sp_prog->endp[0])
  endp = p;
     else

  for (endp = spp_skip->sp_prog->endp[0];
          *endp != '\000' && endp < p; ++endp)
      ;


     if (*endp == '\000')
  break;

     continue;
 }





 spp = &(((struct syn_pattern *)((syn_buf)->b_syn_patterns.ga_data))[best_idx]);
 p = syn_add_end_off(spp, 1, 1);
 if (p < sstart)
     p = sstart;

 endp = syn_add_end_off(spp, 3, 1);
 if (endp < sstart)
     endp = sstart;
 if (endp > p)
     endp = p;
 *end_endp = endp;




 if (spp->sp_syn_match_id != spp->sp_syn_id && spp->sp_syn_match_id != 0)
 {
     *end_idx = best_idx;
     if (spp->sp_off_flags & (1 << (5 + 7)))
  endp = spp->sp_prog->endp[0] + spp->sp_offsets[5];
     else
  endp = spp->sp_prog->startp[0] + spp->sp_offsets[5];
     if (endp < sstart)
  endp = sstart;
     if (endp > p)
  endp = p;
     p = endp;
 }
 else
     *end_idx = 0;
 *hl_endp = endp;
 *flagsp = spp->sp_flags;

 return p;
    }

    return 
# 2058 "syntax.c" 3 4
          ((void *)0)
# 2058 "syntax.c"
              ;
}




    static char_u *
syn_add_end_off(spp, idx, extra)
    struct syn_pattern *spp;
    int idx;
    int extra;
{
    if (spp->sp_off_flags & (1 << idx))
 return spp->sp_prog->startp[0] + spp->sp_offsets[idx] + extra;
    return spp->sp_prog->endp[0] + spp->sp_offsets[idx];
}




    static char_u *
syn_add_start_off(spp, idx, extra)
    struct syn_pattern *spp;
    int idx;
    int extra;
{
    if (spp->sp_off_flags & (1 << (idx + 7)))
 return spp->sp_prog->endp[0] + spp->sp_offsets[idx] + extra;
    return spp->sp_prog->startp[0] + spp->sp_offsets[idx];
}






    static int
check_keyword_id(line, startcol, endcol, flags, next_list, cur_si)
    char_u *line;
    int startcol;
    int *endcol;
    int *flags;
    short **next_list;
    struct state_item *cur_si;
{
    struct keyentry *ktab;
    char_u *p;
    int round;
    int hash;
    int len;
    char_u keyword[80 + 1];


    p = line + startcol;
    for (len = 1; vim_iswordc_buf(p[len], syn_buf); ++len)
 ;
    if (len > 80)
 return 0;





    strncpy((char *)(keyword), (char *)(p), (size_t)(len));
    keyword[len] = '\000';






    for (round = 1; round <= 2; ++round)
    {
 if ((round == 1 ? syn_buf->b_keywtab : syn_buf->b_keywtab_ic) == 
# 2131 "syntax.c" 3 4
                                                                 ((void *)0)
# 2131 "syntax.c"
                                                                     )
     continue;
 p = keyword;
 hash = 0;
 if (round == 1)
 {
     while (*p)
  hash += *p++;
     ktab = syn_buf->b_keywtab[hash & (512 - 1)];
 }
 else
 {
     while (*p)
     {
  hash += (*p = tolower(*p));
  ++p;
     }
     ktab = syn_buf->b_keywtab_ic[hash & (512 - 1)];
 }







 for ( ; ktab != 
# 2157 "syntax.c" 3 4
                ((void *)0)
# 2157 "syntax.c"
                    ; ktab = ktab->next)
     if ( strcmp((char *)(keyword), (char *)(ktab->keyword)) == 0
  && ( (current_next_list != 0
   && in_id_list(current_next_list, ktab->syn_id,
          ktab->syn_inc_tag, 0))
      || (current_next_list == 0
   && ((cur_si == 
# 2163 "syntax.c" 3 4
                 ((void *)0) 
# 2163 "syntax.c"
                      && !(ktab->flags & 0x01))
       || (cur_si != 
# 2164 "syntax.c" 3 4
                    ((void *)0)
    
# 2165 "syntax.c"
   && in_id_list(cur_si->si_cont_list,
     ktab->syn_id,
     ktab->syn_inc_tag,
     ktab->flags & 0x01))))))
     {
  *endcol = startcol + len - 1;
  *flags = ktab->flags;
  *next_list = ktab->next_list;
  return ktab->syn_id;
     }
    }
    return 0;
}





    static void
syn_cmd_case(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *next;

    eap->nextcmd = find_nextcmd(arg);
    if (eap->skip)
 return;

    next = skiptowhite(arg);
    if (strncasecmp((char *)(arg), (char *)("match"), (size_t)(5)) == 0 && next - arg == 5)
 curbuf->b_syn_ic = 0;
    else if (strncasecmp((char *)(arg), (char *)("ignore"), (size_t)(6)) == 0 && next - arg == 6)
 curbuf->b_syn_ic = 1;
    else
 emsg2((char_u *)("Illegal argument: %s"), (char_u *)(arg));
}




    void
syntax_clear(buf)
    BUF *buf;
{
    int i;

    curbuf->b_syn_ic = 0;


    free_keywtab(buf->b_keywtab);
    buf->b_keywtab = 
# 2217 "syntax.c" 3 4
                    ((void *)0)
# 2217 "syntax.c"
                        ;
    free_keywtab(buf->b_keywtab_ic);
    buf->b_keywtab_ic = 
# 2219 "syntax.c" 3 4
                       ((void *)0)
# 2219 "syntax.c"
                           ;


    for (i = buf->b_syn_patterns.ga_len; --i >= 0; )
 syn_clear_pattern(buf, i);
    ga_clear(&buf->b_syn_patterns);


    for (i = buf->b_syn_clusters.ga_len; --i >= 0; )
 syn_clear_cluster(buf, i);
    ga_clear(&buf->b_syn_clusters);

    buf->b_syn_sync_flags = 0;
    buf->b_syn_sync_minlines = 0;
    buf->b_syn_sync_maxlines = 0;

    vim_free(buf->b_syn_linecont_prog);
    buf->b_syn_linecont_prog = 
# 2236 "syntax.c" 3 4
                              ((void *)0)
# 2236 "syntax.c"
                                  ;
    vim_free(buf->b_syn_linecont_pat);
    buf->b_syn_linecont_pat = 
# 2238 "syntax.c" 3 4
                             ((void *)0)
# 2238 "syntax.c"
                                 ;


    syn_free_all_states(buf);
    invalidate_current_state();
}




    static void
syntax_sync_clear()
{
    int i;


    for (i = curbuf->b_syn_patterns.ga_len; --i >= 0; )
 if (((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[i].sp_syncing)
     syn_remove_pattern(curbuf, i);

    curbuf->b_syn_sync_flags = 0;
    curbuf->b_syn_sync_minlines = 0;
    curbuf->b_syn_sync_maxlines = 0;

    vim_free(curbuf->b_syn_linecont_prog);
    curbuf->b_syn_linecont_prog = 
# 2263 "syntax.c" 3 4
                                 ((void *)0)
# 2263 "syntax.c"
                                     ;
    vim_free(curbuf->b_syn_linecont_pat);
    curbuf->b_syn_linecont_pat = 
# 2265 "syntax.c" 3 4
                                ((void *)0)
# 2265 "syntax.c"
                                    ;
}




    static void
syn_remove_pattern(buf, idx)
    BUF *buf;
    int idx;
{
    struct syn_pattern *spp;

    spp = &(((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[idx]);
    syn_clear_pattern(buf, idx);
    mch_memmove(spp, spp + 1, sizeof(struct syn_pattern) *
          (buf->b_syn_patterns.ga_len - idx - 1));
    --buf->b_syn_patterns.ga_len;
    --buf->b_syn_patterns.ga_room;
}





    static void
syn_clear_pattern(buf, i)
    BUF *buf;
    int i;
{
    vim_free(((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[i].sp_pattern);
    vim_free(((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[i].sp_prog);

    if (i == 0 || ((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[i - 1].sp_type != 2)
    {
 vim_free(((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[i].sp_cont_list);
 vim_free(((struct syn_pattern *)((buf)->b_syn_patterns.ga_data))[i].sp_next_list);
    }
}




    static void
syn_clear_cluster(buf, i)
    BUF *buf;
    int i;
{
    vim_free(((struct syn_cluster *)((buf)->b_syn_clusters.ga_data))[i].scl_name);
    vim_free(((struct syn_cluster *)((buf)->b_syn_clusters.ga_data))[i].scl_name_u);
    vim_free(((struct syn_cluster *)((buf)->b_syn_clusters.ga_data))[i].scl_list);
}




    static void
syn_cmd_clear(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *arg_end;
    int id;

    eap->nextcmd = find_nextcmd(arg);
    if (eap->skip)
 return;





    if (curbuf->b_syn_topgrp != 0)
 return;

    if (ends_excmd(*arg))
    {



 if (syncing)
     syntax_sync_clear();
 else
     syntax_clear(curbuf);
    }
    else
    {



 while (!ends_excmd(*arg))
 {
     arg_end = skiptowhite(arg);
     if (*arg == '@')
     {
  id = syn_scl_namen2id(arg + 1, (int)(arg_end - arg - 1));
  if (id == 0)
  {
      emsg2((char_u *)("No such syntax cluster: %s"), (char_u *)(arg));
      break;
  }
  else
  {





      short scl_id = id - 15000;

      vim_free(((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[scl_id].scl_list);
      ((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[scl_id].scl_list = 
# 2377 "syntax.c" 3 4
                                          ((void *)0)
# 2377 "syntax.c"
                                              ;
  }
     }
     else
     {
  id = syn_namen2id(arg, (int)(arg_end - arg));
  if (id == 0)
  {
      emsg2((char_u *)("No such highlight group name: %s"), (char_u *)(arg));
      break;
  }
  else
      syn_clear_one(id, syncing);
     }
     arg = skipwhite(arg_end);
 }
    }
    redraw_curbuf_later(40);

    syn_changed((linenr_t)0);
}




    static void
syn_clear_one(id, syncing)
    int id;
    int syncing;
{
    struct syn_pattern *spp;
    int idx;


    if (!syncing)
    {
 (void)syn_clear_keyword(id, curbuf->b_keywtab);
 (void)syn_clear_keyword(id, curbuf->b_keywtab_ic);
    }


    for (idx = curbuf->b_syn_patterns.ga_len; --idx >= 0; )
    {
 spp = &(((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx]);
 if (spp->sp_syn_id != id || spp->sp_syncing != syncing)
     continue;
 syn_remove_pattern(curbuf, idx);
    }
}





    static void
syn_cmd_on(eap, syncing)
    EXARG *eap;
    int syncing;
{
    syn_cmd_onoff(eap, "syntax");
}





    static void
syn_cmd_manual(eap, syncing)
    EXARG *eap;
    int syncing;
{
    syn_cmd_onoff(eap, "manual");
}





    static void
syn_cmd_off(eap, syncing)
    EXARG *eap;
    int syncing;
{
    syn_cmd_onoff(eap, "nosyntax");
}

    static void
syn_cmd_onoff(eap, name)
    EXARG *eap;
    char *name;
{
    char_u buf[100];

    eap->nextcmd = check_nextcmd(eap->arg);
    if (!eap->skip)
    {
 strcpy((char *)(buf), (char *)("so "));
 sprintf((char *)buf + 3, "$VIMRUNTIME/syntax/%s.vim", name);
 do_cmdline(buf, 
# 2475 "syntax.c" 3 4
                ((void *)0)
# 2475 "syntax.c"
                    , 
# 2475 "syntax.c" 3 4
                      ((void *)0)
# 2475 "syntax.c"
                          , 0x01);
    }
}




    static void
syn_cmd_list(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    int id;
    char_u *arg_end;

    eap->nextcmd = find_nextcmd(arg);
    if (eap->skip)
 return;

    if (!syntax_present(curbuf))
    {
 msg((char_u *)("No Syntax items defined for this buffer"));
 return;
    }

    if (syncing)
    {
 if (curbuf->b_syn_sync_flags & 0x01)
 {
     msg_puts((char_u *)("syncing on C-style comments"));
     if (curbuf->b_syn_sync_minlines || curbuf->b_syn_sync_maxlines)
  syn_lines_msg();
     return;
 }
 else if (!(curbuf->b_syn_sync_flags & 0x02))
 {
     msg_puts((char_u *)("syncing starts "));
     msg_outnum(curbuf->b_syn_sync_minlines);
     msg_puts((char_u *)(" lines before top line"));
     return;
 }
 msg_puts_title((char_u *)("\n--- Syntax sync items ---"));
 if (curbuf->b_syn_sync_minlines || curbuf->b_syn_sync_maxlines)
 {
     msg_puts((char_u *)("\nsyncing on items"));
     syn_lines_msg();
 }
    }
    else
 msg_puts_title((char_u *)("\n--- Syntax items ---"));
    if (ends_excmd(*arg))
    {



 for (id = 1; id <= highlight_ga.ga_len && !got_int; ++id)
     syn_list_one(id, syncing, 0);
 for (id = 0; id < curbuf->b_syn_clusters.ga_len && !got_int; ++id)
     syn_list_cluster(id);
    }
    else
    {



 while (!ends_excmd(*arg) && !got_int)
 {
     arg_end = skiptowhite(arg);
     if (*arg == '@')
     {
  id = syn_scl_namen2id(arg + 1, (int)(arg_end - arg - 1));
  if (id == 0)
      emsg2((char_u *)("No such syntax cluster: %s"), (char_u *)(arg));
  else
      syn_list_cluster(id - 15000);
     }
     else
     {
  id = syn_namen2id(arg, (int)(arg_end - arg));
  if (id == 0)
      emsg2((char_u *)("No such highlight group name: %s"), (char_u *)(arg));
  else
      syn_list_one(id, syncing, 1);
     }
     arg = skipwhite(arg_end);
 }
    }
    eap->nextcmd = check_nextcmd(arg);
}

    static void
syn_lines_msg()
{
    msg_puts((char_u *)("; "));
    if (curbuf->b_syn_sync_minlines)
    {
 msg_puts((char_u *)("minimal "));
 msg_outnum(curbuf->b_syn_sync_minlines);
 if (curbuf->b_syn_sync_maxlines)
     msg_puts((char_u *)(", "));
    }
    if (curbuf->b_syn_sync_maxlines)
    {
 msg_puts((char_u *)("maximal "));
 msg_outnum(curbuf->b_syn_sync_maxlines);
    }
    msg_puts((char_u *)(" lines before top line"));
}

static int last_matchgroup;




    static void
syn_list_one(id, syncing, link_only)
    int id;
    int syncing;
    int link_only;
{
    int attr;
    int idx;
    int did_header = 0;
    struct syn_pattern *spp;

    attr = highlight_attr[(int)(HLF_D)];


    if (!syncing)
    {
 did_header = syn_list_keywords(id, curbuf->b_keywtab, 0, attr);
 did_header = syn_list_keywords(id, curbuf->b_keywtab_ic,
           did_header, attr);
    }


    for (idx = 0; idx < curbuf->b_syn_patterns.ga_len && !got_int; ++idx)
    {
 spp = &(((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx]);
 if (spp->sp_syn_id != id || spp->sp_syncing != syncing)
     continue;

 (void)syn_list_header(did_header, 999, id);
 did_header = 1;
 last_matchgroup = 0;
 if (spp->sp_type == 1)
 {
     put_pattern("match", ' ', spp, attr);
     msg_putchar(' ');
 }
 else if (spp->sp_type == 2)
 {
     while (((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_type == 2)
  put_pattern("start", '=', &((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx++], attr);
     if (((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_type == 4)
  put_pattern("skip", '=', &((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx++], attr);
     while (idx < curbuf->b_syn_patterns.ga_len
         && ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_type == 3)
  put_pattern("end", '=', &((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx++], attr);
     --idx;
     msg_putchar(' ');
 }
 if (spp->sp_flags & 0x01)
 {
     msg_puts_attr((char_u *)"contained", attr);
     msg_putchar(' ');
 }
 if (spp->sp_flags & 0x04)
 {
     msg_puts_attr((char_u *)"oneline", attr);
     msg_putchar(' ');
 }
 if (spp->sp_flags & 0x400)
 {
     msg_puts_attr((char_u *)"keepend", attr);
     msg_putchar(' ');
 }
 if (spp->sp_flags & 0x800)
 {
     msg_puts_attr((char_u *)"excludenl", attr);
     msg_putchar(' ');
 }
 if (spp->sp_flags & 0x02)
 {
     msg_puts_attr((char_u *)"transparent", attr);
     msg_putchar(' ');
 }
 if (spp->sp_cont_list != 
# 2663 "syntax.c" 3 4
                         ((void *)0)
# 2663 "syntax.c"
                             )
 {
     put_id_list((char_u *)"contains", spp->sp_cont_list, attr);
 }
 if (spp->sp_next_list != 
# 2667 "syntax.c" 3 4
                         ((void *)0)
# 2667 "syntax.c"
                             )
 {
     put_id_list((char_u *)"nextgroup", spp->sp_next_list, attr);
     if (spp->sp_flags & 0x100)
     {
  msg_puts_attr((char_u *)"skipwhite", attr);
  msg_putchar(' ');
     }
     if (spp->sp_flags & 0x80)
     {
  msg_puts_attr((char_u *)"skipnl", attr);
  msg_putchar(' ');
     }
     if (spp->sp_flags & 0x200)
     {
  msg_puts_attr((char_u *)"skipempty", attr);
  msg_putchar(' ');
     }
 }
 if (spp->sp_flags & (0x10|0x20))
 {
     if (spp->sp_flags & 0x10)
  msg_puts_attr((char_u *)"grouphere", attr);
     else
  msg_puts_attr((char_u *)"groupthere", attr);
     msg_putchar(' ');
     if (spp->sp_sync_idx >= 0)
  msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))
       [spp->sp_sync_idx].sp_syn_id - 1].sg_name);
     else
  msg_puts((char_u *)("NONE"));
     msg_putchar(' ');
 }
    }


    if (((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_link && (did_header || link_only) && !got_int)
    {
 (void)syn_list_header(did_header, 999, id);
 msg_puts_attr((char_u *)"links to", attr);
 msg_putchar(' ');
 msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_link - 1].sg_name);
    }
}




    static void
syn_list_cluster(id)
    int id;
{
    int endcol = 15;


    msg_putchar('\n');
    msg_outtrans(((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[id].scl_name);

    if (msg_col >= endcol)
 endcol = msg_col + 1;
    if (Columns <= endcol)
 endcol = Columns - 1;

    msg_advance(endcol);
    if (((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[id].scl_list != 
# 2731 "syntax.c" 3 4
                                         ((void *)0)
# 2731 "syntax.c"
                                             )
    {
 put_id_list((char_u *)"cluster", ((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[id].scl_list,
      highlight_attr[(int)(HLF_D)]);
    }
    else
    {
 msg_puts_attr((char_u *)"cluster", highlight_attr[(int)(HLF_D)]);
 msg_puts((char_u *)"=NONE");
    }
}

    static void
put_id_list(name, list, attr)
    char_u *name;
    short *list;
    int attr;
{
    short *p;

    msg_puts_attr(name, attr);
    msg_putchar('=');
    for (p = list; *p; ++p)
    {
 if (*p >= 9999 && *p < 15000)
 {
     if (p[1])
  msg_puts((char_u *)("ALLBUT"));
     else
  msg_puts((char_u *)("ALL"));
 }
 else if (*p >= 15000)
 {
     short scl_id = *p - 15000;

     msg_putchar('@');
     msg_outtrans(((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[scl_id].scl_name);
 }
 else
     msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[*p - 1].sg_name);
 if (p[1])
     msg_putchar(',');
    }
    msg_putchar(' ');
}

    static void
put_pattern(s, c, spp, attr)
    char *s;
    int c;
    struct syn_pattern *spp;
    int attr;
{
    long n;
    int mask;
    int first;
    static char *sepchars = "/+=-#@\"|'^&";
    int i;


    if (last_matchgroup != spp->sp_syn_match_id)
    {
 last_matchgroup = spp->sp_syn_match_id;
 msg_puts_attr((char_u *)"matchgroup", attr);
 msg_putchar('=');
 if (last_matchgroup == 0)
     msg_outtrans((char_u *)"NONE");
 else
     msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[last_matchgroup - 1].sg_name);
 msg_putchar(' ');
    }


    msg_puts_attr((char_u *)s, attr);
    msg_putchar(c);


    for (i = 0; vim_strchr(spp->sp_pattern, sepchars[i]) != 
# 2808 "syntax.c" 3 4
                                                           ((void *)0)
# 2808 "syntax.c"
                                                               ; )
 if (sepchars[++i] == '\000')
 {
     i = 0;
     break;
 }
    msg_putchar(sepchars[i]);
    msg_outtrans(spp->sp_pattern);
    msg_putchar(sepchars[i]);


    first = 1;
    for (i = 0; i < 7; ++i)
    {
 mask = (1 << i);
 if (spp->sp_off_flags & (mask + (mask << 7)))
 {
     if (!first)
  msg_putchar(',');
     msg_puts((char_u *)spo_name_tab[i]);
     n = spp->sp_offsets[i];
     if (i != 6)
     {
  if (spp->sp_off_flags & mask)
      msg_putchar('s');
  else
      msg_putchar('e');
  if (n > 0)
      msg_putchar('+');
     }
     if (n || i == 6)
  msg_outnum(n);
     first = 0;
 }
    }
    msg_putchar(' ');
}





    static int
syn_list_keywords(id, ktabp, did_header, attr)
    int id;
    struct keyentry **ktabp;
    int did_header;
    int attr;
{
    int i;
    int outlen;
    struct keyentry *ktab;
    int prev_contained = 0;
    short *prev_next_list = 
# 2861 "syntax.c" 3 4
                               ((void *)0)
# 2861 "syntax.c"
                                   ;
    int prev_skipnl = 0;
    int prev_skipwhite = 0;
    int prev_skipempty = 0;

    if (ktabp == 
# 2866 "syntax.c" 3 4
                ((void *)0)
# 2866 "syntax.c"
                    )
 return did_header;





    for (i = 0; i < 512; ++i)
    {
 for (ktab = ktabp[i]; ktab != 
# 2875 "syntax.c" 3 4
                              ((void *)0) 
# 2875 "syntax.c"
                                   && !got_int; ktab = ktab->next)
 {
     if (ktab->syn_id == id)
     {
  if (prev_contained != (ktab->flags & 0x01)
   || prev_skipnl != (ktab->flags & 0x80)
   || prev_skipwhite != (ktab->flags & 0x100)
   || prev_skipempty != (ktab->flags & 0x200)
   || prev_next_list != ktab->next_list)
      outlen = 9999;
  else
      outlen = strlen((char *)(ktab->keyword));

  if (syn_list_header(did_header, outlen, id))
  {
      prev_contained = 0;
      prev_next_list = 
# 2891 "syntax.c" 3 4
                      ((void *)0)
# 2891 "syntax.c"
                          ;
      prev_skipnl = 0;
      prev_skipwhite = 0;
      prev_skipempty = 0;
  }
  did_header = 1;
  if (prev_contained != (ktab->flags & 0x01))
  {
      msg_puts_attr((char_u *)"contained", attr);
      msg_putchar(' ');
      prev_contained = (ktab->flags & 0x01);
  }
  if (ktab->next_list != prev_next_list)
  {
      put_id_list((char_u *)"nextgroup", ktab->next_list, attr);
      msg_putchar(' ');
      prev_next_list = ktab->next_list;
      if (ktab->flags & 0x80)
      {
   msg_puts_attr((char_u *)"skipnl", attr);
   msg_putchar(' ');
   prev_skipnl = (ktab->flags & 0x80);
      }
      if (ktab->flags & 0x100)
      {
   msg_puts_attr((char_u *)"skipwhite", attr);
   msg_putchar(' ');
   prev_skipwhite = (ktab->flags & 0x100);
      }
      if (ktab->flags & 0x200)
      {
   msg_puts_attr((char_u *)"skipempty", attr);
   msg_putchar(' ');
   prev_skipempty = (ktab->flags & 0x200);
      }
  }
  msg_outtrans(ktab->keyword);
     }
 }
    }

    return did_header;
}

    static void
syn_clear_keyword(id, ktabp)
    int id;
    struct keyentry **ktabp;
{
    int i;
    struct keyentry *ktab;
    struct keyentry *ktab_prev;
    struct keyentry *ktab_next;

    if (ktabp == 
# 2945 "syntax.c" 3 4
                ((void *)0)
# 2945 "syntax.c"
                    )
 return;

    for (i = 0; i < 512; ++i)
    {
 ktab_prev = 
# 2950 "syntax.c" 3 4
            ((void *)0)
# 2950 "syntax.c"
                ;
 for (ktab = ktabp[i]; ktab != 
# 2951 "syntax.c" 3 4
                              ((void *)0)
# 2951 "syntax.c"
                                  ; )
 {
     if (ktab->syn_id == id)
     {
  ktab_next = ktab->next;
  if (ktab_prev == 
# 2956 "syntax.c" 3 4
                  ((void *)0)
# 2956 "syntax.c"
                      )
      ktabp[i] = ktab_next;
  else
      ktab_prev->next = ktab_next;
  vim_free(ktab);
  ktab = ktab_next;
     }
     else
     {
  ktab_prev = ktab;
  ktab = ktab->next;
     }
 }
    }
}




    static void
free_keywtab(ktabp)
    struct keyentry **ktabp;
{
    int i;
    struct keyentry *ktab;
    struct keyentry *ktab_next;

    if (ktabp != 
# 2983 "syntax.c" 3 4
                ((void *)0)
# 2983 "syntax.c"
                    )
    {
 for (i = 0; i < 512; ++i)
     for (ktab = ktabp[i]; ktab != 
# 2986 "syntax.c" 3 4
                                  ((void *)0)
# 2986 "syntax.c"
                                      ; ktab = ktab_next)
     {
  ktab_next = ktab->next;
  vim_free(ktab->next_list);
  vim_free(ktab);
     }
 vim_free(ktabp);
    }
}




    static void
add_keyword(name, id, flags, next_list)
    char_u *name;
    int id;
    int flags;
    short *next_list;
{
    struct keyentry *ktab;
    struct keyentry ***ktabpp;
    char_u *p;
    int hash;

    ktab = (struct keyentry *)alloc(
          (int)(sizeof(struct keyentry) + strlen((char *)(name))));
    if (ktab == 
# 3013 "syntax.c" 3 4
               ((void *)0)
# 3013 "syntax.c"
                   )
 return;
    strcpy((char *)(ktab->keyword), (char *)(name));
    ktab->syn_id = id;
    ktab->syn_inc_tag = current_syn_inc_tag;
    ktab->flags = flags;
    ktab->next_list = copy_id_list(next_list);

    if (curbuf->b_syn_ic)
    {
 for (p = ktab->keyword; *p; ++p)
     *p = tolower(*p);
 ktabpp = &curbuf->b_keywtab_ic;
    }
    else
 ktabpp = &curbuf->b_keywtab;

    if (*ktabpp == 
# 3030 "syntax.c" 3 4
                  ((void *)0)
# 3030 "syntax.c"
                      )
    {
 *ktabpp = (struct keyentry **)alloc_clear(
          (int)(sizeof(struct keyentry *) * 512));
 if (*ktabpp == 
# 3034 "syntax.c" 3 4
               ((void *)0)
# 3034 "syntax.c"
                   )
     return;
    }

    hash = 0;
    for (p = ktab->keyword; *p; ++p)
 hash += *p;
    hash &= (512 - 1);

    ktab->next = (*ktabpp)[hash];
    (*ktabpp)[hash] = ktab;
}






    static char_u *
get_group_name(arg, name_end)
    char_u *arg;
    char_u **name_end;
{
    char_u *rest;

    *name_end = skiptowhite(arg);
    rest = skipwhite(*name_end);





    if (ends_excmd(*arg) || *rest == '\000')
 return 
# 3067 "syntax.c" 3 4
       ((void *)0)
# 3067 "syntax.c"
           ;
    return rest;
}
# 3079 "syntax.c"
    static char_u *
get_syn_options(arg, flagsp, sync_idx, cont_list, next_list)
    char_u *arg;
    int *flagsp;
    int *sync_idx;

    short **cont_list;

    short **next_list;
{
    int flags;
    char_u *gname_start, *gname;
    int syn_id;
    int len;
    int i;
    int fidx;
    static struct flag
    {
 char *name;
 int len;
 int val;
    } flagtab[] = { {"contained", 9, 0x01},
      {"oneline", 7, 0x04},
      {"keepend", 7, 0x400},
      {"excludenl", 9, 0x800},
      {"transparent", 11, 0x02},
      {"skipnl", 6, 0x80},
      {"skipwhite", 9, 0x100},
      {"skipempty", 9, 0x200},
      {"grouphere", 9, 0x10},
      {"groupthere", 10, 0x20},
      {"display", 7, 0},
      {"fold", 4, 0},
  };

    if (arg == 
# 3114 "syntax.c" 3 4
              ((void *)0)
# 3114 "syntax.c"
                  )
 return 
# 3115 "syntax.c" 3 4
       ((void *)0)
# 3115 "syntax.c"
           ;

    flags = *flagsp;
    for (;;)
    {
 for (fidx = sizeof(flagtab) / sizeof(struct flag); --fidx >= 0; )
 {
     len = flagtab[fidx].len;
     if (strncasecmp((char *)(arg), (char *)(flagtab[fidx].name), (size_t)(len)) == 0
      && (ends_excmd(arg[len]) || ((arg[len]) == ' ' || (arg[len]) == '\t')))
     {
  flags |= flagtab[fidx].val;
  arg = skipwhite(arg + len);

  if (flagtab[fidx].val == 0x10
   || flagtab[fidx].val == 0x20)
  {
      if (sync_idx == 
# 3132 "syntax.c" 3 4
                     ((void *)0)
# 3132 "syntax.c"
                         )
      {
   emsg((char_u *)("group[t]here not accepted here"));
   return 
# 3135 "syntax.c" 3 4
         ((void *)0)
# 3135 "syntax.c"
             ;
      }

      gname_start = arg;
      arg = skiptowhite(arg);
      if (gname_start == arg)
   return 
# 3141 "syntax.c" 3 4
         ((void *)0)
# 3141 "syntax.c"
             ;
      gname = vim_strnsave(gname_start, (int)(arg - gname_start));
      if (gname == 
# 3143 "syntax.c" 3 4
                  ((void *)0)
# 3143 "syntax.c"
                      )
   return 
# 3144 "syntax.c" 3 4
         ((void *)0)
# 3144 "syntax.c"
             ;
      if (strcmp((char *)(gname), (char *)("NONE")) == 0)
   *sync_idx = -2;
      else
      {
   syn_id = syn_name2id(gname);
   for (i = curbuf->b_syn_patterns.ga_len; --i >= 0; )
       if (((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[i].sp_syn_id == syn_id
    && ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[i].sp_type == 2)
       {
    *sync_idx = i;
    break;
       }
   if (i < 0)
   {
       emsg2((char_u *)("Didn't find region item for %s"), (char_u *)(gname));
       vim_free(gname);
       return 
# 3161 "syntax.c" 3 4
             ((void *)0)
# 3161 "syntax.c"
                 ;
   }
      }

      vim_free(gname);
      arg = skipwhite(arg);
  }
  break;
     }
 }
 if (fidx >= 0)
     continue;

 if (strncasecmp((char *)(arg), (char *)("contains"), (size_t)(8)) == 0
  && (((arg[8]) == ' ' || (arg[8]) == '\t') || arg[8] == '='))
 {
     if (cont_list == 
# 3177 "syntax.c" 3 4
                     ((void *)0)
# 3177 "syntax.c"
                         )
     {
  emsg((char_u *)("contains argument not accepted here"));
  return 
# 3180 "syntax.c" 3 4
        ((void *)0)
# 3180 "syntax.c"
            ;
     }
     if (get_id_list(&arg, 8, cont_list) == 0)
  return 
# 3183 "syntax.c" 3 4
        ((void *)0)
# 3183 "syntax.c"
            ;
 }
 else if (strncasecmp((char *)(arg), (char *)("nextgroup"), (size_t)(9)) == 0
  && (((arg[9]) == ' ' || (arg[9]) == '\t') || arg[9] == '='))
 {
     if (get_id_list(&arg, 9, next_list) == 0)
  return 
# 3189 "syntax.c" 3 4
        ((void *)0)
# 3189 "syntax.c"
            ;
 }
 else
     break;
    }

    *flagsp = flags;

    return arg;
}






    static void
syn_incl_toplevel(id, flagsp)
    int id;
    int *flagsp;
{
    if ((*flagsp & 0x01) || curbuf->b_syn_topgrp == 0)
 return;
    *flagsp |= 0x01;
    if (curbuf->b_syn_topgrp >= 15000)
    {

 short *grp_list = (short *)alloc((unsigned)(2 * sizeof(short)));
 int tlg_id = curbuf->b_syn_topgrp - 15000;

 if (grp_list != 
# 3219 "syntax.c" 3 4
                ((void *)0)
# 3219 "syntax.c"
                    )
 {
     grp_list[0] = id;
     grp_list[1] = 0;
     syn_combine_list(&((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[tlg_id].scl_list, &grp_list,
    2);
 }
    }
}





    static void
syn_cmd_include(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    int sgl_id = 1;
    char_u *group_name_end;
    char_u *rest;
    char_u *errormsg = 
# 3242 "syntax.c" 3 4
                      ((void *)0)
# 3242 "syntax.c"
                          ;
    int prev_toplvl_grp;
    int prev_syn_inc_tag;

    eap->nextcmd = find_nextcmd(arg);
    if (eap->skip)
 return;

    if (arg[0] == '@')
    {
 ++arg;
 rest = get_group_name(arg, &group_name_end);
 if (rest == 
# 3254 "syntax.c" 3 4
            ((void *)0)
# 3254 "syntax.c"
                )
 {
     emsg((char_u *)((char_u *)"Filename required"));
     return;
 }
 sgl_id = syn_check_cluster(arg, (int)(group_name_end - arg));

 eap->arg = rest;
    }





    eap->argt |= (0x08 | 0x10);
    separate_nextcmd(eap);
    if (expand_filename(eap, syn_cmdlinep, &errormsg) == 0)
    {
 if (errormsg != 
# 3272 "syntax.c" 3 4
                ((void *)0)
# 3272 "syntax.c"
                    )
     emsg((char_u *)(errormsg));
 return;
    }





    prev_syn_inc_tag = current_syn_inc_tag;
    current_syn_inc_tag = ++running_syn_inc_tag;
    prev_toplvl_grp = curbuf->b_syn_topgrp;
    curbuf->b_syn_topgrp = sgl_id;
    if (do_source(eap->arg, 0, 0) == 0)
 emsg2(e_notopen, eap->arg);
    curbuf->b_syn_topgrp = prev_toplvl_grp;
    current_syn_inc_tag = prev_syn_inc_tag;
}





    static void
syn_cmd_keyword(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *group_name_end;
    int syn_id;
    char_u *rest;
    char_u *keyword_copy;
    char_u *p;
    char_u *first_arg;
    int round;
    int flags = 0;
    short *next_list = 
# 3309 "syntax.c" 3 4
                      ((void *)0)
# 3309 "syntax.c"
                          ;

    rest = get_group_name(arg, &group_name_end);

    if (rest != 
# 3313 "syntax.c" 3 4
               ((void *)0)
# 3313 "syntax.c"
                   )
    {
 syn_id = syn_check_group(arg, (int)(group_name_end - arg));


 keyword_copy = alloc((unsigned)strlen((char *)(rest)) + 1);
 if (keyword_copy != 
# 3319 "syntax.c" 3 4
                    ((void *)0)
# 3319 "syntax.c"
                        )
 {






     first_arg = rest;
     for (round = 1; round <= 2; ++round)
     {



  for (rest = first_arg; rest != 
# 3333 "syntax.c" 3 4
                                ((void *)0) 
# 3333 "syntax.c"
                                     && !ends_excmd(*rest);
             rest = skipwhite(rest))
  {
      rest = get_syn_options(rest, &flags, 
# 3336 "syntax.c" 3 4
                                          ((void *)0)
# 3336 "syntax.c"
                                              ,
           
# 3337 "syntax.c" 3 4
          ((void *)0)
# 3337 "syntax.c"
              , &next_list);
      if (rest == 
# 3338 "syntax.c" 3 4
                 ((void *)0) 
# 3338 "syntax.c"
                      || ends_excmd(*rest))
   break;
      p = keyword_copy;
      while (*rest && !((*rest) == ' ' || (*rest) == '\t'))
      {
   if (*rest == '\\' && rest[1] != '\000')
       ++rest;
   *p++ = *rest++;
      }
      *p = '\000';
      if (round == 2 && !eap->skip)
      {
   for (p = vim_strchr(keyword_copy, '['); ; ++p)
   {
       if (p != 
# 3352 "syntax.c" 3 4
               ((void *)0)
# 3352 "syntax.c"
                   )
    *p = '\000';
       add_keyword(keyword_copy, syn_id, flags, next_list);
       if (p == 
# 3355 "syntax.c" 3 4
               ((void *)0) 
# 3355 "syntax.c"
                    || p[1] == '\000' || p[1] == ']')
    break;
       p[0] = p[1];
   }
      }
  }
  if (round == 1)
      syn_incl_toplevel(syn_id, &flags);
     }
     vim_free(keyword_copy);
 }
    }

    if (rest != 
# 3368 "syntax.c" 3 4
               ((void *)0)
# 3368 "syntax.c"
                   )
 eap->nextcmd = check_nextcmd(rest);
    else
 emsg2((char_u *)(e_invarg2), (char_u *)(arg));

    vim_free(next_list);
    redraw_curbuf_later(40);
}






    static void
syn_cmd_match(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *group_name_end;
    char_u *rest;
    struct syn_pattern item;
    int syn_id;
    int idx;
    int flags = 0;
    int sync_idx = 0;
    short *cont_list = 
# 3395 "syntax.c" 3 4
                       ((void *)0)
# 3395 "syntax.c"
                           ;
    short *next_list = 
# 3396 "syntax.c" 3 4
                       ((void *)0)
# 3396 "syntax.c"
                           ;


    rest = get_group_name(arg, &group_name_end);


    rest = get_syn_options(rest, &flags, syncing ? &sync_idx : 
# 3402 "syntax.c" 3 4
                                                              ((void *)0)
# 3402 "syntax.c"
                                                                  ,
            &cont_list, &next_list);


    init_syn_patterns();
    memset((&item), (0), (sizeof(item)));
    rest = get_syn_pattern(rest, &item);
    if (vim_regcomp_had_eol() && !(flags & 0x800))
 flags |= 0x08;


    rest = get_syn_options(rest, &flags, syncing ? &sync_idx : 
# 3413 "syntax.c" 3 4
                                                              ((void *)0)
# 3413 "syntax.c"
                                                                  ,
            &cont_list, &next_list);

    if (rest != 
# 3416 "syntax.c" 3 4
               ((void *)0)
# 3416 "syntax.c"
                   )
    {



 eap->nextcmd = check_nextcmd(rest);
 if (!ends_excmd(*rest) || eap->skip)
     rest = 
# 3423 "syntax.c" 3 4
           ((void *)0)
# 3423 "syntax.c"
               ;
 else if (ga_grow(&curbuf->b_syn_patterns, 1) != 0
  && (syn_id = syn_check_group(arg,
        (int)(group_name_end - arg))) != 0)
 {
     syn_incl_toplevel(syn_id, &flags);



     idx = curbuf->b_syn_patterns.ga_len;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx] = item;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syncing = syncing;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_type = 1;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syn_id = syn_id;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syn_inc_tag = current_syn_inc_tag;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_flags = flags;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_sync_idx = sync_idx;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_cont_list = cont_list;
     ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_next_list = next_list;
     ++curbuf->b_syn_patterns.ga_len;
     --curbuf->b_syn_patterns.ga_room;


     if (flags & (0x10|0x20))
  curbuf->b_syn_sync_flags |= 0x02;

     redraw_curbuf_later(40);
     return;
 }
    }




    vim_free(item.sp_prog);
    vim_free(item.sp_pattern);
    vim_free(cont_list);
    vim_free(next_list);

    if (rest == 
# 3462 "syntax.c" 3 4
               ((void *)0)
# 3462 "syntax.c"
                   )
 emsg2((char_u *)(e_invarg2), (char_u *)(arg));
}





    static void
syn_cmd_region(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *group_name_end;
    char_u *rest;
    char_u *key_end;
    char_u *key = 
# 3479 "syntax.c" 3 4
                  ((void *)0)
# 3479 "syntax.c"
                      ;
    char_u *p;
    int item;




    struct pat_ptr
    {
 struct syn_pattern *pp_synp;
 int pp_matchgroup_id;
 struct pat_ptr *pp_next;
    } *(pat_ptrs[3]);

    struct pat_ptr *ppp;
    struct pat_ptr *ppp_next;
    int pat_count = 0;
    int syn_id;
    int matchgroup_id = 0;
    int not_enough = 0;
    int illegal = 0;
    int success = 0;
    int idx;
    int flags = 0;
    short *cont_list = 
# 3503 "syntax.c" 3 4
                       ((void *)0)
# 3503 "syntax.c"
                           ;
    short *next_list = 
# 3504 "syntax.c" 3 4
                       ((void *)0)
# 3504 "syntax.c"
                           ;


    rest = get_group_name(arg, &group_name_end);

    pat_ptrs[0] = 
# 3509 "syntax.c" 3 4
                 ((void *)0)
# 3509 "syntax.c"
                     ;
    pat_ptrs[1] = 
# 3510 "syntax.c" 3 4
                 ((void *)0)
# 3510 "syntax.c"
                     ;
    pat_ptrs[2] = 
# 3511 "syntax.c" 3 4
                 ((void *)0)
# 3511 "syntax.c"
                     ;

    init_syn_patterns();




    while (rest != 
# 3518 "syntax.c" 3 4
                  ((void *)0) 
# 3518 "syntax.c"
                       && !ends_excmd(*rest))
    {

 rest = get_syn_options(rest, &flags, 
# 3521 "syntax.c" 3 4
                                     ((void *)0)
# 3521 "syntax.c"
                                         , &cont_list, &next_list);
 if (rest == 
# 3522 "syntax.c" 3 4
            ((void *)0) 
# 3522 "syntax.c"
                 || ends_excmd(*rest))
     break;


 key_end = rest;
 while (*key_end && !((*key_end) == ' ' || (*key_end) == '\t') && *key_end != '=')
     ++key_end;
 vim_free(key);
 key = vim_strnsave_up(rest, (int)(key_end - rest));
 if (key == 
# 3531 "syntax.c" 3 4
           ((void *)0)
# 3531 "syntax.c"
               )
 {
     rest = 
# 3533 "syntax.c" 3 4
           ((void *)0)
# 3533 "syntax.c"
               ;
     break;
 }
 if (strcmp((char *)(key), (char *)("MATCHGROUP")) == 0)
     item = 3;
 else if (strcmp((char *)(key), (char *)("START")) == 0)
     item = 0;
 else if (strcmp((char *)(key), (char *)("END")) == 0)
     item = 2;
 else if (strcmp((char *)(key), (char *)("SKIP")) == 0)
 {
     if (pat_ptrs[1] != 
# 3544 "syntax.c" 3 4
                               ((void *)0)
# 3544 "syntax.c"
                                   )
     {
  illegal = 1;
  break;
     }
     item = 1;
 }
 else
     break;
 rest = skipwhite(key_end);
 if (*rest != '=')
 {
     rest = 
# 3556 "syntax.c" 3 4
           ((void *)0)
# 3556 "syntax.c"
               ;
     emsg2((char_u *)("Missing '=': %s"), (char_u *)(arg));
     break;
 }
 rest = skipwhite(rest + 1);
 if (*rest == '\000')
 {
     not_enough = 1;
     break;
 }

 if (item == 3)
 {
     p = skiptowhite(rest);
     if ((p - rest == 4 && strncmp((char *)(rest), (char *)("NONE"), (size_t)(4)) == 0) || eap->skip)
  matchgroup_id = 0;
     else
     {
  matchgroup_id = syn_check_group(rest, (int)(p - rest));
  if (matchgroup_id == 0)
  {
      illegal = 1;
      break;
  }
     }
     rest = skipwhite(p);
 }
 else
 {





     ppp = (struct pat_ptr *)alloc((unsigned)sizeof(struct pat_ptr));
     if (ppp == 
# 3591 "syntax.c" 3 4
               ((void *)0)
# 3591 "syntax.c"
                   )
     {
  rest = 
# 3593 "syntax.c" 3 4
        ((void *)0)
# 3593 "syntax.c"
            ;
  break;
     }
     ppp->pp_next = pat_ptrs[item];
     pat_ptrs[item] = ppp;
     ppp->pp_synp = (struct syn_pattern *)alloc_clear(
     (unsigned)sizeof(struct syn_pattern));
     if (ppp->pp_synp == 
# 3600 "syntax.c" 3 4
                        ((void *)0)
# 3600 "syntax.c"
                            )
     {
  rest = 
# 3602 "syntax.c" 3 4
        ((void *)0)
# 3602 "syntax.c"
            ;
  break;
     }




     rest = get_syn_pattern(rest, ppp->pp_synp);
     if (item == 2 && vim_regcomp_had_eol()
         && !(flags & 0x800))
  ppp->pp_synp->sp_flags |= 0x08;
     ppp->pp_matchgroup_id = matchgroup_id;
     ++pat_count;
 }
    }
    vim_free(key);
    if (illegal || not_enough)
 rest = 
# 3619 "syntax.c" 3 4
       ((void *)0)
# 3619 "syntax.c"
           ;




    if (rest != 
# 3624 "syntax.c" 3 4
               ((void *)0) 
# 3624 "syntax.c"
                    && (pat_ptrs[0] == 
# 3624 "syntax.c" 3 4
                                                ((void *)0) 
# 3624 "syntax.c"
                                                     ||
        pat_ptrs[2] == 
# 3625 "syntax.c" 3 4
                             ((void *)0)
# 3625 "syntax.c"
                                 ))
    {
 not_enough = 1;
 rest = 
# 3628 "syntax.c" 3 4
       ((void *)0)
# 3628 "syntax.c"
           ;
    }

    if (rest != 
# 3631 "syntax.c" 3 4
               ((void *)0)
# 3631 "syntax.c"
                   )
    {




 eap->nextcmd = check_nextcmd(rest);
 if (!ends_excmd(*rest) || eap->skip)
     rest = 
# 3639 "syntax.c" 3 4
           ((void *)0)
# 3639 "syntax.c"
               ;
 else if (ga_grow(&(curbuf->b_syn_patterns), pat_count) != 0
  && (syn_id = syn_check_group(arg,
        (int)(group_name_end - arg))) != 0)
 {
     syn_incl_toplevel(syn_id, &flags);



     idx = curbuf->b_syn_patterns.ga_len;
     for (item = 0; item <= 2; ++item)
     {
  for (ppp = pat_ptrs[item]; ppp != 
# 3651 "syntax.c" 3 4
                                   ((void *)0)
# 3651 "syntax.c"
                                       ; ppp = ppp->pp_next)
  {
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx] = *(ppp->pp_synp);
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syncing = syncing;
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_type =
       (item == 0) ? 2 :
       (item == 1) ? 4 : 3;
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_flags |= flags;
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syn_id = syn_id;
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syn_inc_tag = current_syn_inc_tag;
      ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_syn_match_id =
       ppp->pp_matchgroup_id;
      if (item == 0)
      {
   ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_cont_list = cont_list;
   ((struct syn_pattern *)((curbuf)->b_syn_patterns.ga_data))[idx].sp_next_list = next_list;
      }
      ++curbuf->b_syn_patterns.ga_len;
      --curbuf->b_syn_patterns.ga_room;
      ++idx;
  }
     }

     redraw_curbuf_later(40);
     success = 1;
 }
    }




    for (item = 0; item <= 2; ++item)
 for (ppp = pat_ptrs[item]; ppp != 
# 3683 "syntax.c" 3 4
                                  ((void *)0)
# 3683 "syntax.c"
                                      ; ppp = ppp_next)
 {
     if (!success)
     {
  vim_free(ppp->pp_synp->sp_prog);
  vim_free(ppp->pp_synp->sp_pattern);
     }
     vim_free(ppp->pp_synp);
     ppp_next = ppp->pp_next;
     vim_free(ppp);
 }

    if (!success)
    {
 vim_free(cont_list);
 vim_free(next_list);
 if (not_enough)
     emsg2((char_u *)("Not enough arguments: syntax region %s"), (char_u *)(arg));
 else if (illegal || rest == 
# 3701 "syntax.c" 3 4
                            ((void *)0)
# 3701 "syntax.c"
                                )
     emsg2((char_u *)(e_invarg2), (char_u *)(arg));
    }
}




    static int



syn_compare_stub(v1, v2)
    const void *v1;
    const void *v2;
{
    const short *s1 = v1;
    const short *s2 = v2;

    return (*s1 > *s2 ? 1 : *s1 < *s2 ? -1 : 0);
}





    static void
syn_combine_list(clstr1, clstr2, list_op)
    short **clstr1;
    short **clstr2;
    int list_op;
{
    int count1 = 0;
    int count2 = 0;
    short *g1;
    short *g2;
    short *clstr = 
# 3737 "syntax.c" 3 4
                  ((void *)0)
# 3737 "syntax.c"
                      ;
    int count;
    int round;




    if (*clstr2 == 
# 3744 "syntax.c" 3 4
                  ((void *)0)
# 3744 "syntax.c"
                      )
 return;
    if (*clstr1 == 
# 3746 "syntax.c" 3 4
                  ((void *)0) 
# 3746 "syntax.c"
                       || list_op == 1)
    {
 if (list_op == 1)
     vim_free(*clstr1);
 if (list_op == 1 || list_op == 2)
     *clstr1 = *clstr2;
 else
     vim_free(*clstr2);
 return;
    }

    for (g1 = *clstr1; *g1; g1++)
 ++count1;
    for (g2 = *clstr2; *g2; g2++)
 ++count2;




    qsort(*clstr1, (size_t)count1, sizeof(short), syn_compare_stub);
    qsort(*clstr2, (size_t)count2, sizeof(short), syn_compare_stub);







    for (round = 1; round <= 2; round++)
    {
 g1 = *clstr1;
 g2 = *clstr2;
 count = 0;




 while (*g1 && *g2)
 {



     if (*g1 < *g2)
     {
  if (round == 2)
      clstr[count] = *g1;
  count++;
  g1++;
  continue;
     }




     if (list_op == 2)
     {
  if (round == 2)
      clstr[count] = *g2;
  count++;
     }
     if (*g1 == *g2)
  g1++;
     g2++;
 }






 for (; *g1; g1++, count++)
     if (round == 2)
  clstr[count] = *g1;
 if (list_op == 2)
     for (; *g2; g2++, count++)
  if (round == 2)
      clstr[count] = *g2;

 if (round == 1)
 {




     if (count == 0)
     {
  clstr = 
# 3832 "syntax.c" 3 4
         ((void *)0)
# 3832 "syntax.c"
             ;
  break;
     }
     clstr = (short *)alloc((unsigned)((count + 1) * sizeof(short)));
     if (clstr == 
# 3836 "syntax.c" 3 4
                 ((void *)0)
# 3836 "syntax.c"
                     )
  break;
     clstr[count] = 0;
 }
    }




    vim_free(*clstr1);
    vim_free(*clstr2);
    *clstr1 = clstr;
}





    static int
syn_scl_name2id(name)
    char_u *name;
{
    int i;
    char_u *name_u;


    name_u = vim_strsave_up(name);
    if (name_u == 
# 3863 "syntax.c" 3 4
                 ((void *)0)
# 3863 "syntax.c"
                     )
 return 0;
    for (i = curbuf->b_syn_clusters.ga_len; --i >= 0; )
 if (((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[i].scl_name_u != 
# 3866 "syntax.c" 3 4
                                       ((void *)0)
  
# 3867 "syntax.c"
 && strcmp((char *)(name_u), (char *)(((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[i].scl_name_u)) == 0)
     break;
    vim_free(name_u);
    return (i < 0 ? 0 : i + 15000);
}




    static int
syn_scl_namen2id(linep, len)
    char_u *linep;
    int len;
{
    char_u *name;
    int id = 0;

    name = vim_strnsave(linep, len);
    if (name != 
# 3885 "syntax.c" 3 4
               ((void *)0)
# 3885 "syntax.c"
                   )
    {
 id = syn_scl_name2id(name);
 vim_free(name);
    }
    return id;
}







    static int
syn_check_cluster(pp, len)
    char_u *pp;
    int len;
{
    int id;
    char_u *name;

    name = vim_strnsave(pp, len);
    if (name == 
# 3908 "syntax.c" 3 4
               ((void *)0)
# 3908 "syntax.c"
                   )
 return 0;

    id = syn_scl_name2id(name);
    if (id == 0)
 id = syn_add_cluster(name);
    else
 vim_free(name);
    return id;
}






    static int
syn_add_cluster(name)
    char_u *name;
{
    int len;




    if (curbuf->b_syn_clusters.ga_data == 
# 3933 "syntax.c" 3 4
                                         ((void *)0)
# 3933 "syntax.c"
                                             )
    {
 curbuf->b_syn_clusters.ga_itemsize = sizeof(struct syn_cluster);
 curbuf->b_syn_clusters.ga_growsize = 10;
    }




    if (ga_grow(&curbuf->b_syn_clusters, 1) == 0)
    {
 vim_free(name);
 return 0;
    }
    len = curbuf->b_syn_clusters.ga_len;

    memset((&(((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[len])), (0), (sizeof(struct syn_cluster)));
    ((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[len].scl_name = name;
    ((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[len].scl_name_u = vim_strsave_up(name);
    ((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[len].scl_list = 
# 3952 "syntax.c" 3 4
                                     ((void *)0)
# 3952 "syntax.c"
                                         ;
    ++curbuf->b_syn_clusters.ga_len;
    --curbuf->b_syn_clusters.ga_room;

    return len + 15000;
}






    static void
syn_cmd_cluster(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg = eap->arg;
    char_u *group_name_end;
    char_u *rest;
    int scl_id;
    short *clstr_list;
    int got_clstr = 0;
    int opt_len;
    int list_op;

    eap->nextcmd = find_nextcmd(arg);
    if (eap->skip)
 return;

    rest = get_group_name(arg, &group_name_end);

    if (rest != 
# 3984 "syntax.c" 3 4
               ((void *)0)
# 3984 "syntax.c"
                   )
    {
 scl_id = syn_check_cluster(arg, (int)(group_name_end - arg))
      - 15000;

 for (;;)
 {
     if (strncasecmp((char *)(rest), (char *)("add"), (size_t)(3)) == 0
      && (((rest[3]) == ' ' || (rest[3]) == '\t') || rest[3] == '='))
     {
  opt_len = 3;
  list_op = 2;
     }
     else if (strncasecmp((char *)(rest), (char *)("remove"), (size_t)(6)) == 0
      && (((rest[6]) == ' ' || (rest[6]) == '\t') || rest[6] == '='))
     {
  opt_len = 6;
  list_op = 3;
     }
     else if (strncasecmp((char *)(rest), (char *)("contains"), (size_t)(8)) == 0
   && (((rest[8]) == ' ' || (rest[8]) == '\t') || rest[8] == '='))
     {
  opt_len = 8;
  list_op = 1;
     }
     else
  break;

     clstr_list = 
# 4012 "syntax.c" 3 4
                 ((void *)0)
# 4012 "syntax.c"
                     ;
     if (get_id_list(&rest, opt_len, &clstr_list) == 0)
     {
  emsg2((char_u *)(e_invarg2), (char_u *)(rest));
  break;
     }
     syn_combine_list(&((struct syn_cluster *)((curbuf)->b_syn_clusters.ga_data))[scl_id].scl_list,
        &clstr_list, list_op);
     got_clstr = 1;
 }

 if (got_clstr)
     redraw_curbuf_later(40);
    }

    if (!got_clstr)
 emsg((char_u *)("No cluster specified"));
    if (rest == 
# 4029 "syntax.c" 3 4
               ((void *)0) 
# 4029 "syntax.c"
                    || !ends_excmd(*rest))
 emsg2((char_u *)(e_invarg2), (char_u *)(arg));
}




    static void
init_syn_patterns()
{
    curbuf->b_syn_patterns.ga_itemsize = sizeof(struct syn_pattern);
    curbuf->b_syn_patterns.ga_growsize = 10;
}






    static char_u *
get_syn_pattern(arg, ci)
    char_u *arg;
    struct syn_pattern *ci;
{
    char_u *end;
    int *p;
    int idx;
    char_u *cpo_save;


    if (arg == 
# 4059 "syntax.c" 3 4
              ((void *)0) 
# 4059 "syntax.c"
                   || arg[1] == '\000' || arg[2] == '\000')
 return 
# 4060 "syntax.c" 3 4
       ((void *)0)
# 4060 "syntax.c"
           ;

    end = skip_regexp(arg + 1, *arg, 1);
    if (*end != *arg)
    {
 emsg2((char_u *)("Pattern delimiter not found: %s"), (char_u *)(arg));
 return 
# 4066 "syntax.c" 3 4
       ((void *)0)
# 4066 "syntax.c"
           ;
    }

    if ((ci->sp_pattern = vim_strnsave(arg + 1, (int)(end - arg - 1))) == 
# 4069 "syntax.c" 3 4
                                                                         ((void *)0)
# 4069 "syntax.c"
                                                                             )
 return 
# 4070 "syntax.c" 3 4
       ((void *)0)
# 4070 "syntax.c"
           ;


    cpo_save = p_cpo;
    p_cpo = (char_u *)"";
    ci->sp_prog = vim_regcomp(ci->sp_pattern, 1);
    p_cpo = cpo_save;

    if (ci->sp_prog == 
# 4078 "syntax.c" 3 4
                      ((void *)0)
# 4078 "syntax.c"
                          )
 return 
# 4079 "syntax.c" 3 4
       ((void *)0)
# 4079 "syntax.c"
           ;
    ci->sp_ic = curbuf->b_syn_ic;




    ++end;
    do
    {
 for (idx = 7; --idx >= 0; )
     if (strncmp((char *)(end), (char *)(spo_name_tab[idx]), (size_t)(3)) == 0)
  break;
 if (idx >= 0)
 {
     p = &(ci->sp_offsets[idx]);
     if (idx != 6)
  switch (end[3])
  {
      case 's': break;
      case 'b': break;
      case 'e': idx += 7; break;
      default: idx = -1; break;
  }
     if (idx >= 0)
     {
  ci->sp_off_flags |= (1 << idx);
  if (idx == 6)
  {
      end += 3;
      *p = getdigits(&end);


      if (!(ci->sp_off_flags & (1 << 0)))
      {
   ci->sp_off_flags |= (1 << 0);
   ci->sp_offsets[0] = *p;
      }
  }
  else
  {
      end += 4;
      if (*end == '+')
      {
   ++end;
   *p = getdigits(&end);
      }
      else if (*end == '-')
      {
   ++end;
   *p = -getdigits(&end);
      }
  }
  if (*end != ',')
      break;
  ++end;
     }
 }
    } while (idx >= 0);

    if (!ends_excmd(*end) && !((*end) == ' ' || (*end) == '\t'))
    {
 emsg2((char_u *)("Garbage after pattern: %s"), (char_u *)(arg));
 return 
# 4141 "syntax.c" 3 4
       ((void *)0)
# 4141 "syntax.c"
           ;
    }
    return skipwhite(end);
}





    static void
syn_cmd_sync(eap, syncing)
    EXARG *eap;
    int syncing;
{
    char_u *arg_start = eap->arg;
    char_u *arg_end;
    char_u *key = 
# 4157 "syntax.c" 3 4
                 ((void *)0)
# 4157 "syntax.c"
                     ;
    char_u *next_arg;
    int illegal = 0;
    int finished = 0;
    long n;
    char_u *cpo_save;

    if (ends_excmd(*arg_start))
    {
 syn_cmd_list(eap, 1);
 return;
    }

    while (!ends_excmd(*arg_start))
    {
 arg_end = skiptowhite(arg_start);
 next_arg = skipwhite(arg_end);
 vim_free(key);
 key = vim_strnsave_up(arg_start, (int)(arg_end - arg_start));
 if (strcmp((char *)(key), (char *)("CCOMMENT")) == 0)
 {
     if (!eap->skip)
  curbuf->b_syn_sync_flags |= 0x01;
     if (!ends_excmd(*next_arg))
     {
  arg_end = skiptowhite(next_arg);
  if (!eap->skip)
      curbuf->b_syn_sync_id = syn_check_group(next_arg,
         (int)(arg_end - next_arg));
  next_arg = skipwhite(arg_end);
     }
     else if (!eap->skip)
  curbuf->b_syn_sync_id = syn_name2id((char_u *)"Comment");
 }
 else if ( strncmp((char *)(key), (char *)("LINES"), (size_t)(5)) == 0
  || strncmp((char *)(key), (char *)("MINLINES"), (size_t)(8)) == 0
  || strncmp((char *)(key), (char *)("MAXLINES"), (size_t)(8)) == 0)
 {
     if (key[0] == 'L')
  arg_end = key + 6;
     else
  arg_end = key + 9;
     if (arg_end[-1] != '=' || !
# 4199 "syntax.c" 3 4
                               ((*__ctype_b_loc ())[(int) ((
# 4199 "syntax.c"
                               *arg_end
# 4199 "syntax.c" 3 4
                               ))] & (unsigned short int) _ISdigit)
# 4199 "syntax.c"
                                                )
     {
  illegal = 1;
  break;
     }
     n = getdigits(&arg_end);
     if (!eap->skip)
     {
  if (key[1] == 'A')
      curbuf->b_syn_sync_maxlines = n;
  else
      curbuf->b_syn_sync_minlines = n;
     }
 }
 else if (strcmp((char *)(key), (char *)("LINECONT")) == 0)
 {
     if (curbuf->b_syn_linecont_pat != 
# 4215 "syntax.c" 3 4
                                      ((void *)0)
# 4215 "syntax.c"
                                          )
     {
  emsg((char_u *)("syntax sync: line continuations pattern specified twice"));
  finished = 1;
  break;
     }
     arg_end = skip_regexp(next_arg + 1, *next_arg, 1);
     if (*arg_end != *next_arg)
     {
  illegal = 1;
  break;
     }

     if (!eap->skip)
     {

  if ((curbuf->b_syn_linecont_pat = vim_strnsave(next_arg + 1,
          (int)(arg_end - next_arg - 1))) == 
# 4232 "syntax.c" 3 4
                                            ((void *)0)
# 4232 "syntax.c"
                                                )
  {
      finished = 1;
      break;
  }
  curbuf->b_syn_linecont_ic = curbuf->b_syn_ic;


  cpo_save = p_cpo;
  p_cpo = (char_u *)"";
  curbuf->b_syn_linecont_prog =
    vim_regcomp(curbuf->b_syn_linecont_pat, 1);
  p_cpo = cpo_save;

  if (curbuf->b_syn_linecont_prog == 
# 4246 "syntax.c" 3 4
                                    ((void *)0)
# 4246 "syntax.c"
                                        )
  {
      vim_free(curbuf->b_syn_linecont_pat);
      curbuf->b_syn_linecont_pat = 
# 4249 "syntax.c" 3 4
                                  ((void *)0)
# 4249 "syntax.c"
                                      ;
      finished = 1;
      break;
  }
     }
     next_arg = skipwhite(arg_end + 1);
 }
 else
 {
     eap->arg = next_arg;
     if (strcmp((char *)(key), (char *)("MATCH")) == 0)
  syn_cmd_match(eap, 1);
     else if (strcmp((char *)(key), (char *)("REGION")) == 0)
  syn_cmd_region(eap, 1);
     else if (strcmp((char *)(key), (char *)("CLEAR")) == 0)
  syn_cmd_clear(eap, 1);
     else
  illegal = 1;
     finished = 1;
     break;
 }
 arg_start = next_arg;
    }
    vim_free(key);
    if (illegal)
 emsg2((char_u *)("Illegal arguments: %s"), (char_u *)(arg_start));
    else if (!finished)
    {
 eap->nextcmd = check_nextcmd(arg_start);
 redraw_curbuf_later(40);
    }
}
# 4289 "syntax.c"
    static int
get_id_list(arg, keylen, list)
    char_u **arg;
    int keylen;
    short **list;

{
    char_u *p = 
# 4296 "syntax.c" 3 4
               ((void *)0)
# 4296 "syntax.c"
                   ;
    char_u *end;
    int round;
    int count;
    int total_count = 0;
    short *retval = 
# 4301 "syntax.c" 3 4
                   ((void *)0)
# 4301 "syntax.c"
                       ;
    char_u *name;
    vim_regexp *prog;
    int id;
    int i;
    int failed = 0;
# 4315 "syntax.c"
    for (round = 1; round <= 2; ++round)
    {



 p = skipwhite(*arg + keylen);
 if (*p != '=')
 {
     emsg2((char_u *)("Missing equal sign: %s"), (char_u *)(*arg));
     break;
 }
 p = skipwhite(p + 1);
 if (ends_excmd(*p))
 {
     emsg2((char_u *)("Empty argument: %s"), (char_u *)(*arg));
     break;
 }




 count = 0;
 while (!ends_excmd(*p))
 {
     for (end = p; *end && !((*end) == ' ' || (*end) == '\t') && *end != ','; ++end)
  ;
     name = alloc((int)(end - p + 3));
     if (name == 
# 4342 "syntax.c" 3 4
                ((void *)0)
# 4342 "syntax.c"
                    )
     {
  failed = 1;
  break;
     }
     strncpy((char *)(name + 1), (char *)(p), (size_t)(end - p));
     name[end - p + 1] = '\000';
     if ( strcmp((char *)(name + 1), (char *)("ALLBUT")) == 0
      || strcmp((char *)(name + 1), (char *)("ALL")) == 0)
     {
  if (toupper(**arg) != 'C')
  {
      emsg2((char_u *)("%s not allowed here"), (char_u *)(name + 1));
      failed = 1;
      vim_free(name);
      break;
  }
  if (count != 0)
  {
      emsg2((char_u *)("%s must be first in contains list"), (char_u *)(name + 1));
      failed = 1;
      vim_free(name);
      break;
  }
  id = 9999 + current_syn_inc_tag;
     }
     else if (name[1] == '@')
     {
  id = syn_check_cluster(name + 2, (int)(end - p - 1));
     }
     else
     {



  if ((char_u *)strpbrk((char *)(name + 1), (char *)((char_u *)"\\.*^$~[")) == 
# 4377 "syntax.c" 3 4
                                                    ((void *)0)
# 4377 "syntax.c"
                                                        )
      id = syn_check_group(name + 1, (int)(end - p));
  else
  {



      *name = '^';
      strcat((char *)(name), (char *)("$"));
      prog = vim_regcomp(name, 1);
      if (prog == 
# 4387 "syntax.c" 3 4
                 ((void *)0)
# 4387 "syntax.c"
                     )
      {
   failed = 1;
   vim_free(name);
   break;
      }

      reg_ic = 1;
      id = 0;
      for (i = highlight_ga.ga_len; --i >= 0; )
      {
   if (vim_regexec(prog, ((struct hl_group *)((highlight_ga.ga_data)))[i].sg_name, 1))
   {
       if (round == 2)
       {




    if (count >= total_count)
    {
        vim_free(retval);
        round = 1;
    }
    else
        retval[count] = i + 1;
       }
       ++count;
       id = -1;
   }
      }
      vim_free(prog);
  }
     }
     vim_free(name);
     if (id == 0)
     {
  emsg2((char_u *)("Unknown group name: %s"), (char_u *)(p));
  failed = 1;
  break;
     }
     if (id > 0)
     {
  if (round == 2)
  {

      if (count >= total_count)
      {
   vim_free(retval);
   round = 1;
      }
      else
   retval[count] = id;
  }
  ++count;
     }
     p = skipwhite(end);
     if (*p != ',')
  break;
     p = skipwhite(p + 1);
 }
 if (failed)
     break;
 if (round == 1)
 {
     retval = (short *)alloc((unsigned)((count + 1) * sizeof(short)));
     if (retval == 
# 4453 "syntax.c" 3 4
                  ((void *)0)
# 4453 "syntax.c"
                      )
  break;
     retval[count] = 0;
     total_count = count;
 }
    }

    *arg = p;
    if (failed || retval == 
# 4461 "syntax.c" 3 4
                           ((void *)0)
# 4461 "syntax.c"
                               )
    {
 vim_free(retval);
 return 0;
    }

    if (*list == 
# 4467 "syntax.c" 3 4
                ((void *)0)
# 4467 "syntax.c"
                    )
 *list = retval;
    else
 vim_free(retval);

    return 1;
}




    static short *
copy_id_list(list)
    short *list;
{
    int len;
    int count;
    short *retval;

    if (list == 
# 4486 "syntax.c" 3 4
               ((void *)0)
# 4486 "syntax.c"
                   )
 return 
# 4487 "syntax.c" 3 4
       ((void *)0)
# 4487 "syntax.c"
           ;

    for (count = 0; list[count]; ++count)
 ;
    len = (count + 1) * sizeof(short);
    retval = (short *)alloc((unsigned)len);
    if (retval != 
# 4493 "syntax.c" 3 4
                 ((void *)0)
# 4493 "syntax.c"
                     )
 mch_memmove(retval, list, (size_t)len);

    return retval;
}




    static int
in_id_list(list, id, inctag, contained)
    short *list;
    int id;
    int inctag;
    int contained;
{
    int retval;
    short scl_id;
    short *scl_list;





    if (list == (short *)-1)
 return !contained;






    if (*list >= 9999 && *list < 15000)
    {
 if (*list - 9999 != inctag)
     return 0;
 ++list;
 retval = 0;
    }
    else
 retval = 1;




    for (; *list; ++list)
    {
 if (*list == id)
     return retval;
 scl_id = *list - 15000;
 if (scl_id >= 0)
 {
     scl_list = ((struct syn_cluster *)((syn_buf)->b_syn_clusters.ga_data))[scl_id].scl_list;
     if (scl_list != 
# 4546 "syntax.c" 3 4
                    ((void *)0) 
# 4546 "syntax.c"
                         && in_id_list(scl_list, id, inctag, contained))
  return retval;
 }
    }
    return !retval;
}

struct subcommand
{
    char *name;
    void (*func)(EXARG *, int);
};

static struct subcommand subcommands[] =
{
    {"case", syn_cmd_case},
    {"clear", syn_cmd_clear},
    {"cluster", syn_cmd_cluster},
    {"include", syn_cmd_include},
    {"keyword", syn_cmd_keyword},
    {"list", syn_cmd_list},
    {"manual", syn_cmd_manual},
    {"match", syn_cmd_match},
    {"on", syn_cmd_on},
    {"off", syn_cmd_off},
    {"region", syn_cmd_region},
    {"sync", syn_cmd_sync},
    {"", syn_cmd_list},
    {
# 4574 "syntax.c" 3 4
    ((void *)0)
# 4574 "syntax.c"
        , 
# 4574 "syntax.c" 3 4
          ((void *)0)
# 4574 "syntax.c"
              }
};






    void
do_syntax(eap, cmdlinep)
    EXARG *eap;
    char_u **cmdlinep;
{
    char_u *arg = eap->arg;
    char_u *subcmd_end;
    char_u *subcmd_name;
    int i;

    syn_cmdlinep = cmdlinep;


    for (subcmd_end = arg; 
# 4595 "syntax.c" 3 4
                          ((*__ctype_b_loc ())[(int) ((
# 4595 "syntax.c"
                          *subcmd_end
# 4595 "syntax.c" 3 4
                          ))] & (unsigned short int) _ISalpha)
# 4595 "syntax.c"
                                              ; ++subcmd_end)
 ;
    subcmd_name = vim_strnsave(arg, (int)(subcmd_end - arg));
    if (subcmd_name != 
# 4598 "syntax.c" 3 4
                      ((void *)0)
# 4598 "syntax.c"
                          )
    {
 if (eap->skip)
     ++emsg_off;
 for (i = 0; ; ++i)
 {
     if (subcommands[i].name == 
# 4604 "syntax.c" 3 4
                               ((void *)0)
# 4604 "syntax.c"
                                   )
     {
  emsg2((char_u *)("Invalid :syntax subcommand: %s"), (char_u *)(subcmd_name));
  break;
     }
     if (strcmp((char *)(subcmd_name), (char *)((char_u *)subcommands[i].name)) == 0)
     {
  eap->arg = skipwhite(subcmd_end);
  (subcommands[i].func)(eap, 0);
  break;
     }
 }
 vim_free(subcmd_name);
 if (eap->skip)
     --emsg_off;
    }
}

    int
syntax_present(buf)
    BUF *buf;
{
    return (buf->b_syn_patterns.ga_len != 0
     || buf->b_syn_clusters.ga_len != 0
     || curbuf->b_keywtab != 
# 4628 "syntax.c" 3 4
                            ((void *)0)
     
# 4629 "syntax.c"
    || curbuf->b_keywtab_ic != 
# 4629 "syntax.c" 3 4
                               ((void *)0)
# 4629 "syntax.c"
                                   );
}



static enum
{
    EXP_SUBCMD,
    EXP_CASE
} expand_what;





    void
set_context_in_syntax_cmd(arg)
    char_u *arg;
{
    char_u *p;


    expand_context = 12;
    expand_what = EXP_SUBCMD;
    expand_pattern = arg;
    include_link = 0;


    if (*arg != '\000')
    {
 p = skiptowhite(arg);
 if (*p != '\000')
 {
     expand_pattern = skipwhite(p);
     if (*skiptowhite(expand_pattern) != '\000')
  expand_context = 0;
     else if (strncasecmp((char *)(arg), (char *)("case"), (size_t)(p - arg)) == 0)
  expand_what = EXP_CASE;
     else if ( strncasecmp((char *)(arg), (char *)("keyword"), (size_t)(p - arg)) == 0
      || strncasecmp((char *)(arg), (char *)("region"), (size_t)(p - arg)) == 0
      || strncasecmp((char *)(arg), (char *)("match"), (size_t)(p - arg)) == 0
      || strncasecmp((char *)(arg), (char *)("list"), (size_t)(p - arg)) == 0)
  expand_context = 13;
     else
  expand_context = 0;
 }
    }
}

static char *(case_args[]) = {"match", "ignore", 
# 4678 "syntax.c" 3 4
                                                ((void *)0)
# 4678 "syntax.c"
                                                    };





    char_u *
get_syntax_name(idx)
    int idx;
{
    if (expand_what == EXP_SUBCMD)
 return (char_u *)subcommands[idx].name;
    return (char_u *)case_args[idx];
}







    int
syn_get_id(line, col, trans)
    long line;
    long col;
    int trans;
{
    if (curwin->w_buffer != syn_buf
      || col < (long)current_col || line != current_lnum)
 syntax_start(curwin, line);

    (void)get_syntax_attr((colnr_t)col, ml_get((linenr_t)line));

    return (trans ? current_trans_id : current_id);
}






    static int
syn_regexec(prog, string, at_bol)
    vim_regexp *prog;
    char_u *string;
    int at_bol;
{
    int retval;
    BUF *save_curbuf;

    save_curbuf = curbuf;
    curbuf = syn_buf;
    retval = vim_regexec(prog, string, at_bol);
    curbuf = save_curbuf;
    return retval;
}
# 4748 "syntax.c"
static char *(highlight_init_both[]) =
    {



 "ErrorMsg term=standout ctermbg=DarkRed ctermfg=White guibg=Red guifg=White",
 "IncSearch term=reverse cterm=reverse gui=reverse",
 "ModeMsg term=bold cterm=bold gui=bold",
 "NonText term=bold ctermfg=Blue gui=bold guifg=Blue",
 "StatusLine term=reverse,bold cterm=reverse,bold gui=reverse,bold",
 "StatusLineNC term=reverse cterm=reverse gui=reverse",
 "Visual term=reverse cterm=reverse gui=reverse guifg=Grey guibg=fg",
 "VisualNOS term=underline,bold cterm=underline,bold gui=underline,bold",
 
# 4761 "syntax.c" 3 4
((void *)0)
    
# 4762 "syntax.c"
   };

static char *(highlight_init_light[]) =
    {
 "Directory term=bold ctermfg=DarkBlue guifg=Blue",
 "LineNr term=underline ctermfg=Brown guifg=Brown",
 "MoreMsg term=bold ctermfg=DarkGreen gui=bold guifg=SeaGreen",
 "Normal gui=NONE",
 "Question term=standout ctermfg=DarkGreen gui=bold guifg=SeaGreen",
 "Search term=reverse ctermbg=Yellow ctermfg=NONE guibg=Yellow guifg=NONE",
 "SpecialKey term=bold ctermfg=DarkBlue guifg=Blue",
 "Title term=bold ctermfg=DarkMagenta gui=bold guifg=Magenta",
 "WarningMsg term=standout ctermfg=DarkRed guifg=Red",
 "WildMenu term=standout ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black",
 
# 4776 "syntax.c" 3 4
((void *)0)
    
# 4777 "syntax.c"
   };

static char *(highlight_init_dark[]) =
    {
 "Directory term=bold ctermfg=LightCyan guifg=Cyan",
 "LineNr term=underline ctermfg=Yellow guifg=Yellow",
 "MoreMsg term=bold ctermfg=LightGreen gui=bold guifg=SeaGreen",
 "Normal gui=NONE",
 "Question term=standout ctermfg=LightGreen gui=bold guifg=Green",
 "Search term=reverse ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black",
 "SpecialKey term=bold ctermfg=LightBlue guifg=Cyan",
 "Title term=bold ctermfg=LightMagenta gui=bold guifg=Magenta",
 "WarningMsg term=standout ctermfg=LightRed guifg=Red",
 "WildMenu term=standout ctermbg=Yellow ctermfg=Black guibg=Yellow guifg=Black",
 
# 4791 "syntax.c" 3 4
((void *)0)
    
# 4792 "syntax.c"
   };

    void
init_highlight(both)
    int both;
{
    int i;
    char **pp;
    static int had_both = 0;

    if (both)
    {
 had_both = 1;
 pp = highlight_init_both;
 for (i = 0; pp[i] != 
# 4806 "syntax.c" 3 4
                     ((void *)0)
# 4806 "syntax.c"
                         ; ++i)
     do_highlight((char_u *)pp[i], 0, 1);
    }
    else if (!had_both)



 return;

    if (tolower(*p_bg) == 'l')
 pp = highlight_init_light;
    else
 pp = highlight_init_dark;
    for (i = 0; pp[i] != 
# 4819 "syntax.c" 3 4
                        ((void *)0)
# 4819 "syntax.c"
                            ; ++i)
 do_highlight((char_u *)pp[i], 0, 1);
}




    void
do_highlight(line, forceit, init)
    char_u *line;
    int forceit;
    int init;
{
    char_u *name_end;
    char_u *p;
    char_u *linep;
    char_u *key_start;
    char_u *arg_start;
    char_u *key = 
# 4837 "syntax.c" 3 4
                 ((void *)0)
# 4837 "syntax.c"
                     , *arg = 
# 4837 "syntax.c" 3 4
                              ((void *)0)
# 4837 "syntax.c"
                                  ;
    long i;
    int off;
    int len;
    int attr;
    int id;
    int idx;
    int doclear = 0;
    int dolink = 0;
    int error = 0;
    int color;
    int is_normal_group = 0;
# 4857 "syntax.c"
    if (ends_excmd(*line))
    {
 for (i = 1; i <= highlight_ga.ga_len && !got_int; ++i)

     highlight_list_one((int)i);
 return;
    }




    name_end = skiptowhite(line);
    linep = skipwhite(name_end);

    if (strncmp((char *)(line), (char *)("clear"), (size_t)(name_end - line)) == 0)
 doclear = 1;
    if (strncmp((char *)(line), (char *)("link"), (size_t)(name_end - line)) == 0)
 dolink = 1;




    if (!doclear && !dolink && ends_excmd(*linep))
    {
 id = syn_namen2id(line, (int)(name_end - line));
 if (id == 0)
     emsg2((char_u *)("highlight group not found: %s"), (char_u *)(line));
 else
     highlight_list_one(id);
 return;
    }




    if (dolink)
    {
 char_u *from_start = linep;
 char_u *from_end;
 char_u *to_start;
 char_u *to_end;
 int from_id;
 int to_id;

 from_end = skiptowhite(from_start);
 to_start = skipwhite(from_end);
 to_end = skiptowhite(to_start);

 if (ends_excmd(*from_start) || ends_excmd(*to_start))
 {
     emsg2((char_u *)("Not enough arguments: \":highlight link %s\""), (char_u *)(from_start));
     return;
 }

 if (!ends_excmd(*skipwhite(to_end)))
 {
     emsg2((char_u *)("Too many arguments: \":highlight link %s\""), (char_u *)(from_start));
     return;
 }

 from_id = syn_check_group(from_start, (int)(from_end - from_start));
 if (strncmp((char *)(to_start), (char *)("NONE"), (size_t)(4)) == 0)
     to_id = 0;
 else
     to_id = syn_check_group(to_start, (int)(to_end - to_start));

 if (from_id > 0 && (!init || ((struct hl_group *)((highlight_ga.ga_data)))[from_id - 1].sg_set == 0))
 {




     if (to_id > 0 && !forceit && !init
      && (((struct hl_group *)((highlight_ga.ga_data)))[from_id - 1].sg_term_attr != 0
   || ((struct hl_group *)((highlight_ga.ga_data)))[from_id - 1].sg_cterm_attr != 0



         ))
     {
  if (sourcing_name == 
# 4937 "syntax.c" 3 4
                      ((void *)0)
# 4937 "syntax.c"
                          )
      emsg((char_u *)("group has settings, highlight link ignored"));
     }
     else
     {
  if (!init)
      ((struct hl_group *)((highlight_ga.ga_data)))[from_id - 1].sg_set |= 8;
  ((struct hl_group *)((highlight_ga.ga_data)))[from_id - 1].sg_link = to_id;
     }
 }

 redraw_curbuf_later(40);
 return;
    }




    if (doclear)
    {
 line = linep;
 if (ends_excmd(*line))
 {
     emsg((char_u *)("Cannot clear all highlight groups"));
     return;
 }
 name_end = skiptowhite(line);
 linep = skipwhite(name_end);
    }




    id = syn_check_group(line, (int)(name_end - line));
    if (id == 0)
 return;
    idx = id - 1;
    if (strcmp((char *)(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_name_u), (char *)("NORMAL")) == 0)
 is_normal_group = 1;







    if (doclear)
 highlight_clear(idx);
    else
      while (!ends_excmd(*linep))
      {
 key_start = linep;
 if (*linep == '=')
 {
     emsg2((char_u *)("unexpected equal sign: %s"), (char_u *)(key_start));
     error = 1;
     break;
 }





 while (*linep && !((*linep) == ' ' || (*linep) == '\t') && *linep != '=')
     ++linep;
 vim_free(key);
 key = vim_strnsave_up(key_start, (int)(linep - key_start));
 if (key == 
# 5004 "syntax.c" 3 4
           ((void *)0)
# 5004 "syntax.c"
               )
 {
     error = 1;
     break;
 }
 linep = skipwhite(linep);

 if (strcmp((char *)(key), (char *)("NONE")) == 0)
 {
     if (!init || ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set == 0)
     {
  if (!init)
      ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set |= 1 +2 +4;
  highlight_clear(idx);
     }
     continue;
 }




 if (*linep != '=')
 {
     emsg2((char_u *)("missing equal sign: %s"), (char_u *)(key_start));
     error = 1;
     break;
 }
 ++linep;




 linep = skipwhite(linep);
 if (*linep == '\'')
 {
     arg_start = ++linep;
     linep = vim_strchr(linep, '\'');
 }
 else
 {
     arg_start = linep;
     linep = skiptowhite(linep);
 }
 if (linep == arg_start)
 {
     emsg2((char_u *)("missing argument: %s"), (char_u *)(key_start));
     error = 1;
     break;
 }
 vim_free(arg);
 arg = vim_strnsave(arg_start, (int)(linep - arg_start));
 if (arg == 
# 5055 "syntax.c" 3 4
           ((void *)0)
# 5055 "syntax.c"
               )
 {
     error = 1;
     break;
 }
 if (*linep == '\'')
     ++linep;




 if ( strcmp((char *)(key), (char *)("TERM")) == 0
  || strcmp((char *)(key), (char *)("CTERM")) == 0
  || strcmp((char *)(key), (char *)("GUI")) == 0)
 {
     attr = 0;
     off = 0;
     while (arg[off] != '\000')
     {
  for (i = sizeof(hl_attr_table) / sizeof(int); --i >= 0; )
  {
      len = strlen((char *)(hl_name_table[i]));
      if (strncasecmp((char *)(arg + off), (char *)(hl_name_table[i]), (size_t)(len)) == 0)
      {
   attr |= hl_attr_table[i];
   off += len;
   break;
      }
  }
  if (i < 0)
  {
      emsg2((char_u *)("Illegal value: %s"), (char_u *)(arg));
      error = 1;
      break;
  }
  if (arg[off] == ',')
      ++off;
     }
     if (error)
  break;
     if (*key == 'T')
     {
  if (!init || !(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set & 1))
  {
      if (!init)
   ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set |= 1;
      ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term = attr;
  }
     }
     else if (*key == 'C')
     {
  if (!init || !(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set & 2))
  {
      if (!init)
   ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set |= 2;
      ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm = attr;
      ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bold = 0;
  }
     }
# 5125 "syntax.c"
 }
 else if (strcmp((char *)(key), (char *)("FONT")) == 0)
 {
# 5136 "syntax.c"
 }
 else if (strcmp((char *)(key), (char *)("CTERMFG")) == 0 || strcmp((char *)(key), (char *)("CTERMBG")) == 0)
 {
   if (!init || !(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set & 2))
   {
     if (!init)
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set |= 2;



     if (key[5] == 'F' && ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bold)
     {
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm &= ~0x02;
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bold = 0;
     }

     if (
# 5152 "syntax.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 5152 "syntax.c"
        *arg
# 5152 "syntax.c" 3 4
        ))] & (unsigned short int) _ISdigit)
# 5152 "syntax.c"
                     )
  color = atoi((char *)arg);
     else if (strcasecmp((char *)(arg), (char *)("fg")) == 0)
     {
  if (cterm_normal_fg_color)
      color = cterm_normal_fg_color - 1;
  else
  {
      emsg((char_u *)("FG color unknown"));
      error = 1;
      break;
  }
     }
     else if (strcasecmp((char *)(arg), (char *)("bg")) == 0)
     {
  if (cterm_normal_bg_color)
      color = cterm_normal_bg_color - 1;
  else
  {
      emsg((char_u *)("BG color unknown"));
      error = 1;
      break;
  }
     }
     else
     {
  static char *(color_names[26]) = {
       "Black", "DarkBlue", "DarkGreen", "DarkCyan",
       "DarkRed", "DarkMagenta", "Brown", "Gray", "Grey",
       "LightGray", "LightGrey", "DarkGray", "DarkGrey",
       "Blue", "LightBlue", "Green", "LightGreen",
       "Cyan", "LightCyan", "Red", "LightRed", "Magenta",
       "LightMagenta", "Yellow", "White", "NONE"};
  static int color_numbers_16[26] = {0, 1, 2, 3,
       4, 5, 6, 7, 7,
       7, 7, 8, 8,
       9, 9, 10, 10,
       11, 11, 12, 12, 13,
       13, 14, 15, -1};

  static int color_numbers_8[26] = {0, 4, 2, 6,
       1, 5, 3, 7, 7,
       7, 7, 0+8, 0+8,
       4+8, 4+8, 2+8, 2+8,
       6+8, 6+8, 1+8, 1+8, 5+8,
       5+8, 3+8, 7+8, -1};


  off = toupper(*arg);
  for (i = (sizeof(color_names) / sizeof(char *)); --i >= 0; )
      if (off == color_names[i][0]
     && strcasecmp((char *)(arg + 1), (char *)(color_names[i] + 1)) == 0)
   break;
  if (i < 0)
  {
      emsg2((char_u *)("Color name or number not recognized: %s"), (char_u *)(key_start));
      error = 1;
      break;
  }
  color = color_numbers_16[i];
  if (color >= 0)
  {
      if (atoi((char *)(term_strings[(int)(KS_CCO)])) == 8)
      {
   color = color_numbers_8[i];
   if (key[5] == 'F')
   {


       if (color & 8)
       {
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm |= 0x02;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bold = 1;
       }
       else
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm &= ~0x02;
   }
   color &= 7;
      }
      else if (atoi((char *)(term_strings[(int)(KS_CCO)])) == 16)
      {





   if (*(term_strings[(int)(KS_CAF)]) != '\000')
       p = (term_strings[(int)(KS_CAF)]);
   else
       p = (term_strings[(int)(KS_CSF)]);
   if (*p != '\000' && *(p + strlen((char *)(p)) - 1) == 'm')
       color = color_numbers_8[i];
      }
  }
     }

     if (key[5] == 'F')
     {
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_fg = color + 1;
  if (is_normal_group)
  {
      cterm_normal_fg_color = color + 1;
      cterm_normal_fg_bold = (((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm & 0x02);
      must_redraw = 50;
      term_fg_color(color);
  }
     }
     else
     {
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bg = color + 1;
  if (is_normal_group)
  {
      cterm_normal_bg_color = color + 1;
      must_redraw = 50;
      term_bg_color(color);
      if (atoi((char *)(term_strings[(int)(KS_CCO)])) < 16)
   i = (color == 0 || color == 4);
      else
   i = (color < 7 || color == 8);
      set_option_value((char_u *)"bg", 0L,
        i ? (char_u *)"dark" : (char_u *)"light");
  }
     }
   }
 }
 else if (strcmp((char *)(key), (char *)("GUIFG")) == 0)
 {
# 5304 "syntax.c"
 }
 else if (strcmp((char *)(key), (char *)("GUIBG")) == 0)
 {
# 5332 "syntax.c"
 }
 else if (strcmp((char *)(key), (char *)("START")) == 0 || strcmp((char *)(key), (char *)("STOP")) == 0)
 {
     char_u buf[100];
     char_u *tname;

     if (!init)
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set |= 1;





     if (strncmp((char *)(arg), (char *)("t_"), (size_t)(2)) == 0)
     {
  off = 0;
  buf[0] = 0;
  while (arg[off] != '\000')
  {

      for (len = 0; arg[off + len] &&
       arg[off + len] != ','; ++len)
   ;
      tname = vim_strnsave(arg + off, len);
      if (tname == 
# 5356 "syntax.c" 3 4
                  ((void *)0)
# 5356 "syntax.c"
                      )
      {
   error = 1;
   break;
      }

      p = get_term_code(tname);
      vim_free(tname);
      if (p == 
# 5364 "syntax.c" 3 4
              ((void *)0)
# 5364 "syntax.c"
                  )
   p = (char_u *)"";


      if ((int)(strlen((char *)(buf)) + strlen((char *)(p))) >= 99)
      {
   emsg2((char_u *)("terminal code too long: %s"), (char_u *)(arg));
   error = 1;
   break;
      }
      strcat((char *)(buf), (char *)(p));


      off += len;
      if (arg[off] == ',')
   ++off;
  }
     }
     else
     {



  for (p = arg, off = 0; off < 100 && *p; )
  {
      len = trans_special(&p, buf + off, 0);
      if (len)
   off += len;
      else
   buf[off++] = *p++;
  }
  buf[off] = '\000';
     }
     if (error)
  break;

     if (strcmp((char *)(buf), (char *)("NONE")) == 0)
  p = 
# 5401 "syntax.c" 3 4
     ((void *)0)
# 5401 "syntax.c"
         ;
     else
  p = vim_strsave(buf);
     if (key[2] == 'A')
     {
  vim_free(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start);
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start = p;
     }
     else
     {
  vim_free(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop);
  ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop = p;
     }
 }
 else
 {
     emsg2((char_u *)("Illegal argument: %s"), (char_u *)(key_start));
     error = 1;
     break;
 }




 if (!init || !(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_set & 8))
     ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_link = 0;




 linep = skipwhite(linep);
      }




    if (error && idx == highlight_ga.ga_len)
 syn_unadd_group();
    else
    {
 if (is_normal_group)
 {
     ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term_attr = 0;
     ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_attr = 0;
# 5454 "syntax.c"
 }
# 5466 "syntax.c"
 else
     set_hl_attr(idx);
 redraw_all_later(40);
    }
    vim_free(key);
    vim_free(arg);


    need_highlight_changed = 1;
}




    static void
highlight_clear(idx)
    int idx;
{
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term = 0;
    vim_free(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start);
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start = 
# 5486 "syntax.c" 3 4
                              ((void *)0)
# 5486 "syntax.c"
                                  ;
    vim_free(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop);
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop = 
# 5488 "syntax.c" 3 4
                             ((void *)0)
# 5488 "syntax.c"
                                 ;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term_attr = 0;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm = 0;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bold = 0;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_fg = 0;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bg = 0;
    ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_attr = 0;
# 5509 "syntax.c"
}
# 5671 "syntax.c"
struct growarray term_attr_table = {0, 0, 0, 0, 
# 5671 "syntax.c" 3 4
                                                  ((void *)0)
# 5671 "syntax.c"
                                                      };



struct growarray cterm_attr_table = {0, 0, 0, 0, 
# 5675 "syntax.c" 3 4
                                                   ((void *)0)
# 5675 "syntax.c"
                                                       };
# 5691 "syntax.c"
    static int
get_attr_entry(table, aep)
    struct growarray *table;
    struct attr_entry *aep;
{
    int i;
    struct attr_entry *gap;
    static int recursive = 0;




    table->ga_itemsize = sizeof(struct attr_entry);
    table->ga_growsize = 7;




    for (i = 0; i < table->ga_len; ++i)
    {
 gap = &(((struct attr_entry *)table->ga_data)[i]);
 if ( aep->ae_attr == gap->ae_attr
  && (







         (table == &term_attr_table
   && (aep->ae_u.term.start == 
# 5722 "syntax.c" 3 4
                              ((void *)0)
# 5722 "syntax.c"
                                  ) ==
      (gap->ae_u.term.start == 
# 5723 "syntax.c" 3 4
                              ((void *)0)
# 5723 "syntax.c"
                                  )
   && (aep->ae_u.term.start == 
# 5724 "syntax.c" 3 4
                              ((void *)0)
       
# 5725 "syntax.c"
      || strcmp((char *)(aep->ae_u.term.start), (char *)(gap->ae_u.term.start))
                               == 0)
   && (aep->ae_u.term.stop == 
# 5727 "syntax.c" 3 4
                             ((void *)0)
# 5727 "syntax.c"
                                 ) ==
       (gap->ae_u.term.stop == 
# 5728 "syntax.c" 3 4
                              ((void *)0)
# 5728 "syntax.c"
                                  )
   && (aep->ae_u.term.stop == 
# 5729 "syntax.c" 3 4
                             ((void *)0)
       
# 5730 "syntax.c"
      || strcmp((char *)(aep->ae_u.term.stop), (char *)(gap->ae_u.term.stop))
                              == 0))
      || (table == &cterm_attr_table
   && aep->ae_u.cterm.fg_color == gap->ae_u.cterm.fg_color
   && aep->ae_u.cterm.bg_color == gap->ae_u.cterm.bg_color)
       ))

 return i + (0x1f + 1);
    }

    if (table->ga_len + (0x1f + 1) == 256)
    {





 if (recursive)
 {
     emsg((char_u *)("Too many different highlighting attributes in use"));
     return 0;
 }
 recursive = 1;




 ga_clear(&term_attr_table);
 ga_clear(&cterm_attr_table);
 must_redraw = 50;

 for (i = 0; i < highlight_ga.ga_len; ++i)
     set_hl_attr(i);

 recursive = 0;
    }




    if (ga_grow(table, 1) == 0)
 return 0;

    gap = &(((struct attr_entry *)table->ga_data)[table->ga_len]);
    memset((gap), (0), (sizeof(struct attr_entry)));
    gap->ae_attr = aep->ae_attr;
# 5784 "syntax.c"
    if (table == &term_attr_table)
    {
 if (aep->ae_u.term.start == 
# 5786 "syntax.c" 3 4
                            ((void *)0)
# 5786 "syntax.c"
                                )
     gap->ae_u.term.start = 
# 5787 "syntax.c" 3 4
                           ((void *)0)
# 5787 "syntax.c"
                               ;
 else
     gap->ae_u.term.start = vim_strsave(aep->ae_u.term.start);
 if (aep->ae_u.term.stop == 
# 5790 "syntax.c" 3 4
                           ((void *)0)
# 5790 "syntax.c"
                               )
     gap->ae_u.term.stop = 
# 5791 "syntax.c" 3 4
                          ((void *)0)
# 5791 "syntax.c"
                              ;
 else
     gap->ae_u.term.stop = vim_strsave(aep->ae_u.term.stop);
    }
    else if (table == &cterm_attr_table)
    {
 gap->ae_u.cterm.fg_color = aep->ae_u.cterm.fg_color;
 gap->ae_u.cterm.bg_color = aep->ae_u.cterm.bg_color;
    }
    ++table->ga_len;
    --table->ga_room;
    return (table->ga_len - 1 + (0x1f + 1));
}
# 5819 "syntax.c"
    struct attr_entry *
syn_term_attr2entry(attr)
    int attr;
{
    attr -= (0x1f + 1);
    if (attr >= term_attr_table.ga_len)
 return 
# 5825 "syntax.c" 3 4
       ((void *)0)
# 5825 "syntax.c"
           ;
    return &(((struct attr_entry *)term_attr_table.ga_data)[attr]);
}

    struct attr_entry *
syn_cterm_attr2entry(attr)
    int attr;
{
    attr -= (0x1f + 1);
    if (attr >= cterm_attr_table.ga_len)
 return 
# 5835 "syntax.c" 3 4
       ((void *)0)
# 5835 "syntax.c"
           ;
    return &(((struct attr_entry *)cterm_attr_table.ga_data)[attr]);
}





    static void
highlight_list_one(id)
    int id;
{
    struct hl_group *sgp;
    int didh = 0;

    sgp = &((struct hl_group *)((highlight_ga.ga_data)))[id - 1];

    didh = highlight_list_arg(id, didh, 1,
        sgp->sg_term, 
# 5853 "syntax.c" 3 4
                     ((void *)0)
# 5853 "syntax.c"
                         , "term");
    didh = highlight_list_arg(id, didh, 2,
        0, sgp->sg_start, "start");
    didh = highlight_list_arg(id, didh, 2,
        0, sgp->sg_stop, "stop");

    didh = highlight_list_arg(id, didh, 1,
        sgp->sg_cterm, 
# 5860 "syntax.c" 3 4
                      ((void *)0)
# 5860 "syntax.c"
                          , "cterm");
    didh = highlight_list_arg(id, didh, 3,
        sgp->sg_cterm_fg, 
# 5862 "syntax.c" 3 4
                         ((void *)0)
# 5862 "syntax.c"
                             , "ctermfg");
    didh = highlight_list_arg(id, didh, 3,
        sgp->sg_cterm_bg, 
# 5864 "syntax.c" 3 4
                         ((void *)0)
# 5864 "syntax.c"
                             , "ctermbg");
# 5877 "syntax.c"
    if (sgp->sg_link)
    {
 (void)syn_list_header(didh, 9999, id);
 msg_puts_attr((char_u *)"links to", highlight_attr[(int)(HLF_D)]);
 msg_putchar(' ');
 msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_link - 1].sg_name);
    }
}

    static int
highlight_list_arg(id, didh, type, iarg, sarg, name)
    int id;
    int didh;
    int type;
    int iarg;
    char_u *sarg;
    char *name;
{
    char_u buf[100];
    char_u *ts;
    int i;

    if (type == 2 ? (sarg != 
# 5899 "syntax.c" 3 4
                                      ((void *)0)
# 5899 "syntax.c"
                                          ) : (iarg != 0))
    {
 ts = buf;
 if (type == 3)
     sprintf((char *)buf, "%d", iarg - 1);
 else if (type == 2)
     ts = sarg;
 else
 {
     buf[0] = '\000';
     for (i = 0; hl_attr_table[i] != 0; ++i)
     {
  if (iarg & hl_attr_table[i])
  {
      if (buf[0] != '\000')
   strcat((char *)(buf), (char *)(","));
      strcat((char *)(buf), (char *)(hl_name_table[i]));
      iarg &= ~hl_attr_table[i];
  }
     }
 }

 (void)syn_list_header(didh,
          (int)(vim_strsize(ts) + strlen((char *)(name)) + 1), id);
 didh = 1;

 msg_puts_attr((char_u *)(name), (highlight_attr[(int)(HLF_D)]));
 msg_puts_attr((char_u *)("="), (highlight_attr[(int)(HLF_D)]));
 msg_outtrans(ts);
    }
    return didh;
}






    char_u *
highlight_has_attr(id, flag, modec)
    int id;
    int flag;
    int modec;
{
    int attr;

    if (id <= 0 || id > highlight_ga.ga_len)
 return 
# 5946 "syntax.c" 3 4
       ((void *)0)
# 5946 "syntax.c"
           ;






  if (modec == 'c')
 attr = ((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_cterm;
    else
 attr = ((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_term;

    if (attr & flag)
 return (char_u *)"1";
    return 
# 5960 "syntax.c" 3 4
          ((void *)0)
# 5960 "syntax.c"
              ;
}






    char_u *
highlight_color(id, what, modec)
    int id;
    char_u *what;
    int modec;
{
    static char_u name[20];
    int n;
    int fg;

    if (id <= 0 || id > highlight_ga.ga_len)
 return 
# 5979 "syntax.c" 3 4
       ((void *)0)
# 5979 "syntax.c"
           ;

    if (tolower(what[0]) == 'f')
 fg = 1;
    else
 fg = 0;
# 6006 "syntax.c"
    if (modec == 'c')
    {
 if (fg)
     n = ((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_cterm_fg - 1;
 else
     n = ((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_cterm_bg - 1;
 sprintf((char *)name, "%d", n);
 return name;
    }

    return 
# 6016 "syntax.c" 3 4
          ((void *)0)
# 6016 "syntax.c"
              ;
}






    static int
syn_list_header(did_header, outlen, id)
    int did_header;
    int outlen;
    int id;
{
    int endcol = 15;
    int newline = 1;

    if (!did_header)
    {
 msg_putchar('\n');
 msg_outtrans(((struct hl_group *)((highlight_ga.ga_data)))[id - 1].sg_name);
    }
    else if (msg_col + outlen + 1 >= Columns)
 msg_putchar('\n');
    else
    {
 if (msg_col >= endcol)
     newline = 0;
 msg_putchar(' ');
    }

    if (msg_col >= endcol)
 endcol = msg_col + 1;
    if (Columns <= endcol)
 endcol = Columns - 1;

    msg_advance(endcol);

    return newline;
}





    static void
set_hl_attr(idx)
    int idx;
{
    struct attr_entry at_en;


    if (strcmp((char *)(((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_name_u), (char *)("NORMAL")) == 0)
 return;
# 6095 "syntax.c"
    if (((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start == 
# 6095 "syntax.c" 3 4
                                   ((void *)0) 
# 6095 "syntax.c"
                                        && ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop == 
# 6095 "syntax.c" 3 4
                                                                      ((void *)0)
# 6095 "syntax.c"
                                                                          )
 ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term_attr = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term;
    else
    {
 at_en.ae_attr = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term;
 at_en.ae_u.term.start = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_start;
 at_en.ae_u.term.stop = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_stop;
 ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_term_attr = get_attr_entry(&term_attr_table, &at_en);
    }





    if (((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_fg == 0 && ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bg == 0)
 ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_attr = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm;
    else
    {
 at_en.ae_attr = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm;
 at_en.ae_u.cterm.fg_color = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_fg;
 at_en.ae_u.cterm.bg_color = ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_bg;
 ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_cterm_attr =
        get_attr_entry(&cterm_attr_table, &at_en);
    }
}





    int
syn_name2id(name)
    char_u *name;
{
    int i;
    char_u *name_u;


    name_u = vim_strsave_up(name);
    if (name_u == 
# 6134 "syntax.c" 3 4
                 ((void *)0)
# 6134 "syntax.c"
                     )
 return 0;
    for (i = highlight_ga.ga_len; --i >= 0; )
 if (((struct hl_group *)((highlight_ga.ga_data)))[i].sg_name_u != 
# 6137 "syntax.c" 3 4
                               ((void *)0)
  
# 6138 "syntax.c"
 && strcmp((char *)(name_u), (char *)(((struct hl_group *)((highlight_ga.ga_data)))[i].sg_name_u)) == 0)
     break;
    vim_free(name_u);
    return i + 1;
}





    int
highlight_exists(name)
    char_u *name;
{
    return (syn_name2id(name) > 0);
}





    static int
syn_namen2id(linep, len)
    char_u *linep;
    int len;
{
    char_u *name;
    int id = 0;

    name = vim_strnsave(linep, len);
    if (name != 
# 6168 "syntax.c" 3 4
               ((void *)0)
# 6168 "syntax.c"
                   )
    {
 id = syn_name2id(name);
 vim_free(name);
    }
    return id;
}







    int
syn_check_group(pp, len)
    char_u *pp;
    int len;
{
    int id;
    char_u *name;

    name = vim_strnsave(pp, len);
    if (name == 
# 6191 "syntax.c" 3 4
               ((void *)0)
# 6191 "syntax.c"
                   )
 return 0;

    id = syn_name2id(name);
    if (id == 0)
 id = syn_add_group(name);
    else
 vim_free(name);
    return id;
}






    static int
syn_add_group(name)
    char_u *name;
{



    if (highlight_ga.ga_data == 
# 6214 "syntax.c" 3 4
                               ((void *)0)
# 6214 "syntax.c"
                                   )
    {
 highlight_ga.ga_itemsize = sizeof(struct hl_group);
 highlight_ga.ga_growsize = 10;
    }




    if (ga_grow(&highlight_ga, 1) == 0)
    {
 vim_free(name);
 return 0;
    }

    memset((&(((struct hl_group *)((highlight_ga.ga_data)))[highlight_ga.ga_len])), (0), (sizeof(struct hl_group)));
    ((struct hl_group *)((highlight_ga.ga_data)))[highlight_ga.ga_len].sg_name = name;
    ((struct hl_group *)((highlight_ga.ga_data)))[highlight_ga.ga_len].sg_name_u = vim_strsave_up(name);
    ++highlight_ga.ga_len;
    --highlight_ga.ga_room;

    return highlight_ga.ga_len;
}





    static void
syn_unadd_group()
{
    --highlight_ga.ga_len;
    ++highlight_ga.ga_room;
    vim_free(((struct hl_group *)((highlight_ga.ga_data)))[highlight_ga.ga_len].sg_name);
    vim_free(((struct hl_group *)((highlight_ga.ga_data)))[highlight_ga.ga_len].sg_name_u);
}




    int
syn_id2attr(hl_id)
    int hl_id;
{
    int attr;
    struct hl_group *sgp;

    hl_id = syn_get_final_id(hl_id);
    sgp = &((struct hl_group *)((highlight_ga.ga_data)))[hl_id - 1];
# 6272 "syntax.c"
 if (*(term_strings[(int)(KS_CCO)]))
     attr = sgp->sg_cterm_attr;
 else
     attr = sgp->sg_term_attr;

    return attr;
}
# 6305 "syntax.c"
    int
syn_get_final_id(hl_id)
    int hl_id;
{
    int count;
    struct hl_group *sgp;

    if (hl_id > highlight_ga.ga_len || hl_id < 1)
 return 0;





    for (count = 100; --count >= 0; )
    {
 sgp = &((struct hl_group *)((highlight_ga.ga_data)))[hl_id - 1];
 if (sgp->sg_link == 0 || sgp->sg_link > highlight_ga.ga_len)
     break;
 hl_id = sgp->sg_link;
    }

    return hl_id;
}
# 6387 "syntax.c"
    int
highlight_changed()
{
    int hlf;
    int i;
    char_u *p;
    int attr;
    char_u *end;
    int id;

    char_u userhl[10];

    int id_SNC = -1;
    int id_S = -1;
    int hlcnt;


    static int hl_flags[HLF_COUNT] = {'8', '@', 'd', 'e', 'h', 'i', 'l', 'm', 'M', 'n', 'r', 's', 'S', 't', 'v', 'V', 'w', 'W'};

    need_highlight_changed = 0;




    for (hlf = 0; hlf < (int)HLF_COUNT; ++hlf)
 highlight_attr[hlf] = 0;





    for (i = 0; i < 2; ++i)
    {
 if (i)
     p = p_hl;
 else
     p = get_highlight_default();
 if (p == 
# 6424 "syntax.c" 3 4
         ((void *)0)
# 6424 "syntax.c"
             )
     continue;

 while (*p)
 {
     for (hlf = 0; hlf < (int)HLF_COUNT; ++hlf)
  if (hl_flags[hlf] == *p)
      break;
     ++p;
     if (hlf == (int)HLF_COUNT || *p == '\000')
  return 0;





     attr = 0;
     for ( ; *p && *p != ','; ++p)
     {
  if (((*p) == ' ' || (*p) == '\t'))
      continue;

  if (attr > 0x1f)
      return 0;

  switch (*p)
  {
      case 'b': attr |= 0x02;
    break;
      case 'i': attr |= 0x04;
    break;
      case '-':
      case 'n':
    break;
      case 'r': attr |= 0x01;
    break;
      case 's': attr |= 0x10;
    break;
      case 'u': attr |= 0x08;
    break;
      case ':': ++p;
    if (attr || *p == '\000')
        return 0;
    end = vim_strchr(p, ',');
    if (end == 
# 6468 "syntax.c" 3 4
              ((void *)0)
# 6468 "syntax.c"
                  )
        end = p + strlen((char *)(p));
    id = syn_check_group(p, (int)(end - p));
    if (id == 0)
        return 0;
    attr = syn_id2attr(id);
    p = end - 1;

    if (hlf == (int)HLF_SNC)
        id_SNC = syn_get_final_id(id);
    else if (hlf == (int)HLF_S)
        id_S = syn_get_final_id(id);

    break;
      default: return 0;
  }
     }
     highlight_attr[hlf] = attr;

     p = skip_to_option_part(p);
 }
    }
# 6498 "syntax.c"
    if (ga_grow(&highlight_ga, 10) == 0)
 return 0;
    hlcnt = highlight_ga.ga_len;
    if (id_S == 0)
    {
 memset(&((struct hl_group *)((highlight_ga.ga_data)))[hlcnt + 9], 0, sizeof(struct hl_group));
 ((struct hl_group *)((highlight_ga.ga_data)))[hlcnt + 9].sg_term = highlight_attr[HLF_S];
 id_S = hlcnt + 10;
    }

    for (i = 0; i < 9; i++)
    {
 sprintf((char *)userhl, "User%d", i + 1);
 id = syn_name2id(userhl);
 if (id == 0)
 {
     highlight_user[i] = 0;

     highlight_stlnc[i] = 0;

 }
 else
 {

     struct hl_group *hlt = ((struct hl_group *)((highlight_ga.ga_data)));


     highlight_user[i] = syn_id2attr(id);

     if (id_SNC == 0)
     {
  memset(&hlt[hlcnt + i], 0, sizeof(struct hl_group));
  hlt[hlcnt + i].sg_term = highlight_attr[HLF_SNC];
  hlt[hlcnt + i].sg_cterm = highlight_attr[HLF_SNC];



     }
     else
  mch_memmove(&hlt[hlcnt + i],
       &hlt[id_SNC - 1],
       sizeof(struct hl_group));
     hlt[hlcnt + i].sg_link = 0;


     hlt[hlcnt + i].sg_term ^=
  hlt[id - 1].sg_term ^ hlt[id_S - 1].sg_term;
     if (hlt[id - 1].sg_start != hlt[id_S - 1].sg_start)
  hlt[hlcnt + i].sg_start = hlt[id - 1].sg_start;
     if (hlt[id - 1].sg_stop != hlt[id_S - 1].sg_stop)
  hlt[hlcnt + i].sg_stop = hlt[id - 1].sg_stop;
     hlt[hlcnt + i].sg_cterm ^=
  hlt[id - 1].sg_cterm ^ hlt[id_S - 1].sg_cterm;
     if (hlt[id - 1].sg_cterm_fg != hlt[id_S - 1].sg_cterm_fg)
  hlt[hlcnt + i].sg_cterm_fg = hlt[id - 1].sg_cterm_fg;
     if (hlt[id - 1].sg_cterm_bg != hlt[id_S - 1].sg_cterm_bg)
  hlt[hlcnt + i].sg_cterm_bg = hlt[id - 1].sg_cterm_bg;
# 6565 "syntax.c"
     highlight_ga.ga_len = hlcnt + i + 1;
     set_hl_attr(hlcnt + i);
     highlight_stlnc[i] = syn_id2attr(hlcnt + i + 1);

 }
    }

    highlight_ga.ga_len = hlcnt;




    return 1;
}



static void highlight_list (void);
static void highlight_list_two (int cnt, int attr);




    void
set_context_in_highlight_cmd(arg)
    char_u *arg;
{
    char_u *p;


    expand_context = 13;
    expand_pattern = arg;
    include_link = 1;


    if (*arg != '\000')
    {
 p = skiptowhite(arg);
 if (*p != '\000')
 {
     include_link = 0;
     if (arg[1] == 'i' && arg[0] == 'N')
  highlight_list();
     if (strncmp((char *)("link"), (char *)(arg), (size_t)(p - arg)) == 0
      || strncmp((char *)("clear"), (char *)(arg), (size_t)(p - arg)) == 0)
     {
  expand_pattern = skipwhite(p);
  p = skiptowhite(expand_pattern);
  if (*p != '\000')
  {
      expand_pattern = skipwhite(p);
      p = skiptowhite(expand_pattern);
  }
     }
     if (*p != '\000')
  expand_context = 0;
 }
    }
}




    static void
highlight_list()
{
    int i;

    for (i = 10; --i >= 0; )
 highlight_list_two(i, highlight_attr[(int)(HLF_D)]);
    for (i = 40; --i >= 0; )
 highlight_list_two(55, 0);
}

    static void
highlight_list_two(cnt, attr)
    int cnt;
    int attr;
{
    msg_puts_attr((char_u *)("NI!  \b" + cnt / 11), attr);
    msg_clr_eos();
    out_flush();
    ui_delay(cnt == 55 ? 40L : (long)cnt * 50L, 0);
}
# 6658 "syntax.c"
    char_u *
get_highlight_name(idx)
    int idx;
{
    if (idx == highlight_ga.ga_len

     && include_link

     )
 return (char_u *)"link";
    if (idx == highlight_ga.ga_len + 1

     && include_link

     )
 return (char_u *)"clear";
    if (idx < 0 || idx >= highlight_ga.ga_len)
 return 
# 6675 "syntax.c" 3 4
       ((void *)0)
# 6675 "syntax.c"
           ;
    return ((struct hl_group *)((highlight_ga.ga_data)))[idx].sg_name;
}
