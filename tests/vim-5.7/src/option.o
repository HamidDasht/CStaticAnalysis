#pragma merger("0","/tmp/cil-kDeoQW1R.i","-g,-O2,-Wall,-O0")
# 1 "option.c"
# 1 "/home/ubuntu/Desktop/devenv/tests/vim-5.7/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "option.c"
# 33 "option.c"
# 1 "vim.h" 1
# 20 "vim.h"
# 1 "config.h" 1
# 21 "vim.h" 2
# 59 "vim.h"
# 1 "feature.h" 1
# 60 "vim.h" 2
# 89 "vim.h"
# 1 "os_unix.h" 1
# 21 "os_unix.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 640 "/usr/include/stdio.h" 3 4

# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 942 "/usr/include/stdio.h" 3 4

# 22 "os_unix.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 23 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 24 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 237 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 262 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 283 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));
# 320 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 441 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 25 "os_unix.h" 2


# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 321 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 774 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 950 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 28 "os_unix.h" 2
# 42 "os_unix.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));





extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4

# 43 "os_unix.h" 2







# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 76 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 264 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/signal.h" 3 4


extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/signal.h" 3 4

# 127 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 207 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];
# 92 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));
# 362 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));




# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 51 "os_unix.h" 2
# 118 "os_unix.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 208 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 244 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 245 "/usr/include/dirent.h" 2 3 4
# 254 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 324 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 401 "/usr/include/dirent.h" 3 4

# 119 "os_unix.h" 2
# 138 "os_unix.h"
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 223 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/time.h" 3 4

# 139 "os_unix.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 142 "os_unix.h" 2
# 169 "os_unix.h"
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 58 "/usr/include/errno.h" 3 4

# 170 "os_unix.h" 2



# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 4)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (2, 3, 5)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 166 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
   __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 187 "/usr/include/pwd.h" 3 4

# 174 "os_unix.h" 2
# 339 "os_unix.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 123 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 277 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 392 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 658 "/usr/include/string.h" 3 4

# 340 "os_unix.h" 2


# 1 "/usr/include/strings.h" 1 3 4
# 343 "os_unix.h" 2
# 90 "vim.h" 2
# 110 "vim.h"
# 1 "osdef.h" 1
# 70 "osdef.h"

# 70 "osdef.h"
extern void (*sigset (int, void (*func) (int))) (int);
# 111 "vim.h" 2
# 165 "vim.h"
typedef unsigned char char_u;
typedef unsigned short short_u;
typedef unsigned int int_u;
typedef unsigned long long_u;






# 1 "ascii.h" 1
# 176 "vim.h" 2
# 1 "keymap.h" 1
# 121 "keymap.h"
enum key_extra
{
    KE_NAME = 3,

    KE_S_UP,
    KE_S_DOWN,

    KE_S_F1,
    KE_S_F2,
    KE_S_F3,
    KE_S_F4,
    KE_S_F5,
    KE_S_F6,
    KE_S_F7,
    KE_S_F8,
    KE_S_F9,
    KE_S_F10,

    KE_S_F11,
    KE_S_F12,
    KE_S_F13,
    KE_S_F14,
    KE_S_F15,
    KE_S_F16,
    KE_S_F17,
    KE_S_F18,
    KE_S_F19,
    KE_S_F20,

    KE_S_F21,
    KE_S_F22,
    KE_S_F23,
    KE_S_F24,
    KE_S_F25,
    KE_S_F26,
    KE_S_F27,
    KE_S_F28,
    KE_S_F29,
    KE_S_F30,

    KE_S_F31,
    KE_S_F32,
    KE_S_F33,
    KE_S_F34,
    KE_S_F35,

    KE_MOUSE,





    KE_LEFTMOUSE,
    KE_LEFTDRAG,
    KE_LEFTRELEASE,
    KE_MIDDLEMOUSE,
    KE_MIDDLEDRAG,
    KE_MIDDLERELEASE,
    KE_RIGHTMOUSE,
    KE_RIGHTDRAG,
    KE_RIGHTRELEASE,

    KE_IGNORE,

    KE_TAB,
    KE_S_TAB,

    KE_SNIFF,

    KE_XF1,
    KE_XF2,
    KE_XF3,
    KE_XF4,
    KE_XEND,
    KE_XHOME,

    KE_LEFTMOUSE_NM,
    KE_LEFTRELEASE_NM,

    KE_S_XF1,
    KE_S_XF2,
    KE_S_XF3,
    KE_S_XF4,

    KE_MOUSEDOWN,
    KE_MOUSEUP,

    KE_KINS,
    KE_KDEL,

    KE_CSI
};
# 177 "vim.h" 2
# 1 "term.h" 1
# 28 "term.h"
enum SpecialKey
{
    KS_NAME = 0,
    KS_CE,
    KS_AL,
    KS_CAL,
    KS_DL,
    KS_CDL,
    KS_CS,
    KS_CL,
    KS_CD,
    KS_DA,
    KS_DB,
    KS_VI,
    KS_VE,
    KS_VS,
    KS_ME,
    KS_MR,
    KS_MD,
    KS_SE,
    KS_SO,
    KS_CZH,
    KS_CZR,
    KS_UE,
    KS_US,
    KS_MS,
    KS_CM,
    KS_SR,
    KS_CRI,
    KS_VB,
    KS_KS,
    KS_KE,
    KS_TI,
    KS_TE,
    KS_BC,
    KS_CCS,
    KS_CCO,
    KS_CSF,
    KS_CSB,
    KS_XS,
    KS_MB,
    KS_CAF,
    KS_CAB,
    KS_LE,
    KS_ND,
    KS_CIS,
    KS_CIE,
    KS_TS,
    KS_FS,
    KS_CWP,
    KS_CWS,
    KS_CRV,
    KS_OP
};
# 93 "term.h"
extern char_u *(term_strings[]);
# 178 "vim.h" 2
# 1 "macros.h" 1
# 179 "vim.h" 2
# 590 "vim.h"
enum auto_event
{
    EVENT_BUFCREATE = 0,
    EVENT_BUFDELETE,
    EVENT_BUFENTER,
    EVENT_BUFFILEPOST,
    EVENT_BUFFILEPRE,
    EVENT_BUFLEAVE,
    EVENT_BUFNEWFILE,
    EVENT_BUFREADPOST,
    EVENT_BUFREADPRE,
    EVENT_BUFUNLOAD,
    EVENT_BUFHIDDEN,
    EVENT_BUFWRITEPOST,
    EVENT_BUFWRITEPRE,
    EVENT_FILEAPPENDPOST,
    EVENT_FILEAPPENDPRE,
    EVENT_FILECHANGEDSHELL,
    EVENT_FILEREADPOST,
    EVENT_FILEREADPRE,
    EVENT_FILETYPE,
    EVENT_FILEWRITEPOST,
    EVENT_FILEWRITEPRE,
    EVENT_FILTERREADPOST,
    EVENT_FILTERREADPRE,
    EVENT_FILTERWRITEPOST,
    EVENT_FILTERWRITEPRE,
    EVENT_FOCUSGAINED,
    EVENT_FOCUSLOST,
    EVENT_GUIENTER,
    EVENT_STDINREADPOST,
    EVENT_STDINREADPRE,
    EVENT_SYNTAX,
    EVENT_TERMCHANGED,
    EVENT_USER,
    EVENT_VIMENTER,
    EVENT_VIMLEAVE,
    EVENT_VIMLEAVEPRE,
    EVENT_WINENTER,
    EVENT_WINLEAVE,
    EVENT_FILEENCODING,
    EVENT_CURSORHOLD,
    NUM_EVENTS
};

typedef enum auto_event EVENT_T;





enum hlf_value
{
    HLF_8 = 0,
    HLF_AT,
    HLF_D,
    HLF_E,
    HLF_H,
    HLF_I,
    HLF_L,
    HLF_M,
    HLF_CM,
    HLF_N,
    HLF_R,
    HLF_S,
    HLF_SNC,
    HLF_T,
    HLF_V,
    HLF_VNC,
    HLF_W,
    HLF_WM,
    HLF_COUNT
};
# 809 "vim.h"
typedef long linenr_t;
typedef unsigned colnr_t;
# 827 "vim.h"
void mch_memmove (void *, void *, size_t);
# 884 "vim.h"
# 1 "regexp.h" 1
# 19 "regexp.h"
typedef struct
{
    char_u *startp[10];
    char_u *endp[10];
    char_u regstart;
    char_u reganch;
    char_u *regmust;
    int regmlen;
    char_u program[1];
} vim_regexp;
# 885 "vim.h" 2
# 1 "structs.h" 1
# 26 "structs.h"
typedef struct fpos FPOS;

struct fpos
{
    linenr_t lnum;
    colnr_t col;
};
# 56 "structs.h"
struct filemark
{
    FPOS mark;
    int fnum;
};




struct taggy
{
    char_u *tagname;
    struct filemark fmark;
    int cur_match;
};
# 82 "structs.h"
typedef struct window WIN;
typedef struct winfpos WINFPOS;

struct winfpos
{
    WINFPOS *wl_next;
    WINFPOS *wl_prev;
    WIN *wl_win;
    FPOS wl_fpos;
};





struct u_entry
{
    struct u_entry *ue_next;
    linenr_t ue_top;
    linenr_t ue_bot;
    linenr_t ue_lcount;
    char_u **ue_array;
    long ue_size;
};

struct u_header
{
    struct u_header *uh_next;
    struct u_header *uh_prev;
    struct u_entry *uh_entry;
    FPOS uh_cursor;
    int uh_flags;
    FPOS uh_namedm[26];
};
# 133 "structs.h"
typedef struct m_info info_t;




struct m_info
{

    long_u m_size;



    info_t *m_next;
};




struct m_block
{
    struct m_block *mb_next;
    info_t mb_info;
};






struct growarray
{
    int ga_len;
    int ga_room;
    int ga_itemsize;
    int ga_growsize;
    void *ga_data;
};





typedef struct block_hdr BHDR;
typedef struct memfile MEMFILE;
typedef long blocknr_t;
# 194 "structs.h"
struct block_hdr
{
    BHDR *bh_next;
    BHDR *bh_prev;
    BHDR *bh_hash_next;
    BHDR *bh_hash_prev;
    blocknr_t bh_bnum;
    char_u *bh_data;
    int bh_page_count;



    char bh_flags;
};







typedef struct nr_trans NR_TRANS;

struct nr_trans
{
    NR_TRANS *nt_next;
    NR_TRANS *nt_prev;
    blocknr_t nt_old_bnum;
    blocknr_t nt_new_bnum;
};
# 232 "structs.h"
struct memfile
{
    char_u *mf_fname;
    char_u *mf_ffname;
    int mf_fd;
    BHDR *mf_free_first;
    BHDR *mf_used_first;
    BHDR *mf_used_last;
    unsigned mf_used_count;
    unsigned mf_used_count_max;
    BHDR *mf_hash[64];
    NR_TRANS *mf_trans[64];
    blocknr_t mf_blocknr_max;
    blocknr_t mf_blocknr_min;
    blocknr_t mf_neg_count;
    blocknr_t mf_infile_count;
    unsigned mf_page_size;
    int mf_dirty;
};




typedef struct info_pointer IPTR;






struct info_pointer
{
    blocknr_t ip_bnum;
    linenr_t ip_low;
    linenr_t ip_high;
    int ip_index;
};


typedef struct ml_chunksize
{
    int mlcs_numlines;
    int mlcs_totalsize;
} ML_CHUNKSIZE;
# 284 "structs.h"
typedef struct memline MEMLINE;




struct memline
{
    linenr_t ml_line_count;

    MEMFILE *ml_mfp;





    int ml_flags;

    IPTR *ml_stack;
    int ml_stack_top;
    int ml_stack_size;

    linenr_t ml_line_lnum;
    char_u *ml_line_ptr;

    BHDR *ml_locked;
    linenr_t ml_locked_low;
    linenr_t ml_locked_high;
    int ml_locked_lineadd;

    ML_CHUNKSIZE *ml_chunksize;
    int ml_numchunks;
    int ml_usedchunks;

};





struct keyentry
{
    struct keyentry *next;
    int syn_inc_tag;
    short syn_id;
    short *next_list;
    short flags;
    char_u keyword[1];
};




struct syn_state
{
    struct growarray sst_ga;
    short *sst_next_list;

    int sst_next_flags;
};





struct attr_entry
{
    short ae_attr;
    union
    {
 struct
 {
     char_u *start;
     char_u *stop;
 } term;
 struct
 {
     char_u fg_color;
     char_u bg_color;
 } cterm;
# 371 "structs.h"
    } ae_u;
};
# 382 "structs.h"
typedef struct buffer BUF;

struct buffer
{
    MEMLINE b_ml;


    BUF *b_next;
    BUF *b_prev;

    int b_changed;




    int b_nwindows;

    int b_flags;







    char_u *b_ffname;
    char_u *b_sfname;
    char_u *b_fname;


    int b_dev;
    ino_t b_ino;
# 422 "structs.h"
    int b_fnum;
    WINFPOS *b_winfpos;


    long b_mtime;
    long b_mtime_read;

    FPOS b_namedm[26];


    FPOS b_visual_start;
    FPOS b_visual_end;
    int b_visual_mode;

    FPOS b_last_cursor;





    char b_chartab[256];




    FPOS b_op_start;
    FPOS b_op_end;


    int b_marks_read;





    struct u_header *b_u_oldhead;
    struct u_header *b_u_newhead;
    struct u_header *b_u_curhead;
    int b_u_numhead;
    int b_u_synced;




    char_u *b_u_line_ptr;
    linenr_t b_u_line_lnum;
    colnr_t b_u_line_colnr;




    struct m_block b_block_head;
    info_t *b_m_search;

    struct m_block *b_mb_current;

    int b_scanned;
# 487 "structs.h"
    int b_p_initialized;
    int b_p_ai, b_p_ro, b_p_lisp;
    int b_p_inf;

    char_u *b_p_cpt;

    int b_p_bin, b_p_eol, b_p_et, b_p_ml, b_p_tx, b_p_swf;

    int b_p_sn;


    long b_p_sw, b_p_sts, b_p_ts, b_p_tw, b_p_wm;
    char_u *b_p_ff, *b_p_fo;

    char_u *b_p_com;

    char_u *b_p_isk;




    char_u *b_p_key;

    char_u *b_p_nf;
    char_u *b_p_mps;


    long b_p_wm_nobin, b_p_tw_nobin;
    int b_p_ml_nobin, b_p_et_nobin;


    int b_p_ai_save, b_p_lisp_save;
    long b_p_tw_save, b_p_wm_save, b_p_sts_save;


    int b_p_si, b_p_si_save;


    int b_p_cin;
    int b_p_cin_save;
    char_u *b_p_cino;
    char_u *b_p_cink;


    char_u *b_p_cinw;


    char_u *b_p_syn;


    char_u *b_p_ft;






    int b_start_ffc;


    struct growarray b_vars;






    int b_may_swap;
    int b_did_warn;

    int b_help;


    int b_shortname;
# 577 "structs.h"
    struct keyentry **b_keywtab;
    struct keyentry **b_keywtab_ic;
    int b_syn_ic;
    struct growarray b_syn_patterns;
    struct growarray b_syn_clusters;
    int b_syn_sync_flags;
    short b_syn_sync_id;
    long b_syn_sync_minlines;
    long b_syn_sync_maxlines;
    char_u *b_syn_linecont_pat;
    vim_regexp *b_syn_linecont_prog;
    int b_syn_linecont_ic;
    int b_syn_topgrp;
# 601 "structs.h"
    struct syn_state *b_syn_states;
    int b_syn_states_len;
    linenr_t b_syn_states_lnum;
    linenr_t b_syn_change_lnum;

};






struct window
{
    BUF *w_buffer;

    WIN *w_prev;
    WIN *w_next;

    FPOS w_cursor;





    int w_valid;
    FPOS w_valid_cursor;

    colnr_t w_valid_leftcol;






    int w_wrow, w_wcol;





    int w_cline_height;

    int w_cline_row;

    colnr_t w_virtcol;






    colnr_t w_curswant;




    int w_set_curswant;






    linenr_t w_old_cursor_lnum;
    colnr_t w_old_cursor_fcol;
    colnr_t w_old_cursor_lcol;
    linenr_t w_old_visual_lnum;
    colnr_t w_old_curswant;

    linenr_t w_topline;

    linenr_t w_botline;

    int w_empty_rows;

    int w_winpos;
    int w_height;

    int w_status_height;

    int w_redr_status;
    int w_redr_type;


    FPOS w_ru_cursor;
    colnr_t w_ru_virtcol;
    linenr_t w_ru_topline;
    char w_ru_empty;

    colnr_t w_leftcol;

    colnr_t w_skipcol;






    int w_lsize_valid;
    linenr_t *w_lsize_lnum;
    char_u *w_lsize;

    int w_alt_fnum;

    int w_arg_idx;

    int w_arg_idx_invalid;






    int w_p_list,
  w_p_nu,






  w_p_wrap;

    int w_p_lbr;

    long w_p_scroll;


    int w_p_scb;
    long w_scbind_pos;

    int w_preview;


    struct growarray w_vars;







    FPOS w_pcmark;
    FPOS w_prev_pcmark;




    struct filemark w_jumplist[50];
    int w_jumplistlen;
    int w_jumplistidx;







    struct taggy w_tagstack[20];
    int w_tagstackidx;
    int w_tagstacklen;







    int w_fraction;
    int w_prev_fraction_row;
# 789 "structs.h"
};




typedef struct oparg
{
    int op_type;
    int regname;
    int motion_type;
    int inclusive;

    int end_adjusted;

    FPOS start;
    FPOS end;
    long line_count;

    int empty;

    int is_VIsual;
    int block_mode;
    colnr_t start_vcol;
    colnr_t end_vcol;
} OPARG;




typedef struct cmdarg
{
    OPARG *oap;
    int prechar;
    int cmdchar;
    int nchar;
    int extra_char;
    long count0;
    long count1;
} CMDARG;
# 886 "structs.h"
typedef struct VimMenu
{
    int modes;
    char_u *name;
    char_u *dname;
    int mnemonic;
    char_u *actext;
    int priority;



    char_u *strings[6];
    int noremap[6];
    struct VimMenu *children;
    struct VimMenu *next;
# 951 "structs.h"
} VimMenu;
# 886 "vim.h" 2
# 1019 "vim.h"
# 1 "globals.h" 1
# 29 "globals.h"
extern long Rows ;
extern long Columns ;
# 40 "globals.h"
extern char_u *NextScreen ;
extern char_u **LinePointers ;

extern int screen_Rows ;
extern int screen_Columns ;





extern int mod_mask ;
# 61 "globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;

extern int cmdline_crypt ;

extern int exec_from_reg ;

extern int modified ;

extern int tag_modified ;

extern int screen_cleared ;







extern colnr_t dollar_vcol ;




extern int expand_context ;
extern char_u *expand_pattern ;
extern int expand_set_path ;





extern int completion_length ;
extern int continue_status ;
extern int completion_interrupted ;
# 116 "globals.h"
extern int msg_col;
extern int msg_row;




extern int msg_scrolled;

extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;
extern int did_emsg;
extern int emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;

extern int quit_more ;
extern int more_back ;
extern int more_back_used ;

extern int newline_on_exit ;
extern int intr_char ;

extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;





extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_t sourcing_lnum ;

extern int scroll_region ;
extern int highlight_match ;
extern int search_match_len;
extern int no_smartcase ;
extern int need_check_timestamps ;
extern int highlight_attr[HLF_COUNT];




extern int highlight_user[9];

extern int highlight_stlnc[9];





extern int cterm_normal_fg_color ;
extern int cterm_normal_fg_bold ;
extern int cterm_normal_bg_color ;


extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;



extern BUF *au_new_curbuf ;






extern int mouse_row;
extern int mouse_col;
extern int mouse_past_bottom ;
extern int mouse_past_eol ;
extern int mouse_dragging ;
# 228 "globals.h"
extern VimMenu *root_menu ;




extern int sys_menu ;
# 277 "globals.h"
extern WIN *firstwin;
extern WIN *lastwin;
extern WIN *curwin;





extern BUF *firstbuf ;
extern BUF *lastbuf ;
extern BUF *curbuf ;




extern char_u **arg_files;
extern int arg_file_count;
extern int arg_had_last ;

extern int ru_col;

extern int ru_wid;

extern int sc_col;





extern int starting ;


extern int exiting ;

extern int full_screen ;



extern int restricted ;

extern int secure ;




extern int silent_mode ;



extern FPOS VIsual;
extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;



extern int VIsual_mode ;

extern int redo_VIsual_busy ;







extern FPOS where_paste_started;
# 354 "globals.h"
extern int did_ai ;





extern colnr_t ai_col ;
# 369 "globals.h"
extern int end_comment_pending ;
# 379 "globals.h"
extern int did_syncbind ;







extern int did_si ;





extern int can_si ;





extern int can_si_back ;





extern FPOS Insstart;





extern int orig_line_count ;
extern int vr_lines_changed ;
extern colnr_t vr_virtcol ;
extern int vr_virtoffset ;
# 448 "globals.h"
extern int State ;




extern int exmode_active ;
extern int ex_no_reprint ;

extern int Recording ;
extern int Exec_reg ;

extern int finish_op ;

extern int no_mapping ;
extern int allow_keys ;

extern int no_u_sync ;

extern int restart_edit ;
extern int arrow_used;




extern char_u *edit_submode ;
extern char_u *edit_submode_extra ;
extern enum hlf_value edit_submode_highl;
extern int ctrl_x_mode ;


extern int no_abbr ;

extern int fo_do_comments ;
# 504 "globals.h"
extern int confirm ;
extern int swap_exists_action ;



extern char_u *IObuff;
extern char_u *NameBuff;

extern char_u msg_buf[80];

extern int RedrawingDisabled ;






extern int readonlymode ;
extern int recoverymode ;

extern char_u *typebuf ;
extern int typebuflen;
extern int typeoff;
extern int typelen;
extern int KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern char_u chartab[256];

extern int must_redraw ;
extern int skip_redraw ;
extern int do_redraw ;

extern int need_highlight_changed ;
extern char_u *use_viminfo ;


extern FILE *scriptin[15];
extern int curscript ;
extern FILE *scriptout ;
extern int read_cmd_fd ;

extern int got_int ;




extern int termcap_active ;
extern int bangredo ;
extern int searchcmdlen;
extern int reg_ic ;
extern int reg_syn ;

extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int undo_off ;
extern int global_busy ;
extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *new_last_cmdline ;

extern char_u *autocmd_fname ;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;


extern int postponed_split ;
extern int g_do_tagpreview ;

extern int replace_offset ;

extern char_u *escape_chars ;


extern char_u *help_save_isk ;
extern long help_save_ts ;
extern int keep_help_flag ;






extern char_u *empty_option ;





extern int redir_off ;
extern FILE *redir_fd ;

extern int redir_reg ;







extern int save_p_ls ;
extern int wild_menu_showing ;
# 620 "globals.h"
extern char breakat_flags[256];



extern char *Version;
extern char *mediumVersion;



extern char *longVersion;
# 638 "globals.h"
extern char_u *default_vim_dir;
extern char_u *default_vimruntime_dir;
extern char_u *all_cflags;
extern char_u *all_lflags;



extern char_u *compiled_user;
extern char_u *compiled_sys;



extern int lcs_eol ;
extern int lcs_ext ;
extern int lcs_tab1 ;
extern int lcs_tab2 ;
extern int lcs_trail ;

extern char_u no_lines_msg[] ;


extern char_u wim_flags[4];





extern int stl_syntax ;




extern int no_hlsearch ;
# 705 "globals.h"
extern char_u e_abort[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_curdir[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;

extern char_u e_invexpr2[] ;

extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;

extern char_u e_letunexp[] ;

extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;



extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;

extern char_u e_nogvim[] ;


extern char_u e_nohebrew[] ;


extern char_u e_nofarsi[] ;

extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[] ;
extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notcreate[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notread[] ;
extern char_u e_nowrtmsg[] ;
extern char_u e_null[] ;

extern char_u e_number[] ;


extern char_u e_openerrf[] ;

extern char_u e_outofmem[] ;

extern char_u e_patnotf[] ;

extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;

extern char_u e_quickfix[] ;

extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[] ;

extern char_u e_readonlyvar[] ;


extern char_u e_readerrf[] ;

extern char_u e_scroll[] ;
extern char_u e_tagformat[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_toombra[] ;
extern char_u e_toomket[] ;
extern char_u e_toomsbra[] ;



extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_umark[] ;
extern char_u e_unknown[] ;
extern char_u e_write[] ;
extern char_u e_zerocount[] ;
# 1020 "vim.h" 2
# 1 "option.h" 1
# 254 "option.h"
extern int p_aw;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bsdir;





extern char_u *p_breakat;




extern long p_ch;

extern int p_confirm;

extern int p_cp;
extern char_u *p_cpo;






extern char_u *p_def;

extern char_u *p_dict;


extern int p_dg;

extern char_u *p_dir;
extern char_u *p_dy;
extern int p_ed;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;

extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;


extern char_u *p_ei;

extern int p_ek;
extern int p_exrc;
extern char_u *p_ffs;
extern char_u *p_fp;
extern int p_gd;
# 326 "option.h"
extern char_u *p_hf;
extern long p_hh;
extern int p_hid;
extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
# 341 "option.h"
extern int p_icon;
extern char_u *p_iconstring;

extern int p_ic;
extern int p_is;
extern int p_im;
extern char_u *p_inc;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_kp;
extern char_u *p_km;



extern long p_ls;
extern char_u *p_lcs;

extern int p_lz;
extern int p_magic;

extern char_u *p_mef;
extern char_u *p_mp;

extern long p_mat;

extern long p_mfd;

extern long p_mmd;
extern long p_mm;
extern long p_mmt;
extern long p_mls;
extern char_u *p_mouse;




extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pm;
extern char_u *p_path;
extern int p_remap;
extern long p_report;
extern long p_pvh;
# 398 "option.h"
extern int p_ru;


extern char_u *p_ruf;

extern long p_sj;
extern long p_so;

extern char_u *p_sbo;

extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;

extern char_u *p_sessopt;

extern char_u *p_sh;
extern char_u *p_shcf;

extern char_u *p_sp;

extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_srr;







extern char_u *p_stl;

extern int p_sr;
extern char_u *p_shm;

extern char_u *p_sbr;


extern int p_sc;

extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_sws;
extern char_u *p_swb;
extern int p_tbs;
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_terse;
extern int p_ta;
extern int p_to;
extern int p_timeout;
extern long p_tm;

extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;

extern int p_ttimeout;
extern long p_ttm;
extern int p_tbi;
extern int p_tf;



extern long p_ttyscroll;
extern char_u *p_ttym;
extern long p_ul;
extern long p_uc;
extern long p_ut;

extern char_u *p_viminfo;

extern int p_vb;
extern long p_verbose;
extern int p_warn;





extern char_u *p_wig;

extern int p_wiv;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern char_u *p_wim;

extern int p_wmnu;

extern long p_wh;
extern long p_wmh;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;
# 1021 "vim.h" 2
# 1 "ex_cmds.h" 1
# 78 "ex_cmds.h"
enum CMD_index

{
    CMD_append,
    CMD_abbreviate,
    CMD_abclear,
    CMD_all,
    CMD_amenu,
    CMD_anoremenu,
    CMD_args,
    CMD_argument,
    CMD_ascii,
    CMD_autocmd,
    CMD_augroup,
    CMD_aunmenu,
    CMD_buffer,
    CMD_bNext,
    CMD_ball,
    CMD_badd,
    CMD_bdelete,
    CMD_behave,
    CMD_blast,
    CMD_bmodified,
    CMD_bnext,
    CMD_bprevious,
    CMD_brewind,
    CMD_break,
    CMD_browse,
    CMD_buffers,
    CMD_bunload,
    CMD_change,
    CMD_cNext,
    CMD_cabbrev,
    CMD_cabclear,
    CMD_call,
    CMD_cc,
    CMD_cd,
    CMD_center,
    CMD_cfile,
    CMD_chdir,
    CMD_checkpath,
    CMD_clist,
    CMD_clast,
    CMD_close,
    CMD_cmap,
    CMD_cmapclear,
    CMD_cmenu,
    CMD_cnext,
    CMD_cnewer,
    CMD_cnfile,
    CMD_cnoremap,
    CMD_cnoreabbrev,
    CMD_cnoremenu,
    CMD_copy,
    CMD_colder,
    CMD_command,
    CMD_comclear,
    CMD_continue,
    CMD_confirm,
    CMD_cprevious,
    CMD_cquit,
    CMD_crewind,
    CMD_cscope,
    CMD_cstag,
    CMD_cunmap,
    CMD_cunabbrev,
    CMD_cunmenu,
    CMD_delete,
    CMD_delcommand,
    CMD_delfunction,
    CMD_display,
    CMD_digraphs,
    CMD_djump,
    CMD_dlist,
    CMD_doautocmd,
    CMD_doautoall,
    CMD_dsearch,
    CMD_dsplit,
    CMD_edit,
    CMD_echo,
    CMD_echohl,
    CMD_echon,
    CMD_else,
    CMD_elseif,
    CMD_exemenu,
    CMD_endif,
    CMD_endfunction,
    CMD_endwhile,
    CMD_ex,
    CMD_execute,
    CMD_exit,
    CMD_file,
    CMD_files,
    CMD_filetype,
    CMD_find,
    CMD_fixdel,
    CMD_function,
    CMD_global,
    CMD_goto,
    CMD_grep,
    CMD_gui,
    CMD_gvim,
    CMD_help,
    CMD_helpfind,
    CMD_highlight,
    CMD_hide,
    CMD_history,
    CMD_insert,
    CMD_iabbrev,
    CMD_iabclear,
    CMD_if,
    CMD_ijump,
    CMD_ilist,
    CMD_imap,
    CMD_imapclear,
    CMD_imenu,
    CMD_inoremap,
    CMD_inoreabbrev,
    CMD_inoremenu,
    CMD_intro,
    CMD_isearch,
    CMD_isplit,
    CMD_iunmap,
    CMD_iunabbrev,
    CMD_iunmenu,
    CMD_join,
    CMD_jumps,
    CMD_k,
    CMD_list,
    CMD_last,
    CMD_left,
    CMD_let,
    CMD_ls,
    CMD_move,
    CMD_mark,
    CMD_make,
    CMD_map,
    CMD_mapclear,
    CMD_marks,
    CMD_menu,
    CMD_messages,

    CMD_mkexrc,
    CMD_mksession,
    CMD_mkvimrc,
    CMD_mode,
    CMD_next,
    CMD_new,
    CMD_nmap,
    CMD_nmapclear,
    CMD_nmenu,
    CMD_nnoremap,
    CMD_nnoremenu,
    CMD_noremap,
    CMD_nohlsearch,
    CMD_noreabbrev,
    CMD_noremenu,
    CMD_normal,
    CMD_number,
    CMD_nunmap,
    CMD_nunmenu,
    CMD_open,
    CMD_omap,
    CMD_omapclear,
    CMD_omenu,
    CMD_only,
    CMD_onoremap,
    CMD_onoremenu,
    CMD_options,
    CMD_ounmap,
    CMD_ounmenu,
    CMD_print,
    CMD_pclose,
    CMD_perl,
    CMD_perldo,
    CMD_pop,
    CMD_ppop,
    CMD_preserve,
    CMD_previous,
    CMD_promptfind,
    CMD_promptrepl,
    CMD_ptag,
    CMD_ptNext,
    CMD_ptjump,
    CMD_ptlast,
    CMD_ptnext,
    CMD_ptprevious,
    CMD_ptrewind,
    CMD_ptselect,
    CMD_put,
    CMD_pwd,
    CMD_python,
    CMD_pyfile,
    CMD_quit,
    CMD_qall,
    CMD_read,
    CMD_recover,
    CMD_redo,
    CMD_redir,
    CMD_registers,
    CMD_resize,
    CMD_retab,
    CMD_return,
    CMD_rewind,
    CMD_right,
    CMD_rviminfo,
    CMD_substitute,
    CMD_sNext,
    CMD_sargument,
    CMD_sall,
    CMD_sbuffer,
    CMD_sbNext,
    CMD_sball,
    CMD_sblast,
    CMD_sbmodified,
    CMD_sbnext,
    CMD_sbprevious,
    CMD_sbrewind,
    CMD_set,
    CMD_sfind,
    CMD_shell,



    CMD_sleep,
    CMD_slast,
    CMD_smagic,
    CMD_snext,
    CMD_sniff,
    CMD_snomagic,
    CMD_source,
    CMD_split,
    CMD_sprevious,
    CMD_srewind,
    CMD_stop,
    CMD_stag,
    CMD_startinsert,
    CMD_stjump,
    CMD_stselect,
    CMD_sunhide,
    CMD_suspend,
    CMD_sview,
    CMD_swapname,
    CMD_syntax,
    CMD_syncbind,
    CMD_t,
    CMD_tNext,
    CMD_tag,
    CMD_tags,
    CMD_tcl,
    CMD_tcldo,
    CMD_tclfile,
    CMD_tearoff,
    CMD_tjump,
    CMD_tlast,
    CMD_tmenu,
    CMD_tnext,
    CMD_tprevious,
    CMD_trewind,
    CMD_tselect,
    CMD_tunmenu,
    CMD_undo,
    CMD_unabbreviate,
    CMD_unhide,
    CMD_unlet,
    CMD_unmap,
    CMD_unmenu,
    CMD_update,
    CMD_vglobal,
    CMD_version,
    CMD_visual,
    CMD_view,
    CMD_vmap,
    CMD_vmapclear,
    CMD_vmenu,
    CMD_vnoremap,
    CMD_vnoremenu,
    CMD_vunmap,
    CMD_vunmenu,
    CMD_write,
    CMD_wNext,
    CMD_wall,
    CMD_while,
    CMD_winsize,
    CMD_winpos,
    CMD_wnext,
    CMD_wprevious,
    CMD_wq,
    CMD_wqall,
    CMD_wviminfo,
    CMD_xit,
    CMD_xall,
    CMD_yank,
    CMD_z,


    CMD_bang,
    CMD_pound,
    CMD_and,
    CMD_star,
    CMD_lshift,
    CMD_equal,
    CMD_rshift,
    CMD_at,
    CMD_Next,
    CMD_Print,
    CMD_X,
    CMD_tilde,



    CMD_SIZE,
    CMD_USER = -1




};


typedef enum CMD_index CMDIDX;




typedef struct exarg
{
    char_u *arg;
    char_u *nextcmd;
    char_u *cmd;
    CMDIDX cmdidx;
    long argt;
    int skip;
    int forceit;
    int addr_count;
    linenr_t line1;
    linenr_t line2;
    char_u *do_ecmd_cmd;
    linenr_t do_ecmd_lnum;
    int append;
    int usefilter;
    int amount;
    int regname;

    int useridx;

} EXARG;
# 1022 "vim.h" 2
# 1 "proto.h" 1
# 30 "proto.h"
# 1 "proto/os_unix.pro" 1

void mch_write (char_u *s, int len) __attribute((crest_skip));
int mch_inchar (char_u *buf, int maxlen, long wtime);
int mch_char_avail (void);
long_u mch_avail_mem (int special);
void mch_delay (long msec, int ignoreinput);
void mch_suspend (void);
void mch_windinit (void);
void reset_signals (void);
int mch_check_win (int argc, char **argv);
int mch_input_isatty (void);
int mch_can_restore_title (void);
int mch_can_restore_icon (void);
void mch_settitle (char_u *title, char_u *icon);
void mch_restore_title (int which);
int vim_is_xterm (char_u *name);
int use_xterm_mouse (void);
int vim_is_iris (char_u *name);
int vim_is_fastterm (char_u *name);
int mch_get_user_name (char_u *s, int len);
int mch_get_uname (uid_t uid, char_u *s, int len);
void mch_get_host_name (char_u *s, int len);
long mch_get_pid (void);
int mch_dirname (char_u *buf, int len);
void slash_adjust (char_u *p);
int mch_FullName (char_u *fname, char_u *buf, int len, int force);
int mch_isFullName (char_u *fname);
long mch_getperm (char_u *name);
int mch_setperm (char_u *name, long perm);
void mch_hide (char_u *name);
int mch_isdir (char_u *name);
void mch_windexit (int r);
void mch_settmode (int tmode);
void get_stty (void);
void mch_setmouse (int on);
void check_mouse_termcode (void);
int mch_screenmode (char_u *arg);
int mch_get_winsize (void);
void mch_set_winsize (void);
int mch_call_shell (char_u *cmd, int options);
void mch_breakcheck (void);
int mch_expandpath (struct growarray *gap, char_u *path, int flags);
int mch_expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int mch_has_wildcard (char_u *p);
void setup_xterm_clip (void);
void start_xterm_trace (int button);
void stop_xterm_trace (void);
void clear_xterm_clip (void);
int clip_xterm_own_selection (void);
void clip_xterm_lose_selection (void);
void clip_xterm_request_selection (void);
void clip_xterm_set_selection (void);
# 31 "proto.h" 2
# 54 "proto.h"
# 1 "proto/buffer.pro" 1

int open_buffer (int read_stdin);
int buf_valid (BUF *buf);
void close_buffer (WIN *win, BUF *buf, int free_buf, int del_buf);
void buf_clear (BUF *buf);
void buf_freeall (BUF *buf, int del_buf);
char_u *do_bufdel (int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit);
int do_buffer (int action, int start, int dir, int count, int forceit);
void enter_buffer (BUF *buf);
BUF *buflist_new (char_u *ffname, char_u *sfname, linenr_t lnum, int use_curbuf);
void free_buf_options (BUF *buf, int free_p_ff);
int buflist_getfile (int n, linenr_t lnum, int options, int forceit);
void buflist_getfpos (void);
BUF *buflist_findname (char_u *ffname);
int buflist_findpat (char_u *pattern, char_u *pattern_end);
int ExpandBufnames (char_u *pat, int *num_file, char_u ***file, int options);
BUF *buflist_findnr (int nr);
char_u *buflist_nr2name (int n, int fullname, int helptail);
FPOS *buflist_findfpos (BUF *buf);
linenr_t buflist_findlnum (BUF *buf);
void buflist_list (void);
int buflist_name_nr (int fnum, char_u **fname, linenr_t *lnum);
int setfname (char_u *ffname, char_u *sfname, int message);
void setaltfname (char_u *ffname, char_u *sfname, linenr_t lnum);
char_u *getaltfname (int errmsg);
int buflist_add (char_u *fname);
void buflist_altfpos (void);
int otherfile (char_u *ffname);
void fileinfo (int fullname, int shorthelp, int dont_truncate);
void cursor_pos_info (void);
void col_print (char_u *buf, int col, int vcol);
void maketitle (void);
void resettitle (void);
int append_arg_number (WIN *wp, char_u *buf, int add_file, int maxlen);
char_u *fix_fname (char_u *fname);
void fname_expand (char_u **ffname, char_u **sfname);
void do_arg_all (int count, int forceit);
void do_buffer_all (int count, int all);
void do_modelines (void);
int read_viminfo_bufferlist (char_u *line, FILE *fp, int writing);
void write_viminfo_bufferlist (FILE *fp);
# 55 "proto.h" 2
# 1 "proto/charset.pro" 1

int init_chartab (void);
void trans_characters (char_u *buf, int bufsize);
char_u *transstr (char_u *s);
char_u *transchar (int c);
void transchar_nonprint (char_u *buf, int c);
int charsize (int c);
int vim_strsize (char_u *s);
int chartabsize (int c, colnr_t col);
int linetabsize (char_u *s);
int win_linetabsize (WIN *wp, char_u *s);
int vim_isIDc (int c);
int vim_iswordc (int c);
int vim_iswordc_buf (int c, BUF *buf);
int vim_isfilec (int c);
int vim_isprintc (int c);
int safe_vim_isprintc (int c);
int lbr_chartabsize (unsigned char *s, colnr_t col);
int win_lbr_chartabsize (WIN *wp, unsigned char *s, colnr_t col, int *head);
void getvcol (WIN *wp, FPOS *pos, colnr_t *start, colnr_t *cursor, colnr_t *end);
void getvcols (FPOS *pos1, FPOS *pos2, colnr_t *left, colnr_t *right);
char_u *skipwhite (char_u *p);
char_u *skipdigits (char_u *p);
int vim_isdigit (int c);
char_u *skiptowhite (char_u *p);
char_u *skiptowhite_esc (char_u *p);
long getdigits (char_u **pp);
int vim_isblankline (char_u *lbuf);
void vim_str2nr (char_u *start, int *hexp, int *len, int dooct, int dohex, long *nptr, unsigned long *unptr);
int hex2nr (int c);
# 56 "proto.h" 2

# 1 "proto/if_cscope.pro" 1

void do_cscope (EXARG *eap);
void do_cstag (EXARG *eap);
int cs_fgets (char_u *buf, int size);
void cs_free_tags (void);
void cs_print_tags (void);
# 58 "proto.h" 2

# 1 "proto/digraph.pro" 1

int do_digraph (int c);
int getdigraph (int char1, int char2, int meta);
void putdigraph (char_u *str);
void listdigraphs (void);
# 60 "proto.h" 2
# 1 "proto/edit.pro" 1

int edit (int cmdchar, int startln, long count);
void display_dollar (colnr_t col);
void change_indent (int type, int amount, int round, int replaced);
void truncate_spaces (char_u *line);
void backspace_until_column (int col);
int vim_is_ctrl_x_key (int c);
int ins_compl_add_infercase (char_u *str, int len, char_u *fname, int dir, int reuse);
void ins_compl_check_keys (void);
int get_literal (void);
void insertchar (unsigned c, int force_formatting, int second_indent, int ctrlv);
int comp_textwidth (int ff);
void stop_arrow (void);
void set_last_insert (int c);
void beginline (int flags);
int oneright (void);
int oneleft (void);
int cursor_up (long n, int upd_topline);
int cursor_down (long n, int upd_topline);
int stuff_inserted (int c, long count, int no_esc);
char_u *get_last_insert (void);
char_u *get_last_insert_save (void);
void replace_push (int c);
int get_replace_stack_virtcol (void);
void fixthisline (int (*get_the_indent)(void));
int in_cinkeys (int keytyped, int when, int line_is_empty);
int hkmap (int c);
void ins_scroll (void);
void ins_horscroll (void);
# 61 "proto.h" 2
# 1 "proto/eval.pro" 1

void set_internal_string_var (char_u *name, char_u *value);
int eval_to_bool (char_u *arg, int *error, char_u **nextcmd, int skip);
char_u *eval_to_string (char_u *arg, char_u **nextcmd);
void do_let (EXARG *eap);
void set_context_for_expression (char_u *arg, CMDIDX cmdidx);
void do_call (EXARG *eap);
void do_unlet (char_u *arg, int forceit);
char_u *get_user_var_name (int idx);
char_u *get_function_name (int idx);
char_u *get_expr_name (int idx);
void set_vim_var_nr (int idx, long val);
void set_vim_var_string (int idx, char_u *val);
void var_init (struct growarray *gap);
void var_clear (struct growarray *gap);
void do_echo (EXARG *eap, int echo);
void do_echohl (char_u *arg);
void do_execute (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
void do_function (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
char_u *get_user_func_name (int idx);
void do_delfunction (char_u *arg);
void *save_funccal (void);
void restore_funccal (void *fc);
void do_return (EXARG *eap);
char_u *get_func_line (int c, void *cookie, int indent);
int func_has_ended (void *cookie);
int func_has_abort (void *cookie);
int read_viminfo_varlist (char_u *line, FILE *fp, int writing);
void write_viminfo_varlist (FILE *fp);
int store_session_globals (FILE *fd);
int modify_fname (char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen);
char_u *do_string_sub (char_u *str, char_u *pat, char_u *sub, char_u *flags);
# 62 "proto.h" 2
# 1 "proto/ex_cmds.pro" 1

void do_ascii (void);
void do_align (EXARG *eap);
void do_retab (EXARG *eap);
int do_move (linenr_t line1, linenr_t line2, linenr_t dest);
void do_copy (linenr_t line1, linenr_t line2, linenr_t n);
void do_bang (int addr_count, linenr_t line1, linenr_t line2, int forceit, char_u *arg, int do_in, int do_out);
void do_shell (char_u *cmd, int flags);
char_u *make_filter_cmd (char_u *cmd, char_u *itmp, char_u *otmp);
int viminfo_error (char *message, char_u *line);
int read_viminfo (char_u *file, int want_info, int want_marks, int forceit);
void write_viminfo (char_u *file, int forceit);
char_u *viminfo_readstring (char_u *p, FILE *fp);
void viminfo_writestring (FILE *fd, char_u *p);
void do_fixdel (void);
void print_line_no_prefix (linenr_t lnum, int use_number);
void print_line (linenr_t lnum, int use_number);
void do_file (char_u *arg, int forceit);
int do_write (EXARG *eap);
void do_wnext (EXARG *eap);
void do_wqall (EXARG *eap);
int not_writing (void);
int getfile (int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_t lnum, int forceit);
int do_ecmd (int fnum, char_u *ffname, char_u *sfname, char_u *command, linenr_t newlnum, int flags);
void do_append (linenr_t lnum, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_change (linenr_t start, linenr_t end, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_z (linenr_t line, char_u *arg);
int check_restricted (void);
int check_secure (void);
void do_sub (EXARG *eap);
void do_glob (EXARG *eap);
int read_viminfo_sub_string (char_u *line, FILE *fp, int force);
void write_viminfo_sub_string (FILE *fp);
void prepare_tagpreview (void);
void do_help (EXARG *eap);
int help_heuristic (char_u *matched_string, int offset, int wrong_case);
int find_help_tags (char_u *arg, int *num_matches, char_u ***matches);
# 63 "proto.h" 2
# 1 "proto/ex_docmd.pro" 1

void do_exmode (void);
int do_cmdline (char_u *cmdline, char_u *(*getline)(int, void *, int), void *cookie, int flags);
char_u *set_one_cmd_context (char_u *buff);
int expand_filename (EXARG *eap, char_u **cmdlinep, char_u **errormsgp);
void separate_nextcmd (EXARG *eap);
int autowrite (BUF *buf, int forceit);
void autowrite_all (void);
int check_changed (BUF *buf, int checkaw, int mult_win, int forceit, int allbuf);
void dialog_changed (BUF *buf, int checkall);
int can_abandon (BUF *buf, int forceit);
int check_changed_any (int hidden);
int check_fname (void);
int buf_write_all (BUF *buf);
int rem_backslash (char_u *str);
void backslash_halve (char_u *p);
char_u *backslash_halve_save (char_u *p);
void check_arg_idx (WIN *win);
int ends_excmd (int c);
char_u *find_nextcmd (char_u *p);
char_u *check_nextcmd (char_u *p);
int do_source (char_u *fname, int check_other, int is_vimrc);
char *fgets_cr (char *s, int n, FILE *stream);
char_u *getsourceline (int c, void *cookie, int indent);
char_u *get_command_name (int idx);
char_u *get_user_commands (int idx);
char_u *get_user_cmd_flags (int idx);
char_u *get_user_cmd_nargs (int idx);
char_u *get_user_cmd_complete (int idx);
void not_exiting (void);
void do_argfile (EXARG *eap, int argn);
void handle_drop (int filec, char_u **filev, int split);
char_u *eval_vars (char_u *src, int *usedlen, linenr_t *lnump, char_u **errormsg, char_u *srcstart);
char_u *expand_sfile (char_u *arg);
int put_eol (FILE *fd);
void dialog_msg (char_u *buff, char *format, char_u *fname);
# 64 "proto.h" 2
# 1 "proto/ex_getln.pro" 1

char_u *getcmdline (int firstc, long count, int indent);
char_u *getcmdline_prompt (int firstc, char_u *prompt, int attr);
char_u *getexline (int c, void *dummy, int indent);
char_u *getexmodeline (int c, void *dummy, int indent);
int cmdline_overstrike (void);
int cmdline_at_end (void);
int put_on_cmdline (char_u *str, int len, int redraw);
void redrawcmdline (void);
void compute_cmdrow (void);
void gotocmdline (int clr);
char_u *ExpandOne (char_u *str, char_u *orig, int options, int mode);
void tilde_replace (char_u *orig_pat, int num_files, char_u **files);
char_u *addstar (char_u *fname, int len, int context);
int ExpandGeneric (vim_regexp *prog, int *num_file, char_u ***file, char_u *((*func)(int)));
int get_histtype (char_u *name);
void add_to_history (int histype, char_u *new_entry, int in_map);
int get_history_idx (int histype);
char_u *get_history_entry (int histype, int idx);
int clr_history (int histype);
int del_history_entry (int histype, char_u *str);
int del_history_idx (int histype, int idx);
void remove_key_from_history (void);
int get_list_range (char_u **str, int *num1, int *num2);
void do_history (char_u *arg);
void prepare_viminfo_history (int asklen);
int read_viminfo_history (char_u *line, FILE *fp);
void finish_viminfo_history (void);
void write_viminfo_history (FILE *fp);
void cmd_pchar (int c, int offset);
int cmd_gchar (int offset);
# 65 "proto.h" 2
# 1 "proto/fileio.pro" 1

void filemess (BUF *buf, char_u *name, char_u *s, int attr);
int readfile (char_u *fname, char_u *sfname, linenr_t from, linenr_t lines_to_skip, linenr_t lines_to_read, int flags);
int buf_write (BUF *buf, char_u *fname, char_u *sfname, linenr_t start, linenr_t end, int append, int forceit, int reset_changed, int filtering);
char_u *shorten_fname (char_u *full_path, char_u *dir_name);
void shorten_fnames (int force);
char_u *modname (char_u *fname, char_u *ext, int prepend_dot);
char_u *buf_modname (int shortname, char_u *fname, char_u *ext, int prepend_dot);
int vim_fgets (char_u *buf, int size, FILE *fp);
int vim_rename (char_u *from, char_u *to);
void check_timestamps (int focus);
int buf_check_timestamp (BUF *buf, int focus);
void write_lnum_adjust (linenr_t offset);
char_u *vim_tempname (int extra_char);
void do_augroup (char_u *arg);
int check_ei (void);
void do_autocmd (char_u *arg, int forceit);
int do_doautocmd (char_u *arg, int do_msg);
void do_autoall (char_u *arg);
int apply_autocmds (EVENT_T event, char_u *fname, char_u *fname_io, int force, BUF *buf);
int has_cursorhold (void);
char_u *get_augroup_name (int idx);
char_u *set_context_in_autocmd (char_u *arg, int doautocmd);
char_u *get_event_name (int idx);
int match_file_pat (char_u *pattern, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs);
char_u *file_pat_to_reg_pat (char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash);
# 66 "proto.h" 2
# 1 "proto/getchar.pro" 1

char_u *get_recorded (void);
char_u *get_inserted (void);
int stuff_empty (void);
void flush_buffers (int typeahead);
void ResetRedobuff (void);
void saveRedobuff (void);
void restoreRedobuff (void);
void AppendToRedobuff (char_u *s);
void AppendCharToRedobuff (int c);
void AppendNumberToRedobuff (long n);
void stuffReadbuff (char_u *s);
void stuffcharReadbuff (int c);
void stuffnumReadbuff (long n);
int start_redo (long count, int old_redo);
int start_redo_ins (void);
void stop_redo_ins (void);
int ins_typebuf (char_u *str, int noremap, int offset, int nottyped);
int typebuf_typed (void);
int typebuf_maplen (void);
void del_typebuf (int len, int offset);
int save_typebuf (void);
int openscript (char_u *name);
int using_script (void);
void updatescript (int c);
int vgetc (void);
int safe_vgetc (void);
int vpeekc (void);
int char_avail (void);
void vungetc (int c);
int inchar (char_u *buf, int maxlen, long wait_time);
int do_map (int maptype, char_u *keys, int mode, int abbrev, char_u **ambig);
int get_map_mode (char_u **cmdp, int forceit);
void map_clear (char_u *cmdp, int forceit, int abbr);
char_u *set_context_in_map_cmd (char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, CMDIDX cmdidx);
int ExpandMappings (vim_regexp *prog, int *num_file, char_u ***file);
int check_abbr (int c, char_u *ptr, int col, int mincol);
int makemap (FILE *fd);
int putescstr (FILE *fd, char_u *str, int set);
void check_map_keycodes (void);
char_u *check_map (char_u *keys, int mode, int exact);
void init_mappings (void);
# 67 "proto.h" 2



# 1 "proto/main.pro" 1

int process_env (char_u *env, int is_viminit);
void getout (int r);
int toF_TyA (int c);
int fkmap (int c);
void conv_to_pvim (void);
void conv_to_pstd (void);
char_u *lrswap (char_u *ibuf);
char_u *lrFswap (char_u *cmdbuf, int len);
char_u *lrF_sub (char_u *ibuf);
int cmdl_fkmap (int c);
int F_isalpha (int c);
int F_isdigit (int c);
int F_ischar (int c);
void farsi_fkey (int c);
# 71 "proto.h" 2
# 1 "proto/mark.pro" 1

int setmark (int c);
void setpcmark (void);
void checkpcmark (void);
FPOS *movemark (int count);
FPOS *getmark (int c, int changefile);
void fmarks_check_names (BUF *buf);
int check_mark (FPOS *pos);
void clrallmarks (BUF *buf);
char_u *fm_getname (struct filemark *fmark, int lead_len);
void do_marks (char_u *arg);
void do_jumps (void);
void mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
void set_last_cursor (WIN *win);
int read_viminfo_filemark (char_u *line, FILE *fp, int force);
void write_viminfo_filemarks (FILE *fp);
int removable (char_u *name);
int write_viminfo_marks (FILE *fp_out);
void copy_viminfo_marks (char_u *line, FILE *fp_in, FILE *fp_out, int count, int eof);
# 72 "proto.h" 2

void



smsg (char_u *, ...);
void



smsg_attr (int, char_u *, ...);

# 1 "proto/memfile.pro" 1

MEMFILE *mf_open (char_u *fname, int trunc_file);
int mf_open_file (MEMFILE *mfp, char_u *fname);
void mf_close (MEMFILE *mfp, int del_file);
void mf_close_file (BUF *buf, int getlines);
BHDR *mf_new (MEMFILE *mfp, int negative, int page_count);
BHDR *mf_get (MEMFILE *mfp, blocknr_t nr, int page_count);
void mf_put (MEMFILE *mfp, BHDR *hp, int dirty, int infile);
void mf_free (MEMFILE *mfp, BHDR *hp);
int mf_sync (MEMFILE *mfp, int flags);
int mf_release_all (void);
blocknr_t mf_trans_del (MEMFILE *mfp, blocknr_t old_nr);
void mf_set_ffname (MEMFILE *mfp);
void mf_fullname (MEMFILE *mfp);
int mf_need_trans (MEMFILE *mfp);
# 85 "proto.h" 2
# 1 "proto/memline.pro" 1

int ml_open (void);
void ml_setname (void);
void ml_open_files (void);
void ml_open_file (BUF *buf);
void check_need_swap (int newfile);
void ml_close (BUF *buf, int del_file);
void ml_close_all (int del_file);
void ml_close_notmod (void);
void ml_timestamp (BUF *buf);
void ml_recover (void);
int recover_names (char_u **fname, int list, int nr);
void ml_sync_all (int check_file, int check_char);
void ml_preserve (BUF *buf, int message);
char_u *ml_get (linenr_t lnum);
char_u *ml_get_pos (FPOS *pos);
char_u *ml_get_curline (void);
char_u *ml_get_cursor (void);
char_u *ml_get_buf (BUF *buf, linenr_t lnum, int will_change);
int ml_line_alloced (void);
int ml_append (linenr_t lnum, char_u *line, colnr_t len, int newfile);
int ml_replace (linenr_t lnum, char_u *line, int copy);
int ml_delete (linenr_t lnum, int message);
void ml_setmarked (linenr_t lnum);
linenr_t ml_firstmarked (void);
void ml_clearmarked (void);
char_u *get_file_in_dir (char_u *fname, char_u *dname);
void ml_setdirty (BUF *buf, int flag);
long ml_find_line_or_offset (BUF *buf, linenr_t line, long *offp);
void goto_byte (long cnt);
# 86 "proto.h" 2

# 1 "proto/menu.pro" 1

void do_menu (EXARG *eap);
char_u *set_context_in_menu_cmd (char_u *cmd, char_u *arg, int forceit);
char_u *get_menu_name (int idx);
char_u *get_menu_names (int idx);
char_u *menu_name_skip (char_u *name);
int get_menu_index (VimMenu *menu, int state);
int menubar_menu (char_u *name);
int popup_menu (char_u *name);
int toolbar_menu (char_u *name);
void gui_create_initial_menus (VimMenu *menu, VimMenu *parent);
void gui_update_menus (int modes);
int gui_is_menu_shortcut (int key);
void gui_show_popupmenu (void);
void gui_mch_toggle_tearoffs (int enable);
void execute_menu (char_u *path_name);
int is_menu_separator (char_u *name);
# 88 "proto.h" 2

# 1 "proto/message.pro" 1

int msg (char_u *s);
int msg_attr (char_u *s, int attr);
char_u *msg_strtrunc (char_u *s);
int emsg (char_u *s);
int emsg2 (char_u *s, char_u *a1);
int emsgn (char_u *s, long n);
char_u *msg_trunc_attr (char_u *s, int force, int attr);
char_u *msg_may_trunc (int force, char_u *s);
void ex_messages (void);
void wait_return (int redraw);
void msg_start (void);
void msg_starthere (void);
void msg_putchar (int c);
void msg_putchar_attr (int c, int attr);
void msg_outnum (long n);
void msg_home_replace (char_u *fname);
void msg_home_replace_hl (char_u *fname);
int msg_outtrans (char_u *str);
int msg_outtrans_attr (char_u *str, int attr);
int msg_outtrans_len (char_u *str, int len);
int msg_outtrans_len_attr (char_u *str, int len, int attr);
void msg_make (char_u *arg);
int msg_outtrans_special (char_u *str, int from);
char_u *str2special (char_u **sp, int from);
void str2specialbuf (char_u *sp, char_u *buf, int len);
void msg_prt_line (char_u *s);
void msg_puts (char_u *s);
void msg_puts_title (char_u *s);
void msg_puts_long (char_u *longstr);
void msg_puts_long_attr (char_u *longstr, int attr);
void msg_puts_long_len_attr (char_u *longstr, int len, int attr);
void msg_puts_attr (char_u *s, int attr);
void msg_moremsg (int full);
void repeat_message (void);
void msg_clr_eos (void);
void msg_clr_cmdline (void);
int msg_end (void);
void msg_check (void);
void give_warning (char_u *message, int hl);
void msg_advance (int col);
int do_dialog (int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton);
void display_confirm_msg (void);
int vim_dialog_yesno (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnocancel (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnoallcancel (int type, char_u *title, char_u *message, int dflt);
char_u *do_browse (int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, BUF *buf);
# 90 "proto.h" 2
# 1 "proto/misc1.pro" 1

int get_indent (void);
int get_indent_lnum (linenr_t lnum);
void set_indent (int size, int del_first);
int open_line (int dir, int redraw, int del_spaces, int old_indent);
int get_leader_len (char_u *line, char_u **flags, int backward);
int plines_check (linenr_t p);
int plines (linenr_t p);
int plines_win (WIN *wp, linenr_t p);
int plines_win_col (WIN *wp, linenr_t p, long column);
int plines_m (linenr_t first, linenr_t last);
int plines_m_win (WIN *wp, linenr_t first, linenr_t last);
void ins_char (int c);
void ins_str (char_u *s);
int del_char (int fixpos);
int del_chars (long count, int fixpos);
int truncate_line (int fixpos);
void del_lines (long nlines, int dowindow, int undo);
int gchar_pos (FPOS *pos);
int gchar_cursor (void);
void pchar_cursor (int c);
int inindent (int extra);
char_u *skip_to_option_part (char_u *p);
char *plural (long n);
void changed (void);
void unchanged (BUF *buf, int ff);
void check_status (BUF *buf);
void change_warning (int col);
int ask_yesno (char_u *str, int direct);
int get_keystroke (void);
int get_number (int colon);
void msgmore (long n);
void beep_flush (void);
void vim_beep (void);
void init_homedir (void);
void expand_env (char_u *src, char_u *dst, int dstlen);
char_u *expand_env_save (char_u *src);
void vim_setenv (char_u *name, char_u *val);
void home_replace (BUF *buf, char_u *src, char_u *dst, int dstlen, int one);
char_u *home_replace_save (BUF *buf, char_u *src);
int fullpathcmp (char_u *s1, char_u *s2, int checkname);
char_u *gettail (char_u *fname);
char_u *getnextcomp (char_u *fname);
char_u *get_past_head (char_u *path);
int vim_ispathsep (int c);
int vim_fnamecmp (char_u *x, char_u *y);
int vim_fnamencmp (char_u *x, char_u *y, size_t len);
char_u *concat_fnames (char_u *fname1, char_u *fname2, int sep);
void add_pathsep (char_u *p);
char_u *FullName_save (char_u *fname, int force);
FPOS *find_start_comment (int ind_maxcomment);
int cin_islabel (int ind_maxcomment);
int cin_iscase (char_u *s);
int cin_isscopedecl (char_u *s);
int get_c_indent (void);
int get_lisp_indent (void);
void preserve_exit (void);
int vim_fexists (char_u *fname);
void line_breakcheck (void);
int expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int match_suffix (char_u *fname);
void addfile (struct growarray *gap, char_u *f, int flags);
char_u *get_cmd_output (char_u *cmd, int flags);
void FreeWild (int num, char_u **file);
int goto_im (void);
# 91 "proto.h" 2
# 1 "proto/misc2.pro" 1

int coladvance (colnr_t wcol);
int inc_cursor (void);
int inc (FPOS *lp);
int incl (FPOS *lp);
int dec_cursor (void);
int dec (FPOS *lp);
int decl (FPOS *lp);
void check_cursor_lnum (void);
void check_cursor_col (void);
void adjust_cursor (void);
void adjust_cursor_col (void);
int leftcol_changed (void);
void vim_mem_profile_dump (void);
char_u *alloc (unsigned size);
char_u *alloc_clear (unsigned size);
char_u *alloc_check (unsigned size);
char_u *lalloc_clear (long_u size, int message);
char_u *lalloc (long_u size, int message);
void *mem_realloc (void *ptr, size_t size);
void do_outofmem_msg (void);
char_u *vim_strsave (char_u *string);
char_u *vim_strnsave (char_u *string, int len);
char_u *vim_strsave_escaped (char_u *string, char_u *esc_chars);
char_u *vim_strsave_up (char_u *string);
char_u *vim_strnsave_up (char_u *string, int len);
void copy_spaces (char_u *ptr, size_t count);
void copy_chars (char_u *ptr, size_t count, int c);
void del_trailing_spaces (char_u *ptr);
void vim_strncpy (char_u *to, char_u *from, int len);
int copy_option_part (char_u **option, char_u *buf, int maxlen, char *sep_chars);
void vim_free (void *x);
int vim_stricmp (char *s1, char *s2);
int vim_strnicmp (char *s1, char *s2, size_t len);
char_u *vim_strchr (char_u *string, int n);
char_u *vim_strrchr (char_u *string, int n);
int vim_isspace (int x);
void ga_clear (struct growarray *gap);
void ga_clear_strings (struct growarray *gap);
void ga_init (struct growarray *gap);
void ga_init2 (struct growarray *gap, int itemsize, int growsize);
int ga_grow (struct growarray *gap, int n);
void ga_concat (struct growarray *gap, char_u *s);
void ga_append (struct growarray *gap, int c);
int name_to_mod_mask (int c);
int simplify_key (int key, int *modifiers);
char_u *get_special_key_name (int c, int modifiers);
int trans_special (char_u **srcp, char_u *dst, int keycode);
int find_special_key (char_u **srcp, int *modp, int keycode);
int find_special_key_in_table (int c);
int get_special_key_code (char_u *name);
char_u *get_key_name (int i);
int get_mouse_button (int code, int *is_click, int *is_drag);
int get_pseudo_mouse_code (int button, int is_click, int is_drag);
int get_fileformat (BUF *buf);
void set_fileformat (int t);
int default_fileformat (void);
int call_shell (char_u *cmd, int opt);
int get_real_state (void);
int vim_chdirfile (char_u *fname);
char_u *parse_guicursor (void);
int get_cursor_idx (void);
int decrypt_byte (void);
int update_keys (int c);
void crypt_init_keys (char_u *passwd);
char_u *get_crypt_key (int store);
int get_user_name (char_u *buf, int len);
# 92 "proto.h" 2






# 1 "proto/normal.pro" 1

void normal_cmd (OPARG *oap, int toplevel);
void do_pending_operator (CMDARG *cap, char_u *searchbuff, int *command_busy, int old_col, int gui_yank, int dont_adjust_op_end);
int do_mouse (OPARG *oap, int c, int dir, long count, int fix_indent);
void check_visual_highlight (void);
void end_visual_mode (void);
int find_ident_under_cursor (char_u **string, int find_type);
void clear_showcmd (void);
int add_to_showcmd (int c);
void add_to_showcmd_c (int c);
void push_showcmd (void);
void pop_showcmd (void);
void do_check_scrollbind (int check);
void check_scrollbind (linenr_t topline_diff, long leftcol_diff);
void scroll_redraw (int up, long count);
void start_selection (void);
void may_start_select (int c);
# 99 "proto.h" 2
# 1 "proto/ops.pro" 1

int get_op_type (int char1, int char2);
int op_on_lines (int op);
int get_op_char (int optype);
int get_extra_op_char (int optype);
void op_shift (OPARG *oap, int curs_top, int amount);
void shift_line (int left, int round, int amount);
void op_reindent (OPARG *oap, int (*how)(void));
int get_expr_register (void);
void set_expr_line (char_u *new_line);
int valid_yank_reg (int regname, int writing);
int yank_register_mline (int regname);
int do_record (int c);
int do_execreg (int regname, int colon, int addcr);
int insert_reg (int regname, int literally);
int cmdline_paste (int regname, int literally);
int op_delete (OPARG *oap);
int op_replace (OPARG *oap, int c);
void op_tilde (OPARG *oap);
void swapchar (int op_type, FPOS *pos);
void op_insert (OPARG *oap, long count1);
int op_change (OPARG *oap);
void init_yank (void);
int op_yank (OPARG *oap, int deleting, int mess);
void do_put (int regname, int dir, long count, int flags);
int get_register_name (int num);
void do_dis (char_u *arg);
void dis_msg (char_u *p, int skip_esc);
void do_do_join (long count, int insert_space, int redraw);
int do_join (int insert_space, int redraw);
void op_format (OPARG *oap);
int do_addsub (int command, linenr_t Prenum1);
int read_viminfo_register (char_u *line, FILE *fp, int force);
void write_viminfo_registers (FILE *fp);
void clip_free_selection (void);
void clip_get_selection (void);
void clip_yank_selection (int type, char_u *str, long len);
int clip_convert_selection (char_u **str, long_u *len);
char_u *get_reg_contents (int regname);
void write_reg_contents (int name, char_u *str);
void clear_oparg (OPARG *oap);
# 100 "proto.h" 2
# 1 "proto/option.pro" 1

void set_init_1 (void);
void set_string_default (char *name, char_u *val);
void set_number_default (char *name, long val);
void set_init_2 (void);
void set_init_3 (void);
void init_gui_options (void);
void set_title_defaults (void);
int do_set (char_u *arg, int modeline);
void set_options_bin (int oldval, int newval);
int get_viminfo_parameter (int type);
char_u *find_viminfo_parameter (int type);
void check_options (void);
void check_buf_options (BUF *buf);
void free_string_option (char_u *p);
void set_term_option_alloced (char_u **p);
void set_string_option_direct (char_u *name, int opt_idx, char_u *val, int dofree);
char_u *check_stl_option (char_u *s);
int get_option_value (char_u *name, long *numval, char_u **stringval);
void set_option_value (char_u *name, long number, char_u *string);
char_u *get_term_code (char_u *tname);
char_u *get_highlight_default (void);
int makeset (FILE *fd);
void clear_termoptions (void);
void set_term_defaults (void);
void comp_col (void);
void win_copy_options (WIN *wp_from, WIN *wp_to);
void buf_copy_options (BUF *bp_from, BUF *bp_to, int flags);
void set_context_in_set_cmd (char_u *arg);
int ExpandSettings (vim_regexp *prog, int *num_file, char_u ***file);
int ExpandOldSetting (int *num_file, char_u ***file);
int has_format_option (int x);
int shortmess (int x);
void vimrc_found (void);
void change_compatible (int on);
int option_was_set (char_u *name);
int can_bs (int what);
# 101 "proto.h" 2
# 1 "proto/quickfix.pro" 1

int qf_init (char_u *efile, char_u *errorformat);
void qf_jump (int dir, int errornr, int forceit);
void qf_list (char_u *arg, int all);
void qf_older (int count);
void qf_newer (int count);
void qf_mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
# 102 "proto.h" 2
# 1 "proto/regexp.pro" 1

char_u *skip_regexp (char_u *p, int dirc, int magic);
vim_regexp *vim_regcomp (char_u *expr, int magic);
int vim_regcomp_had_eol (void);
int vim_regexec (vim_regexp *prog, char_u *string, int at_bol);
char_u *regtilde (char_u *source, int magic);
void vim_regnewptr (vim_regexp *prog, char_u *old_ptr, char_u *new_ptr);
int vim_regsub (vim_regexp *prog, char_u *source, char_u *dest, int copy, int magic);
# 103 "proto.h" 2
# 1 "proto/screen.pro" 1

void update_screenline (void);
void redraw_later (int type);
void redraw_all_later (int type);
void redraw_curbuf_later (int type);
void update_curbuf (int type);
void update_screen (int type);
void updateWindow (WIN *wp);
void update_other_win (void);
void status_redraw_all (void);
void redraw_statuslines (void);
void win_redr_status_matches (int num_matches, char_u **matches, int match);
void win_redr_status (WIN *wp);
int build_stl_str (WIN *wp, char_u *out, char_u *fmt, int fillchar, int maxlen);
void screen_putchar (int c, int row, int col, int attr);
void screen_puts (char_u *text, int row, int col, int attr);
void screen_start (void);
void screen_down (void);
void screen_stop_highlight (void);
void reset_cterm_colors (void);
void screen_fill (int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr);
void screenalloc (int clear);
void screenclear (void);
void update_topline_redraw (void);
void update_topline (void);
void update_curswant (void);
void windgoto (int row, int col);
void setcursor (void);
void scroll_cursor_top (int min_scroll, int always);
void scroll_cursor_bot (int min_scroll, int set_topbot);
void scroll_cursor_halfway (int atend);
void cursor_correct (void);
void changed_cline_bef_curs (void);
void changed_line_abv_curs (void);
void set_topline (WIN *wp, linenr_t lnum);
void validate_botline (void);
void invalidate_botline (void);
void invalidate_botline_win (WIN *wp);
void approximate_botline (void);
int botline_approximated (void);
int cursor_valid (void);
void validate_cursor (void);
void validate_cline_row (void);
int may_validate_crow (void);
void validate_virtcol (void);
void validate_cheight (void);
void validate_cursor_col (void);
void curs_columns (int scroll);
void scrolldown (long line_count);
void scrollup (long line_count);
void scrolldown_clamp (void);
void scrollup_clamp (void);
int win_ins_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
int win_del_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
void win_rest_invalid (WIN *wp);
int screen_del_lines (int off, int row, int line_count, int end, int force);
int showmode (void);
void unshowmode (int force);
void showruler (int always);
void check_for_delay (int check_msg_scroll);
int screen_valid (int clear);
int jump_to_mouse (int flags, int *inclusive);
int get_fpos_of_mouse (FPOS *mpos, WIN **mwin);
int redrawing (void);
int messaging (void);
int onepage (int dir, long count);
void halfpage (int flag, linenr_t Prenum);
void do_intro (void);
# 104 "proto.h" 2
# 1 "proto/search.pro" 1

vim_regexp *search_regcomp (char_u *pat, int pat_save, int pat_use, int options);
char_u *get_search_pat (void);
void save_search_patterns (void);
void restore_search_patterns (void);
void set_reg_ic (char_u *pat);
char_u *last_search_pat (void);
void set_last_search_pat (char_u *s, int idx, int magic, int setlast);
vim_regexp *last_pat_prog (void);
int searchit (BUF *buf, FPOS *pos, int dir, char_u *str, long count, int options, int pat_use);
int do_search (OPARG *oap, int dirc, char_u *str, long count, int options);
int search_for_exact_line (BUF *buf, FPOS *pos, int dir, char_u *pat);
int searchc (int c, int dir, int type, long count);
FPOS *findmatch (OPARG *oap, int initc);
FPOS *findmatchlimit (OPARG *oap, int initc, int flags, int maxtravel);
void showmatch (void);
int findsent (int dir, long count);
int findpar (OPARG *oap, int dir, long count, int what, int both);
int startPS (linenr_t lnum, int para, int both);
int fwd_word (long count, int type, int eol);
int bck_word (long count, int type, int stop);
int end_word (long count, int type, int stop, int empty);
int bckend_word (long count, int type, int eol);
int current_word (OPARG *oap, long count, int include, int type);
int current_sent (OPARG *oap, long count, int include);
int current_block (OPARG *oap, long count, int include, int what, int other);
int current_par (OPARG *oap, long count, int include, int type);
int linewhite (linenr_t lnum);
void find_pattern_in_path (char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_t start_lnum, linenr_t end_lnum);
int read_viminfo_search_pattern (char_u *line, FILE *fp, int force);
void write_viminfo_search_pattern (FILE *fp);
# 105 "proto.h" 2
# 1 "proto/syntax.pro" 1

void syntax_start (WIN *wp, linenr_t lnum);
void syn_changed (linenr_t lnum);
int syntax_check_changed (linenr_t lnum);
int get_syntax_attr (colnr_t col, char_u *line);
void syntax_clear (BUF *buf);
void do_syntax (EXARG *eap, char_u **cmdlinep);
int syntax_present (BUF *buf);
void set_context_in_syntax_cmd (char_u *arg);
char_u *get_syntax_name (int idx);
int syn_get_id (long line, long col, int trans);
void init_highlight (int both);
void do_highlight (char_u *line, int forceit, int init);
void set_normal_colors (void);
void hl_set_font_name (char_u *font_name);
void hl_set_bg_color_name (char_u *name);
void hl_set_fg_color_name (char_u *name);
struct attr_entry *syn_gui_attr2entry (int attr);
struct attr_entry *syn_term_attr2entry (int attr);
struct attr_entry *syn_cterm_attr2entry (int attr);
char_u *highlight_has_attr (int id, int flag, int modec);
char_u *highlight_color (int id, char_u *what, int modec);
int syn_name2id (char_u *name);
int highlight_exists (char_u *name);
int syn_check_group (char_u *pp, int len);
int syn_id2attr (int hl_id);
int syn_id2colors (int hl_id, int *fgp, int *bgp);
int syn_get_final_id (int hl_id);
void highlight_gui_started (void);
int highlight_changed (void);
void set_context_in_highlight_cmd (char_u *arg);
char_u *get_highlight_name (int idx);
void free_highlight_fonts (void);
# 106 "proto.h" 2
# 1 "proto/tag.pro" 1

int do_tag (char_u *tag, int type, int count, int forceit, int verbose);
void tag_freematch (void);
void do_tags (void);
int find_tags (char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount);
void simplify_filename (char_u *filename);
int expand_tags (int tagnames, char_u *pat, int *num_file, char_u ***file);
# 107 "proto.h" 2
# 1 "proto/term.pro" 1

int set_termname (char_u *term);
void set_mouse_termcode (int n, char_u *s);
void del_mouse_termcode (int n);
void getlinecol (void);
int add_termcap_entry (char_u *name, int force);
int term_is_8bit (char_u *name);
int term_is_gui (char_u *name);
char_u *tltoa (unsigned long i);
void termcapinit (char_u *name);
void out_flush (void) __attribute((crest_skip));
void out_trash (void);
void out_char (unsigned c);
void out_str_nf (char_u *s);
void out_str (char_u *s);
void term_windgoto (int row, int col);
void term_cursor_right (int i);
void term_append_lines (int line_count);
void term_delete_lines (int line_count);
void term_set_winpos (int x, int y);
void term_set_winsize (int width, int height);
void term_fg_color (int n);
void term_bg_color (int n);
void term_settitle (char_u *title);
void ttest (int pairs);
void add_long_to_buf (long_u val, char_u *dst);
int get_long_from_buf (char_u *buf, long_u *val);
void check_winsize (void);
void set_winsize (int width, int height, int mustset);
void settmode (int tmode);
void starttermcap (void);
void stoptermcap (void);
int swapping_screen (void);
void setmouse (void);
int mouse_has (int c);
int mouse_model_popup (void);
void scroll_start (void);
void cursor_on (void);
void cursor_off (void);
void scroll_region_set (WIN *wp, int off);
void scroll_region_reset (void);
void clear_termcodes (void);
void add_termcode (char_u *name, char_u *string, int use_8bit);
char_u *find_termcode (char_u *name);
char_u *get_termcode (int i);
void del_termcode (char_u *name);
int check_termcode (int max_offset, char_u *buf, int buflen);
char_u *replace_termcodes (char_u *from, char_u **bufp, int from_part, int do_lt);
int find_term_bykeys (char_u *src);
void show_termcodes (void);
int show_one_termcode (char_u *name, char_u *code, int printit);
char_u *translate_mapping (char_u *str, int expmap);
void update_tcap (int attr);
# 108 "proto.h" 2



# 1 "proto/ui.pro" 1

void ui_write (char_u *s, int len) __attribute((crest_skip));
void ui_inchar_undo (char_u *s, int len);
int ui_inchar (char_u *buf, int maxlen, long wtime);
int ui_char_avail (void);
void ui_delay (long msec, int ignoreinput);
void ui_suspend (void);
void suspend_shell (void);
int ui_get_winsize (void);
void ui_set_winsize (void);
void ui_breakcheck (void);
void clip_init (int can_use);
void clip_update_selection (void);
void clip_own_selection (void);
void clip_lose_selection (void);
void clip_copy_selection (void);
void clip_auto_select (void);
int clip_isautosel (void);
void clip_start_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_process_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_redraw_selection (int x, int y, int w, int h);
void clip_may_redraw_selection (int row, int col);
void clip_clear_selection (void);
void clip_may_clear_selection (int row1, int row2);
void clip_scroll_selection (int rows);
int clip_gen_own_selection (void);
void clip_gen_lose_selection (void);
void clip_gen_set_selection (void);
void clip_gen_request_selection (void);
int vim_is_input_buf_full (void);
int vim_is_input_buf_empty (void);
int vim_free_in_input_buf (void);
int vim_used_in_input_buf (void);
void add_to_input_buf (char_u *s, int len);
void push_raw_key (char_u *s, int len);
void trash_input_buf (void);
int read_from_input_buf (char_u *buf, long maxlen);
void fill_input_buf (int exit_on_error);
void read_error_exit (void);
void ui_cursor_shape (void);
int check_col (int col);
int check_row (int row);
void open_app_context (void);
void x11_setup_atoms (int *dpy);
void clip_x11_request_selection (int myShell, int *dpy);
void clip_x11_lose_selection (int myShell);
int clip_x11_own_selection (int myShell);
void clip_x11_set_selection (void);
# 112 "proto.h" 2
# 1 "proto/undo.pro" 1

int u_save_cursor (void);
int u_save (linenr_t top, linenr_t bot);
int u_savesub (linenr_t lnum);
int u_inssub (linenr_t lnum);
int u_savedel (linenr_t lnum, long nlines);
void u_undo (int count);
void u_redo (int count);
void u_sync (void);
void u_unchanged (BUF *buf);
void u_clearall (BUF *buf);
void u_saveline (linenr_t lnum);
void u_clearline (void);
void u_undoline (void);
void u_blockfree (BUF *buf);
int buf_changed (BUF *buf);
int curbuf_changed (void);
# 113 "proto.h" 2
# 1 "proto/version.pro" 1

void make_version (void);
int highest_patch (void);
void do_version (char_u *arg);
void list_version (void);
# 114 "proto.h" 2
# 1 "proto/window.pro" 1

void do_window (int nchar, long Prenum);
int win_split (int new_height, int redraw, int req_room);
int win_valid (WIN *win);
int win_count (void);
int make_windows (int count);
void win_move_after (WIN *win1, WIN *win2);
void win_equal (WIN *next_curwin, int redraw);
void close_windows (BUF *buf);
void close_window (WIN *win, int free_buf);
void close_others (int message, int forceit);
void win_init (WIN *wp);
WIN *win_goto_nr (int winnr);
void win_enter (WIN *wp, int undo_sync);
WIN *buf_jump_open_win (BUF *buf);
WIN *win_alloc (WIN *after);
void win_free (WIN *wp);
int win_alloc_lsize (WIN *wp);
void win_free_lsize (WIN *wp);
void screen_new_rows (void);
void win_setheight (int height);
void win_setminheight (void);
void win_drag_status_line (int offset);
void win_comp_scroll (WIN *wp);
void command_height (long old_p_ch);
void last_status (void);
char_u *file_name_at_cursor (int options, long count);
char_u *get_file_name_in_path (char_u *line, int col, int options, long count);
char_u *find_file_in_path (char_u *ptr, int len, int options, long count);
int min_rows (void);
int only_one_window (void);
void check_lnums (int do_curwin);
# 115 "proto.h" 2
# 1023 "vim.h" 2
# 34 "option.c" 2

struct vimoption
{
    char *fullname;
    char *shortname;
    short_u flags;
    char_u *var;
    char_u *def_val[2];
};
# 79 "option.c"
enum indirect_options
{
    PV_AI = 1,
    PV_BIN,
    PV_CIN,
    PV_CINK,
    PV_CINO,
    PV_CINW,
    PV_COM,
    PV_CPT,
    PV_EOL,
    PV_ET,
    PV_FE,
    PV_FF,
    PV_FO,
    PV_FT,
    PV_INF,
    PV_ISK,
    PV_KEY,
    PV_LBR,
    PV_LISP,
    PV_LIST,
    PV_ML,
    PV_MPS,
    PV_MOD,
    PV_NF,
    PV_NU,
    PV_OFT,
    PV_RL,
    PV_RO,
    PV_SCROLL,
    PV_SI,
    PV_SN,
    PV_STS,
    PV_SWF,
    PV_SYN,
    PV_SCBIND,
    PV_SW,
    PV_TS,
    PV_TW,
    PV_TX,
    PV_WM,
    PV_WRAP
};
# 132 "option.c"
static struct vimoption options[] =
{
    {"aleph", "al", 0x02|0x400,



       (char_u *)
# 138 "option.c" 3 4
                ((void *)0)
# 138 "option.c"
                    ,

       {



       (char_u *)224L,

         (char_u *)0L}},
    {"allowrevins", "ari", 0x01|0x400|0x800,



       (char_u *)
# 151 "option.c" 3 4
                ((void *)0)
# 151 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"altkeymap", "akm", 0x01|0x400,



       (char_u *)
# 158 "option.c" 3 4
                ((void *)0)
# 158 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"autoindent", "ai", 0x01|0x20|0x400,
       (char_u *)PV_AI,
       {(char_u *)0, (char_u *)0L}},
    {"autoprint", "ap", 0x01|0x400,
       (char_u *)
# 165 "option.c" 3 4
                ((void *)0)
# 165 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"autowrite", "aw", 0x01|0x400,
       (char_u *)&p_aw,
       {(char_u *)0, (char_u *)0L}},
    {"background", "bg", 0x04|0x400|0x7000,
       (char_u *)&p_bg,
       {



       (char_u *)"light",

         (char_u *)0L}},
    {"backspace", "bs", 0x04|0x400|0x800|0x8000,
       (char_u *)&p_bs,
       {(char_u *)"", (char_u *)0L}},
    {"backup", "bk", 0x01|0x400|0x800,
       (char_u *)&p_bk,
       {(char_u *)0, (char_u *)0L}},
    {"backupdir", "bdir", 0x04|0x10|0x400|0x8000,
       (char_u *)&p_bdir,
       {(char_u *)".,~/tmp,~/", (char_u *)0L}},
    {"backupext", "bex", 0x04|0x400,
       (char_u *)&p_bex,
       {



       (char_u *)"~",

         (char_u *)0L}},
    {"beautify", "bf", 0x01|0x400,
       (char_u *)
# 198 "option.c" 3 4
                ((void *)0)
# 198 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"binary", "bin", 0x01|0x20|0x400|0x1000,
       (char_u *)PV_BIN,
       {(char_u *)0, (char_u *)0L}},
    {"bioskey", "biosk",0x01|0x400,



       (char_u *)
# 207 "option.c" 3 4
                ((void *)0)
# 207 "option.c"
                    ,

       {(char_u *)1, (char_u *)0L}},
    {"breakat", "brk", 0x04|0x400|0x4000,

       (char_u *)&p_breakat,
       {(char_u *)" \t!@*-+_;:,./?", (char_u *)0L}




       },
    {"browsedir", "bsdir",0x04|0x400,



       (char_u *)
# 223 "option.c" 3 4
                ((void *)0)
# 223 "option.c"
                    ,

       {(char_u *)"last", (char_u *)0L}},
    {"cindent", "cin", 0x01|0x20|0x400|0x800,

       (char_u *)PV_CIN,



       {(char_u *)0, (char_u *)0L}},
    {"cinkeys", "cink", 0x04|0x20|0x08|0x400|0x8000,

       (char_u *)PV_CINK,
       {(char_u *)"0{,0},:,0#,!^F,o,O,e", (char_u *)0L}




       },
    {"cinoptions", "cino", 0x04|0x20|0x08|0x400|0x8000,

       (char_u *)PV_CINO,



       {(char_u *)"", (char_u *)0L}},
    {"cinwords", "cinw", 0x04|0x20|0x08|0x400|0x8000,

       (char_u *)PV_CINW,
       {(char_u *)"if,else,while,do,for,switch",
    (char_u *)0L}




       },
    {"clipboard", "cb", 0x04|0x400|0x8000,



       (char_u *)
# 263 "option.c" 3 4
                ((void *)0)
# 263 "option.c"
                    ,

                            {(char_u *)"", (char_u *)0L}},
    {"cmdheight", "ch", 0x02|0x400|0x4000,
       (char_u *)&p_ch,
       {(char_u *)1L, (char_u *)0L}},
    {"columns", "co", 0x02|0x40|0x200|0x400|0x7000,
       (char_u *)&Columns,
       {(char_u *)80L, (char_u *)0L}},
    {"comments", "com", 0x04|0x20|0x08|0x400|0x8000,

       (char_u *)PV_COM,
       {(char_u *)"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-",




    (char_u *)0L}},
    {"compatible", "cp", 0x01|0x4000,
       (char_u *)&p_cp,
       {(char_u *)1, (char_u *)0}},
    {"complete", "cpt", 0x04|0x20|0x08|0x400|0x8000,

       (char_u *)PV_CPT,
       {(char_u *)".,w,b,u,t,i", (char_u *)0L}




       },
    {"confirm", "cf", 0x01|0x400,

       (char_u *)&p_confirm,



       {(char_u *)0, (char_u *)0L}},
    {"conskey", "consk",0x01|0x400,



       (char_u *)
# 304 "option.c" 3 4
                ((void *)0)
# 304 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"cpoptions", "cpo", 0x04|0x800|0x4000,
       (char_u *)&p_cpo,
       {(char_u *)"aAbBcCdeEfFjJkKlLmoOprsStuwWxy$!%*<", (char_u *)"aABceFs"}},
    {"cscopeprg", "csprg", 0x04|0x10|0x400,




       (char_u *)
# 315 "option.c" 3 4
                ((void *)0)
# 315 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}

       },
    {"cscopetag", "cst", 0x01|0x400|0x800,



       (char_u *)
# 323 "option.c" 3 4
                ((void *)0)
# 323 "option.c"
                    ,

       {(char_u *)0L, (char_u *)0L}},
    {"cscopetagorder", "csto", 0x02|0x400|0x800,



       (char_u *)
# 330 "option.c" 3 4
                ((void *)0)
# 330 "option.c"
                    ,

       {(char_u *)0L, (char_u *)0L}},
    {"cscopeverbose", "csverb", 0x01|0x400|0x800,



       (char_u *)
# 337 "option.c" 3 4
                ((void *)0)
# 337 "option.c"
                    ,

       {(char_u *)0L, (char_u *)0L}},
    {"define", "def", 0x04|0x400,
       (char_u *)&p_def,
       {(char_u *)"^#\\s*define", (char_u *)0L}},
    {"dictionary", "dict", 0x04|0x10|0x400|0x8000,

       (char_u *)&p_dict,



       {(char_u *)"", (char_u *)0L}},
    {"digraph", "dg", 0x01|0x400|0x800,

       (char_u *)&p_dg,



       {(char_u *)0, (char_u *)0L}},
    {"directory", "dir", 0x04|0x10|0x400|0x8000,
       (char_u *)&p_dir,
       {(char_u *)".,~/tmp,/var/tmp,/tmp", (char_u *)0L}},
    {"display", "dy", 0x04|0x400|0x8000|0x4000,
       (char_u *)&p_dy,
       {(char_u *)"", (char_u *)0L}},
    {"edcompatible","ed", 0x01|0x400,
       (char_u *)&p_ed,
       {(char_u *)0, (char_u *)0L}},
    {"endofline", "eol", 0x01|0x20|0x200|0x400|0x1000,
       (char_u *)PV_EOL,
       {(char_u *)1, (char_u *)0L}},
    {"equalalways", "ea", 0x01|0x400|0x4000,
       (char_u *)&p_ea,
       {(char_u *)1, (char_u *)0L}},
    {"equalprg", "ep", 0x04|0x10|0x400,
       (char_u *)&p_ep,
       {(char_u *)"", (char_u *)0L}},
    {"errorbells", "eb", 0x01|0x400,
       (char_u *)&p_eb,
       {(char_u *)0, (char_u *)0L}},
    {"errorfile", "ef", 0x04|0x10|0x400,

       (char_u *)&p_ef,
       {(char_u *)"errors.err", (char_u *)0L}




       },
    {"errorformat", "efm", 0x04|0x400|0x8000,

       (char_u *)&p_efm,
       {(char_u *)"%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory `%f',%X%*\\a[%*\\d]: Leaving directory `%f',%DMaking %*\\a in %f", (char_u *)0L},




       },
    {"esckeys", "ek", 0x01|0x800,
       (char_u *)&p_ek,
       {(char_u *)0, (char_u *)1}},
    {"eventignore", "ei", 0x04|0x400|0x8000,

       (char_u *)&p_ei,



       {(char_u *)"", (char_u *)0L}},
    {"expandtab", "et", 0x01|0x20|0x400|0x800,
       (char_u *)PV_ET,
       {(char_u *)0, (char_u *)0L}},
    {"exrc", "ex", 0x01|0x400,
       (char_u *)&p_exrc,
       {(char_u *)0, (char_u *)0L}},
    {"fileencoding", "fe", 0x04|0x20|0x08|0x400|0x1000,




       (char_u *)
# 417 "option.c" 3 4
                ((void *)0)
# 417 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}

       },
    {"fileformat", "ff", 0x04|0x20|0x08|0x400|0x1000|0x200,
       (char_u *)PV_FF,
       {(char_u *)"unix", (char_u *)0L}},
    {"fileformats", "ffs", 0x04|0x800|0x8000,
       (char_u *)&p_ffs,
       {(char_u *)"", (char_u *)"unix,dos"}},
    {"filetype", "ft", 0x04|0x20|0x08|0x400,

       (char_u *)PV_FT,
       {(char_u *)"", (char_u *)0L}




       },
    {"fkmap", "fk", 0x01|0x400,



       (char_u *)
# 440 "option.c" 3 4
                ((void *)0)
# 440 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"flash", "fl", 0x01|0x400,
       (char_u *)
# 444 "option.c" 3 4
                ((void *)0)
# 444 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"formatoptions","fo", 0x04|0x20|0x08|0x800,
       (char_u *)PV_FO,
       {(char_u *)"vt", (char_u *)"tcq"}},
    {"formatprg", "fp", 0x04|0x10|0x400,
       (char_u *)&p_fp,
       {(char_u *)"", (char_u *)0L}},
    {"gdefault", "gd", 0x01|0x400|0x800,
       (char_u *)&p_gd,
       {(char_u *)0, (char_u *)0L}},
    {"graphic", "gr", 0x01|0x400,
       (char_u *)
# 456 "option.c" 3 4
                ((void *)0)
# 456 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"grepformat", "gfm", 0x04|0x400|0x8000,

       (char_u *)&p_gefm,
       {(char_u *)"%f:%l%m,%f  %l%m", (char_u *)0L},




       },
    {"grepprg", "gp", 0x04|0x10|0x400,

       (char_u *)&p_gp,
       {




       (char_u *)"grep -n",

       (char_u *)0L},




       },
    {"guicursor", "gcr", 0x04|0x400|0x8000,
# 494 "option.c"
       (char_u *)
# 494 "option.c" 3 4
                ((void *)0)
# 494 "option.c"
                    ,
       {(char_u *)
# 495 "option.c" 3 4
                 ((void *)0)
# 495 "option.c"
                     , (char_u *)0L}

        },
    {"guifont", "gfn", 0x04|0x400|0x7000|0x8000,




       (char_u *)
# 503 "option.c" 3 4
                ((void *)0)
# 503 "option.c"
                    ,
       {(char_u *)
# 504 "option.c" 3 4
                 ((void *)0)
# 504 "option.c"
                     , (char_u *)0L}

        },
    {"guifontset", "gfs", 0x04|0x400|0x7000|0x8000,




       (char_u *)
# 512 "option.c" 3 4
                ((void *)0)
# 512 "option.c"
                    ,
       {(char_u *)
# 513 "option.c" 3 4
                 ((void *)0)
# 513 "option.c"
                     , (char_u *)0L}

        },
    {"guiheadroom", "ghr", 0x02|0x400,



       (char_u *)
# 520 "option.c" 3 4
                ((void *)0)
# 520 "option.c"
                    ,

       {(char_u *)50L, (char_u *)0L}},
    {"guioptions", "go", 0x04|0x400|0x4000,
# 536 "option.c"
       (char_u *)
# 536 "option.c" 3 4
                ((void *)0)
# 536 "option.c"
                    ,
       {(char_u *)
# 537 "option.c" 3 4
                 ((void *)0)
# 537 "option.c"
                     , (char_u *)0L}

        },
    {"guipty", 
# 540 "option.c" 3 4
                  ((void *)0)
# 540 "option.c"
                      , 0x01|0x400,



       (char_u *)
# 544 "option.c" 3 4
                ((void *)0)
# 544 "option.c"
                    ,

       {(char_u *)1, (char_u *)0L}},
    {"hardtabs", "ht", 0x02|0x400,
       (char_u *)
# 548 "option.c" 3 4
                ((void *)0)
# 548 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}},
    {"helpfile", "hf", 0x04|0x10|0x400,
       (char_u *)&p_hf,
       {(char_u *)"$VIMRUNTIME/doc/help.txt", (char_u *)0L}},
    {"helpheight", "hh", 0x02|0x400,
       (char_u *)&p_hh,
       {(char_u *)20L, (char_u *)0L}},
    {"hidden", "hid", 0x01|0x400,
       (char_u *)&p_hid,
       {(char_u *)0, (char_u *)0L}},
    {"highlight", "hl", 0x04|0x400|0x7000|0x8000,
       (char_u *)&p_hl,
       {(char_u *)"8:SpecialKey,@:NonText,d:Directory,e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,r:Question,s:StatusLine,S:StatusLineNC,t:Title,v:Visual,V:VisualNOS,w:WarningMsg,W:WildMenu",
    (char_u *)0L}},
    {"history", "hi", 0x02|0x800,
       (char_u *)&p_hi,
       {(char_u *)0L, (char_u *)20L}},
    {"hkmap", "hk", 0x01|0x400|0x800,



       (char_u *)
# 570 "option.c" 3 4
                ((void *)0)
# 570 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"hkmapp", "hkp", 0x01|0x400|0x800,



       (char_u *)
# 577 "option.c" 3 4
                ((void *)0)
# 577 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"hlsearch", "hls", 0x01|0x400|0x800|0x4000,
       (char_u *)&p_hls,
       {(char_u *)0, (char_u *)0L}},
    {"icon", 
# 583 "option.c" 3 4
                ((void *)0)
# 583 "option.c"
                    , 0x01|0x400,

       (char_u *)&p_icon,



       {(char_u *)0, (char_u *)0L}},
    {"iconstring", 
# 590 "option.c" 3 4
                   ((void *)0)
# 590 "option.c"
                       , 0x04|0x400,

       (char_u *)&p_iconstring,



       {(char_u *)"", (char_u *)0L}},
    {"ignorecase", "ic", 0x01|0x400,
       (char_u *)&p_ic,
       {(char_u *)0, (char_u *)0L}},
    {"include", "inc", 0x04|0x400,
       (char_u *)&p_inc,
       {(char_u *)"^#\\s*include", (char_u *)0L}},
    {"incsearch", "is", 0x01|0x400|0x800,
       (char_u *)&p_is,
       {(char_u *)0, (char_u *)0L}},
    {"infercase", "inf", 0x01|0x20|0x400,
       (char_u *)PV_INF,
       {(char_u *)0, (char_u *)0L}},
    {"insertmode", "im", 0x01|0x400|0x800,
       (char_u *)&p_im,
       {(char_u *)0, (char_u *)0L}},
    {"isfname", "isf", 0x04|0x400|0x8000,
       (char_u *)&p_isf,
       {






       (char_u *)"@,48-57,/,.,-,_,+,,,$,~",


    (char_u *)0L}},
    {"isident", "isi", 0x04|0x400|0x8000,
       (char_u *)&p_isi,
       {



       (char_u *)"@,48-57,_,192-255",

    (char_u *)0L}},
    {"iskeyword", "isk", 0x04|0x20|0x08|0x800|0x8000,
       (char_u *)PV_ISK,
       {(char_u *)"@,48-57,_",



    (char_u *)"@,48-57,_,192-255"

    }},
    {"isprint", "isp", 0x04|0x400|0x4000|0x8000,
       (char_u *)&p_isp,
       {



       (char_u *)"@,161-255",

    (char_u *)0L}},
    {"joinspaces", "js", 0x01|0x400|0x800,
       (char_u *)&p_js,
       {(char_u *)1, (char_u *)0L}},
    {"key", 
# 655 "option.c" 3 4
               ((void *)0)
# 655 "option.c"
                   , 0x04|0x20|0x08|0x400|0x200,

       (char_u *)PV_KEY,
       {(char_u *)"", (char_u *)0L}




       },
    {"keymodel", "km", 0x04|0x400|0x8000,
       (char_u *)&p_km,
       {(char_u *)"", (char_u *)0L}},
    {"keywordprg", "kp", 0x04|0x10|0x400,
       (char_u *)&p_kp,
       {
# 680 "option.c"
       (char_u *)"man -s",






    (char_u *)0L}},
    {"langmap", "lmap", 0x04|0x400|0x8000,




       (char_u *)
# 693 "option.c" 3 4
                ((void *)0)
# 693 "option.c"
                    ,
       {(char_u *)
# 694 "option.c" 3 4
                 ((void *)0)
# 694 "option.c"
                     ,

    (char_u *)0L}},
    {"laststatus", "ls", 0x02|0x400|0x4000,
       (char_u *)&p_ls,
       {(char_u *)1L, (char_u *)0L}},
    {"lazyredraw", "lz", 0x01|0x400,
       (char_u *)&p_lz,
       {(char_u *)0, (char_u *)0L}},
    {"linebreak", "lbr", 0x01|0x20|0x400|0x2000,

       (char_u *)PV_LBR,



       {(char_u *)0, (char_u *)0L}},
    {"lines", 
# 710 "option.c" 3 4
                 ((void *)0)
# 710 "option.c"
                     , 0x02|0x40|0x200|0x400|0x7000,
       (char_u *)&Rows,
       {



       (char_u *)24L,

         (char_u *)0L}},
    {"lisp", 
# 719 "option.c" 3 4
                ((void *)0)
# 719 "option.c"
                    , 0x01|0x20|0x400,
       (char_u *)PV_LISP,
       {(char_u *)0, (char_u *)0L}},
    {"list", 
# 722 "option.c" 3 4
                ((void *)0)
# 722 "option.c"
                    , 0x01|0x20|0x400|0x2000,
       (char_u *)PV_LIST,
       {(char_u *)0, (char_u *)0L}},
    {"listchars", "lcs", 0x04|0x400|0x4000|0x8000,
       (char_u *)&p_lcs,
       {(char_u *)"eol:$", (char_u *)0L}},
    {"magic", 
# 728 "option.c" 3 4
                 ((void *)0)
# 728 "option.c"
                     , 0x01|0x400,
       (char_u *)&p_magic,
       {(char_u *)1, (char_u *)0L}},
    {"makeef", "mef", 0x04|0x10|0x400,

       (char_u *)&p_mef,
       {(char_u *)"/tmp/vim##.err", (char_u *)0L}




       },
    {"makeprg", "mp", 0x04|0x10|0x400,

       (char_u *)&p_mp,
       {(char_u *)"make", (char_u *)0L}




       },
    {"matchpairs", "mps", 0x04|0x20|0x08|0x400|0x8000,
       (char_u *)PV_MPS,
       {(char_u *)"(:),{:},[:]", (char_u *)0L}},
    {"matchtime", "mat", 0x02|0x400,
       (char_u *)&p_mat,
       {(char_u *)5L, (char_u *)0L}},
    {"maxfuncdepth", "mfd", 0x02|0x400,

       (char_u *)&p_mfd,



       {(char_u *)100L, (char_u *)0L}},
    {"maxmapdepth", "mmd", 0x02|0x400,
       (char_u *)&p_mmd,
       {(char_u *)1000L, (char_u *)0L}},
    {"maxmem", "mm", 0x02|0x400,
       (char_u *)&p_mm,
       {(char_u *)(5*1024), (char_u *)0L}},
    {"maxmemtot", "mmt", 0x02|0x400,
       (char_u *)&p_mmt,
       {(char_u *)(10*1024), (char_u *)0L}},
    {"mesg", 
# 771 "option.c" 3 4
                ((void *)0)
# 771 "option.c"
                    , 0x01|0x400,
       (char_u *)
# 772 "option.c" 3 4
                ((void *)0)
# 772 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"modeline", "ml", 0x01|0x20|0x800,
       (char_u *)PV_ML,
       {(char_u *)0, (char_u *)1}},
    {"modelines", "mls", 0x02|0x400,
       (char_u *)&p_mls,
       {(char_u *)5L, (char_u *)0L}},
    {"modified", "mod", 0x01|0x20|0x200|0x400|0x1000,
       (char_u *)PV_MOD,
       {(char_u *)0, (char_u *)0L}},
    {"more", 
# 783 "option.c" 3 4
                ((void *)0)
# 783 "option.c"
                    , 0x01|0x800,
       (char_u *)&p_more,
       {(char_u *)0, (char_u *)1}},
    {"mouse", 
# 786 "option.c" 3 4
                 ((void *)0)
# 786 "option.c"
                     , 0x04|0x400,
       (char_u *)&p_mouse,
       {



    (char_u *)"",

    (char_u *)0L}},
    {"mousefocus", "mousef", 0x01|0x400,



       (char_u *)
# 799 "option.c" 3 4
                ((void *)0)
# 799 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"mousehide", "mh", 0x01|0x400,



       (char_u *)
# 806 "option.c" 3 4
                ((void *)0)
# 806 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"mousemodel", "mousem", 0x04|0x400,
       (char_u *)&p_mousem,
       {






    (char_u *)"extend",


    (char_u *)0L}},
    {"mousetime", "mouset", 0x02|0x400,
       (char_u *)&p_mouset,
       {(char_u *)500L, (char_u *)0L}},
    {"novice", 
# 825 "option.c" 3 4
                  ((void *)0)
# 825 "option.c"
                      , 0x01|0x400,
       (char_u *)
# 826 "option.c" 3 4
                ((void *)0)
# 826 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"nrformats", "nf", 0x04|0x20|0x08|0x400|0x8000,
       (char_u *)PV_NF,
       {(char_u *)"octal,hex", (char_u *)0L}},
    {"number", "nu", 0x01|0x20|0x400|0x2000,
       (char_u *)PV_NU,
       {(char_u *)0, (char_u *)0L}},
    {"open", 
# 834 "option.c" 3 4
                ((void *)0)
# 834 "option.c"
                    , 0x01|0x400,
       (char_u *)
# 835 "option.c" 3 4
                ((void *)0)
# 835 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"optimize", "opt", 0x01|0x400,
       (char_u *)
# 838 "option.c" 3 4
                ((void *)0)
# 838 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"osfiletype", "oft", 0x04|0x20|0x08|0x400,




       (char_u *)
# 845 "option.c" 3 4
                ((void *)0)
# 845 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}

       },
    {"paragraphs", "para", 0x04|0x400,
       (char_u *)&p_para,
       {(char_u *)"IPLPPPQPP LIpplpipbp", (char_u *)0L}},
    {"paste", 
# 852 "option.c" 3 4
                 ((void *)0)
# 852 "option.c"
                     , 0x01|0x400,
       (char_u *)&p_paste,
       {(char_u *)0, (char_u *)0L}},
    {"pastetoggle", "pt", 0x04|0x400,
       (char_u *)&p_pt,
       {(char_u *)"", (char_u *)0L}},
    {"patchmode", "pm", 0x04|0x400,
       (char_u *)&p_pm,
       {(char_u *)"", (char_u *)0L}},
    {"path", "pa", 0x04|0x10|0x400|0x8000,
       (char_u *)&p_path,
       {






       (char_u *)".,/usr/include,,",


    (char_u *)0L}},
    {"previewheight", "pvh",0x02|0x400,
       (char_u *)&p_pvh,
       {(char_u *)12L, (char_u *)0L}},
    {"prompt", 
# 877 "option.c" 3 4
                  ((void *)0)
# 877 "option.c"
                      , 0x01|0x400,
       (char_u *)
# 878 "option.c" 3 4
                ((void *)0)
# 878 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"readonly", "ro", 0x01|0x20|0x400|0x1000,
       (char_u *)PV_RO,
       {(char_u *)0, (char_u *)0L}},
    {"redraw", 
# 883 "option.c" 3 4
                  ((void *)0)
# 883 "option.c"
                      , 0x01|0x400,
       (char_u *)
# 884 "option.c" 3 4
                ((void *)0)
# 884 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"remap", 
# 886 "option.c" 3 4
                 ((void *)0)
# 886 "option.c"
                     , 0x01|0x400,
       (char_u *)&p_remap,
       {(char_u *)1, (char_u *)0L}},
    {"report", 
# 889 "option.c" 3 4
                  ((void *)0)
# 889 "option.c"
                      , 0x02|0x400,
       (char_u *)&p_report,
       {(char_u *)2L, (char_u *)0L}},
    {"restorescreen", "rs", 0x01|0x400,



       (char_u *)
# 896 "option.c" 3 4
                ((void *)0)
# 896 "option.c"
                    ,

       {(char_u *)1, (char_u *)0L}},
    {"revins", "ri", 0x01|0x400|0x800,



       (char_u *)
# 903 "option.c" 3 4
                ((void *)0)
# 903 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"rightleft", "rl", 0x01|0x20|0x400|0x2000,



       (char_u *)
# 910 "option.c" 3 4
                ((void *)0)
# 910 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"ruler", "ru", 0x01|0x400|0x800|0x1000,

       (char_u *)&p_ru,



       {(char_u *)0, (char_u *)0L}},
    {"rulerformat", "ruf", 0x04|0x400|0x08|0x1000,

       (char_u *)&p_ruf,



       {(char_u *)"", (char_u *)0L}},
    {"scroll", "scr", 0x02|0x20|0x200|0x400,
       (char_u *)PV_SCROLL,
       {(char_u *)12L, (char_u *)0L}},
    {"scrollbind", "scb", 0x01|0x20|0x400,

       (char_u *)PV_SCBIND,



       {(char_u *)0, (char_u *)0L}},
    {"scrolljump", "sj", 0x02|0x400|0x800,
       (char_u *)&p_sj,
       {(char_u *)1L, (char_u *)0L}},
    {"scrolloff", "so", 0x02|0x400|0x800|0x4000,
       (char_u *)&p_so,
       {(char_u *)0L, (char_u *)0L}},
    {"scrollopt", "sbo", 0x04|0x400|0x8000,

       (char_u *)&p_sbo,



       {(char_u *)"ver,jump", (char_u *)0L}},
    {"sections", "sect", 0x04|0x400,
       (char_u *)&p_sections,
       {(char_u *)"SHNHH HUnhsh", (char_u *)0L}},
    {"secure", 
# 953 "option.c" 3 4
                  ((void *)0)
# 953 "option.c"
                      , 0x01|0x400,
       (char_u *)&p_secure,
       {(char_u *)0, (char_u *)0L}},
    {"selection", "sel", 0x04|0x400,
       (char_u *)&p_sel,
       {(char_u *)"inclusive", (char_u *)0L}},
    {"selectmode", "slm", 0x04|0x400|0x8000,
       (char_u *)&p_slm,
       {(char_u *)"", (char_u *)0L}},
    {"sessionoptions", "ssop", 0x04|0x400|0x8000,

       (char_u *)&p_sessopt,
       {(char_u *)"buffers,winsize,options,help,blank",
              (char_u *)0L}




       },
    {"shell", "sh", 0x04|0x10|0x400,
       (char_u *)&p_sh,
       {
# 993 "option.c"
       (char_u *)"sh",






    (char_u *)0L}},
    {"shellcmdflag","shcf", 0x04|0x400,
       (char_u *)&p_shcf,
       {






       (char_u *)"-c",


    (char_u *)0L}},
    {"shellpipe", "sp", 0x04|0x400,

       (char_u *)&p_sp,
       {




       (char_u *)"| tee",




    (char_u *)0L}




    },
    {"shellquote", "shq", 0x04|0x400,
       (char_u *)&p_shq,
       {(char_u *)"", (char_u *)0L}},
    {"shellredir", "srr", 0x04|0x400,
       (char_u *)&p_srr,
       {(char_u *)">", (char_u *)0L}},
    {"shellslash", "ssl", 0x01|0x400,



       (char_u *)
# 1043 "option.c" 3 4
                ((void *)0)
# 1043 "option.c"
                    ,

       {(char_u *)0, (char_u *)0L}},
    {"shelltype", "st", 0x02|0x400,



       (char_u *)
# 1050 "option.c" 3 4
                ((void *)0)
# 1050 "option.c"
                    ,

       {(char_u *)0L, (char_u *)0L}},
    {"shellxquote", "sxq", 0x04|0x400,
       (char_u *)&p_sxq,
       {



       (char_u *)"",

    (char_u *)0L}},
    {"shiftround", "sr", 0x01|0x400|0x800,
       (char_u *)&p_sr,
       {(char_u *)0, (char_u *)0L}},
    {"shiftwidth", "sw", 0x02|0x20|0x400,
       (char_u *)PV_SW,
       {(char_u *)8L, (char_u *)0L}},
    {"shortmess", "shm", 0x04|0x800,
       (char_u *)&p_shm,
       {(char_u *)"", (char_u *)"filnxtToO"}},
    {"shortname", "sn", 0x01|0x20|0x400,



       (char_u *)PV_SN,

       {(char_u *)0, (char_u *)0L}},
    {"showbreak", "sbr", 0x04|0x400|0x4000,

       (char_u *)&p_sbr,



       {(char_u *)"", (char_u *)0L}},
    {"showcmd", "sc", 0x01|0x800,

       (char_u *)&p_sc,



       {(char_u *)0,

    (char_u *)0



    }},
    {"showfulltag", "sft", 0x01|0x400,
       (char_u *)&p_sft,
       {(char_u *)0, (char_u *)0L}},
    {"showmatch", "sm", 0x01|0x400,
       (char_u *)&p_sm,
       {(char_u *)0, (char_u *)0L}},
    {"showmode", "smd", 0x01|0x800,
       (char_u *)&p_smd,
       {(char_u *)0, (char_u *)1}},
    {"sidescroll", "ss", 0x02|0x400,
       (char_u *)&p_ss,
       {(char_u *)0L, (char_u *)0L}},
    {"slowopen", "slow", 0x01|0x400,
       (char_u *)
# 1111 "option.c" 3 4
                ((void *)0)
# 1111 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"smartcase", "scs", 0x01|0x400|0x800,
       (char_u *)&p_scs,
       {(char_u *)0, (char_u *)0L}},
    {"smartindent", "si", 0x01|0x20|0x400|0x800,

       (char_u *)PV_SI,



       {(char_u *)0, (char_u *)0L}},
    {"smarttab", "sta", 0x01|0x400|0x800,
       (char_u *)&p_sta,
       {(char_u *)0, (char_u *)0L}},
    {"softtabstop", "sts", 0x02|0x20|0x400|0x800,
       (char_u *)PV_STS,
       {(char_u *)0L, (char_u *)0L}},
    {"sourceany", 
# 1129 "option.c" 3 4
                   ((void *)0)
# 1129 "option.c"
                       , 0x01|0x400,
       (char_u *)
# 1130 "option.c" 3 4
                ((void *)0)
# 1130 "option.c"
                    ,
       {(char_u *)0, (char_u *)0L}},
    {"splitbelow", "sb", 0x01|0x400,
       (char_u *)&p_sb,
       {(char_u *)0, (char_u *)0L}},
    {"startofline", "sol", 0x01|0x400|0x800,
       (char_u *)&p_sol,
       {(char_u *)1, (char_u *)0L}},
    {"statusline" ,"stl", 0x04|0x400|0x08|0x1000,

       (char_u *)&p_stl,



       {(char_u *)"", (char_u *)0L}},
    {"suffixes", "su", 0x04|0x400|0x8000,
       (char_u *)&p_su,
       {(char_u *)".bak,~,.o,.h,.info,.swp,.obj",
    (char_u *)0L}},
    {"swapfile", "swf", 0x01|0x20|0x400|0x1000,
       (char_u *)PV_SWF,
       {(char_u *)1, (char_u *)0L}},
    {"swapsync", "sws", 0x04|0x400,
       (char_u *)&p_sws,
       {(char_u *)"fsync", (char_u *)0L}},
    {"switchbuf", "swb", 0x04|0x400|0x8000,
       (char_u *)&p_swb,
       {(char_u *)"", (char_u *)0L}},
    {"syntax", "syn", 0x04|0x20|0x08|0x400,

       (char_u *)PV_SYN,
       {(char_u *)"", (char_u *)0L}




       },
    {"tabstop", "ts", 0x02|0x20|0x400|0x2000,
       (char_u *)PV_TS,
       {(char_u *)8L, (char_u *)0L}},
    {"tagbsearch", "tbs", 0x01|0x400,
       (char_u *)&p_tbs,



       {(char_u *)1, (char_u *)0L}},

    {"taglength", "tl", 0x02|0x400,
       (char_u *)&p_tl,
       {(char_u *)0L, (char_u *)0L}},
    {"tagrelative", "tr", 0x01|0x800,
       (char_u *)&p_tr,
       {(char_u *)0, (char_u *)1}},
    {"tags", "tag", 0x04|0x10|0x400|0x8000,
       (char_u *)&p_tags,
       {



       (char_u *)"./tags,tags",

    (char_u *)0L}},
    {"tagstack", "tgst", 0x01|0x400,
       (char_u *)&p_tgst,
       {(char_u *)1, (char_u *)0L}},
    {"term", 
# 1195 "option.c" 3 4
                ((void *)0)
# 1195 "option.c"
                    , 0x04|0x10|0x40|0x200|0x400|0x4000,
       (char_u *)&(term_strings[(int)(KS_NAME)]),
       {(char_u *)"", (char_u *)0L}},
    {"terse", 
# 1198 "option.c" 3 4
                 ((void *)0)
# 1198 "option.c"
                     , 0x01|0x400,
       (char_u *)&p_terse,
       {(char_u *)0, (char_u *)0L}},
    {"textauto", "ta", 0x01|0x800,
       (char_u *)&p_ta,
       {(char_u *)0, (char_u *)1}},
    {"textmode", "tx", 0x01|0x20|0x400|0x200,
       (char_u *)PV_TX,
       {



       (char_u *)0,

    (char_u *)0L}},
    {"textwidth", "tw", 0x02|0x20|0x400|0x800,
       (char_u *)PV_TW,
       {(char_u *)0L, (char_u *)0L}},
    {"tildeop", "top", 0x01|0x400|0x800,
       (char_u *)&p_to,
       {(char_u *)0, (char_u *)0L}},
    {"timeout", "to", 0x01|0x400,
       (char_u *)&p_timeout,
       {(char_u *)1, (char_u *)0L}},
    {"timeoutlen", "tm", 0x02|0x400,
       (char_u *)&p_tm,
       {(char_u *)1000L, (char_u *)0L}},
    {"title", 
# 1225 "option.c" 3 4
                 ((void *)0)
# 1225 "option.c"
                     , 0x01|0x400,

       (char_u *)&p_title,



       {(char_u *)0, (char_u *)0L}},
    {"titlelen", 
# 1232 "option.c" 3 4
                   ((void *)0)
# 1232 "option.c"
                       , 0x02|0x400,

       (char_u *)&p_titlelen,



       {(char_u *)85L, (char_u *)0L}},
    {"titleold", 
# 1239 "option.c" 3 4
                   ((void *)0)
# 1239 "option.c"
                       , 0x04|0x400,

       (char_u *)&p_titleold,



       {(char_u *)"Thanks for flying Vim", (char_u *)0L}},
    {"titlestring", 
# 1246 "option.c" 3 4
                   ((void *)0)
# 1246 "option.c"
                       , 0x04|0x400,

       (char_u *)&p_titlestring,



       {(char_u *)"", (char_u *)0L}},





    {"ttimeout", 
# 1258 "option.c" 3 4
                   ((void *)0)
# 1258 "option.c"
                       , 0x01|0x400|0x800,
       (char_u *)&p_ttimeout,
       {(char_u *)0, (char_u *)0L}},
    {"ttimeoutlen", "ttm", 0x02|0x400,
       (char_u *)&p_ttm,
       {(char_u *)-1L, (char_u *)0L}},
    {"ttybuiltin", "tbi", 0x01|0x400,
       (char_u *)&p_tbi,
       {(char_u *)1, (char_u *)0L}},
    {"ttyfast", "tf", 0x01|0x200|0x400,
       (char_u *)&p_tf,
       {(char_u *)0, (char_u *)0L}},
    {"ttymouse", "ttym", 0x04|0x40|0x200|0x400,
       (char_u *)&p_ttym,
       {(char_u *)"", (char_u *)0L}},
    {"ttyscroll", "tsl", 0x02|0x400,
       (char_u *)&p_ttyscroll,
       {(char_u *)999L, (char_u *)0L}},
    {"ttytype", "tty", 0x04|0x10|0x40|0x200|0x400|0x4000,
       (char_u *)&(term_strings[(int)(KS_NAME)]),
       {(char_u *)"", (char_u *)0L}},
    {"undolevels", "ul", 0x02|0x400,
       (char_u *)&p_ul,
       {

       (char_u *)1000L,



    (char_u *)0L}},
    {"updatecount", "uc", 0x02|0x400,
       (char_u *)&p_uc,
       {(char_u *)200L, (char_u *)0L}},
    {"updatetime", "ut", 0x02|0x400,
       (char_u *)&p_ut,
       {(char_u *)4000L, (char_u *)0L}},
    {"verbose", "vbs", 0x02|0x400,
       (char_u *)&p_verbose,
       {(char_u *)0L, (char_u *)0L}},
    {"viminfo", "vi", 0x04|0x400|0x8000,

       (char_u *)&p_viminfo,



       {(char_u *)"", (char_u *)0L}},
    {"visualbell", "vb", 0x01|0x400,
       (char_u *)&p_vb,
       {(char_u *)0, (char_u *)0L}},
    {"w300", 
# 1307 "option.c" 3 4
                ((void *)0)
# 1307 "option.c"
                    , 0x02|0x400,
       (char_u *)
# 1308 "option.c" 3 4
                ((void *)0)
# 1308 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}},
    {"w1200", 
# 1310 "option.c" 3 4
                 ((void *)0)
# 1310 "option.c"
                     , 0x02|0x400,
       (char_u *)
# 1311 "option.c" 3 4
                ((void *)0)
# 1311 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}},
    {"w9600", 
# 1313 "option.c" 3 4
                 ((void *)0)
# 1313 "option.c"
                     , 0x02|0x400,
       (char_u *)
# 1314 "option.c" 3 4
                ((void *)0)
# 1314 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}},
    {"warn", 
# 1316 "option.c" 3 4
                ((void *)0)
# 1316 "option.c"
                    , 0x01|0x400,
       (char_u *)&p_warn,
       {(char_u *)1, (char_u *)0L}},
    {"weirdinvert", "wiv", 0x01|0x400|0x7000,
       (char_u *)&p_wiv,
       {(char_u *)0, (char_u *)0L}},
    {"whichwrap", "ww", 0x04|0x800|0x8000,
       (char_u *)&p_ww,
       {(char_u *)"", (char_u *)"b,s"}},
    {"wildchar", "wc", 0x02|0x800,
       (char_u *)&p_wc,
       {(char_u *)(long)(('E') & 0x1f), (char_u *)(long)'\011'}},
    {"wildcharm", "wcm", 0x02|0x400,
       (char_u *)&p_wcm,
       {(char_u *)0L, (char_u *)0L}},
    {"wildignore", "wig", 0x04|0x400|0x8000,

       (char_u *)&p_wig,



       {(char_u *)"", (char_u *)0L}},
    {"wildmenu", "wmnu", 0x01|0x400,

       (char_u *)&p_wmnu,



       {(char_u *)0, (char_u *)0L}},
    {"wildmode", "wim", 0x04|0x400|0x8000,
       (char_u *)&p_wim,
       {(char_u *)"full", (char_u *)0L}},
    {"winaltkeys", "wak", 0x04|0x400,




       (char_u *)
# 1353 "option.c" 3 4
                ((void *)0)
# 1353 "option.c"
                    ,
       {(char_u *)
# 1354 "option.c" 3 4
                 ((void *)0)
# 1354 "option.c"
                     , (char_u *)0L}

       },
    {"window", "wi", 0x02|0x400,
       (char_u *)
# 1358 "option.c" 3 4
                ((void *)0)
# 1358 "option.c"
                    ,
       {(char_u *)0L, (char_u *)0L}},
    {"winheight", "wh", 0x02|0x400,
       (char_u *)&p_wh,
       {(char_u *)1L, (char_u *)0L}},
    {"winminheight", "wmh", 0x02|0x400,
       (char_u *)&p_wmh,
       {(char_u *)1L, (char_u *)0L}},
    {"wrap", 
# 1366 "option.c" 3 4
                ((void *)0)
# 1366 "option.c"
                    , 0x01|0x20|0x400|0x2000,
       (char_u *)PV_WRAP,
       {(char_u *)1, (char_u *)0L}},
    {"wrapmargin", "wm", 0x02|0x20|0x400,
       (char_u *)PV_WM,
       {(char_u *)0L, (char_u *)0L}},
    {"wrapscan", "ws", 0x01|0x400,
       (char_u *)&p_ws,
       {(char_u *)1, (char_u *)0L}},
    {"write", 
# 1375 "option.c" 3 4
                 ((void *)0)
# 1375 "option.c"
                     , 0x01|0x400,
       (char_u *)&p_write,
       {(char_u *)1, (char_u *)0L}},
    {"writeany", "wa", 0x01|0x400,
       (char_u *)&p_wa,
       {(char_u *)0, (char_u *)0L}},
    {"writebackup", "wb", 0x01|0x400|0x800,
       (char_u *)&p_wb,
       {

       (char_u *)1,



    (char_u *)0L}},
    {"writedelay", "wd", 0x02|0x400,
       (char_u *)&p_wd,
       {(char_u *)0L, (char_u *)0L}},






    {"t_AB", 
# 1399 "option.c" 3 4
   ((void *)0)
# 1399 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CAB)]), {(char_u *)"", (char_u *)0L}},
    {"t_AF", 
# 1400 "option.c" 3 4
   ((void *)0)
# 1400 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CAF)]), {(char_u *)"", (char_u *)0L}},
    {"t_AL", 
# 1401 "option.c" 3 4
   ((void *)0)
# 1401 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CAL)]), {(char_u *)"", (char_u *)0L}},
    {"t_al", 
# 1402 "option.c" 3 4
   ((void *)0)
# 1402 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_AL)]), {(char_u *)"", (char_u *)0L}},
    {"t_bc", 
# 1403 "option.c" 3 4
   ((void *)0)
# 1403 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_BC)]), {(char_u *)"", (char_u *)0L}},
    {"t_cd", 
# 1404 "option.c" 3 4
   ((void *)0)
# 1404 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CD)]), {(char_u *)"", (char_u *)0L}},
    {"t_ce", 
# 1405 "option.c" 3 4
   ((void *)0)
# 1405 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CE)]), {(char_u *)"", (char_u *)0L}},
    {"t_cl", 
# 1406 "option.c" 3 4
   ((void *)0)
# 1406 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CL)]), {(char_u *)"", (char_u *)0L}},
    {"t_cm", 
# 1407 "option.c" 3 4
   ((void *)0)
# 1407 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CM)]), {(char_u *)"", (char_u *)0L}},
    {"t_Co", 
# 1408 "option.c" 3 4
   ((void *)0)
# 1408 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CCO)]), {(char_u *)"", (char_u *)0L}},
    {"t_CS", 
# 1409 "option.c" 3 4
   ((void *)0)
# 1409 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CCS)]), {(char_u *)"", (char_u *)0L}},
    {"t_cs", 
# 1410 "option.c" 3 4
   ((void *)0)
# 1410 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CS)]), {(char_u *)"", (char_u *)0L}},
    {"t_da", 
# 1411 "option.c" 3 4
   ((void *)0)
# 1411 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_DA)]), {(char_u *)"", (char_u *)0L}},
    {"t_db", 
# 1412 "option.c" 3 4
   ((void *)0)
# 1412 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_DB)]), {(char_u *)"", (char_u *)0L}},
    {"t_DL", 
# 1413 "option.c" 3 4
   ((void *)0)
# 1413 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CDL)]), {(char_u *)"", (char_u *)0L}},
    {"t_dl", 
# 1414 "option.c" 3 4
   ((void *)0)
# 1414 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_DL)]), {(char_u *)"", (char_u *)0L}},
    {"t_fs", 
# 1415 "option.c" 3 4
   ((void *)0)
# 1415 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_FS)]), {(char_u *)"", (char_u *)0L}},
    {"t_IE", 
# 1416 "option.c" 3 4
   ((void *)0)
# 1416 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CIE)]), {(char_u *)"", (char_u *)0L}},
    {"t_IS", 
# 1417 "option.c" 3 4
   ((void *)0)
# 1417 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CIS)]), {(char_u *)"", (char_u *)0L}},
    {"t_ke", 
# 1418 "option.c" 3 4
   ((void *)0)
# 1418 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_KE)]), {(char_u *)"", (char_u *)0L}},
    {"t_ks", 
# 1419 "option.c" 3 4
   ((void *)0)
# 1419 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_KS)]), {(char_u *)"", (char_u *)0L}},
    {"t_le", 
# 1420 "option.c" 3 4
   ((void *)0)
# 1420 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_LE)]), {(char_u *)"", (char_u *)0L}},
    {"t_mb", 
# 1421 "option.c" 3 4
   ((void *)0)
# 1421 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_MB)]), {(char_u *)"", (char_u *)0L}},
    {"t_md", 
# 1422 "option.c" 3 4
   ((void *)0)
# 1422 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_MD)]), {(char_u *)"", (char_u *)0L}},
    {"t_me", 
# 1423 "option.c" 3 4
   ((void *)0)
# 1423 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_ME)]), {(char_u *)"", (char_u *)0L}},
    {"t_mr", 
# 1424 "option.c" 3 4
   ((void *)0)
# 1424 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_MR)]), {(char_u *)"", (char_u *)0L}},
    {"t_ms", 
# 1425 "option.c" 3 4
   ((void *)0)
# 1425 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_MS)]), {(char_u *)"", (char_u *)0L}},
    {"t_nd", 
# 1426 "option.c" 3 4
   ((void *)0)
# 1426 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_ND)]), {(char_u *)"", (char_u *)0L}},
    {"t_op", 
# 1427 "option.c" 3 4
   ((void *)0)
# 1427 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_OP)]), {(char_u *)"", (char_u *)0L}},
    {"t_RI", 
# 1428 "option.c" 3 4
   ((void *)0)
# 1428 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CRI)]), {(char_u *)"", (char_u *)0L}},
    {"t_RV", 
# 1429 "option.c" 3 4
   ((void *)0)
# 1429 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CRV)]), {(char_u *)"", (char_u *)0L}},
    {"t_Sb", 
# 1430 "option.c" 3 4
   ((void *)0)
# 1430 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CSB)]), {(char_u *)"", (char_u *)0L}},
    {"t_Sf", 
# 1431 "option.c" 3 4
   ((void *)0)
# 1431 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CSF)]), {(char_u *)"", (char_u *)0L}},
    {"t_se", 
# 1432 "option.c" 3 4
   ((void *)0)
# 1432 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_SE)]), {(char_u *)"", (char_u *)0L}},
    {"t_so", 
# 1433 "option.c" 3 4
   ((void *)0)
# 1433 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_SO)]), {(char_u *)"", (char_u *)0L}},
    {"t_sr", 
# 1434 "option.c" 3 4
   ((void *)0)
# 1434 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_SR)]), {(char_u *)"", (char_u *)0L}},
    {"t_ts", 
# 1435 "option.c" 3 4
   ((void *)0)
# 1435 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_TS)]), {(char_u *)"", (char_u *)0L}},
    {"t_te", 
# 1436 "option.c" 3 4
   ((void *)0)
# 1436 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_TE)]), {(char_u *)"", (char_u *)0L}},
    {"t_ti", 
# 1437 "option.c" 3 4
   ((void *)0)
# 1437 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_TI)]), {(char_u *)"", (char_u *)0L}},
    {"t_ue", 
# 1438 "option.c" 3 4
   ((void *)0)
# 1438 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_UE)]), {(char_u *)"", (char_u *)0L}},
    {"t_us", 
# 1439 "option.c" 3 4
   ((void *)0)
# 1439 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_US)]), {(char_u *)"", (char_u *)0L}},
    {"t_vb", 
# 1440 "option.c" 3 4
   ((void *)0)
# 1440 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_VB)]), {(char_u *)"", (char_u *)0L}},
    {"t_ve", 
# 1441 "option.c" 3 4
   ((void *)0)
# 1441 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_VE)]), {(char_u *)"", (char_u *)0L}},
    {"t_vi", 
# 1442 "option.c" 3 4
   ((void *)0)
# 1442 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_VI)]), {(char_u *)"", (char_u *)0L}},
    {"t_vs", 
# 1443 "option.c" 3 4
   ((void *)0)
# 1443 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_VS)]), {(char_u *)"", (char_u *)0L}},
    {"t_WP", 
# 1444 "option.c" 3 4
   ((void *)0)
# 1444 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CWP)]), {(char_u *)"", (char_u *)0L}},
    {"t_WS", 
# 1445 "option.c" 3 4
   ((void *)0)
# 1445 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CWS)]), {(char_u *)"", (char_u *)0L}},
    {"t_xs", 
# 1446 "option.c" 3 4
   ((void *)0)
# 1446 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_XS)]), {(char_u *)"", (char_u *)0L}},
    {"t_ZH", 
# 1447 "option.c" 3 4
   ((void *)0)
# 1447 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CZH)]), {(char_u *)"", (char_u *)0L}},
    {"t_ZR", 
# 1448 "option.c" 3 4
   ((void *)0)
# 1448 "option.c"
   , 0x04|0x400|0x4000, (char_u *)&(term_strings[(int)(KS_CZR)]), {(char_u *)"", (char_u *)0L}},



    {
# 1452 "option.c" 3 4
    ((void *)0)
# 1452 "option.c"
        , 
# 1452 "option.c" 3 4
          ((void *)0)
# 1452 "option.c"
              , 0, 
# 1452 "option.c" 3 4
                   ((void *)0)
# 1452 "option.c"
                       , {
# 1452 "option.c" 3 4
                          ((void *)0)
# 1452 "option.c"
                              , 
# 1452 "option.c" 3 4
                                ((void *)0)
# 1452 "option.c"
                                    }}
};



static char *(p_bg_values[]) = {"light", "dark", 
# 1457 "option.c" 3 4
                                                ((void *)0)
# 1457 "option.c"
                                                    };
static char *(p_nf_values[]) = {"octal", "hex", 
# 1458 "option.c" 3 4
                                               ((void *)0)
# 1458 "option.c"
                                                   };
static char *(p_ff_values[]) = {"unix", "dos", "mac", 
# 1459 "option.c" 3 4
                                                        ((void *)0)
# 1459 "option.c"
                                                            };
# 1468 "option.c"
static char *(p_sessopt_values[]) = {"buffers", "winpos", "resize", "winsize", "options", "help", "blank", "globals", "slash", "unix", 
# 1468 "option.c" 3 4
                                                                                                                                      ((void *)0)
# 1468 "option.c"
                                                                                                                                          };

static char *(p_mousem_values[]) = {"extend", "popup", "popup_setpos", "mac", 
# 1470 "option.c" 3 4
                                                                             ((void *)0)
# 1470 "option.c"
                                                                                 };
static char *(p_slm_values[]) = {"mouse", "key", "cmd", 
# 1471 "option.c" 3 4
                                                       ((void *)0)
# 1471 "option.c"
                                                           };
static char *(p_sel_values[]) = {"inclusive", "exclusive", "old", 
# 1472 "option.c" 3 4
                                                                 ((void *)0)
# 1472 "option.c"
                                                                     };

static char *(p_ttym_values[]) = {"xterm", "xterm2", "dec", "netterm", 
# 1474 "option.c" 3 4
                                                                      ((void *)0)
# 1474 "option.c"
                                                                          };

static char *(p_km_values[]) = {"startsel", "stopsel", 
# 1476 "option.c" 3 4
                                                      ((void *)0)
# 1476 "option.c"
                                                          };
static char *(p_bsdir_values[]) = {"current", "last", "buffer", 
# 1477 "option.c" 3 4
                                                               ((void *)0)
# 1477 "option.c"
                                                                   };

static char *(p_scbopt_values[]) = {"ver", "hor", "jump", 
# 1479 "option.c" 3 4
                                                         ((void *)0)
# 1479 "option.c"
                                                             };

static char *(p_swb_values[]) = {"useopen", "split", 
# 1481 "option.c" 3 4
                                                    ((void *)0)
# 1481 "option.c"
                                                        };
static char *(p_dy_values[]) = {"lastline", 
# 1482 "option.c" 3 4
                                           ((void *)0)
# 1482 "option.c"
                                               };



static char *(p_bs_values[]) = {"indent", "eol", "start", 
# 1486 "option.c" 3 4
                                                         ((void *)0)
# 1486 "option.c"
                                                             };

static void set_option_default (int, int);
static void set_options_default (int dofree);
static char_u *illegal_char (char_u *, int);

static void did_set_title (int icon);

static char_u *option_expand (int);
static void set_string_option (int opt_idx, char_u *value);
static char_u *did_set_string_option (int opt_idx, char_u **varp, int new_value_alloced, char_u *oldval, char_u *errbuf);
static char_u *set_bool_option (int opt_idx, char_u *varp, int value);
static char_u *set_num_option (int opt_idx, char_u *varp, long value, char_u *errbuf);
static void check_redraw (int flags);
static int findoption (char_u *);
static int find_key_option (char_u *);
static void showoptions (int);
static int option_not_default (struct vimoption *);
static void showoneopt (struct vimoption *);
static int istermoption (struct vimoption *);
static char_u *get_varp (struct vimoption *);
static void option_value2string (struct vimoption *);




static void paste_option_changed (void);
static void compatible_set (void);

static void fill_breakat_flags (void);

static int check_opt_strings (char_u *val, char **values, int);
static int check_opt_wim (void);






    void
set_init_1()
{
    char_u *p;
    int opt_idx;
    long n;






    p_cp = 1;




    if ((p = (char_u *)getenv((char *)((char_u *)"SHELL"))) != 
# 1542 "option.c" 3 4
                                              ((void *)0)
# 1552 "option.c"
           
# 1552 "option.c"
          )
    {
 set_string_default("sh", p);
    }




    opt_idx = findoption((char_u *)"maxmemtot");
    if (options[opt_idx].def_val[0] == (char_u *)0L)
    {



 n = (0x7fffffff >> 11);

 options[opt_idx].def_val[0] = (char_u *)n;
 opt_idx = findoption((char_u *)"maxmem");
 if ((long)options[opt_idx].def_val[0] > n
     || (long)options[opt_idx].def_val[0] == 0L)
     options[opt_idx].def_val[0] = (char_u *)n;
    }
# 1585 "option.c"
    set_options_default(0);






    curbuf->b_p_initialized = 1;
    check_buf_options(curbuf);
    check_options();





    init_chartab();





    fill_breakat_flags();
# 1617 "option.c"
    for (opt_idx = 0; !istermoption(&options[opt_idx]); opt_idx++)
    {
 p = option_expand(opt_idx);
 if (p != 
# 1620 "option.c" 3 4
         ((void *)0)
# 1620 "option.c"
             )
 {
     *(char_u **)options[opt_idx].var = p;





     options[opt_idx].def_val[0] = p;
     options[opt_idx].flags |= 0x80;
 }
    }


    highlight_changed();

    curbuf->b_start_ffc = *curbuf->b_p_ff;


    check_opt_wim();

}




    static void
set_option_default(opt_idx, dofree)
    int opt_idx;
    int dofree;
{
    char_u *varp;
    int dvi;
    int flags;

    varp = get_varp(&(options[opt_idx]));
    flags = options[opt_idx].flags;
    if (varp != 
# 1657 "option.c" 3 4
               ((void *)0)
# 1657 "option.c"
                   )
    {
 if ((flags & 0x400) || p_cp)
     dvi = 0;
 else
     dvi = 1;
 if (flags & 0x04)
 {

     if (flags & 0x20)
  set_string_option_direct(
# 1667 "option.c" 3 4
                          ((void *)0)
# 1667 "option.c"
                              , opt_idx,
          options[opt_idx].def_val[dvi], dofree);
     else
     {
  if (dofree && (flags & 0x08))
      free_string_option(*(char_u **)(varp));
  *(char_u **)varp = options[opt_idx].def_val[dvi];
  options[opt_idx].flags &= ~0x08;
     }
 }
 else if (flags & 0x02)
 {
     if (varp == (char_u *)PV_SCROLL)
  win_comp_scroll(curwin);
     else
  *(long *)varp = (long)options[opt_idx].def_val[dvi];
 }
 else

     *(int *)varp = (int)(long)options[opt_idx].def_val[dvi];
    }
}




    static void
set_options_default(dofree)
    int dofree;
{
    int i;
    WIN *wp;

    for (i = 0; !istermoption(&options[i]); i++)
 if (!(options[i].flags & 0x40))
     set_option_default(i, dofree);



    for (wp = firstwin; wp != 
# 1706 "option.c" 3 4
                             ((void *)0)
# 1706 "option.c"
                                 ; wp = wp->w_next)
 win_comp_scroll(wp);
}





    void
set_string_default(name, val)
    char *name;
    char_u *val;
{
    char_u *p;
    int opt_idx;

    p = vim_strsave(val);
    if (p != 
# 1723 "option.c" 3 4
            ((void *)0)
# 1723 "option.c"
                )
    {
 opt_idx = findoption((char_u *)name);
 if (options[opt_idx].flags & 0x80)
     vim_free(options[opt_idx].def_val[0]);
 options[opt_idx].def_val[0] = p;
 options[opt_idx].flags |= 0x80;
    }
}





    void
set_number_default(name, val)
    char *name;
    long val;
{
    options[findoption((char_u *)name)].def_val[0] = (char_u *)val;
}





    void
set_init_2()
{




    options[findoption((char_u *)"scroll")].def_val[0]
           = (char_u *)((long_u)Rows >> 1);
    comp_col();


    {
 int idx4;






 idx4 = findoption((char_u *)"bg");
 if (!(options[idx4].flags & 0x100))
 {
     if (strcmp((char *)((term_strings[(int)(KS_NAME)])), (char *)("linux")) == 0)
  set_string_option_direct(
# 1773 "option.c" 3 4
                          ((void *)0)
# 1773 "option.c"
                              , idx4, (char_u *)"dark", 1);
 }
    }

}




    void
set_init_3()
{






    char_u *p;
    int idx_srr;
    int do_srr;

    int idx_sp;
    int do_sp;


    idx_srr = findoption((char_u *)"srr");
    do_srr = !(options[idx_srr].flags & 0x100);

    idx_sp = findoption((char_u *)"sp");
    do_sp = !(options[idx_sp].flags & 0x100);







    p = gettail(p_sh);
    p = vim_strnsave(p, skiptowhite(p) - p);
    if (p != 
# 1813 "option.c" 3 4
            ((void *)0)
# 1813 "option.c"
                )
    {




 if ( strcmp((char *)(p), (char *)("csh")) == 0
  || strcmp((char *)(p), (char *)("tcsh")) == 0




    )
 {

     if (do_sp)
     {
  p_sp = (char_u *)"|& tee";
  options[idx_sp].def_val[0] = p_sp;
     }

     if (do_srr)
     {
  p_srr = (char_u *)">&";
  options[idx_srr].def_val[0] = p_srr;
     }
 }
 else

     if ( strcmp((char *)(p), (char *)("sh")) == 0
      || strcmp((char *)(p), (char *)("ksh")) == 0
      || strcmp((char *)(p), (char *)("zsh")) == 0
      || strcmp((char *)(p), (char *)("bash")) == 0)

     {

  if (do_sp)
  {
      p_sp = (char_u *)"2>&1| tee";
      options[idx_sp].def_val[0] = p_sp;
  }

  if (do_srr)
  {
      p_srr = (char_u *)">%s 2>&1";
      options[idx_srr].def_val[0] = p_srr;
  }
     }
 vim_free(p);
    }
# 1907 "option.c"
    set_title_defaults();
# 1922 "option.c"
}
# 1950 "option.c"
    void
set_title_defaults()
{
    int idx1;
    long val;






    idx1 = findoption((char_u *)"title");
    if (!(options[idx1].flags & 0x100))
    {





     val = mch_can_restore_title();
 options[idx1].def_val[0] = (char_u *)val;
 p_title = val;
    }
    idx1 = findoption((char_u *)"icon");
    if (!(options[idx1].flags & 0x100))
    {





     val = mch_can_restore_icon();
 options[idx1].def_val[0] = (char_u *)val;
 p_icon = val;
    }
}
# 1996 "option.c"
    int
do_set(arg, modeline)
    char_u *arg;
    int modeline;
{
    int opt_idx;
    char_u *errmsg;
    char_u errbuf[80];
    char_u *startarg;
    int prefix;
    int nextchar;
    int afterchar;
    int len;
    int i;
    long value;
    int key;
    int flags;
    char_u *varp = 
# 2013 "option.c" 3 4
                  ((void *)0)
# 2013 "option.c"
                      ;
    int did_show = 0;
    int adding;
    int prepending;
    int removing;

    if (*arg == '\000')
    {
 showoptions(0);
 return 1;
    }

    while (*arg)
    {
 errmsg = 
# 2027 "option.c" 3 4
         ((void *)0)
# 2027 "option.c"
             ;
 startarg = arg;

 if (strncmp((char *)(arg), (char *)("all"), (size_t)(3)) == 0 && !
# 2030 "option.c" 3 4
                                    ((*__ctype_b_loc ())[(int) ((
# 2030 "option.c"
                                    arg[3]
# 2030 "option.c" 3 4
                                    ))] & (unsigned short int) _ISalpha)
# 2030 "option.c"
                                                   )
 {




     arg += 3;
     if (*arg == '&')
     {
  ++arg;
  set_options_default(1);
     }
     else
  showoptions(1);
 }
 else if (strncmp((char *)(arg), (char *)("termcap"), (size_t)(7)) == 0)
 {
     showoptions(2);
     show_termcodes();
     arg += 7;
 }
 else
 {
     prefix = 1;
     if (strncmp((char *)(arg), (char *)("no"), (size_t)(2)) == 0)
     {
  prefix = 0;
  arg += 2;
     }
     else if (strncmp((char *)(arg), (char *)("inv"), (size_t)(3)) == 0)
     {
  prefix = 2;
  arg += 3;
     }


     key = 0;
     if (*arg == '<')
     {
  opt_idx = -1;

  if (arg[1] == 't' && arg[2] == '_' && arg[3] && arg[4])
      len = 5;
  else
  {
      len = 1;
      while (arg[len] != '\000' && arg[len] != '>')
   ++len;
  }
  if (arg[len] != '>')
  {
      errmsg = e_invarg;
      goto skip;
  }
  arg[len] = '\000';
  if (arg[1] == 't' && arg[2] == '_')
      opt_idx = findoption(arg + 1);
  arg[len++] = '>';
  if (opt_idx == -1)
      key = find_key_option(arg + 1);
     }
     else
     {
  len = 0;



  if (arg[0] == 't' && arg[1] == '_' && arg[2] && arg[3])
  {
      len = 4;
  }
  else
  {
      while (
# 2103 "option.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 2103 "option.c"
            arg[len]
# 2103 "option.c" 3 4
            ))] & (unsigned short int) _ISalnum) 
# 2103 "option.c"
                              || arg[len] == '_')
   ++len;
  }
  nextchar = arg[len];
  arg[len] = '\000';
  opt_idx = findoption(arg);
  arg[len] = nextchar;
  if (opt_idx == -1)
      key = find_key_option(arg);
     }

     if (opt_idx == -1 && key == 0)
     {
  errmsg = (char_u *)"Unknown option";
  goto skip;
     }

     if (opt_idx >= 0)
     {
  if (options[opt_idx].var == 
# 2122 "option.c" 3 4
                             ((void *)0)
# 2122 "option.c"
                                 )
      goto skip;

  flags = options[opt_idx].flags;
  varp = get_varp(&(options[opt_idx]));
     }
     else
  flags = 0x04;


     if (modeline)
     {
  if (varp == (char_u *)&p_exrc
   || varp == (char_u *)&p_secure
   || varp == (char_u *)&p_shcf

   || varp == (char_u *)&p_sp

   || varp == (char_u *)&p_shq
   || varp == (char_u *)&p_srr
   || varp == (char_u *)&p_sxq
   || varp == (char_u *)&p_sh)
  {
      errmsg = (char_u *)"Not allowed in a modeline";
      goto skip;
  }
  if (p_secure && (0



       || varp == (char_u *)&p_ep
       || varp == (char_u *)&p_fp

       || varp == (char_u *)&p_mp
       || varp == (char_u *)&p_gp

       || varp == (char_u *)&p_kp
    ))
  {
      smsg((char_u *)"Warning: %s option changed from modeline",
       options[opt_idx].fullname);
  }
     }


     afterchar = arg[len];


     while (((arg[len]) == ' ' || (arg[len]) == '\t'))
  ++len;

     adding = 0;
     prepending = 0;
     removing = 0;
     if (arg[len] == '+' && arg[len + 1] == '=')
     {
  adding = 1;
  ++len;
     }
     else if (arg[len] == '^' && arg[len + 1] == '=')
     {
  prepending = 1;
  ++len;
     }
     else if (arg[len] == '-' && arg[len + 1] == '=')
     {
  removing = 1;
  ++len;
     }

     nextchar = arg[len];
     if (vim_strchr((char_u *)"?=:!&", nextchar) != 
# 2193 "option.c" 3 4
                                                   ((void *)0)
# 2193 "option.c"
                                                       )
     {
  arg += len;
  len = 0;
  if (vim_strchr((char_u *)"?!&", nextchar) != 
# 2197 "option.c" 3 4
                                              ((void *)0)
   
# 2198 "option.c"
  && arg[1] != '\000' && !((arg[1]) == ' ' || (arg[1]) == '\t'))
  {
      errmsg = e_trailing;
      goto skip;
  }
     }





     if (nextchar == '?'
      || (prefix == 1
   && vim_strchr((char_u *)"=:&", nextchar) == 
# 2211 "option.c" 3 4
                                              ((void *)0)
   
# 2212 "option.c"
  && !(flags & 0x01)))
     {



  if (did_show)
      msg_putchar('\n');
  else
  {
      gotocmdline(1);
      did_show = 1;
  }
  if (opt_idx >= 0)
      showoneopt(&options[opt_idx]);
  else
  {
      char_u name[2];
      char_u *p;

      name[0] = ((key) & 0xff);
      name[1] = (((unsigned)(key) >> 8) & 0xff);
      p = find_termcode(name);
      if (p == 
# 2234 "option.c" 3 4
              ((void *)0)
# 2234 "option.c"
                  )
      {
   errmsg = (char_u *)"Unknown option";
   goto skip;
      }
      else
   (void)show_one_termcode(name, p, 1);
  }
  if (nextchar != '?'
   && nextchar != '\000' && !((afterchar) == ' ' || (afterchar) == '\t'))
      errmsg = e_trailing;
     }
     else
     {
  if (flags & 0x01)
  {
      if (nextchar == '=' || nextchar == ':')
      {
   errmsg = e_invarg;
   goto skip;
      }





      if (nextchar == '!')
   value = *(int *)(varp) ^ 1;
      else if (nextchar == '&')
      {


   i = *(int *)varp;
   set_option_default(opt_idx, 0);
   value = *(int *)varp;
   *(int *)varp = i;
      }
      else
      {




   if (nextchar != '\000' && !((afterchar) == ' ' || (afterchar) == '\t'))
   {
       errmsg = e_trailing;
       goto skip;
   }
   if (prefix == 2)
       value = *(int *)(varp) ^ 1;
   else
       value = prefix;
      }

      errmsg = set_bool_option(opt_idx, varp, (int)value);
  }
  else
  {
      if (vim_strchr((char_u *)"=:&", nextchar) == 
# 2292 "option.c" 3 4
                                                  ((void *)0)
              
# 2293 "option.c"
             || prefix != 1)
      {
   errmsg = e_invarg;
   goto skip;
      }

      if (flags & 0x02)
      {
# 2309 "option.c"
   arg += len + 1;
   if (nextchar == '&')
   {
       long temp;



       temp = *(long *)varp;
       set_option_default(opt_idx, 0);
       value = *(long *)varp;
       *(long *)varp = temp;
   }
   else if (((long *)varp == &p_wc
        || (long *)varp == &p_wcm)
    && (*arg == '<'
        || *arg == '^'
        || ((!arg[1] || ((arg[1]) == ' ' || (arg[1]) == '\t'))
     && !
# 2326 "option.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 2326 "option.c"
        *arg
# 2326 "option.c" 3 4
        ))] & (unsigned short int) _ISdigit)
# 2326 "option.c"
                     )))
   {
       if (*arg == '<')
    value = find_key_option(arg + 1);
       else if (*arg == '^')
    value = arg[1] ^ 0x40;
       else
    value = *arg;
       if ((value == 0) && ((long *)varp != &p_wcm))
       {
    errmsg = e_invarg;
    goto skip;
       }
   }

   else if (*arg == '-' || 
# 2341 "option.c" 3 4
                          ((*__ctype_b_loc ())[(int) ((
# 2341 "option.c"
                          *arg
# 2341 "option.c" 3 4
                          ))] & (unsigned short int) _ISdigit)
# 2341 "option.c"
                                       )
   {
       i = 0;
       if (*arg == '-')
    i = 1;

       value = strtol((char *)arg, 
# 2347 "option.c" 3 4
                                  ((void *)0)
# 2347 "option.c"
                                      , 0);
       if (arg[i] == '0' && tolower(arg[i + 1]) == 'x')
    i += 2;



       while (
# 2353 "option.c" 3 4
             ((*__ctype_b_loc ())[(int) ((
# 2353 "option.c"
             arg[i]
# 2353 "option.c" 3 4
             ))] & (unsigned short int) _ISdigit)
# 2353 "option.c"
                            )
    ++i;
       if (arg[i] != '\000' && !((arg[i]) == ' ' || (arg[i]) == '\t'))
       {
    errmsg = e_invarg;
    goto skip;
       }
   }
   else
   {
       errmsg = (char_u *)"Number required after =";
       goto skip;
   }

   if (adding)
       value = *(long *)varp + value;
   if (prepending)
       value = *(long *)varp * value;
   if (removing)
       value = *(long *)varp - value;
   errmsg = set_num_option(opt_idx, varp, value, errbuf);
      }
      else if (opt_idx >= 0)
      {
   char_u *save_arg = 
# 2377 "option.c" 3 4
                         ((void *)0)
# 2377 "option.c"
                             ;
   char_u *s;
   char_u *oldval;
   char_u *newval;
   unsigned newlen;
   int comma;
   int bs;
   int new_value_alloced;






   oldval = *(char_u **)(varp);
   if (nextchar == '&')
   {




       set_option_default(opt_idx, 0);
       new_value_alloced =
      (options[opt_idx].flags & 0x08);
       options[opt_idx].flags = flags;
   }
   else
   {
       arg += len + 1;






       if (varp == (char_u *)&p_ww && 
# 2412 "option.c" 3 4
                                     ((*__ctype_b_loc ())[(int) ((
# 2412 "option.c"
                                     *arg
# 2412 "option.c" 3 4
                                     ))] & (unsigned short int) _ISdigit)
# 2412 "option.c"
                                                  )
       {
    *errbuf = '\000';
    i = getdigits(&arg);
    if (i & 1)
        strcat((char *)(errbuf), (char *)("b,"));
    if (i & 2)
        strcat((char *)(errbuf), (char *)("s,"));
    if (i & 4)
        strcat((char *)(errbuf), (char *)("h,l,"));
    if (i & 8)
        strcat((char *)(errbuf), (char *)("<,>,"));
    if (i & 16)
        strcat((char *)(errbuf), (char *)("[,],"));
    if (*errbuf != '\000')
        errbuf[strlen((char *)(errbuf)) - 1] = '\000';
    save_arg = arg;
    arg = errbuf;
       }




       else if ( *arg == '>'
        && (varp == (char_u *)&p_dir
         || varp == (char_u *)&p_bdir))
       {
    ++arg;
       }







       newlen = strlen((char *)(arg)) + 1;
       if (adding || prepending || removing)
    newlen += strlen((char *)(oldval)) + 1;
       newval = alloc(newlen);
       if (newval == 
# 2452 "option.c" 3 4
                    ((void *)0)
# 2452 "option.c"
                        )
    break;
       s = newval;
# 2463 "option.c"
       while (*arg && !((*arg) == ' ' || (*arg) == '\t'))
       {
    if (*arg == '\\' && arg[1] != '\000'







            )
        ++arg;
    *s++ = *arg++;
       }
       *s = '\000';



       if (adding || prepending)
       {
    comma = ((flags & 0x8000) && *oldval);
    if (adding)
    {
        i = strlen((char *)(oldval));
        mch_memmove(newval + i + comma, newval,
         strlen((char *)(newval)) + 1);
        mch_memmove(newval, oldval, (size_t)i);
    }
    else
    {
        i = strlen((char *)(newval));
        mch_memmove(newval + i + comma, oldval,
         strlen((char *)(oldval)) + 1);
    }
    if (comma)
        newval[i] = ',';
       }


       if (removing)
       {
    i = strlen((char *)(newval));
    bs = 0;
    for (s = oldval; *s; ++s)
    {
        if ((!(flags & 0x8000)
      || s == oldval
      || (s[-1] == ',' && !(bs & 1)))
         && strncmp((char *)(s), (char *)(newval), (size_t)(i)) == 0
         && (!(flags & 0x8000)
      || s[i] == ','
      || s[i] == '\000'))
     break;



        if (s > oldval && s[-1] == '\\')
     ++bs;
        else
     bs = 0;
    }
    strcpy((char *)(newval), (char *)(oldval));
    if (*s)
    {

        if (flags & 0x8000)
        {
     if (s == oldval)
     {

         if (s[i] == ',')
      ++i;
     }
     else
     {

         --s;
         ++i;
     }
        }
        mch_memmove(newval + (s - oldval), s + i,
          strlen((char *)(s + i)) + 1);
    }
       }

       *(char_u **)(varp) = newval;

       if (save_arg != 
# 2550 "option.c" 3 4
                      ((void *)0)
# 2550 "option.c"
                          )
    arg = save_arg;
       new_value_alloced = 1;
   }


   s = option_expand(opt_idx);
   if (s != 
# 2557 "option.c" 3 4
           ((void *)0)
# 2557 "option.c"
               )
   {
       if (new_value_alloced)
    vim_free(*(char_u **)(varp));
       *(char_u **)(varp) = s;
       new_value_alloced = 1;
   }

   errmsg = did_set_string_option(opt_idx, (char_u **)varp,
        new_value_alloced, oldval, errbuf);



   if (errmsg != 
# 2570 "option.c" 3 4
                ((void *)0)
# 2570 "option.c"
                    )
       goto skip;
      }
      else
      {
   char_u name[2];
   char_u *p;

   name[0] = ((key) & 0xff);
   name[1] = (((unsigned)(key) >> 8) & 0xff);
   if (nextchar == '&')
   {
       if (add_termcap_entry(name, 1) == 0)
    errmsg = (char_u *)"Not found in termcap";
   }
   else
   {
       arg += len + 1;
       for(p = arg; *p && !((*p) == ' ' || (*p) == '\t'); ++p)
       {
    if (*p == '\\' && *(p + 1))
        ++p;
       }
       nextchar = *p;
       *p = '\000';
       add_termcode(name, arg, 0);
       *p = nextchar;
   }
   if (full_screen)
       ttest(0);
   redraw_all_later(50);
      }
  }
  if (opt_idx >= 0)
      options[opt_idx].flags |= 0x100;
     }

skip:






     for (i = 0; i < 2 ; ++i)
     {
  while (*arg != '\000' && !((*arg) == ' ' || (*arg) == '\t'))
      if (*arg++ == '\\' && *arg != '\000')
   ++arg;
  arg = skipwhite(arg);
  if (*arg != '=')
      break;
     }
 }
 arg = skipwhite(arg);

 if (errmsg)
 {
     ++no_wait_return;
     emsg(errmsg);
     msg_puts((char_u *)(": "));

     while (startarg < arg)
  msg_puts(transchar(*startarg++));
     msg_end();
     --no_wait_return;

     return 0;
 }
    }

    return 1;
}

    static char_u *
illegal_char(errbuf, c)
    char_u *errbuf;
    int c;
{
    if (errbuf == 
# 2649 "option.c" 3 4
                 ((void *)0)
# 2649 "option.c"
                     )
 return (char_u *)"";
    sprintf((char *)errbuf, "Illegal character <%s>", (char *)transchar(c));
    return errbuf;
}
# 2662 "option.c"
    static void
did_set_title(icon)
    int icon;
{
    if (starting != 2



    )
    {
 maketitle();
 if (icon)
 {
     if (!p_icon)
  mch_restore_title(2);
 }
 else
 {
     if (!p_title)
  mch_restore_title(1);
 }
    }
}





    void
set_options_bin(oldval, newval)
    int oldval;
    int newval;
{




    if (newval)
    {
 if (!oldval)
 {
     curbuf->b_p_tw_nobin = curbuf->b_p_tw;
     curbuf->b_p_wm_nobin = curbuf->b_p_wm;
     curbuf->b_p_ml_nobin = curbuf->b_p_ml;
     curbuf->b_p_et_nobin = curbuf->b_p_et;
 }

 curbuf->b_p_tw = 0;
 curbuf->b_p_wm = 0;
 curbuf->b_p_ml = 0;
 curbuf->b_p_et = 0;
    }
    else if (oldval)
    {
 curbuf->b_p_tw = curbuf->b_p_tw_nobin;
 curbuf->b_p_wm = curbuf->b_p_wm_nobin;
 curbuf->b_p_ml = curbuf->b_p_ml_nobin;
 curbuf->b_p_et = curbuf->b_p_et_nobin;
    }
}
# 2730 "option.c"
    int
get_viminfo_parameter(type)
    int type;
{
    char_u *p;

    p = find_viminfo_parameter(type);
    if (p != 
# 2737 "option.c" 3 4
            ((void *)0) 
# 2737 "option.c"
                 && 
# 2737 "option.c" 3 4
                    ((*__ctype_b_loc ())[(int) ((
# 2737 "option.c"
                    *p
# 2737 "option.c" 3 4
                    ))] & (unsigned short int) _ISdigit)
# 2737 "option.c"
                               )
 return atoi((char *)p);
    return -1;
}






    char_u *
find_viminfo_parameter(type)
    int type;
{
    char_u *p;

    for (p = p_viminfo; *p; ++p)
    {
 if (*p == type)
     return p + 1;
 if (*p == 'n')
     break;
 p = vim_strchr(p, ',');
 if (p == 
# 2760 "option.c" 3 4
         ((void *)0)
# 2760 "option.c"
             )
     break;
    }
    return 
# 2763 "option.c" 3 4
          ((void *)0)
# 2763 "option.c"
              ;
}







    static char_u *
option_expand(opt_idx)
    int opt_idx;
{
    char_u *p;


    if (!(options[opt_idx].flags & 0x10) || options[opt_idx].var == 
# 2779 "option.c" 3 4
                                                                       ((void *)0)
# 2779 "option.c"
                                                                           )
 return 
# 2780 "option.c" 3 4
       ((void *)0)
# 2780 "option.c"
           ;

    p = *(char_u **)(options[opt_idx].var);




    expand_env(p, NameBuff, 1024);
    if (strcmp((char *)(NameBuff), (char *)(p)) == 0)
 return 
# 2789 "option.c" 3 4
       ((void *)0)
# 2789 "option.c"
           ;

    return vim_strsave(NameBuff);
}




    void
check_options()
{
    int opt_idx;
    char_u **p;

    for (opt_idx = 0; options[opt_idx].fullname != 
# 2803 "option.c" 3 4
                                                  ((void *)0)
# 2803 "option.c"
                                                      ; opt_idx++)
 if ((options[opt_idx].flags & 0x04) && options[opt_idx].var != 
# 2804 "option.c" 3 4
                                                                   ((void *)0)
# 2804 "option.c"
                                                                       )
 {
     p = (char_u **)get_varp(&(options[opt_idx]));
     if (*p == 
# 2807 "option.c" 3 4
              ((void *)0)
# 2807 "option.c"
                  )
  *p = empty_option;
 }
}




    void
check_buf_options(buf)
    BUF *buf;
{




    if (buf->b_p_ff == 
# 2823 "option.c" 3 4
                      ((void *)0)
# 2823 "option.c"
                          )
 buf->b_p_ff = empty_option;

    if (buf->b_p_key == 
# 2826 "option.c" 3 4
                       ((void *)0)
# 2826 "option.c"
                           )
 buf->b_p_key = empty_option;

    if (buf->b_p_mps == 
# 2829 "option.c" 3 4
                       ((void *)0)
# 2829 "option.c"
                           )
 buf->b_p_mps = empty_option;
    if (buf->b_p_fo == 
# 2831 "option.c" 3 4
                      ((void *)0)
# 2831 "option.c"
                          )
 buf->b_p_fo = empty_option;
    if (buf->b_p_isk == 
# 2833 "option.c" 3 4
                       ((void *)0)
# 2833 "option.c"
                           )
 buf->b_p_isk = empty_option;

    if (buf->b_p_com == 
# 2836 "option.c" 3 4
                       ((void *)0)
# 2836 "option.c"
                           )
 buf->b_p_com = empty_option;

    if (buf->b_p_nf == 
# 2839 "option.c" 3 4
                      ((void *)0)
# 2839 "option.c"
                          )
 buf->b_p_nf = empty_option;

    if (buf->b_p_syn == 
# 2842 "option.c" 3 4
                       ((void *)0)
# 2842 "option.c"
                           )
 buf->b_p_syn = empty_option;


    if (buf->b_p_cink == 
# 2846 "option.c" 3 4
                        ((void *)0)
# 2846 "option.c"
                            )
 buf->b_p_cink = empty_option;
    if (buf->b_p_cino == 
# 2848 "option.c" 3 4
                        ((void *)0)
# 2848 "option.c"
                            )
 buf->b_p_cino = empty_option;


    if (buf->b_p_ft == 
# 2852 "option.c" 3 4
                      ((void *)0)
# 2852 "option.c"
                          )
 buf->b_p_ft = empty_option;






    if (buf->b_p_cinw == 
# 2860 "option.c" 3 4
                        ((void *)0)
# 2860 "option.c"
                            )
 buf->b_p_cinw = empty_option;


    if (buf->b_p_cpt == 
# 2864 "option.c" 3 4
                       ((void *)0)
# 2864 "option.c"
                           )
 buf->b_p_cpt = empty_option;

}
# 2876 "option.c"
    void
free_string_option(p)
    char_u *p;
{
    if (p != empty_option)
 vim_free(p);
}




    void
set_term_option_alloced(p)
    char_u **p;
{
    int opt_idx;

    for (opt_idx = 1; options[opt_idx].fullname != 
# 2893 "option.c" 3 4
                                                  ((void *)0)
# 2893 "option.c"
                                                      ; opt_idx++)
 if (options[opt_idx].var == (char_u *)p)
 {
     options[opt_idx].flags |= 0x08;
     return;
 }
    return;
}







    void
set_string_option_direct(name, opt_idx, val, dofree)
    char_u *name;
    int opt_idx;
    char_u *val;
    int dofree;
{
    char_u *s;
    char_u **varp;

    if (opt_idx == -1)
    {
 opt_idx = findoption(name);
 if (opt_idx == -1)
     return;
    }

    if (options[opt_idx].var == 
# 2925 "option.c" 3 4
                               ((void *)0)
# 2925 "option.c"
                                   )
 return;

    s = vim_strsave(val);
    if (s != 
# 2929 "option.c" 3 4
            ((void *)0)
# 2929 "option.c"
                )
    {
 varp = (char_u **)get_varp(&(options[opt_idx]));
 if (dofree && (options[opt_idx].flags & 0x08))
     free_string_option(*varp);
 *varp = s;
 options[opt_idx].flags |= 0x08;
    }
}




    static void
set_string_option(opt_idx, value)
    int opt_idx;
    char_u *value;
{
    char_u *s;
    char_u **varp;
    char_u *oldval;

    if (options[opt_idx].var == 
# 2951 "option.c" 3 4
                               ((void *)0)
# 2951 "option.c"
                                   )
 return;

    s = vim_strsave(value);
    if (s != 
# 2955 "option.c" 3 4
            ((void *)0)
# 2955 "option.c"
                )
    {
 varp = (char_u **)get_varp(&(options[opt_idx]));
 oldval = *varp;
 *varp = s;
 options[opt_idx].flags |= 0x100;
 (void)did_set_string_option(opt_idx, varp, 1, oldval, 
# 2961 "option.c" 3 4
                                                         ((void *)0)
# 2961 "option.c"
                                                             );
    }
}





    static char_u *
did_set_string_option(opt_idx, varp, new_value_alloced, oldval, errbuf)
    int opt_idx;
    char_u **varp;
    int new_value_alloced;
    char_u *oldval;
    char_u *errbuf;
{
    char_u *errmsg = 
# 2977 "option.c" 3 4
                    ((void *)0)
# 2977 "option.c"
                        ;
    char_u *s, *p;
    int did_chartab = 0;


    if (varp == &(term_strings[(int)(KS_NAME)]))
    {
 if ((term_strings[(int)(KS_NAME)])[0] == '\000')
     errmsg = (char_u *)"Cannot set 'term' to empty string";






 else if (set_termname((term_strings[(int)(KS_NAME)])) == 0)
     errmsg = (char_u *)"Not found in termcap";
 else
 {

     out_str((term_strings[(int)(KS_ME)]));
     redraw_later(50);
 }
    }


    else if ((varp == &p_bex || varp == &p_pm))
    {
 if (strcmp((char *)(*p_bex == '.' ? p_bex + 1 : p_bex), (char *)(*p_pm == '.' ? p_pm + 1 : p_pm))
                                       == 0)
     errmsg = (char_u *)"'backupext' and 'patchmode' are equal";
    }






    else if ( varp == &p_isi
     || varp == &(curbuf->b_p_isk)
     || varp == &p_isp
     || varp == &p_isf)
    {
 if (init_chartab() == 0)
 {
     did_chartab = 1;
     errmsg = e_invarg;
 }
    }


    else if (varp == &p_hf)
    {

 if (didset_vim)
 {
     vim_setenv((char_u *)"VIM", (char_u *)"");
     didset_vim = 0;
 }
 if (didset_vimruntime)
 {
     vim_setenv((char_u *)"VIMRUNTIME", (char_u *)"");
     didset_vimruntime = 0;
 }
    }


    else if (varp == &p_hl)
    {
 if (highlight_changed() == 0)
     errmsg = e_invarg;
    }


    else if (varp == &(curbuf->b_p_nf))
    {
 if (check_opt_strings(curbuf->b_p_nf, p_nf_values, 1) != 1)
     errmsg = e_invarg;
    }



    else if (varp == &(p_sessopt))
    {
 if (check_opt_strings(p_sessopt, p_sessopt_values, 1) != 1)
     errmsg = e_invarg;
    }




    else if (varp == &(p_sbo))
    {
 if (check_opt_strings(p_sbo, p_scbopt_values, 1) != 1)
     errmsg = e_invarg;
    }



    else if (varp == &p_bg)
    {
 if (check_opt_strings(p_bg, p_bg_values, 0) == 1)
     init_highlight(0);
 else
     errmsg = e_invarg;
    }


    else if (varp == &p_wim)
    {
 if (check_opt_wim() == 0)
     errmsg = e_invarg;
    }
# 3114 "option.c"
    else if (varp == &p_ei)
    {
 if (check_ei() == 0)
     errmsg = e_invarg;
    }
# 3180 "option.c"
    else if (varp == &(curbuf->b_p_ff))
    {
 if (check_opt_strings(curbuf->b_p_ff, p_ff_values, 0) != 1)
     errmsg = e_invarg;
 else
 {

     if (get_fileformat(curbuf) == 1)
  curbuf->b_p_tx = 1;
     else
  curbuf->b_p_tx = 0;
 }
    }


    else if (varp == &p_ffs)
    {
 if (check_opt_strings(p_ffs, p_ff_values, 1) != 1)
     errmsg = e_invarg;
 else
 {

     if (*p_ffs == '\000')
  p_ta = 0;
     else
  p_ta = 1;
 }
    }



    else if (varp == &(curbuf->b_p_key))
    {


 remove_key_from_history();
    }



    else if (varp == &(curbuf->b_p_mps))
    {

 for (p = curbuf->b_p_mps; *p; p += 4)
 {
     if (!p[0] || p[1] != ':' || !p[2] || (p[3] && p[3] != ','))
     {
  errmsg = e_invarg;
  break;
     }
     if (!p[3])
  break;
 }
    }



    else if (varp == &(curbuf->b_p_com))
    {
 for (s = curbuf->b_p_com; *s; )
 {
     while (*s && *s != ':')
     {
  if (vim_strchr((char_u *)"nbsmexflrO", *s) == 
# 3243 "option.c" 3 4
                                          ((void *)0)
       
# 3244 "option.c"
      && !
# 3244 "option.c" 3 4
          ((*__ctype_b_loc ())[(int) ((
# 3244 "option.c"
          *s
# 3244 "option.c" 3 4
          ))] & (unsigned short int) _ISdigit) 
# 3244 "option.c"
                      && *s != '-')
  {
      errmsg = illegal_char(errbuf, *s);
      break;
  }
  ++s;
     }
     if (*s++ == '\000')
  errmsg = (char_u *)"Missing colon";
     else if (*s == ',' || *s == '\000')
  errmsg = (char_u *)"Zero length string";
     if (errmsg != 
# 3255 "option.c" 3 4
                  ((void *)0)
# 3255 "option.c"
                      )
  break;
     while (*s && *s != ',')
     {
  if (*s == '\\' && s[1] != '\000')
      ++s;
  ++s;
     }
     s = skip_to_option_part(s);
 }
    }



    else if (varp == &p_lcs)
    {
 int round, i, len;


 for (round = 0; round <= 1 && errmsg == 
# 3274 "option.c" 3 4
                                        ((void *)0)
# 3274 "option.c"
                                            ; ++round)
 {
     static struct lcstab
     {
  int *lcsp;
  char *name;
     } lcstab[] =
     {
  {&lcs_eol, "eol"},
  {&lcs_ext, "extends"},
  {&lcs_tab2, "tab"},
  {&lcs_trail, "trail"},
     };

     if (round)
     {
  for (i = 0; i < sizeof(lcstab) / sizeof(struct lcstab); ++i)
      *(lcstab[i].lcsp) = '\000';
  lcs_tab1 = '\000';
     }
     p = p_lcs;
     while (*p)
     {
  for (i = 0; i < sizeof(lcstab) / sizeof(struct lcstab); ++i)
  {
      len = strlen((char *)(lcstab[i].name));
      if (strncmp((char *)(p), (char *)(lcstab[i].name), (size_t)(len)) == 0
       && p[len] == ':'
       && p[len + 1] != '\000')
      {
   if (lcstab[i].lcsp == &lcs_tab2)
       ++len;
   if (p[len + 1] != '\000'
       && (p[len + 2] == ',' || p[len + 2] == '\000'))
   {
       if (round)
       {
    *(lcstab[i].lcsp) = p[len + 1];
    if (lcstab[i].lcsp == &lcs_tab2)
        lcs_tab1 = p[len];
       }
       p += len + 2;
       break;
   }
      }
  }

  if (i == sizeof(lcstab) / sizeof(struct lcstab))
  {
      errmsg = e_invarg;
      break;
  }
  if (*p == ',')
      ++p;
     }
 }
    }



    else if (varp == &(p_viminfo))
    {
 for (s = p_viminfo; *s;)
 {

     if (vim_strchr((char_u *)"\"'%!fhrn:/", *s) == 
# 3339 "option.c" 3 4
                                                   ((void *)0)
# 3339 "option.c"
                                                       )
     {
  errmsg = illegal_char(errbuf, *s);
  break;
     }
     if (*s == 'n')
     {
  break;
     }
     else if (*s == 'r')
     {
  while (*++s && *s != ',')
      ;
     }
     else if (*s == '%' || *s == '!' || *s == 'h')
  ++s;
     else
     {
  while (
# 3357 "option.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 3357 "option.c"
        *++s
# 3357 "option.c" 3 4
        ))] & (unsigned short int) _ISdigit)
# 3357 "option.c"
                     )
      ;

  if (!
# 3360 "option.c" 3 4
      ((*__ctype_b_loc ())[(int) ((
# 3360 "option.c"
      *(s - 1)
# 3360 "option.c" 3 4
      ))] & (unsigned short int) _ISdigit)
# 3360 "option.c"
                       )
  {
      if (errbuf != 
# 3362 "option.c" 3 4
                   ((void *)0)
# 3362 "option.c"
                       )
      {
   sprintf((char *)errbuf, "Missing number after <%s>",
        transchar(*(s - 1)));
   errmsg = errbuf;
      }
      else
   errmsg = (char_u *)"";
      break;
  }
     }
     if (*s == ',')
  ++s;
     else if (*s)
     {
  if (errbuf != 
# 3377 "option.c" 3 4
               ((void *)0)
# 3377 "option.c"
                   )
      errmsg = (char_u *)"Missing comma";
  else
      errmsg = (char_u *)"";
  break;
     }
 }
 if (*p_viminfo && errmsg == 
# 3384 "option.c" 3 4
                            ((void *)0) 
# 3384 "option.c"
                                 && get_viminfo_parameter('\'') < 0)
     errmsg = (char_u *)"Must specify a ' value";
    }



    else if (istermoption(&options[opt_idx]) && full_screen)
    {

 if (varp == &(term_strings[(int)(KS_CCO)]) && atoi((char *)(term_strings[(int)(KS_CCO)])) == 0)
 {
     if (new_value_alloced)
  vim_free((term_strings[(int)(KS_CCO)]));
     (term_strings[(int)(KS_CCO)]) = empty_option;
 }
 ttest(0);
 if (varp == &(term_strings[(int)(KS_ME)]))
 {
     out_str((term_strings[(int)(KS_ME)]));
     redraw_later(50);






 }
    }



    else if (varp == &p_sbr)
    {
 for (s = p_sbr; *s; ++s)
     if (charsize(*s) != 1)
  errmsg = (char_u *)"contains unprintable character";
    }
# 3457 "option.c"
    else if (varp == &p_breakat)
 fill_breakat_flags();




    else if (varp == &p_titlestring
          || varp == &p_iconstring)
    {

 int flagval = (varp == &p_titlestring) ? 2 : 1;


 if (vim_strchr(*varp, '%') && check_stl_option(*varp) == 
# 3470 "option.c" 3 4
                                                         ((void *)0)
# 3470 "option.c"
                                                             )
     stl_syntax |= flagval;
 else
     stl_syntax &= ~flagval;

 did_set_title(varp == &p_iconstring);

    }
# 3488 "option.c"
    else if (varp == &p_ttym)
    {
 if (check_opt_strings(p_ttym, p_ttym_values, 0) != 1)
     errmsg = e_invarg;
 else
     check_mouse_termcode();
    }



    else if (varp == &p_sel)
    {
 if (*p_sel == '\000'
  || check_opt_strings(p_sel, p_sel_values, 0) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &p_slm)
    {
 if (check_opt_strings(p_slm, p_slm_values, 1) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &p_bsdir)
    {
 if (check_opt_strings(p_bsdir, p_bsdir_values, 0) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &p_km)
    {
 if (check_opt_strings(p_km, p_km_values, 1) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &p_mousem)
    {
 if (check_opt_strings(p_mousem, p_mousem_values, 0) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &(p_swb))
    {
 if (check_opt_strings(p_swb, p_swb_values, 1) != 1)
     errmsg = e_invarg;
    }


    else if (varp == &(p_dy))
    {
 if (check_opt_strings(p_dy, p_dy_values, 1) != 1)
     errmsg = e_invarg;
    }
# 3560 "option.c"
    else if (varp == &(curbuf->b_p_syn))
    {
 apply_autocmds(EVENT_SYNTAX, curbuf->b_p_syn,
          curbuf->b_fname, 1, curbuf);
    }



    else if (varp == &(curbuf->b_p_ft))
    {
 apply_autocmds(EVENT_FILETYPE, curbuf->b_p_ft,
          curbuf->b_fname, 1, curbuf);
    }




    else if (varp == &p_stl || varp == &p_ruf)
    {
 int wid;

 if (varp == &p_ruf)
     ru_wid = 0;
 s = *varp;
 if (varp == &p_ruf && *s == '%')
 {

     if (*++s == '-')
  s++;
     wid = getdigits(&s);
     if (wid && *s == '(' && (errmsg = check_stl_option(p_ruf)) == 
# 3590 "option.c" 3 4
                                                                  ((void *)0)
# 3590 "option.c"
                                                                      )
  ru_wid = wid;
     else
  errmsg = check_stl_option(p_ruf);
 }
 else
     errmsg = check_stl_option(s);
 if (varp == &(p_ruf) && errmsg == 
# 3597 "option.c" 3 4
                                  ((void *)0)
# 3597 "option.c"
                                      )
     comp_col();
    }




    else if (varp == &(curbuf->b_p_cpt))
    {
 for (s = curbuf->b_p_cpt; *s;)
 {
     while(*s == ',' || *s == ' ')
  s++;
     if (!*s)
  break;
     if (vim_strchr((char_u *)".wbukid]t", *s) == 
# 3612 "option.c" 3 4
                                                 ((void *)0)
# 3612 "option.c"
                                                     )
     {
  errmsg = illegal_char(errbuf, *s);
  break;
     }
     if (*++s != '\000' && *s != ',' && *s != ' ')
     {
  if (*(s-1) == 'k')
  {

      while (*s && *s != ',' && *s != ' ')
      {
   if (*s == '\\')
       ++s;
   ++s;
      }
  }
  else
  {
      if (errbuf != 
# 3631 "option.c" 3 4
                   ((void *)0)
# 3631 "option.c"
                       )
      {
   sprintf((char *)errbuf,
     "Illegal character after <%c>", *--s);
   errmsg = errbuf;
      }
      else
   errmsg = (char_u *)"";
      break;
  }
     }
 }
    }
# 3659 "option.c"
    else if (varp == &p_pt)
    {
 if (*p_pt)
 {
     (void)replace_termcodes(p_pt, &p, 1, 1);
     if (p != 
# 3664 "option.c" 3 4
             ((void *)0)
# 3664 "option.c"
                 )
     {
  if (new_value_alloced)
      vim_free(p_pt);
  p_pt = p;
  new_value_alloced = 1;
     }
 }
    }


    else if (varp == &p_bs)
    {
 if (
# 3677 "option.c" 3 4
    ((*__ctype_b_loc ())[(int) ((
# 3677 "option.c"
    *p_bs
# 3677 "option.c" 3 4
    ))] & (unsigned short int) _ISdigit)
# 3677 "option.c"
                  )
 {
     if (*p_bs >'2' || p_bs[1] != '\000')
  errmsg = e_invarg;
 }
 else if (check_opt_strings(p_bs, p_bs_values, 1) != 1)
     errmsg = e_invarg;
    }


    else
    {
 p = 
# 3689 "option.c" 3 4
    ((void *)0)
# 3689 "option.c"
        ;
 if (varp == &p_ww)
     p = (char_u *)"bshl<>[],~";
 if (varp == &p_shm)
     p = (char_u *)"rmfixlnwaWtToOsAI";
 else if (varp == &(p_cpo))
     p = (char_u *)"aAbBcCdeEfFjJkKlLmoOprsStuwWxy$!%*<";
 else if (varp == &(curbuf->b_p_fo))
     p = (char_u *)"tcroq2vlb,";
 else if (varp == &p_mouse)
 {

     p = (char_u *)"anvichr";




 }




 if (p != 
# 3711 "option.c" 3 4
         ((void *)0)
# 3711 "option.c"
             )
 {
     for (s = *varp; *s; ++s)
  if (vim_strchr(p, *s) == 
# 3714 "option.c" 3 4
                          ((void *)0)
# 3714 "option.c"
                              )
  {
      errmsg = illegal_char(errbuf, *s);
      break;
  }
 }
    }




    if (errmsg != 
# 3725 "option.c" 3 4
                 ((void *)0)
# 3725 "option.c"
                     )
    {
 if (new_value_alloced)
     vim_free(*varp);
 *varp = oldval;



 if (did_chartab)
     (void)init_chartab();
 if (varp == &p_hl)
     (void)highlight_changed();
    }
    else
    {



 if (options[opt_idx].flags & 0x08)
     free_string_option(oldval);
 if (new_value_alloced)
     options[opt_idx].flags |= 0x08;
 else
     options[opt_idx].flags &= ~0x08;
    }


    if (varp == &p_mouse)
    {
 if (*p_mouse == '\000')
     mch_setmouse(0);
 else
     setmouse();
    }


    curwin->w_set_curswant = 1;
    check_redraw(options[opt_idx].flags);

    return errmsg;
}






    char_u *
check_stl_option(s)
    char_u *s;
{
    int itemcnt = 0;
    int groupdepth = 0;
    static char_u errbuf[80];

    while (*s && itemcnt < 50)
    {

 while (*s && *s != '%')
     s++;
 if (!*s)
     break;
 s++;
 if (*s == '%' || *s == '<' || *s == '=')
 {
     s++;
     continue;
 }
 if (*s == ')')
 {
     s++;
     groupdepth--;
     continue;
 }
 if (*s == '-')
     s++;
 while (
# 3801 "option.c" 3 4
       ((*__ctype_b_loc ())[(int) ((
# 3801 "option.c"
       *s
# 3801 "option.c" 3 4
       ))] & (unsigned short int) _ISdigit)
# 3801 "option.c"
                  )
     s++;
 if (*s == '*')
     continue;
 if (*s == '.')
 {
     s++;
     while (*s && 
# 3808 "option.c" 3 4
                 ((*__ctype_b_loc ())[(int) ((
# 3808 "option.c"
                 *s
# 3808 "option.c" 3 4
                 ))] & (unsigned short int) _ISdigit)
# 3808 "option.c"
                            )
  s++;
 }
 if (*s == '(')
 {
     groupdepth++;
     continue;
 }
 if (vim_strchr(((char_u *) "fFtcvVlLnoObBrRhHmYyWwMpPa{"), *s) == 
# 3816 "option.c" 3 4
                               ((void *)0)
# 3816 "option.c"
                                   )
 {
     return illegal_char(errbuf, *s);
 }
 if (*s == '{')
 {
     s++;
     while (*s != '}' && *s)
  s++;
     if (*s != '}')
  return (char_u *) "Unclosed expression sequence";
 }
    }
    if (itemcnt >= 50)
 return (char_u *) "too many items";
    if (groupdepth != 0)
 return (char_u *) "unbalanced groups";
    return 
# 3833 "option.c" 3 4
          ((void *)0)
# 3833 "option.c"
              ;
}






    static char_u *
set_bool_option(opt_idx, varp, value)
    int opt_idx;
    char_u *varp;
    int value;
{
    int old_p_bin = curbuf->b_p_bin;
    int old_p_ea = p_ea;
    int old_p_wiv = p_wiv;
# 3858 "option.c"
    if (secure && (int *)varp == &p_secure)
 return (char_u *)"not allowed here";





    *(int *)varp = value;


    if ((int *)varp == &p_cp)
    {
 compatible_set();
    }


    else if ((int *)varp == &curbuf->b_p_ro && !curbuf->b_p_ro)
 readonlymode = 0;


    else if ((int *)varp == &curbuf->b_p_bin)
    {
 set_options_bin(old_p_bin, curbuf->b_p_bin);
    }


    else if ((int *)varp == &curbuf->b_p_swf)
    {
 if (curbuf->b_p_swf && p_uc)
     ml_open_file(curbuf);
 else
     mf_close_file(curbuf, 1);
    }


    else if ((int *)varp == &p_terse)
    {
 char_u *p;

 p = vim_strchr(p_shm, 's');


 if (p_terse && p == 
# 3900 "option.c" 3 4
                    ((void *)0)
# 3900 "option.c"
                        )
 {
     strcpy((char *)(IObuff), (char *)(p_shm));
     strcat((char *)(IObuff), (char *)("s"));
     set_string_option_direct((char_u *)"shm", -1, IObuff, 1);
 }

 else if (!p_terse && p != 
# 3907 "option.c" 3 4
                          ((void *)0)
# 3907 "option.c"
                              )
     mch_memmove(p, p + 1, strlen((char *)(p)));
    }

    else if ((int *)varp == &p_paste)
    {
 paste_option_changed();
    }

    else if ((int *)varp == &p_ic && p_hls)
    {
 redraw_all_later(40);
    }


    else if ((int *)varp == &p_hls)
    {
 no_hlsearch = 0;
    }


    else if ((int *)varp == &curbuf->b_p_tx)
    {
 set_fileformat(curbuf->b_p_tx ? 1 : 0);
    }

    else if ((int *)varp == &p_ta)
    {
 set_string_option_direct((char_u *)"ffs", -1,
         p_ta ? (char_u *)"unix,dos" : (char_u *)"", 1);
    }





    else if (varp == (char_u *)&(curbuf->b_p_lisp))
 init_chartab();



    else if ((int *)varp == &p_title)
 did_set_title(0);
    else if ((int *)varp == &p_icon)
 did_set_title(1);

    else if ((int *)varp == &curbuf->b_changed)
    {
 if (!value)
     curbuf->b_start_ffc = *curbuf->b_p_ff;

 modified_was_set = value;

    }
# 3982 "option.c"
    if (p_ea && !old_p_ea)
 win_equal(curwin, 0);





    if (p_wiv && !old_p_wiv)
 (term_strings[(int)(KS_XS)]) = (char_u *)"y";
    else if (!p_wiv && old_p_wiv)
 (term_strings[(int)(KS_XS)]) = empty_option;
    p_wiv = (*(term_strings[(int)(KS_XS)]) != '\000');
# 4037 "option.c"
    options[opt_idx].flags |= 0x100;

    comp_col();
    curwin->w_set_curswant = 1;
    check_redraw(options[opt_idx].flags);

    return 
# 4043 "option.c" 3 4
          ((void *)0)
# 4043 "option.c"
              ;
}





    static char_u *
set_num_option(opt_idx, varp, value, errbuf)
    int opt_idx;
    char_u *varp;
    long value;
    char_u *errbuf;
{
    char_u *errmsg = 
# 4057 "option.c" 3 4
                     ((void *)0)
# 4057 "option.c"
                         ;
    long old_Rows = Rows;
    long old_Columns = Columns;
    long old_p_ch = p_ch;
    long old_p_uc = p_uc;

    long old_titlelen = p_titlelen;






    *(long *)varp = value;




    if ((long *)varp == &p_wh || (long *)varp == &p_hh)
    {
 if (p_wh < 1)
 {
     errmsg = e_positive;
     p_wh = 1;
 }
 if (p_wmh > p_wh)
 {
     errmsg = (char_u *)"'winheight' cannot be smaller than 'winminheight'";
     p_wh = p_wmh;
 }
 if (p_hh < 0)
 {
     errmsg = e_positive;
     p_hh = 0;
 }


 if (lastwin != firstwin)
 {
     if ((long *)varp == &p_wh && curwin->w_height < p_wh)
  win_setheight((int)p_wh);
     if ((long *)varp == &p_hh && curbuf->b_help
         && curwin->w_height < p_hh)
  win_setheight((int)p_hh);
 }
    }


    else if ((long *)varp == &p_wmh)
    {
 if (p_wmh < 0)
 {
     errmsg = e_positive;
     p_wh = 0;
 }
 if (p_wmh > p_wh)
 {
     errmsg = (char_u *)"'winheight' cannot be smaller than 'winminheight'";
     p_wmh = p_wh;
 }
 win_setminheight();
    }


    else if ((long *)varp == &p_ls)
    {
 last_status();
    }




    if (Rows < min_rows() && full_screen)
    {
 if (errbuf != 
# 4131 "option.c" 3 4
              ((void *)0)
# 4131 "option.c"
                  )
 {
     sprintf((char *)errbuf, "Need at least %d lines", min_rows());
     errmsg = errbuf;
 }
 Rows = min_rows();
    }
    if (Columns < 12 && full_screen)
    {
 if (errbuf != 
# 4140 "option.c" 3 4
              ((void *)0)
# 4140 "option.c"
                  )
 {
     sprintf((char *)errbuf, "Need at least %d columns", 12);
     errmsg = errbuf;
 }
 Columns = 12;
    }
# 4158 "option.c"
    if ((old_Rows != Rows || old_Columns != Columns) && full_screen)
    {
 ui_set_winsize();
 check_winsize();



    }

    if (curbuf->b_p_sts < 0)
    {
 errmsg = e_positive;
 curbuf->b_p_sts = 0;
    }
    if (curbuf->b_p_ts <= 0)
    {
 errmsg = e_positive;
 curbuf->b_p_ts = 8;
    }
    if (curbuf->b_p_sw <= 0)
    {
 errmsg = e_positive;
 curbuf->b_p_sw = curbuf->b_p_ts;
    }
    if (curbuf->b_p_tw < 0)
    {
 errmsg = e_positive;
 curbuf->b_p_tw = 0;
    }
    if (p_tm < 0)
    {
 errmsg = e_positive;
 p_tm = 0;
    }

    if (p_titlelen < 0)
    {
 errmsg = e_positive;
 p_titlelen = 85;
    }

    if ((curwin->w_p_scroll <= 0
  || (curwin->w_p_scroll > curwin->w_height
      && curwin->w_height > 0))
     && full_screen)
    {
 if ((long *)varp == &(curwin->w_p_scroll))
 {
     if (curwin->w_p_scroll != 0)
  errmsg = e_scroll;
     win_comp_scroll(curwin);
 }


 else if (curwin->w_p_scroll <= 0)
     curwin->w_p_scroll = 1;
 else
     curwin->w_p_scroll = curwin->w_height;
    }
    if (p_report < 0)
    {
 errmsg = e_positive;
 p_report = 1;
    }
    if ((p_sj < 0 || p_sj >= Rows) && full_screen)
    {
 if (Rows != old_Rows)
     p_sj = Rows / 2;
 else
 {
     errmsg = e_scroll;
     p_sj = 1;
 }
    }
    if (p_so < 0 && full_screen)
    {
 errmsg = e_scroll;
 p_so = 0;
    }
    if (p_uc < 0)
    {
 errmsg = e_positive;
 p_uc = 100;
    }
    if (p_ch < 1)
    {
 errmsg = e_positive;
 p_ch = 1;
    }
    if (p_ut < 0)
    {
 errmsg = e_positive;
 p_ut = 2000;
    }
    if (p_ss < 0)
    {
 errmsg = e_positive;
 p_ss = 0;
    }


    if (p_uc && !old_p_uc)
 ml_open_files();


    if (p_ch != old_p_ch)
 command_height(old_p_ch);



    if (old_titlelen != p_titlelen && starting != 2)
 maketitle();


    options[opt_idx].flags |= 0x100;

    comp_col();
    curwin->w_set_curswant = 1;
    check_redraw(options[opt_idx].flags);

    return errmsg;
}




    static void
check_redraw(flags)
    int flags;
{
    if (flags & (0x1000 | 0x4000))
 status_redraw_all();

    if (flags & (0x2000 | 0x4000))
    {

 changed_line_abv_curs();
 invalidate_botline();
 update_topline();
    }

    if (flags & 0x2000)
 redraw_curbuf_later(40);
    if (flags & 0x4000)
 redraw_all_later(40);
    if ((flags & 0x7000) == 0x7000)
 redraw_all_later(50);
}





    static int
findoption(arg)
    char_u *arg;
{
    int opt_idx;
    char *s, *p;
    static short quick_tab[27] = {0, 0};
    int is_term_opt;






    if (quick_tab[1] == 0)
    {
 p = options[0].fullname;
 for (opt_idx = 1; (s = options[opt_idx].fullname) != 
# 4328 "option.c" 3 4
                                                     ((void *)0)
# 4328 "option.c"
                                                         ; opt_idx++)
 {
     if (s[0] != p[0])
     {
  if (s[0] == 't' && s[1] == '_')
      quick_tab[26] = opt_idx;
  else
      quick_tab[s[0] - 'a'] = opt_idx;
     }
     p = s;
 }
    }




    if (arg[0] < 'a' || arg[0] > 'z')
 return -1;

    is_term_opt = (arg[0] == 't' && arg[1] == '_');
    if (is_term_opt)
 opt_idx = quick_tab[26];
    else
 opt_idx = quick_tab[arg[0] - 'a'];
    for ( ; (s = options[opt_idx].fullname) != 
# 4352 "option.c" 3 4
                                              ((void *)0)
# 4352 "option.c"
                                                  ; opt_idx++)
    {
 if (strcmp((char *)(arg), (char *)(s)) == 0)
     break;
    }
    if (s == 
# 4357 "option.c" 3 4
            ((void *)0) 
# 4357 "option.c"
                 && !is_term_opt)
    {
 opt_idx = quick_tab[arg[0] - 'a'];
 for ( ; options[opt_idx].fullname != 
# 4360 "option.c" 3 4
                                     ((void *)0)
# 4360 "option.c"
                                         ; opt_idx++)
 {
     s = options[opt_idx].shortname;
     if (s != 
# 4363 "option.c" 3 4
             ((void *)0) 
# 4363 "option.c"
                  && strcmp((char *)(arg), (char *)(s)) == 0)
  break;
     s = 
# 4365 "option.c" 3 4
        ((void *)0)
# 4365 "option.c"
            ;
 }
    }
    if (s == 
# 4368 "option.c" 3 4
            ((void *)0)
# 4368 "option.c"
                )
 opt_idx = -1;
    return opt_idx;
}
# 4383 "option.c"
    int
get_option_value(name, numval, stringval)
    char_u *name;
    long *numval;
    char_u **stringval;
{
    int opt_idx;
    char_u *varp;

    opt_idx = findoption(name);
    if (opt_idx < 0)
 return -2;

    varp = get_varp(&(options[opt_idx]));
    if (varp == 
# 4397 "option.c" 3 4
               ((void *)0)
# 4397 "option.c"
                   )
 return -1;

    if (options[opt_idx].flags & 0x04)
    {
 if (stringval != 
# 4402 "option.c" 3 4
                 ((void *)0)
# 4402 "option.c"
                     )
 {


     if ((char_u **)varp == &curbuf->b_p_key)
  *stringval = vim_strsave((char_u *)"*****");
     else

  *stringval = vim_strsave(*(char_u **)(varp));
 }
 return 0;
    }
    if (options[opt_idx].flags & 0x02)
 *numval = *(long *)varp;
    else
 *numval = *(int *)varp;
    return 1;
}






    void
set_option_value(name, number, string)
    char_u *name;
    long number;
    char_u *string;
{
    int opt_idx;
    char_u *varp;

    opt_idx = findoption(name);
    if (opt_idx == -1)
 emsg2((char_u *)("Unknown option: %s"), (char_u *)(name));
    else if (options[opt_idx].flags & 0x04)
 set_string_option(opt_idx, string);
    else
    {
 varp = get_varp(&options[opt_idx]);
 if (varp != 
# 4443 "option.c" 3 4
            ((void *)0)
# 4443 "option.c"
                )
 {
     if (options[opt_idx].flags & 0x02)
  (void)set_num_option(opt_idx, varp, number, 
# 4446 "option.c" 3 4
                                             ((void *)0)
# 4446 "option.c"
                                                 );
     else
  (void)set_bool_option(opt_idx, varp, (int)number);
 }
    }
}





    char_u *
get_term_code(tname)
    char_u *tname;
{
    int opt_idx;
    char_u *varp;

    if (tname[0] != 't' || tname[1] != '_' ||
     tname[2] == '\000' || tname[3] == '\000')
 return 
# 4466 "option.c" 3 4
       ((void *)0)
# 4466 "option.c"
           ;
    if ((opt_idx = findoption(tname)) >= 0)
    {
 varp = get_varp(&(options[opt_idx]));
 if (varp != 
# 4470 "option.c" 3 4
            ((void *)0)
# 4470 "option.c"
                )
     varp = *(char_u **)(varp);
 return varp;
    }
    return find_termcode(tname + 2);
}

    char_u *
get_highlight_default()
{
    int i;

    i = findoption((char_u *)"hl");
    if (i >= 0)
 return options[i].def_val[0];
    return (char_u *)
# 4485 "option.c" 3 4
                    ((void *)0)
# 4485 "option.c"
                        ;
}




    static int
find_key_option(arg)
    char_u *arg;
{
    int key;
    int modifiers;





    if (arg[0] == 't' && arg[1] == '_' && arg[2] && arg[3])
 key = ((arg[2]) + ((int)(arg[3]) << 8));
    else
    {
 --arg;
 key = find_special_key(&arg, &modifiers, 1);
 if (modifiers)
     key = 0;
    }
    return key;
}






    static void
showoptions(all)
    int all;
{
    struct vimoption *p;
    int col;
    int isterm;
    char_u *varp;
    struct vimoption **items;
    int item_count;
    int run;
    int row, rows;
    int cols;
    int i;
    int len;




    items = (struct vimoption **)alloc((unsigned)(sizeof(struct vimoption *) *
        (sizeof(options) / sizeof(struct vimoption))));
    if (items == 
# 4540 "option.c" 3 4
                ((void *)0)
# 4540 "option.c"
                    )
 return;


    if (all == 2)
 msg_puts_title((char_u *)("\n--- Terminal codes ---"));
    else
 msg_puts_title((char_u *)("\n--- Options ---"));






    for (run = 1; run <= 2 && !got_int; ++run)
    {



 item_count = 0;
 for (p = &options[0]; p->fullname != 
# 4560 "option.c" 3 4
                                     ((void *)0)
# 4560 "option.c"
                                         ; p++)
 {
     isterm = istermoption(p);
     varp = get_varp(p);
     if (varp != 
# 4564 "option.c" 3 4
                ((void *)0)
      
# 4565 "option.c"
     && ((all == 2 && isterm)
   || (all == 1 && !isterm)
   || (all == 0 && option_not_default(p))))
     {
  if (p->flags & 0x01)
      len = 1;
  else
  {
      option_value2string(p);
      len = strlen((char *)(p->fullname)) + vim_strsize(NameBuff) + 1;
  }
  if ((len <= 20 - 3 && run == 1) ||
      (len > 20 - 3 && run == 2))
      items[item_count++] = p;
     }
 }




 if (run == 1)
 {
     cols = (Columns + 3 - 3) / 20;
     if (cols == 0)
  cols = 1;
     rows = (item_count + cols - 1) / cols;
 }
 else
     rows = item_count;
 for (row = 0; row < rows && !got_int; ++row)
 {
     msg_putchar('\n');
     if (got_int)
  break;
     col = 0;
     for (i = row; i < item_count; i += rows)
     {
  msg_col = col;
  showoneopt(items[i]);
  col += 20;
     }
     out_flush();
     ui_breakcheck();
 }
    }
    vim_free(items);
}




    static int
option_not_default(p)
    struct vimoption *p;
{
    char_u *varp;
    int dvi;

    varp = get_varp(p);
    if (varp == 
# 4624 "option.c" 3 4
               ((void *)0)
# 4624 "option.c"
                   )
 return 0;

    if ((p->flags & 0x400) || p_cp)
 dvi = 0;
    else
 dvi = 1;
    if (p->flags & 0x02)
 return (*(long *)varp != (long)p->def_val[dvi]);
    if (p->flags & 0x01)

 return (*(int *)varp != (int)(long)p->def_val[dvi]);

    return strcmp((char *)(*(char_u **)varp), (char *)(p->def_val[dvi]));
}





    static void
showoneopt(p)
    struct vimoption *p;
{
    char_u *varp;

    varp = get_varp(p);

    if ((p->flags & 0x01) && !*(int *)varp)
 msg_puts((char_u *)("no"));
    else
 msg_puts((char_u *)("  "));
    msg_puts((char_u *)(p->fullname));
    if (!(p->flags & 0x01))
    {
 msg_putchar('=');
 option_value2string(p);
 msg_outtrans(NameBuff);
    }
}





    int
makeset(fd)
    FILE *fd;
{
    struct vimoption *p;
    char_u *s;
    char_u *varp;





    for (p = &options[0]; !istermoption(p); p++)
 if (!(p->flags & 0x200) && !istermoption(p)
         && (option_not_default(p)))
 {
     varp = get_varp(p);
     if (p->flags & 0x01)
     {
  if (fprintf(fd, "set %s%s", *(int *)(varp) ? "" : "no",
            p->fullname) < 0)
      return 0;
     }
     else if (p->flags & 0x02)
     {
  if (fprintf(fd, "set %s=%ld", p->fullname, *(long *)(varp)) < 0)
      return 0;
     }
     else
     {
  if (fprintf(fd, "set %s=", p->fullname) < 0)
      return 0;
  s = *(char_u **)(varp);


  if (s != 
# 4704 "option.c" 3 4
          ((void *)0) 
# 4704 "option.c"
               && putescstr(fd, s, 1) == 0)
      return 0;
     }
     if (put_eol(fd) < 0)
  return 0;
 }
    return 1;
}






    void
clear_termoptions()
{
    struct vimoption *p;







    mch_setmouse(0);





    mch_restore_title(3);







 stoptermcap();

    for (p = &options[0]; p->fullname != 
# 4745 "option.c" 3 4
                                        ((void *)0)
# 4745 "option.c"
                                            ; p++)
 if (istermoption(p))
 {
     if (p->flags & 0x08)
  free_string_option(*(char_u **)(p->var));
     if (p->flags & 0x80)
  free_string_option(p->def_val[0]);
     *(char_u **)(p->var) = empty_option;
     p->def_val[0] = empty_option;
     p->flags &= ~(0x08|0x80);
 }
    clear_termcodes();
}





    void
set_term_defaults()
{
    struct vimoption *p;

    for (p = &options[0]; p->fullname != 
# 4768 "option.c" 3 4
                                        ((void *)0)
# 4768 "option.c"
                                            ; p++)
    {
 if (istermoption(p) && p->def_val[0] != *(char_u **)(p->var))
 {
     if (p->flags & 0x80)
     {
  free_string_option(p->def_val[0]);
  p->flags &= ~0x80;
     }
     p->def_val[0] = *(char_u **)(p->var);
     if (p->flags & 0x08)
     {
  p->flags |= 0x80;
  p->flags &= ~0x08;
     }
 }
    }
}




    static int
istermoption(p)
    struct vimoption *p;
{
    return (p->fullname[0] == 't' && p->fullname[1] == '_');
}
# 4806 "option.c"
    void
comp_col()
{

    int last_has_status = (p_ls == 2 || (p_ls == 1 && firstwin != lastwin));

    sc_col = 0;
    ru_col = 0;
    if (p_ru)
    {

 ru_col = (ru_wid ? ru_wid : 17) + 1;




 if (!last_has_status)
     sc_col = ru_col;
    }
    if (p_sc)
    {
 sc_col += 10;
 if (!p_ru || last_has_status)
     ++sc_col;
    }
    sc_col = Columns - sc_col;
    ru_col = Columns - ru_col;
    if (sc_col <= 0)
 sc_col = 1;
    if (ru_col <= 0)
 ru_col = 1;




}

    static char_u *
get_varp(p)
    struct vimoption *p;
{
    if (!(p->flags & 0x20) || p->var == 
# 4847 "option.c" 3 4
                                        ((void *)0)
# 4847 "option.c"
                                            )
 return p->var;

    switch ((long)(p->var))
    {
 case PV_LIST: return (char_u *)&(curwin->w_p_list);
 case PV_NU: return (char_u *)&(curwin->w_p_nu);



 case PV_SCROLL: return (char_u *)&(curwin->w_p_scroll);
 case PV_WRAP: return (char_u *)&(curwin->w_p_wrap);

 case PV_LBR: return (char_u *)&(curwin->w_p_lbr);


 case PV_SCBIND: return (char_u *)&(curwin->w_p_scb);


 case PV_AI: return (char_u *)&(curbuf->b_p_ai);
 case PV_BIN: return (char_u *)&(curbuf->b_p_bin);

 case PV_CIN: return (char_u *)&(curbuf->b_p_cin);
 case PV_CINK: return (char_u *)&(curbuf->b_p_cink);
 case PV_CINO: return (char_u *)&(curbuf->b_p_cino);


 case PV_CINW: return (char_u *)&(curbuf->b_p_cinw);


 case PV_COM: return (char_u *)&(curbuf->b_p_com);


 case PV_CPT: return (char_u *)&(curbuf->b_p_cpt);

 case PV_EOL: return (char_u *)&(curbuf->b_p_eol);
 case PV_ET: return (char_u *)&(curbuf->b_p_et);



 case PV_FF: return (char_u *)&(curbuf->b_p_ff);

 case PV_FT: return (char_u *)&(curbuf->b_p_ft);

 case PV_FO: return (char_u *)&(curbuf->b_p_fo);
 case PV_INF: return (char_u *)&(curbuf->b_p_inf);
 case PV_ISK: return (char_u *)&(curbuf->b_p_isk);

 case PV_KEY: return (char_u *)&(curbuf->b_p_key);

 case PV_LISP: return (char_u *)&(curbuf->b_p_lisp);
 case PV_ML: return (char_u *)&(curbuf->b_p_ml);
 case PV_MPS: return (char_u *)&(curbuf->b_p_mps);
 case PV_MOD: return (char_u *)&(curbuf->b_changed);
 case PV_NF: return (char_u *)&(curbuf->b_p_nf);



 case PV_RO: return (char_u *)&(curbuf->b_p_ro);

 case PV_SI: return (char_u *)&(curbuf->b_p_si);


 case PV_SN: return (char_u *)&(curbuf->b_p_sn);

 case PV_STS: return (char_u *)&(curbuf->b_p_sts);
 case PV_SWF: return (char_u *)&(curbuf->b_p_swf);

 case PV_SYN: return (char_u *)&(curbuf->b_p_syn);

 case PV_SW: return (char_u *)&(curbuf->b_p_sw);
 case PV_TS: return (char_u *)&(curbuf->b_p_ts);
 case PV_TW: return (char_u *)&(curbuf->b_p_tw);
 case PV_TX: return (char_u *)&(curbuf->b_p_tx);
 case PV_WM: return (char_u *)&(curbuf->b_p_wm);
 default: emsg((char_u *)("get_varp ERROR"));
    }

    return (char_u *)&(curbuf->b_p_wm);
}






    void
win_copy_options(wp_from, wp_to)
    WIN *wp_from;
    WIN *wp_to;
{
    wp_to->w_p_list = wp_from->w_p_list;
    wp_to->w_p_nu = wp_from->w_p_nu;






    wp_to->w_p_wrap = wp_from->w_p_wrap;

    wp_to->w_p_lbr = wp_from->w_p_lbr;


    wp_to->w_p_scb = wp_from->w_p_scb;

}
# 4964 "option.c"
    void
buf_copy_options(bp_from, bp_to, flags)
    BUF *bp_from;
    BUF *bp_to;
    int flags;
{
    int should_copy = 1;
    char_u *save_p_isk = 
# 4971 "option.c" 3 4
                         ((void *)0)
# 4971 "option.c"
                             ;
    int dont_do_help;




    if (bp_to == 
# 4977 "option.c" 3 4
                ((void *)0) 
# 4977 "option.c"
                     || !buf_valid(bp_to))
 return;





    if (bp_from != 
# 4984 "option.c" 3 4
                  ((void *)0) 
# 4984 "option.c"
                       && buf_valid(bp_from) && bp_from != bp_to)
    {
# 4998 "option.c"
 if ((vim_strchr(p_cpo, 'S') == 
# 4998 "option.c" 3 4
                                          ((void *)0) 
# 4998 "option.c"
                                               || !(flags & 1))
  && (bp_to->b_p_initialized
      || (!(flags & 1)
   && vim_strchr(p_cpo, 's') != 
# 5001 "option.c" 3 4
                                      ((void *)0)
# 5001 "option.c"
                                          )))
     should_copy = 0;

 if (should_copy || (flags & 2))
 {
     dont_do_help = (flags & 4)
     && (bp_to->b_help || bp_from->b_help);
     if (dont_do_help)
     {
  save_p_isk = bp_to->b_p_isk;
  bp_to->b_p_isk = 
# 5011 "option.c" 3 4
                  ((void *)0)
# 5011 "option.c"
                      ;
     }




     if (!bp_to->b_p_initialized)
     {
  free_buf_options(bp_to, 1);
  bp_to->b_p_ro = 0;
  bp_to->b_p_tx = bp_from->b_p_tx;
  bp_to->b_p_ff = vim_strsave(bp_from->b_p_ff);



     }
     else
  free_buf_options(bp_to, 0);

     bp_to->b_p_ai = bp_from->b_p_ai;
     bp_to->b_p_ai_save = bp_from->b_p_ai_save;
     bp_to->b_p_sw = bp_from->b_p_sw;
     bp_to->b_p_tw = bp_from->b_p_tw;
     bp_to->b_p_tw_save = bp_from->b_p_tw_save;
     bp_to->b_p_tw_nobin = bp_from->b_p_tw_nobin;
     bp_to->b_p_wm = bp_from->b_p_wm;
     bp_to->b_p_wm_save = bp_from->b_p_wm_save;
     bp_to->b_p_wm_nobin = bp_from->b_p_wm_nobin;
     bp_to->b_p_bin = bp_from->b_p_bin;
     bp_to->b_p_et = bp_from->b_p_et;
     bp_to->b_p_et_nobin = bp_from->b_p_et_nobin;
     bp_to->b_p_ml = bp_from->b_p_ml;
     bp_to->b_p_ml_nobin = bp_from->b_p_ml_nobin;
     bp_to->b_p_inf = bp_from->b_p_inf;
     bp_to->b_p_swf = bp_from->b_p_swf;

     bp_to->b_p_cpt = vim_strsave(bp_from->b_p_cpt);

     bp_to->b_p_sts = bp_from->b_p_sts;

     bp_to->b_p_sn = bp_from->b_p_sn;


     bp_to->b_p_com = vim_strsave(bp_from->b_p_com);

     bp_to->b_p_fo = vim_strsave(bp_from->b_p_fo);
     bp_to->b_p_nf = vim_strsave(bp_from->b_p_nf);
     bp_to->b_p_mps = vim_strsave(bp_from->b_p_mps);

     bp_to->b_p_si = bp_from->b_p_si;
     bp_to->b_p_si_save = bp_from->b_p_si_save;


     bp_to->b_p_cin = bp_from->b_p_cin;
     bp_to->b_p_cin_save = bp_from->b_p_cin_save;
     bp_to->b_p_cink = vim_strsave(bp_from->b_p_cink);
     bp_to->b_p_cino = vim_strsave(bp_from->b_p_cino);



     bp_to->b_p_ft = empty_option;





     bp_to->b_p_cinw = vim_strsave(bp_from->b_p_cinw);


     bp_to->b_p_lisp = bp_from->b_p_lisp;
     bp_to->b_p_lisp_save = bp_from->b_p_lisp_save;



     bp_to->b_p_syn = empty_option;


     bp_to->b_p_key = vim_strsave(bp_from->b_p_key);
# 5097 "option.c"
     if (dont_do_help)
  bp_to->b_p_isk = save_p_isk;
     else
     {
  if (!keep_help_flag && bp_from->b_help && !bp_to->b_help
           && help_save_isk != 
# 5102 "option.c" 3 4
                              ((void *)0)
# 5102 "option.c"
                                  )
  {
      bp_to->b_p_isk = vim_strsave(help_save_isk);
      if (bp_to->b_p_isk != 
# 5105 "option.c" 3 4
                           ((void *)0)
# 5105 "option.c"
                               )
   init_chartab();
      bp_to->b_p_ts = help_save_ts;
      bp_to->b_help = 0;
  }
  else
  {
      bp_to->b_p_isk = vim_strsave(bp_from->b_p_isk);
      mch_memmove(bp_to->b_chartab, bp_from->b_chartab,
         (size_t)256);
      bp_to->b_p_ts = bp_from->b_p_ts;
      bp_to->b_help = bp_from->b_help;
  }
     }
 }





 if (should_copy)
     bp_to->b_p_initialized = 1;
    }

    check_buf_options(bp_to);
}



static int expand_option_idx = -1;
static char_u expand_option_name[5] = {'t', '_', '\000', '\000', '\000'};

    void
set_context_in_set_cmd(arg)
    char_u *arg;
{
    int nextchar;
    int flags = 0;
    int opt_idx = 0;
    char_u *p;
    char_u *s;
    char_u *after_blank = 
# 5146 "option.c" 3 4
                         ((void *)0)
# 5146 "option.c"
                             ;
    int is_term_option = 0;
    int key;

    expand_context = 4;
    if (*arg == '\000')
    {
 expand_pattern = arg;
 return;
    }
    p = arg + strlen((char *)(arg)) - 1;
    if (*p == ' ' && *(p - 1) != '\\')
    {
 expand_pattern = p + 1;
 return;
    }
    while (p > arg)
    {
 s = p;

 if (*p == ' ' || *p == ',')
 {
     while (s > arg && *(s - 1) == '\\')
  --s;
 }

 if (*p == ' ' && ((p - s) & 1) == 0)
 {
     ++p;
     break;
 }

 if (after_blank == 
# 5178 "option.c" 3 4
                   ((void *)0)
  
# 5179 "option.c"
 && ((*p == ' ' && (p - s) < 2)
      || (*p == ',' && p == s)))
     after_blank = p + 1;
 --p;
    }
    if (strncmp((char *)(p), (char *)("no"), (size_t)(2)) == 0)
    {
 expand_context = 5;
 p += 2;
    }
    if (strncmp((char *)(p), (char *)("inv"), (size_t)(3)) == 0)
    {
 expand_context = 5;
 p += 3;
    }
    expand_pattern = arg = p;
    if (*arg == '<')
    {
 while (*p != '>')
     if (*p++ == '\000')
  return;
 key = get_special_key_code(arg + 1);
 if (key == 0)
 {
     expand_context = 0;
     return;
 }
 nextchar = *++p;
 is_term_option = 1;
 expand_option_name[2] = ((key) & 0xff);
 expand_option_name[3] = (((unsigned)(key) >> 8) & 0xff);
    }
    else
    {
 if (p[0] == 't' && p[1] == '_')
 {
     p += 2;
     if (*p != '\000')
  ++p;
     if (*p == '\000')
  return;
     nextchar = *++p;
     is_term_option = 1;
     expand_option_name[2] = p[-2];
     expand_option_name[3] = p[-1];
 }
 else
 {
     while (
# 5227 "option.c" 3 4
           ((*__ctype_b_loc ())[(int) ((
# 5227 "option.c"
           *p
# 5227 "option.c" 3 4
           ))] & (unsigned short int) _ISalnum) 
# 5227 "option.c"
                       || *p == '_' || *p == '*')
  p++;
     if (*p == '\000')
  return;
     nextchar = *p;
     *p = '\000';
     opt_idx = findoption(arg);
     *p = nextchar;
     if (opt_idx == -1 || options[opt_idx].var == 
# 5235 "option.c" 3 4
                                                 ((void *)0)
# 5235 "option.c"
                                                     )
     {
  expand_context = 0;
  return;
     }
     flags = options[opt_idx].flags;
     if (flags & 0x01)
     {
  expand_context = 0;
  return;
     }
 }
    }

    if ((nextchar == '-' || nextchar == '+') && p[1] == '=')
    {
 ++p;
 nextchar = '=';
    }
    if ((nextchar != '=' && nextchar != ':')
        || expand_context == 5)
    {
 expand_context = (-1);
 return;
    }
    if (expand_context != 5 && p[1] == '\000')
    {
 expand_context = 7;
 if (is_term_option)
     expand_option_idx = -1;
 else
     expand_option_idx = opt_idx;
 expand_pattern = p + 1;
 return;
    }
    expand_context = 0;
    if (is_term_option || (flags & 0x02))
 return;
    if (after_blank != 
# 5273 "option.c" 3 4
                      ((void *)0)
# 5273 "option.c"
                          )
 expand_pattern = after_blank;
    else
 expand_pattern = p + 1;
    if (flags & 0x10)
    {
 p = options[opt_idx].var;
 if (p == (char_u *)&p_bdir || p == (char_u *)&p_dir ||
             p == (char_u *)&p_path)
 {
     expand_context = 3;
     if (p == (char_u *)&p_path)
  expand_set_path = 1;
 }
 else
     expand_context = 2;
    }
    return;
}

    int
ExpandSettings(prog, num_file, file)
    vim_regexp *prog;
    int *num_file;
    char_u ***file;
{
    int num_normal = 0;
    int num_term = 0;
    int opt_idx;
    int match;
    int count = 0;
    char_u *str;
    int loop;
    int is_term_opt;
    char_u name_buf[23];
    int save_reg_ic;





    for (loop = 0; loop <= 1; ++loop)
    {
 if (expand_context != 5)
 {
     if (vim_regexec(prog, (char_u *)"all", 1))
     {
  if (loop == 0)
      num_normal++;
  else
      (*file)[count++] = vim_strsave((char_u *)"all");
     }
     if (vim_regexec(prog, (char_u *)"termcap", 1))
     {
  if (loop == 0)
      num_normal++;
  else
      (*file)[count++] = vim_strsave((char_u *)"termcap");
     }
 }
 for (opt_idx = 0; (str = (char_u *)options[opt_idx].fullname) != 
# 5333 "option.c" 3 4
                                                                 ((void *)0)
# 5333 "option.c"
                                                                     ;
            opt_idx++)
 {
     if (options[opt_idx].var == 
# 5336 "option.c" 3 4
                                ((void *)0)
# 5336 "option.c"
                                    )
  continue;
     if (expand_context == 5
       && !(options[opt_idx].flags & 0x01))
  continue;
     is_term_opt = istermoption(&options[opt_idx]);
     if (is_term_opt && num_normal > 0)
  continue;
     match = 0;
     if (vim_regexec(prog, str, 1) ||
     (options[opt_idx].shortname != 
# 5346 "option.c" 3 4
                                   ((void *)0) 
# 5346 "option.c"
                                        &&
    vim_regexec(prog,
     (char_u *)options[opt_idx].shortname, 1)))
  match = 1;
     else if (is_term_opt)
     {
  name_buf[0] = '<';
  name_buf[1] = 't';
  name_buf[2] = '_';
  name_buf[3] = str[2];
  name_buf[4] = str[3];
  name_buf[5] = '>';
  name_buf[6] = '\000';
  if (vim_regexec(prog, name_buf, 1))
  {
      match = 1;
      str = name_buf;
  }
     }
     if (match)
     {
  if (loop == 0)
  {
      if (is_term_opt)
   num_term++;
      else
   num_normal++;
  }
  else
      (*file)[count++] = vim_strsave(str);
     }
 }



 if (expand_context != 5 && num_normal == 0)
 {
     for (opt_idx = 0; (str = get_termcode(opt_idx)) != 
# 5383 "option.c" 3 4
                                                       ((void *)0)
# 5383 "option.c"
                                                           ; opt_idx++)
     {
  if (!
# 5385 "option.c" 3 4
      ((*__ctype_b_loc ())[(int) ((
# 5385 "option.c"
      str[0]
# 5385 "option.c" 3 4
      ))] & (unsigned short int) _ISprint) 
# 5385 "option.c"
                      || !
# 5385 "option.c" 3 4
                          ((*__ctype_b_loc ())[(int) ((
# 5385 "option.c"
                          str[1]
# 5385 "option.c" 3 4
                          ))] & (unsigned short int) _ISprint)
# 5385 "option.c"
                                         )
      continue;

  name_buf[0] = 't';
  name_buf[1] = '_';
  name_buf[2] = str[0];
  name_buf[3] = str[1];
  name_buf[4] = '\000';

  match = 0;
  if (vim_regexec(prog, name_buf, 1))
      match = 1;
  else
  {
      name_buf[0] = '<';
      name_buf[1] = 't';
      name_buf[2] = '_';
      name_buf[3] = str[0];
      name_buf[4] = str[1];
      name_buf[5] = '>';
      name_buf[6] = '\000';

      if (vim_regexec(prog, name_buf, 1))
   match = 1;
  }
  if (match)
  {
      if (loop == 0)
   num_term++;
      else
   (*file)[count++] = vim_strsave(name_buf);
  }
     }



     for (opt_idx = 0; (str = get_key_name(opt_idx)) != 
# 5421 "option.c" 3 4
                                                       ((void *)0)
# 5421 "option.c"
                                                           ; opt_idx++)
     {
  name_buf[0] = '<';
  strcpy((char *)(name_buf + 1), (char *)(str));
  strcat((char *)(name_buf), (char *)(">"));

  save_reg_ic = reg_ic;
  reg_ic = 1;
  if (vim_regexec(prog, name_buf, 1))
  {
      if (loop == 0)
   num_term++;
      else
   (*file)[count++] = vim_strsave(name_buf);
  }
  reg_ic = save_reg_ic;
     }
 }
 if (loop == 0)
 {
     if (num_normal > 0)
  *num_file = num_normal;
     else if (num_term > 0)
  *num_file = num_term;
     else
  return 1;
     *file = (char_u **) alloc((unsigned)(*num_file * sizeof(char_u *)));
     if (*file == 
# 5448 "option.c" 3 4
                 ((void *)0)
# 5448 "option.c"
                     )
     {
  *file = (char_u **)"";
  return 0;
     }
 }
    }
    return 1;
}

    int
ExpandOldSetting(num_file, file)
    int *num_file;
    char_u ***file;
{
    char_u *var = 
# 5463 "option.c" 3 4
                  ((void *)0)
# 5463 "option.c"
                      ;
    char_u *buf;

    *num_file = 0;
    *file = (char_u **)alloc((unsigned)sizeof(char_u *));
    if (*file == 
# 5468 "option.c" 3 4
                ((void *)0)
# 5468 "option.c"
                    )
 return 0;




    if (expand_option_idx < 0)
    {
 var = find_termcode(expand_option_name + 2);
 if (var == 
# 5477 "option.c" 3 4
           ((void *)0)
# 5477 "option.c"
               )
     expand_option_idx = findoption(expand_option_name);
    }

    if (expand_option_idx >= 0)
    {

 option_value2string(&options[expand_option_idx]);
 var = NameBuff;
    }
    else if (var == 
# 5487 "option.c" 3 4
                   ((void *)0)
# 5487 "option.c"
                       )
 var = (char_u *)"";


    buf = vim_strsave_escaped(var, escape_chars);

    if (buf == 
# 5493 "option.c" 3 4
              ((void *)0)
# 5493 "option.c"
                  )
    {
 vim_free(*file);
 *file = 
# 5496 "option.c" 3 4
        ((void *)0)
# 5496 "option.c"
            ;
 return 0;
    }

    *file[0] = buf;
    *num_file = 1;
    return 1;
}






    static void
option_value2string(opp)
    struct vimoption *opp;
{
    char_u *varp;

    varp = get_varp(opp);
    if (opp->flags & 0x02)
    {
 if (((long *)varp == &p_wc) || ((long *)varp == &p_wcm))
 {
     long wc = *(long *)varp;
     if (((wc) >= 0x200) || find_special_key_in_table((int)wc) >= 0)
  strcpy((char *)(NameBuff), (char *)(get_special_key_name((int)wc, 0)));
     else
  strcpy((char *)(NameBuff), (char *)(transchar((int)wc)));
 }
 else
     sprintf((char *)NameBuff, "%ld", *(long *)varp);
    }
    else
    {
 varp = *(char_u **)(varp);
 if (varp == 
# 5533 "option.c" 3 4
            ((void *)0)
# 5533 "option.c"
                )
     NameBuff[0] = '\000';


 if (opp->var == (char_u *)PV_KEY && *varp)
     strcpy((char *)(NameBuff), (char *)("*****"));

 else if (opp->flags & 0x10)
     home_replace(
# 5541 "option.c" 3 4
                 ((void *)0)
# 5541 "option.c"
                     , varp, NameBuff, 1024, 0);

 else if ((char_u **)opp->var == &p_pt)
     str2specialbuf(p_pt, NameBuff, 1024);
 else
     strncpy((char *)(NameBuff), (char *)(varp), (size_t)(1024));
    }
}
# 5658 "option.c"
    int
has_format_option(x)
    int x;
{
    if (p_paste)
 return 0;
    return (vim_strchr(curbuf->b_p_fo, x) != 
# 5664 "option.c" 3 4
                                            ((void *)0)
# 5664 "option.c"
                                                );
}





    int
shortmess(x)
    int x;
{
    return ( vim_strchr(p_shm, x) != 
# 5675 "option.c" 3 4
                                      ((void *)0)
     
# 5676 "option.c"
    || (vim_strchr(p_shm, 'a') != 
# 5676 "option.c" 3 4
                                  ((void *)0)
  
# 5677 "option.c"
 && vim_strchr((char_u *)"rmfixlnw", x) != 
# 5677 "option.c" 3 4
                                      ((void *)0)
# 5677 "option.c"
                                          ));
}




    static void
paste_option_changed()
{
    static int old_p_paste = 0;
    static int save_sm = 0;

    static int save_ru = 0;





    BUF *buf;

    if (p_paste)
    {




 if (!old_p_paste)
 {

     for (buf = firstbuf; buf != 
# 5706 "option.c" 3 4
                                ((void *)0)
# 5706 "option.c"
                                    ; buf = buf->b_next)
     {
  buf->b_p_tw_save = buf->b_p_tw;
  buf->b_p_wm_save = buf->b_p_wm;
  buf->b_p_sts_save = buf->b_p_sts;
  buf->b_p_ai_save = buf->b_p_ai;

  buf->b_p_si_save = buf->b_p_si;


  buf->b_p_cin_save = buf->b_p_cin;


  buf->b_p_lisp_save = buf->b_p_lisp;

     }


     save_sm = p_sm;

     save_ru = p_ru;





 }






 for (buf = firstbuf; buf != 
# 5739 "option.c" 3 4
                            ((void *)0)
# 5739 "option.c"
                                ; buf = buf->b_next)
 {
     buf->b_p_tw = 0;
     buf->b_p_wm = 0;
     buf->b_p_sts = 0;
     buf->b_p_ai = 0;

     buf->b_p_si = 0;


     buf->b_p_cin = 0;


     buf->b_p_lisp = 0;

 }


 p_sm = 0;

 if (p_ru)
     status_redraw_all();
 p_ru = 0;





    }




    else if (old_p_paste)
    {

 for (buf = firstbuf; buf != 
# 5775 "option.c" 3 4
                            ((void *)0)
# 5775 "option.c"
                                ; buf = buf->b_next)
 {
     buf->b_p_tw = buf->b_p_tw_save;
     buf->b_p_wm = buf->b_p_wm_save;
     buf->b_p_sts = buf->b_p_sts_save;
     buf->b_p_ai = buf->b_p_ai_save;

     buf->b_p_si = buf->b_p_si_save;


     buf->b_p_cin = buf->b_p_cin_save;


     buf->b_p_lisp = buf->b_p_lisp_save;

 }


 p_sm = save_sm;

 if (p_ru != save_ru)
     status_redraw_all();
 p_ru = save_ru;





    }

    old_p_paste = p_paste;
}
# 5815 "option.c"
    void
vimrc_found()
{
    int opt_idx;

    if (!option_was_set((char_u *)"cp"))
    {
 p_cp = 0;
 for (opt_idx = 0; !istermoption(&options[opt_idx]); opt_idx++)
     if (!(options[opt_idx].flags & (0x100|0x400)))
  set_option_default(opt_idx, 1);
 init_chartab();
    }
}




    void
change_compatible(on)
    int on;
{
    if (p_cp != on)
    {
 p_cp = on;
 compatible_set();
    }
    options[findoption((char_u *)"cp")].flags |= 0x100;
}




    int
option_was_set(name)
    char_u *name;
{
    int idx;

    idx = findoption(name);
    if (idx < 0)
 return 0;
    if (options[idx].flags & 0x100)
 return 1;
    return 0;
}
# 5870 "option.c"
    static void
compatible_set()
{
    int opt_idx;

    for (opt_idx = 0; !istermoption(&options[opt_idx]); opt_idx++)
 if ( ((options[opt_idx].flags & 0x800) && p_cp)
  || (!(options[opt_idx].flags & 0x400) && !p_cp))
     set_option_default(opt_idx, 1);
    init_chartab();
}
# 5892 "option.c"
    static void
fill_breakat_flags()
{
    char_u *c;
    int i;

    for (i = 0; i < 256; i++)
 breakat_flags[i] = 0;

    if (p_breakat != 
# 5901 "option.c" 3 4
                    ((void *)0)
# 5901 "option.c"
                        )
 for (c = p_breakat; *c; c++)
     breakat_flags[*c] = 1;
}
# 5917 "option.c"
    static int
check_opt_strings(val, values, list)
    char_u *val;
    char **values;
    int list;
{
    int i;
    int len;

    while (*val)
    {
 for (i = 0; ; ++i)
 {
     if (values[i] == 
# 5930 "option.c" 3 4
                     ((void *)0)
# 5930 "option.c"
                         )
  return 0;

     len = strlen((char *)(values[i]));
     if (strncmp((char *)(values[i]), (char *)(val), (size_t)(len)) == 0)
     {
  if (list && val[len] == ',')
  {
      val += len + 1;
      break;
  }
  else if (val[len] == '\000')
      return 1;
     }
 }
    }
    return 1;
}




    static int
check_opt_wim()
{
    char_u new_wim_flags[4];
    char_u *p;
    int i;
    int idx = 0;

    for (i = 0; i < 4; ++i)
 new_wim_flags[i] = 0;

    for (p = p_wim; *p; ++p)
    {
 for (i = 0; 
# 5965 "option.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 5965 "option.c"
            p[i]
# 5965 "option.c" 3 4
            ))] & (unsigned short int) _ISalpha)
# 5965 "option.c"
                         ; ++i)
     ;
 if (p[i] != '\000' && p[i] != ',' && p[i] != ':')
     return 0;
 if (i == 7 && strncmp((char *)(p), (char *)("longest"), (size_t)(7)) == 0)
     new_wim_flags[idx] |= 2;
 else if (i == 4 && strncmp((char *)(p), (char *)("full"), (size_t)(4)) == 0)
     new_wim_flags[idx] |= 1;
 else if (i == 4 && strncmp((char *)(p), (char *)("list"), (size_t)(4)) == 0)
     new_wim_flags[idx] |= 4;
 else
     return 0;
 p += i;
 if (*p == '\000')
     break;
 if (*p == ',')
 {
     if (idx == 3)
  return 0;
     ++idx;
 }
    }


    while (idx < 3)
    {
 new_wim_flags[idx + 1] = new_wim_flags[idx];
 ++idx;
    }


    for (i = 0; i < 4; ++i)
 wim_flags[i] = new_wim_flags[i];
    return 1;
}




    int
can_bs(what)
    int what;
{
    switch (*p_bs)
    {
 case '2': return 1;
 case '1': return (what != 's');
 case '0': return 0;
    }
    return vim_strchr(p_bs, what) != 
# 6014 "option.c" 3 4
                                    ((void *)0)
# 6014 "option.c"
                                        ;
}
