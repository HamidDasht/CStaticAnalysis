#pragma merger("0","/tmp/cil-RdO1ju0l.i","-g,-O2,-Wall,-O0")
# 1 "misc1.c"
# 1 "/home/ubuntu/Desktop/devenv/tests/vim-5.7/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "misc1.c"
# 13 "misc1.c"
# 1 "vim.h" 1
# 20 "vim.h"
# 1 "config.h" 1
# 21 "vim.h" 2
# 59 "vim.h"
# 1 "feature.h" 1
# 60 "vim.h" 2
# 89 "vim.h"
# 1 "os_unix.h" 1
# 21 "os_unix.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 640 "/usr/include/stdio.h" 3 4

# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 942 "/usr/include/stdio.h" 3 4

# 22 "os_unix.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 23 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 24 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 237 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 262 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 283 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));
# 320 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 441 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 25 "os_unix.h" 2


# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 321 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 774 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 950 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 28 "os_unix.h" 2
# 42 "os_unix.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));





extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4

# 43 "os_unix.h" 2







# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 76 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 264 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/signal.h" 3 4


extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/signal.h" 3 4

# 127 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 207 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];
# 92 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));
# 362 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));




# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 51 "os_unix.h" 2
# 118 "os_unix.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 208 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 244 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 245 "/usr/include/dirent.h" 2 3 4
# 254 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 324 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 401 "/usr/include/dirent.h" 3 4

# 119 "os_unix.h" 2
# 138 "os_unix.h"
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 223 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/time.h" 3 4

# 139 "os_unix.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 142 "os_unix.h" 2
# 169 "os_unix.h"
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 58 "/usr/include/errno.h" 3 4

# 170 "os_unix.h" 2



# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 4)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (2, 3, 5)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 166 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
   __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 187 "/usr/include/pwd.h" 3 4

# 174 "os_unix.h" 2
# 339 "os_unix.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 123 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 277 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 392 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 658 "/usr/include/string.h" 3 4

# 340 "os_unix.h" 2


# 1 "/usr/include/strings.h" 1 3 4
# 343 "os_unix.h" 2
# 90 "vim.h" 2
# 110 "vim.h"
# 1 "osdef.h" 1
# 70 "osdef.h"

# 70 "osdef.h"
extern void (*sigset (int, void (*func) (int))) (int);
# 111 "vim.h" 2
# 165 "vim.h"
typedef unsigned char char_u;
typedef unsigned short short_u;
typedef unsigned int int_u;
typedef unsigned long long_u;






# 1 "ascii.h" 1
# 176 "vim.h" 2
# 1 "keymap.h" 1
# 121 "keymap.h"
enum key_extra
{
    KE_NAME = 3,

    KE_S_UP,
    KE_S_DOWN,

    KE_S_F1,
    KE_S_F2,
    KE_S_F3,
    KE_S_F4,
    KE_S_F5,
    KE_S_F6,
    KE_S_F7,
    KE_S_F8,
    KE_S_F9,
    KE_S_F10,

    KE_S_F11,
    KE_S_F12,
    KE_S_F13,
    KE_S_F14,
    KE_S_F15,
    KE_S_F16,
    KE_S_F17,
    KE_S_F18,
    KE_S_F19,
    KE_S_F20,

    KE_S_F21,
    KE_S_F22,
    KE_S_F23,
    KE_S_F24,
    KE_S_F25,
    KE_S_F26,
    KE_S_F27,
    KE_S_F28,
    KE_S_F29,
    KE_S_F30,

    KE_S_F31,
    KE_S_F32,
    KE_S_F33,
    KE_S_F34,
    KE_S_F35,

    KE_MOUSE,





    KE_LEFTMOUSE,
    KE_LEFTDRAG,
    KE_LEFTRELEASE,
    KE_MIDDLEMOUSE,
    KE_MIDDLEDRAG,
    KE_MIDDLERELEASE,
    KE_RIGHTMOUSE,
    KE_RIGHTDRAG,
    KE_RIGHTRELEASE,

    KE_IGNORE,

    KE_TAB,
    KE_S_TAB,

    KE_SNIFF,

    KE_XF1,
    KE_XF2,
    KE_XF3,
    KE_XF4,
    KE_XEND,
    KE_XHOME,

    KE_LEFTMOUSE_NM,
    KE_LEFTRELEASE_NM,

    KE_S_XF1,
    KE_S_XF2,
    KE_S_XF3,
    KE_S_XF4,

    KE_MOUSEDOWN,
    KE_MOUSEUP,

    KE_KINS,
    KE_KDEL,

    KE_CSI
};
# 177 "vim.h" 2
# 1 "term.h" 1
# 28 "term.h"
enum SpecialKey
{
    KS_NAME = 0,
    KS_CE,
    KS_AL,
    KS_CAL,
    KS_DL,
    KS_CDL,
    KS_CS,
    KS_CL,
    KS_CD,
    KS_DA,
    KS_DB,
    KS_VI,
    KS_VE,
    KS_VS,
    KS_ME,
    KS_MR,
    KS_MD,
    KS_SE,
    KS_SO,
    KS_CZH,
    KS_CZR,
    KS_UE,
    KS_US,
    KS_MS,
    KS_CM,
    KS_SR,
    KS_CRI,
    KS_VB,
    KS_KS,
    KS_KE,
    KS_TI,
    KS_TE,
    KS_BC,
    KS_CCS,
    KS_CCO,
    KS_CSF,
    KS_CSB,
    KS_XS,
    KS_MB,
    KS_CAF,
    KS_CAB,
    KS_LE,
    KS_ND,
    KS_CIS,
    KS_CIE,
    KS_TS,
    KS_FS,
    KS_CWP,
    KS_CWS,
    KS_CRV,
    KS_OP
};
# 93 "term.h"
extern char_u *(term_strings[]);
# 178 "vim.h" 2
# 1 "macros.h" 1
# 179 "vim.h" 2
# 590 "vim.h"
enum auto_event
{
    EVENT_BUFCREATE = 0,
    EVENT_BUFDELETE,
    EVENT_BUFENTER,
    EVENT_BUFFILEPOST,
    EVENT_BUFFILEPRE,
    EVENT_BUFLEAVE,
    EVENT_BUFNEWFILE,
    EVENT_BUFREADPOST,
    EVENT_BUFREADPRE,
    EVENT_BUFUNLOAD,
    EVENT_BUFHIDDEN,
    EVENT_BUFWRITEPOST,
    EVENT_BUFWRITEPRE,
    EVENT_FILEAPPENDPOST,
    EVENT_FILEAPPENDPRE,
    EVENT_FILECHANGEDSHELL,
    EVENT_FILEREADPOST,
    EVENT_FILEREADPRE,
    EVENT_FILETYPE,
    EVENT_FILEWRITEPOST,
    EVENT_FILEWRITEPRE,
    EVENT_FILTERREADPOST,
    EVENT_FILTERREADPRE,
    EVENT_FILTERWRITEPOST,
    EVENT_FILTERWRITEPRE,
    EVENT_FOCUSGAINED,
    EVENT_FOCUSLOST,
    EVENT_GUIENTER,
    EVENT_STDINREADPOST,
    EVENT_STDINREADPRE,
    EVENT_SYNTAX,
    EVENT_TERMCHANGED,
    EVENT_USER,
    EVENT_VIMENTER,
    EVENT_VIMLEAVE,
    EVENT_VIMLEAVEPRE,
    EVENT_WINENTER,
    EVENT_WINLEAVE,
    EVENT_FILEENCODING,
    EVENT_CURSORHOLD,
    NUM_EVENTS
};

typedef enum auto_event EVENT_T;





enum hlf_value
{
    HLF_8 = 0,
    HLF_AT,
    HLF_D,
    HLF_E,
    HLF_H,
    HLF_I,
    HLF_L,
    HLF_M,
    HLF_CM,
    HLF_N,
    HLF_R,
    HLF_S,
    HLF_SNC,
    HLF_T,
    HLF_V,
    HLF_VNC,
    HLF_W,
    HLF_WM,
    HLF_COUNT
};
# 809 "vim.h"
typedef long linenr_t;
typedef unsigned colnr_t;
# 827 "vim.h"
void mch_memmove (void *, void *, size_t);
# 884 "vim.h"
# 1 "regexp.h" 1
# 19 "regexp.h"
typedef struct
{
    char_u *startp[10];
    char_u *endp[10];
    char_u regstart;
    char_u reganch;
    char_u *regmust;
    int regmlen;
    char_u program[1];
} vim_regexp;
# 885 "vim.h" 2
# 1 "structs.h" 1
# 26 "structs.h"
typedef struct fpos FPOS;

struct fpos
{
    linenr_t lnum;
    colnr_t col;
};
# 56 "structs.h"
struct filemark
{
    FPOS mark;
    int fnum;
};




struct taggy
{
    char_u *tagname;
    struct filemark fmark;
    int cur_match;
};
# 82 "structs.h"
typedef struct window WIN;
typedef struct winfpos WINFPOS;

struct winfpos
{
    WINFPOS *wl_next;
    WINFPOS *wl_prev;
    WIN *wl_win;
    FPOS wl_fpos;
};





struct u_entry
{
    struct u_entry *ue_next;
    linenr_t ue_top;
    linenr_t ue_bot;
    linenr_t ue_lcount;
    char_u **ue_array;
    long ue_size;
};

struct u_header
{
    struct u_header *uh_next;
    struct u_header *uh_prev;
    struct u_entry *uh_entry;
    FPOS uh_cursor;
    int uh_flags;
    FPOS uh_namedm[26];
};
# 133 "structs.h"
typedef struct m_info info_t;




struct m_info
{

    long_u m_size;



    info_t *m_next;
};




struct m_block
{
    struct m_block *mb_next;
    info_t mb_info;
};






struct growarray
{
    int ga_len;
    int ga_room;
    int ga_itemsize;
    int ga_growsize;
    void *ga_data;
};





typedef struct block_hdr BHDR;
typedef struct memfile MEMFILE;
typedef long blocknr_t;
# 194 "structs.h"
struct block_hdr
{
    BHDR *bh_next;
    BHDR *bh_prev;
    BHDR *bh_hash_next;
    BHDR *bh_hash_prev;
    blocknr_t bh_bnum;
    char_u *bh_data;
    int bh_page_count;



    char bh_flags;
};







typedef struct nr_trans NR_TRANS;

struct nr_trans
{
    NR_TRANS *nt_next;
    NR_TRANS *nt_prev;
    blocknr_t nt_old_bnum;
    blocknr_t nt_new_bnum;
};
# 232 "structs.h"
struct memfile
{
    char_u *mf_fname;
    char_u *mf_ffname;
    int mf_fd;
    BHDR *mf_free_first;
    BHDR *mf_used_first;
    BHDR *mf_used_last;
    unsigned mf_used_count;
    unsigned mf_used_count_max;
    BHDR *mf_hash[64];
    NR_TRANS *mf_trans[64];
    blocknr_t mf_blocknr_max;
    blocknr_t mf_blocknr_min;
    blocknr_t mf_neg_count;
    blocknr_t mf_infile_count;
    unsigned mf_page_size;
    int mf_dirty;
};




typedef struct info_pointer IPTR;






struct info_pointer
{
    blocknr_t ip_bnum;
    linenr_t ip_low;
    linenr_t ip_high;
    int ip_index;
};


typedef struct ml_chunksize
{
    int mlcs_numlines;
    int mlcs_totalsize;
} ML_CHUNKSIZE;
# 284 "structs.h"
typedef struct memline MEMLINE;




struct memline
{
    linenr_t ml_line_count;

    MEMFILE *ml_mfp;





    int ml_flags;

    IPTR *ml_stack;
    int ml_stack_top;
    int ml_stack_size;

    linenr_t ml_line_lnum;
    char_u *ml_line_ptr;

    BHDR *ml_locked;
    linenr_t ml_locked_low;
    linenr_t ml_locked_high;
    int ml_locked_lineadd;

    ML_CHUNKSIZE *ml_chunksize;
    int ml_numchunks;
    int ml_usedchunks;

};





struct keyentry
{
    struct keyentry *next;
    int syn_inc_tag;
    short syn_id;
    short *next_list;
    short flags;
    char_u keyword[1];
};




struct syn_state
{
    struct growarray sst_ga;
    short *sst_next_list;

    int sst_next_flags;
};





struct attr_entry
{
    short ae_attr;
    union
    {
 struct
 {
     char_u *start;
     char_u *stop;
 } term;
 struct
 {
     char_u fg_color;
     char_u bg_color;
 } cterm;
# 371 "structs.h"
    } ae_u;
};
# 382 "structs.h"
typedef struct buffer BUF;

struct buffer
{
    MEMLINE b_ml;


    BUF *b_next;
    BUF *b_prev;

    int b_changed;




    int b_nwindows;

    int b_flags;







    char_u *b_ffname;
    char_u *b_sfname;
    char_u *b_fname;


    int b_dev;
    ino_t b_ino;
# 422 "structs.h"
    int b_fnum;
    WINFPOS *b_winfpos;


    long b_mtime;
    long b_mtime_read;

    FPOS b_namedm[26];


    FPOS b_visual_start;
    FPOS b_visual_end;
    int b_visual_mode;

    FPOS b_last_cursor;





    char b_chartab[256];




    FPOS b_op_start;
    FPOS b_op_end;


    int b_marks_read;





    struct u_header *b_u_oldhead;
    struct u_header *b_u_newhead;
    struct u_header *b_u_curhead;
    int b_u_numhead;
    int b_u_synced;




    char_u *b_u_line_ptr;
    linenr_t b_u_line_lnum;
    colnr_t b_u_line_colnr;




    struct m_block b_block_head;
    info_t *b_m_search;

    struct m_block *b_mb_current;

    int b_scanned;
# 487 "structs.h"
    int b_p_initialized;
    int b_p_ai, b_p_ro, b_p_lisp;
    int b_p_inf;

    char_u *b_p_cpt;

    int b_p_bin, b_p_eol, b_p_et, b_p_ml, b_p_tx, b_p_swf;

    int b_p_sn;


    long b_p_sw, b_p_sts, b_p_ts, b_p_tw, b_p_wm;
    char_u *b_p_ff, *b_p_fo;

    char_u *b_p_com;

    char_u *b_p_isk;




    char_u *b_p_key;

    char_u *b_p_nf;
    char_u *b_p_mps;


    long b_p_wm_nobin, b_p_tw_nobin;
    int b_p_ml_nobin, b_p_et_nobin;


    int b_p_ai_save, b_p_lisp_save;
    long b_p_tw_save, b_p_wm_save, b_p_sts_save;


    int b_p_si, b_p_si_save;


    int b_p_cin;
    int b_p_cin_save;
    char_u *b_p_cino;
    char_u *b_p_cink;


    char_u *b_p_cinw;


    char_u *b_p_syn;


    char_u *b_p_ft;






    int b_start_ffc;


    struct growarray b_vars;






    int b_may_swap;
    int b_did_warn;

    int b_help;


    int b_shortname;
# 577 "structs.h"
    struct keyentry **b_keywtab;
    struct keyentry **b_keywtab_ic;
    int b_syn_ic;
    struct growarray b_syn_patterns;
    struct growarray b_syn_clusters;
    int b_syn_sync_flags;
    short b_syn_sync_id;
    long b_syn_sync_minlines;
    long b_syn_sync_maxlines;
    char_u *b_syn_linecont_pat;
    vim_regexp *b_syn_linecont_prog;
    int b_syn_linecont_ic;
    int b_syn_topgrp;
# 601 "structs.h"
    struct syn_state *b_syn_states;
    int b_syn_states_len;
    linenr_t b_syn_states_lnum;
    linenr_t b_syn_change_lnum;

};






struct window
{
    BUF *w_buffer;

    WIN *w_prev;
    WIN *w_next;

    FPOS w_cursor;





    int w_valid;
    FPOS w_valid_cursor;

    colnr_t w_valid_leftcol;






    int w_wrow, w_wcol;





    int w_cline_height;

    int w_cline_row;

    colnr_t w_virtcol;






    colnr_t w_curswant;




    int w_set_curswant;






    linenr_t w_old_cursor_lnum;
    colnr_t w_old_cursor_fcol;
    colnr_t w_old_cursor_lcol;
    linenr_t w_old_visual_lnum;
    colnr_t w_old_curswant;

    linenr_t w_topline;

    linenr_t w_botline;

    int w_empty_rows;

    int w_winpos;
    int w_height;

    int w_status_height;

    int w_redr_status;
    int w_redr_type;


    FPOS w_ru_cursor;
    colnr_t w_ru_virtcol;
    linenr_t w_ru_topline;
    char w_ru_empty;

    colnr_t w_leftcol;

    colnr_t w_skipcol;






    int w_lsize_valid;
    linenr_t *w_lsize_lnum;
    char_u *w_lsize;

    int w_alt_fnum;

    int w_arg_idx;

    int w_arg_idx_invalid;






    int w_p_list,
  w_p_nu,






  w_p_wrap;

    int w_p_lbr;

    long w_p_scroll;


    int w_p_scb;
    long w_scbind_pos;

    int w_preview;


    struct growarray w_vars;







    FPOS w_pcmark;
    FPOS w_prev_pcmark;




    struct filemark w_jumplist[50];
    int w_jumplistlen;
    int w_jumplistidx;







    struct taggy w_tagstack[20];
    int w_tagstackidx;
    int w_tagstacklen;







    int w_fraction;
    int w_prev_fraction_row;
# 789 "structs.h"
};




typedef struct oparg
{
    int op_type;
    int regname;
    int motion_type;
    int inclusive;

    int end_adjusted;

    FPOS start;
    FPOS end;
    long line_count;

    int empty;

    int is_VIsual;
    int block_mode;
    colnr_t start_vcol;
    colnr_t end_vcol;
} OPARG;




typedef struct cmdarg
{
    OPARG *oap;
    int prechar;
    int cmdchar;
    int nchar;
    int extra_char;
    long count0;
    long count1;
} CMDARG;
# 886 "structs.h"
typedef struct VimMenu
{
    int modes;
    char_u *name;
    char_u *dname;
    int mnemonic;
    char_u *actext;
    int priority;



    char_u *strings[6];
    int noremap[6];
    struct VimMenu *children;
    struct VimMenu *next;
# 951 "structs.h"
} VimMenu;
# 886 "vim.h" 2
# 1019 "vim.h"
# 1 "globals.h" 1
# 29 "globals.h"
extern long Rows ;
extern long Columns ;
# 40 "globals.h"
extern char_u *NextScreen ;
extern char_u **LinePointers ;

extern int screen_Rows ;
extern int screen_Columns ;





extern int mod_mask ;
# 61 "globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;

extern int cmdline_crypt ;

extern int exec_from_reg ;

extern int modified ;

extern int tag_modified ;

extern int screen_cleared ;







extern colnr_t dollar_vcol ;




extern int expand_context ;
extern char_u *expand_pattern ;
extern int expand_set_path ;





extern int completion_length ;
extern int continue_status ;
extern int completion_interrupted ;
# 116 "globals.h"
extern int msg_col;
extern int msg_row;




extern int msg_scrolled;

extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;
extern int did_emsg;
extern int emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;

extern int quit_more ;
extern int more_back ;
extern int more_back_used ;

extern int newline_on_exit ;
extern int intr_char ;

extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;





extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_t sourcing_lnum ;

extern int scroll_region ;
extern int highlight_match ;
extern int search_match_len;
extern int no_smartcase ;
extern int need_check_timestamps ;
extern int highlight_attr[HLF_COUNT];




extern int highlight_user[9];

extern int highlight_stlnc[9];





extern int cterm_normal_fg_color ;
extern int cterm_normal_fg_bold ;
extern int cterm_normal_bg_color ;


extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;



extern BUF *au_new_curbuf ;






extern int mouse_row;
extern int mouse_col;
extern int mouse_past_bottom ;
extern int mouse_past_eol ;
extern int mouse_dragging ;
# 228 "globals.h"
extern VimMenu *root_menu ;




extern int sys_menu ;
# 277 "globals.h"
extern WIN *firstwin;
extern WIN *lastwin;
extern WIN *curwin;





extern BUF *firstbuf ;
extern BUF *lastbuf ;
extern BUF *curbuf ;




extern char_u **arg_files;
extern int arg_file_count;
extern int arg_had_last ;

extern int ru_col;

extern int ru_wid;

extern int sc_col;





extern int starting ;


extern int exiting ;

extern int full_screen ;



extern int restricted ;

extern int secure ;




extern int silent_mode ;



extern FPOS VIsual;
extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;



extern int VIsual_mode ;

extern int redo_VIsual_busy ;







extern FPOS where_paste_started;
# 354 "globals.h"
extern int did_ai ;





extern colnr_t ai_col ;
# 369 "globals.h"
extern int end_comment_pending ;
# 379 "globals.h"
extern int did_syncbind ;







extern int did_si ;





extern int can_si ;





extern int can_si_back ;





extern FPOS Insstart;





extern int orig_line_count ;
extern int vr_lines_changed ;
extern colnr_t vr_virtcol ;
extern int vr_virtoffset ;
# 448 "globals.h"
extern int State ;




extern int exmode_active ;
extern int ex_no_reprint ;

extern int Recording ;
extern int Exec_reg ;

extern int finish_op ;

extern int no_mapping ;
extern int allow_keys ;

extern int no_u_sync ;

extern int restart_edit ;
extern int arrow_used;




extern char_u *edit_submode ;
extern char_u *edit_submode_extra ;
extern enum hlf_value edit_submode_highl;
extern int ctrl_x_mode ;


extern int no_abbr ;

extern int fo_do_comments ;
# 504 "globals.h"
extern int confirm ;
extern int swap_exists_action ;



extern char_u *IObuff;
extern char_u *NameBuff;

extern char_u msg_buf[80];

extern int RedrawingDisabled ;






extern int readonlymode ;
extern int recoverymode ;

extern char_u *typebuf ;
extern int typebuflen;
extern int typeoff;
extern int typelen;
extern int KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern char_u chartab[256];

extern int must_redraw ;
extern int skip_redraw ;
extern int do_redraw ;

extern int need_highlight_changed ;
extern char_u *use_viminfo ;


extern FILE *scriptin[15];
extern int curscript ;
extern FILE *scriptout ;
extern int read_cmd_fd ;

extern int got_int ;




extern int termcap_active ;
extern int bangredo ;
extern int searchcmdlen;
extern int reg_ic ;
extern int reg_syn ;

extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int undo_off ;
extern int global_busy ;
extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *new_last_cmdline ;

extern char_u *autocmd_fname ;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;


extern int postponed_split ;
extern int g_do_tagpreview ;

extern int replace_offset ;

extern char_u *escape_chars ;


extern char_u *help_save_isk ;
extern long help_save_ts ;
extern int keep_help_flag ;






extern char_u *empty_option ;





extern int redir_off ;
extern FILE *redir_fd ;

extern int redir_reg ;







extern int save_p_ls ;
extern int wild_menu_showing ;
# 620 "globals.h"
extern char breakat_flags[256];



extern char *Version;
extern char *mediumVersion;



extern char *longVersion;
# 638 "globals.h"
extern char_u *default_vim_dir;
extern char_u *default_vimruntime_dir;
extern char_u *all_cflags;
extern char_u *all_lflags;



extern char_u *compiled_user;
extern char_u *compiled_sys;



extern int lcs_eol ;
extern int lcs_ext ;
extern int lcs_tab1 ;
extern int lcs_tab2 ;
extern int lcs_trail ;

extern char_u no_lines_msg[] ;


extern char_u wim_flags[4];





extern int stl_syntax ;




extern int no_hlsearch ;
# 705 "globals.h"
extern char_u e_abort[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_curdir[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;

extern char_u e_invexpr2[] ;

extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;

extern char_u e_letunexp[] ;

extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;



extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;

extern char_u e_nogvim[] ;


extern char_u e_nohebrew[] ;


extern char_u e_nofarsi[] ;

extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[] ;
extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notcreate[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notread[] ;
extern char_u e_nowrtmsg[] ;
extern char_u e_null[] ;

extern char_u e_number[] ;


extern char_u e_openerrf[] ;

extern char_u e_outofmem[] ;

extern char_u e_patnotf[] ;

extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;

extern char_u e_quickfix[] ;

extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[] ;

extern char_u e_readonlyvar[] ;


extern char_u e_readerrf[] ;

extern char_u e_scroll[] ;
extern char_u e_tagformat[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_toombra[] ;
extern char_u e_toomket[] ;
extern char_u e_toomsbra[] ;



extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_umark[] ;
extern char_u e_unknown[] ;
extern char_u e_write[] ;
extern char_u e_zerocount[] ;
# 1020 "vim.h" 2
# 1 "option.h" 1
# 254 "option.h"
extern int p_aw;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bsdir;





extern char_u *p_breakat;




extern long p_ch;

extern int p_confirm;

extern int p_cp;
extern char_u *p_cpo;






extern char_u *p_def;

extern char_u *p_dict;


extern int p_dg;

extern char_u *p_dir;
extern char_u *p_dy;
extern int p_ed;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;

extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;


extern char_u *p_ei;

extern int p_ek;
extern int p_exrc;
extern char_u *p_ffs;
extern char_u *p_fp;
extern int p_gd;
# 326 "option.h"
extern char_u *p_hf;
extern long p_hh;
extern int p_hid;
extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
# 341 "option.h"
extern int p_icon;
extern char_u *p_iconstring;

extern int p_ic;
extern int p_is;
extern int p_im;
extern char_u *p_inc;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_kp;
extern char_u *p_km;



extern long p_ls;
extern char_u *p_lcs;

extern int p_lz;
extern int p_magic;

extern char_u *p_mef;
extern char_u *p_mp;

extern long p_mat;

extern long p_mfd;

extern long p_mmd;
extern long p_mm;
extern long p_mmt;
extern long p_mls;
extern char_u *p_mouse;




extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pm;
extern char_u *p_path;
extern int p_remap;
extern long p_report;
extern long p_pvh;
# 398 "option.h"
extern int p_ru;


extern char_u *p_ruf;

extern long p_sj;
extern long p_so;

extern char_u *p_sbo;

extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;

extern char_u *p_sessopt;

extern char_u *p_sh;
extern char_u *p_shcf;

extern char_u *p_sp;

extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_srr;







extern char_u *p_stl;

extern int p_sr;
extern char_u *p_shm;

extern char_u *p_sbr;


extern int p_sc;

extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_sws;
extern char_u *p_swb;
extern int p_tbs;
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_terse;
extern int p_ta;
extern int p_to;
extern int p_timeout;
extern long p_tm;

extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;

extern int p_ttimeout;
extern long p_ttm;
extern int p_tbi;
extern int p_tf;



extern long p_ttyscroll;
extern char_u *p_ttym;
extern long p_ul;
extern long p_uc;
extern long p_ut;

extern char_u *p_viminfo;

extern int p_vb;
extern long p_verbose;
extern int p_warn;





extern char_u *p_wig;

extern int p_wiv;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern char_u *p_wim;

extern int p_wmnu;

extern long p_wh;
extern long p_wmh;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;
# 1021 "vim.h" 2
# 1 "ex_cmds.h" 1
# 78 "ex_cmds.h"
enum CMD_index

{
    CMD_append,
    CMD_abbreviate,
    CMD_abclear,
    CMD_all,
    CMD_amenu,
    CMD_anoremenu,
    CMD_args,
    CMD_argument,
    CMD_ascii,
    CMD_autocmd,
    CMD_augroup,
    CMD_aunmenu,
    CMD_buffer,
    CMD_bNext,
    CMD_ball,
    CMD_badd,
    CMD_bdelete,
    CMD_behave,
    CMD_blast,
    CMD_bmodified,
    CMD_bnext,
    CMD_bprevious,
    CMD_brewind,
    CMD_break,
    CMD_browse,
    CMD_buffers,
    CMD_bunload,
    CMD_change,
    CMD_cNext,
    CMD_cabbrev,
    CMD_cabclear,
    CMD_call,
    CMD_cc,
    CMD_cd,
    CMD_center,
    CMD_cfile,
    CMD_chdir,
    CMD_checkpath,
    CMD_clist,
    CMD_clast,
    CMD_close,
    CMD_cmap,
    CMD_cmapclear,
    CMD_cmenu,
    CMD_cnext,
    CMD_cnewer,
    CMD_cnfile,
    CMD_cnoremap,
    CMD_cnoreabbrev,
    CMD_cnoremenu,
    CMD_copy,
    CMD_colder,
    CMD_command,
    CMD_comclear,
    CMD_continue,
    CMD_confirm,
    CMD_cprevious,
    CMD_cquit,
    CMD_crewind,
    CMD_cscope,
    CMD_cstag,
    CMD_cunmap,
    CMD_cunabbrev,
    CMD_cunmenu,
    CMD_delete,
    CMD_delcommand,
    CMD_delfunction,
    CMD_display,
    CMD_digraphs,
    CMD_djump,
    CMD_dlist,
    CMD_doautocmd,
    CMD_doautoall,
    CMD_dsearch,
    CMD_dsplit,
    CMD_edit,
    CMD_echo,
    CMD_echohl,
    CMD_echon,
    CMD_else,
    CMD_elseif,
    CMD_exemenu,
    CMD_endif,
    CMD_endfunction,
    CMD_endwhile,
    CMD_ex,
    CMD_execute,
    CMD_exit,
    CMD_file,
    CMD_files,
    CMD_filetype,
    CMD_find,
    CMD_fixdel,
    CMD_function,
    CMD_global,
    CMD_goto,
    CMD_grep,
    CMD_gui,
    CMD_gvim,
    CMD_help,
    CMD_helpfind,
    CMD_highlight,
    CMD_hide,
    CMD_history,
    CMD_insert,
    CMD_iabbrev,
    CMD_iabclear,
    CMD_if,
    CMD_ijump,
    CMD_ilist,
    CMD_imap,
    CMD_imapclear,
    CMD_imenu,
    CMD_inoremap,
    CMD_inoreabbrev,
    CMD_inoremenu,
    CMD_intro,
    CMD_isearch,
    CMD_isplit,
    CMD_iunmap,
    CMD_iunabbrev,
    CMD_iunmenu,
    CMD_join,
    CMD_jumps,
    CMD_k,
    CMD_list,
    CMD_last,
    CMD_left,
    CMD_let,
    CMD_ls,
    CMD_move,
    CMD_mark,
    CMD_make,
    CMD_map,
    CMD_mapclear,
    CMD_marks,
    CMD_menu,
    CMD_messages,

    CMD_mkexrc,
    CMD_mksession,
    CMD_mkvimrc,
    CMD_mode,
    CMD_next,
    CMD_new,
    CMD_nmap,
    CMD_nmapclear,
    CMD_nmenu,
    CMD_nnoremap,
    CMD_nnoremenu,
    CMD_noremap,
    CMD_nohlsearch,
    CMD_noreabbrev,
    CMD_noremenu,
    CMD_normal,
    CMD_number,
    CMD_nunmap,
    CMD_nunmenu,
    CMD_open,
    CMD_omap,
    CMD_omapclear,
    CMD_omenu,
    CMD_only,
    CMD_onoremap,
    CMD_onoremenu,
    CMD_options,
    CMD_ounmap,
    CMD_ounmenu,
    CMD_print,
    CMD_pclose,
    CMD_perl,
    CMD_perldo,
    CMD_pop,
    CMD_ppop,
    CMD_preserve,
    CMD_previous,
    CMD_promptfind,
    CMD_promptrepl,
    CMD_ptag,
    CMD_ptNext,
    CMD_ptjump,
    CMD_ptlast,
    CMD_ptnext,
    CMD_ptprevious,
    CMD_ptrewind,
    CMD_ptselect,
    CMD_put,
    CMD_pwd,
    CMD_python,
    CMD_pyfile,
    CMD_quit,
    CMD_qall,
    CMD_read,
    CMD_recover,
    CMD_redo,
    CMD_redir,
    CMD_registers,
    CMD_resize,
    CMD_retab,
    CMD_return,
    CMD_rewind,
    CMD_right,
    CMD_rviminfo,
    CMD_substitute,
    CMD_sNext,
    CMD_sargument,
    CMD_sall,
    CMD_sbuffer,
    CMD_sbNext,
    CMD_sball,
    CMD_sblast,
    CMD_sbmodified,
    CMD_sbnext,
    CMD_sbprevious,
    CMD_sbrewind,
    CMD_set,
    CMD_sfind,
    CMD_shell,



    CMD_sleep,
    CMD_slast,
    CMD_smagic,
    CMD_snext,
    CMD_sniff,
    CMD_snomagic,
    CMD_source,
    CMD_split,
    CMD_sprevious,
    CMD_srewind,
    CMD_stop,
    CMD_stag,
    CMD_startinsert,
    CMD_stjump,
    CMD_stselect,
    CMD_sunhide,
    CMD_suspend,
    CMD_sview,
    CMD_swapname,
    CMD_syntax,
    CMD_syncbind,
    CMD_t,
    CMD_tNext,
    CMD_tag,
    CMD_tags,
    CMD_tcl,
    CMD_tcldo,
    CMD_tclfile,
    CMD_tearoff,
    CMD_tjump,
    CMD_tlast,
    CMD_tmenu,
    CMD_tnext,
    CMD_tprevious,
    CMD_trewind,
    CMD_tselect,
    CMD_tunmenu,
    CMD_undo,
    CMD_unabbreviate,
    CMD_unhide,
    CMD_unlet,
    CMD_unmap,
    CMD_unmenu,
    CMD_update,
    CMD_vglobal,
    CMD_version,
    CMD_visual,
    CMD_view,
    CMD_vmap,
    CMD_vmapclear,
    CMD_vmenu,
    CMD_vnoremap,
    CMD_vnoremenu,
    CMD_vunmap,
    CMD_vunmenu,
    CMD_write,
    CMD_wNext,
    CMD_wall,
    CMD_while,
    CMD_winsize,
    CMD_winpos,
    CMD_wnext,
    CMD_wprevious,
    CMD_wq,
    CMD_wqall,
    CMD_wviminfo,
    CMD_xit,
    CMD_xall,
    CMD_yank,
    CMD_z,


    CMD_bang,
    CMD_pound,
    CMD_and,
    CMD_star,
    CMD_lshift,
    CMD_equal,
    CMD_rshift,
    CMD_at,
    CMD_Next,
    CMD_Print,
    CMD_X,
    CMD_tilde,



    CMD_SIZE,
    CMD_USER = -1




};


typedef enum CMD_index CMDIDX;




typedef struct exarg
{
    char_u *arg;
    char_u *nextcmd;
    char_u *cmd;
    CMDIDX cmdidx;
    long argt;
    int skip;
    int forceit;
    int addr_count;
    linenr_t line1;
    linenr_t line2;
    char_u *do_ecmd_cmd;
    linenr_t do_ecmd_lnum;
    int append;
    int usefilter;
    int amount;
    int regname;

    int useridx;

} EXARG;
# 1022 "vim.h" 2
# 1 "proto.h" 1
# 30 "proto.h"
# 1 "proto/os_unix.pro" 1

void mch_write (char_u *s, int len) __attribute((crest_skip));
int mch_inchar (char_u *buf, int maxlen, long wtime);
int mch_char_avail (void);
long_u mch_avail_mem (int special);
void mch_delay (long msec, int ignoreinput);
void mch_suspend (void);
void mch_windinit (void);
void reset_signals (void);
int mch_check_win (int argc, char **argv);
int mch_input_isatty (void);
int mch_can_restore_title (void);
int mch_can_restore_icon (void);
void mch_settitle (char_u *title, char_u *icon);
void mch_restore_title (int which);
int vim_is_xterm (char_u *name);
int use_xterm_mouse (void);
int vim_is_iris (char_u *name);
int vim_is_fastterm (char_u *name);
int mch_get_user_name (char_u *s, int len);
int mch_get_uname (uid_t uid, char_u *s, int len);
void mch_get_host_name (char_u *s, int len);
long mch_get_pid (void);
int mch_dirname (char_u *buf, int len);
void slash_adjust (char_u *p);
int mch_FullName (char_u *fname, char_u *buf, int len, int force);
int mch_isFullName (char_u *fname);
long mch_getperm (char_u *name);
int mch_setperm (char_u *name, long perm);
void mch_hide (char_u *name);
int mch_isdir (char_u *name);
void mch_windexit (int r);
void mch_settmode (int tmode);
void get_stty (void);
void mch_setmouse (int on);
void check_mouse_termcode (void);
int mch_screenmode (char_u *arg);
int mch_get_winsize (void);
void mch_set_winsize (void);
int mch_call_shell (char_u *cmd, int options);
void mch_breakcheck (void);
int mch_expandpath (struct growarray *gap, char_u *path, int flags);
int mch_expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int mch_has_wildcard (char_u *p);
void setup_xterm_clip (void);
void start_xterm_trace (int button);
void stop_xterm_trace (void);
void clear_xterm_clip (void);
int clip_xterm_own_selection (void);
void clip_xterm_lose_selection (void);
void clip_xterm_request_selection (void);
void clip_xterm_set_selection (void);
# 31 "proto.h" 2
# 54 "proto.h"
# 1 "proto/buffer.pro" 1

int open_buffer (int read_stdin);
int buf_valid (BUF *buf);
void close_buffer (WIN *win, BUF *buf, int free_buf, int del_buf);
void buf_clear (BUF *buf);
void buf_freeall (BUF *buf, int del_buf);
char_u *do_bufdel (int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit);
int do_buffer (int action, int start, int dir, int count, int forceit);
void enter_buffer (BUF *buf);
BUF *buflist_new (char_u *ffname, char_u *sfname, linenr_t lnum, int use_curbuf);
void free_buf_options (BUF *buf, int free_p_ff);
int buflist_getfile (int n, linenr_t lnum, int options, int forceit);
void buflist_getfpos (void);
BUF *buflist_findname (char_u *ffname);
int buflist_findpat (char_u *pattern, char_u *pattern_end);
int ExpandBufnames (char_u *pat, int *num_file, char_u ***file, int options);
BUF *buflist_findnr (int nr);
char_u *buflist_nr2name (int n, int fullname, int helptail);
FPOS *buflist_findfpos (BUF *buf);
linenr_t buflist_findlnum (BUF *buf);
void buflist_list (void);
int buflist_name_nr (int fnum, char_u **fname, linenr_t *lnum);
int setfname (char_u *ffname, char_u *sfname, int message);
void setaltfname (char_u *ffname, char_u *sfname, linenr_t lnum);
char_u *getaltfname (int errmsg);
int buflist_add (char_u *fname);
void buflist_altfpos (void);
int otherfile (char_u *ffname);
void fileinfo (int fullname, int shorthelp, int dont_truncate);
void cursor_pos_info (void);
void col_print (char_u *buf, int col, int vcol);
void maketitle (void);
void resettitle (void);
int append_arg_number (WIN *wp, char_u *buf, int add_file, int maxlen);
char_u *fix_fname (char_u *fname);
void fname_expand (char_u **ffname, char_u **sfname);
void do_arg_all (int count, int forceit);
void do_buffer_all (int count, int all);
void do_modelines (void);
int read_viminfo_bufferlist (char_u *line, FILE *fp, int writing);
void write_viminfo_bufferlist (FILE *fp);
# 55 "proto.h" 2
# 1 "proto/charset.pro" 1

int init_chartab (void);
void trans_characters (char_u *buf, int bufsize);
char_u *transstr (char_u *s);
char_u *transchar (int c);
void transchar_nonprint (char_u *buf, int c);
int charsize (int c);
int vim_strsize (char_u *s);
int chartabsize (int c, colnr_t col);
int linetabsize (char_u *s);
int win_linetabsize (WIN *wp, char_u *s);
int vim_isIDc (int c);
int vim_iswordc (int c);
int vim_iswordc_buf (int c, BUF *buf);
int vim_isfilec (int c);
int vim_isprintc (int c);
int safe_vim_isprintc (int c);
int lbr_chartabsize (unsigned char *s, colnr_t col);
int win_lbr_chartabsize (WIN *wp, unsigned char *s, colnr_t col, int *head);
void getvcol (WIN *wp, FPOS *pos, colnr_t *start, colnr_t *cursor, colnr_t *end);
void getvcols (FPOS *pos1, FPOS *pos2, colnr_t *left, colnr_t *right);
char_u *skipwhite (char_u *p);
char_u *skipdigits (char_u *p);
int vim_isdigit (int c);
char_u *skiptowhite (char_u *p);
char_u *skiptowhite_esc (char_u *p);
long getdigits (char_u **pp);
int vim_isblankline (char_u *lbuf);
void vim_str2nr (char_u *start, int *hexp, int *len, int dooct, int dohex, long *nptr, unsigned long *unptr);
int hex2nr (int c);
# 56 "proto.h" 2

# 1 "proto/if_cscope.pro" 1

void do_cscope (EXARG *eap);
void do_cstag (EXARG *eap);
int cs_fgets (char_u *buf, int size);
void cs_free_tags (void);
void cs_print_tags (void);
# 58 "proto.h" 2

# 1 "proto/digraph.pro" 1

int do_digraph (int c);
int getdigraph (int char1, int char2, int meta);
void putdigraph (char_u *str);
void listdigraphs (void);
# 60 "proto.h" 2
# 1 "proto/edit.pro" 1

int edit (int cmdchar, int startln, long count);
void display_dollar (colnr_t col);
void change_indent (int type, int amount, int round, int replaced);
void truncate_spaces (char_u *line);
void backspace_until_column (int col);
int vim_is_ctrl_x_key (int c);
int ins_compl_add_infercase (char_u *str, int len, char_u *fname, int dir, int reuse);
void ins_compl_check_keys (void);
int get_literal (void);
void insertchar (unsigned c, int force_formatting, int second_indent, int ctrlv);
int comp_textwidth (int ff);
void stop_arrow (void);
void set_last_insert (int c);
void beginline (int flags);
int oneright (void);
int oneleft (void);
int cursor_up (long n, int upd_topline);
int cursor_down (long n, int upd_topline);
int stuff_inserted (int c, long count, int no_esc);
char_u *get_last_insert (void);
char_u *get_last_insert_save (void);
void replace_push (int c);
int get_replace_stack_virtcol (void);
void fixthisline (int (*get_the_indent)(void));
int in_cinkeys (int keytyped, int when, int line_is_empty);
int hkmap (int c);
void ins_scroll (void);
void ins_horscroll (void);
# 61 "proto.h" 2
# 1 "proto/eval.pro" 1

void set_internal_string_var (char_u *name, char_u *value);
int eval_to_bool (char_u *arg, int *error, char_u **nextcmd, int skip);
char_u *eval_to_string (char_u *arg, char_u **nextcmd);
void do_let (EXARG *eap);
void set_context_for_expression (char_u *arg, CMDIDX cmdidx);
void do_call (EXARG *eap);
void do_unlet (char_u *arg, int forceit);
char_u *get_user_var_name (int idx);
char_u *get_function_name (int idx);
char_u *get_expr_name (int idx);
void set_vim_var_nr (int idx, long val);
void set_vim_var_string (int idx, char_u *val);
void var_init (struct growarray *gap);
void var_clear (struct growarray *gap);
void do_echo (EXARG *eap, int echo);
void do_echohl (char_u *arg);
void do_execute (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
void do_function (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
char_u *get_user_func_name (int idx);
void do_delfunction (char_u *arg);
void *save_funccal (void);
void restore_funccal (void *fc);
void do_return (EXARG *eap);
char_u *get_func_line (int c, void *cookie, int indent);
int func_has_ended (void *cookie);
int func_has_abort (void *cookie);
int read_viminfo_varlist (char_u *line, FILE *fp, int writing);
void write_viminfo_varlist (FILE *fp);
int store_session_globals (FILE *fd);
int modify_fname (char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen);
char_u *do_string_sub (char_u *str, char_u *pat, char_u *sub, char_u *flags);
# 62 "proto.h" 2
# 1 "proto/ex_cmds.pro" 1

void do_ascii (void);
void do_align (EXARG *eap);
void do_retab (EXARG *eap);
int do_move (linenr_t line1, linenr_t line2, linenr_t dest);
void do_copy (linenr_t line1, linenr_t line2, linenr_t n);
void do_bang (int addr_count, linenr_t line1, linenr_t line2, int forceit, char_u *arg, int do_in, int do_out);
void do_shell (char_u *cmd, int flags);
char_u *make_filter_cmd (char_u *cmd, char_u *itmp, char_u *otmp);
int viminfo_error (char *message, char_u *line);
int read_viminfo (char_u *file, int want_info, int want_marks, int forceit);
void write_viminfo (char_u *file, int forceit);
char_u *viminfo_readstring (char_u *p, FILE *fp);
void viminfo_writestring (FILE *fd, char_u *p);
void do_fixdel (void);
void print_line_no_prefix (linenr_t lnum, int use_number);
void print_line (linenr_t lnum, int use_number);
void do_file (char_u *arg, int forceit);
int do_write (EXARG *eap);
void do_wnext (EXARG *eap);
void do_wqall (EXARG *eap);
int not_writing (void);
int getfile (int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_t lnum, int forceit);
int do_ecmd (int fnum, char_u *ffname, char_u *sfname, char_u *command, linenr_t newlnum, int flags);
void do_append (linenr_t lnum, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_change (linenr_t start, linenr_t end, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_z (linenr_t line, char_u *arg);
int check_restricted (void);
int check_secure (void);
void do_sub (EXARG *eap);
void do_glob (EXARG *eap);
int read_viminfo_sub_string (char_u *line, FILE *fp, int force);
void write_viminfo_sub_string (FILE *fp);
void prepare_tagpreview (void);
void do_help (EXARG *eap);
int help_heuristic (char_u *matched_string, int offset, int wrong_case);
int find_help_tags (char_u *arg, int *num_matches, char_u ***matches);
# 63 "proto.h" 2
# 1 "proto/ex_docmd.pro" 1

void do_exmode (void);
int do_cmdline (char_u *cmdline, char_u *(*getline)(int, void *, int), void *cookie, int flags);
char_u *set_one_cmd_context (char_u *buff);
int expand_filename (EXARG *eap, char_u **cmdlinep, char_u **errormsgp);
void separate_nextcmd (EXARG *eap);
int autowrite (BUF *buf, int forceit);
void autowrite_all (void);
int check_changed (BUF *buf, int checkaw, int mult_win, int forceit, int allbuf);
void dialog_changed (BUF *buf, int checkall);
int can_abandon (BUF *buf, int forceit);
int check_changed_any (int hidden);
int check_fname (void);
int buf_write_all (BUF *buf);
int rem_backslash (char_u *str);
void backslash_halve (char_u *p);
char_u *backslash_halve_save (char_u *p);
void check_arg_idx (WIN *win);
int ends_excmd (int c);
char_u *find_nextcmd (char_u *p);
char_u *check_nextcmd (char_u *p);
int do_source (char_u *fname, int check_other, int is_vimrc);
char *fgets_cr (char *s, int n, FILE *stream);
char_u *getsourceline (int c, void *cookie, int indent);
char_u *get_command_name (int idx);
char_u *get_user_commands (int idx);
char_u *get_user_cmd_flags (int idx);
char_u *get_user_cmd_nargs (int idx);
char_u *get_user_cmd_complete (int idx);
void not_exiting (void);
void do_argfile (EXARG *eap, int argn);
void handle_drop (int filec, char_u **filev, int split);
char_u *eval_vars (char_u *src, int *usedlen, linenr_t *lnump, char_u **errormsg, char_u *srcstart);
char_u *expand_sfile (char_u *arg);
int put_eol (FILE *fd);
void dialog_msg (char_u *buff, char *format, char_u *fname);
# 64 "proto.h" 2
# 1 "proto/ex_getln.pro" 1

char_u *getcmdline (int firstc, long count, int indent);
char_u *getcmdline_prompt (int firstc, char_u *prompt, int attr);
char_u *getexline (int c, void *dummy, int indent);
char_u *getexmodeline (int c, void *dummy, int indent);
int cmdline_overstrike (void);
int cmdline_at_end (void);
int put_on_cmdline (char_u *str, int len, int redraw);
void redrawcmdline (void);
void compute_cmdrow (void);
void gotocmdline (int clr);
char_u *ExpandOne (char_u *str, char_u *orig, int options, int mode);
void tilde_replace (char_u *orig_pat, int num_files, char_u **files);
char_u *addstar (char_u *fname, int len, int context);
int ExpandGeneric (vim_regexp *prog, int *num_file, char_u ***file, char_u *((*func)(int)));
int get_histtype (char_u *name);
void add_to_history (int histype, char_u *new_entry, int in_map);
int get_history_idx (int histype);
char_u *get_history_entry (int histype, int idx);
int clr_history (int histype);
int del_history_entry (int histype, char_u *str);
int del_history_idx (int histype, int idx);
void remove_key_from_history (void);
int get_list_range (char_u **str, int *num1, int *num2);
void do_history (char_u *arg);
void prepare_viminfo_history (int asklen);
int read_viminfo_history (char_u *line, FILE *fp);
void finish_viminfo_history (void);
void write_viminfo_history (FILE *fp);
void cmd_pchar (int c, int offset);
int cmd_gchar (int offset);
# 65 "proto.h" 2
# 1 "proto/fileio.pro" 1

void filemess (BUF *buf, char_u *name, char_u *s, int attr);
int readfile (char_u *fname, char_u *sfname, linenr_t from, linenr_t lines_to_skip, linenr_t lines_to_read, int flags);
int buf_write (BUF *buf, char_u *fname, char_u *sfname, linenr_t start, linenr_t end, int append, int forceit, int reset_changed, int filtering);
char_u *shorten_fname (char_u *full_path, char_u *dir_name);
void shorten_fnames (int force);
char_u *modname (char_u *fname, char_u *ext, int prepend_dot);
char_u *buf_modname (int shortname, char_u *fname, char_u *ext, int prepend_dot);
int vim_fgets (char_u *buf, int size, FILE *fp);
int vim_rename (char_u *from, char_u *to);
void check_timestamps (int focus);
int buf_check_timestamp (BUF *buf, int focus);
void write_lnum_adjust (linenr_t offset);
char_u *vim_tempname (int extra_char);
void do_augroup (char_u *arg);
int check_ei (void);
void do_autocmd (char_u *arg, int forceit);
int do_doautocmd (char_u *arg, int do_msg);
void do_autoall (char_u *arg);
int apply_autocmds (EVENT_T event, char_u *fname, char_u *fname_io, int force, BUF *buf);
int has_cursorhold (void);
char_u *get_augroup_name (int idx);
char_u *set_context_in_autocmd (char_u *arg, int doautocmd);
char_u *get_event_name (int idx);
int match_file_pat (char_u *pattern, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs);
char_u *file_pat_to_reg_pat (char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash);
# 66 "proto.h" 2
# 1 "proto/getchar.pro" 1

char_u *get_recorded (void);
char_u *get_inserted (void);
int stuff_empty (void);
void flush_buffers (int typeahead);
void ResetRedobuff (void);
void saveRedobuff (void);
void restoreRedobuff (void);
void AppendToRedobuff (char_u *s);
void AppendCharToRedobuff (int c);
void AppendNumberToRedobuff (long n);
void stuffReadbuff (char_u *s);
void stuffcharReadbuff (int c);
void stuffnumReadbuff (long n);
int start_redo (long count, int old_redo);
int start_redo_ins (void);
void stop_redo_ins (void);
int ins_typebuf (char_u *str, int noremap, int offset, int nottyped);
int typebuf_typed (void);
int typebuf_maplen (void);
void del_typebuf (int len, int offset);
int save_typebuf (void);
int openscript (char_u *name);
int using_script (void);
void updatescript (int c);
int vgetc (void);
int safe_vgetc (void);
int vpeekc (void);
int char_avail (void);
void vungetc (int c);
int inchar (char_u *buf, int maxlen, long wait_time);
int do_map (int maptype, char_u *keys, int mode, int abbrev, char_u **ambig);
int get_map_mode (char_u **cmdp, int forceit);
void map_clear (char_u *cmdp, int forceit, int abbr);
char_u *set_context_in_map_cmd (char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, CMDIDX cmdidx);
int ExpandMappings (vim_regexp *prog, int *num_file, char_u ***file);
int check_abbr (int c, char_u *ptr, int col, int mincol);
int makemap (FILE *fd);
int putescstr (FILE *fd, char_u *str, int set);
void check_map_keycodes (void);
char_u *check_map (char_u *keys, int mode, int exact);
void init_mappings (void);
# 67 "proto.h" 2



# 1 "proto/main.pro" 1

int process_env (char_u *env, int is_viminit);
void getout (int r);
int toF_TyA (int c);
int fkmap (int c);
void conv_to_pvim (void);
void conv_to_pstd (void);
char_u *lrswap (char_u *ibuf);
char_u *lrFswap (char_u *cmdbuf, int len);
char_u *lrF_sub (char_u *ibuf);
int cmdl_fkmap (int c);
int F_isalpha (int c);
int F_isdigit (int c);
int F_ischar (int c);
void farsi_fkey (int c);
# 71 "proto.h" 2
# 1 "proto/mark.pro" 1

int setmark (int c);
void setpcmark (void);
void checkpcmark (void);
FPOS *movemark (int count);
FPOS *getmark (int c, int changefile);
void fmarks_check_names (BUF *buf);
int check_mark (FPOS *pos);
void clrallmarks (BUF *buf);
char_u *fm_getname (struct filemark *fmark, int lead_len);
void do_marks (char_u *arg);
void do_jumps (void);
void mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
void set_last_cursor (WIN *win);
int read_viminfo_filemark (char_u *line, FILE *fp, int force);
void write_viminfo_filemarks (FILE *fp);
int removable (char_u *name);
int write_viminfo_marks (FILE *fp_out);
void copy_viminfo_marks (char_u *line, FILE *fp_in, FILE *fp_out, int count, int eof);
# 72 "proto.h" 2

void



smsg (char_u *, ...);
void



smsg_attr (int, char_u *, ...);

# 1 "proto/memfile.pro" 1

MEMFILE *mf_open (char_u *fname, int trunc_file);
int mf_open_file (MEMFILE *mfp, char_u *fname);
void mf_close (MEMFILE *mfp, int del_file);
void mf_close_file (BUF *buf, int getlines);
BHDR *mf_new (MEMFILE *mfp, int negative, int page_count);
BHDR *mf_get (MEMFILE *mfp, blocknr_t nr, int page_count);
void mf_put (MEMFILE *mfp, BHDR *hp, int dirty, int infile);
void mf_free (MEMFILE *mfp, BHDR *hp);
int mf_sync (MEMFILE *mfp, int flags);
int mf_release_all (void);
blocknr_t mf_trans_del (MEMFILE *mfp, blocknr_t old_nr);
void mf_set_ffname (MEMFILE *mfp);
void mf_fullname (MEMFILE *mfp);
int mf_need_trans (MEMFILE *mfp);
# 85 "proto.h" 2
# 1 "proto/memline.pro" 1

int ml_open (void);
void ml_setname (void);
void ml_open_files (void);
void ml_open_file (BUF *buf);
void check_need_swap (int newfile);
void ml_close (BUF *buf, int del_file);
void ml_close_all (int del_file);
void ml_close_notmod (void);
void ml_timestamp (BUF *buf);
void ml_recover (void);
int recover_names (char_u **fname, int list, int nr);
void ml_sync_all (int check_file, int check_char);
void ml_preserve (BUF *buf, int message);
char_u *ml_get (linenr_t lnum);
char_u *ml_get_pos (FPOS *pos);
char_u *ml_get_curline (void);
char_u *ml_get_cursor (void);
char_u *ml_get_buf (BUF *buf, linenr_t lnum, int will_change);
int ml_line_alloced (void);
int ml_append (linenr_t lnum, char_u *line, colnr_t len, int newfile);
int ml_replace (linenr_t lnum, char_u *line, int copy);
int ml_delete (linenr_t lnum, int message);
void ml_setmarked (linenr_t lnum);
linenr_t ml_firstmarked (void);
void ml_clearmarked (void);
char_u *get_file_in_dir (char_u *fname, char_u *dname);
void ml_setdirty (BUF *buf, int flag);
long ml_find_line_or_offset (BUF *buf, linenr_t line, long *offp);
void goto_byte (long cnt);
# 86 "proto.h" 2

# 1 "proto/menu.pro" 1

void do_menu (EXARG *eap);
char_u *set_context_in_menu_cmd (char_u *cmd, char_u *arg, int forceit);
char_u *get_menu_name (int idx);
char_u *get_menu_names (int idx);
char_u *menu_name_skip (char_u *name);
int get_menu_index (VimMenu *menu, int state);
int menubar_menu (char_u *name);
int popup_menu (char_u *name);
int toolbar_menu (char_u *name);
void gui_create_initial_menus (VimMenu *menu, VimMenu *parent);
void gui_update_menus (int modes);
int gui_is_menu_shortcut (int key);
void gui_show_popupmenu (void);
void gui_mch_toggle_tearoffs (int enable);
void execute_menu (char_u *path_name);
int is_menu_separator (char_u *name);
# 88 "proto.h" 2

# 1 "proto/message.pro" 1

int msg (char_u *s);
int msg_attr (char_u *s, int attr);
char_u *msg_strtrunc (char_u *s);
int emsg (char_u *s);
int emsg2 (char_u *s, char_u *a1);
int emsgn (char_u *s, long n);
char_u *msg_trunc_attr (char_u *s, int force, int attr);
char_u *msg_may_trunc (int force, char_u *s);
void ex_messages (void);
void wait_return (int redraw);
void msg_start (void);
void msg_starthere (void);
void msg_putchar (int c);
void msg_putchar_attr (int c, int attr);
void msg_outnum (long n);
void msg_home_replace (char_u *fname);
void msg_home_replace_hl (char_u *fname);
int msg_outtrans (char_u *str);
int msg_outtrans_attr (char_u *str, int attr);
int msg_outtrans_len (char_u *str, int len);
int msg_outtrans_len_attr (char_u *str, int len, int attr);
void msg_make (char_u *arg);
int msg_outtrans_special (char_u *str, int from);
char_u *str2special (char_u **sp, int from);
void str2specialbuf (char_u *sp, char_u *buf, int len);
void msg_prt_line (char_u *s);
void msg_puts (char_u *s);
void msg_puts_title (char_u *s);
void msg_puts_long (char_u *longstr);
void msg_puts_long_attr (char_u *longstr, int attr);
void msg_puts_long_len_attr (char_u *longstr, int len, int attr);
void msg_puts_attr (char_u *s, int attr);
void msg_moremsg (int full);
void repeat_message (void);
void msg_clr_eos (void);
void msg_clr_cmdline (void);
int msg_end (void);
void msg_check (void);
void give_warning (char_u *message, int hl);
void msg_advance (int col);
int do_dialog (int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton);
void display_confirm_msg (void);
int vim_dialog_yesno (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnocancel (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnoallcancel (int type, char_u *title, char_u *message, int dflt);
char_u *do_browse (int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, BUF *buf);
# 90 "proto.h" 2
# 1 "proto/misc1.pro" 1

int get_indent (void);
int get_indent_lnum (linenr_t lnum);
void set_indent (int size, int del_first);
int open_line (int dir, int redraw, int del_spaces, int old_indent);
int get_leader_len (char_u *line, char_u **flags, int backward);
int plines_check (linenr_t p);
int plines (linenr_t p);
int plines_win (WIN *wp, linenr_t p);
int plines_win_col (WIN *wp, linenr_t p, long column);
int plines_m (linenr_t first, linenr_t last);
int plines_m_win (WIN *wp, linenr_t first, linenr_t last);
void ins_char (int c);
void ins_str (char_u *s);
int del_char (int fixpos);
int del_chars (long count, int fixpos);
int truncate_line (int fixpos);
void del_lines (long nlines, int dowindow, int undo);
int gchar_pos (FPOS *pos);
int gchar_cursor (void);
void pchar_cursor (int c);
int inindent (int extra);
char_u *skip_to_option_part (char_u *p);
char *plural (long n);
void changed (void);
void unchanged (BUF *buf, int ff);
void check_status (BUF *buf);
void change_warning (int col);
int ask_yesno (char_u *str, int direct);
int get_keystroke (void);
int get_number (int colon);
void msgmore (long n);
void beep_flush (void);
void vim_beep (void);
void init_homedir (void);
void expand_env (char_u *src, char_u *dst, int dstlen);
char_u *expand_env_save (char_u *src);
void vim_setenv (char_u *name, char_u *val);
void home_replace (BUF *buf, char_u *src, char_u *dst, int dstlen, int one);
char_u *home_replace_save (BUF *buf, char_u *src);
int fullpathcmp (char_u *s1, char_u *s2, int checkname);
char_u *gettail (char_u *fname);
char_u *getnextcomp (char_u *fname);
char_u *get_past_head (char_u *path);
int vim_ispathsep (int c);
int vim_fnamecmp (char_u *x, char_u *y);
int vim_fnamencmp (char_u *x, char_u *y, size_t len);
char_u *concat_fnames (char_u *fname1, char_u *fname2, int sep);
void add_pathsep (char_u *p);
char_u *FullName_save (char_u *fname, int force);
FPOS *find_start_comment (int ind_maxcomment);
int cin_islabel (int ind_maxcomment);
int cin_iscase (char_u *s);
int cin_isscopedecl (char_u *s);
int get_c_indent (void);
int get_lisp_indent (void);
void preserve_exit (void);
int vim_fexists (char_u *fname);
void line_breakcheck (void);
int expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int match_suffix (char_u *fname);
void addfile (struct growarray *gap, char_u *f, int flags);
char_u *get_cmd_output (char_u *cmd, int flags);
void FreeWild (int num, char_u **file);
int goto_im (void);
# 91 "proto.h" 2
# 1 "proto/misc2.pro" 1

int coladvance (colnr_t wcol);
int inc_cursor (void);
int inc (FPOS *lp);
int incl (FPOS *lp);
int dec_cursor (void);
int dec (FPOS *lp);
int decl (FPOS *lp);
void check_cursor_lnum (void);
void check_cursor_col (void);
void adjust_cursor (void);
void adjust_cursor_col (void);
int leftcol_changed (void);
void vim_mem_profile_dump (void);
char_u *alloc (unsigned size);
char_u *alloc_clear (unsigned size);
char_u *alloc_check (unsigned size);
char_u *lalloc_clear (long_u size, int message);
char_u *lalloc (long_u size, int message);
void *mem_realloc (void *ptr, size_t size);
void do_outofmem_msg (void);
char_u *vim_strsave (char_u *string);
char_u *vim_strnsave (char_u *string, int len);
char_u *vim_strsave_escaped (char_u *string, char_u *esc_chars);
char_u *vim_strsave_up (char_u *string);
char_u *vim_strnsave_up (char_u *string, int len);
void copy_spaces (char_u *ptr, size_t count);
void copy_chars (char_u *ptr, size_t count, int c);
void del_trailing_spaces (char_u *ptr);
void vim_strncpy (char_u *to, char_u *from, int len);
int copy_option_part (char_u **option, char_u *buf, int maxlen, char *sep_chars);
void vim_free (void *x);
int vim_stricmp (char *s1, char *s2);
int vim_strnicmp (char *s1, char *s2, size_t len);
char_u *vim_strchr (char_u *string, int n);
char_u *vim_strrchr (char_u *string, int n);
int vim_isspace (int x);
void ga_clear (struct growarray *gap);
void ga_clear_strings (struct growarray *gap);
void ga_init (struct growarray *gap);
void ga_init2 (struct growarray *gap, int itemsize, int growsize);
int ga_grow (struct growarray *gap, int n);
void ga_concat (struct growarray *gap, char_u *s);
void ga_append (struct growarray *gap, int c);
int name_to_mod_mask (int c);
int simplify_key (int key, int *modifiers);
char_u *get_special_key_name (int c, int modifiers);
int trans_special (char_u **srcp, char_u *dst, int keycode);
int find_special_key (char_u **srcp, int *modp, int keycode);
int find_special_key_in_table (int c);
int get_special_key_code (char_u *name);
char_u *get_key_name (int i);
int get_mouse_button (int code, int *is_click, int *is_drag);
int get_pseudo_mouse_code (int button, int is_click, int is_drag);
int get_fileformat (BUF *buf);
void set_fileformat (int t);
int default_fileformat (void);
int call_shell (char_u *cmd, int opt);
int get_real_state (void);
int vim_chdirfile (char_u *fname);
char_u *parse_guicursor (void);
int get_cursor_idx (void);
int decrypt_byte (void);
int update_keys (int c);
void crypt_init_keys (char_u *passwd);
char_u *get_crypt_key (int store);
int get_user_name (char_u *buf, int len);
# 92 "proto.h" 2






# 1 "proto/normal.pro" 1

void normal_cmd (OPARG *oap, int toplevel);
void do_pending_operator (CMDARG *cap, char_u *searchbuff, int *command_busy, int old_col, int gui_yank, int dont_adjust_op_end);
int do_mouse (OPARG *oap, int c, int dir, long count, int fix_indent);
void check_visual_highlight (void);
void end_visual_mode (void);
int find_ident_under_cursor (char_u **string, int find_type);
void clear_showcmd (void);
int add_to_showcmd (int c);
void add_to_showcmd_c (int c);
void push_showcmd (void);
void pop_showcmd (void);
void do_check_scrollbind (int check);
void check_scrollbind (linenr_t topline_diff, long leftcol_diff);
void scroll_redraw (int up, long count);
void start_selection (void);
void may_start_select (int c);
# 99 "proto.h" 2
# 1 "proto/ops.pro" 1

int get_op_type (int char1, int char2);
int op_on_lines (int op);
int get_op_char (int optype);
int get_extra_op_char (int optype);
void op_shift (OPARG *oap, int curs_top, int amount);
void shift_line (int left, int round, int amount);
void op_reindent (OPARG *oap, int (*how)(void));
int get_expr_register (void);
void set_expr_line (char_u *new_line);
int valid_yank_reg (int regname, int writing);
int yank_register_mline (int regname);
int do_record (int c);
int do_execreg (int regname, int colon, int addcr);
int insert_reg (int regname, int literally);
int cmdline_paste (int regname, int literally);
int op_delete (OPARG *oap);
int op_replace (OPARG *oap, int c);
void op_tilde (OPARG *oap);
void swapchar (int op_type, FPOS *pos);
void op_insert (OPARG *oap, long count1);
int op_change (OPARG *oap);
void init_yank (void);
int op_yank (OPARG *oap, int deleting, int mess);
void do_put (int regname, int dir, long count, int flags);
int get_register_name (int num);
void do_dis (char_u *arg);
void dis_msg (char_u *p, int skip_esc);
void do_do_join (long count, int insert_space, int redraw);
int do_join (int insert_space, int redraw);
void op_format (OPARG *oap);
int do_addsub (int command, linenr_t Prenum1);
int read_viminfo_register (char_u *line, FILE *fp, int force);
void write_viminfo_registers (FILE *fp);
void clip_free_selection (void);
void clip_get_selection (void);
void clip_yank_selection (int type, char_u *str, long len);
int clip_convert_selection (char_u **str, long_u *len);
char_u *get_reg_contents (int regname);
void write_reg_contents (int name, char_u *str);
void clear_oparg (OPARG *oap);
# 100 "proto.h" 2
# 1 "proto/option.pro" 1

void set_init_1 (void);
void set_string_default (char *name, char_u *val);
void set_number_default (char *name, long val);
void set_init_2 (void);
void set_init_3 (void);
void init_gui_options (void);
void set_title_defaults (void);
int do_set (char_u *arg, int modeline);
void set_options_bin (int oldval, int newval);
int get_viminfo_parameter (int type);
char_u *find_viminfo_parameter (int type);
void check_options (void);
void check_buf_options (BUF *buf);
void free_string_option (char_u *p);
void set_term_option_alloced (char_u **p);
void set_string_option_direct (char_u *name, int opt_idx, char_u *val, int dofree);
char_u *check_stl_option (char_u *s);
int get_option_value (char_u *name, long *numval, char_u **stringval);
void set_option_value (char_u *name, long number, char_u *string);
char_u *get_term_code (char_u *tname);
char_u *get_highlight_default (void);
int makeset (FILE *fd);
void clear_termoptions (void);
void set_term_defaults (void);
void comp_col (void);
void win_copy_options (WIN *wp_from, WIN *wp_to);
void buf_copy_options (BUF *bp_from, BUF *bp_to, int flags);
void set_context_in_set_cmd (char_u *arg);
int ExpandSettings (vim_regexp *prog, int *num_file, char_u ***file);
int ExpandOldSetting (int *num_file, char_u ***file);
int has_format_option (int x);
int shortmess (int x);
void vimrc_found (void);
void change_compatible (int on);
int option_was_set (char_u *name);
int can_bs (int what);
# 101 "proto.h" 2
# 1 "proto/quickfix.pro" 1

int qf_init (char_u *efile, char_u *errorformat);
void qf_jump (int dir, int errornr, int forceit);
void qf_list (char_u *arg, int all);
void qf_older (int count);
void qf_newer (int count);
void qf_mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
# 102 "proto.h" 2
# 1 "proto/regexp.pro" 1

char_u *skip_regexp (char_u *p, int dirc, int magic);
vim_regexp *vim_regcomp (char_u *expr, int magic);
int vim_regcomp_had_eol (void);
int vim_regexec (vim_regexp *prog, char_u *string, int at_bol);
char_u *regtilde (char_u *source, int magic);
void vim_regnewptr (vim_regexp *prog, char_u *old_ptr, char_u *new_ptr);
int vim_regsub (vim_regexp *prog, char_u *source, char_u *dest, int copy, int magic);
# 103 "proto.h" 2
# 1 "proto/screen.pro" 1

void update_screenline (void);
void redraw_later (int type);
void redraw_all_later (int type);
void redraw_curbuf_later (int type);
void update_curbuf (int type);
void update_screen (int type);
void updateWindow (WIN *wp);
void update_other_win (void);
void status_redraw_all (void);
void redraw_statuslines (void);
void win_redr_status_matches (int num_matches, char_u **matches, int match);
void win_redr_status (WIN *wp);
int build_stl_str (WIN *wp, char_u *out, char_u *fmt, int fillchar, int maxlen);
void screen_putchar (int c, int row, int col, int attr);
void screen_puts (char_u *text, int row, int col, int attr);
void screen_start (void);
void screen_down (void);
void screen_stop_highlight (void);
void reset_cterm_colors (void);
void screen_fill (int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr);
void screenalloc (int clear);
void screenclear (void);
void update_topline_redraw (void);
void update_topline (void);
void update_curswant (void);
void windgoto (int row, int col);
void setcursor (void);
void scroll_cursor_top (int min_scroll, int always);
void scroll_cursor_bot (int min_scroll, int set_topbot);
void scroll_cursor_halfway (int atend);
void cursor_correct (void);
void changed_cline_bef_curs (void);
void changed_line_abv_curs (void);
void set_topline (WIN *wp, linenr_t lnum);
void validate_botline (void);
void invalidate_botline (void);
void invalidate_botline_win (WIN *wp);
void approximate_botline (void);
int botline_approximated (void);
int cursor_valid (void);
void validate_cursor (void);
void validate_cline_row (void);
int may_validate_crow (void);
void validate_virtcol (void);
void validate_cheight (void);
void validate_cursor_col (void);
void curs_columns (int scroll);
void scrolldown (long line_count);
void scrollup (long line_count);
void scrolldown_clamp (void);
void scrollup_clamp (void);
int win_ins_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
int win_del_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
void win_rest_invalid (WIN *wp);
int screen_del_lines (int off, int row, int line_count, int end, int force);
int showmode (void);
void unshowmode (int force);
void showruler (int always);
void check_for_delay (int check_msg_scroll);
int screen_valid (int clear);
int jump_to_mouse (int flags, int *inclusive);
int get_fpos_of_mouse (FPOS *mpos, WIN **mwin);
int redrawing (void);
int messaging (void);
int onepage (int dir, long count);
void halfpage (int flag, linenr_t Prenum);
void do_intro (void);
# 104 "proto.h" 2
# 1 "proto/search.pro" 1

vim_regexp *search_regcomp (char_u *pat, int pat_save, int pat_use, int options);
char_u *get_search_pat (void);
void save_search_patterns (void);
void restore_search_patterns (void);
void set_reg_ic (char_u *pat);
char_u *last_search_pat (void);
void set_last_search_pat (char_u *s, int idx, int magic, int setlast);
vim_regexp *last_pat_prog (void);
int searchit (BUF *buf, FPOS *pos, int dir, char_u *str, long count, int options, int pat_use);
int do_search (OPARG *oap, int dirc, char_u *str, long count, int options);
int search_for_exact_line (BUF *buf, FPOS *pos, int dir, char_u *pat);
int searchc (int c, int dir, int type, long count);
FPOS *findmatch (OPARG *oap, int initc);
FPOS *findmatchlimit (OPARG *oap, int initc, int flags, int maxtravel);
void showmatch (void);
int findsent (int dir, long count);
int findpar (OPARG *oap, int dir, long count, int what, int both);
int startPS (linenr_t lnum, int para, int both);
int fwd_word (long count, int type, int eol);
int bck_word (long count, int type, int stop);
int end_word (long count, int type, int stop, int empty);
int bckend_word (long count, int type, int eol);
int current_word (OPARG *oap, long count, int include, int type);
int current_sent (OPARG *oap, long count, int include);
int current_block (OPARG *oap, long count, int include, int what, int other);
int current_par (OPARG *oap, long count, int include, int type);
int linewhite (linenr_t lnum);
void find_pattern_in_path (char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_t start_lnum, linenr_t end_lnum);
int read_viminfo_search_pattern (char_u *line, FILE *fp, int force);
void write_viminfo_search_pattern (FILE *fp);
# 105 "proto.h" 2
# 1 "proto/syntax.pro" 1

void syntax_start (WIN *wp, linenr_t lnum);
void syn_changed (linenr_t lnum);
int syntax_check_changed (linenr_t lnum);
int get_syntax_attr (colnr_t col, char_u *line);
void syntax_clear (BUF *buf);
void do_syntax (EXARG *eap, char_u **cmdlinep);
int syntax_present (BUF *buf);
void set_context_in_syntax_cmd (char_u *arg);
char_u *get_syntax_name (int idx);
int syn_get_id (long line, long col, int trans);
void init_highlight (int both);
void do_highlight (char_u *line, int forceit, int init);
void set_normal_colors (void);
void hl_set_font_name (char_u *font_name);
void hl_set_bg_color_name (char_u *name);
void hl_set_fg_color_name (char_u *name);
struct attr_entry *syn_gui_attr2entry (int attr);
struct attr_entry *syn_term_attr2entry (int attr);
struct attr_entry *syn_cterm_attr2entry (int attr);
char_u *highlight_has_attr (int id, int flag, int modec);
char_u *highlight_color (int id, char_u *what, int modec);
int syn_name2id (char_u *name);
int highlight_exists (char_u *name);
int syn_check_group (char_u *pp, int len);
int syn_id2attr (int hl_id);
int syn_id2colors (int hl_id, int *fgp, int *bgp);
int syn_get_final_id (int hl_id);
void highlight_gui_started (void);
int highlight_changed (void);
void set_context_in_highlight_cmd (char_u *arg);
char_u *get_highlight_name (int idx);
void free_highlight_fonts (void);
# 106 "proto.h" 2
# 1 "proto/tag.pro" 1

int do_tag (char_u *tag, int type, int count, int forceit, int verbose);
void tag_freematch (void);
void do_tags (void);
int find_tags (char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount);
void simplify_filename (char_u *filename);
int expand_tags (int tagnames, char_u *pat, int *num_file, char_u ***file);
# 107 "proto.h" 2
# 1 "proto/term.pro" 1

int set_termname (char_u *term);
void set_mouse_termcode (int n, char_u *s);
void del_mouse_termcode (int n);
void getlinecol (void);
int add_termcap_entry (char_u *name, int force);
int term_is_8bit (char_u *name);
int term_is_gui (char_u *name);
char_u *tltoa (unsigned long i);
void termcapinit (char_u *name);
void out_flush (void) __attribute((crest_skip));
void out_trash (void);
void out_char (unsigned c);
void out_str_nf (char_u *s);
void out_str (char_u *s);
void term_windgoto (int row, int col);
void term_cursor_right (int i);
void term_append_lines (int line_count);
void term_delete_lines (int line_count);
void term_set_winpos (int x, int y);
void term_set_winsize (int width, int height);
void term_fg_color (int n);
void term_bg_color (int n);
void term_settitle (char_u *title);
void ttest (int pairs);
void add_long_to_buf (long_u val, char_u *dst);
int get_long_from_buf (char_u *buf, long_u *val);
void check_winsize (void);
void set_winsize (int width, int height, int mustset);
void settmode (int tmode);
void starttermcap (void);
void stoptermcap (void);
int swapping_screen (void);
void setmouse (void);
int mouse_has (int c);
int mouse_model_popup (void);
void scroll_start (void);
void cursor_on (void);
void cursor_off (void);
void scroll_region_set (WIN *wp, int off);
void scroll_region_reset (void);
void clear_termcodes (void);
void add_termcode (char_u *name, char_u *string, int use_8bit);
char_u *find_termcode (char_u *name);
char_u *get_termcode (int i);
void del_termcode (char_u *name);
int check_termcode (int max_offset, char_u *buf, int buflen);
char_u *replace_termcodes (char_u *from, char_u **bufp, int from_part, int do_lt);
int find_term_bykeys (char_u *src);
void show_termcodes (void);
int show_one_termcode (char_u *name, char_u *code, int printit);
char_u *translate_mapping (char_u *str, int expmap);
void update_tcap (int attr);
# 108 "proto.h" 2



# 1 "proto/ui.pro" 1

void ui_write (char_u *s, int len) __attribute((crest_skip));
void ui_inchar_undo (char_u *s, int len);
int ui_inchar (char_u *buf, int maxlen, long wtime);
int ui_char_avail (void);
void ui_delay (long msec, int ignoreinput);
void ui_suspend (void);
void suspend_shell (void);
int ui_get_winsize (void);
void ui_set_winsize (void);
void ui_breakcheck (void);
void clip_init (int can_use);
void clip_update_selection (void);
void clip_own_selection (void);
void clip_lose_selection (void);
void clip_copy_selection (void);
void clip_auto_select (void);
int clip_isautosel (void);
void clip_start_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_process_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_redraw_selection (int x, int y, int w, int h);
void clip_may_redraw_selection (int row, int col);
void clip_clear_selection (void);
void clip_may_clear_selection (int row1, int row2);
void clip_scroll_selection (int rows);
int clip_gen_own_selection (void);
void clip_gen_lose_selection (void);
void clip_gen_set_selection (void);
void clip_gen_request_selection (void);
int vim_is_input_buf_full (void);
int vim_is_input_buf_empty (void);
int vim_free_in_input_buf (void);
int vim_used_in_input_buf (void);
void add_to_input_buf (char_u *s, int len);
void push_raw_key (char_u *s, int len);
void trash_input_buf (void);
int read_from_input_buf (char_u *buf, long maxlen);
void fill_input_buf (int exit_on_error);
void read_error_exit (void);
void ui_cursor_shape (void);
int check_col (int col);
int check_row (int row);
void open_app_context (void);
void x11_setup_atoms (int *dpy);
void clip_x11_request_selection (int myShell, int *dpy);
void clip_x11_lose_selection (int myShell);
int clip_x11_own_selection (int myShell);
void clip_x11_set_selection (void);
# 112 "proto.h" 2
# 1 "proto/undo.pro" 1

int u_save_cursor (void);
int u_save (linenr_t top, linenr_t bot);
int u_savesub (linenr_t lnum);
int u_inssub (linenr_t lnum);
int u_savedel (linenr_t lnum, long nlines);
void u_undo (int count);
void u_redo (int count);
void u_sync (void);
void u_unchanged (BUF *buf);
void u_clearall (BUF *buf);
void u_saveline (linenr_t lnum);
void u_clearline (void);
void u_undoline (void);
void u_blockfree (BUF *buf);
int buf_changed (BUF *buf);
int curbuf_changed (void);
# 113 "proto.h" 2
# 1 "proto/version.pro" 1

void make_version (void);
int highest_patch (void);
void do_version (char_u *arg);
void list_version (void);
# 114 "proto.h" 2
# 1 "proto/window.pro" 1

void do_window (int nchar, long Prenum);
int win_split (int new_height, int redraw, int req_room);
int win_valid (WIN *win);
int win_count (void);
int make_windows (int count);
void win_move_after (WIN *win1, WIN *win2);
void win_equal (WIN *next_curwin, int redraw);
void close_windows (BUF *buf);
void close_window (WIN *win, int free_buf);
void close_others (int message, int forceit);
void win_init (WIN *wp);
WIN *win_goto_nr (int winnr);
void win_enter (WIN *wp, int undo_sync);
WIN *buf_jump_open_win (BUF *buf);
WIN *win_alloc (WIN *after);
void win_free (WIN *wp);
int win_alloc_lsize (WIN *wp);
void win_free_lsize (WIN *wp);
void screen_new_rows (void);
void win_setheight (int height);
void win_setminheight (void);
void win_drag_status_line (int offset);
void win_comp_scroll (WIN *wp);
void command_height (long old_p_ch);
void last_status (void);
char_u *file_name_at_cursor (int options, long count);
char_u *get_file_name_in_path (char_u *line, int col, int options, long count);
char_u *find_file_in_path (char_u *ptr, int len, int options, long count);
int min_rows (void);
int only_one_window (void);
void check_lnums (int do_curwin);
# 115 "proto.h" 2
# 1023 "vim.h" 2
# 14 "misc1.c" 2
# 1 "version.h" 1
# 15 "misc1.c" 2


# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4

# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };
# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 363 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4

# 437 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4

# 61 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 77 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 78 "/usr/include/fcntl.h" 2 3 4
# 146 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 156 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 180 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 202 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 248 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) __attribute__ ((__nothrow__ , __leaf__));
# 270 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 292 "/usr/include/fcntl.h" 3 4

# 18 "misc1.c" 2



# 20 "misc1.c"
static char_u *vim_getenv (char_u *name, int *mustfree);
static char_u *vim_version_dir (char_u *vimdir);
static char_u *remove_tail (char_u *p, char_u *pend, char_u *name);
static int get_indent_str (char_u *ptr);
static int temporary_nolist (void);




    int
get_indent()
{
    return get_indent_str(ml_get_curline());
}




    int
get_indent_lnum(lnum)
    linenr_t lnum;
{
    return get_indent_str(ml_get(lnum));
}




    static int
get_indent_str(ptr)
    char_u *ptr;
{
    int count = 0;

    for ( ; *ptr; ++ptr)
    {
 if (*ptr == '\011')
     count += (int)curbuf->b_p_ts - (count % (int)curbuf->b_p_ts);
 else if (*ptr == ' ')
     ++count;
 else
     break;
    }
    return (count);
}





    void
set_indent(size, del_first)
    int size;
    int del_first;
{
    int oldstate = State;
    int c;






    State = 0x10;
    curwin->w_cursor.col = 0;
    if (del_first)
    {

 while ((c = gchar_cursor()), ((c) == ' ' || (c) == '\t'))
     (void)del_char(0);
    }
    if (!curbuf->b_p_et)
 while (size >= (int)curbuf->b_p_ts)
 {
     ins_char('\011');
     size -= (int)curbuf->b_p_ts;
 }
    while (size)
    {
 ins_char(' ');
 --size;
    }
    State = oldstate;



}



static int cin_is_cinword (char_u *line);




    static int
cin_is_cinword(line)
    char_u *line;
{
    char_u *cinw;
    char_u *cinw_buf;
    int cinw_len;
    int retval = 0;
    int len;

    cinw_len = strlen((char *)(curbuf->b_p_cinw)) + 1;
    cinw_buf = alloc((unsigned)cinw_len);
    if (cinw_buf != 
# 127 "misc1.c" 3 4
                   ((void *)0)
# 127 "misc1.c"
                       )
    {
 line = skipwhite(line);
 for (cinw = curbuf->b_p_cinw; *cinw; )
 {
     len = copy_option_part(&cinw, cinw_buf, cinw_len, ",");
     if (strncmp((char *)(line), (char *)(cinw_buf), (size_t)(len)) == 0 &&
       (!vim_iswordc(line[len]) || !vim_iswordc(line[len - 1])))
     {
  retval = 1;
  break;
     }
 }
 vim_free(cinw_buf);
    }
    return retval;
}
# 158 "misc1.c"
    int
open_line(dir, redraw, del_spaces, old_indent)
    int dir;
    int redraw;
    int del_spaces;
    int old_indent;
{
    char_u *saved_line;
    char_u *next_line = 
# 166 "misc1.c" 3 4
                       ((void *)0)
# 166 "misc1.c"
                           ;
    char_u *p_extra = 
# 167 "misc1.c" 3 4
                     ((void *)0)
# 167 "misc1.c"
                         ;
    FPOS old_cursor;
    int newcol = 0;
    int newindent = 0;
    int n;
    int trunc_line = 0;
    int retval = 0;

    int extra_len = 0;
    int lead_len;
    char_u *lead_flags;
    char_u *leader = 
# 178 "misc1.c" 3 4
                    ((void *)0)
# 178 "misc1.c"
                        ;

    char_u *allocated = 
# 180 "misc1.c" 3 4
                       ((void *)0)
# 180 "misc1.c"
                           ;
    char_u *p;
    int saved_char = '\000';

    FPOS *pos;

    int old_plines = 0;
    int new_plines = 0;
    int extra_plines = 0;

    int do_si = (curbuf->b_p_si

     && !curbuf->b_p_cin

   );
    int no_si = 0;
    int first_char = '\000';


    int vreplace_mode;





    saved_line = vim_strsave(ml_get_curline());
    if (saved_line == 
# 206 "misc1.c" 3 4
                     ((void *)0)
# 206 "misc1.c"
                         )
 return 0;

    if (State == (0x300 + 0x10))
    {
# 220 "misc1.c"
 if (curwin->w_cursor.lnum < orig_line_count)
     next_line = vim_strsave(ml_get(curwin->w_cursor.lnum + 1));
 else
     next_line = vim_strsave((char_u *)"");
 if (next_line == 
# 224 "misc1.c" 3 4
                 ((void *)0)
# 224 "misc1.c"
                     )
     goto theend;
# 234 "misc1.c"
 replace_push('\000');
 replace_push('\000');
 p = saved_line + curwin->w_cursor.col;
 while (*p != '\000')
     replace_push(*p++);
 saved_line[curwin->w_cursor.col] = '\000';
    }

    if (State == 0x10 || State == (0x200 + 0x10))
    {
 p_extra = saved_line + curwin->w_cursor.col;

 if (do_si)
 {
     p = skipwhite(p_extra);
     first_char = *p;
 }


 extra_len = strlen((char *)(p_extra));

 saved_char = *p_extra;
 *p_extra = '\000';
    }

    u_clearline();

    did_si = 0;

    ai_col = 0;






    if (dir == 1 && did_ai)
 trunc_line = 1;





    if (curbuf->b_p_ai

   || do_si

         )
    {



 newindent = get_indent_str(saved_line);
 if (newindent == 0)
     newindent = old_indent;
# 298 "misc1.c"
 if (!trunc_line && do_si && *saved_line != '\000'
        && (p_extra == 
# 299 "misc1.c" 3 4
                      ((void *)0) 
# 299 "misc1.c"
                           || first_char != '{'))
 {
     char_u *ptr;
     char_u last_char;

     old_cursor = curwin->w_cursor;
     ptr = saved_line;

     lead_len = get_leader_len(ptr, 
# 307 "misc1.c" 3 4
                                   ((void *)0)
# 307 "misc1.c"
                                       , 0);

     if (dir == 1)
     {




  if (

   lead_len == 0 &&

   ptr[0] == '#')
  {
      while (ptr[0] == '#' && curwin->w_cursor.lnum > 1)
   ptr = ml_get(--curwin->w_cursor.lnum);
      newindent = get_indent();
  }

  lead_len = get_leader_len(ptr, 
# 326 "misc1.c" 3 4
                                ((void *)0)
# 326 "misc1.c"
                                    , 0);
  if (lead_len > 0)
  {
# 337 "misc1.c"
      p = skipwhite(ptr);
      if (p[0] == '/' && p[1] == '*')
   p++;
      if (p[0] == '*')
      {
   for (p++; *p; p++)
   {
       if (p[0] == '/' && p[-1] == '*')
       {





    curwin->w_cursor.col = p - ptr;
    if ((pos = findmatch(
# 352 "misc1.c" 3 4
                        ((void *)0)
# 352 "misc1.c"
                            , '\000')) != 
# 352 "misc1.c" 3 4
                                       ((void *)0)
# 352 "misc1.c"
                                           )
    {
        curwin->w_cursor.lnum = pos->lnum;
        newindent = get_indent();
    }
       }
   }
      }
  }
  else

  {

      p = ptr + strlen((char *)(ptr)) - 1;
      while (p > ptr && ((*p) == ' ' || (*p) == '\t'))
   --p;
      last_char = *p;




      if (last_char == '{' || last_char == ';')
      {
   if (p > ptr)
       --p;
   while (p > ptr && ((*p) == ' ' || (*p) == '\t'))
       --p;
      }
# 388 "misc1.c"
      if (*p == ')')
      {
   curwin->w_cursor.col = p - ptr;
   if ((pos = findmatch(
# 391 "misc1.c" 3 4
                       ((void *)0)
# 391 "misc1.c"
                           , '(')) != 
# 391 "misc1.c" 3 4
                                      ((void *)0)
# 391 "misc1.c"
                                          )
   {
       curwin->w_cursor.lnum = pos->lnum;
       newindent = get_indent();
       ptr = ml_get_curline();
   }
      }




      if (last_char == '{')
      {
   did_si = 1;
   no_si = 1;
      }





      else if (last_char != ';' && last_char != '}'
             && cin_is_cinword(ptr))
   did_si = 1;
  }
     }
     else
     {




  if (

   lead_len == 0 &&

   ptr[0] == '#')
  {
      int was_backslashed = 0;

      while ((ptr[0] == '#' || was_backslashed) &&
    curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)
      {
   if (*ptr && ptr[strlen((char *)(ptr)) - 1] == '\\')
       was_backslashed = 1;
   else
       was_backslashed = 0;
   ptr = ml_get(++curwin->w_cursor.lnum);
      }
      if (was_backslashed)
   newindent = 0;
      else
   newindent = get_indent();
  }
  p = skipwhite(ptr);
  if (*p == '}')
      did_si = 1;
  else
      can_si_back = 1;
     }
     curwin->w_cursor = old_cursor;
 }
 if (do_si)
     can_si = 1;


 did_ai = 1;
    }






    end_comment_pending = '\000';
    lead_len = get_leader_len(saved_line, &lead_flags, dir == (-1));
    if (lead_len > 0)
    {
 char_u *lead_repl = 
# 469 "misc1.c" 3 4
                    ((void *)0)
# 469 "misc1.c"
                        ;
 int lead_repl_len = 0;
 char_u lead_middle[50];
 char_u lead_end[50];
 char_u *comment_end = 
# 473 "misc1.c" 3 4
                      ((void *)0)
# 473 "misc1.c"
                          ;
 int extra_space = 0;
 int current_flag;
 int require_blank = 0;
 char_u *p2;





 for (p = lead_flags; *p && *p != ':'; ++p)
 {
     if (*p == 'b')
     {
  require_blank = 1;
  continue;
     }
     if (*p == 's' || *p == 'm')
     {
  current_flag = *p;
  if (*p == 's')
  {



      if (dir == (-1))
      {
   lead_len = 0;
   break;
      }


      (void)copy_option_part(&p, lead_middle, 50, ",");
      require_blank = 0;
  }




  while (*p && p[-1] != ':')
  {
      if (*p == 'b')
   require_blank = 1;
      ++p;
  }
  (void)copy_option_part(&p, lead_middle, 50, ",");

  while (*p && p[-1] != ':')
  {

      if (*p == 'x')
   end_comment_pending = -1;
      ++p;
  }
  n = copy_option_part(&p, lead_end, 50, ",");

  if (end_comment_pending == -1)
      end_comment_pending = lead_end[n - 1];





  if (dir == 1)
  {
      for (p = saved_line + lead_len; *p; ++p)
   if (strncmp((char *)(p), (char *)(lead_end), (size_t)(n)) == 0)
   {
       comment_end = p;
       lead_len = 0;
       break;
   }
  }




  if (lead_len)
  {
      if (current_flag == 's')
      {
   lead_repl = lead_middle;
   lead_repl_len = strlen((char *)(lead_middle));
      }






      if (!((saved_line[lead_len - 1]) == ' ' || (saved_line[lead_len - 1]) == '\t')
       && ((p_extra != 
# 564 "misc1.c" 3 4
                      ((void *)0)
        
# 565 "misc1.c"
       && (int)curwin->w_cursor.col == lead_len)
    || (p_extra == 
# 566 "misc1.c" 3 4
                  ((void *)0)
        
# 567 "misc1.c"
       && saved_line[lead_len] == '\000')
    || require_blank))
   extra_space = 1;
  }
  break;
     }
     if (*p == 'e')
     {





  if (dir == 1)
  {
      comment_end = skipwhite(saved_line);
      lead_len = 0;
      break;
  }





  while (p > curbuf->b_p_com && *p != ',')
      --p;
  for (lead_repl = p; lead_repl > curbuf->b_p_com
      && lead_repl[-1] != ':'; --lead_repl)
      ;
  lead_repl_len = p - lead_repl;



  extra_space = 1;


  for (p2 = p; *p2 && *p2 != ':'; p2++)
  {
      if (*p2 == 'x')
   end_comment_pending = -1;
  }
  if (end_comment_pending == -1)
  {

      while (*p2 && *p2 != ',')
   p2++;
      end_comment_pending = p2[-1];
  }
  break;
     }
     if (*p == 'f')
     {




  if (dir == (-1))
      lead_len = 0;
  else
  {
      lead_repl = (char_u *)"";
      lead_repl_len = 0;
  }
  break;
     }
 }
 if (lead_len)
 {

     leader = alloc(lead_len + lead_repl_len + extra_space +
             extra_len + 1);
     allocated = leader;

     if (leader == 
# 640 "misc1.c" 3 4
                  ((void *)0)
# 640 "misc1.c"
                      )
  lead_len = 0;
     else
     {
  strncpy((char *)(leader), (char *)(saved_line), (size_t)(lead_len));
  leader[lead_len] = '\000';




  if (lead_repl != 
# 650 "misc1.c" 3 4
                  ((void *)0)
# 650 "misc1.c"
                      )
  {
      int c = 0;
      int off = 0;

      for (p = lead_flags; *p && *p != ':'; ++p)
      {
   if (*p == 'r' || *p == 'l')
       c = *p;
   else if (
# 659 "misc1.c" 3 4
           ((*__ctype_b_loc ())[(int) ((
# 659 "misc1.c"
           *p
# 659 "misc1.c" 3 4
           ))] & (unsigned short int) _ISdigit) 
# 659 "misc1.c"
                       || *p == '-')
       off = getdigits(&p);
      }
      if (c == 'r')
      {

   for (p = leader + lead_len - 1; p > leader
            && ((*p) == ' ' || (*p) == '\t'); --p)
       ;

   ++p;
   if (p < leader + lead_repl_len)
       p = leader;
   else
       p -= lead_repl_len;
   mch_memmove(p, lead_repl, (size_t)lead_repl_len);
   if (p + lead_repl_len > leader + lead_len)
       p[lead_repl_len] = '\000';


   while (--p >= leader)
       if (!((*p) == ' ' || (*p) == '\t'))
    *p = ' ';
      }
      else
      {
   p = skipwhite(leader);
   mch_memmove(p, lead_repl, (size_t)lead_repl_len);




   for (p += lead_repl_len; p < leader + lead_len; ++p)
       if (!((*p) == ' ' || (*p) == '\t'))
    *p = ' ';
   *p = '\000';
      }


      if (curbuf->b_p_ai

     || do_si

          )
   newindent = get_indent_str(leader);


      if (newindent + off < 0)
      {
   off = -newindent;
   newindent = 0;
      }
      else
   newindent += off;



      while (off > 0 && lead_len > 0
            && leader[lead_len - 1] == ' ')
      {
   --lead_len;
   --off;
      }



      if (lead_len > 0 && ((leader[lead_len - 1]) == ' ' || (leader[lead_len - 1]) == '\t'))
   extra_space = 0;
      leader[lead_len] = '\000';
  }

  if (extra_space)
  {
      leader[lead_len++] = ' ';
      leader[lead_len] = '\000';
  }

  newcol = lead_len;





  if (newindent

    || did_si

        )
  {
      while (lead_len && ((*leader) == ' ' || (*leader) == '\t'))
      {
   --lead_len;
   --newcol;
   ++leader;
      }
  }

     }

     did_si = can_si = 0;

 }
 else if (comment_end != 
# 761 "misc1.c" 3 4
                        ((void *)0)
# 761 "misc1.c"
                            )
 {






     if (comment_end[0] == '*' && comment_end[1] == '/' &&
   (curbuf->b_p_ai

     || do_si

          ))
     {
  old_cursor = curwin->w_cursor;
  curwin->w_cursor.col = comment_end - saved_line;
  if ((pos = findmatch(
# 778 "misc1.c" 3 4
                      ((void *)0)
# 778 "misc1.c"
                          , '\000')) != 
# 778 "misc1.c" 3 4
                                     ((void *)0)
# 778 "misc1.c"
                                         )
  {
      curwin->w_cursor.lnum = pos->lnum;
      newindent = get_indent();
  }
  curwin->w_cursor = old_cursor;
     }
 }
    }



    if (p_extra != 
# 790 "misc1.c" 3 4
                  ((void *)0)
# 790 "misc1.c"
                      )
    {
 *p_extra = saved_char;







 if (State == (0x200 + 0x10))
     replace_push('\000');
 if (curbuf->b_p_ai || del_spaces)
 {
     while (*p_extra == ' ' || *p_extra == '\t')
     {
  if (State == (0x200 + 0x10))
      replace_push(*p_extra);
  ++p_extra;
     }
 }
 if (*p_extra != '\000')
     did_ai = 0;
    }

    if (p_extra == 
# 815 "misc1.c" 3 4
                  ((void *)0)
# 815 "misc1.c"
                      )
 p_extra = (char_u *)"";



    if (lead_len)
    {
 strcat((char *)(leader), (char *)(p_extra));
 p_extra = leader;
 did_ai = 1;
    }
    else
 end_comment_pending = '\000';


    old_cursor = curwin->w_cursor;
    if (dir == (-1))
 --curwin->w_cursor.lnum;
    if (State != (0x300 + 0x10) || old_cursor.lnum >= orig_line_count)
    {
 if (!ml_append(curwin->w_cursor.lnum, p_extra, (colnr_t)0, 0))
     goto theend;
 mark_adjust(curwin->w_cursor.lnum + 1, (linenr_t)(0x7fffffff), 1L, 0L);
    }
    else
    {



 curwin->w_cursor.lnum++;
 if (curwin->w_cursor.lnum >= Insstart.lnum + vr_lines_changed)
 {



     (void)u_save_cursor();
     vr_lines_changed++;
 }
 ml_replace(curwin->w_cursor.lnum, p_extra, 1);
 curwin->w_cursor.lnum--;
    }
    changed_line_abv_curs();

    if (newindent

      || did_si

    )
    {
 ++curwin->w_cursor.lnum;

 if (did_si)
 {
     if (p_sr)
  newindent -= newindent % (int)curbuf->b_p_sw;
     newindent += (int)curbuf->b_p_sw;
 }

 set_indent(newindent, 0);
 ai_col = curwin->w_cursor.col;





 if (State == (0x200 + 0x10))
     for (n = 0; n < (int)curwin->w_cursor.col; ++n)
  replace_push('\000');
 newcol += curwin->w_cursor.col;

 if (no_si)
     did_si = 0;

    }






    if (State == (0x200 + 0x10))
 while (lead_len-- > 0)
     replace_push('\000');


    curwin->w_cursor = old_cursor;

    if (dir == 1)
    {
 if (redraw)
 {
     old_plines = plines(curwin->w_cursor.lnum);
     new_plines = old_plines;
 }
 if (trunc_line || State == 0x10 || State == (0x200 + 0x10)
       || State == (0x300 + 0x10))
 {

     saved_line[curwin->w_cursor.col] = '\000';
     if (trunc_line)
  truncate_spaces(saved_line);
     ml_replace(curwin->w_cursor.lnum, saved_line, 0);
     saved_line = 
# 917 "misc1.c" 3 4
                 ((void *)0)
# 917 "misc1.c"
                     ;


     syn_changed(curwin->w_cursor.lnum);

     if (redraw)
  new_plines = plines(curwin->w_cursor.lnum);
 }






 curwin->w_cursor.col = 0;

 if (redraw)
 {
# 944 "misc1.c"
     if (State != (0x300 + 0x10) || old_cursor.lnum >= orig_line_count)
  extra_plines = plines(curwin->w_cursor.lnum + 1);
     n = curwin->w_cline_row + new_plines;
     if (n + extra_plines - 1 >= curwin->w_height - p_so)
     {


  if (redraw < 0)
      win_del_lines(curwin, 0, plines(curwin->w_topline),
          1, 1);
  scrollup(1L);
     }
     else
  win_ins_lines(curwin, n, new_plines - old_plines + extra_plines,
          1, 1);
 }





 curwin->w_cursor.lnum = old_cursor.lnum + 1;
    }
    else if (redraw)
    {




 win_ins_lines(curwin, curwin->w_cline_row, 1, 1, 1);
    }

    curwin->w_cursor.col = newcol;







    if (State == (0x300 + 0x10))
    {
 State = 0x10;
 vreplace_mode = 1;
    }
    else
 vreplace_mode = 0;





    if (

     leader == 
# 998 "misc1.c" 3 4
              ((void *)0) 
# 998 "misc1.c"
                   &&

     curbuf->b_p_lisp && curbuf->b_p_ai)
    {
 fixthisline(get_lisp_indent);
 p = ml_get_curline();
 ai_col = skipwhite(p) - p;
    }





    if (

     (leader == 
# 1013 "misc1.c" 3 4
               ((void *)0) 
# 1013 "misc1.c"
                    || !curbuf->b_p_ai) &&

     curbuf->b_p_cin &&
     in_cinkeys(dir == 1 ? 0x101 :
   0x102, ' ', linewhite(curwin->w_cursor.lnum)))
    {
 fixthisline(get_c_indent);
 p = ml_get_curline();
 ai_col = skipwhite(p) - p;
    }


    if (vreplace_mode)
 State = (0x300 + 0x10);







    if (State == (0x300 + 0x10))
    {

 p_extra = vim_strsave(ml_get_curline());
 if (p_extra == 
# 1038 "misc1.c" 3 4
               ((void *)0)
# 1038 "misc1.c"
                   )
     goto theend;


 ml_replace(curwin->w_cursor.lnum, next_line, 0);


 curwin->w_cursor.col = 0;
 vr_virtcol = (0x7fffffff);
 while (*p_extra != '\000')
     ins_char(*p_extra++);
 next_line = 
# 1049 "misc1.c" 3 4
            ((void *)0)
# 1049 "misc1.c"
                ;
    }




    approximate_botline();

    if (redraw > 0)
    {
 update_topline();
 update_screen(35);
    }
    changed();

    retval = 1;
theend:
    vim_free(saved_line);
    vim_free(next_line);
    vim_free(allocated);
    return retval;
}
# 1081 "misc1.c"
    int
get_leader_len(line, flags, backward)
    char_u *line;
    char_u **flags;
    int backward;
{
    int i, j;
    int got_com = 0;
    int found_one;
    char_u part_buf[50];
    char_u *string;
    char_u *list;

    if (!fo_do_comments)
 return 0;

    i = 0;
    while (((line[i]) == ' ' || (line[i]) == '\t'))
 ++i;




    while (line[i])
    {



 found_one = 0;
 for (list = curbuf->b_p_com; *list; )
 {




     if (!got_com && flags != 
# 1116 "misc1.c" 3 4
                             ((void *)0)
# 1116 "misc1.c"
                                 )
  *flags = list;
     (void)copy_option_part(&list, part_buf, 50, ",");
     string = vim_strchr(part_buf, ':');
     if (string == 
# 1120 "misc1.c" 3 4
                  ((void *)0)
# 1120 "misc1.c"
                      )
  continue;
     *string++ = '\000';





     if (got_com && vim_strchr(part_buf, 'n') == 
# 1128 "misc1.c" 3 4
                                                     ((void *)0)
# 1128 "misc1.c"
                                                         )
  continue;


     if (backward && vim_strchr(part_buf, 'O') != 
# 1132 "misc1.c" 3 4
                                                        ((void *)0)
# 1132 "misc1.c"
                                                            )
  continue;







     if (((string[0]) == ' ' || (string[0]) == '\t'))
     {
  if (i == 0 || !((line[i - 1]) == ' ' || (line[i - 1]) == '\t'))
      continue;
  while (((string[0]) == ' ' || (string[0]) == '\t'))
      ++string;
     }
     for (j = 0; string[j] != '\000' && string[j] == line[i + j]; ++j)
  ;
     if (string[j] != '\000')
  continue;





     if (vim_strchr(part_buf, 'b') != 
# 1157 "misc1.c" 3 4
                                           ((void *)0)
      
# 1158 "misc1.c"
     && !((line[i + j]) == ' ' || (line[i + j]) == '\t') && line[i + j] != '\000')
  continue;




     i += j;
     got_com = 1;
     found_one = 1;
     break;
 }




 if (!found_one)
     break;




 while (((line[i]) == ' ' || (line[i]) == '\t'))
     ++i;




 if (vim_strchr(part_buf, 'n') == 
# 1185 "misc1.c" 3 4
                                      ((void *)0)
# 1185 "misc1.c"
                                          )
     break;
    }
    return (got_com ? i : 0);
}





    int
plines_check(p)
    linenr_t p;
{
    if (p < 1 || p > curbuf->b_ml.ml_line_count)
 return (0x7fffffff);
    return plines_win(curwin, p);
}




    int
plines(p)
    linenr_t p;
{
    return plines_win(curwin, p);
}

    int
plines_win(wp, p)
    WIN *wp;
    linenr_t p;
{
    long col;
    char_u *s;
    int lines;

    if (!wp->w_p_wrap)
 return 1;

    s = ml_get_buf(wp->w_buffer, p, 0);
    if (*s == '\000')
 return 1;

    col = win_linetabsize(wp, s);





    if (wp->w_p_list && lcs_eol != '\000')
 col += 1;




    if (wp->w_p_nu)
 col += 8;

    lines = (col + (Columns - 1)) / Columns;
    if (lines <= wp->w_height)
 return lines;
    return (int)(wp->w_height);
}





    int
plines_win_col(wp, p, column)
    WIN *wp;
    linenr_t p;
    long column;
{
    register long col;
    register char_u *s;
    register int lines;

    if (!wp->w_p_wrap)
 return 1;

    s = ml_get_buf(wp->w_buffer, p, 0);

    col = 0;
    while (*s != '\000' && --column >= 0)
 col += win_lbr_chartabsize(wp, s++, (colnr_t)col, 
# 1272 "misc1.c" 3 4
                                                  ((void *)0)
# 1272 "misc1.c"
                                                      );
# 1281 "misc1.c"
    if (*s == '\011' && (State & 0x01) && (!wp->w_p_list || lcs_tab1))
 col += win_lbr_chartabsize(wp, s, (colnr_t)col, 
# 1282 "misc1.c" 3 4
                                                ((void *)0)
# 1282 "misc1.c"
                                                    ) - 1;




    if (wp->w_p_nu)
 col += 8;

    lines = 1 + col / Columns;
    if (lines <= wp->w_height)
 return lines;
    return (int)(wp->w_height);
}





    int
plines_m(first, last)
    linenr_t first, last;
{
    return plines_m_win(curwin, first, last);
}

    int
plines_m_win(wp, first, last)
    WIN *wp;
    linenr_t first, last;
{
    int count = 0;

    while (first <= last)
 count += plines_win(wp, first++);
    return (count);
}






    static int
temporary_nolist()
{
    int old_list = curwin->w_p_list;

    if (old_list && vim_strchr(p_cpo, 'L') == 
# 1329 "misc1.c" 3 4
                                                    ((void *)0)
# 1329 "misc1.c"
                                                        )
 curwin->w_p_list = 0;
    return old_list;
}





    void
ins_char(c)
    int c;
{
    char_u *p;
    char_u *newp;
    char_u *oldp;
    int oldlen;
    int extra;
    colnr_t col = curwin->w_cursor.col;
    linenr_t lnum = curwin->w_cursor.lnum;
    int vcol;
    int new_vcol = 0;
    int i;
    int size;
    int old_list;

    oldp = ml_get(lnum);
    oldlen = strlen((char *)(oldp)) + 1;

    if (State != (0x200 + 0x10) || *(oldp + col) == '\000')
 extra = 1;
    else
 extra = 0;
# 1371 "misc1.c"
    if (State == (0x200 + 0x10))
    {
 replace_push('\000');
 if (!extra)
     replace_push(*(oldp + col));
    }





    if (State == (0x300 + 0x10))
    {
 old_list = temporary_nolist();
 if (vr_virtcol == (0x7fffffff))
 {
     getvcol(curwin, &curwin->w_cursor, 
# 1387 "misc1.c" 3 4
                                       ((void *)0)
# 1387 "misc1.c"
                                           , &vr_virtcol, 
# 1387 "misc1.c" 3 4
                                                          ((void *)0)
# 1387 "misc1.c"
                                                              );






     vr_virtoffset = vr_virtcol - get_replace_stack_virtcol();
 }
 vcol = vr_virtcol;
 replace_push('\000');
 new_vcol = vcol + chartabsize(c, vcol);
 vcol -= vr_virtoffset;
 vr_virtoffset = 0;
 i = col;
 while (oldp[i] != '\000')
 {
     size = chartabsize(oldp[i], vcol);
     vcol += size;
     if (vcol > new_vcol)
     {



  if (size == 2 && (oldp[i] != '\011' || curwin->w_p_list)
      && vcol == new_vcol + 1)
      vr_virtoffset = 1;
  break;
     }
     replace_push(oldp[i++]);
     extra--;
 }
 curwin->w_p_list = old_list;
    }
# 1433 "misc1.c"
 newp = alloc_check((unsigned)(oldlen + extra));
    if (newp == 
# 1434 "misc1.c" 3 4
               ((void *)0)
# 1434 "misc1.c"
                   )
 return;
    if (col > 0)
 mch_memmove(newp, oldp, (size_t)col);
    p = newp + col;
    if (State == (0x300 + 0x10) && extra <= 0)
    {
 i = col - extra + 1;
 mch_memmove(p + 1, oldp + i, (size_t)(oldlen - i));
    }
    else
    {






     mch_memmove(p + extra, oldp + col, (size_t)(oldlen - col));
    }

    *p = c;
    ml_replace(lnum, newp, 0);





    if (p_sm && (State & 0x10)






     && (c == ')' || c == '}' || c == ']')




       )
 showmatch();




    {

 ++curwin->w_cursor.col;


 vr_virtcol = new_vcol;
    }
    changed();



    changed_cline_bef_curs();
    approximate_botline();
}





    void
ins_str(s)
    char_u *s;
{
    char_u *oldp, *newp;
    int newlen = strlen((char *)(s));
    int oldlen;
    colnr_t col = curwin->w_cursor.col;
    linenr_t lnum = curwin->w_cursor.lnum;

    oldp = ml_get(lnum);
    oldlen = strlen((char *)(oldp));

    newp = alloc_check((unsigned)(oldlen + newlen + 1));
    if (newp == 
# 1513 "misc1.c" 3 4
               ((void *)0)
# 1513 "misc1.c"
                   )
 return;
    if (col > 0)
 mch_memmove(newp, oldp, (size_t)col);
    mch_memmove(newp + col, s, (size_t)newlen);
    mch_memmove(newp + col + newlen, oldp + col, (size_t)(oldlen - col + 1));
    ml_replace(lnum, newp, 0);
    curwin->w_cursor.col += newlen;
    changed();
    changed_cline_bef_curs();
    approximate_botline();
}







    int
del_char(fixpos)
    int fixpos;
{
# 1557 "misc1.c"
 return del_chars(1L, fixpos);
}







    int
del_chars(count, fixpos)
    long count;
    int fixpos;
{
    char_u *oldp, *newp;
    colnr_t oldlen;
    linenr_t lnum = curwin->w_cursor.lnum;
    colnr_t col = curwin->w_cursor.col;
    int was_alloced;
    long movelen;

    oldp = ml_get(lnum);
    oldlen = strlen((char *)(oldp));




    if (col >= oldlen)
 return 0;




    movelen = (long)oldlen - (long)col - count + 1;
    if (movelen <= 1)
    {




 if (col > 0 && fixpos)
     --curwin->w_cursor.col;
 count = oldlen - col;
 movelen = 1;
    }





    was_alloced = ml_line_alloced();
    if (was_alloced)
 newp = oldp;
    else
    {
 newp = alloc((unsigned)(oldlen + 1 - count));
 if (newp == 
# 1613 "misc1.c" 3 4
            ((void *)0)
# 1613 "misc1.c"
                )
     return 0;
 mch_memmove(newp, oldp, (size_t)col);
    }
    mch_memmove(newp + col, oldp + col + count, (size_t)movelen);
    if (!was_alloced)
 ml_replace(lnum, newp, 0);

    changed();





    changed_cline_bef_curs();
    approximate_botline();
    return 1;
}






    int
truncate_line(fixpos)
    int fixpos;
{
    char_u *newp;
    linenr_t lnum = curwin->w_cursor.lnum;
    colnr_t col = curwin->w_cursor.col;

    if (col == 0)
 newp = vim_strsave((char_u *)"");
    else
 newp = vim_strnsave(ml_get(lnum), col);

    if (newp == 
# 1650 "misc1.c" 3 4
               ((void *)0)
# 1650 "misc1.c"
                   )
 return 0;

    ml_replace(lnum, newp, 0);




    if (fixpos && curwin->w_cursor.col > 0)
 --curwin->w_cursor.col;

    changed();
    changed_cline_bef_curs();
    approximate_botline();
    return 1;
}

    void
del_lines(nlines, dowindow, undo)
    long nlines;
    int dowindow;
    int undo;
{
    int num_plines = 0;
    int offset = 0;

    if (nlines <= 0)
 return;




    if (!redrawing() || !botline_approximated())
 dowindow = 0;
    else
    {
 validate_cursor();
 if (nlines > (curwin->w_height - curwin->w_wrow) && dowindow)
 {
     dowindow = 0;

     win_del_lines(curwin, curwin->w_wrow, curwin->w_height, 1, 1);
 }
    }





    approximate_botline();


    if (undo && u_savedel(curwin->w_cursor.lnum, nlines) == 0)
 return;


    mark_adjust(curwin->w_cursor.lnum, curwin->w_cursor.lnum + nlines - 1,
        (linenr_t)(0x7fffffff), -nlines);

    while (nlines-- > 0)
    {
 if (curbuf->b_ml.ml_flags & 1)
     break;





 if (dowindow)
     num_plines += plines(curwin->w_cursor.lnum);

 ml_delete(curwin->w_cursor.lnum, 1);

 changed();


 if (curwin->w_cursor.lnum > curbuf->b_ml.ml_line_count)
 {
     curwin->w_cursor.lnum = curbuf->b_ml.ml_line_count;
     offset = 1;
     break;
 }
    }
    curwin->w_cursor.col = 0;




    changed_cline_bef_curs();




    if (dowindow && num_plines > 0)
    {
 validate_cline_row();
 win_del_lines(curwin, curwin->w_cline_row + offset, num_plines,
          1, 1);
    }
}

    int
gchar_pos(pos)
    FPOS *pos;
{
    char_u *ptr = ml_get_pos(pos);





    return (int)*ptr;
}

    int
gchar_cursor()
{
    char_u *ptr = ml_get_cursor();





    return (int)*ptr;
}





    void
pchar_cursor(c)
    int c;
{
    *(ml_get_buf(curbuf, curwin->w_cursor.lnum, 1) +
          curwin->w_cursor.col) = c;
}
# 1812 "misc1.c"
    int
inindent(extra)
    int extra;
{
    char_u *ptr;
    colnr_t col;

    for (col = 0, ptr = ml_get_curline(); ((*ptr) == ' ' || (*ptr) == '\t'); ++col)
 ++ptr;
    if (col >= curwin->w_cursor.col + extra)
 return 1;
    else
 return 0;
}




    char_u *
skip_to_option_part(p)
    char_u *p;
{
    if (*p == ',')
 ++p;
    while (*p == ' ')
 ++p;
    return p;
}

    char *
plural(n)
    long n;
{
    static char buf[2] = "s";

    if (n == 1)
 return &(buf[1]);
    return &(buf[0]);
}




    void
changed()
{
    int save_msg_scroll = msg_scroll;

    if (!curbuf->b_changed)
    {
 change_warning(0);
 if (curbuf->b_may_swap)
 {
     ml_open_file(curbuf);





     if (need_wait_return)
     {
  out_flush();
  ui_delay(2000L, 1);
  wait_return(1);
  msg_scroll = save_msg_scroll;
     }
 }
 curbuf->b_changed = 1;
 ml_setdirty(curbuf, 1);
 check_status(curbuf);
    }
    modified = 1;
    tag_modified = 1;
}




    void
unchanged(buf, ff)
    BUF *buf;
    int ff;
{
    if (buf->b_changed || (ff && buf->b_start_ffc != *buf->b_p_ff))
    {
 buf->b_changed = 0;
 ml_setdirty(buf, 0);
 if (ff)
     buf->b_start_ffc = *buf->b_p_ff;
 check_status(buf);
    }
}





    void
check_status(buf)
    BUF *buf;
{
    WIN *wp;
    int i;

    i = 0;
    for (wp = firstwin; wp != 
# 1917 "misc1.c" 3 4
                             ((void *)0)
# 1917 "misc1.c"
                                 ; wp = wp->w_next)
 if (wp->w_buffer == buf && wp->w_status_height)
 {
     wp->w_redr_status = 1;
     ++i;
 }
    if (i)
 redraw_later(40);
}
# 1934 "misc1.c"
    void
change_warning(col)
    int col;

{
    if (curbuf->b_did_warn == 0
     && curbuf_changed() == 0
     && !p_im

     && !autocmd_busy

     && curbuf->b_p_ro)
    {




 msg_start();
 if (msg_row == Rows - 1)
     msg_col = col;
 msg_puts_attr((char_u *)("Warning: Changing a readonly file"), (highlight_attr[(int)(HLF_W)] | 0x1000))
                                   ;
 msg_clr_eos();
 (void)msg_end();
 out_flush();
 ui_delay(1000L, 1);
 curbuf->b_did_warn = 1;
 redraw_cmdline = 0;
 if (msg_row < Rows - 1)
     showmode();
    }
}
# 1976 "misc1.c"
    int
ask_yesno(str, direct)
    char_u *str;
    int direct;
{
    int r = ' ';
    int save_State = State;

    if (exiting)
 settmode(2);
    ++no_wait_return;



    State = 0xc00;

    setmouse();

    ++no_mapping;
    ++allow_keys;

    while (r != 'y' && r != 'n')
    {

 smsg_attr(highlight_attr[(int)(HLF_R)], (char_u *)"%s (y/n)?", str);
 if (direct)
     r = get_keystroke();
 else
     r = safe_vgetc();
 if (r == (('C') & 0x1f) || r == '\033')
     r = 'n';
 msg_putchar(r);
 out_flush();
    }
    --no_wait_return;
    State = save_State;

    setmouse();

    --no_mapping;
    --allow_keys;

    return r;
}
# 2028 "misc1.c"
    int
get_keystroke()
{

    char_u buf[51];
    int len = 0;
    int n;

    for (;;)
    {
 cursor_on();
 out_flush();



 n = ui_inchar(buf + len, 51 - 6 - len, len == 0 ? -1L : 100L);
 if (n > 0)
 {
     len += n;
     if ((n = check_termcode(1, buf, len)) < 0)
  continue;
     if (n)
  len = n;
 }
 if (len == 0)
     continue;


 if (buf[0] == (0x80) && buf[1] == 252)
 {
     mod_mask = buf[2];
     len -= 3;
     if (len == 0)
  continue;
     mch_memmove(buf, buf + 3, (size_t)len);
 }
 n = buf[0];
 if (n == (0x80))
 {
     n = ((buf[1]) == 254 ? (0x80) : (buf[1]) == 255 ? ((255) + ((int)(('X')) << 8)) : ((buf[1]) + ((int)(buf[2]) << 8)));


     if (n == ((253) + ((int)(KE_LEFTMOUSE) << 8))
      || n == ((253) + ((int)(KE_LEFTMOUSE_NM) << 8))
      || n == ((253) + ((int)(KE_LEFTDRAG) << 8))
      || n == ((253) + ((int)(KE_LEFTRELEASE) << 8))
      || n == ((253) + ((int)(KE_LEFTRELEASE_NM) << 8))
      || n == ((253) + ((int)(KE_MIDDLEMOUSE) << 8))
      || n == ((253) + ((int)(KE_MIDDLEDRAG) << 8))
      || n == ((253) + ((int)(KE_MIDDLERELEASE) << 8))
      || n == ((253) + ((int)(KE_RIGHTMOUSE) << 8))
      || n == ((253) + ((int)(KE_RIGHTDRAG) << 8))
      || n == ((253) + ((int)(KE_RIGHTRELEASE) << 8))
      || n == ((253) + ((int)(KE_MOUSEDOWN) << 8))
      || n == ((253) + ((int)(KE_MOUSEUP) << 8))




        )
     {
  len = 0;
  continue;
     }

 }

 if (n == intr_char)
     n = '\033';

 break;
    }
    return n;
}




    int
get_number(colon)
    int colon;
{
    int n = 0;
    int c;




    ++no_mapping;
    ++allow_keys;
    for (;;)
    {
 windgoto(msg_row, msg_col);
 c = safe_vgetc();
 if (vim_isdigit(c))
 {
     n = n * 10 + c - '0';
     msg_putchar(c);
 }
 else if (c == (('k') + ((int)('D') << 8)) || c == ((253) + ((int)(KE_KDEL) << 8)) || c == (('k') + ((int)('b') << 8)) || c == (('H') & 0x1f))
 {
     n /= 10;
     msg_puts((char_u *)("\b \b"));
 }
 else if (n == 0 && c == ':' && colon)
 {
     stuffcharReadbuff(':');
     if (!exmode_active)
  cmdline_row = msg_row;
     skip_redraw = 1;
     do_redraw = 0;
     break;
 }
 else if (c == '\015' || c == '\012' || c == (('C') & 0x1f) || c == '\033')
     break;
    }
    --no_mapping;
    --allow_keys;
    return n;
}

    void
msgmore(n)
    long n;
{
    long pn;

    if (global_busy ||
     keep_msg ||
     !messaging())
 return;

    if (n > 0)
 pn = n;
    else
 pn = -n;

    if (pn > p_report)
    {
 sprintf((char *)msg_buf, "%ld %s line%s %s",
  pn, n > 0 ? "more" : "fewer", plural(pn),
  got_int ? "(Interrupted)" : "");
 if (msg(msg_buf))
 {
     keep_msg = msg_buf;
     keep_msg_attr = 0;
 }
    }
}




    void
beep_flush()
{
    flush_buffers(0);
    vim_beep();
}




    void
vim_beep()
{
    if (p_vb)
    {
 out_str((term_strings[(int)(KS_VB)]));
    }
    else
    {
# 2214 "misc1.c"
 out_char('\007');

    }
}
# 2228 "misc1.c"
static char_u *homedir = 
# 2228 "misc1.c" 3 4
                        ((void *)0)
# 2228 "misc1.c"
                            ;

    void
init_homedir()
{
    char_u *var;




    var = (char_u *)getenv((char *)((char_u *)"HOME"));


    if (var != 
# 2241 "misc1.c" 3 4
              ((void *)0) 
# 2241 "misc1.c"
                   && *var == '\000')
 var = 
# 2242 "misc1.c" 3 4
      ((void *)0)
# 2242 "misc1.c"
          ;
# 2251 "misc1.c"
    if (var != 
# 2251 "misc1.c" 3 4
              ((void *)0)
# 2251 "misc1.c"
                  )
    {

 if (mch_dirname(NameBuff, 1024) == 1)
 {
     if (!chdir((char *)var) && mch_dirname(IObuff, (1024+1)) == 1)
  var = IObuff;
     chdir((char *)NameBuff);
 }

 homedir = vim_strsave(var);
    }
}







    void
expand_env(src, dst, dstlen)
    char_u *src;
    char_u *dst;
    int dstlen;
{
    char_u *tail;
    int c;
    char_u *var;
    int copy_char;
    int mustfree;
    int at_start = 1;

    src = skipwhite(src);
    --dstlen;
    while (*src && dstlen > 0)
    {
 copy_char = 1;
 if (*src == '$' || (*src == '~' && at_start))
 {
     mustfree = 0;





     if (*src == '$')
     {
  tail = src + 1;
  var = dst;
  c = dstlen - 1;



  if (*tail == '{' && !vim_isIDc('{'))
  {
      tail++;
      while (c-- > 0 && *tail && *tail != '}')
   *var++ = *tail++;
      tail++;
  }
  else

  {
      while (c-- > 0 && *tail && vim_isIDc(*tail))
      {




   *var++ = *tail++;

      }
  }

  *var = '\000';
  var = vim_getenv(dst, &mustfree);
     }

     else if ( src[1] == '\000'
      || vim_ispathsep(src[1])
      || vim_strchr((char_u *)" ,\t\n", src[1]) != 
# 2332 "misc1.c" 3 4
                                                  ((void *)0)
# 2332 "misc1.c"
                                                      )
     {
  var = homedir;
  tail = src + 1;
     }
     else
     {




  tail = src;
  var = dst;
  c = dstlen - 1;
  while ( c-- > 0
   && *tail
   && vim_isfilec(*tail)
   && !vim_ispathsep(*tail))
      *var++ = *tail++;
  *var = '\000';
# 2360 "misc1.c"
  {
      struct passwd *pw;

      pw = getpwnam((char *)dst + 1);
      if (pw != 
# 2364 "misc1.c" 3 4
               ((void *)0)
# 2364 "misc1.c"
                   )
   var = (char_u *)pw->pw_dir;
      else
   var = 
# 2367 "misc1.c" 3 4
        ((void *)0)
# 2367 "misc1.c"
            ;
  }
  if (var == 
# 2369 "misc1.c" 3 4
            ((void *)0)
# 2369 "misc1.c"
                )

  {
      expand_context = 2;
      var = ExpandOne(dst, 
# 2373 "misc1.c" 3 4
                          ((void *)0)
# 2373 "misc1.c"
                              , 16|64,
           2);
      mustfree = 1;
  }
# 2414 "misc1.c"
     }

     if (var != 
# 2416 "misc1.c" 3 4
               ((void *)0) 
# 2416 "misc1.c"
                    && *var != '\000' &&
     (strlen((char *)(var)) + strlen((char *)(tail)) + 1 < (unsigned)dstlen))
     {
  strcpy((char *)(dst), (char *)(var));
  dstlen -= strlen((char *)(var));
  dst += strlen((char *)(var));


  if (*var && vim_ispathsep(*(dst-1)) && vim_ispathsep(*tail))
      ++tail;
  src = tail;
  copy_char = 0;
     }
     if (mustfree)
  vim_free(var);
 }

 if (copy_char)
 {



     at_start = 0;
     if (src[0] == '\\')
     {
  *dst++ = *src++;
  --dstlen;
     }
     else if (src[0] == ' ' || src[0] == ',')
  at_start = 1;
     *dst++ = *src++;
     --dstlen;
 }
    }
    *dst = '\000';
}





    static char_u *
vim_getenv(name, mustfree)
    char_u *name;
    int *mustfree;
{
    char_u *p;
    char_u *pend;
    int vimruntime;







    p = (char_u *)getenv((char *)(name));
    if (p != 
# 2473 "misc1.c" 3 4
            ((void *)0) 
# 2473 "misc1.c"
                 && *p == '\000')
 p = 
# 2474 "misc1.c" 3 4
    ((void *)0)
# 2474 "misc1.c"
        ;

    if (p != 
# 2476 "misc1.c" 3 4
            ((void *)0)
# 2476 "misc1.c"
                )
 return p;

    vimruntime = (strcmp((char *)(name), (char *)("VIMRUNTIME")) == 0);
    if (!vimruntime && strcmp((char *)(name), (char *)("VIM")) != 0)
 return 
# 2481 "misc1.c" 3 4
       ((void *)0)
# 2481 "misc1.c"
           ;





    if (vimruntime

     && *default_vimruntime_dir == '\000'

       )
    {
 p = (char_u *)getenv((char *)((char_u *)"VIM"));
 if (p != 
# 2494 "misc1.c" 3 4
         ((void *)0) 
# 2494 "misc1.c"
              && *p == '\000')
     p = 
# 2495 "misc1.c" 3 4
        ((void *)0)
# 2495 "misc1.c"
            ;
 if (p != 
# 2496 "misc1.c" 3 4
         ((void *)0)
# 2496 "misc1.c"
             )
 {
     p = vim_version_dir(p);
     if (p != 
# 2499 "misc1.c" 3 4
             ((void *)0)
# 2499 "misc1.c"
                 )
  *mustfree = 1;
     else
  p = (char_u *)getenv((char *)((char_u *)"VIM"));
 }
    }






    if (p == 
# 2511 "misc1.c" 3 4
            ((void *)0)
# 2511 "misc1.c"
                )
    {
 if (vim_strchr(p_hf, '$') == 
# 2513 "misc1.c" 3 4
                             ((void *)0)
# 2513 "misc1.c"
                                 )
     p = p_hf;







 if (p != 
# 2522 "misc1.c" 3 4
         ((void *)0)
# 2522 "misc1.c"
             )
 {

     pend = gettail(p);


     if (p == p_hf)
  pend = remove_tail(p, pend, (char_u *)"doc");
# 2538 "misc1.c"
     if (!vimruntime)
     {
  pend = remove_tail(p, pend, (char_u *)"runtime");
  pend = remove_tail(p, pend, (char_u *)"vim57");
     }


     if (pend > p && vim_ispathsep(*(pend - 1)))
  --pend;


     p = vim_strnsave(p, (int)(pend - p));

     if (p != 
# 2551 "misc1.c" 3 4
             ((void *)0) 
# 2551 "misc1.c"
                  && !mch_isdir(p))
     {
  vim_free(p);
  p = 
# 2554 "misc1.c" 3 4
     ((void *)0)
# 2554 "misc1.c"
         ;
     }
     else
     {
# 2566 "misc1.c"
  *mustfree = 1;
     }
 }
    }



    if (p == 
# 2573 "misc1.c" 3 4
            ((void *)0)
# 2573 "misc1.c"
                )
    {

 if (vimruntime && *default_vimruntime_dir != '\000')
 {
     p = default_vimruntime_dir;
     *mustfree = 0;
 }
 else if (vimruntime && (p = vim_version_dir(default_vim_dir)) != 
# 2581 "misc1.c" 3 4
                                                                 ((void *)0)
# 2581 "misc1.c"
                                                                     )
 {
     *mustfree = 1;
 }
 else if (*default_vim_dir != '\000')
 {
     p = default_vim_dir;
     *mustfree = 0;
 }
    }






    if (p != 
# 2597 "misc1.c" 3 4
            ((void *)0)
# 2597 "misc1.c"
                )
    {
 if (vimruntime)
 {
     vim_setenv((char_u *)"VIMRUNTIME", p);
     didset_vimruntime = 1;
 }
 else
 {
     vim_setenv((char_u *)"VIM", p);
     didset_vim = 1;
 }
    }
    return p;
}





    static char_u *
vim_version_dir(vimdir)
    char_u *vimdir;
{
    char_u *p;

    if (vimdir == 
# 2623 "misc1.c" 3 4
                 ((void *)0) 
# 2623 "misc1.c"
                      || *vimdir == '\000')
 return 
# 2624 "misc1.c" 3 4
       ((void *)0)
# 2624 "misc1.c"
           ;
    p = concat_fnames(vimdir, (char_u *)"vim57", 1);
    if (p != 
# 2626 "misc1.c" 3 4
            ((void *)0) 
# 2626 "misc1.c"
                 && mch_isdir(p))
 return p;
    vim_free(p);
    p = concat_fnames(vimdir, (char_u *)"runtime", 1);
    if (p != 
# 2630 "misc1.c" 3 4
            ((void *)0) 
# 2630 "misc1.c"
                 && mch_isdir(p))
 return p;
    vim_free(p);
    return 
# 2633 "misc1.c" 3 4
          ((void *)0)
# 2633 "misc1.c"
              ;
}





    static char_u *
remove_tail(p, pend, name)
    char_u *p;
    char_u *pend;
    char_u *name;
{
    int len = strlen((char *)(name)) + 1;
    char_u *newend = pend - len;

    if (newend >= p
     && strncmp((char *)(newend), (char *)(name), (size_t)(len - 1)) == 0
     && (newend == p || vim_ispathsep(*(newend - 1))))
 return newend;
    return pend;
}






    char_u *
expand_env_save(src)
    char_u *src;
{
    char_u *p;

    p = alloc(1024);
    if (p != 
# 2668 "misc1.c" 3 4
            ((void *)0)
# 2668 "misc1.c"
                )
 expand_env(src, p, 1024);
    return p;
}




    void
vim_setenv(name, val)
    char_u *name;
    char_u *val;
{

    setenv((char *)name, (char *)val, 1);
# 2697 "misc1.c"
}






    void
home_replace(buf, src, dst, dstlen, one)
    BUF *buf;
    char_u *src;
    char_u *dst;
    int dstlen;
    int one;

{
    size_t dirlen = 0, envlen = 0;
    size_t len;
    char_u *homedir_env;
    char_u *p;

    if (src == 
# 2718 "misc1.c" 3 4
              ((void *)0)
# 2718 "misc1.c"
                  )
    {
 *dst = '\000';
 return;
    }




    if (buf != 
# 2727 "misc1.c" 3 4
              ((void *)0) 
# 2727 "misc1.c"
                   && buf->b_help)
    {
 strcpy((char *)(dst), (char *)(gettail(src)));
 return;
    }





    if (homedir != 
# 2737 "misc1.c" 3 4
                  ((void *)0)
# 2737 "misc1.c"
                      )
 dirlen = strlen((char *)(homedir));




    homedir_env = (char_u *)getenv((char *)((char_u *)"HOME"));


    if (homedir_env != 
# 2746 "misc1.c" 3 4
                      ((void *)0) 
# 2746 "misc1.c"
                           && *homedir_env == '\000')
 homedir_env = 
# 2747 "misc1.c" 3 4
              ((void *)0)
# 2747 "misc1.c"
                  ;
    if (homedir_env != 
# 2748 "misc1.c" 3 4
                      ((void *)0)
# 2748 "misc1.c"
                          )
 envlen = strlen((char *)(homedir_env));

    if (!one)
 src = skipwhite(src);
    while (*src && dstlen > 0)
    {
# 2764 "misc1.c"
 p = homedir;
 len = dirlen;
 for (;;)
 {
     if ( len
  && strncmp((char *)(src), (char *)(p), (size_t)(len)) == 0
  && (vim_ispathsep(src[len])
      || (!one && (src[len] == ',' || src[len] == ' '))
      || src[len] == '\000'))
     {
  src += len;
  if (--dstlen > 0)
      *dst++ = '~';




  if (!vim_ispathsep(src[0]) && --dstlen > 0)
      *dst++ = '/';
  break;
     }
     if (p == homedir_env)
  break;
     p = homedir_env;
     len = envlen;
 }


 while (*src && (one || (*src != ',' && *src != ' ')) && --dstlen > 0)
     *dst++ = *src++;

 while ((*src == ' ' || *src == ',') && --dstlen > 0)
     *dst++ = *src++;
    }


    *dst = '\000';
}





    char_u *
home_replace_save(buf, src)
    BUF *buf;
    char_u *src;
{
    char_u *dst;
    unsigned len;

    len = 3;
    if (src != 
# 2816 "misc1.c" 3 4
              ((void *)0)
# 2816 "misc1.c"
                  )
 len += strlen((char *)(src));
    dst = alloc(len);
    if (dst != 
# 2819 "misc1.c" 3 4
              ((void *)0)
# 2819 "misc1.c"
                  )
 home_replace(buf, src, dst, len, 1);
    return dst;
}
# 2833 "misc1.c"
    int
fullpathcmp(s1, s2, checkname)
    char_u *s1, *s2;
    int checkname;
{

    char_u exp1[1024];
    char_u full1[1024];
    char_u full2[1024];
    struct stat st1, st2;
    int r1, r2;

    expand_env(s1, exp1, 1024);
    r1 = stat(((char *)exp1), (&st1));
    r2 = stat(((char *)s2), (&st2));
    if (r1 != 0 && r2 != 0)
    {

 if (checkname)
 {
     if (strcmp((char *)(exp1), (char *)(s2)) == 0)
  return 7;
     r1 = mch_FullName(exp1, full1, 1024, 0);
     r2 = mch_FullName(s2, full2, 1024, 0);
     if (r1 == 1 && r2 == 1 && strcmp((char *)(full1), (char *)(full2)) == 0)
  return 7;
 }
 return 4;
    }
    if (r1 != 0 || r2 != 0)
 return 6;
    if (st1.st_dev == st2.st_dev && st1.st_ino == st2.st_ino)
 return 1;
    return 2;
# 2901 "misc1.c"
}




    char_u *
gettail(fname)
    char_u *fname;
{
    char_u *p1, *p2;

    if (fname == 
# 2912 "misc1.c" 3 4
                ((void *)0)
# 2912 "misc1.c"
                    )
 return (char_u *)"";
    for (p1 = p2 = fname; *p2; ++p2)
    {
 if (vim_ispathsep(*p2))
     p1 = p2 + 1;
    }
    return p1;
}




    char_u *
getnextcomp(fname)
    char_u *fname;
{
    while (*fname && !vim_ispathsep(*fname))
 ++fname;
    if (*fname)
 ++fname;
    return fname;
}






    char_u *
get_past_head(path)
    char_u *path;
{
    char_u *retval;
# 2960 "misc1.c"
    retval = path;



    while (vim_ispathsep(*retval))
 ++retval;

    return retval;
}




    int
vim_ispathsep(c)
    int c;
{




    return (c == '/');
# 3000 "misc1.c"
}
# 3039 "misc1.c"
    char_u *
concat_fnames(fname1, fname2, sep)
    char_u *fname1;
    char_u *fname2;
    int sep;
{
    char_u *dest;

    dest = alloc((unsigned)(strlen((char *)(fname1)) + strlen((char *)(fname2)) + 3));
    if (dest != 
# 3048 "misc1.c" 3 4
               ((void *)0)
# 3048 "misc1.c"
                   )
    {
 strcpy((char *)(dest), (char *)(fname1));
 if (sep)
     add_pathsep(dest);
 strcat((char *)(dest), (char *)(fname2));
    }
    return dest;
}





    void
add_pathsep(p)
    char_u *p;
{
    if (*p && !vim_ispathsep(*(p + strlen((char *)(p)) - 1)))
 strcat((char *)(p), (char *)("/"));
}





    char_u *
FullName_save(fname, force)
    char_u *fname;
    int force;

{
    char_u *buf;
    char_u *new_fname = 
# 3081 "misc1.c" 3 4
                       ((void *)0)
# 3081 "misc1.c"
                           ;

    if (fname == 
# 3083 "misc1.c" 3 4
                ((void *)0)
# 3083 "misc1.c"
                    )
 return 
# 3084 "misc1.c" 3 4
       ((void *)0)
# 3084 "misc1.c"
           ;

    buf = alloc((unsigned)1024);
    if (buf != 
# 3087 "misc1.c" 3 4
              ((void *)0)
# 3087 "misc1.c"
                  )
    {
 if (mch_FullName(fname, buf, 1024, force) != 0)
     new_fname = vim_strsave(buf);
 else
     new_fname = vim_strsave(fname);
 vim_free(buf);
    }
    return new_fname;
}



static char_u *skip_string (char_u *p);





    FPOS *
find_start_comment(ind_maxcomment)
    int ind_maxcomment;
{
    FPOS *pos;
    char_u *line;
    char_u *p;

    if ((pos = findmatchlimit(
# 3114 "misc1.c" 3 4
                             ((void *)0)
# 3114 "misc1.c"
                                 , '*', 0x01, ind_maxcomment)) == 
# 3114 "misc1.c" 3 4
                                                                         ((void *)0)
# 3114 "misc1.c"
                                                                             )
 return 
# 3115 "misc1.c" 3 4
       ((void *)0)
# 3115 "misc1.c"
           ;




    line = ml_get(pos->lnum);
    for (p = line; *p && (unsigned)(p - line) < pos->col; ++p)
 p = skip_string(p);
    if ((unsigned)(p - line) > pos->col)
 return 
# 3124 "misc1.c" 3 4
       ((void *)0)
# 3124 "misc1.c"
           ;
    return pos;
}





    static char_u *
skip_string(p)
    char_u *p;
{
    int i;




    for ( ; ; ++p)
    {
 if (p[0] == '\'')
 {
     if (!p[1])
  break;
     i = 2;
     if (p[1] == '\\')
     {
  ++i;
  while (
# 3151 "misc1.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 3151 "misc1.c"
        p[i - 1]
# 3151 "misc1.c" 3 4
        ))] & (unsigned short int) _ISdigit)
# 3151 "misc1.c"
                         )
      ++i;
     }
     if (p[i] == '\'')
     {
  p += i;
  continue;
     }
 }
 else if (p[0] == '"')
 {
     for (++p; p[0]; ++p)
     {
  if (p[0] == '\\' && p[1])
      ++p;
  else if (p[0] == '"')
      break;
     }
     continue;
 }
 break;
    }
    if (!*p)
 --p;
    return p;
}
# 3189 "misc1.c"
static char_u *cin_skipcomment (char_u *);
static int cin_nocode (char_u *);
static int cin_islabel_skip (char_u **);
static int cin_isdefault (char_u *);
static char_u *after_label (char_u *l);
static int get_indent_nolabel (linenr_t lnum);
static int skip_label (linenr_t, char_u **pp, int ind_maxcomment);
static int cin_ispreproc (char_u *);
static int cin_iscomment (char_u *);
static int cin_isterminated (char_u *, int);
static int cin_isfuncdecl (char_u *);
static int cin_isif (char_u *);
static int cin_iselse (char_u *);
static int cin_isdo (char_u *);
static int cin_iswhileofdo (char_u *, linenr_t, int);
static int cin_skip2pos (FPOS *trypos);
static FPOS *find_start_brace (int);
static FPOS *find_match_paren (int, int);
static int find_last_paren (char_u *l);
static int find_match (int lookfor, linenr_t ourscope, int ind_maxparen, int ind_maxcomment);




    static char_u *
cin_skipcomment(s)
    char_u *s;
{
    while (*s)
    {
 s = skipwhite(s);
 if (*s != '/')
     break;
 ++s;
 if (*s == '/')
 {
     s += strlen((char *)(s));
     break;
 }
 if (*s != '*')
     break;
 for (++s; *s; ++s)
     if (s[0] == '*' && s[1] == '/')
     {
  s += 2;
  break;
     }
    }
    return s;
}





    static int
cin_nocode(s)
    char_u *s;
{
    return *cin_skipcomment(s) == '\000';
}




    static int
cin_islabel_skip(s)
    char_u **s;
{
    if (!vim_isIDc(**s))
 return 0;

    while (vim_isIDc(**s))
 (*s)++;

    *s = cin_skipcomment(*s);


    return (**s == ':' && *++*s != ':');
}





    int
cin_islabel(ind_maxcomment)
    int ind_maxcomment;
{
    char_u *s;

    s = cin_skipcomment(ml_get_curline());





    if (cin_isdefault(s))
 return 0;
    if (cin_isscopedecl(s))
 return 0;

    if (cin_islabel_skip(&s))
    {




 FPOS cursor_save;
 FPOS *trypos;
 char_u *line;

 cursor_save = curwin->w_cursor;
 while (curwin->w_cursor.lnum > 1)
 {
     --curwin->w_cursor.lnum;




     curwin->w_cursor.col = 0;
     if ((trypos = find_start_comment(ind_maxcomment)) != 
# 3310 "misc1.c" 3 4
                                                         ((void *)0)
# 3310 "misc1.c"
                                                             )
  curwin->w_cursor = *trypos;

     line = ml_get_curline();
     if (cin_ispreproc(line))
  continue;
     if (*(line = cin_skipcomment(line)) == '\000')
  continue;

     curwin->w_cursor = cursor_save;
     if (cin_isterminated(line, 1)
      || cin_isscopedecl(line)
      || cin_iscase(line)
      || (cin_islabel_skip(&line) && cin_nocode(line)))
  return 1;
     return 0;
 }
 curwin->w_cursor = cursor_save;
 return 1;
    }
    return 0;
}




     int
cin_iscase(s)
    char_u *s;
{
    s = cin_skipcomment(s);
    if (strncmp((char *)(s), (char *)("case"), (size_t)(4)) == 0 && !vim_isIDc(s[4]))
    {
 for (s += 4; *s; ++s)
 {
     s = cin_skipcomment(s);
     if (*s == ':')
     {
  if (s[1] == ':')
      ++s;
  else
      return 1;
     }
     if (*s == '\'' && s[1] && s[2] == '\'')
  s += 2;
     else if (*s == '/' && (s[1] == '*' || s[1] == '/'))
  return 0;
     else if (*s == '"')
  return 0;
 }
 return 0;
    }

    if (cin_isdefault(s))
 return 1;
    return 0;
}




    static int
cin_isdefault(s)
    char_u *s;
{
    return (strncmp((char *)(s), (char *)("default"), (size_t)(7)) == 0
     && *(s = cin_skipcomment(s + 7)) == ':'
     && s[1] != ':');
}




    int
cin_isscopedecl(s)
    char_u *s;
{
    int i;

    s = cin_skipcomment(s);
    if (strncmp((char *)(s), (char *)("public"), (size_t)(6)) == 0)
 i = 6;
    else if (strncmp((char *)(s), (char *)("protected"), (size_t)(9)) == 0)
 i = 9;
    else if (strncmp((char *)(s), (char *)("private"), (size_t)(7)) == 0)
 i = 7;
    else
 return 0;
    return (*(s = cin_skipcomment(s + i)) == ':' && s[1] != ':');
}







    static char_u *
after_label(l)
    char_u *l;
{
    for ( ; *l; ++l)
    {
 if (*l == ':')
 {
     if (l[1] == ':')
  ++l;
     else if (!cin_iscase(l + 1))
  break;
 }
 else if (*l == '\'' && l[1] && l[2] == '\'')
     l += 2;
    }
    if (*l == '\000')
 return 
# 3424 "misc1.c" 3 4
       ((void *)0)
# 3424 "misc1.c"
           ;
    l = cin_skipcomment(l + 1);
    if (*l == '\000')
 return 
# 3427 "misc1.c" 3 4
       ((void *)0)
# 3427 "misc1.c"
           ;
    return l;
}





    static int
get_indent_nolabel(lnum)
    linenr_t lnum;
{
    char_u *l;
    FPOS fp;
    colnr_t col;
    char_u *p;

    l = ml_get(lnum);
    p = after_label(l);
    if (p == 
# 3446 "misc1.c" 3 4
            ((void *)0)
# 3446 "misc1.c"
                )
 return 0;

    fp.col = p - l;
    fp.lnum = lnum;
    getvcol(curwin, &fp, &col, 
# 3451 "misc1.c" 3 4
                              ((void *)0)
# 3451 "misc1.c"
                                  , 
# 3451 "misc1.c" 3 4
                                    ((void *)0)
# 3451 "misc1.c"
                                        );
    return (int)col;
}







    static int
skip_label(lnum, pp, ind_maxcomment)
    linenr_t lnum;
    char_u **pp;
    int ind_maxcomment;
{
    char_u *l;
    int amount;
    FPOS cursor_save;

    cursor_save = curwin->w_cursor;
    curwin->w_cursor.lnum = lnum;
    l = ml_get_curline();

    if (cin_iscase(l) || cin_isscopedecl(l) || cin_islabel(ind_maxcomment))
    {
 amount = get_indent_nolabel(lnum);
 l = after_label(ml_get_curline());
 if (l == 
# 3479 "misc1.c" 3 4
         ((void *)0)
# 3479 "misc1.c"
             )
     l = ml_get_curline();
    }
    else
    {
 amount = get_indent();
 l = ml_get_curline();
    }
    *pp = l;

    curwin->w_cursor = cursor_save;
    return amount;
}




    static int
cin_ispreproc(s)
    char_u *s;
{
    s = skipwhite(s);
    if (*s == '#')
 return 1;
    return 0;
}




    static int
cin_iscomment(p)
    char_u *p;
{
    return (p[0] == '/' && (p[1] == '*' || p[1] == '/'));
}







    static int
cin_isterminated(s, incl_open)
    char_u *s;
    int incl_open;
{
    s = cin_skipcomment(s);

    if (*s == '{' || (*s == '}' && !cin_iselse(s)))
 return 1;

    while (*s)
    {

 s = skip_string(cin_skipcomment(s));
 if ((*s == ';' || (incl_open && *s == '{') || *s == '}' || *s == ',')
           && cin_nocode(s + 1))
     return 1;
 if (*s)
     s++;
    }
    return 0;
}






    static int
cin_isfuncdecl(s)
    char_u *s;
{
    while (*s && *s != '(' && *s != ';' && *s != '\'' && *s != '"')
    {
 if (cin_iscomment(s))
     s = cin_skipcomment(s);
 else
     ++s;
    }
    if (*s != '(')
 return 0;

    while (*s && *s != ';' && *s != '\'' && *s != '"')
    {
 if (*s == ')' && cin_nocode(s + 1))
     return 1;
 if (cin_iscomment(s))
     s = cin_skipcomment(s);
 else
     ++s;
    }
    return 0;
}

    static int
cin_isif(p)
    char_u *p;
{
    return (strncmp((char *)(p), (char *)("if"), (size_t)(2)) == 0 && !vim_isIDc(p[2]));
}

    static int
cin_iselse(p)
    char_u *p;
{
    if (*p == '}')
 p = cin_skipcomment(p + 1);
    return (strncmp((char *)(p), (char *)("else"), (size_t)(4)) == 0 && !vim_isIDc(p[4]));
}

    static int
cin_isdo(p)
    char_u *p;
{
    return (strncmp((char *)(p), (char *)("do"), (size_t)(2)) == 0 && !vim_isIDc(p[2]));
}






    static int
cin_iswhileofdo(p, lnum, ind_maxparen)
    char_u *p;
    linenr_t lnum;
    int ind_maxparen;
{
    FPOS cursor_save;
    FPOS *trypos;
    int retval = 0;

    p = cin_skipcomment(p);
    if (*p == '}')
 p = cin_skipcomment(p + 1);
    if (strncmp((char *)(p), (char *)("while"), (size_t)(5)) == 0 && !vim_isIDc(p[5]))
    {
 cursor_save = curwin->w_cursor;
 curwin->w_cursor.lnum = lnum;
 curwin->w_cursor.col = 0;
 p = ml_get_curline();
 while (*p && *p != 'w')
 {
     ++p;
     ++curwin->w_cursor.col;
 }
 if ((trypos = findmatchlimit(
# 3628 "misc1.c" 3 4
                             ((void *)0)
# 3628 "misc1.c"
                                 , 0, 0, ind_maxparen)) != 
# 3628 "misc1.c" 3 4
                                                           ((void *)0)
  
# 3629 "misc1.c"
 && *cin_skipcomment(ml_get_pos(trypos) + 1) == ';')
     retval = 1;
 curwin->w_cursor = cursor_save;
    }
    return retval;
}





    static int
cin_skip2pos(trypos)
    FPOS *trypos;
{
    char_u *line;
    char_u *p;

    p = line = ml_get(trypos->lnum);
    while (*p && (colnr_t)(p - line) < trypos->col)
    {
 if (cin_iscomment(p))
     p = cin_skipcomment(p);
 else
 {
     p = skip_string(p);
     ++p;
 }
    }
    return (int)(p - line);
}
# 3670 "misc1.c"
    static FPOS *
find_start_brace(ind_maxcomment)
    int ind_maxcomment;
{
    FPOS cursor_save;
    FPOS *trypos;
    FPOS *pos;
    static FPOS pos_copy;

    cursor_save = curwin->w_cursor;
    while ((trypos = findmatchlimit(
# 3680 "misc1.c" 3 4
                                   ((void *)0)
# 3680 "misc1.c"
                                       , '{', 0x04, 0)) != 
# 3680 "misc1.c" 3 4
                                                                   ((void *)0)
# 3680 "misc1.c"
                                                                       )
    {
 pos_copy = *trypos;
 trypos = &pos_copy;
 curwin->w_cursor = *trypos;
 pos = 
# 3685 "misc1.c" 3 4
      ((void *)0)
# 3685 "misc1.c"
          ;

 if ((colnr_t)cin_skip2pos(trypos) == trypos->col
  && (pos = find_start_comment(ind_maxcomment)) == 
# 3688 "misc1.c" 3 4
                                                  ((void *)0)
# 3688 "misc1.c"
                                                      )
     break;
 if (pos != 
# 3690 "misc1.c" 3 4
           ((void *)0)
# 3690 "misc1.c"
               )
     curwin->w_cursor.lnum = pos->lnum;
    }
    curwin->w_cursor = cursor_save;
    return trypos;
}





    static FPOS *
find_match_paren(ind_maxparen, ind_maxcomment)
    int ind_maxparen;
    int ind_maxcomment;
{
    FPOS cursor_save;
    FPOS *trypos;
    static FPOS pos_copy;

    cursor_save = curwin->w_cursor;
    if ((trypos = findmatchlimit(
# 3711 "misc1.c" 3 4
                                ((void *)0)
# 3711 "misc1.c"
                                    , '(', 0, ind_maxparen)) != 
# 3711 "misc1.c" 3 4
                                                                ((void *)0)
# 3711 "misc1.c"
                                                                    )
    {

 if ((colnr_t)cin_skip2pos(trypos) > trypos->col)
     trypos = 
# 3715 "misc1.c" 3 4
             ((void *)0)
# 3715 "misc1.c"
                 ;
 else
 {
     pos_copy = *trypos;
     trypos = &pos_copy;
     curwin->w_cursor = *trypos;
     if (find_start_comment(ind_maxcomment) != 
# 3721 "misc1.c" 3 4
                                              ((void *)0)
# 3721 "misc1.c"
                                                  )
  trypos = 
# 3722 "misc1.c" 3 4
          ((void *)0)
# 3722 "misc1.c"
              ;
 }
    }
    curwin->w_cursor = cursor_save;
    return trypos;
}




    static int
find_last_paren(l)
    char_u *l;
{
    int i;
    int retval = 0;

    curwin->w_cursor.col = 0;

    for (i = 0; l[i]; i++)
    {
 i = skip_string(l + i) - l;
 if (l[i] == ')')
 {
     curwin->w_cursor.col = i;
     retval = 1;
 }
    }
    return retval;
}

    int
get_c_indent()
{




    int ind_level = curbuf->b_p_sw;





    int ind_open_imag = 0;





    int ind_no_brace = 0;




    int ind_first_open = 0;





    int ind_open_extra = 0;






    int ind_close_extra = 0;





    int ind_open_left_imag = 0;




    int ind_case = curbuf->b_p_sw;




    int ind_case_code = curbuf->b_p_sw;





    int ind_scopedecl = curbuf->b_p_sw;




    int ind_scopedecl_code = curbuf->b_p_sw;




    int ind_param = curbuf->b_p_sw;




    int ind_func_type = curbuf->b_p_sw;





    int ind_continuation = curbuf->b_p_sw;




    int ind_unclosed = curbuf->b_p_sw * 2;





    int ind_unclosed2 = curbuf->b_p_sw;




    int ind_in_comment = 3;




    int ind_maxparen = 20;




    int ind_maxcomment = 30;

    FPOS cur_curpos;
    int amount;
    int scope_amount;
    int cur_amount;
    colnr_t col;
    char_u *theline;
    char_u *linecopy;
    FPOS *trypos;
    FPOS our_paren_pos;
    char_u *start;
    int start_brace;



    linenr_t ourscope;
    char_u *l;
    char_u *look;
    int lookfor;







    int whilelevel;
    linenr_t lnum;
    char_u *options;
    int fraction = 0;
    int divider;
    int n;
    int iscase;

    for (options = curbuf->b_p_cino; *options; )
    {
 l = options++;
 if (*options == '-')
     ++options;
 n = getdigits(&options);
 divider = 0;
 if (*options == '.')
 {
     fraction = atol((char *)++options);
     while (
# 3904 "misc1.c" 3 4
           ((*__ctype_b_loc ())[(int) ((
# 3904 "misc1.c"
           *options
# 3904 "misc1.c" 3 4
           ))] & (unsigned short int) _ISdigit)
# 3904 "misc1.c"
                            )
     {
  ++options;
  if (divider)
      divider *= 10;
  else
      divider = 10;
     }
 }
 if (*options == 's')
 {
     if (n == 0 && fraction == 0)
  n = curbuf->b_p_sw;
     else
     {
  n *= curbuf->b_p_sw;
  if (divider)
      n += (curbuf->b_p_sw * fraction + divider / 2) / divider;
     }
     ++options;
 }
 if (l[1] == '-')
     n = -n;


 switch (*l)
 {
     case '>': ind_level = n; break;
     case 'e': ind_open_imag = n; break;
     case 'n': ind_no_brace = n; break;
     case 'f': ind_first_open = n; break;
     case '{': ind_open_extra = n; break;
     case '}': ind_close_extra = n; break;
     case '^': ind_open_left_imag = n; break;
     case ':': ind_case = n; break;
     case '=': ind_case_code = n; break;
     case 'p': ind_param = n; break;
     case 't': ind_func_type = n; break;
     case 'c': ind_in_comment = n; break;
     case '+': ind_continuation = n; break;
     case '(': ind_unclosed = n; break;
     case 'u': ind_unclosed2 = n; break;
     case ')': ind_maxparen = n; break;
     case '*': ind_maxcomment = n; break;
     case 'g': ind_scopedecl = n; break;
     case 'h': ind_scopedecl_code = n; break;
 }
    }



    cur_curpos = curwin->w_cursor;





    linecopy = vim_strsave(ml_get(cur_curpos.lnum));
    if (linecopy == 
# 3962 "misc1.c" 3 4
                   ((void *)0)
# 3962 "misc1.c"
                       )
 return 0;






    if ((State & 0x10) && linecopy[curwin->w_cursor.col] == ')')
 linecopy[curwin->w_cursor.col] = '\000';

    theline = skipwhite(linecopy);



    curwin->w_cursor.col = 0;




    if (*theline == '#' && (*linecopy == '#' || in_cinkeys('#', ' ', 1)))
    {
 amount = 0;
    }




    else if (cin_islabel(ind_maxcomment))
    {
 amount = 0;
    }





    else if (!cin_iscomment(theline)
     && (trypos = find_start_comment(ind_maxcomment)) != 
# 4000 "misc1.c" 3 4
                                                        ((void *)0)
# 4000 "misc1.c"
                                                            )
    {


 getvcol(curwin, trypos, &col, 
# 4004 "misc1.c" 3 4
                              ((void *)0)
# 4004 "misc1.c"
                                  , 
# 4004 "misc1.c" 3 4
                                    ((void *)0)
# 4004 "misc1.c"
                                        );
 amount = col;





 if (theline[0] == '*')
 {
     amount += 1;
 }
 else
 {







     amount = -1;
     for (lnum = cur_curpos.lnum - 1; lnum > trypos->lnum; --lnum)
     {
  if (linewhite(lnum))
      continue;
  amount = get_indent_lnum(lnum);
  break;
     }
     if (amount == -1)
     {
  start = ml_get(trypos->lnum);
  look = start + trypos->col + 2;
  if (*look)
      trypos->col = skipwhite(look) - start;
  getvcol(curwin, trypos, &col, 
# 4038 "misc1.c" 3 4
                               ((void *)0)
# 4038 "misc1.c"
                                   , 
# 4038 "misc1.c" 3 4
                                     ((void *)0)
# 4038 "misc1.c"
                                         );
  amount = col;
  if (!*look)
      amount += ind_in_comment;
     }
 }
    }




    else if ((trypos = find_match_paren(ind_maxparen, ind_maxcomment)) != 
# 4049 "misc1.c" 3 4
                                                                         ((void *)0)
# 4049 "misc1.c"
                                                                             )
    {




 amount = -1;
 our_paren_pos = *trypos;
 if (theline[0] != ')')
 {
     for (lnum = cur_curpos.lnum - 1; lnum > our_paren_pos.lnum; --lnum)
     {
  l = skipwhite(ml_get(lnum));
  if (cin_nocode(l))
      continue;
  if (cin_ispreproc(l))
      continue;
  curwin->w_cursor.lnum = lnum;


  if ((trypos = find_start_comment(ind_maxcomment)) != 
# 4069 "misc1.c" 3 4
                                                      ((void *)0)
# 4069 "misc1.c"
                                                          )
  {
      lnum = trypos->lnum + 1;
      continue;
  }


  if ((trypos = find_match_paren(ind_maxparen,
         ind_maxcomment)) != 
# 4077 "misc1.c" 3 4
                            ((void *)0) 
# 4077 "misc1.c"
                                 &&
      trypos->lnum == our_paren_pos.lnum &&
          trypos->col == our_paren_pos.col)
  {
      amount = get_indent_lnum(lnum);
      break;
  }
     }
 }






 if (amount == -1)
 {
     amount = skip_label(our_paren_pos.lnum, &look, ind_maxcomment);
     if (theline[0] == ')' || ind_unclosed == 0 ||
       *skipwhite(look) == '(')
     {




  if (theline[0] != ')')
  {
      col = our_paren_pos.col + 1;
      look = ml_get(our_paren_pos.lnum);
      while (((look[col]) == ' ' || (look[col]) == '\t'))
   col++;
      if (look[col] != '\000')
   our_paren_pos.col = col;
      else
   our_paren_pos.col++;
  }





  getvcol(curwin, &our_paren_pos, &col, 
# 4118 "misc1.c" 3 4
                                       ((void *)0)
# 4118 "misc1.c"
                                           , 
# 4118 "misc1.c" 3 4
                                             ((void *)0)
# 4118 "misc1.c"
                                                 );
  amount = col;
     }
     else
     {

  col = our_paren_pos.col;
  while (our_paren_pos.col > 0)
  {
      --our_paren_pos.col;
      switch (*ml_get_pos(&our_paren_pos))
      {
   case '(': amount += ind_unclosed2;
      col = our_paren_pos.col;
      break;
   case ')': amount -= ind_unclosed2;
      col = (0x7fffffff);
      break;
      }
  }



  if (col == (0x7fffffff))
      amount += ind_unclosed;
  else
  {
      curwin->w_cursor.lnum = our_paren_pos.lnum;
      curwin->w_cursor.col = col;
      if ((trypos = find_match_paren(ind_maxparen,
           ind_maxcomment)) != 
# 4148 "misc1.c" 3 4
                              ((void *)0)
# 4148 "misc1.c"
                                  )
   amount += ind_unclosed2;
      else
   amount += ind_unclosed;
  }
     }
 }
    }




    else if ((trypos = find_start_brace(ind_maxcomment)) != 
# 4160 "misc1.c" 3 4
                                                           ((void *)0)
# 4160 "misc1.c"
                                                               )
    {
 ourscope = trypos->lnum;
 start = ml_get(ourscope);







 look = skipwhite(start);
 if (*look == '{')
 {
     getvcol(curwin, trypos, &col, 
# 4174 "misc1.c" 3 4
                                  ((void *)0)
# 4174 "misc1.c"
                                      , 
# 4174 "misc1.c" 3 4
                                        ((void *)0)
# 4174 "misc1.c"
                                            );
     amount = col;
     if (*start == '{')
  start_brace = 1;
     else
  start_brace = 2;
 }
 else
 {




     curwin->w_cursor.lnum = ourscope;





     lnum = ourscope;
     if (find_last_paren(start) &&
      (trypos = find_match_paren(ind_maxparen,
           ind_maxcomment)) != 
# 4196 "misc1.c" 3 4
                              ((void *)0)
# 4196 "misc1.c"
                                  )
  lnum = trypos->lnum;







     amount = skip_label(lnum, &l, ind_maxcomment);

     start_brace = 3;
 }






 if (theline[0] == '}')
 {




     amount += ind_close_extra;
 }
 else
 {






     lookfor = 0;
     if (cin_iselse(theline))
  lookfor = 1;
     else if (cin_iswhileofdo(theline, cur_curpos.lnum, ind_maxparen))

  lookfor = 2;
     if (lookfor)
     {
  curwin->w_cursor.lnum = cur_curpos.lnum;
  if (find_match(lookfor, ourscope, ind_maxparen,
       ind_maxcomment) == 1)
  {
      amount = get_indent();
      goto theend;
  }
     }
# 4261 "misc1.c"
     if (start_brace == 1)
     {
  amount = ind_open_left_imag;
     }
     else
     {
  if (start_brace == 3)
      amount += ind_open_imag;
  else
  {

      amount -= ind_open_extra;
      if (amount < 0)
   amount = 0;
  }
     }

     if (cin_iscase(theline))
     {
  lookfor = 3;
  amount += ind_case;
     }
     else if (cin_isscopedecl(theline))
     {
  lookfor = 7;
  amount += ind_scopedecl;
     }
     else
     {
  lookfor = 4;
  amount += ind_level;
     }
     scope_amount = amount;
     whilelevel = 0;
# 4304 "misc1.c"
     curwin->w_cursor = cur_curpos;
     for (;;)
     {
  curwin->w_cursor.lnum--;
  curwin->w_cursor.col = 0;





  if (curwin->w_cursor.lnum <= ourscope)
  {
      if (lookfor == 6)
   amount += ind_continuation;
      else if (lookfor != 5)
      {
   amount = scope_amount;
   if (theline[0] == '{')
       amount += ind_open_extra;
      }
      break;
  }




  if ((trypos = find_start_comment(ind_maxcomment)) != 
# 4330 "misc1.c" 3 4
                                                      ((void *)0)
# 4330 "misc1.c"
                                                          )
  {
      curwin->w_cursor.lnum = trypos->lnum + 1;
      continue;
  }

  l = ml_get_curline();





  iscase = cin_iscase(l);
  if (iscase || cin_isscopedecl(l))
  {





      if (lookfor == 6)
      {
   amount += ind_continuation;
   break;
      }






      if ( (iscase && lookfor == 3)
       || (!iscase && lookfor == 7))
      {




   if ((trypos = find_start_brace(ind_maxcomment)) ==
          
# 4369 "misc1.c" 3 4
         ((void *)0) 
# 4369 "misc1.c"
              || trypos->lnum == ourscope)
   {
       amount = get_indent();
       break;
   }
   continue;
      }

      n = get_indent_nolabel(curwin->w_cursor.lnum);
# 4389 "misc1.c"
      if (lookfor == 5)
      {
   if (n)
       amount = n;
   break;
      }
# 4403 "misc1.c"
      if (n)
      {
   amount = n;
   l = after_label(ml_get_curline());
   if (l != 
# 4407 "misc1.c" 3 4
           ((void *)0) 
# 4407 "misc1.c"
                && cin_is_cinword(l))
       amount += ind_level + ind_no_brace;
   break;
      }
# 4420 "misc1.c"
      scope_amount = get_indent() + (iscase
     ? ind_case_code : ind_scopedecl_code);
      lookfor = 4;
      continue;
  }





  if (lookfor == 3 || lookfor == 7)
      continue;




  if (cin_islabel(ind_maxcomment))
  {
      l = after_label(ml_get_curline());
      if (l == 
# 4439 "misc1.c" 3 4
              ((void *)0) 
# 4439 "misc1.c"
                   || cin_nocode(l))
   continue;
  }







  l = ml_get_curline();
  if (cin_ispreproc(l) || cin_nocode(l))
      continue;




  if (!cin_isterminated(l, 0))
  {
# 4469 "misc1.c"
      (void)find_last_paren(l);
      if ((trypos = find_match_paren(ind_maxparen,
           ind_maxcomment)) != 
# 4471 "misc1.c" 3 4
                              ((void *)0)
# 4471 "misc1.c"
                                  )
      {






   curwin->w_cursor.lnum = trypos->lnum;
   l = ml_get_curline();
   if (cin_iscase(l) || cin_isscopedecl(l))
   {
       ++curwin->w_cursor.lnum;
       continue;
   }
      }





      cur_amount = skip_label(curwin->w_cursor.lnum,
         &l, ind_maxcomment);
# 4502 "misc1.c"
      if (lookfor != 5 && theline[0] == '{')
      {
   amount = cur_amount;







   if (*skipwhite(l) != '{')
       amount += ind_open_extra;
   break;
      }





      if (cin_is_cinword(l) || cin_iselse(skipwhite(l)))
      {







   if (lookfor == 6)
   {
       amount += ind_continuation;
       break;
   }
# 4549 "misc1.c"
   amount = cur_amount;
   if (theline[0] == '{')
       amount += ind_open_extra;
   if (lookfor != 5)
   {
       amount += ind_level + ind_no_brace;
       break;
   }
# 4565 "misc1.c"
   l = skipwhite(ml_get_curline());
   if (cin_isdo(l))
   {
       if (whilelevel == 0)
    break;
       --whilelevel;
   }






   if (cin_iselse(l)
    && ((trypos = find_start_brace(ind_maxcomment))
            == 
# 4580 "misc1.c" 3 4
              ((void *)0)
        
# 4581 "misc1.c"
       || find_match(1, trypos->lnum,
     ind_maxparen, ind_maxcomment) == 0))
       break;
      }







      else
      {







   if (lookfor == 6)
       break;







   amount = cur_amount;
   if (lookfor != 5)
       lookfor = 6;
      }
  }






  else if (cin_iswhileofdo(l,
      curwin->w_cursor.lnum, ind_maxparen))
  {







      if (lookfor == 6)
      {
   amount += ind_continuation;
   break;
      }

      if (whilelevel == 0)
      {
   lookfor = 5;
   amount = get_indent();
   if (theline[0] == '{')
       amount += ind_open_extra;
      }
      ++whilelevel;
  }
# 4654 "misc1.c"
  else
  {



      if (whilelevel > 0)
      {
   l = cin_skipcomment(ml_get_curline());
   if (cin_isdo(l))
   {
       amount = get_indent();
       --whilelevel;
       continue;
   }
      }
# 4677 "misc1.c"
      if (lookfor == 6)
      {
   amount += ind_continuation;
   break;
      }
# 4692 "misc1.c"
      if (lookfor == 5)
      {
   if (whilelevel == 0)
       break;
      }






      else
      {
# 4713 "misc1.c"
term_again:
   l = ml_get_curline();
   if (find_last_paren(l) &&
    (trypos = find_match_paren(ind_maxparen,
           ind_maxcomment)) != 
# 4717 "misc1.c" 3 4
                              ((void *)0)
# 4717 "misc1.c"
                                  )
   {






       curwin->w_cursor.lnum = trypos->lnum;
       l = ml_get_curline();
       if (cin_iscase(l) || cin_isscopedecl(l))
       {
    ++curwin->w_cursor.lnum;
    continue;
       }
   }





   amount = skip_label(curwin->w_cursor.lnum,
         &l, ind_maxcomment);

   if (theline[0] == '{')
       amount += ind_open_extra;

   if (*skipwhite(l) == '{')
       amount -= ind_open_extra;
   lookfor = 5;





   curwin->w_cursor.col = 0;
   if (*cin_skipcomment(l) == '}'
    && (trypos = find_start_brace(ind_maxcomment))
           != 
# 4755 "misc1.c" 3 4
             ((void *)0)
# 4755 "misc1.c"
                 )
   {
       curwin->w_cursor.lnum = trypos->lnum;


       l = cin_skipcomment(ml_get_curline());
       if (*l == '}' || !cin_iselse(l))
    goto term_again;
       ++curwin->w_cursor.lnum;
   }
      }
  }
     }
 }
    }
# 4779 "misc1.c"
    else
    {






 if (theline[0] == '{')
 {
     amount = ind_first_open;
 }






 else if (cur_curpos.lnum < curbuf->b_ml.ml_line_count
  && !cin_nocode(theline)
  && cin_isfuncdecl(ml_get(cur_curpos.lnum + 1)))
 {
     amount = ind_func_type;
 }
 else
 {
     amount = 0;
     curwin->w_cursor = cur_curpos;



     while (curwin->w_cursor.lnum > 1)
     {
  curwin->w_cursor.lnum--;
  curwin->w_cursor.col = 0;

  l = ml_get_curline();




  if ((trypos = find_start_comment(ind_maxcomment)) != 
# 4820 "misc1.c" 3 4
                                                      ((void *)0)
# 4820 "misc1.c"
                                                          )
  {
      curwin->w_cursor.lnum = trypos->lnum + 1;
      continue;
  }





  if (cin_isfuncdecl(theline))
      break;





  if (*skipwhite(l) == '}')
      break;




  if (cin_ispreproc(l))
      continue;

  if (cin_nocode(l))
      continue;






  if (cin_isfuncdecl(l))
  {
      amount = ind_param;
      break;
  }
# 4867 "misc1.c"
  find_last_paren(l);

  if ((trypos = find_match_paren(ind_maxparen,
           ind_maxcomment)) != 
# 4870 "misc1.c" 3 4
                              ((void *)0)
# 4870 "misc1.c"
                                  )
      curwin->w_cursor.lnum = trypos->lnum;
  amount = get_indent();
  break;
     }
 }
    }

theend:

    curwin->w_cursor = cur_curpos;

    vim_free(linecopy);

    if (amount < 0)
 return 0;
    return amount;
}

    static int
find_match(lookfor, ourscope, ind_maxparen, ind_maxcomment)
    int lookfor;
    linenr_t ourscope;
    int ind_maxparen;
    int ind_maxcomment;
{
    char_u *look;
    FPOS *theirscope;
    char_u *mightbeif;
    int elselevel;
    int whilelevel;

    if (lookfor == 1)
    {
 elselevel = 1;
 whilelevel = 0;
    }
    else
    {
 elselevel = 0;
 whilelevel = 1;
    }

    curwin->w_cursor.col = 0;

    while (curwin->w_cursor.lnum > ourscope + 1)
    {
 curwin->w_cursor.lnum--;
 curwin->w_cursor.col = 0;

 look = cin_skipcomment(ml_get_curline());
 if (cin_iselse(look)
  || cin_isif(look)
  || cin_isdo(look)
  || cin_iswhileofdo(look, curwin->w_cursor.lnum, ind_maxparen))
 {




     theirscope = find_start_brace(ind_maxcomment);
     if (theirscope == 
# 4931 "misc1.c" 3 4
                      ((void *)0)
# 4931 "misc1.c"
                          )
  break;






     if (theirscope->lnum < ourscope)
  break;






     if (theirscope->lnum > ourscope)
  continue;






     look = cin_skipcomment(ml_get_curline());
     if (cin_iselse(look))
     {
  mightbeif = cin_skipcomment(look + 4);
  if (!cin_isif(mightbeif))
      ++elselevel;
  continue;
     }





     if (cin_iswhileofdo(look, curwin->w_cursor.lnum, ind_maxparen))
     {
  ++whilelevel;
  continue;
     }


     look = cin_skipcomment(ml_get_curline());
     if (cin_isif(look))
     {
  elselevel--;




  if (elselevel == 0 && lookfor == 1)
      whilelevel = 0;
     }


     if (cin_isdo(look))
  whilelevel--;






     if (elselevel <= 0 && whilelevel <= 0)
     {
  return 1;
     }
 }
    }
    return 0;
}
# 5022 "misc1.c"
    int
get_lisp_indent()
{
    FPOS *pos, realpos;
    int amount;
    char_u *that;
    colnr_t col;
    colnr_t firsttry;
    int parencount, quotecount;
    int vi_lisp;


    vi_lisp = (vim_strchr(p_cpo, 'p') != 
# 5034 "misc1.c" 3 4
                                             ((void *)0)
# 5034 "misc1.c"
                                                 );

    realpos = curwin->w_cursor;
    curwin->w_cursor.col = 0;

    if ((pos = findmatch(
# 5039 "misc1.c" 3 4
                        ((void *)0)
# 5039 "misc1.c"
                            , '(')) != 
# 5039 "misc1.c" 3 4
                                       ((void *)0)
# 5039 "misc1.c"
                                           )
    {


 amount = -1;
 parencount = 0;

 while (--curwin->w_cursor.lnum >= pos->lnum)
 {
     if (linewhite(curwin->w_cursor.lnum))
  continue;
     for (that = ml_get_curline(); *that != '\000'; ++that)
     {
                if (*that == ';')
                {
                    while (*(that + 1) != '\000')
   ++that;
                    continue;
                }
  if (*that == '\\')
  {
      if (*(that + 1) != '\000')
   ++that;
      continue;
  }
  if (*that == '"' && *(that + 1) != '\000')
  {
      that++;
      while (*that && (*that != '"' || *(that - 1) == '\\'))
   ++that;
  }
  if (*that == '(')
                    ++parencount;
  else if (*that == ')')
                    --parencount;
     }
     if (parencount == 0)
     {
  amount = get_indent();
  break;
     }
 }

 if (amount == -1)
 {
     curwin->w_cursor.lnum = pos->lnum;
     curwin->w_cursor.col = pos->col;
     col = pos->col;

     that = ml_get_curline();

     if (vi_lisp && get_indent() == 0)
  amount = 2;
     else
     {
  amount = 0;
  while (*that && col)
  {
      amount += lbr_chartabsize(that, (colnr_t)amount);
      col--;
      that++;
  }
# 5110 "misc1.c"
  if (!vi_lisp && *that == '('
   && (!strncmp((char *)(that + 1), (char *)("defun "), (size_t)(6))
       || !strncmp((char *)(that + 1), (char *)("define "), (size_t)(7))
       || !strncmp((char *)(that + 1), (char *)("defmacro "), (size_t)(9))
       || !strncmp((char *)(that + 1), (char *)("set! "), (size_t)(5))
       || !strncmp((char *)(that + 1), (char *)("lambda "), (size_t)(7))
       || !strncmp((char *)(that + 1), (char *)("if "), (size_t)(3))
       || !strncmp((char *)(that + 1), (char *)("case "), (size_t)(5))
       || !strncmp((char *)(that + 1), (char *)("let "), (size_t)(4))
       || !strncmp((char *)(that + 1), (char *)("flet "), (size_t)(5))
       || !strncmp((char *)(that + 1), (char *)("let* "), (size_t)(5))
       || !strncmp((char *)(that + 1), (char *)("letrec "), (size_t)(7))
       || !strncmp((char *)(that + 1), (char *)("do "), (size_t)(3))
       || !strncmp((char *)(that + 1), (char *)("do* "), (size_t)(4))
       || !strncmp((char *)(that + 1), (char *)("define-syntax "), (size_t)(14))
       || !strncmp((char *)(that + 1), (char *)("let-syntax "), (size_t)(11))
       || !strncmp((char *)(that + 1), (char *)("letrec-syntax "), (size_t)(14))))
      amount += 2;
  else
  {
      that++;
      amount++;
      firsttry = amount;

      while (((*that) == ' ' || (*that) == '\t'))
      {
   amount += lbr_chartabsize(that, (colnr_t)amount);
   that++;
      }

      if (*that && *that != ';')
      {


   if (!vi_lisp && *that != '(')
       firsttry++;

                        parencount = 0;
   quotecount = 0;

   if (vi_lisp
    || (*that != '"'
        && *that != '\''
        && *that != '#'
        && (*that < '0' || *that > '9')))
   {
       while (*that
        && (!((*that) == ' ' || (*that) == '\t')
     || quotecount
     || parencount)
        && (!(*that == '('
         && !quotecount
         && !parencount
         && vi_lisp)))
                            {
                                if (*that == '"')
        quotecount = !quotecount;
                                if (*that == '(' && !quotecount)
                                    ++parencount;
                                if (*that == ')' && !quotecount)
                                    --parencount;
                                if (*that == '\\' && *(that+1) != '\000')
                                {
                                    amount +=
           lbr_chartabsize(that, (colnr_t)amount);
                                    that++;
                                }
                                amount +=
           lbr_chartabsize(that, (colnr_t)amount);
                                that++;
                            }
   }
                        while (((*that) == ' ' || (*that) == '\t'))
                        {
                            amount += lbr_chartabsize(that, (colnr_t)amount);
                            that++;
                        }
                        if (!*that || *that == ';')
                            amount = firsttry;
                    }
                }
            }
        }
    }
    else
        amount = 0;

    curwin->w_cursor = realpos;

    return amount;
}






    void
preserve_exit()
{
    BUF *buf;
# 5220 "misc1.c"
    {
 windgoto((int)Rows - 1, 0);





 settmode(0);



     stoptermcap();
 out_flush();
    }

    out_str(IObuff);
    screen_start();
    out_flush();

    ml_close_notmod();

    for (buf = firstbuf; buf != 
# 5241 "misc1.c" 3 4
                               ((void *)0)
# 5241 "misc1.c"
                                   ; buf = buf->b_next)
    {
 if (buf->b_ml.ml_mfp != 
# 5243 "misc1.c" 3 4
                        ((void *)0) 
# 5243 "misc1.c"
                             && buf->b_ml.ml_mfp->mf_fname != 
# 5243 "misc1.c" 3 4
                                                              ((void *)0)
# 5243 "misc1.c"
                                                                  )
 {
     out_str((char_u *)("Vim: preserving files...\n"));
     screen_start();
     out_flush();
     ml_sync_all(0, 0);
     break;
 }
    }

    ml_close_all(0);

    out_str((char_u *)("Vim: Finished.\n"));

    getout(1);
}




    int
vim_fexists(fname)
    char_u *fname;
{
    struct stat st;

    if (stat(((char *)fname), (&st)))
 return 0;
    return 1;
}
# 5289 "misc1.c"
    void
line_breakcheck()
{
    static int count = 0;

    if (++count == 32)
    {
 count = 0;
 ui_breakcheck();
    }
}


static int gen_expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);






    int
expand_wildcards(num_pat, pat, num_file, file, flags)
    int num_pat;
    char_u **pat;
    int *num_file;
    char_u ***file;
    int flags;
{
    int retval;
    int i, j;
    char_u *p;
    int non_suf_match;

    char_u buf[100];
    char_u *ffname;
    char_u *tail;
    char_u *regpat;
    char allow_dirs;
    int match;


    retval = gen_expand_wildcards(num_pat, pat, num_file, file, flags);


    if (flags & 16)
 return retval;





    if (*p_wig)
    {

 for (i = 0; i < *num_file; ++i)
 {
     ffname = FullName_save((*file)[i], 0);
     if (ffname == 
# 5346 "misc1.c" 3 4
                  ((void *)0)
# 5346 "misc1.c"
                      )
  break;
     tail = gettail((*file)[i]);





     p = p_wig;
     while (*p)
     {
  copy_option_part(&p, buf, 100, ",");
  regpat = file_pat_to_reg_pat(buf, buf + strlen((char *)(buf)),
         &allow_dirs, 0);
  if (regpat == 
# 5360 "misc1.c" 3 4
               ((void *)0)
# 5360 "misc1.c"
                   )
      break;
  match = match_file_pat(regpat, ffname, (*file)[i], tail,
             (int)allow_dirs);
  vim_free(regpat);
  if (match)
  {

      vim_free((*file)[i]);
      for (j = i; j + 1 < *num_file; ++j)
   (*file)[j] = (*file)[j + 1];
      --*num_file;
      --i;
      break;
  }
     }
     vim_free(ffname);
 }
    }





    if (*num_file > 1)
    {
 non_suf_match = 0;
 for (i = 0; i < *num_file; ++i)
 {
     if (!match_suffix((*file)[i]))
     {




  p = (*file)[i];
  for (j = i; j > non_suf_match; --j)
      (*file)[j] = (*file)[j - 1];
  (*file)[non_suf_match++] = p;
     }
 }
    }

    return retval;
}




    int
match_suffix(fname)
    char_u *fname;
{
    int fnamelen, setsuflen;
    char_u *setsuf;

    char_u suf_buf[30];

    fnamelen = strlen((char *)(fname));
    setsuflen = 0;
    for (setsuf = p_su; *setsuf; )
    {
 setsuflen = copy_option_part(&setsuf, suf_buf, 30, ".,");
 if (fnamelen >= setsuflen
  && strncmp((char *)(suf_buf), (char *)(fname + fnamelen - setsuflen), (size_t)((size_t)setsuflen))
                              == 0)
     break;
 setsuflen = 0;
    }
    return (setsuflen != 0);
}
# 5449 "misc1.c"
    static int
gen_expand_wildcards(num_pat, pat, num_file, file, flags)
    int num_pat;
    char_u **pat;
    int *num_file;
    char_u ***file;
    int flags;
{
    int i;
    struct growarray ga;
    char_u *p;
    static int recursive = 0;
    int add_pat;







    if (recursive)

 return mch_expand_wildcards(num_pat, pat, num_file, file, flags);
# 5482 "misc1.c"
    for (i = 0; i < num_pat; i++)
    {
 if ((char_u *)strpbrk((char *)(pat[i]), (char *)((char_u *)"`'{")) != 
# 5484 "misc1.c" 3 4
                                                       ((void *)0)
# 5484 "misc1.c"
                                                           )
     return mch_expand_wildcards(num_pat, pat, num_file, file, flags);
    }


    recursive = 1;




    ga_init2(&ga, (int)sizeof(char_u *), 30);

    for (i = 0; i < num_pat; ++i)
    {
 add_pat = -1;
 p = pat[i];






 {



     if ((char_u *)strpbrk((char *)(p), (char *)((char_u *)"$~")) != 
# 5510 "misc1.c" 3 4
                                          ((void *)0)
# 5510 "misc1.c"
                                              )
     {
  p = expand_env_save(p);
  if (p == 
# 5513 "misc1.c" 3 4
          ((void *)0)
# 5513 "misc1.c"
              )
      p = pat[i];






  else if ((char_u *)strpbrk((char *)(p), (char *)((char_u *)"$~")) != 
# 5521 "misc1.c" 3 4
                                            ((void *)0)
# 5521 "misc1.c"
                                                )
  {
      vim_free(p);
      ga_clear(&ga);
      i = mch_expand_wildcards(num_pat, pat, num_file, file,
               flags);
      recursive = 0;
      return i;
  }

     }
# 5540 "misc1.c"
     if (mch_has_wildcard(p))
  add_pat = mch_expandpath(&ga, p, flags);
 }

 if ((add_pat <= 0 && (flags & 4))
  || (add_pat == -1 && mch_getperm(p) >= 0))
 {
     char_u *t = backslash_halve_save(p);

     addfile(&ga, t, flags);
     vim_free(t);
 }

 if (p != pat[i])
     vim_free(p);
    }

    *num_file = ga.ga_len;
    *file = (ga.ga_data != 
# 5558 "misc1.c" 3 4
                          ((void *)0)
# 5558 "misc1.c"
                              ) ? (char_u **)ga.ga_data : (char_u **)"";

    recursive = 0;

    return (ga.ga_data != 
# 5562 "misc1.c" 3 4
                         ((void *)0)
# 5562 "misc1.c"
                             ) ? 1 : 0;
}
# 5626 "misc1.c"
    void
addfile(gap, f, flags)
    struct growarray *gap;
    char_u *f;
    int flags;
{
    char_u *p;
    int isdir;


    if (!(flags & 4) && mch_getperm(f) < 0)
 return;







    isdir = mch_isdir(f);
    if ((isdir && !(flags & 1)) || (!isdir && !(flags & 2)))
 return;


    if (ga_grow(gap, 1) == 0)
 return;

    p = alloc((unsigned)(strlen((char *)(f)) + 1 + isdir));
    if (p == 
# 5654 "misc1.c" 3 4
            ((void *)0)
# 5654 "misc1.c"
                )
 return;

    strcpy((char *)(p), (char *)(f));







    if (isdir && (flags & 8))
 strcat((char *)(p), (char *)("/"));

    ((char_u **)gap->ga_data)[gap->ga_len++] = p;
    --gap->ga_room;
}
# 5686 "misc1.c"
    char_u *
get_cmd_output(cmd, flags)
    char_u *cmd;
    int flags;
{
    char_u *tempname;
    char_u *command;
    char_u *buffer = 
# 5693 "misc1.c" 3 4
                    ((void *)0)
# 5693 "misc1.c"
                        ;
    int len;
    int i = 0;
    FILE *fd;


    if ((tempname = vim_tempname('o')) == 
# 5699 "misc1.c" 3 4
                                         ((void *)0)
# 5699 "misc1.c"
                                             )
    {
 emsg(e_notmp);
 return 
# 5702 "misc1.c" 3 4
       ((void *)0)
# 5702 "misc1.c"
           ;
    }


    command = make_filter_cmd(cmd, 
# 5706 "misc1.c" 3 4
                                  ((void *)0)
# 5706 "misc1.c"
                                      , tempname);
    if (command == 
# 5707 "misc1.c" 3 4
                  ((void *)0)
# 5707 "misc1.c"
                      )
 goto done;




    call_shell(command, 8 | 2 | flags);
    vim_free(command);




    fd = fopen(((char *)tempname), ("r"));
    if (fd == 
# 5720 "misc1.c" 3 4
             ((void *)0)
# 5720 "misc1.c"
                 )
    {
 emsg2(e_notopen, tempname);
 goto done;
    }
    fseek(fd, 0L, 
# 5725 "misc1.c" 3 4
                 2
# 5725 "misc1.c"
                         );
    len = ftell(fd);
    fseek(fd, 0L, 
# 5727 "misc1.c" 3 4
                 0
# 5727 "misc1.c"
                         );

    buffer = alloc(len + 1);
    if (buffer != 
# 5730 "misc1.c" 3 4
                 ((void *)0)
# 5730 "misc1.c"
                     )
 i = fread((char *)buffer, (size_t)1, (size_t)len, fd);
    fclose(fd);
    unlink((char *)(tempname));
    if (buffer == 
# 5734 "misc1.c" 3 4
                 ((void *)0)
# 5734 "misc1.c"
                     )
 goto done;
    if (i != len)
    {
 emsg2(e_notread, tempname);
 vim_free(buffer);
 buffer = 
# 5740 "misc1.c" 3 4
         ((void *)0)
# 5740 "misc1.c"
             ;
    }
    else
 buffer[len] = '\0';

done:
    vim_free(tempname);
    return buffer;
}






    void
FreeWild(num, file)
    int num;
    char_u **file;
{
    if (file == 
# 5760 "misc1.c" 3 4
               ((void *)0) 
# 5760 "misc1.c"
                    || num <= 0)
 return;







    while (num--)
 vim_free(file[num]);
    vim_free(file);

}





    int
goto_im()
{
    return (p_im && stuff_empty() && typebuf_typed());
}
