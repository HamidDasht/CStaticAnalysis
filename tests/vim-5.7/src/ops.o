#pragma merger("0","/tmp/cil-YsNyRa7O.i","-g,-O2,-Wall,-O0")
# 1 "ops.c"
# 1 "/home/ubuntu/Desktop/devenv/tests/vim-5.7/src//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "ops.c"
# 14 "ops.c"
# 1 "vim.h" 1
# 20 "vim.h"
# 1 "config.h" 1
# 21 "vim.h" 2
# 59 "vim.h"
# 1 "feature.h" 1
# 60 "vim.h" 2
# 89 "vim.h"
# 1 "os_unix.h" 1
# 21 "os_unix.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 385 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
# 102 "/usr/include/stdio.h" 3 4
typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;




# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 209 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 266 "/usr/include/stdio.h" 3 4






extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 295 "/usr/include/stdio.h" 3 4

# 306 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 319 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 412 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 443 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 494 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 640 "/usr/include/stdio.h" 3 4

# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4

# 824 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 912 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 942 "/usr/include/stdio.h" 3 4

# 22 "os_unix.h" 2
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha (int) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit (int) __attribute__ ((__nothrow__ , __leaf__));
extern int islower (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint (int) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit (int) __attribute__ ((__nothrow__ , __leaf__));



extern int tolower (int __c) __attribute__ ((__nothrow__ , __leaf__));


extern int toupper (int __c) __attribute__ ((__nothrow__ , __leaf__));








extern int isblank (int) __attribute__ ((__nothrow__ , __leaf__));


# 150 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int toascii (int __c) __attribute__ ((__nothrow__ , __leaf__));



extern int _toupper (int) __attribute__ ((__nothrow__ , __leaf__));
extern int _tolower (int) __attribute__ ((__nothrow__ , __leaf__));
# 257 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 258 "/usr/include/ctype.h" 2 3 4
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__ , __leaf__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));
# 347 "/usr/include/ctype.h" 3 4

# 23 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 60 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 58 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4

# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 24 "os_unix.h" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };
# 105 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 208 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 237 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 262 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 283 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int chmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__ , __leaf__));





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__ , __leaf__));
# 320 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int mkdir (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) __attribute__ ((__nothrow__ , __leaf__));
# 398 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4)));
# 441 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 5)));
# 533 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 25 "os_unix.h" 2


# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 328 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef int wchar_t;
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 321 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 578 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 711 "/usr/include/stdlib.h" 3 4





extern int system (const char *__command) ;

# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 751 "/usr/include/stdlib.h" 3 4



extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 774 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 950 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 955 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 28 "os_unix.h" 2
# 42 "os_unix.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4

# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 258 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 270 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 307 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 356 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 420 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ , __leaf__));






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 528 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 546 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 601 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 703 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__)) ;
# 759 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ , __leaf__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));





extern int ttyslot (void) __attribute__ ((__nothrow__ , __leaf__));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 57 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 71 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 150 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 875 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ , __leaf__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__ , __leaf__));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ , __leaf__));



extern char *getusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void endusershell (void) __attribute__ ((__nothrow__ , __leaf__));
extern void setusershell (void) __attribute__ ((__nothrow__ , __leaf__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 972 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));





extern int getpagesize (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ , __leaf__));
# 996 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1019 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ , __leaf__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ , __leaf__));
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ , __leaf__));
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1154 "/usr/include/unistd.h" 3 4

# 43 "os_unix.h" 2







# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
extern int __sigismember (const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 33 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 58 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 76 "/usr/include/signal.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 58 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef __clock_t __sigchld_clock_t;



typedef struct
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __sigchld_clock_t si_utime;
     __sigchld_clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
     short int si_addr_lsb;
     struct
       {
  void *_lower;
  void *_upper;
       } si_addr_bnd;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;


 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;
      } _sifields;
  } siginfo_t ;
# 160 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 264 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 320 "/usr/include/x86_64-linux-gnu/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 81 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 100 "/usr/include/signal.h" 3 4


extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
# 114 "/usr/include/signal.h" 3 4

# 127 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ , __leaf__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern int raise (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ , __leaf__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 187 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));
# 207 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 243 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 244 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ , __leaf__));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ , __leaf__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ , __leaf__));
# 301 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[65];
extern const char *const sys_siglist[65];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t padding[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 121 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t padding[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t reserved1[2];
  __uint64_t reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 307 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ , __leaf__));






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ , __leaf__));

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 49 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 324 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;





typedef greg_t gregset_t[23];
# 92 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int padding[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t padding[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 327 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__deprecated__));



extern int sigaltstack (const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__ , __leaf__));
# 362 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ , __leaf__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ , __leaf__));
# 363 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ , __leaf__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ , __leaf__));




# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 51 "os_unix.h" 2
# 118 "os_unix.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 27 "/usr/include/dirent.h" 3 4

# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)));






extern DIR *fdopendir (int __fd);







extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 162 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 183 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 208 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 244 "/usr/include/dirent.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 245 "/usr/include/dirent.h" 2 3 4
# 254 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 324 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 352 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));
# 401 "/usr/include/dirent.h" 3 4

# 119 "os_unix.h" 2
# 138 "os_unix.h"
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));

# 223 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));
# 236 "/usr/include/time.h" 3 4



extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 430 "/usr/include/time.h" 3 4

# 139 "os_unix.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 55 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__));





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 189 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 142 "os_unix.h" 2
# 169 "os_unix.h"
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 58 "/usr/include/errno.h" 3 4

# 170 "os_unix.h" 2



# 1 "/usr/include/pwd.h" 1 3 4
# 27 "/usr/include/pwd.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/pwd.h" 2 3 4
# 49 "/usr/include/pwd.h" 3 4
struct passwd
{
  char *pw_name;
  char *pw_passwd;
  __uid_t pw_uid;
  __gid_t pw_gid;
  char *pw_gecos;
  char *pw_dir;
  char *pw_shell;
};
# 72 "/usr/include/pwd.h" 3 4
extern void setpwent (void);





extern void endpwent (void);





extern struct passwd *getpwent (void);
# 94 "/usr/include/pwd.h" 3 4
extern struct passwd *fgetpwent (FILE *__stream) __attribute__ ((__nonnull__ (1)));







extern int putpwent (const struct passwd *__restrict __p,
       FILE *__restrict __f);






extern struct passwd *getpwuid (__uid_t __uid);





extern struct passwd *getpwnam (const char *__name) __attribute__ ((__nonnull__ (1)));
# 139 "/usr/include/pwd.h" 3 4
extern int getpwent_r (struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 4)));


extern int getpwuid_r (__uid_t __uid,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (2, 3, 5)));

extern int getpwnam_r (const char *__restrict __name,
         struct passwd *__restrict __resultbuf,
         char *__restrict __buffer, size_t __buflen,
         struct passwd **__restrict __result)
         __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 166 "/usr/include/pwd.h" 3 4
extern int fgetpwent_r (FILE *__restrict __stream,
   struct passwd *__restrict __resultbuf,
   char *__restrict __buffer, size_t __buflen,
   struct passwd **__restrict __result)
   __attribute__ ((__nonnull__ (1, 2, 3, 5)));
# 187 "/usr/include/pwd.h" 3 4

# 174 "os_unix.h" 2
# 339 "os_unix.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 123 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 277 "/usr/include/string.h" 3 4



extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 392 "/usr/include/string.h" 3 4


extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 422 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ , __leaf__))

                        __attribute__ ((__nonnull__ (2)));
# 440 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 529 "/usr/include/string.h" 3 4
extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 552 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 658 "/usr/include/string.h" 3 4

# 340 "os_unix.h" 2


# 1 "/usr/include/strings.h" 1 3 4
# 343 "os_unix.h" 2
# 90 "vim.h" 2
# 110 "vim.h"
# 1 "osdef.h" 1
# 70 "osdef.h"

# 70 "osdef.h"
extern void (*sigset (int, void (*func) (int))) (int);
# 111 "vim.h" 2
# 165 "vim.h"
typedef unsigned char char_u;
typedef unsigned short short_u;
typedef unsigned int int_u;
typedef unsigned long long_u;






# 1 "ascii.h" 1
# 176 "vim.h" 2
# 1 "keymap.h" 1
# 121 "keymap.h"
enum key_extra
{
    KE_NAME = 3,

    KE_S_UP,
    KE_S_DOWN,

    KE_S_F1,
    KE_S_F2,
    KE_S_F3,
    KE_S_F4,
    KE_S_F5,
    KE_S_F6,
    KE_S_F7,
    KE_S_F8,
    KE_S_F9,
    KE_S_F10,

    KE_S_F11,
    KE_S_F12,
    KE_S_F13,
    KE_S_F14,
    KE_S_F15,
    KE_S_F16,
    KE_S_F17,
    KE_S_F18,
    KE_S_F19,
    KE_S_F20,

    KE_S_F21,
    KE_S_F22,
    KE_S_F23,
    KE_S_F24,
    KE_S_F25,
    KE_S_F26,
    KE_S_F27,
    KE_S_F28,
    KE_S_F29,
    KE_S_F30,

    KE_S_F31,
    KE_S_F32,
    KE_S_F33,
    KE_S_F34,
    KE_S_F35,

    KE_MOUSE,





    KE_LEFTMOUSE,
    KE_LEFTDRAG,
    KE_LEFTRELEASE,
    KE_MIDDLEMOUSE,
    KE_MIDDLEDRAG,
    KE_MIDDLERELEASE,
    KE_RIGHTMOUSE,
    KE_RIGHTDRAG,
    KE_RIGHTRELEASE,

    KE_IGNORE,

    KE_TAB,
    KE_S_TAB,

    KE_SNIFF,

    KE_XF1,
    KE_XF2,
    KE_XF3,
    KE_XF4,
    KE_XEND,
    KE_XHOME,

    KE_LEFTMOUSE_NM,
    KE_LEFTRELEASE_NM,

    KE_S_XF1,
    KE_S_XF2,
    KE_S_XF3,
    KE_S_XF4,

    KE_MOUSEDOWN,
    KE_MOUSEUP,

    KE_KINS,
    KE_KDEL,

    KE_CSI
};
# 177 "vim.h" 2
# 1 "term.h" 1
# 28 "term.h"
enum SpecialKey
{
    KS_NAME = 0,
    KS_CE,
    KS_AL,
    KS_CAL,
    KS_DL,
    KS_CDL,
    KS_CS,
    KS_CL,
    KS_CD,
    KS_DA,
    KS_DB,
    KS_VI,
    KS_VE,
    KS_VS,
    KS_ME,
    KS_MR,
    KS_MD,
    KS_SE,
    KS_SO,
    KS_CZH,
    KS_CZR,
    KS_UE,
    KS_US,
    KS_MS,
    KS_CM,
    KS_SR,
    KS_CRI,
    KS_VB,
    KS_KS,
    KS_KE,
    KS_TI,
    KS_TE,
    KS_BC,
    KS_CCS,
    KS_CCO,
    KS_CSF,
    KS_CSB,
    KS_XS,
    KS_MB,
    KS_CAF,
    KS_CAB,
    KS_LE,
    KS_ND,
    KS_CIS,
    KS_CIE,
    KS_TS,
    KS_FS,
    KS_CWP,
    KS_CWS,
    KS_CRV,
    KS_OP
};
# 93 "term.h"
extern char_u *(term_strings[]);
# 178 "vim.h" 2
# 1 "macros.h" 1
# 179 "vim.h" 2
# 590 "vim.h"
enum auto_event
{
    EVENT_BUFCREATE = 0,
    EVENT_BUFDELETE,
    EVENT_BUFENTER,
    EVENT_BUFFILEPOST,
    EVENT_BUFFILEPRE,
    EVENT_BUFLEAVE,
    EVENT_BUFNEWFILE,
    EVENT_BUFREADPOST,
    EVENT_BUFREADPRE,
    EVENT_BUFUNLOAD,
    EVENT_BUFHIDDEN,
    EVENT_BUFWRITEPOST,
    EVENT_BUFWRITEPRE,
    EVENT_FILEAPPENDPOST,
    EVENT_FILEAPPENDPRE,
    EVENT_FILECHANGEDSHELL,
    EVENT_FILEREADPOST,
    EVENT_FILEREADPRE,
    EVENT_FILETYPE,
    EVENT_FILEWRITEPOST,
    EVENT_FILEWRITEPRE,
    EVENT_FILTERREADPOST,
    EVENT_FILTERREADPRE,
    EVENT_FILTERWRITEPOST,
    EVENT_FILTERWRITEPRE,
    EVENT_FOCUSGAINED,
    EVENT_FOCUSLOST,
    EVENT_GUIENTER,
    EVENT_STDINREADPOST,
    EVENT_STDINREADPRE,
    EVENT_SYNTAX,
    EVENT_TERMCHANGED,
    EVENT_USER,
    EVENT_VIMENTER,
    EVENT_VIMLEAVE,
    EVENT_VIMLEAVEPRE,
    EVENT_WINENTER,
    EVENT_WINLEAVE,
    EVENT_FILEENCODING,
    EVENT_CURSORHOLD,
    NUM_EVENTS
};

typedef enum auto_event EVENT_T;





enum hlf_value
{
    HLF_8 = 0,
    HLF_AT,
    HLF_D,
    HLF_E,
    HLF_H,
    HLF_I,
    HLF_L,
    HLF_M,
    HLF_CM,
    HLF_N,
    HLF_R,
    HLF_S,
    HLF_SNC,
    HLF_T,
    HLF_V,
    HLF_VNC,
    HLF_W,
    HLF_WM,
    HLF_COUNT
};
# 809 "vim.h"
typedef long linenr_t;
typedef unsigned colnr_t;
# 827 "vim.h"
void mch_memmove (void *, void *, size_t);
# 884 "vim.h"
# 1 "regexp.h" 1
# 19 "regexp.h"
typedef struct
{
    char_u *startp[10];
    char_u *endp[10];
    char_u regstart;
    char_u reganch;
    char_u *regmust;
    int regmlen;
    char_u program[1];
} vim_regexp;
# 885 "vim.h" 2
# 1 "structs.h" 1
# 26 "structs.h"
typedef struct fpos FPOS;

struct fpos
{
    linenr_t lnum;
    colnr_t col;
};
# 56 "structs.h"
struct filemark
{
    FPOS mark;
    int fnum;
};




struct taggy
{
    char_u *tagname;
    struct filemark fmark;
    int cur_match;
};
# 82 "structs.h"
typedef struct window WIN;
typedef struct winfpos WINFPOS;

struct winfpos
{
    WINFPOS *wl_next;
    WINFPOS *wl_prev;
    WIN *wl_win;
    FPOS wl_fpos;
};





struct u_entry
{
    struct u_entry *ue_next;
    linenr_t ue_top;
    linenr_t ue_bot;
    linenr_t ue_lcount;
    char_u **ue_array;
    long ue_size;
};

struct u_header
{
    struct u_header *uh_next;
    struct u_header *uh_prev;
    struct u_entry *uh_entry;
    FPOS uh_cursor;
    int uh_flags;
    FPOS uh_namedm[26];
};
# 133 "structs.h"
typedef struct m_info info_t;




struct m_info
{

    long_u m_size;



    info_t *m_next;
};




struct m_block
{
    struct m_block *mb_next;
    info_t mb_info;
};






struct growarray
{
    int ga_len;
    int ga_room;
    int ga_itemsize;
    int ga_growsize;
    void *ga_data;
};





typedef struct block_hdr BHDR;
typedef struct memfile MEMFILE;
typedef long blocknr_t;
# 194 "structs.h"
struct block_hdr
{
    BHDR *bh_next;
    BHDR *bh_prev;
    BHDR *bh_hash_next;
    BHDR *bh_hash_prev;
    blocknr_t bh_bnum;
    char_u *bh_data;
    int bh_page_count;



    char bh_flags;
};







typedef struct nr_trans NR_TRANS;

struct nr_trans
{
    NR_TRANS *nt_next;
    NR_TRANS *nt_prev;
    blocknr_t nt_old_bnum;
    blocknr_t nt_new_bnum;
};
# 232 "structs.h"
struct memfile
{
    char_u *mf_fname;
    char_u *mf_ffname;
    int mf_fd;
    BHDR *mf_free_first;
    BHDR *mf_used_first;
    BHDR *mf_used_last;
    unsigned mf_used_count;
    unsigned mf_used_count_max;
    BHDR *mf_hash[64];
    NR_TRANS *mf_trans[64];
    blocknr_t mf_blocknr_max;
    blocknr_t mf_blocknr_min;
    blocknr_t mf_neg_count;
    blocknr_t mf_infile_count;
    unsigned mf_page_size;
    int mf_dirty;
};




typedef struct info_pointer IPTR;






struct info_pointer
{
    blocknr_t ip_bnum;
    linenr_t ip_low;
    linenr_t ip_high;
    int ip_index;
};


typedef struct ml_chunksize
{
    int mlcs_numlines;
    int mlcs_totalsize;
} ML_CHUNKSIZE;
# 284 "structs.h"
typedef struct memline MEMLINE;




struct memline
{
    linenr_t ml_line_count;

    MEMFILE *ml_mfp;





    int ml_flags;

    IPTR *ml_stack;
    int ml_stack_top;
    int ml_stack_size;

    linenr_t ml_line_lnum;
    char_u *ml_line_ptr;

    BHDR *ml_locked;
    linenr_t ml_locked_low;
    linenr_t ml_locked_high;
    int ml_locked_lineadd;

    ML_CHUNKSIZE *ml_chunksize;
    int ml_numchunks;
    int ml_usedchunks;

};





struct keyentry
{
    struct keyentry *next;
    int syn_inc_tag;
    short syn_id;
    short *next_list;
    short flags;
    char_u keyword[1];
};




struct syn_state
{
    struct growarray sst_ga;
    short *sst_next_list;

    int sst_next_flags;
};





struct attr_entry
{
    short ae_attr;
    union
    {
 struct
 {
     char_u *start;
     char_u *stop;
 } term;
 struct
 {
     char_u fg_color;
     char_u bg_color;
 } cterm;
# 371 "structs.h"
    } ae_u;
};
# 382 "structs.h"
typedef struct buffer BUF;

struct buffer
{
    MEMLINE b_ml;


    BUF *b_next;
    BUF *b_prev;

    int b_changed;




    int b_nwindows;

    int b_flags;







    char_u *b_ffname;
    char_u *b_sfname;
    char_u *b_fname;


    int b_dev;
    ino_t b_ino;
# 422 "structs.h"
    int b_fnum;
    WINFPOS *b_winfpos;


    long b_mtime;
    long b_mtime_read;

    FPOS b_namedm[26];


    FPOS b_visual_start;
    FPOS b_visual_end;
    int b_visual_mode;

    FPOS b_last_cursor;





    char b_chartab[256];




    FPOS b_op_start;
    FPOS b_op_end;


    int b_marks_read;





    struct u_header *b_u_oldhead;
    struct u_header *b_u_newhead;
    struct u_header *b_u_curhead;
    int b_u_numhead;
    int b_u_synced;




    char_u *b_u_line_ptr;
    linenr_t b_u_line_lnum;
    colnr_t b_u_line_colnr;




    struct m_block b_block_head;
    info_t *b_m_search;

    struct m_block *b_mb_current;

    int b_scanned;
# 487 "structs.h"
    int b_p_initialized;
    int b_p_ai, b_p_ro, b_p_lisp;
    int b_p_inf;

    char_u *b_p_cpt;

    int b_p_bin, b_p_eol, b_p_et, b_p_ml, b_p_tx, b_p_swf;

    int b_p_sn;


    long b_p_sw, b_p_sts, b_p_ts, b_p_tw, b_p_wm;
    char_u *b_p_ff, *b_p_fo;

    char_u *b_p_com;

    char_u *b_p_isk;




    char_u *b_p_key;

    char_u *b_p_nf;
    char_u *b_p_mps;


    long b_p_wm_nobin, b_p_tw_nobin;
    int b_p_ml_nobin, b_p_et_nobin;


    int b_p_ai_save, b_p_lisp_save;
    long b_p_tw_save, b_p_wm_save, b_p_sts_save;


    int b_p_si, b_p_si_save;


    int b_p_cin;
    int b_p_cin_save;
    char_u *b_p_cino;
    char_u *b_p_cink;


    char_u *b_p_cinw;


    char_u *b_p_syn;


    char_u *b_p_ft;






    int b_start_ffc;


    struct growarray b_vars;






    int b_may_swap;
    int b_did_warn;

    int b_help;


    int b_shortname;
# 577 "structs.h"
    struct keyentry **b_keywtab;
    struct keyentry **b_keywtab_ic;
    int b_syn_ic;
    struct growarray b_syn_patterns;
    struct growarray b_syn_clusters;
    int b_syn_sync_flags;
    short b_syn_sync_id;
    long b_syn_sync_minlines;
    long b_syn_sync_maxlines;
    char_u *b_syn_linecont_pat;
    vim_regexp *b_syn_linecont_prog;
    int b_syn_linecont_ic;
    int b_syn_topgrp;
# 601 "structs.h"
    struct syn_state *b_syn_states;
    int b_syn_states_len;
    linenr_t b_syn_states_lnum;
    linenr_t b_syn_change_lnum;

};






struct window
{
    BUF *w_buffer;

    WIN *w_prev;
    WIN *w_next;

    FPOS w_cursor;





    int w_valid;
    FPOS w_valid_cursor;

    colnr_t w_valid_leftcol;






    int w_wrow, w_wcol;





    int w_cline_height;

    int w_cline_row;

    colnr_t w_virtcol;






    colnr_t w_curswant;




    int w_set_curswant;






    linenr_t w_old_cursor_lnum;
    colnr_t w_old_cursor_fcol;
    colnr_t w_old_cursor_lcol;
    linenr_t w_old_visual_lnum;
    colnr_t w_old_curswant;

    linenr_t w_topline;

    linenr_t w_botline;

    int w_empty_rows;

    int w_winpos;
    int w_height;

    int w_status_height;

    int w_redr_status;
    int w_redr_type;


    FPOS w_ru_cursor;
    colnr_t w_ru_virtcol;
    linenr_t w_ru_topline;
    char w_ru_empty;

    colnr_t w_leftcol;

    colnr_t w_skipcol;






    int w_lsize_valid;
    linenr_t *w_lsize_lnum;
    char_u *w_lsize;

    int w_alt_fnum;

    int w_arg_idx;

    int w_arg_idx_invalid;






    int w_p_list,
  w_p_nu,






  w_p_wrap;

    int w_p_lbr;

    long w_p_scroll;


    int w_p_scb;
    long w_scbind_pos;

    int w_preview;


    struct growarray w_vars;







    FPOS w_pcmark;
    FPOS w_prev_pcmark;




    struct filemark w_jumplist[50];
    int w_jumplistlen;
    int w_jumplistidx;







    struct taggy w_tagstack[20];
    int w_tagstackidx;
    int w_tagstacklen;







    int w_fraction;
    int w_prev_fraction_row;
# 789 "structs.h"
};




typedef struct oparg
{
    int op_type;
    int regname;
    int motion_type;
    int inclusive;

    int end_adjusted;

    FPOS start;
    FPOS end;
    long line_count;

    int empty;

    int is_VIsual;
    int block_mode;
    colnr_t start_vcol;
    colnr_t end_vcol;
} OPARG;




typedef struct cmdarg
{
    OPARG *oap;
    int prechar;
    int cmdchar;
    int nchar;
    int extra_char;
    long count0;
    long count1;
} CMDARG;
# 886 "structs.h"
typedef struct VimMenu
{
    int modes;
    char_u *name;
    char_u *dname;
    int mnemonic;
    char_u *actext;
    int priority;



    char_u *strings[6];
    int noremap[6];
    struct VimMenu *children;
    struct VimMenu *next;
# 951 "structs.h"
} VimMenu;
# 886 "vim.h" 2
# 1019 "vim.h"
# 1 "globals.h" 1
# 29 "globals.h"
extern long Rows ;
extern long Columns ;
# 40 "globals.h"
extern char_u *NextScreen ;
extern char_u **LinePointers ;

extern int screen_Rows ;
extern int screen_Columns ;





extern int mod_mask ;
# 61 "globals.h"
extern int cmdline_row;

extern int redraw_cmdline ;
extern int clear_cmdline ;

extern int cmdline_crypt ;

extern int exec_from_reg ;

extern int modified ;

extern int tag_modified ;

extern int screen_cleared ;







extern colnr_t dollar_vcol ;




extern int expand_context ;
extern char_u *expand_pattern ;
extern int expand_set_path ;





extern int completion_length ;
extern int continue_status ;
extern int completion_interrupted ;
# 116 "globals.h"
extern int msg_col;
extern int msg_row;




extern int msg_scrolled;

extern char_u *keep_msg ;
extern int keep_msg_attr ;
extern int need_fileinfo ;
extern int msg_scroll ;
extern int msg_didout ;
extern int msg_didany ;
extern int msg_nowait ;
extern int emsg_off ;
extern int did_emsg;
extern int emsg_on_display ;
extern int rc_did_emsg ;

extern int no_wait_return ;
extern int need_wait_return ;

extern int quit_more ;
extern int more_back ;
extern int more_back_used ;

extern int newline_on_exit ;
extern int intr_char ;

extern int vgetc_busy ;

extern int didset_vim ;
extern int didset_vimruntime ;





extern int lines_left ;
extern int msg_no_more ;


extern char_u *sourcing_name ;
extern linenr_t sourcing_lnum ;

extern int scroll_region ;
extern int highlight_match ;
extern int search_match_len;
extern int no_smartcase ;
extern int need_check_timestamps ;
extern int highlight_attr[HLF_COUNT];




extern int highlight_user[9];

extern int highlight_stlnc[9];





extern int cterm_normal_fg_color ;
extern int cterm_normal_fg_bold ;
extern int cterm_normal_bg_color ;


extern int autocmd_busy ;
extern int autocmd_no_enter ;
extern int autocmd_no_leave ;
extern int modified_was_set;
extern int did_filetype ;



extern BUF *au_new_curbuf ;






extern int mouse_row;
extern int mouse_col;
extern int mouse_past_bottom ;
extern int mouse_past_eol ;
extern int mouse_dragging ;
# 228 "globals.h"
extern VimMenu *root_menu ;




extern int sys_menu ;
# 277 "globals.h"
extern WIN *firstwin;
extern WIN *lastwin;
extern WIN *curwin;





extern BUF *firstbuf ;
extern BUF *lastbuf ;
extern BUF *curbuf ;




extern char_u **arg_files;
extern int arg_file_count;
extern int arg_had_last ;

extern int ru_col;

extern int ru_wid;

extern int sc_col;





extern int starting ;


extern int exiting ;

extern int full_screen ;



extern int restricted ;

extern int secure ;




extern int silent_mode ;



extern FPOS VIsual;
extern int VIsual_active ;

extern int VIsual_select ;

extern int VIsual_reselect;



extern int VIsual_mode ;

extern int redo_VIsual_busy ;







extern FPOS where_paste_started;
# 354 "globals.h"
extern int did_ai ;





extern colnr_t ai_col ;
# 369 "globals.h"
extern int end_comment_pending ;
# 379 "globals.h"
extern int did_syncbind ;







extern int did_si ;





extern int can_si ;





extern int can_si_back ;





extern FPOS Insstart;





extern int orig_line_count ;
extern int vr_lines_changed ;
extern colnr_t vr_virtcol ;
extern int vr_virtoffset ;
# 448 "globals.h"
extern int State ;




extern int exmode_active ;
extern int ex_no_reprint ;

extern int Recording ;
extern int Exec_reg ;

extern int finish_op ;

extern int no_mapping ;
extern int allow_keys ;

extern int no_u_sync ;

extern int restart_edit ;
extern int arrow_used;




extern char_u *edit_submode ;
extern char_u *edit_submode_extra ;
extern enum hlf_value edit_submode_highl;
extern int ctrl_x_mode ;


extern int no_abbr ;

extern int fo_do_comments ;
# 504 "globals.h"
extern int confirm ;
extern int swap_exists_action ;



extern char_u *IObuff;
extern char_u *NameBuff;

extern char_u msg_buf[80];

extern int RedrawingDisabled ;






extern int readonlymode ;
extern int recoverymode ;

extern char_u *typebuf ;
extern int typebuflen;
extern int typeoff;
extern int typelen;
extern int KeyTyped;
extern int KeyStuffed;
extern int maptick ;

extern char_u chartab[256];

extern int must_redraw ;
extern int skip_redraw ;
extern int do_redraw ;

extern int need_highlight_changed ;
extern char_u *use_viminfo ;


extern FILE *scriptin[15];
extern int curscript ;
extern FILE *scriptout ;
extern int read_cmd_fd ;

extern int got_int ;




extern int termcap_active ;
extern int bangredo ;
extern int searchcmdlen;
extern int reg_ic ;
extern int reg_syn ;

extern int did_outofmem_msg ;

extern int did_swapwrite_msg ;

extern int undo_off ;
extern int global_busy ;
extern int need_start_insertmode ;

extern char_u *last_cmdline ;
extern char_u *new_last_cmdline ;

extern char_u *autocmd_fname ;
extern int autocmd_bufnr ;
extern char_u *autocmd_match ;


extern int postponed_split ;
extern int g_do_tagpreview ;

extern int replace_offset ;

extern char_u *escape_chars ;


extern char_u *help_save_isk ;
extern long help_save_ts ;
extern int keep_help_flag ;






extern char_u *empty_option ;





extern int redir_off ;
extern FILE *redir_fd ;

extern int redir_reg ;







extern int save_p_ls ;
extern int wild_menu_showing ;
# 620 "globals.h"
extern char breakat_flags[256];



extern char *Version;
extern char *mediumVersion;



extern char *longVersion;
# 638 "globals.h"
extern char_u *default_vim_dir;
extern char_u *default_vimruntime_dir;
extern char_u *all_cflags;
extern char_u *all_lflags;



extern char_u *compiled_user;
extern char_u *compiled_sys;



extern int lcs_eol ;
extern int lcs_ext ;
extern int lcs_tab1 ;
extern int lcs_tab2 ;
extern int lcs_trail ;

extern char_u no_lines_msg[] ;


extern char_u wim_flags[4];





extern int stl_syntax ;




extern int no_hlsearch ;
# 705 "globals.h"
extern char_u e_abort[] ;
extern char_u e_argreq[] ;
extern char_u e_backslash[] ;
extern char_u e_curdir[] ;
extern char_u e_exists[] ;
extern char_u e_failed[] ;
extern char_u e_internal[] ;
extern char_u e_interr[] ;
extern char_u e_invaddr[] ;
extern char_u e_invarg[] ;
extern char_u e_invarg2[] ;

extern char_u e_invexpr2[] ;

extern char_u e_invrange[] ;
extern char_u e_invcmd[] ;

extern char_u e_letunexp[] ;

extern char_u e_markinval[] ;
extern char_u e_marknotset[] ;



extern char_u e_nesting[] ;
extern char_u e_noalt[] ;
extern char_u e_noabbr[] ;
extern char_u e_nobang[] ;

extern char_u e_nogvim[] ;


extern char_u e_nohebrew[] ;


extern char_u e_nofarsi[] ;

extern char_u e_noinstext[] ;
extern char_u e_nolastcmd[] ;
extern char_u e_nomap[] ;
extern char_u e_nomatch[] ;
extern char_u e_nomatch2[] ;
extern char_u e_noname[] ;
extern char_u e_nopresub[] ;
extern char_u e_noprev[] ;
extern char_u e_noprevre[] ;
extern char_u e_norange[] ;
extern char_u e_noroom[] ;
extern char_u e_notcreate[] ;
extern char_u e_notmp[] ;
extern char_u e_notopen[] ;
extern char_u e_notread[] ;
extern char_u e_nowrtmsg[] ;
extern char_u e_null[] ;

extern char_u e_number[] ;


extern char_u e_openerrf[] ;

extern char_u e_outofmem[] ;

extern char_u e_patnotf[] ;

extern char_u e_patnotf2[] ;
extern char_u e_positive[] ;

extern char_u e_quickfix[] ;

extern char_u e_re_damg[] ;
extern char_u e_re_corr[] ;
extern char_u e_readonly[] ;

extern char_u e_readonlyvar[] ;


extern char_u e_readerrf[] ;

extern char_u e_scroll[] ;
extern char_u e_tagformat[] ;
extern char_u e_tagstack[] ;
extern char_u e_toocompl[] ;
extern char_u e_toombra[] ;
extern char_u e_toomket[] ;
extern char_u e_toomsbra[] ;



extern char_u e_toomany[] ;
extern char_u e_trailing[] ;
extern char_u e_umark[] ;
extern char_u e_unknown[] ;
extern char_u e_write[] ;
extern char_u e_zerocount[] ;
# 1020 "vim.h" 2
# 1 "option.h" 1
# 254 "option.h"
extern int p_aw;
extern char_u *p_bs;
extern char_u *p_bg;
extern int p_bk;
extern char_u *p_bdir;
extern char_u *p_bex;
extern char_u *p_bsdir;





extern char_u *p_breakat;




extern long p_ch;

extern int p_confirm;

extern int p_cp;
extern char_u *p_cpo;






extern char_u *p_def;

extern char_u *p_dict;


extern int p_dg;

extern char_u *p_dir;
extern char_u *p_dy;
extern int p_ed;
extern int p_ea;
extern char_u *p_ep;
extern int p_eb;

extern char_u *p_ef;
extern char_u *p_efm;
extern char_u *p_gefm;
extern char_u *p_gp;


extern char_u *p_ei;

extern int p_ek;
extern int p_exrc;
extern char_u *p_ffs;
extern char_u *p_fp;
extern int p_gd;
# 326 "option.h"
extern char_u *p_hf;
extern long p_hh;
extern int p_hid;
extern char_u *p_hl;
extern int p_hls;
extern long p_hi;
# 341 "option.h"
extern int p_icon;
extern char_u *p_iconstring;

extern int p_ic;
extern int p_is;
extern int p_im;
extern char_u *p_inc;
extern char_u *p_isf;
extern char_u *p_isi;
extern char_u *p_isp;
extern int p_js;
extern char_u *p_kp;
extern char_u *p_km;



extern long p_ls;
extern char_u *p_lcs;

extern int p_lz;
extern int p_magic;

extern char_u *p_mef;
extern char_u *p_mp;

extern long p_mat;

extern long p_mfd;

extern long p_mmd;
extern long p_mm;
extern long p_mmt;
extern long p_mls;
extern char_u *p_mouse;




extern char_u *p_mousem;
extern long p_mouset;
extern int p_more;
extern char_u *p_para;
extern int p_paste;
extern char_u *p_pt;
extern char_u *p_pm;
extern char_u *p_path;
extern int p_remap;
extern long p_report;
extern long p_pvh;
# 398 "option.h"
extern int p_ru;


extern char_u *p_ruf;

extern long p_sj;
extern long p_so;

extern char_u *p_sbo;

extern char_u *p_sections;
extern int p_secure;
extern char_u *p_sel;
extern char_u *p_slm;

extern char_u *p_sessopt;

extern char_u *p_sh;
extern char_u *p_shcf;

extern char_u *p_sp;

extern char_u *p_shq;
extern char_u *p_sxq;
extern char_u *p_srr;







extern char_u *p_stl;

extern int p_sr;
extern char_u *p_shm;

extern char_u *p_sbr;


extern int p_sc;

extern int p_sft;
extern int p_sm;
extern int p_smd;
extern long p_ss;
extern int p_scs;
extern int p_sta;
extern int p_sb;
extern int p_sol;
extern char_u *p_su;
extern char_u *p_sws;
extern char_u *p_swb;
extern int p_tbs;
extern long p_tl;
extern int p_tr;
extern char_u *p_tags;
extern int p_tgst;
extern int p_terse;
extern int p_ta;
extern int p_to;
extern int p_timeout;
extern long p_tm;

extern int p_title;
extern long p_titlelen;
extern char_u *p_titleold;
extern char_u *p_titlestring;

extern int p_ttimeout;
extern long p_ttm;
extern int p_tbi;
extern int p_tf;



extern long p_ttyscroll;
extern char_u *p_ttym;
extern long p_ul;
extern long p_uc;
extern long p_ut;

extern char_u *p_viminfo;

extern int p_vb;
extern long p_verbose;
extern int p_warn;





extern char_u *p_wig;

extern int p_wiv;
extern char_u *p_ww;
extern long p_wc;
extern long p_wcm;
extern char_u *p_wim;

extern int p_wmnu;

extern long p_wh;
extern long p_wmh;
extern int p_ws;
extern int p_write;
extern int p_wa;
extern int p_wb;
extern long p_wd;
# 1021 "vim.h" 2
# 1 "ex_cmds.h" 1
# 78 "ex_cmds.h"
enum CMD_index

{
    CMD_append,
    CMD_abbreviate,
    CMD_abclear,
    CMD_all,
    CMD_amenu,
    CMD_anoremenu,
    CMD_args,
    CMD_argument,
    CMD_ascii,
    CMD_autocmd,
    CMD_augroup,
    CMD_aunmenu,
    CMD_buffer,
    CMD_bNext,
    CMD_ball,
    CMD_badd,
    CMD_bdelete,
    CMD_behave,
    CMD_blast,
    CMD_bmodified,
    CMD_bnext,
    CMD_bprevious,
    CMD_brewind,
    CMD_break,
    CMD_browse,
    CMD_buffers,
    CMD_bunload,
    CMD_change,
    CMD_cNext,
    CMD_cabbrev,
    CMD_cabclear,
    CMD_call,
    CMD_cc,
    CMD_cd,
    CMD_center,
    CMD_cfile,
    CMD_chdir,
    CMD_checkpath,
    CMD_clist,
    CMD_clast,
    CMD_close,
    CMD_cmap,
    CMD_cmapclear,
    CMD_cmenu,
    CMD_cnext,
    CMD_cnewer,
    CMD_cnfile,
    CMD_cnoremap,
    CMD_cnoreabbrev,
    CMD_cnoremenu,
    CMD_copy,
    CMD_colder,
    CMD_command,
    CMD_comclear,
    CMD_continue,
    CMD_confirm,
    CMD_cprevious,
    CMD_cquit,
    CMD_crewind,
    CMD_cscope,
    CMD_cstag,
    CMD_cunmap,
    CMD_cunabbrev,
    CMD_cunmenu,
    CMD_delete,
    CMD_delcommand,
    CMD_delfunction,
    CMD_display,
    CMD_digraphs,
    CMD_djump,
    CMD_dlist,
    CMD_doautocmd,
    CMD_doautoall,
    CMD_dsearch,
    CMD_dsplit,
    CMD_edit,
    CMD_echo,
    CMD_echohl,
    CMD_echon,
    CMD_else,
    CMD_elseif,
    CMD_exemenu,
    CMD_endif,
    CMD_endfunction,
    CMD_endwhile,
    CMD_ex,
    CMD_execute,
    CMD_exit,
    CMD_file,
    CMD_files,
    CMD_filetype,
    CMD_find,
    CMD_fixdel,
    CMD_function,
    CMD_global,
    CMD_goto,
    CMD_grep,
    CMD_gui,
    CMD_gvim,
    CMD_help,
    CMD_helpfind,
    CMD_highlight,
    CMD_hide,
    CMD_history,
    CMD_insert,
    CMD_iabbrev,
    CMD_iabclear,
    CMD_if,
    CMD_ijump,
    CMD_ilist,
    CMD_imap,
    CMD_imapclear,
    CMD_imenu,
    CMD_inoremap,
    CMD_inoreabbrev,
    CMD_inoremenu,
    CMD_intro,
    CMD_isearch,
    CMD_isplit,
    CMD_iunmap,
    CMD_iunabbrev,
    CMD_iunmenu,
    CMD_join,
    CMD_jumps,
    CMD_k,
    CMD_list,
    CMD_last,
    CMD_left,
    CMD_let,
    CMD_ls,
    CMD_move,
    CMD_mark,
    CMD_make,
    CMD_map,
    CMD_mapclear,
    CMD_marks,
    CMD_menu,
    CMD_messages,

    CMD_mkexrc,
    CMD_mksession,
    CMD_mkvimrc,
    CMD_mode,
    CMD_next,
    CMD_new,
    CMD_nmap,
    CMD_nmapclear,
    CMD_nmenu,
    CMD_nnoremap,
    CMD_nnoremenu,
    CMD_noremap,
    CMD_nohlsearch,
    CMD_noreabbrev,
    CMD_noremenu,
    CMD_normal,
    CMD_number,
    CMD_nunmap,
    CMD_nunmenu,
    CMD_open,
    CMD_omap,
    CMD_omapclear,
    CMD_omenu,
    CMD_only,
    CMD_onoremap,
    CMD_onoremenu,
    CMD_options,
    CMD_ounmap,
    CMD_ounmenu,
    CMD_print,
    CMD_pclose,
    CMD_perl,
    CMD_perldo,
    CMD_pop,
    CMD_ppop,
    CMD_preserve,
    CMD_previous,
    CMD_promptfind,
    CMD_promptrepl,
    CMD_ptag,
    CMD_ptNext,
    CMD_ptjump,
    CMD_ptlast,
    CMD_ptnext,
    CMD_ptprevious,
    CMD_ptrewind,
    CMD_ptselect,
    CMD_put,
    CMD_pwd,
    CMD_python,
    CMD_pyfile,
    CMD_quit,
    CMD_qall,
    CMD_read,
    CMD_recover,
    CMD_redo,
    CMD_redir,
    CMD_registers,
    CMD_resize,
    CMD_retab,
    CMD_return,
    CMD_rewind,
    CMD_right,
    CMD_rviminfo,
    CMD_substitute,
    CMD_sNext,
    CMD_sargument,
    CMD_sall,
    CMD_sbuffer,
    CMD_sbNext,
    CMD_sball,
    CMD_sblast,
    CMD_sbmodified,
    CMD_sbnext,
    CMD_sbprevious,
    CMD_sbrewind,
    CMD_set,
    CMD_sfind,
    CMD_shell,



    CMD_sleep,
    CMD_slast,
    CMD_smagic,
    CMD_snext,
    CMD_sniff,
    CMD_snomagic,
    CMD_source,
    CMD_split,
    CMD_sprevious,
    CMD_srewind,
    CMD_stop,
    CMD_stag,
    CMD_startinsert,
    CMD_stjump,
    CMD_stselect,
    CMD_sunhide,
    CMD_suspend,
    CMD_sview,
    CMD_swapname,
    CMD_syntax,
    CMD_syncbind,
    CMD_t,
    CMD_tNext,
    CMD_tag,
    CMD_tags,
    CMD_tcl,
    CMD_tcldo,
    CMD_tclfile,
    CMD_tearoff,
    CMD_tjump,
    CMD_tlast,
    CMD_tmenu,
    CMD_tnext,
    CMD_tprevious,
    CMD_trewind,
    CMD_tselect,
    CMD_tunmenu,
    CMD_undo,
    CMD_unabbreviate,
    CMD_unhide,
    CMD_unlet,
    CMD_unmap,
    CMD_unmenu,
    CMD_update,
    CMD_vglobal,
    CMD_version,
    CMD_visual,
    CMD_view,
    CMD_vmap,
    CMD_vmapclear,
    CMD_vmenu,
    CMD_vnoremap,
    CMD_vnoremenu,
    CMD_vunmap,
    CMD_vunmenu,
    CMD_write,
    CMD_wNext,
    CMD_wall,
    CMD_while,
    CMD_winsize,
    CMD_winpos,
    CMD_wnext,
    CMD_wprevious,
    CMD_wq,
    CMD_wqall,
    CMD_wviminfo,
    CMD_xit,
    CMD_xall,
    CMD_yank,
    CMD_z,


    CMD_bang,
    CMD_pound,
    CMD_and,
    CMD_star,
    CMD_lshift,
    CMD_equal,
    CMD_rshift,
    CMD_at,
    CMD_Next,
    CMD_Print,
    CMD_X,
    CMD_tilde,



    CMD_SIZE,
    CMD_USER = -1




};


typedef enum CMD_index CMDIDX;




typedef struct exarg
{
    char_u *arg;
    char_u *nextcmd;
    char_u *cmd;
    CMDIDX cmdidx;
    long argt;
    int skip;
    int forceit;
    int addr_count;
    linenr_t line1;
    linenr_t line2;
    char_u *do_ecmd_cmd;
    linenr_t do_ecmd_lnum;
    int append;
    int usefilter;
    int amount;
    int regname;

    int useridx;

} EXARG;
# 1022 "vim.h" 2
# 1 "proto.h" 1
# 30 "proto.h"
# 1 "proto/os_unix.pro" 1

void mch_write (char_u *s, int len) __attribute((crest_skip));
int mch_inchar (char_u *buf, int maxlen, long wtime);
int mch_char_avail (void);
long_u mch_avail_mem (int special);
void mch_delay (long msec, int ignoreinput);
void mch_suspend (void);
void mch_windinit (void);
void reset_signals (void);
int mch_check_win (int argc, char **argv);
int mch_input_isatty (void);
int mch_can_restore_title (void);
int mch_can_restore_icon (void);
void mch_settitle (char_u *title, char_u *icon);
void mch_restore_title (int which);
int vim_is_xterm (char_u *name);
int use_xterm_mouse (void);
int vim_is_iris (char_u *name);
int vim_is_fastterm (char_u *name);
int mch_get_user_name (char_u *s, int len);
int mch_get_uname (uid_t uid, char_u *s, int len);
void mch_get_host_name (char_u *s, int len);
long mch_get_pid (void);
int mch_dirname (char_u *buf, int len);
void slash_adjust (char_u *p);
int mch_FullName (char_u *fname, char_u *buf, int len, int force);
int mch_isFullName (char_u *fname);
long mch_getperm (char_u *name);
int mch_setperm (char_u *name, long perm);
void mch_hide (char_u *name);
int mch_isdir (char_u *name);
void mch_windexit (int r);
void mch_settmode (int tmode);
void get_stty (void);
void mch_setmouse (int on);
void check_mouse_termcode (void);
int mch_screenmode (char_u *arg);
int mch_get_winsize (void);
void mch_set_winsize (void);
int mch_call_shell (char_u *cmd, int options);
void mch_breakcheck (void);
int mch_expandpath (struct growarray *gap, char_u *path, int flags);
int mch_expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int mch_has_wildcard (char_u *p);
void setup_xterm_clip (void);
void start_xterm_trace (int button);
void stop_xterm_trace (void);
void clear_xterm_clip (void);
int clip_xterm_own_selection (void);
void clip_xterm_lose_selection (void);
void clip_xterm_request_selection (void);
void clip_xterm_set_selection (void);
# 31 "proto.h" 2
# 54 "proto.h"
# 1 "proto/buffer.pro" 1

int open_buffer (int read_stdin);
int buf_valid (BUF *buf);
void close_buffer (WIN *win, BUF *buf, int free_buf, int del_buf);
void buf_clear (BUF *buf);
void buf_freeall (BUF *buf, int del_buf);
char_u *do_bufdel (int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit);
int do_buffer (int action, int start, int dir, int count, int forceit);
void enter_buffer (BUF *buf);
BUF *buflist_new (char_u *ffname, char_u *sfname, linenr_t lnum, int use_curbuf);
void free_buf_options (BUF *buf, int free_p_ff);
int buflist_getfile (int n, linenr_t lnum, int options, int forceit);
void buflist_getfpos (void);
BUF *buflist_findname (char_u *ffname);
int buflist_findpat (char_u *pattern, char_u *pattern_end);
int ExpandBufnames (char_u *pat, int *num_file, char_u ***file, int options);
BUF *buflist_findnr (int nr);
char_u *buflist_nr2name (int n, int fullname, int helptail);
FPOS *buflist_findfpos (BUF *buf);
linenr_t buflist_findlnum (BUF *buf);
void buflist_list (void);
int buflist_name_nr (int fnum, char_u **fname, linenr_t *lnum);
int setfname (char_u *ffname, char_u *sfname, int message);
void setaltfname (char_u *ffname, char_u *sfname, linenr_t lnum);
char_u *getaltfname (int errmsg);
int buflist_add (char_u *fname);
void buflist_altfpos (void);
int otherfile (char_u *ffname);
void fileinfo (int fullname, int shorthelp, int dont_truncate);
void cursor_pos_info (void);
void col_print (char_u *buf, int col, int vcol);
void maketitle (void);
void resettitle (void);
int append_arg_number (WIN *wp, char_u *buf, int add_file, int maxlen);
char_u *fix_fname (char_u *fname);
void fname_expand (char_u **ffname, char_u **sfname);
void do_arg_all (int count, int forceit);
void do_buffer_all (int count, int all);
void do_modelines (void);
int read_viminfo_bufferlist (char_u *line, FILE *fp, int writing);
void write_viminfo_bufferlist (FILE *fp);
# 55 "proto.h" 2
# 1 "proto/charset.pro" 1

int init_chartab (void);
void trans_characters (char_u *buf, int bufsize);
char_u *transstr (char_u *s);
char_u *transchar (int c);
void transchar_nonprint (char_u *buf, int c);
int charsize (int c);
int vim_strsize (char_u *s);
int chartabsize (int c, colnr_t col);
int linetabsize (char_u *s);
int win_linetabsize (WIN *wp, char_u *s);
int vim_isIDc (int c);
int vim_iswordc (int c);
int vim_iswordc_buf (int c, BUF *buf);
int vim_isfilec (int c);
int vim_isprintc (int c);
int safe_vim_isprintc (int c);
int lbr_chartabsize (unsigned char *s, colnr_t col);
int win_lbr_chartabsize (WIN *wp, unsigned char *s, colnr_t col, int *head);
void getvcol (WIN *wp, FPOS *pos, colnr_t *start, colnr_t *cursor, colnr_t *end);
void getvcols (FPOS *pos1, FPOS *pos2, colnr_t *left, colnr_t *right);
char_u *skipwhite (char_u *p);
char_u *skipdigits (char_u *p);
int vim_isdigit (int c);
char_u *skiptowhite (char_u *p);
char_u *skiptowhite_esc (char_u *p);
long getdigits (char_u **pp);
int vim_isblankline (char_u *lbuf);
void vim_str2nr (char_u *start, int *hexp, int *len, int dooct, int dohex, long *nptr, unsigned long *unptr);
int hex2nr (int c);
# 56 "proto.h" 2

# 1 "proto/if_cscope.pro" 1

void do_cscope (EXARG *eap);
void do_cstag (EXARG *eap);
int cs_fgets (char_u *buf, int size);
void cs_free_tags (void);
void cs_print_tags (void);
# 58 "proto.h" 2

# 1 "proto/digraph.pro" 1

int do_digraph (int c);
int getdigraph (int char1, int char2, int meta);
void putdigraph (char_u *str);
void listdigraphs (void);
# 60 "proto.h" 2
# 1 "proto/edit.pro" 1

int edit (int cmdchar, int startln, long count);
void display_dollar (colnr_t col);
void change_indent (int type, int amount, int round, int replaced);
void truncate_spaces (char_u *line);
void backspace_until_column (int col);
int vim_is_ctrl_x_key (int c);
int ins_compl_add_infercase (char_u *str, int len, char_u *fname, int dir, int reuse);
void ins_compl_check_keys (void);
int get_literal (void);
void insertchar (unsigned c, int force_formatting, int second_indent, int ctrlv);
int comp_textwidth (int ff);
void stop_arrow (void);
void set_last_insert (int c);
void beginline (int flags);
int oneright (void);
int oneleft (void);
int cursor_up (long n, int upd_topline);
int cursor_down (long n, int upd_topline);
int stuff_inserted (int c, long count, int no_esc);
char_u *get_last_insert (void);
char_u *get_last_insert_save (void);
void replace_push (int c);
int get_replace_stack_virtcol (void);
void fixthisline (int (*get_the_indent)(void));
int in_cinkeys (int keytyped, int when, int line_is_empty);
int hkmap (int c);
void ins_scroll (void);
void ins_horscroll (void);
# 61 "proto.h" 2
# 1 "proto/eval.pro" 1

void set_internal_string_var (char_u *name, char_u *value);
int eval_to_bool (char_u *arg, int *error, char_u **nextcmd, int skip);
char_u *eval_to_string (char_u *arg, char_u **nextcmd);
void do_let (EXARG *eap);
void set_context_for_expression (char_u *arg, CMDIDX cmdidx);
void do_call (EXARG *eap);
void do_unlet (char_u *arg, int forceit);
char_u *get_user_var_name (int idx);
char_u *get_function_name (int idx);
char_u *get_expr_name (int idx);
void set_vim_var_nr (int idx, long val);
void set_vim_var_string (int idx, char_u *val);
void var_init (struct growarray *gap);
void var_clear (struct growarray *gap);
void do_echo (EXARG *eap, int echo);
void do_echohl (char_u *arg);
void do_execute (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
void do_function (EXARG *eap, char_u *(*getline)(int, void *, int), void *cookie);
char_u *get_user_func_name (int idx);
void do_delfunction (char_u *arg);
void *save_funccal (void);
void restore_funccal (void *fc);
void do_return (EXARG *eap);
char_u *get_func_line (int c, void *cookie, int indent);
int func_has_ended (void *cookie);
int func_has_abort (void *cookie);
int read_viminfo_varlist (char_u *line, FILE *fp, int writing);
void write_viminfo_varlist (FILE *fp);
int store_session_globals (FILE *fd);
int modify_fname (char_u *src, int *usedlen, char_u **fnamep, char_u **bufp, int *fnamelen);
char_u *do_string_sub (char_u *str, char_u *pat, char_u *sub, char_u *flags);
# 62 "proto.h" 2
# 1 "proto/ex_cmds.pro" 1

void do_ascii (void);
void do_align (EXARG *eap);
void do_retab (EXARG *eap);
int do_move (linenr_t line1, linenr_t line2, linenr_t dest);
void do_copy (linenr_t line1, linenr_t line2, linenr_t n);
void do_bang (int addr_count, linenr_t line1, linenr_t line2, int forceit, char_u *arg, int do_in, int do_out);
void do_shell (char_u *cmd, int flags);
char_u *make_filter_cmd (char_u *cmd, char_u *itmp, char_u *otmp);
int viminfo_error (char *message, char_u *line);
int read_viminfo (char_u *file, int want_info, int want_marks, int forceit);
void write_viminfo (char_u *file, int forceit);
char_u *viminfo_readstring (char_u *p, FILE *fp);
void viminfo_writestring (FILE *fd, char_u *p);
void do_fixdel (void);
void print_line_no_prefix (linenr_t lnum, int use_number);
void print_line (linenr_t lnum, int use_number);
void do_file (char_u *arg, int forceit);
int do_write (EXARG *eap);
void do_wnext (EXARG *eap);
void do_wqall (EXARG *eap);
int not_writing (void);
int getfile (int fnum, char_u *ffname, char_u *sfname, int setpm, linenr_t lnum, int forceit);
int do_ecmd (int fnum, char_u *ffname, char_u *sfname, char_u *command, linenr_t newlnum, int flags);
void do_append (linenr_t lnum, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_change (linenr_t start, linenr_t end, char_u *(*getline)(int, void *, int), void *cookie, int getl_break);
void do_z (linenr_t line, char_u *arg);
int check_restricted (void);
int check_secure (void);
void do_sub (EXARG *eap);
void do_glob (EXARG *eap);
int read_viminfo_sub_string (char_u *line, FILE *fp, int force);
void write_viminfo_sub_string (FILE *fp);
void prepare_tagpreview (void);
void do_help (EXARG *eap);
int help_heuristic (char_u *matched_string, int offset, int wrong_case);
int find_help_tags (char_u *arg, int *num_matches, char_u ***matches);
# 63 "proto.h" 2
# 1 "proto/ex_docmd.pro" 1

void do_exmode (void);
int do_cmdline (char_u *cmdline, char_u *(*getline)(int, void *, int), void *cookie, int flags);
char_u *set_one_cmd_context (char_u *buff);
int expand_filename (EXARG *eap, char_u **cmdlinep, char_u **errormsgp);
void separate_nextcmd (EXARG *eap);
int autowrite (BUF *buf, int forceit);
void autowrite_all (void);
int check_changed (BUF *buf, int checkaw, int mult_win, int forceit, int allbuf);
void dialog_changed (BUF *buf, int checkall);
int can_abandon (BUF *buf, int forceit);
int check_changed_any (int hidden);
int check_fname (void);
int buf_write_all (BUF *buf);
int rem_backslash (char_u *str);
void backslash_halve (char_u *p);
char_u *backslash_halve_save (char_u *p);
void check_arg_idx (WIN *win);
int ends_excmd (int c);
char_u *find_nextcmd (char_u *p);
char_u *check_nextcmd (char_u *p);
int do_source (char_u *fname, int check_other, int is_vimrc);
char *fgets_cr (char *s, int n, FILE *stream);
char_u *getsourceline (int c, void *cookie, int indent);
char_u *get_command_name (int idx);
char_u *get_user_commands (int idx);
char_u *get_user_cmd_flags (int idx);
char_u *get_user_cmd_nargs (int idx);
char_u *get_user_cmd_complete (int idx);
void not_exiting (void);
void do_argfile (EXARG *eap, int argn);
void handle_drop (int filec, char_u **filev, int split);
char_u *eval_vars (char_u *src, int *usedlen, linenr_t *lnump, char_u **errormsg, char_u *srcstart);
char_u *expand_sfile (char_u *arg);
int put_eol (FILE *fd);
void dialog_msg (char_u *buff, char *format, char_u *fname);
# 64 "proto.h" 2
# 1 "proto/ex_getln.pro" 1

char_u *getcmdline (int firstc, long count, int indent);
char_u *getcmdline_prompt (int firstc, char_u *prompt, int attr);
char_u *getexline (int c, void *dummy, int indent);
char_u *getexmodeline (int c, void *dummy, int indent);
int cmdline_overstrike (void);
int cmdline_at_end (void);
int put_on_cmdline (char_u *str, int len, int redraw);
void redrawcmdline (void);
void compute_cmdrow (void);
void gotocmdline (int clr);
char_u *ExpandOne (char_u *str, char_u *orig, int options, int mode);
void tilde_replace (char_u *orig_pat, int num_files, char_u **files);
char_u *addstar (char_u *fname, int len, int context);
int ExpandGeneric (vim_regexp *prog, int *num_file, char_u ***file, char_u *((*func)(int)));
int get_histtype (char_u *name);
void add_to_history (int histype, char_u *new_entry, int in_map);
int get_history_idx (int histype);
char_u *get_history_entry (int histype, int idx);
int clr_history (int histype);
int del_history_entry (int histype, char_u *str);
int del_history_idx (int histype, int idx);
void remove_key_from_history (void);
int get_list_range (char_u **str, int *num1, int *num2);
void do_history (char_u *arg);
void prepare_viminfo_history (int asklen);
int read_viminfo_history (char_u *line, FILE *fp);
void finish_viminfo_history (void);
void write_viminfo_history (FILE *fp);
void cmd_pchar (int c, int offset);
int cmd_gchar (int offset);
# 65 "proto.h" 2
# 1 "proto/fileio.pro" 1

void filemess (BUF *buf, char_u *name, char_u *s, int attr);
int readfile (char_u *fname, char_u *sfname, linenr_t from, linenr_t lines_to_skip, linenr_t lines_to_read, int flags);
int buf_write (BUF *buf, char_u *fname, char_u *sfname, linenr_t start, linenr_t end, int append, int forceit, int reset_changed, int filtering);
char_u *shorten_fname (char_u *full_path, char_u *dir_name);
void shorten_fnames (int force);
char_u *modname (char_u *fname, char_u *ext, int prepend_dot);
char_u *buf_modname (int shortname, char_u *fname, char_u *ext, int prepend_dot);
int vim_fgets (char_u *buf, int size, FILE *fp);
int vim_rename (char_u *from, char_u *to);
void check_timestamps (int focus);
int buf_check_timestamp (BUF *buf, int focus);
void write_lnum_adjust (linenr_t offset);
char_u *vim_tempname (int extra_char);
void do_augroup (char_u *arg);
int check_ei (void);
void do_autocmd (char_u *arg, int forceit);
int do_doautocmd (char_u *arg, int do_msg);
void do_autoall (char_u *arg);
int apply_autocmds (EVENT_T event, char_u *fname, char_u *fname_io, int force, BUF *buf);
int has_cursorhold (void);
char_u *get_augroup_name (int idx);
char_u *set_context_in_autocmd (char_u *arg, int doautocmd);
char_u *get_event_name (int idx);
int match_file_pat (char_u *pattern, char_u *fname, char_u *sfname, char_u *tail, int allow_dirs);
char_u *file_pat_to_reg_pat (char_u *pat, char_u *pat_end, char *allow_dirs, int no_bslash);
# 66 "proto.h" 2
# 1 "proto/getchar.pro" 1

char_u *get_recorded (void);
char_u *get_inserted (void);
int stuff_empty (void);
void flush_buffers (int typeahead);
void ResetRedobuff (void);
void saveRedobuff (void);
void restoreRedobuff (void);
void AppendToRedobuff (char_u *s);
void AppendCharToRedobuff (int c);
void AppendNumberToRedobuff (long n);
void stuffReadbuff (char_u *s);
void stuffcharReadbuff (int c);
void stuffnumReadbuff (long n);
int start_redo (long count, int old_redo);
int start_redo_ins (void);
void stop_redo_ins (void);
int ins_typebuf (char_u *str, int noremap, int offset, int nottyped);
int typebuf_typed (void);
int typebuf_maplen (void);
void del_typebuf (int len, int offset);
int save_typebuf (void);
int openscript (char_u *name);
int using_script (void);
void updatescript (int c);
int vgetc (void);
int safe_vgetc (void);
int vpeekc (void);
int char_avail (void);
void vungetc (int c);
int inchar (char_u *buf, int maxlen, long wait_time);
int do_map (int maptype, char_u *keys, int mode, int abbrev, char_u **ambig);
int get_map_mode (char_u **cmdp, int forceit);
void map_clear (char_u *cmdp, int forceit, int abbr);
char_u *set_context_in_map_cmd (char_u *cmd, char_u *arg, int forceit, int isabbrev, int isunmap, CMDIDX cmdidx);
int ExpandMappings (vim_regexp *prog, int *num_file, char_u ***file);
int check_abbr (int c, char_u *ptr, int col, int mincol);
int makemap (FILE *fd);
int putescstr (FILE *fd, char_u *str, int set);
void check_map_keycodes (void);
char_u *check_map (char_u *keys, int mode, int exact);
void init_mappings (void);
# 67 "proto.h" 2



# 1 "proto/main.pro" 1

int process_env (char_u *env, int is_viminit);
void getout (int r);
int toF_TyA (int c);
int fkmap (int c);
void conv_to_pvim (void);
void conv_to_pstd (void);
char_u *lrswap (char_u *ibuf);
char_u *lrFswap (char_u *cmdbuf, int len);
char_u *lrF_sub (char_u *ibuf);
int cmdl_fkmap (int c);
int F_isalpha (int c);
int F_isdigit (int c);
int F_ischar (int c);
void farsi_fkey (int c);
# 71 "proto.h" 2
# 1 "proto/mark.pro" 1

int setmark (int c);
void setpcmark (void);
void checkpcmark (void);
FPOS *movemark (int count);
FPOS *getmark (int c, int changefile);
void fmarks_check_names (BUF *buf);
int check_mark (FPOS *pos);
void clrallmarks (BUF *buf);
char_u *fm_getname (struct filemark *fmark, int lead_len);
void do_marks (char_u *arg);
void do_jumps (void);
void mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
void set_last_cursor (WIN *win);
int read_viminfo_filemark (char_u *line, FILE *fp, int force);
void write_viminfo_filemarks (FILE *fp);
int removable (char_u *name);
int write_viminfo_marks (FILE *fp_out);
void copy_viminfo_marks (char_u *line, FILE *fp_in, FILE *fp_out, int count, int eof);
# 72 "proto.h" 2

void



smsg (char_u *, ...);
void



smsg_attr (int, char_u *, ...);

# 1 "proto/memfile.pro" 1

MEMFILE *mf_open (char_u *fname, int trunc_file);
int mf_open_file (MEMFILE *mfp, char_u *fname);
void mf_close (MEMFILE *mfp, int del_file);
void mf_close_file (BUF *buf, int getlines);
BHDR *mf_new (MEMFILE *mfp, int negative, int page_count);
BHDR *mf_get (MEMFILE *mfp, blocknr_t nr, int page_count);
void mf_put (MEMFILE *mfp, BHDR *hp, int dirty, int infile);
void mf_free (MEMFILE *mfp, BHDR *hp);
int mf_sync (MEMFILE *mfp, int flags);
int mf_release_all (void);
blocknr_t mf_trans_del (MEMFILE *mfp, blocknr_t old_nr);
void mf_set_ffname (MEMFILE *mfp);
void mf_fullname (MEMFILE *mfp);
int mf_need_trans (MEMFILE *mfp);
# 85 "proto.h" 2
# 1 "proto/memline.pro" 1

int ml_open (void);
void ml_setname (void);
void ml_open_files (void);
void ml_open_file (BUF *buf);
void check_need_swap (int newfile);
void ml_close (BUF *buf, int del_file);
void ml_close_all (int del_file);
void ml_close_notmod (void);
void ml_timestamp (BUF *buf);
void ml_recover (void);
int recover_names (char_u **fname, int list, int nr);
void ml_sync_all (int check_file, int check_char);
void ml_preserve (BUF *buf, int message);
char_u *ml_get (linenr_t lnum);
char_u *ml_get_pos (FPOS *pos);
char_u *ml_get_curline (void);
char_u *ml_get_cursor (void);
char_u *ml_get_buf (BUF *buf, linenr_t lnum, int will_change);
int ml_line_alloced (void);
int ml_append (linenr_t lnum, char_u *line, colnr_t len, int newfile);
int ml_replace (linenr_t lnum, char_u *line, int copy);
int ml_delete (linenr_t lnum, int message);
void ml_setmarked (linenr_t lnum);
linenr_t ml_firstmarked (void);
void ml_clearmarked (void);
char_u *get_file_in_dir (char_u *fname, char_u *dname);
void ml_setdirty (BUF *buf, int flag);
long ml_find_line_or_offset (BUF *buf, linenr_t line, long *offp);
void goto_byte (long cnt);
# 86 "proto.h" 2

# 1 "proto/menu.pro" 1

void do_menu (EXARG *eap);
char_u *set_context_in_menu_cmd (char_u *cmd, char_u *arg, int forceit);
char_u *get_menu_name (int idx);
char_u *get_menu_names (int idx);
char_u *menu_name_skip (char_u *name);
int get_menu_index (VimMenu *menu, int state);
int menubar_menu (char_u *name);
int popup_menu (char_u *name);
int toolbar_menu (char_u *name);
void gui_create_initial_menus (VimMenu *menu, VimMenu *parent);
void gui_update_menus (int modes);
int gui_is_menu_shortcut (int key);
void gui_show_popupmenu (void);
void gui_mch_toggle_tearoffs (int enable);
void execute_menu (char_u *path_name);
int is_menu_separator (char_u *name);
# 88 "proto.h" 2

# 1 "proto/message.pro" 1

int msg (char_u *s);
int msg_attr (char_u *s, int attr);
char_u *msg_strtrunc (char_u *s);
int emsg (char_u *s);
int emsg2 (char_u *s, char_u *a1);
int emsgn (char_u *s, long n);
char_u *msg_trunc_attr (char_u *s, int force, int attr);
char_u *msg_may_trunc (int force, char_u *s);
void ex_messages (void);
void wait_return (int redraw);
void msg_start (void);
void msg_starthere (void);
void msg_putchar (int c);
void msg_putchar_attr (int c, int attr);
void msg_outnum (long n);
void msg_home_replace (char_u *fname);
void msg_home_replace_hl (char_u *fname);
int msg_outtrans (char_u *str);
int msg_outtrans_attr (char_u *str, int attr);
int msg_outtrans_len (char_u *str, int len);
int msg_outtrans_len_attr (char_u *str, int len, int attr);
void msg_make (char_u *arg);
int msg_outtrans_special (char_u *str, int from);
char_u *str2special (char_u **sp, int from);
void str2specialbuf (char_u *sp, char_u *buf, int len);
void msg_prt_line (char_u *s);
void msg_puts (char_u *s);
void msg_puts_title (char_u *s);
void msg_puts_long (char_u *longstr);
void msg_puts_long_attr (char_u *longstr, int attr);
void msg_puts_long_len_attr (char_u *longstr, int len, int attr);
void msg_puts_attr (char_u *s, int attr);
void msg_moremsg (int full);
void repeat_message (void);
void msg_clr_eos (void);
void msg_clr_cmdline (void);
int msg_end (void);
void msg_check (void);
void give_warning (char_u *message, int hl);
void msg_advance (int col);
int do_dialog (int type, char_u *title, char_u *message, char_u *buttons, int dfltbutton);
void display_confirm_msg (void);
int vim_dialog_yesno (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnocancel (int type, char_u *title, char_u *message, int dflt);
int vim_dialog_yesnoallcancel (int type, char_u *title, char_u *message, int dflt);
char_u *do_browse (int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter, BUF *buf);
# 90 "proto.h" 2
# 1 "proto/misc1.pro" 1

int get_indent (void);
int get_indent_lnum (linenr_t lnum);
void set_indent (int size, int del_first);
int open_line (int dir, int redraw, int del_spaces, int old_indent);
int get_leader_len (char_u *line, char_u **flags, int backward);
int plines_check (linenr_t p);
int plines (linenr_t p);
int plines_win (WIN *wp, linenr_t p);
int plines_win_col (WIN *wp, linenr_t p, long column);
int plines_m (linenr_t first, linenr_t last);
int plines_m_win (WIN *wp, linenr_t first, linenr_t last);
void ins_char (int c);
void ins_str (char_u *s);
int del_char (int fixpos);
int del_chars (long count, int fixpos);
int truncate_line (int fixpos);
void del_lines (long nlines, int dowindow, int undo);
int gchar_pos (FPOS *pos);
int gchar_cursor (void);
void pchar_cursor (int c);
int inindent (int extra);
char_u *skip_to_option_part (char_u *p);
char *plural (long n);
void changed (void);
void unchanged (BUF *buf, int ff);
void check_status (BUF *buf);
void change_warning (int col);
int ask_yesno (char_u *str, int direct);
int get_keystroke (void);
int get_number (int colon);
void msgmore (long n);
void beep_flush (void);
void vim_beep (void);
void init_homedir (void);
void expand_env (char_u *src, char_u *dst, int dstlen);
char_u *expand_env_save (char_u *src);
void vim_setenv (char_u *name, char_u *val);
void home_replace (BUF *buf, char_u *src, char_u *dst, int dstlen, int one);
char_u *home_replace_save (BUF *buf, char_u *src);
int fullpathcmp (char_u *s1, char_u *s2, int checkname);
char_u *gettail (char_u *fname);
char_u *getnextcomp (char_u *fname);
char_u *get_past_head (char_u *path);
int vim_ispathsep (int c);
int vim_fnamecmp (char_u *x, char_u *y);
int vim_fnamencmp (char_u *x, char_u *y, size_t len);
char_u *concat_fnames (char_u *fname1, char_u *fname2, int sep);
void add_pathsep (char_u *p);
char_u *FullName_save (char_u *fname, int force);
FPOS *find_start_comment (int ind_maxcomment);
int cin_islabel (int ind_maxcomment);
int cin_iscase (char_u *s);
int cin_isscopedecl (char_u *s);
int get_c_indent (void);
int get_lisp_indent (void);
void preserve_exit (void);
int vim_fexists (char_u *fname);
void line_breakcheck (void);
int expand_wildcards (int num_pat, char_u **pat, int *num_file, char_u ***file, int flags);
int match_suffix (char_u *fname);
void addfile (struct growarray *gap, char_u *f, int flags);
char_u *get_cmd_output (char_u *cmd, int flags);
void FreeWild (int num, char_u **file);
int goto_im (void);
# 91 "proto.h" 2
# 1 "proto/misc2.pro" 1

int coladvance (colnr_t wcol);
int inc_cursor (void);
int inc (FPOS *lp);
int incl (FPOS *lp);
int dec_cursor (void);
int dec (FPOS *lp);
int decl (FPOS *lp);
void check_cursor_lnum (void);
void check_cursor_col (void);
void adjust_cursor (void);
void adjust_cursor_col (void);
int leftcol_changed (void);
void vim_mem_profile_dump (void);
char_u *alloc (unsigned size);
char_u *alloc_clear (unsigned size);
char_u *alloc_check (unsigned size);
char_u *lalloc_clear (long_u size, int message);
char_u *lalloc (long_u size, int message);
void *mem_realloc (void *ptr, size_t size);
void do_outofmem_msg (void);
char_u *vim_strsave (char_u *string);
char_u *vim_strnsave (char_u *string, int len);
char_u *vim_strsave_escaped (char_u *string, char_u *esc_chars);
char_u *vim_strsave_up (char_u *string);
char_u *vim_strnsave_up (char_u *string, int len);
void copy_spaces (char_u *ptr, size_t count);
void copy_chars (char_u *ptr, size_t count, int c);
void del_trailing_spaces (char_u *ptr);
void vim_strncpy (char_u *to, char_u *from, int len);
int copy_option_part (char_u **option, char_u *buf, int maxlen, char *sep_chars);
void vim_free (void *x);
int vim_stricmp (char *s1, char *s2);
int vim_strnicmp (char *s1, char *s2, size_t len);
char_u *vim_strchr (char_u *string, int n);
char_u *vim_strrchr (char_u *string, int n);
int vim_isspace (int x);
void ga_clear (struct growarray *gap);
void ga_clear_strings (struct growarray *gap);
void ga_init (struct growarray *gap);
void ga_init2 (struct growarray *gap, int itemsize, int growsize);
int ga_grow (struct growarray *gap, int n);
void ga_concat (struct growarray *gap, char_u *s);
void ga_append (struct growarray *gap, int c);
int name_to_mod_mask (int c);
int simplify_key (int key, int *modifiers);
char_u *get_special_key_name (int c, int modifiers);
int trans_special (char_u **srcp, char_u *dst, int keycode);
int find_special_key (char_u **srcp, int *modp, int keycode);
int find_special_key_in_table (int c);
int get_special_key_code (char_u *name);
char_u *get_key_name (int i);
int get_mouse_button (int code, int *is_click, int *is_drag);
int get_pseudo_mouse_code (int button, int is_click, int is_drag);
int get_fileformat (BUF *buf);
void set_fileformat (int t);
int default_fileformat (void);
int call_shell (char_u *cmd, int opt);
int get_real_state (void);
int vim_chdirfile (char_u *fname);
char_u *parse_guicursor (void);
int get_cursor_idx (void);
int decrypt_byte (void);
int update_keys (int c);
void crypt_init_keys (char_u *passwd);
char_u *get_crypt_key (int store);
int get_user_name (char_u *buf, int len);
# 92 "proto.h" 2






# 1 "proto/normal.pro" 1

void normal_cmd (OPARG *oap, int toplevel);
void do_pending_operator (CMDARG *cap, char_u *searchbuff, int *command_busy, int old_col, int gui_yank, int dont_adjust_op_end);
int do_mouse (OPARG *oap, int c, int dir, long count, int fix_indent);
void check_visual_highlight (void);
void end_visual_mode (void);
int find_ident_under_cursor (char_u **string, int find_type);
void clear_showcmd (void);
int add_to_showcmd (int c);
void add_to_showcmd_c (int c);
void push_showcmd (void);
void pop_showcmd (void);
void do_check_scrollbind (int check);
void check_scrollbind (linenr_t topline_diff, long leftcol_diff);
void scroll_redraw (int up, long count);
void start_selection (void);
void may_start_select (int c);
# 99 "proto.h" 2
# 1 "proto/ops.pro" 1

int get_op_type (int char1, int char2);
int op_on_lines (int op);
int get_op_char (int optype);
int get_extra_op_char (int optype);
void op_shift (OPARG *oap, int curs_top, int amount);
void shift_line (int left, int round, int amount);
void op_reindent (OPARG *oap, int (*how)(void));
int get_expr_register (void);
void set_expr_line (char_u *new_line);
int valid_yank_reg (int regname, int writing);
int yank_register_mline (int regname);
int do_record (int c);
int do_execreg (int regname, int colon, int addcr);
int insert_reg (int regname, int literally);
int cmdline_paste (int regname, int literally);
int op_delete (OPARG *oap);
int op_replace (OPARG *oap, int c);
void op_tilde (OPARG *oap);
void swapchar (int op_type, FPOS *pos);
void op_insert (OPARG *oap, long count1);
int op_change (OPARG *oap);
void init_yank (void);
int op_yank (OPARG *oap, int deleting, int mess);
void do_put (int regname, int dir, long count, int flags);
int get_register_name (int num);
void do_dis (char_u *arg);
void dis_msg (char_u *p, int skip_esc);
void do_do_join (long count, int insert_space, int redraw);
int do_join (int insert_space, int redraw);
void op_format (OPARG *oap);
int do_addsub (int command, linenr_t Prenum1);
int read_viminfo_register (char_u *line, FILE *fp, int force);
void write_viminfo_registers (FILE *fp);
void clip_free_selection (void);
void clip_get_selection (void);
void clip_yank_selection (int type, char_u *str, long len);
int clip_convert_selection (char_u **str, long_u *len);
char_u *get_reg_contents (int regname);
void write_reg_contents (int name, char_u *str);
void clear_oparg (OPARG *oap);
# 100 "proto.h" 2
# 1 "proto/option.pro" 1

void set_init_1 (void);
void set_string_default (char *name, char_u *val);
void set_number_default (char *name, long val);
void set_init_2 (void);
void set_init_3 (void);
void init_gui_options (void);
void set_title_defaults (void);
int do_set (char_u *arg, int modeline);
void set_options_bin (int oldval, int newval);
int get_viminfo_parameter (int type);
char_u *find_viminfo_parameter (int type);
void check_options (void);
void check_buf_options (BUF *buf);
void free_string_option (char_u *p);
void set_term_option_alloced (char_u **p);
void set_string_option_direct (char_u *name, int opt_idx, char_u *val, int dofree);
char_u *check_stl_option (char_u *s);
int get_option_value (char_u *name, long *numval, char_u **stringval);
void set_option_value (char_u *name, long number, char_u *string);
char_u *get_term_code (char_u *tname);
char_u *get_highlight_default (void);
int makeset (FILE *fd);
void clear_termoptions (void);
void set_term_defaults (void);
void comp_col (void);
void win_copy_options (WIN *wp_from, WIN *wp_to);
void buf_copy_options (BUF *bp_from, BUF *bp_to, int flags);
void set_context_in_set_cmd (char_u *arg);
int ExpandSettings (vim_regexp *prog, int *num_file, char_u ***file);
int ExpandOldSetting (int *num_file, char_u ***file);
int has_format_option (int x);
int shortmess (int x);
void vimrc_found (void);
void change_compatible (int on);
int option_was_set (char_u *name);
int can_bs (int what);
# 101 "proto.h" 2
# 1 "proto/quickfix.pro" 1

int qf_init (char_u *efile, char_u *errorformat);
void qf_jump (int dir, int errornr, int forceit);
void qf_list (char_u *arg, int all);
void qf_older (int count);
void qf_newer (int count);
void qf_mark_adjust (linenr_t line1, linenr_t line2, long amount, long amount_after);
# 102 "proto.h" 2
# 1 "proto/regexp.pro" 1

char_u *skip_regexp (char_u *p, int dirc, int magic);
vim_regexp *vim_regcomp (char_u *expr, int magic);
int vim_regcomp_had_eol (void);
int vim_regexec (vim_regexp *prog, char_u *string, int at_bol);
char_u *regtilde (char_u *source, int magic);
void vim_regnewptr (vim_regexp *prog, char_u *old_ptr, char_u *new_ptr);
int vim_regsub (vim_regexp *prog, char_u *source, char_u *dest, int copy, int magic);
# 103 "proto.h" 2
# 1 "proto/screen.pro" 1

void update_screenline (void);
void redraw_later (int type);
void redraw_all_later (int type);
void redraw_curbuf_later (int type);
void update_curbuf (int type);
void update_screen (int type);
void updateWindow (WIN *wp);
void update_other_win (void);
void status_redraw_all (void);
void redraw_statuslines (void);
void win_redr_status_matches (int num_matches, char_u **matches, int match);
void win_redr_status (WIN *wp);
int build_stl_str (WIN *wp, char_u *out, char_u *fmt, int fillchar, int maxlen);
void screen_putchar (int c, int row, int col, int attr);
void screen_puts (char_u *text, int row, int col, int attr);
void screen_start (void);
void screen_down (void);
void screen_stop_highlight (void);
void reset_cterm_colors (void);
void screen_fill (int start_row, int end_row, int start_col, int end_col, int c1, int c2, int attr);
void screenalloc (int clear);
void screenclear (void);
void update_topline_redraw (void);
void update_topline (void);
void update_curswant (void);
void windgoto (int row, int col);
void setcursor (void);
void scroll_cursor_top (int min_scroll, int always);
void scroll_cursor_bot (int min_scroll, int set_topbot);
void scroll_cursor_halfway (int atend);
void cursor_correct (void);
void changed_cline_bef_curs (void);
void changed_line_abv_curs (void);
void set_topline (WIN *wp, linenr_t lnum);
void validate_botline (void);
void invalidate_botline (void);
void invalidate_botline_win (WIN *wp);
void approximate_botline (void);
int botline_approximated (void);
int cursor_valid (void);
void validate_cursor (void);
void validate_cline_row (void);
int may_validate_crow (void);
void validate_virtcol (void);
void validate_cheight (void);
void validate_cursor_col (void);
void curs_columns (int scroll);
void scrolldown (long line_count);
void scrollup (long line_count);
void scrolldown_clamp (void);
void scrollup_clamp (void);
int win_ins_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
int win_del_lines (WIN *wp, int row, int line_count, int invalid, int mayclear);
void win_rest_invalid (WIN *wp);
int screen_del_lines (int off, int row, int line_count, int end, int force);
int showmode (void);
void unshowmode (int force);
void showruler (int always);
void check_for_delay (int check_msg_scroll);
int screen_valid (int clear);
int jump_to_mouse (int flags, int *inclusive);
int get_fpos_of_mouse (FPOS *mpos, WIN **mwin);
int redrawing (void);
int messaging (void);
int onepage (int dir, long count);
void halfpage (int flag, linenr_t Prenum);
void do_intro (void);
# 104 "proto.h" 2
# 1 "proto/search.pro" 1

vim_regexp *search_regcomp (char_u *pat, int pat_save, int pat_use, int options);
char_u *get_search_pat (void);
void save_search_patterns (void);
void restore_search_patterns (void);
void set_reg_ic (char_u *pat);
char_u *last_search_pat (void);
void set_last_search_pat (char_u *s, int idx, int magic, int setlast);
vim_regexp *last_pat_prog (void);
int searchit (BUF *buf, FPOS *pos, int dir, char_u *str, long count, int options, int pat_use);
int do_search (OPARG *oap, int dirc, char_u *str, long count, int options);
int search_for_exact_line (BUF *buf, FPOS *pos, int dir, char_u *pat);
int searchc (int c, int dir, int type, long count);
FPOS *findmatch (OPARG *oap, int initc);
FPOS *findmatchlimit (OPARG *oap, int initc, int flags, int maxtravel);
void showmatch (void);
int findsent (int dir, long count);
int findpar (OPARG *oap, int dir, long count, int what, int both);
int startPS (linenr_t lnum, int para, int both);
int fwd_word (long count, int type, int eol);
int bck_word (long count, int type, int stop);
int end_word (long count, int type, int stop, int empty);
int bckend_word (long count, int type, int eol);
int current_word (OPARG *oap, long count, int include, int type);
int current_sent (OPARG *oap, long count, int include);
int current_block (OPARG *oap, long count, int include, int what, int other);
int current_par (OPARG *oap, long count, int include, int type);
int linewhite (linenr_t lnum);
void find_pattern_in_path (char_u *ptr, int dir, int len, int whole, int skip_comments, int type, long count, int action, linenr_t start_lnum, linenr_t end_lnum);
int read_viminfo_search_pattern (char_u *line, FILE *fp, int force);
void write_viminfo_search_pattern (FILE *fp);
# 105 "proto.h" 2
# 1 "proto/syntax.pro" 1

void syntax_start (WIN *wp, linenr_t lnum);
void syn_changed (linenr_t lnum);
int syntax_check_changed (linenr_t lnum);
int get_syntax_attr (colnr_t col, char_u *line);
void syntax_clear (BUF *buf);
void do_syntax (EXARG *eap, char_u **cmdlinep);
int syntax_present (BUF *buf);
void set_context_in_syntax_cmd (char_u *arg);
char_u *get_syntax_name (int idx);
int syn_get_id (long line, long col, int trans);
void init_highlight (int both);
void do_highlight (char_u *line, int forceit, int init);
void set_normal_colors (void);
void hl_set_font_name (char_u *font_name);
void hl_set_bg_color_name (char_u *name);
void hl_set_fg_color_name (char_u *name);
struct attr_entry *syn_gui_attr2entry (int attr);
struct attr_entry *syn_term_attr2entry (int attr);
struct attr_entry *syn_cterm_attr2entry (int attr);
char_u *highlight_has_attr (int id, int flag, int modec);
char_u *highlight_color (int id, char_u *what, int modec);
int syn_name2id (char_u *name);
int highlight_exists (char_u *name);
int syn_check_group (char_u *pp, int len);
int syn_id2attr (int hl_id);
int syn_id2colors (int hl_id, int *fgp, int *bgp);
int syn_get_final_id (int hl_id);
void highlight_gui_started (void);
int highlight_changed (void);
void set_context_in_highlight_cmd (char_u *arg);
char_u *get_highlight_name (int idx);
void free_highlight_fonts (void);
# 106 "proto.h" 2
# 1 "proto/tag.pro" 1

int do_tag (char_u *tag, int type, int count, int forceit, int verbose);
void tag_freematch (void);
void do_tags (void);
int find_tags (char_u *pat, int *num_matches, char_u ***matchesp, int flags, int mincount);
void simplify_filename (char_u *filename);
int expand_tags (int tagnames, char_u *pat, int *num_file, char_u ***file);
# 107 "proto.h" 2
# 1 "proto/term.pro" 1

int set_termname (char_u *term);
void set_mouse_termcode (int n, char_u *s);
void del_mouse_termcode (int n);
void getlinecol (void);
int add_termcap_entry (char_u *name, int force);
int term_is_8bit (char_u *name);
int term_is_gui (char_u *name);
char_u *tltoa (unsigned long i);
void termcapinit (char_u *name);
void out_flush (void) __attribute((crest_skip));
void out_trash (void);
void out_char (unsigned c);
void out_str_nf (char_u *s);
void out_str (char_u *s);
void term_windgoto (int row, int col);
void term_cursor_right (int i);
void term_append_lines (int line_count);
void term_delete_lines (int line_count);
void term_set_winpos (int x, int y);
void term_set_winsize (int width, int height);
void term_fg_color (int n);
void term_bg_color (int n);
void term_settitle (char_u *title);
void ttest (int pairs);
void add_long_to_buf (long_u val, char_u *dst);
int get_long_from_buf (char_u *buf, long_u *val);
void check_winsize (void);
void set_winsize (int width, int height, int mustset);
void settmode (int tmode);
void starttermcap (void);
void stoptermcap (void);
int swapping_screen (void);
void setmouse (void);
int mouse_has (int c);
int mouse_model_popup (void);
void scroll_start (void);
void cursor_on (void);
void cursor_off (void);
void scroll_region_set (WIN *wp, int off);
void scroll_region_reset (void);
void clear_termcodes (void);
void add_termcode (char_u *name, char_u *string, int use_8bit);
char_u *find_termcode (char_u *name);
char_u *get_termcode (int i);
void del_termcode (char_u *name);
int check_termcode (int max_offset, char_u *buf, int buflen);
char_u *replace_termcodes (char_u *from, char_u **bufp, int from_part, int do_lt);
int find_term_bykeys (char_u *src);
void show_termcodes (void);
int show_one_termcode (char_u *name, char_u *code, int printit);
char_u *translate_mapping (char_u *str, int expmap);
void update_tcap (int attr);
# 108 "proto.h" 2



# 1 "proto/ui.pro" 1

void ui_write (char_u *s, int len) __attribute((crest_skip));
void ui_inchar_undo (char_u *s, int len);
int ui_inchar (char_u *buf, int maxlen, long wtime);
int ui_char_avail (void);
void ui_delay (long msec, int ignoreinput);
void ui_suspend (void);
void suspend_shell (void);
int ui_get_winsize (void);
void ui_set_winsize (void);
void ui_breakcheck (void);
void clip_init (int can_use);
void clip_update_selection (void);
void clip_own_selection (void);
void clip_lose_selection (void);
void clip_copy_selection (void);
void clip_auto_select (void);
int clip_isautosel (void);
void clip_start_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_process_selection (int button, int x, int y, int repeated_click, int_u modifiers);
void clip_redraw_selection (int x, int y, int w, int h);
void clip_may_redraw_selection (int row, int col);
void clip_clear_selection (void);
void clip_may_clear_selection (int row1, int row2);
void clip_scroll_selection (int rows);
int clip_gen_own_selection (void);
void clip_gen_lose_selection (void);
void clip_gen_set_selection (void);
void clip_gen_request_selection (void);
int vim_is_input_buf_full (void);
int vim_is_input_buf_empty (void);
int vim_free_in_input_buf (void);
int vim_used_in_input_buf (void);
void add_to_input_buf (char_u *s, int len);
void push_raw_key (char_u *s, int len);
void trash_input_buf (void);
int read_from_input_buf (char_u *buf, long maxlen);
void fill_input_buf (int exit_on_error);
void read_error_exit (void);
void ui_cursor_shape (void);
int check_col (int col);
int check_row (int row);
void open_app_context (void);
void x11_setup_atoms (int *dpy);
void clip_x11_request_selection (int myShell, int *dpy);
void clip_x11_lose_selection (int myShell);
int clip_x11_own_selection (int myShell);
void clip_x11_set_selection (void);
# 112 "proto.h" 2
# 1 "proto/undo.pro" 1

int u_save_cursor (void);
int u_save (linenr_t top, linenr_t bot);
int u_savesub (linenr_t lnum);
int u_inssub (linenr_t lnum);
int u_savedel (linenr_t lnum, long nlines);
void u_undo (int count);
void u_redo (int count);
void u_sync (void);
void u_unchanged (BUF *buf);
void u_clearall (BUF *buf);
void u_saveline (linenr_t lnum);
void u_clearline (void);
void u_undoline (void);
void u_blockfree (BUF *buf);
int buf_changed (BUF *buf);
int curbuf_changed (void);
# 113 "proto.h" 2
# 1 "proto/version.pro" 1

void make_version (void);
int highest_patch (void);
void do_version (char_u *arg);
void list_version (void);
# 114 "proto.h" 2
# 1 "proto/window.pro" 1

void do_window (int nchar, long Prenum);
int win_split (int new_height, int redraw, int req_room);
int win_valid (WIN *win);
int win_count (void);
int make_windows (int count);
void win_move_after (WIN *win1, WIN *win2);
void win_equal (WIN *next_curwin, int redraw);
void close_windows (BUF *buf);
void close_window (WIN *win, int free_buf);
void close_others (int message, int forceit);
void win_init (WIN *wp);
WIN *win_goto_nr (int winnr);
void win_enter (WIN *wp, int undo_sync);
WIN *buf_jump_open_win (BUF *buf);
WIN *win_alloc (WIN *after);
void win_free (WIN *wp);
int win_alloc_lsize (WIN *wp);
void win_free_lsize (WIN *wp);
void screen_new_rows (void);
void win_setheight (int height);
void win_setminheight (void);
void win_drag_status_line (int offset);
void win_comp_scroll (WIN *wp);
void command_height (long old_p_ch);
void last_status (void);
char_u *file_name_at_cursor (int options, long count);
char_u *get_file_name_in_path (char_u *line, int col, int options, long count);
char_u *find_file_in_path (char_u *ptr, int len, int options, long count);
int min_rows (void);
int only_one_window (void);
void check_lnums (int do_curwin);
# 115 "proto.h" 2
# 1023 "vim.h" 2
# 15 "ops.c" 2
# 41 "ops.c"
static struct yankreg
{
    char_u **y_array;
    linenr_t y_size;
    char_u y_type;
} y_regs[37];

static struct yankreg *y_current;
static int y_append;
static struct yankreg *y_previous = 
# 50 "ops.c" 3 4
                                   ((void *)0)
# 50 "ops.c"
                                       ;





struct block_def
{
    int startspaces;
    int endspaces;
    int textlen;
    char_u *textstart;
    colnr_t textcol;
    colnr_t start_vcol;
    colnr_t end_vcol;

    int is_short;
    int is_MAX;
    int is_EOL;
    int is_oneChar;
    int pre_whitesp;
    int pre_whitesp_c;
    colnr_t end_char_vcols;

    colnr_t start_char_vcols;
};


static void shift_block (OPARG *oap, int amount);
static void block_insert (OPARG *oap, char_u *s, int b_insert, struct block_def*bdp);


static char_u *get_expr_line (void);

static void get_yank_register (int regname, int writing);
static int stuff_yank (int, char_u *);
static int put_in_typebuf (char_u *s, int colon);
static void stuffescaped (char_u *arg);
static int get_spec_reg (int regname, char_u **argp, int *allocated, int errmsg);
static void cmdline_paste_str (char_u *s, int literally);
static void free_yank (long);
static void free_yank_all (void);
static void block_prep (OPARG *oap, struct block_def *, linenr_t, int);

static void str_to_reg (struct yankreg *y_ptr, int type, char_u *str, long len);


static int same_leader (int, char_u *, int, char_u *);
static int fmt_check_par (linenr_t, int *, char_u **);
# 107 "ops.c"
static char opchars[][3] =
{
    {'\000', '\000', 0},
    {'d', '\000', 0},
    {'y', '\000', 0},
    {'c', '\000', 0},
    {'<', '\000', 1},
    {'>', '\000', 1},
    {'!', '\000', 1},
    {'g', '~', 0},
    {'=', '\000', 1},
    {'g', 'q', 1},
    {':', '\000', 1},
    {'g', 'U', 0},
    {'g', 'u', 0},
    {'J', '\000', 1},
    {'g', 'J', 1},
    {'g', '?', 0},
    {'r', '\000', 0},
    {'I', '\000', 0},
    {'A', '\000', 0}
};





    int
get_op_type(char1, char2)
    int char1;
    int char2;
{
    int i;

    if (char1 == 'r')
 return 16;
    if (char1 == '~')
 return 7;
    for (i = 0; ; ++i)
 if (opchars[i][0] == char1 && opchars[i][1] == char2)
     break;
    return i;
}




    int
op_on_lines(op)
    int op;
{
    return opchars[op][2];
}





    int
get_op_char(optype)
    int optype;
{
    return opchars[optype][0];
}




    int
get_extra_op_char(optype)
    int optype;
{
    return opchars[optype][1];
}




    void
op_shift(oap, curs_top, amount)
    OPARG *oap;
    int curs_top;
    int amount;
{
    long i;
    int first_char;
    int block_col = 0;

    if (u_save((linenr_t)(curwin->w_cursor.lnum - 1),
   (linenr_t)(curwin->w_cursor.lnum + oap->line_count)) == 0)
 return;



    syn_changed(curwin->w_cursor.lnum);


    if (oap->block_mode)
 block_col = curwin->w_cursor.col;

    for (i = oap->line_count; --i >= 0; )
    {
 first_char = *ml_get_curline();
 if (first_char == '\000')
     curwin->w_cursor.col = 0;

 else if (oap->block_mode)
     shift_block(oap, amount);

 else



     if (first_char != '#' || (


    (!curbuf->b_p_si || curbuf->b_p_cin) &&





    (!curbuf->b_p_cin || !in_cinkeys('#', ' ', 1))

     ))

 {
     shift_line(oap->op_type == 4, p_sr, amount);
 }
 ++curwin->w_cursor.lnum;
    }

    if (oap->block_mode)
    {
 curwin->w_cursor.lnum -= oap->line_count;
 curwin->w_cursor.col = block_col;
    }
    else if (curs_top)
    {
 curwin->w_cursor.lnum -= oap->line_count;
 beginline(2 | 4);
    }
    else
 --curwin->w_cursor.lnum;
    update_topline();
    update_screen(40);

    if (oap->line_count > p_report)
       smsg((char_u *)"%ld line%s %ced %d time%s", oap->line_count,
       plural(oap->line_count), (oap->op_type == 5) ? '>' : '<',
    amount, plural((long)amount));




    curbuf->b_op_start = oap->start;
    curbuf->b_op_end = oap->end;
}





    void
shift_line(left, round, amount)
    int left;
    int round;
    int amount;
{
    int count;
    int i, j;
    int p_sw = (int)curbuf->b_p_sw;

    count = get_indent();

    if (round)
    {
 i = count / p_sw;
 j = count % p_sw;
 if (j && left)
     --amount;
 if (left)
 {
     i -= amount;
     if (i < 0)
  i = 0;
 }
 else
     i += amount;
 count = i * p_sw;
    }
    else
    {
 if (left)
 {
     count -= p_sw * amount;
     if (count < 0)
  count = 0;
 }
 else
     count += p_sw * amount;
    }


    if (State == (0x300 + 0x10))
 change_indent(1, count, 0, '\000');
    else
 set_indent(count, 1);
}






    static void
shift_block(oap, amount)
    OPARG *oap;
    int amount;
{
    int left = (oap->op_type == 4);
    int oldstate = State;
    int total, split;
    char_u *newp, *oldp, *midp, *ptr;
    int oldcol = curwin->w_cursor.col;
    int p_sw = (int)curbuf->b_p_sw;
    int p_ts = (int)curbuf->b_p_ts;
    struct block_def bd;
    int internal = 0;
    int incr;
    colnr_t vcol, col = 0, ws_vcol;
    int i = 0, j = 0;







    State = 0x10;
    block_prep(oap, &bd, curwin->w_cursor.lnum, 1);
    if (bd.is_short)
 return;


    total = amount * p_sw;
    oldp = ml_get_curline();

    if (!left)
    {






 total += bd.pre_whitesp;
 ws_vcol = bd.start_vcol - bd.pre_whitesp;
 if (bd.startspaces)
     ++bd.textstart;
 for ( ; ((*bd.textstart) == ' ' || (*bd.textstart) == '\t'); bd.textstart++)
 {
     incr = lbr_chartabsize(bd.textstart, (colnr_t)(bd.start_vcol));
     total += incr;
     bd.start_vcol += incr;
 }


 if (!curbuf->b_p_et)
     i = ((ws_vcol % p_ts) + total) / p_ts;
 if (i)
     j = ((ws_vcol % p_ts) + total) % p_ts;
 else
     j = total;

 bd.textcol -= bd.pre_whitesp_c - (bd.startspaces != 0);
 newp = alloc_check(bd.textcol + i + j
           + (unsigned)strlen((char *)(bd.textstart)) + 1);
 if (newp == 
# 385 "ops.c" 3 4
            ((void *)0)
# 385 "ops.c"
                )
     return;
 memset((newp), ('\000'), ((size_t)(bd.textcol + i + j + strlen((char *)(bd.textstart)) + 1)))
                                   ;
 mch_memmove(newp, oldp, (size_t)bd.textcol);
 copy_chars(newp + bd.textcol, (size_t)i, '\011');
 copy_spaces(newp + bd.textcol + i, (size_t)j);

 mch_memmove(newp + bd.textcol + i + j,
         bd.textstart, (size_t)strlen((char *)(bd.textstart)) + 1);
    }
    else
    {
 vcol = oap->start_vcol;

 for (midp = oldp + bd.textcol;
       vcol < (oap->start_vcol + total) && ((*midp) == ' ' || (*midp) == '\t');
       ++midp)
 {
     incr = lbr_chartabsize(midp, (colnr_t)vcol);
     vcol += incr;
 }

 if (vcol > (oap->start_vcol + total))
 {

     internal = vcol - (oap->start_vcol + total);
 }


 split = bd.startspaces + internal;
 if (split > 0)
 {
     if (!curbuf->b_p_et)
     {
  for (ptr = oldp, col = 0; ptr < oldp+bd.textcol; ptr++)
  {
      col += lbr_chartabsize(ptr, (colnr_t)col);
  }


  i = ((col % p_ts) + split) / p_ts;
     }
     if (i)
  j = ((col % p_ts) + split) % p_ts;
     else
  j = split;
 }

 newp = alloc_check(bd.textcol + i + j + (unsigned)strlen((char *)(midp)) + 1);
 if (newp == 
# 435 "ops.c" 3 4
            ((void *)0)
# 435 "ops.c"
                )
     return;
 memset((newp), ('\000'), ((size_t)(bd.textcol + i + j + strlen((char *)(midp)) + 1)));


 mch_memmove(newp, oldp, (size_t)bd.textcol);

 while (((*midp) == ' ' || (*midp) == '\t'))
 {
     if (*midp == '\011')
  i++;
     else
  j++;
     midp++;
 }

 if (j / p_ts && !curbuf->b_p_et)
 {
     i++;
     j -= p_ts;
 }
 copy_chars(newp + bd.textcol, (size_t)i, '\011');
 copy_spaces(newp + bd.textcol + i, (size_t)j);


 mch_memmove(newp + strlen((char *)(newp)), midp, (size_t)strlen((char *)(midp)) + 1);
    }

    ml_replace(curwin->w_cursor.lnum, newp, 0);
    changed();
    State = oldstate;
    curwin->w_cursor.col = oldcol;



}




    static void
block_insert(oap, s, b_insert, bdp)
    OPARG *oap;
    char_u *s;
    int b_insert;
    struct block_def *bdp;
{
    int p_ts;
    int count = 0;
    int spaces = 0;
    colnr_t offset;
    unsigned s_len;
    char_u *newp, *oldp;
    linenr_t lnum;
    int oldstate = State;

    State = 0x10;
    s_len = strlen((char *)(s));

    for (lnum = oap->start.lnum + 1; lnum <= oap->end.lnum; lnum++)
    {
 block_prep(oap, bdp, lnum, 1);
 if (bdp->is_short && b_insert)
     continue;

 oldp = ml_get(lnum);

 if (b_insert)
 {
     p_ts = bdp->start_char_vcols;
     if ((spaces = bdp->startspaces) != 0)
  count = p_ts - 1;
     offset = bdp->textcol;
 }
 else
 {
     p_ts = bdp->end_char_vcols;
     if (!bdp->is_short)
     {
  if ((spaces = (bdp->endspaces ? p_ts - bdp->endspaces : 0 ))
          != 0)
      count = p_ts - 1;
  offset = bdp->textcol + bdp->textlen - (spaces != 0);
     }
     else
     {


  if (!bdp->is_MAX)
      spaces = bdp->endspaces + !bdp->is_EOL;
  count = spaces;
  offset = bdp->textcol + bdp->textlen;
     }
 }

 newp = alloc_check((unsigned)(strlen((char *)(oldp))) + s_len + count + 1);
 if (newp == 
# 531 "ops.c" 3 4
            ((void *)0)
# 531 "ops.c"
                )
     continue;


 mch_memmove(newp, oldp, (size_t)(offset));


 copy_spaces(newp + offset, (size_t)spaces);


 mch_memmove(newp + offset + spaces, s, (size_t)s_len);

 oldp += offset;
 if (spaces && !bdp->is_short)
 {

     copy_spaces(newp + offset + spaces + s_len,
           (size_t)(p_ts - spaces));

     oldp++;

     count++;
 }

 mch_memmove(newp + offset + s_len + (spaces ? count : 0),
         oldp, (size_t)(strlen((char *)(oldp)) + 1));

 ml_replace(lnum, newp, 0);
    }

    State = oldstate;
}
# 571 "ops.c"
    void
op_reindent(oap, how)
    OPARG *oap;
    int (*how) (void);
{
    long i;
    char_u *l;
    int count;

    if (u_save((linenr_t)(curwin->w_cursor.lnum - 1),
   (linenr_t)(curwin->w_cursor.lnum + oap->line_count)) == 0)
 return;



    syn_changed(curwin->w_cursor.lnum);


    for (i = oap->line_count; --i >= 0 && !got_int; )
    {



 if ( (i % 50 == 0
      || i == oap->line_count - 1)
  && oap->line_count > p_report)
     smsg((char_u *)"%ld line%s to indent... ", i, plural(i));






 if (i != oap->line_count - 1 || oap->line_count == 1 ||
             how != get_lisp_indent)

 {
     l = skipwhite(ml_get_curline());
     if (*l == '\000')
  count = 0;
     else
  count = how();

     set_indent(count, 1);
 }
 ++curwin->w_cursor.lnum;
    }


    curwin->w_cursor.lnum -= oap->line_count;
    beginline(2 | 4);

    update_topline();
    update_screen(40);

    if (oap->line_count > p_report)
    {
 i = oap->line_count - (i + 1);
 smsg((char_u *)"%ld line%s indented ", i, plural(i));
    }

    curbuf->b_op_start = oap->start;
    curbuf->b_op_end = oap->end;
}






static char_u *expr_line = 
# 641 "ops.c" 3 4
                          ((void *)0)
# 641 "ops.c"
                              ;





    int
get_expr_register()
{
    char_u *new_line;

    new_line = getcmdline('=', 0L, 0);
    if (new_line == 
# 653 "ops.c" 3 4
                   ((void *)0)
# 653 "ops.c"
                       )
 return '\000';
    if (*new_line == '\000')
 vim_free(new_line);
    else
 set_expr_line(new_line);
    return '=';
}





    void
set_expr_line(new_line)
    char_u *new_line;
{
    vim_free(expr_line);
    expr_line = new_line;
}





    static char_u *
get_expr_line()
{
    if (expr_line == 
# 681 "ops.c" 3 4
                    ((void *)0)
# 681 "ops.c"
                        )
 return 
# 682 "ops.c" 3 4
       ((void *)0)
# 682 "ops.c"
           ;
    return eval_to_string(expr_line, 
# 683 "ops.c" 3 4
                                    ((void *)0)
# 683 "ops.c"
                                        );
}






    int
valid_yank_reg(regname, writing)
    int regname;
    int writing;
{
    if (regname > '~')
 return 0;
    if ( 
# 698 "ops.c" 3 4
              ((*__ctype_b_loc ())[(int) ((
# 698 "ops.c"
              regname
# 698 "ops.c" 3 4
              ))] & (unsigned short int) _ISalnum)
     
# 699 "ops.c"
    || (!writing && vim_strchr((char_u *)

        "/.%#:="



     , regname) != 
# 705 "ops.c" 3 4
                  ((void *)0)
# 705 "ops.c"
                      )
     || regname == '"'
     || regname == '-'
     || regname == '_'



       )
 return 1;
    return 0;
}
# 724 "ops.c"
    static void
get_yank_register(regname, writing)
    int regname;
    int writing;
{
    int i;

    y_append = 0;
    if (((regname == 0 && !writing) || regname == '"') && y_previous != 
# 732 "ops.c" 3 4
                                                                       ((void *)0)
# 732 "ops.c"
                                                                           )
    {
 y_current = y_previous;
 return;
    }
    i = regname;
    if (
# 738 "ops.c" 3 4
       ((*__ctype_b_loc ())[(int) ((
# 738 "ops.c"
       i
# 738 "ops.c" 3 4
       ))] & (unsigned short int) _ISdigit)
# 738 "ops.c"
                 )
 i -= '0';
    else if (
# 740 "ops.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 740 "ops.c"
            i
# 740 "ops.c" 3 4
            ))] & (unsigned short int) _ISlower)
# 740 "ops.c"
                      )
 i -= 'a' - 10;
    else if (
# 742 "ops.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 742 "ops.c"
            i
# 742 "ops.c" 3 4
            ))] & (unsigned short int) _ISupper)
# 742 "ops.c"
                      )
    {
 i -= 'A' - 10;
 y_append = 1;
    }
    else if (regname == '-')
 i = 36;





    else
 i = 0;
    y_current = &(y_regs[i]);
    if (writing)
 y_previous = y_current;
}





    int
yank_register_mline(regname)
    int regname;
{
    if (regname != 0 && !valid_yank_reg(regname, 0))
 return 0;
    if (regname == '_')
 return 0;
    get_yank_register(regname, 0);
    return (y_current->y_type == 1);
}







    int
do_record(c)
    int c;
{
    char_u *p;
    static int regname;
    struct yankreg *old_y_previous, *old_y_current;
    int retval;

    if (Recording == 0)
    {

 if (c > '~' || (!
# 795 "ops.c" 3 4
                 ((*__ctype_b_loc ())[(int) ((
# 795 "ops.c"
                 c
# 795 "ops.c" 3 4
                 ))] & (unsigned short int) _ISalnum) 
# 795 "ops.c"
                            && c != '"'))
     retval = 0;
 else
 {
     Recording = 1;
     showmode();
     regname = c;
     retval = 1;
 }
    }
    else
    {
 Recording = 0;
 msg((char_u *)(""));
 p = get_recorded();
 if (p == 
# 810 "ops.c" 3 4
         ((void *)0)
# 810 "ops.c"
             )
     retval = 0;
 else
 {




     old_y_previous = y_previous;
     old_y_current = y_current;

     retval = stuff_yank(regname, p);

     y_previous = old_y_previous;
     y_current = old_y_current;
 }
    }
    return retval;
}







    static int
stuff_yank(regname, p)
    int regname;
    char_u *p;
{
    char_u *lp;
    char_u **pp;


    if (regname != 0 && !valid_yank_reg(regname, 1))
    {
 vim_free(p);
 return 0;
    }
    if (regname == '_')
    {
 vim_free(p);
 return 1;
    }
    get_yank_register(regname, 1);
    if (y_append && y_current->y_array != 
# 856 "ops.c" 3 4
                                         ((void *)0)
# 856 "ops.c"
                                             )
    {
 pp = &(y_current->y_array[y_current->y_size - 1]);
 lp = lalloc((long_u)(strlen((char *)(*pp)) + strlen((char *)(p)) + 1), 1);
 if (lp == 
# 860 "ops.c" 3 4
          ((void *)0)
# 860 "ops.c"
              )
 {
     vim_free(p);
     return 0;
 }
 strcpy((char *)(lp), (char *)(*pp));
 strcat((char *)(lp), (char *)(p));
 vim_free(p);
 vim_free(*pp);
 *pp = lp;
    }
    else
    {
 free_yank_all();
 if ((y_current->y_array =
   (char_u **)alloc((unsigned)sizeof(char_u *))) == 
# 875 "ops.c" 3 4
                                                   ((void *)0)
# 875 "ops.c"
                                                       )
 {
     vim_free(p);
     return 0;
 }
 y_current->y_array[0] = p;
 y_current->y_size = 1;
 y_current->y_type = 0;
    }
    return 1;
}






    int
do_execreg(regname, colon, addcr)
    int regname;
    int colon;
    int addcr;
{
    static int lastc = '\000';
    long i;
    char_u *p;
    int retval = 1;
    int remap;

    if (regname == '@')
 regname = lastc;

    if (regname == '%' || regname == '#' || !valid_yank_reg(regname, 0))
 return 0;
    lastc = regname;

    if (regname == '_')
 return 1;

    if (regname == ':')
    {
 if (last_cmdline == 
# 916 "ops.c" 3 4
                    ((void *)0)
# 916 "ops.c"
                        )
 {
     emsg((char_u *)(e_nolastcmd));
     return 0;
 }
 vim_free(new_last_cmdline);
 new_last_cmdline = 
# 922 "ops.c" 3 4
                   ((void *)0)
# 922 "ops.c"
                       ;
 retval = put_in_typebuf(last_cmdline, 1);
    }

    else if (regname == '=')
    {
 p = get_expr_line();
 if (p == 
# 929 "ops.c" 3 4
         ((void *)0)
# 929 "ops.c"
             )
     return 0;
 retval = put_in_typebuf(p, colon);
 vim_free(p);
    }

    else if (regname == '.')
    {
 p = get_last_insert_save();
 if (p == 
# 938 "ops.c" 3 4
         ((void *)0)
# 938 "ops.c"
             )
 {
     emsg((char_u *)(e_noinstext));
     return 0;
 }
 retval = put_in_typebuf(p, colon);
 vim_free(p);
    }
    else
    {
 get_yank_register(regname, 0);
 if (y_current->y_array == 
# 949 "ops.c" 3 4
                          ((void *)0)
# 949 "ops.c"
                              )
     return 0;


 remap = colon ? -1 : 0;




 for (i = y_current->y_size; --i >= 0; )
 {

     if (y_current->y_type == 1 || i < y_current->y_size - 1
             || addcr)
     {
  if (ins_typebuf((char_u *)"\n", remap, 0, 1) == 0)
      return 0;
     }
     if (ins_typebuf(y_current->y_array[i], remap, 0, 1) == 0)
  return 0;
     if (colon && ins_typebuf((char_u *)":", remap, 0, 1) == 0)
  return 0;
 }
 Exec_reg = 1;
    }
    return retval;
}

    static int
put_in_typebuf(s, colon)
    char_u *s;
    int colon;
{
    int retval = 1;

    if (colon)
 retval = ins_typebuf((char_u *)"\n", 0, 0, 1);
    if (retval == 1)
 retval = ins_typebuf(s, 0, 0, 1);
    if (colon && retval == 1)
 retval = ins_typebuf((char_u *)":", 0, 0, 1);
    return retval;
}







    int
insert_reg(regname, literally)
    int regname;
    int literally;
{
    long i;
    int retval = 1;
    char_u *arg;
    int allocated;






    ui_breakcheck();
    if (got_int)
 return 0;


    if (regname != '\000' && !valid_yank_reg(regname, 0))
 return 0;
# 1032 "ops.c"
    if (regname == '.')
 retval = stuff_inserted('\000', 1L, 1);
    else if (get_spec_reg(regname, &arg, &allocated, 1))
    {
 if (arg == 
# 1036 "ops.c" 3 4
           ((void *)0)
# 1036 "ops.c"
               )
     return 0;
 if (literally)
     stuffescaped(arg);
 else
     stuffReadbuff(arg);
 if (allocated)
     vim_free(arg);
    }
    else
    {
 get_yank_register(regname, 0);
 if (y_current->y_array == 
# 1048 "ops.c" 3 4
                          ((void *)0)
# 1048 "ops.c"
                              )
     retval = 0;
 else
 {
     for (i = 0; i < y_current->y_size; ++i)
     {
  if (literally)
      stuffescaped(y_current->y_array[i]);
  else
      stuffReadbuff(y_current->y_array[i]);




  if (y_current->y_type == 1 || i < y_current->y_size - 1)
      stuffcharReadbuff('\n');
     }
 }
    }

    return retval;
}





    static void
stuffescaped(arg)
    char_u *arg;
{
    while (*arg)
    {
 if ((*arg < ' ' && *arg != '\011') || *arg > '~')
     stuffcharReadbuff((('V') & 0x1f));
 stuffcharReadbuff(*arg++);
    }
}




    static int
get_spec_reg(regname, argp, allocated, errmsg)
    int regname;
    char_u **argp;
    int *allocated;
    int errmsg;
{
    int cnt;

    *argp = 
# 1099 "ops.c" 3 4
           ((void *)0)
# 1099 "ops.c"
               ;
    *allocated = 0;
    switch (regname)
    {
 case '%':
     if (errmsg)
  check_fname();
     *argp = curbuf->b_fname;
     return 1;

 case '#':
     *argp = getaltfname(errmsg);
     return 1;


 case '=':
     *argp = get_expr_line();
     *allocated = 1;
     return 1;


 case ':':
     if (last_cmdline == 
# 1121 "ops.c" 3 4
                        ((void *)0) 
# 1121 "ops.c"
                             && errmsg)
  emsg((char_u *)(e_nolastcmd));
     *argp = last_cmdline;
     return 1;

 case '/':
     if (last_search_pat() == 
# 1127 "ops.c" 3 4
                             ((void *)0) 
# 1127 "ops.c"
                                  && errmsg)
  emsg((char_u *)(e_noprevre));
     *argp = last_search_pat();
     return 1;

 case '.':
     *argp = get_last_insert_save();
     *allocated = 1;
     if (*argp == 
# 1135 "ops.c" 3 4
                 ((void *)0) 
# 1135 "ops.c"
                      && errmsg)
  emsg((char_u *)(e_noinstext));
     return 1;


 case (('F') & 0x1f):
 case (('P') & 0x1f):
     if (!errmsg)
  return 0;
     *argp = file_name_at_cursor(1 | 4
    | (regname == (('P') & 0x1f) ? 2 : 0), 1L);
     *allocated = 1;
     return 1;


 case (('W') & 0x1f):
 case (('A') & 0x1f):
     if (!errmsg)
  return 0;
     cnt = find_ident_under_cursor(argp, regname == (('W') & 0x1f)
       ? (1|2) : 2);
     *argp = cnt ? vim_strnsave(*argp, cnt) : 
# 1156 "ops.c" 3 4
                                             ((void *)0)
# 1156 "ops.c"
                                                 ;
     *allocated = 1;
     return 1;

 case '_':
     *argp = (char_u *)"";
     return 1;
    }

    return 0;
}
# 1176 "ops.c"
    int
cmdline_paste(regname, literally)
    int regname;
    int literally;
{
    long i;
    char_u *arg;
    int allocated;



    if (regname != (('F') & 0x1f) && regname != (('P') & 0x1f) && regname != (('W') & 0x1f)
     && regname != (('A') & 0x1f) && !valid_yank_reg(regname, 0))
 return 0;
# 1201 "ops.c"
    if (get_spec_reg(regname, &arg, &allocated, 1))
    {
 if (arg == 
# 1203 "ops.c" 3 4
           ((void *)0)
# 1203 "ops.c"
               )
     return 0;
 cmdline_paste_str(arg, literally);
 if (allocated)
     vim_free(arg);
 return (int)1;
    }

    get_yank_register(regname, 0);
    if (y_current->y_array == 
# 1212 "ops.c" 3 4
                             ((void *)0)
# 1212 "ops.c"
                                 )
 return 0;

    for (i = 0; i < y_current->y_size; ++i)
    {
 cmdline_paste_str(y_current->y_array[i], literally);


 if (y_current->y_type == 1 || i < y_current->y_size - 1)
     cmdline_paste_str((char_u *)"\r", literally);
    }
    return 1;
}







    static void
cmdline_paste_str(s, literally)
    char_u *s;
    int literally;
{
    if (literally)
 put_on_cmdline(s, -1, 1);
    else
 while (*s)
 {
     if (*s == (('V') & 0x1f) && s[1])
  stuffcharReadbuff(*s++);
     else if (*s == '\033' || *s == (('C') & 0x1f) || *s == '\015' || *s == '\012'

      || *s == intr_char

      || (*s == (('\\') & 0x1f) && s[1] == (('N') & 0x1f)))
  stuffcharReadbuff((('V') & 0x1f));
     stuffcharReadbuff(*s++);
 }
}






    int
op_delete(oap)
    OPARG *oap;
{
    int n;
    linenr_t lnum;
    char_u *ptr;
    char_u *newp, *oldp;
    linenr_t old_lcount = curbuf->b_ml.ml_line_count;
    int did_yank = 0;
    struct block_def bd;

    if (curbuf->b_ml.ml_flags & 1)
 return 1;


    if (oap->empty)
    {
 return u_save_cursor();
    }
# 1313 "ops.c"
    if ( oap->motion_type == 0
     && !oap->is_VIsual
     && oap->line_count > 1
     && oap->op_type == 1)
    {
 ptr = ml_get(oap->end.lnum) + oap->end.col + oap->inclusive;
 ptr = skipwhite(ptr);
 if (*ptr == '\000' && inindent(0))
     oap->motion_type = 1;
    }





    if ( oap->motion_type == 0
     && oap->line_count == 1
     && oap->op_type == 1
     && *ml_get(oap->start.lnum) == '\000')
    {




 if (vim_strchr(p_cpo, 'E') != 
# 1337 "ops.c" 3 4
                                          ((void *)0)
# 1337 "ops.c"
                                              )
     beep_flush();
 return 1;
    }






    if (oap->regname != '_')
    {
 if (oap->regname != 0)
 {

     if (!valid_yank_reg(oap->regname, 1))
     {
  beep_flush();
  return 1;
     }
     get_yank_register(oap->regname, 1);
     if (op_yank(oap, 1, 0) == 1)
  did_yank = 1;
 }





 if (oap->regname != 0 || oap->motion_type == 1
             || oap->line_count > 1)
 {
     y_current = &y_regs[9];
     free_yank_all();
     for (n = 9; n > 1; --n)
  y_regs[n] = y_regs[n - 1];
     y_previous = y_current = &y_regs[1];
     y_regs[1].y_array = 
# 1374 "ops.c" 3 4
                        ((void *)0)
# 1374 "ops.c"
                            ;
     oap->regname = 0;
 }
 else if (oap->regname == 0)
 {
     oap->regname = '-';
     get_yank_register(oap->regname, 1);
     oap->regname = 0;
 }

 if (oap->regname == 0 && op_yank(oap, 1, 0) == 1)
     did_yank = 1;







 if (!did_yank)
 {
     if (ask_yesno((char_u *)"cannot yank; delete anyway", 1) != 'y')
     {
  emsg(e_abort);
  return 0;
     }
 }
    }




    if (oap->block_mode)
    {
 if (u_save((linenr_t)(oap->start.lnum - 1),
          (linenr_t)(oap->end.lnum + 1)) == 0)
     return 0;



 syn_changed(curwin->w_cursor.lnum);

 for (lnum = curwin->w_cursor.lnum;
          curwin->w_cursor.lnum <= oap->end.lnum;
            ++curwin->w_cursor.lnum)
 {
     block_prep(oap, &bd, curwin->w_cursor.lnum, 1);
     if (bd.textlen == 0)
  continue;





     n = bd.textlen - bd.startspaces - bd.endspaces;
     oldp = ml_get_curline();
     newp = alloc_check((unsigned)strlen((char *)(oldp)) + 1 - n);
     if (newp == 
# 1431 "ops.c" 3 4
                ((void *)0)
# 1431 "ops.c"
                    )
  continue;

     mch_memmove(newp, oldp, (size_t)bd.textcol);

     copy_spaces(newp + bd.textcol,
         (size_t)(bd.startspaces + bd.endspaces));

     oldp += bd.textcol + bd.textlen;
     mch_memmove(newp + bd.textcol + bd.startspaces + bd.endspaces,
            oldp, strlen((char *)(oldp)) + 1);

     ml_replace(curwin->w_cursor.lnum, newp, 0);
 }

 curwin->w_cursor.lnum = lnum;
 changed_cline_bef_curs();
 approximate_botline();
 adjust_cursor();

 changed();
 update_screen(30);
 oap->line_count = 0;
    }
    else if (oap->motion_type == 1)
    {
 if (oap->op_type == 3)
 {




     if (oap->line_count > 1)
     {
  lnum = curwin->w_cursor.lnum;
  ++curwin->w_cursor.lnum;
  del_lines((long)(oap->line_count - 1), 1, 1);
  curwin->w_cursor.lnum = lnum;
     }
     if (u_save_cursor() == 0)
  return 0;
     if (curbuf->b_p_ai)
     {
  beginline(1);
  did_ai = 1;
  ai_col = curwin->w_cursor.col;
     }
     else
  beginline(0);


     syn_changed(curwin->w_cursor.lnum);

     truncate_line(0);

     if (oap->line_count > 1)
  u_clearline();
 }
 else
 {
     del_lines(oap->line_count, 1, 1);
     beginline(1 | 4);
     u_clearline();
 }
    }
    else if (oap->line_count == 1)
    {
 if (u_save_cursor() == 0)
     return 0;

 if ( vim_strchr(p_cpo, '$') != 
# 1501 "ops.c" 3 4
                                         ((void *)0)
  
# 1502 "ops.c"
 && oap->op_type == 3
  && oap->end.lnum == curwin->w_cursor.lnum
  && !oap->is_VIsual)
     display_dollar(oap->end.col - !oap->inclusive);
 n = oap->end.col - oap->start.col + 1 - !oap->inclusive;
 (void)del_chars((long)n, restart_edit == '\000');
    }
    else
    {
 if (u_save_cursor() == 0)
     return 0;


 syn_changed(curwin->w_cursor.lnum);

 truncate_line(1);

 oap->start = curwin->w_cursor;
 ++curwin->w_cursor.lnum;

 del_lines((long)(oap->line_count - 2), 1, 1);

 if (u_save_cursor() == 0)
     return 0;
 u_clearline();

 curwin->w_cursor.col = 0;
 (void)del_chars((long)(oap->end.col + 1 - !oap->inclusive),
        restart_edit == '\000');
 curwin->w_cursor = oap->start;
 (void)do_join(0, 1);
    }





    if (oap->motion_type == 0 && oap->line_count == 1)
    {
 if (dollar_vcol)
     must_redraw = 0;
 else
     update_screenline();
    }
    else if (!global_busy)
    {
 update_topline();
 update_screen(40);
    }

    msgmore(curbuf->b_ml.ml_line_count - old_lcount);




    curbuf->b_op_start = oap->start;
    if (oap->block_mode)
    {
 curbuf->b_op_end.lnum = oap->end.lnum;
 curbuf->b_op_end.col = oap->start.col;
    }
    else
 curbuf->b_op_end = oap->start;

    return 1;
}





    int
op_replace(oap, c)
    OPARG *oap;
    int c;
{
    int n;
    linenr_t lnum;
    char_u *newp, *oldp;
    linenr_t old_lcount = curbuf->b_ml.ml_line_count;
    struct block_def bd;

    if ((curbuf->b_ml.ml_flags & 1 ) || oap->empty)
 return 1;
# 1610 "ops.c"
    if (oap->block_mode)
    {
 if (u_save((linenr_t)(oap->start.lnum - 1),
          (linenr_t)(oap->end.lnum + 1)) == 0)
     return 0;



 syn_changed(curwin->w_cursor.lnum);

 for (lnum = curwin->w_cursor.lnum;
          curwin->w_cursor.lnum <= oap->end.lnum;
            ++curwin->w_cursor.lnum)
 {
     block_prep(oap, &bd, curwin->w_cursor.lnum, 1);
     if (bd.textlen == 0)
  continue;






     n = (bd.startspaces ? bd.start_char_vcols - 1 : 0);

     n += (bd.endspaces && !bd.is_oneChar ? bd.end_char_vcols - 1 : 0);
     n += (oap->end_vcol - oap->start_vcol) - bd.textlen + 1;

     oldp = ml_get_curline();
     newp = alloc_check((unsigned)strlen((char *)(oldp)) + 1 + n);
     if (newp == 
# 1640 "ops.c" 3 4
                ((void *)0)
# 1640 "ops.c"
                    )
  continue;
     memset((newp), ('\000'), ((size_t)(strlen((char *)(oldp)) + 1 + n)));

     mch_memmove(newp, oldp, (size_t)bd.textcol);
     oldp += bd.textcol + bd.textlen;

     copy_spaces(newp + bd.textcol, (size_t)bd.startspaces);

     copy_chars(newp + strlen((char *)(newp)), (size_t)bd.textlen, c);
     if (!bd.is_short)
     {

  copy_spaces(newp + strlen((char *)(newp)), (size_t)bd.endspaces);

  mch_memmove(newp + strlen((char *)(newp)), oldp, strlen((char *)(oldp)) + 1);
     }

     ml_replace(curwin->w_cursor.lnum, newp, 0);
 }

 curwin->w_cursor.lnum = lnum;
 changed_cline_bef_curs();
 approximate_botline();
 adjust_cursor();

 changed();
 update_screen(30);
 oap->line_count = 0;
    }





    if (oap->motion_type == 0 && oap->line_count == 1)
    {
 if (dollar_vcol)
     must_redraw = 0;
 else
     update_screenline();
    }
    else if (!global_busy)
    {
 update_topline();
 update_screen(40);
    }

    msgmore(curbuf->b_ml.ml_line_count - old_lcount);




    curbuf->b_op_start = oap->start;
    if (oap->block_mode)
    {
 curbuf->b_op_end.lnum = oap->end.lnum;
 curbuf->b_op_end.col = oap->start.col;
    }
    else
 curbuf->b_op_end = oap->start;

    return 1;
}





    void
op_tilde(oap)
    OPARG *oap;
{
    FPOS pos;
    struct block_def bd;

    if (u_save((linenr_t)(oap->start.lnum - 1),
           (linenr_t)(oap->end.lnum + 1)) == 0)
 return;




    curbuf->b_op_start = oap->start;
    curbuf->b_op_end = oap->end;

    pos = oap->start;
    if (oap->block_mode)
    {
 for (; pos.lnum <= oap->end.lnum; ++pos.lnum)
 {
     block_prep(oap, &bd, pos.lnum, 0);
     pos.col = bd.textcol;
     while (--bd.textlen >= 0)
     {
  swapchar(oap->op_type, &pos);
  if (inc(&pos) == -1)
      break;
     }
 }
    }
    else
    {
 if (oap->motion_type == 1)
 {
     pos.col = 0;
     oap->end.col = strlen((char *)(ml_get(oap->end.lnum)));
     if (oap->end.col)
  --oap->end.col;
 }
 else if (!oap->inclusive)
     dec(&(oap->end));

 while ((((pos).lnum != (oap->end).lnum) ? ((pos).lnum < (oap->end).lnum) : ((pos).col <= (oap->end).col)))
 {
     swapchar(oap->op_type, &pos);
     if (inc(&pos) == -1)
  break;
 }
    }

    if (oap->motion_type == 0 && oap->line_count == 1 && !oap->block_mode)
 update_screenline();
    else
    {


 syn_changed(oap->start.lnum);

 update_topline();
 update_screen(40);
    }

    if (oap->line_count > p_report)
 smsg((char_u *)"%ld line%s ~ed",
        oap->line_count, plural(oap->line_count));
}






    void
swapchar(op_type, pos)
    int op_type;
    FPOS *pos;
{
    int c;
    int nc;

    c = gchar_pos(pos);




    nc = c;
    if (
# 1797 "ops.c" 3 4
       ((*__ctype_b_loc ())[(int) ((
# 1797 "ops.c"
       c
# 1797 "ops.c" 3 4
       ))] & (unsigned short int) _ISlower)
# 1797 "ops.c"
                 )
    {
 if (op_type == 15)
     nc = (((c - 'a') + 13) % 26) + 'a';
 else if (op_type != 12)
     nc = toupper(c);
    }
    else if (
# 1804 "ops.c" 3 4
            ((*__ctype_b_loc ())[(int) ((
# 1804 "ops.c"
            c
# 1804 "ops.c" 3 4
            ))] & (unsigned short int) _ISupper)
# 1804 "ops.c"
                      )
    {
 if (op_type == 15)
     nc = (((c - 'A') + 13) % 26) + 'A';
 else if (op_type != 11)
     nc = tolower(c);
    }
    if (nc != c)
    {
 (*(ml_get_buf(curbuf, (*pos).lnum, 1) + (*pos).col) = (nc));
 changed();
    }
}





    void
op_insert(oap, count1)
    OPARG *oap;
    long count1;
{
    long ins_len, pre_textlen = 0;
    char_u *firstline, *ins_text;
    struct block_def bd;
    int i;

    if (u_save((linenr_t)(oap->start.lnum - 1),
        (linenr_t)(oap->end.lnum + 1)) == 0)
 return;


    bd.is_MAX = (curwin->w_curswant == (0x7fffffff));

    bd.is_EOL = (linetabsize(ml_get_curline()) == (int)oap->end_vcol);


    curwin->w_cursor.lnum = oap->start.lnum;
    update_screen(30);

    if (oap->block_mode)
    {

 block_prep(oap, &bd, oap->start.lnum, 1);
 firstline = ml_get(oap->start.lnum) + bd.textcol;
 if (oap->op_type == 18)
     firstline += bd.textlen;
 pre_textlen = strlen((char *)(firstline));
    }

    if (oap->op_type == 18)
    {
 if (oap->block_mode)
 {

     curwin->w_set_curswant = 1;
     while (inc_cursor() == 0
      && (curwin->w_cursor.col < bd.textcol + bd.textlen))
  ;
     if (bd.is_short && !bd.is_MAX)
     {


  for (i = 0; i < bd.endspaces; ++i)
      ins_char(' ');
  bd.textlen += bd.endspaces;
     }
 }
 else
 {
     curwin->w_cursor = oap->end;


     if (!(*ml_get(curwin->w_cursor.lnum) == '\000')
      && oap->start_vcol != oap->end_vcol)
  inc_cursor();
 }
    }

    edit('\000', 0, (linenr_t)count1);



    if (curwin->w_cursor.lnum != oap->start.lnum)
 return;


    if (oap->block_mode)
    {
 struct block_def bd2;






 block_prep(oap, &bd2, oap->start.lnum, 1);
 if (!bd.is_MAX || bd2.textlen < bd.textlen)
 {
     if (oap->op_type == 18)
     {
  pre_textlen += bd2.textlen - bd.textlen;
  if (bd2.endspaces)
      --bd2.textlen;
     }
     bd.textcol = bd2.textcol;
     bd.textlen = bd2.textlen;
 }





 firstline = ml_get(oap->start.lnum) + bd.textcol;
 if (oap->op_type == 18)
     firstline += bd.textlen;
 if ((ins_len = strlen((char *)(firstline)) - pre_textlen) > 0)
 {
     if ((ins_text = alloc_check((unsigned)(ins_len + 1))) != 0)
     {

  strncpy((char *)(ins_text), (char *)(firstline), (size_t)(ins_len));
  *(ins_text + ins_len) = '\000';


  block_insert(oap, ins_text, (oap->op_type == 17), &bd);

  curwin->w_cursor.col = oap->start.col;
  changed_cline_bef_curs();
  approximate_botline();
  adjust_cursor();

  changed();
  update_screen(30);
     }
     vim_free(ins_text);
 }
    }


 syn_changed(oap->start.lnum);



    if (oap->motion_type == 1)
    {

 if (curbuf->b_p_lisp && curbuf->b_p_ai)
     fixthisline(get_lisp_indent);


 else


 if (curbuf->b_p_cin)
     fixthisline(get_c_indent);

    }

}







    int
op_change(oap)
    OPARG *oap;
{
    colnr_t l;
    int retval;

    long offset;
    linenr_t linenr;
    long ins_len, pre_textlen = 0;
    char_u *firstline;
    char_u *ins_text, *newp, *oldp;
    struct block_def bd;


    l = oap->start.col;
    if (oap->motion_type == 1)
    {
 l = 0;

 if (curbuf->b_p_si

  && !curbuf->b_p_cin

  )
     can_si = 1;

    }



    if (curbuf->b_ml.ml_flags & 1)
    {
 if (u_save_cursor() == 0)
     return 0;
    }
    else if (op_delete(oap) == 0)
 return 0;

    if ((l > curwin->w_cursor.col) && !(*ml_get(curwin->w_cursor.lnum) == '\000'))
 inc_cursor();




    if (oap->block_mode)
    {
 firstline = ml_get(oap->start.lnum);
 pre_textlen = strlen((char *)(firstline));
 block_prep(oap, &bd, oap->start.lnum, 1);
    }



    if (oap->motion_type == 1)
    {

 if (curbuf->b_p_lisp && curbuf->b_p_ai)
     fixthisline(get_lisp_indent);


 else


 if (curbuf->b_p_cin)
     fixthisline(get_c_indent);

    }


    retval = edit('\000', 0, (linenr_t)1);






    if (oap->block_mode && oap->start.lnum != oap->end.lnum)
    {
 firstline = ml_get(oap->start.lnum);




 if ((ins_len = strlen((char *)(firstline)) - pre_textlen) > 0)
 {
     if ((ins_text = alloc_check((unsigned)(ins_len + 1))) != 0)
     {

  curwin->w_cursor = oap->end;

  strncpy((char *)(ins_text), (char *)(firstline + bd.textcol), (size_t)(ins_len));
  *(ins_text + ins_len) = '\000';
  for (linenr = oap->start.lnum + 1;
       linenr <= oap->end.lnum;
       linenr++)
  {
      block_prep(oap, &bd, linenr, 1);
      if (!bd.is_short)
      {
   oldp = ml_get(linenr);
   newp = alloc_check((unsigned)(strlen((char *)(oldp))
             + ins_len + 1));
   if (newp == 
# 2075 "ops.c" 3 4
              ((void *)0)
# 2075 "ops.c"
                  )
       continue;

   mch_memmove(newp, oldp, (size_t)bd.textcol);
   for (offset = 0; offset < ins_len; offset++)
       *(newp + bd.textcol + offset) = *(ins_text
            + offset);
   oldp += bd.textcol;
   mch_memmove(newp + bd.textcol + offset, oldp,
           strlen((char *)(oldp)) + 1);
   ml_replace(linenr, newp, 0);
   if (linenr == oap->end.lnum)
       curwin->w_cursor.col = bd.textcol + ins_len - 1;
      }
  }
  changed_line_abv_curs();
  approximate_botline();
  adjust_cursor();

  changed();
  update_screen(40);
     }
     vim_free(ins_text);
 }


 syn_changed(oap->start.lnum);

    }


    return retval;
}




    void
init_yank()
{
    int i;

    for (i = 0; i < 37; ++i)
 y_regs[i].y_array = 
# 2118 "ops.c" 3 4
                    ((void *)0)
# 2118 "ops.c"
                        ;
}





    static void
free_yank(n)
    long n;
{
    if (y_current->y_array != 
# 2129 "ops.c" 3 4
                             ((void *)0)
# 2129 "ops.c"
                                 )
    {
 long i;

 for (i = n; --i >= 0; )
 {
# 2149 "ops.c"
     vim_free(y_current->y_array[i]);
 }
 vim_free(y_current->y_array);
 y_current->y_array = 
# 2152 "ops.c" 3 4
                     ((void *)0)
# 2152 "ops.c"
                         ;




    }
}

    static void
free_yank_all()
{
    free_yank(y_current->y_size);
}
# 2174 "ops.c"
    int
op_yank(oap, deleting, mess)
    OPARG *oap;
    int deleting;
    int mess;
{
    long y_idx;
    struct yankreg *curr;
    struct yankreg newreg;
    char_u **new_ptr;
    linenr_t lnum;
    long j;
    long len;
    int yanktype = oap->motion_type;
    long yanklines = oap->line_count;
    linenr_t yankendlnum = oap->end.lnum;
    char_u *p;
    char_u *pnew;
    struct block_def bd;


    if (oap->regname != 0 && !valid_yank_reg(oap->regname, 1))
    {
 beep_flush();
 return 0;
    }
    if (oap->regname == '_')
 return 1;
# 2211 "ops.c"
    if (!deleting)
 get_yank_register(oap->regname, 1);

    curr = y_current;

    if (y_append && y_current->y_array != 
# 2216 "ops.c" 3 4
                                         ((void *)0)
# 2216 "ops.c"
                                             )
 y_current = &newreg;
    else
 free_yank_all();





    if ( oap->motion_type == 0
     && oap->start.col == 0
     && !oap->inclusive
     && (!oap->is_VIsual || *p_sel == 'o')
     && oap->end.col == 0
     && yanklines > 1)
    {
 yanktype = 1;
 --yankendlnum;
 --yanklines;
    }

    y_current->y_size = yanklines;
    y_current->y_type = yanktype;
    y_current->y_array = (char_u **)lalloc_clear((long_u)(sizeof(char_u *) *
           yanklines), 1);

    if (y_current->y_array == 
# 2242 "ops.c" 3 4
                             ((void *)0)
# 2242 "ops.c"
                                 )
    {
 y_current = curr;
 return 0;
    }

    y_idx = 0;
    lnum = oap->start.lnum;




    if (oap->block_mode)
    {
 y_current->y_type = 2;
 for ( ; lnum <= yankendlnum; ++lnum)
 {
     block_prep(oap, &bd, lnum, 0);

     if ((pnew = alloc(bd.startspaces + bd.endspaces +
       bd.textlen + 1)) == 
# 2262 "ops.c" 3 4
                          ((void *)0)
# 2262 "ops.c"
                              )
  goto fail;
     y_current->y_array[y_idx++] = pnew;

     copy_spaces(pnew, (size_t)bd.startspaces);
     pnew += bd.startspaces;

     mch_memmove(pnew, bd.textstart, (size_t)bd.textlen);
     pnew += bd.textlen;

     copy_spaces(pnew, (size_t)bd.endspaces);
     pnew += bd.endspaces;

     *pnew = '\000';
 }
    }
    else
    {







 if (yanktype != 1)
 {
     if (yanklines == 1)
     {
  j = oap->end.col - oap->start.col + 1 - !oap->inclusive;

  p = ml_get(lnum) + oap->start.col;
  len = strlen((char *)(p));
  if (j > len || j < 0)
      j = len;
  if ((y_current->y_array[0] = vim_strnsave(p, (int)j)) == 
# 2297 "ops.c" 3 4
                                                          ((void *)0)
# 2297 "ops.c"
                                                              )
  {
fail:

      free_yank(y_idx);
      y_current = curr;
      return 0;
  }
  goto success;
     }
     if ((y_current->y_array[0] =
   vim_strsave(ml_get(lnum++) + oap->start.col)) == 
# 2308 "ops.c" 3 4
                                                   ((void *)0)
# 2308 "ops.c"
                                                       )
  goto fail;
     ++y_idx;
 }

 while (yanktype == 1 ? (lnum <= yankendlnum) : (lnum < yankendlnum))
 {
     if ((y_current->y_array[y_idx] =
      vim_strsave(ml_get(lnum++))) == 
# 2316 "ops.c" 3 4
                                     ((void *)0)
# 2316 "ops.c"
                                         )
  goto fail;
     ++y_idx;
 }
 if (yanktype != 1)
 {
     if ((y_current->y_array[y_idx] = vim_strnsave(ml_get(yankendlnum),
     oap->end.col + 1 - !oap->inclusive)) == 
# 2323 "ops.c" 3 4
                                            ((void *)0)
# 2323 "ops.c"
                                                )
  goto fail;
 }
    }

success:
    if (curr != y_current)
    {
 new_ptr = (char_u **)lalloc((long_u)(sizeof(char_u *) *
       (curr->y_size + y_current->y_size)), 1);
 if (new_ptr == 
# 2333 "ops.c" 3 4
               ((void *)0)
# 2333 "ops.c"
                   )
     goto fail;
 for (j = 0; j < curr->y_size; ++j)
     new_ptr[j] = curr->y_array[j];
 vim_free(curr->y_array);
 curr->y_array = new_ptr;

 if (yanktype == 1)
     curr->y_type = 1;



 if (curr->y_type == 0)
 {
     pnew = lalloc((long_u)(strlen((char *)(curr->y_array[curr->y_size - 1]))
         + strlen((char *)(y_current->y_array[0])) + 1), 1);
     if (pnew == 
# 2349 "ops.c" 3 4
                ((void *)0)
# 2349 "ops.c"
                    )
     {
      y_idx = y_current->y_size - 1;
      goto fail;
     }
     strcpy((char *)(pnew), (char *)(curr->y_array[--j]));
     strcat((char *)(pnew), (char *)(y_current->y_array[0]));
     vim_free(curr->y_array[j]);
     vim_free(y_current->y_array[0]);
     curr->y_array[j++] = pnew;
     y_idx = 1;
 }
 else
     y_idx = 0;
 while (y_idx < y_current->y_size)
     curr->y_array[j++] = y_current->y_array[y_idx++];
 curr->y_size = j;
 vim_free(y_current->y_array);
 y_current = curr;
    }
    if (mess)
    {
 if (yanktype == 0 && !oap->block_mode && yanklines == 1)
     yanklines = 0;

 if (yanklines > p_report)
 {

     update_topline_redraw();
     smsg((char_u *)"%ld line%s yanked", yanklines, plural(yanklines));
 }
    }




    curbuf->b_op_start = oap->start;
    curbuf->b_op_end = oap->end;
# 2399 "ops.c"
    return 1;
}







    void
do_put(regname, dir, count, flags)
    int regname;
    int dir;
    long count;
    int flags;
{
    char_u *ptr;
    char_u *newp, *oldp;
    int yanklen;
    int oldlen;
    int totlen = 0;
    linenr_t lnum;
    colnr_t col;
    long i;
    int y_type;
    long y_size;
    char_u **y_array = 
# 2425 "ops.c" 3 4
                      ((void *)0)
# 2425 "ops.c"
                          ;
    long nr_lines = 0;
    colnr_t vcol;
    int delcount;
    int incr = 0;
    long j;
    FPOS new_cursor;
    int indent;
    int orig_indent = 0;
    int indent_diff = 0;
    int first_indent = 1;
    int lendiff = 0;
    FPOS old_pos;
    struct block_def bd;
    char_u *insert_string = 
# 2439 "ops.c" 3 4
                           ((void *)0)
# 2439 "ops.c"
                               ;
    int allocated = 0;
# 2458 "ops.c"
    if (flags & 1)
 orig_indent = get_indent();

    curbuf->b_op_start = curwin->w_cursor;

    if (dir == 1)
    {
# 2477 "ops.c"
 curbuf->b_op_start.col++;
    }

    curbuf->b_op_end = curwin->w_cursor;





    if (regname == '.')
    {
 (void)stuff_inserted((dir == 1 ? (count == -1 ? 'o' : 'a') :
        (count == -1 ? 'O' : 'i')), count, 0);


 if ((flags & 2) && gchar_cursor() != '\000')
     stuffcharReadbuff('l');
 return;
    }





    if (get_spec_reg(regname, &insert_string, &allocated, 1))
    {
 if (insert_string == 
# 2503 "ops.c" 3 4
                     ((void *)0)
# 2503 "ops.c"
                         )
     return;
    }

    if (insert_string != 
# 2507 "ops.c" 3 4
                        ((void *)0)
# 2507 "ops.c"
                            )
    {
 y_type = 0;
 if (regname == '=')
 {



     for (;;)
     {
  y_size = 0;
  ptr = insert_string;
  while (ptr != 
# 2519 "ops.c" 3 4
               ((void *)0)
# 2519 "ops.c"
                   )
  {
      if (y_array != 
# 2521 "ops.c" 3 4
                    ((void *)0)
# 2521 "ops.c"
                        )
   y_array[y_size] = ptr;
      ++y_size;
      ptr = vim_strchr(ptr, '\n');
      if (ptr != 
# 2525 "ops.c" 3 4
                ((void *)0)
# 2525 "ops.c"
                    )
      {
   if (y_array != 
# 2527 "ops.c" 3 4
                 ((void *)0)
# 2527 "ops.c"
                     )
       *ptr = '\000';
   ++ptr;

   if (*ptr == '\000')
   {
       y_type = 1;
       break;
   }
      }
  }
  if (y_array != 
# 2538 "ops.c" 3 4
                ((void *)0)
# 2538 "ops.c"
                    )
      break;
  y_array = (char_u **)alloc((unsigned)
       (y_size * sizeof(char_u *)));
  if (y_array == 
# 2542 "ops.c" 3 4
                ((void *)0)
# 2542 "ops.c"
                    )
      goto end;
     }
 }
 else
 {
     y_size = 1;
     y_array = &insert_string;
 }
    }
    else
    {
 get_yank_register(regname, 0);

 y_type = y_current->y_type;
 y_size = y_current->y_size;
 y_array = y_current->y_array;
    }

    if (count == -1)
    {
 y_type = 1;
 count = 1;
    }

    if (y_size == 0 || y_array == 
# 2567 "ops.c" 3 4
                                 ((void *)0)
# 2567 "ops.c"
                                     )
    {
 emsg2((char_u *)("Nothing in register %s"), (char_u *)(regname == 0 ? (char_u *)"\"" : transchar(regname)))
                                                       ;
 goto end;
    }

    if (y_type == 2)
    {
 lnum = curwin->w_cursor.lnum + y_size + 1;
 if (lnum > curbuf->b_ml.ml_line_count)
     lnum = curbuf->b_ml.ml_line_count + 1;
 if (u_save(curwin->w_cursor.lnum - 1, lnum) == 0)
     goto end;
    }
    else if (u_save_cursor() == 0)
 goto end;

    yanklen = strlen((char *)(y_array[0]));
    changed();

    lnum = curwin->w_cursor.lnum;
    col = curwin->w_cursor.col;
    approximate_botline();
    changed_cline_bef_curs();




    if (y_type == 2)
    {
 if (dir == 1 && gchar_cursor() != '\000')
 {
     getvcol(curwin, &curwin->w_cursor, 
# 2600 "ops.c" 3 4
                                       ((void *)0)
# 2600 "ops.c"
                                           , 
# 2600 "ops.c" 3 4
                                             ((void *)0)
# 2600 "ops.c"
                                                 , &col);
# 2611 "ops.c"
     {
  ++col;
  ++curwin->w_cursor.col;
     }
 }
 else
     getvcol(curwin, &curwin->w_cursor, &col, 
# 2617 "ops.c" 3 4
                                             ((void *)0)
# 2617 "ops.c"
                                                 , 
# 2617 "ops.c" 3 4
                                                   ((void *)0)
# 2617 "ops.c"
                                                       );


 syn_changed(curwin->w_cursor.lnum);

 for (i = 0; i < y_size; ++i)
 {
     bd.startspaces = 0;
     bd.endspaces = 0;
     bd.textcol = 0;
     vcol = 0;
     delcount = 0;


     if (curwin->w_cursor.lnum > curbuf->b_ml.ml_line_count)
     {
  ml_append(curbuf->b_ml.ml_line_count, (char_u *)"",
          (colnr_t)1, 0);
  ++nr_lines;
     }

     oldp = ml_get_curline();
     oldlen = strlen((char *)(oldp));
     for (ptr = oldp; vcol < col && *ptr; ++ptr)
     {

  incr = lbr_chartabsize(ptr, (colnr_t)vcol);
  vcol += incr;
  ++bd.textcol;
     }
     if (vcol < col)
     {
  bd.startspaces = col - vcol;
     }
     else if (vcol > col)
     {
  bd.endspaces = vcol - col;
  bd.startspaces = incr - bd.endspaces;
  --bd.textcol;
  delcount = 1;
     }


     yanklen = strlen((char *)(y_array[i]));
     totlen = count * yanklen + bd.startspaces + bd.endspaces;
     newp = alloc_check((unsigned)totlen + oldlen + 1);
     if (newp == 
# 2663 "ops.c" 3 4
                ((void *)0)
# 2663 "ops.c"
                    )
  break;

     ptr = newp;
     mch_memmove(ptr, oldp, (size_t)bd.textcol);
     ptr += bd.textcol;

     copy_spaces(ptr, (size_t)bd.startspaces);
     ptr += bd.startspaces;

     for (j = 0; j < count; ++j)
     {
  mch_memmove(ptr, y_array[i], (size_t)yanklen);
  ptr += yanklen;
     }

     copy_spaces(ptr, (size_t)bd.endspaces);
     ptr += bd.endspaces;

     mch_memmove(ptr, oldp + bd.textcol + delcount,
    (size_t)(oldlen - bd.textcol - delcount + 1));
     ml_replace(curwin->w_cursor.lnum, newp, 0);

     ++curwin->w_cursor.lnum;
     if (i == 0)
  curwin->w_cursor.col += bd.startspaces;
 }

 curbuf->b_op_end.lnum = curwin->w_cursor.lnum - 1;
 curbuf->b_op_end.col = bd.textcol + totlen - 1;
 if (flags & 2)
 {
     curwin->w_cursor = curbuf->b_op_end;
     curwin->w_cursor.col++;
 }
 else
     curwin->w_cursor.lnum = lnum;
 update_topline();
 if (flags & 2)
     update_screen(40);
 else
     update_screen(30);
    }
    else
    {
 if (y_type == 0)
 {

     if (dir == 1 && gchar_cursor() != '\000')
     {
# 2726 "ops.c"
  {
      ++col;
      if (yanklen)
      {
   ++curwin->w_cursor.col;
   ++curbuf->b_op_end.col;
      }
  }
     }
     new_cursor = curwin->w_cursor;
 }
 else if (dir == (-1))

     --lnum;




 if (y_type == 0 && y_size == 1)
 {
     totlen = count * yanklen;
     if (totlen)
     {
  oldp = ml_get(lnum);
  newp = alloc_check((unsigned)(strlen((char *)(oldp)) + totlen + 1));
  if (newp == 
# 2751 "ops.c" 3 4
             ((void *)0)
# 2751 "ops.c"
                 )
      goto end;
  mch_memmove(newp, oldp, (size_t)col);
  ptr = newp + col;
  for (i = 0; i < count; ++i)
  {
      mch_memmove(ptr, y_array[0], (size_t)yanklen);
      ptr += yanklen;
  }
  mch_memmove(ptr, oldp + col, strlen((char *)(oldp + col)) + 1);
  ml_replace(lnum, newp, 0);

  curwin->w_cursor.col += (colnr_t)(totlen - 1);
     }
     curbuf->b_op_end = curwin->w_cursor;

     if (totlen && (restart_edit || (flags & 2)))
  ++curwin->w_cursor.col;
     update_screenline();
 }
 else
 {


     syn_changed(lnum);

     while (--count >= 0)
     {
  i = 0;
  if (y_type == 0)
  {





      ptr = ml_get(lnum) + col;
      totlen = strlen((char *)(y_array[y_size - 1]));
      newp = alloc_check((unsigned)(strlen((char *)(ptr)) + totlen + 1));
      if (newp == 
# 2790 "ops.c" 3 4
                 ((void *)0)
# 2790 "ops.c"
                     )
   goto error;
      strcpy((char *)(newp), (char *)(y_array[y_size - 1]));
      strcat((char *)(newp), (char *)(ptr));

      ml_append(lnum, newp, (colnr_t)0, 0);
      vim_free(newp);

      oldp = ml_get(lnum);
      newp = alloc_check((unsigned)(col + yanklen + 1));
      if (newp == 
# 2800 "ops.c" 3 4
                 ((void *)0)
# 2800 "ops.c"
                     )
   goto error;

      mch_memmove(newp, oldp, (size_t)col);

      mch_memmove(newp + col, y_array[0], (size_t)(yanklen + 1));
      ml_replace(lnum, newp, 0);

      curwin->w_cursor.lnum = lnum;
      i = 1;
  }

  while (i < y_size)
  {
      if ((y_type != 0 || i < y_size - 1) &&
   ml_append(lnum, y_array[i], (colnr_t)0, 0) == 0)
       goto error;
      lnum++;
      i++;
      if (flags & 1)
      {
   old_pos = curwin->w_cursor;
   curwin->w_cursor.lnum = lnum;
   ptr = ml_get(lnum);
   if (count == 0 && i == y_size - 1)
       lendiff = strlen((char *)(ptr));

   if (*ptr == '#' && (


      (curbuf->b_p_si && !curbuf->b_p_cin) ||





      (curbuf->b_p_cin && in_cinkeys('#', ' ', 1))

         ))
       indent = 0;
   else

        if (*ptr == '\000')
       indent = 0;
   else if (first_indent)
   {
       indent_diff = orig_indent - get_indent();
       indent = orig_indent;
       first_indent = 0;
   }
   else if ((indent = get_indent() + indent_diff) < 0)
       indent = 0;
   set_indent(indent, 1);
   curwin->w_cursor = old_pos;

   if (count == 0 && i == y_size - 1)
       lendiff -= strlen((char *)(ml_get(lnum)));
      }
      ++nr_lines;
  }
     }


     curbuf->b_op_end.lnum = lnum;

     col = strlen((char *)(y_array[y_size - 1])) - lendiff;
     if (col > 1)
  curbuf->b_op_end.col = col - 1;
     else
  curbuf->b_op_end.col = 0;

     if (flags & 2)
     {

  if (y_type == 1)
  {
      if (lnum >= curbuf->b_ml.ml_line_count)
   curwin->w_cursor.lnum = curbuf->b_ml.ml_line_count;
      else
   curwin->w_cursor.lnum = lnum + 1;
      curwin->w_cursor.col = 0;
  }
  else
  {
      curwin->w_cursor.lnum = lnum;
      curwin->w_cursor.col = col;
  }

  redraw_curbuf_later(40);
     }
     else if (y_type == 1)
     {

  curwin->w_cursor.col = 0;
  if (dir == 1)
      ++curwin->w_cursor.lnum;
  beginline(1 | 4);
     }
     else
  curwin->w_cursor = new_cursor;

error:
     if (y_type == 1)
     {
  curbuf->b_op_start.col = 0;
  if (dir == 1)
      curbuf->b_op_start.lnum++;
     }
     mark_adjust(curbuf->b_op_start.lnum + (y_type == 0),
          (linenr_t)(0x7fffffff), nr_lines, 0L);
     update_topline();
     update_screen(30);
 }
    }

    msgmore(nr_lines);
    curwin->w_set_curswant = 1;

end:
    if (allocated)
    {
 vim_free(insert_string);
 if (regname == '=')
     vim_free(y_array);
    }
    if ((flags & 2) && gchar_cursor() == '\000' && curwin->w_cursor.col
           && !(restart_edit || (State & 0x10)))
 --curwin->w_cursor.col;
}


    int
get_register_name(num)
    int num;
{
    if (num == -1)
 return '"';
    else if (num < 10)
 return num + '0';
    else if (num == 36)
 return '-';




    else
 return num + 'a' - 10;
}




    void
do_dis(arg)
    char_u *arg;
{
    int i, n;
    long j;
    char_u *p;
    struct yankreg *yb;
    char_u name;
    int attr;

    if (arg != 
# 2963 "ops.c" 3 4
              ((void *)0) 
# 2963 "ops.c"
                   && *arg == '\000')
 arg = 
# 2964 "ops.c" 3 4
      ((void *)0)
# 2964 "ops.c"
          ;
    attr = highlight_attr[(int)(HLF_8)];


    msg_puts_title((char_u *)("\n--- Registers ---"));
    for (i = -1; i < 37; ++i)
    {
 if (i == -1)
 {
     if (y_previous != 
# 2973 "ops.c" 3 4
                      ((void *)0)
# 2973 "ops.c"
                          )
  yb = y_previous;
     else
  yb = &(y_regs[0]);
 }
 else
     yb = &(y_regs[i]);
 name = get_register_name(i);
 if (yb->y_array != 
# 2981 "ops.c" 3 4
                   ((void *)0)
  
# 2982 "ops.c"
 && (arg == 
# 2982 "ops.c" 3 4
            ((void *)0) 
# 2982 "ops.c"
                 || vim_strchr(arg, name) != 
# 2982 "ops.c" 3 4
                                             ((void *)0)
# 2982 "ops.c"
                                                 ))
 {
     msg_putchar('\n');
     msg_putchar('"');
     msg_putchar(name);
     msg_puts((char_u *)("   "));

     n = (int)Columns - 6;
     for (j = 0; j < yb->y_size && n > 1; ++j)
     {
  if (j)
  {
      msg_puts_attr((char_u *)("^J"), (attr));
      n -= 2;
  }
  for (p = yb->y_array[j]; *p && (n -= charsize(*p)) >= 0; ++p)
      msg_outtrans_len(p, 1);
     }
     if (n > 1 && yb->y_type == 1)
  msg_puts_attr((char_u *)("^J"), (attr));
     out_flush();
 }
    }




    if ((p = get_last_insert()) != 
# 3009 "ops.c" 3 4
                                  ((void *)0)
     
# 3010 "ops.c"
    && (arg == 
# 3010 "ops.c" 3 4
               ((void *)0) 
# 3010 "ops.c"
                    || vim_strchr(arg, '.') != 
# 3010 "ops.c" 3 4
                                               ((void *)0)
# 3010 "ops.c"
                                                   ))
    {
 msg_puts((char_u *)("\n\".   "));
 dis_msg(p, 1);
    }




    if (last_cmdline != 
# 3019 "ops.c" 3 4
                       ((void *)0) 
# 3019 "ops.c"
                            && (arg == 
# 3019 "ops.c" 3 4
                                       ((void *)0) 
# 3019 "ops.c"
                                            || vim_strchr(arg, ':') != 
# 3019 "ops.c" 3 4
                                                                       ((void *)0)
# 3019 "ops.c"
                                                                           ))
    {
 msg_puts((char_u *)("\n\":   "));
 dis_msg(last_cmdline, 0);
    }




    if (curbuf->b_fname != 
# 3028 "ops.c" 3 4
                          ((void *)0)
     
# 3029 "ops.c"
    && (arg == 
# 3029 "ops.c" 3 4
               ((void *)0) 
# 3029 "ops.c"
                    || vim_strchr(arg, '%') != 
# 3029 "ops.c" 3 4
                                               ((void *)0)
# 3029 "ops.c"
                                                   ))
    {
 msg_puts((char_u *)("\n\"%   "));
 dis_msg(curbuf->b_fname, 0);
    }




    if (arg == 
# 3038 "ops.c" 3 4
              ((void *)0) 
# 3038 "ops.c"
                   || vim_strchr(arg, '%') != 
# 3038 "ops.c" 3 4
                                              ((void *)0)
# 3038 "ops.c"
                                                  )
    {
 char_u *fname;
 linenr_t dummy;

 if (buflist_name_nr(0, &fname, &dummy) != 0)
 {
     msg_puts((char_u *)("\n\"#   "));
     dis_msg(fname, 0);
 }
    }




    if (last_search_pat() != 
# 3053 "ops.c" 3 4
                            ((void *)0)
        
# 3054 "ops.c"
       && (arg == 
# 3054 "ops.c" 3 4
                  ((void *)0) 
# 3054 "ops.c"
                       || vim_strchr(arg, '/') != 
# 3054 "ops.c" 3 4
                                                  ((void *)0)
# 3054 "ops.c"
                                                      ))
    {
 msg_puts((char_u *)("\n\"/   "));
 dis_msg(last_search_pat(), 0);
    }





    if (expr_line != 
# 3064 "ops.c" 3 4
                    ((void *)0) 
# 3064 "ops.c"
                         && (arg == 
# 3064 "ops.c" 3 4
                                    ((void *)0) 
# 3064 "ops.c"
                                         || vim_strchr(arg, '=') != 
# 3064 "ops.c" 3 4
                                                                    ((void *)0)
# 3064 "ops.c"
                                                                        ))
    {
 msg_puts((char_u *)("\n\"=   "));
 dis_msg(expr_line, 0);
    }

}





    void
dis_msg(p, skip_esc)
    char_u *p;
    int skip_esc;
{
    int n;

    n = (int)Columns - 6;
    while (*p && !(*p == '\033' && skip_esc && *(p + 1) == '\000') &&
   (n -= charsize(*p)) >= 0)
 msg_outtrans_len(p++, 1);
}




    void
do_do_join(count, insert_space, redraw)
    long count;
    int insert_space;
    int redraw;
{
    if (u_save((linenr_t)(curwin->w_cursor.lnum - 1),
      (linenr_t)(curwin->w_cursor.lnum + count)) == 0)
 return;

    if (count > 10)
 redraw = 0;
    while (--count > 0)
    {
 line_breakcheck();
 if (got_int || do_join(insert_space, redraw) == 0)
 {
     beep_flush();
     break;
 }
    }
    redraw_later(30);





    update_topline_redraw();
}







    int
do_join(insert_space, redraw)
    int insert_space;
    int redraw;
{
    char_u *curr;
    char_u *next;
    char_u *newp;
    int endcurr1, endcurr2;
    int currsize;
    int nextsize;
    int spaces;
    int rows_to_del = 0;
    linenr_t t;

    if (curwin->w_cursor.lnum == curbuf->b_ml.ml_line_count)
 return 0;

    if (redraw)
    {




 if (may_validate_crow() == 1)
     rows_to_del = plines_m(curwin->w_cursor.lnum,
         curwin->w_cursor.lnum + 1);
 else
     redraw = 0;
    }

    curr = ml_get_curline();
    currsize = strlen((char *)(curr));
    endcurr1 = endcurr2 = '\000';
    if (currsize > 0)
    {
 endcurr1 = *(curr + currsize - 1);
 if (currsize > 1)
     endcurr2 = *(curr + currsize - 2);
    }

    next = ml_get((linenr_t)(curwin->w_cursor.lnum + 1));
    spaces = 0;
    if (insert_space)
    {
 next = skipwhite(next);
 if (*next != ')' && currsize != 0 && endcurr1 != '\011')
 {

     if (endcurr1 == ' ')
  endcurr1 = endcurr2;
     else
  ++spaces;

     if ( p_js
      && (endcurr1 == '.'
   || (vim_strchr(p_cpo, 'j') == 
# 3184 "ops.c" 3 4
                                       ((void *)0)
       
# 3185 "ops.c"
      && (endcurr1 == '?' || endcurr1 == '!'))))
  ++spaces;
 }
    }
    nextsize = strlen((char *)(next));

    newp = alloc_check((unsigned)(currsize + nextsize + spaces + 1));
    if (newp == 
# 3192 "ops.c" 3 4
               ((void *)0)
# 3192 "ops.c"
                   )
 return 0;






    mch_memmove(newp + currsize + spaces, next, (size_t)(nextsize + 1));

    curr = ml_get_curline();
    mch_memmove(newp, curr, (size_t)currsize);

    copy_spaces(newp + currsize, (size_t)spaces);

    ml_replace(curwin->w_cursor.lnum, newp, 0);



    syn_changed(curwin->w_cursor.lnum);







    t = curwin->w_cursor.lnum;
    ++curwin->w_cursor.lnum;
    del_lines(1L, 0, 0);
    curwin->w_cursor.lnum = t;





    if (redraw)
    {
 rows_to_del -= plines(curwin->w_cursor.lnum);
 if (rows_to_del > 0)
     win_del_lines(curwin, curwin->w_cline_row + curwin->w_cline_height,
           rows_to_del, 1, 1);
    }




    if (currsize == 0)
 curwin->w_cursor.col = 0;
    else
    {
 curwin->w_cursor.col = currsize - 1;
 (void)oneright();
    }
    changed();

    return 1;
}







    static int
same_leader(leader1_len, leader1_flags, leader2_len, leader2_flags)
    int leader1_len;
    char_u *leader1_flags;
    int leader2_len;
    char_u *leader2_flags;
{
    int idx1 = 0, idx2 = 0;
    char_u *p;
    char_u *line1;
    char_u *line2;

    if (leader1_len == 0)
 return (leader2_len == 0);
# 3279 "ops.c"
    if (leader1_flags != 
# 3279 "ops.c" 3 4
                        ((void *)0)
# 3279 "ops.c"
                            )
    {
 for (p = leader1_flags; *p && *p != ':'; ++p)
 {
     if (*p == 'f')
  return (leader2_len == 0);
     if (*p == 'e')
  return 0;
     if (*p == 's')
     {
  if (*(ml_get_curline() + leader1_len) == '\000')
      return 0;
  if (leader2_flags == 
# 3291 "ops.c" 3 4
                      ((void *)0) 
# 3291 "ops.c"
                           || leader2_len == 0)
      return 0;
  for (p = leader2_flags; *p && *p != ':'; ++p)
      if (*p == 'm')
   return 1;
  return 0;
     }
 }
    }





    line1 = vim_strsave(ml_get_curline());
    if (line1 != 
# 3306 "ops.c" 3 4
                ((void *)0)
# 3306 "ops.c"
                    )
    {
 for (idx1 = 0; ((line1[idx1]) == ' ' || (line1[idx1]) == '\t'); ++idx1)
     ;
 line2 = ml_get(curwin->w_cursor.lnum + 1);
 for (idx2 = 0; idx2 < leader2_len; ++idx2)
 {
     if (!((line2[idx2]) == ' ' || (line2[idx2]) == '\t'))
     {
  if (line1[idx1++] != line2[idx2])
      break;
     }
     else
  while (((line1[idx1]) == ' ' || (line1[idx1]) == '\t'))
      ++idx1;
 }
 vim_free(line1);
    }
    return (idx2 == leader2_len && idx1 == leader1_len);
}





    void
op_format(oap)
    OPARG *oap;
{
    long old_line_count = curbuf->b_ml.ml_line_count;
    int is_not_par;
    int next_is_not_par;
    int is_end_par;
    int prev_is_end_par = 0;

    int leader_len = 0;
    int next_leader_len;
    char_u *leader_flags = 
# 3343 "ops.c" 3 4
                          ((void *)0)
# 3343 "ops.c"
                              ;
    char_u *next_leader_flags;

    int advance = 1;
    int second_indent = -1;
    int do_second_indent;
    int first_par_line = 1;
    int smd_save;
    long count;
    int need_set_indent = 1;
    int force_format = 0;
    int max_len;
    int screenlines = -1;

    if (u_save((linenr_t)(oap->start.lnum - 1),
           (linenr_t)(oap->end.lnum + 1)) == 0)
 return;



    if (oap->end.lnum - oap->start.lnum < Rows)
 screenlines = plines_m(oap->start.lnum, oap->end.lnum);


    max_len = comp_textwidth(1) * 3;


    curbuf->b_op_start = oap->start;



    fo_do_comments = has_format_option('q');

    do_second_indent = has_format_option('2');




    if (curwin->w_cursor.lnum > 1)
 is_not_par = fmt_check_par(curwin->w_cursor.lnum - 1

       , &leader_len, &leader_flags

      );
    else
 is_not_par = 1;
    next_is_not_par = fmt_check_par(curwin->w_cursor.lnum

     , &next_leader_len, &next_leader_flags

     );
    is_end_par = (is_not_par || next_is_not_par);

    curwin->w_cursor.lnum--;
    for (count = oap->line_count; count > 0 && !got_int; --count)
    {



 if (advance)
 {
     curwin->w_cursor.lnum++;
     prev_is_end_par = is_end_par;
     is_not_par = next_is_not_par;

     leader_len = next_leader_len;
     leader_flags = next_leader_flags;

 }




 if (count == 1)
 {
     next_is_not_par = 1;

     next_leader_len = 0;
     next_leader_flags = 
# 3421 "ops.c" 3 4
                        ((void *)0)
# 3421 "ops.c"
                            ;

 }
 else
     next_is_not_par = fmt_check_par(curwin->w_cursor.lnum + 1

     , &next_leader_len, &next_leader_flags

     );
 advance = 1;
 is_end_par = (is_not_par || next_is_not_par);




 if (!is_not_par)
 {




     if (first_par_line
      && do_second_indent
      && prev_is_end_par
      && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count

      && leader_len == 0
      && next_leader_len == 0

      && !(*ml_get(curwin->w_cursor.lnum + 1) == '\000'))
  second_indent = get_indent_lnum(curwin->w_cursor.lnum + 1);




     if (curwin->w_cursor.lnum >= curbuf->b_ml.ml_line_count

      || !same_leader(leader_len, leader_flags,
       next_leader_len, next_leader_flags)

      )
  is_end_par = 1;





     if (is_end_par || force_format)
     {
  if (need_set_indent)


      set_indent(get_indent(), 1);


  coladvance((0x7fffffff));
  while (curwin->w_cursor.col && vim_isspace(gchar_cursor()))
      dec_cursor();



  syn_changed(curwin->w_cursor.lnum);


  State = 0x10;
  smd_save = p_smd;
  p_smd = 0;
  insertchar('\000', 1, second_indent, 0);
  State = 0x01;
  p_smd = smd_save;
  second_indent = -1;

  need_set_indent = is_end_par;
  if (is_end_par)
      first_par_line = 1;
  force_format = 0;
     }





     if (!is_end_par)
     {
  advance = 0;
  curwin->w_cursor.lnum++;
  curwin->w_cursor.col = 0;

  (void)del_chars((long)next_leader_len, 0);

  curwin->w_cursor.lnum--;
  if (do_join(1, 0) == 0)
  {
      beep_flush();
      break;
  }
  first_par_line = 0;

  if (strlen((char *)(ml_get_curline())) > (size_t)max_len)
      force_format = 1;
  else
      force_format = 0;
     }
 }
 line_breakcheck();
    }

    fo_do_comments = 0;






    if (screenlines > 0)
    {
 screenlines -= plines_m(oap->start.lnum, curwin->w_cursor.lnum);
 if (screenlines > 0)
     win_del_lines(curwin, curwin->w_cline_row, screenlines,
         0, 1);
 else if (screenlines < 0)
     win_ins_lines(curwin, curwin->w_cline_row, screenlines,
         0, 1);
    }






    if (oap->end_adjusted && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)
 ++curwin->w_cursor.lnum;
    beginline(1 | 4);
    update_screen(40);
    msgmore(curbuf->b_ml.ml_line_count - old_line_count);


    curbuf->b_op_end = curwin->w_cursor;
}
# 3570 "ops.c"
    static int
fmt_check_par(lnum, leader_len, leader_flags)
    linenr_t lnum;
    int *leader_len;
    char_u **leader_flags;
{
    char_u *flags = 
# 3576 "ops.c" 3 4
                   ((void *)0)
# 3576 "ops.c"
                       ;
    char_u *ptr;

    ptr = ml_get(lnum);
    *leader_len = get_leader_len(ptr, leader_flags, 0);

    if (*leader_len > 0)
    {



 flags = *leader_flags;
 while (*flags && *flags != ':' && *flags != 'e')
     ++flags;
    }

    return (ptr[*leader_len] == '\000'
     || (*leader_len > 0 && *flags == 'e')
     || startPS(lnum, '\000', 0));
}
# 3617 "ops.c"
    static void
block_prep(oap, bdp, lnum, is_del)
    OPARG *oap;
    struct block_def *bdp;
    linenr_t lnum;
    int is_del;
{
    int incr = 0;
    char_u *pend;
    char_u *pstart;

    bdp->startspaces = 0;
    bdp->endspaces = 0;
    bdp->textlen = 0;
    bdp->textcol = 0;
    bdp->start_vcol = 0;
    bdp->end_vcol = 0;

    bdp->is_short = 0;
    bdp->is_oneChar = 0;
    bdp->pre_whitesp = 0;
    bdp->pre_whitesp_c = 0;

    pstart = ml_get(lnum);
    while (bdp->start_vcol < oap->start_vcol && *pstart)
    {

 incr = lbr_chartabsize(pstart, (colnr_t)bdp->start_vcol);
 bdp->start_vcol += incr;
 ++bdp->textcol;

 if (((*pstart) == ' ' || (*pstart) == '\t'))
 {
     bdp->pre_whitesp += incr;
     bdp->pre_whitesp_c++;
 }
 else
 {
     bdp->pre_whitesp = 0;
     bdp->pre_whitesp_c = 0;
 }

 ++pstart;
    }
    bdp->start_char_vcols = incr;
    if (bdp->start_vcol < oap->start_vcol)
    {

 bdp->is_short = 1;

 if (!is_del || oap->op_type == 18)
     bdp->endspaces = oap->end_vcol - oap->start_vcol + 1;
    }
    else
    {
 bdp->startspaces = bdp->start_vcol - oap->start_vcol;
 if (is_del && bdp->startspaces)
     bdp->startspaces = bdp->start_char_vcols - bdp->startspaces;
 pend = pstart;
 bdp->end_vcol = bdp->start_vcol;
 if (bdp->end_vcol > oap->end_vcol)
 {

     bdp->is_oneChar = 1;

     if (oap->op_type == 17)
  bdp->endspaces = bdp->start_char_vcols - bdp->startspaces;
     else if (oap->op_type == 18)
     {
  bdp->startspaces += oap->end_vcol - oap->start_vcol + 1;
  bdp->endspaces = bdp->start_char_vcols - bdp->startspaces;
     }
     else
     {
  bdp->startspaces = oap->end_vcol - oap->start_vcol + 1;
  if (is_del && oap->op_type != 4)
      bdp->startspaces = bdp->start_char_vcols - bdp->startspaces;
     }
 }
 else
 {
     while (bdp->end_vcol <= oap->end_vcol && *pend)
     {

  incr = lbr_chartabsize(pend, (colnr_t)bdp->end_vcol);
  bdp->end_vcol += incr;
  ++pend;
     }
     if (bdp->end_vcol <= oap->end_vcol
      && (!is_del
   || oap->op_type == 18
   || oap->op_type == 16))
     {

  bdp->is_short = 1;

  if (oap->op_type == 18)
      bdp->endspaces = oap->end_vcol - bdp->end_vcol + 1;
  else
      bdp->endspaces = 0;
     }
     else if (bdp->end_vcol > oap->end_vcol)
     {
  bdp->endspaces = bdp->end_vcol - oap->end_vcol - 1;
  if (!is_del && pend != pstart && bdp->endspaces)
      --pend;
     }
 }

 bdp->end_char_vcols = incr;

 if (is_del && bdp->startspaces)
 {
     --pstart;
     --bdp->textcol;
 }
 bdp->textlen = (int)(pend - pstart);
    }
    bdp->textstart = pstart;
}
# 3769 "ops.c"
    int
do_addsub(command, Prenum1)
    int command;
    linenr_t Prenum1;
{
    int col;
    char_u buf1[30];
    char_u buf2[30];
    int hex;
    static int hexupper = 0;
    unsigned long n;
    unsigned long oldn;
    char_u *ptr;
    int c;
    int length = 0;
    int todel;
    int dohex;
    int dooct;
    int firstdigit;
    int negative;
    int subtract;

    dohex = (vim_strchr(curbuf->b_p_nf, 'x') != 
# 3791 "ops.c" 3 4
                                               ((void *)0)
# 3791 "ops.c"
                                                   );
    dooct = (vim_strchr(curbuf->b_p_nf, 'o') != 
# 3792 "ops.c" 3 4
                                               ((void *)0)
# 3792 "ops.c"
                                                   );

    ptr = ml_get_curline();
    ;




    col = curwin->w_cursor.col;
    if (dohex)
 while (col > 0 && 
# 3802 "ops.c" 3 4
                  ((*__ctype_b_loc ())[(int) ((
# 3802 "ops.c"
                  ptr[col]
# 3802 "ops.c" 3 4
                  ))] & (unsigned short int) _ISxdigit)
# 3802 "ops.c"
                                    )
     --col;
    if ( dohex
     && col > 0
     && (ptr[col] == 'X'
  || ptr[col] == 'x')
     && ptr[col - 1] == '0'
     && 
# 3809 "ops.c" 3 4
       ((*__ctype_b_loc ())[(int) ((
# 3809 "ops.c"
       ptr[col + 1]
# 3809 "ops.c" 3 4
       ))] & (unsigned short int) _ISxdigit)
# 3809 "ops.c"
                             )
    {



 --col;
    }
    else
    {



 col = curwin->w_cursor.col;

 while (ptr[col] != '\000' && !
# 3823 "ops.c" 3 4
                           ((*__ctype_b_loc ())[(int) ((
# 3823 "ops.c"
                           ptr[col]
# 3823 "ops.c" 3 4
                           ))] & (unsigned short int) _ISdigit)
# 3823 "ops.c"
                                            )
     ++col;

 while (col > 0 && 
# 3826 "ops.c" 3 4
                  ((*__ctype_b_loc ())[(int) ((
# 3826 "ops.c"
                  ptr[col - 1]
# 3826 "ops.c" 3 4
                  ))] & (unsigned short int) _ISdigit)
# 3826 "ops.c"
                                       )
     --col;
    }




    firstdigit = ptr[col];
    ;
    if (!
# 3835 "ops.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 3835 "ops.c"
        firstdigit
# 3835 "ops.c" 3 4
        ))] & (unsigned short int) _ISdigit) 
# 3835 "ops.c"
                            || u_save_cursor() != 1)
    {
 beep_flush();
 return 0;
    }


    ptr = ml_get_curline();
    ;

    negative = 0;
    if (col > 0 && ptr[col - 1] == '-')
    {
 --col;
 negative = 1;
    }


    vim_str2nr(ptr + col, &hex, &length, dooct, dohex, 
# 3853 "ops.c" 3 4
                                                      ((void *)0)
# 3853 "ops.c"
                                                          , &n);


    if (hex && negative)
    {
 ++col;
 --length;
 negative = 0;
    }


    subtract = 0;
    if (command == (('X') & 0x1f))
 subtract ^= 1;
    if (negative)
 subtract ^= 1;

    oldn = n;
    if (subtract)
 n -= (unsigned long)Prenum1;
    else
 n += (unsigned long)Prenum1;


    if (!hex)
    {
 if (subtract)
 {
     if (n > oldn)
     {
  n = 1 + (n ^ (unsigned long)-1);
  negative ^= 1;
     }
 }
 else
 {
     if (n < oldn)
     {
  n = (n ^ (unsigned long)-1);
  negative ^= 1;
     }
 }
 if (n == 0)
     negative = 0;
    }




    curwin->w_cursor.col = col;
    todel = length;
    c = gchar_cursor();




    if (c == '-')
 --length;
    while (todel-- > 0)
    {
 if (
# 3913 "ops.c" 3 4
    ((*__ctype_b_loc ())[(int) ((
# 3913 "ops.c"
    c
# 3913 "ops.c" 3 4
    ))] & (unsigned short int) _ISalpha)
# 3913 "ops.c"
              )
 {
     if (
# 3915 "ops.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 3915 "ops.c"
        c
# 3915 "ops.c" 3 4
        ))] & (unsigned short int) _ISupper)
# 3915 "ops.c"
                  )
  hexupper = 1;
     else
  hexupper = 0;
 }
 (void)del_char(0);
 c = gchar_cursor();
    }




    ptr = buf1;
    if (negative)
    {
 *ptr++ = '-';
    }
    if (hex)
    {
 *ptr++ = '0';
 --length;
    }
    if (hex == 'x' || hex == 'X')
    {
 *ptr++ = hex;
 --length;
    }




    if (hex == 0)
 sprintf((char *)buf2, "%lu", n);
    else if (hex == '0')
 sprintf((char *)buf2, "%lo", n);
    else if (hex && hexupper)
 sprintf((char *)buf2, "%lX", n);
    else
 sprintf((char *)buf2, "%lx", n);
    length -= strlen((char *)(buf2));





    if (firstdigit == '0')
 while (length-- > 0)
     *ptr++ = '0';
    *ptr = '\000';
    strcat((char *)(buf1), (char *)(buf2));
    ins_str(buf1);
    --curwin->w_cursor.col;
    curwin->w_set_curswant = 1;




    update_screenline();
    return 1;
}


    int
read_viminfo_register(line, fp, force)
    char_u *line;
    FILE *fp;
    int force;
{
    int eof;
    int do_it = 1;
    int size;
    int limit;
    int i;
    int set_prev = 0;
    char_u *str;
    char_u **array = 
# 3990 "ops.c" 3 4
                     ((void *)0)
# 3990 "ops.c"
                         ;


    str = line + 1;
    if (*str == '"')
    {
 set_prev = 1;
 str++;
    }
    if (!
# 3999 "ops.c" 3 4
        ((*__ctype_b_loc ())[(int) ((
# 3999 "ops.c"
        *str
# 3999 "ops.c" 3 4
        ))] & (unsigned short int) _ISalnum) 
# 3999 "ops.c"
                      && *str != '-')
    {
 if (viminfo_error("Illegal register name", line))
     return 1;
 do_it = 0;
    }
    get_yank_register(*str++, 0);
    if (!force && y_current->y_array != 
# 4006 "ops.c" 3 4
                                       ((void *)0)
# 4006 "ops.c"
                                           )
 do_it = 0;
    size = 0;
    limit = 100;
    if (do_it)
    {
 if (set_prev)
     y_previous = y_current;
 vim_free(y_current->y_array);
 array = y_current->y_array =
         (char_u **)alloc((unsigned)(limit * sizeof(char_u *)));
 str = skipwhite(str);
 if (strncmp((char *)(str), (char *)("CHAR"), (size_t)(4)) == 0)
     y_current->y_type = 0;
 else if (strncmp((char *)(str), (char *)("BLOCK"), (size_t)(5)) == 0)
     y_current->y_type = 2;
 else
     y_current->y_type = 1;
    }
    while (!(eof = vim_fgets(line, 512, fp))
     && (line[0] == '\011' || line[0] == '<'))
    {
 if (do_it)
 {
     if (size >= limit)
     {
  y_current->y_array = (char_u **)
         alloc((unsigned)(limit * 2 * sizeof(char_u *)));
  for (i = 0; i < limit; i++)
      y_current->y_array[i] = array[i];
  vim_free(array);
  limit *= 2;
  array = y_current->y_array;
     }
     str = viminfo_readstring(line + 1, fp);
     if (str != 
# 4041 "ops.c" 3 4
               ((void *)0)
# 4041 "ops.c"
                   )
  array[size++] = str;
     else
  do_it = 0;
 }
    }
    if (do_it)
    {
 if (size == 0)
 {
     vim_free(array);
     y_current->y_array = 
# 4052 "ops.c" 3 4
                         ((void *)0)
# 4052 "ops.c"
                             ;
 }
 else if (size < limit)
 {
     y_current->y_array =
   (char_u **)alloc((unsigned)(size * sizeof(char_u *)));
     for (i = 0; i < size; i++)
  y_current->y_array[i] = array[i];
     vim_free(array);
 }
 y_current->y_size = size;
    }
    return eof;
}

    void
write_viminfo_registers(fp)
    FILE *fp;
{
    int i, j;
    char_u *type;
    char_u c;
    int num_lines;
    int max_num_lines;

    fprintf(fp, "\n# Registers:\n");

    max_num_lines = get_viminfo_parameter('"');
    if (max_num_lines == 0)
 return;
    for (i = 0; i < 37; i++)
    {
 if (y_regs[i].y_array == 
# 4084 "ops.c" 3 4
                         ((void *)0)
# 4084 "ops.c"
                             )
     continue;





 switch (y_regs[i].y_type)
 {
     case 1:
  type = (char_u *)"LINE";
  break;
     case 0:
  type = (char_u *)"CHAR";
  break;
     case 2:
  type = (char_u *)"BLOCK";
  break;
     default:
  sprintf((char *)IObuff, "Unknown register type %d",
      y_regs[i].y_type);
  emsg(IObuff);
  type = (char_u *)"LINE";
  break;
 }
 if (y_previous == &y_regs[i])
     fprintf(fp, "\"");
 if (i == 36)
     c = '-';
 else if (i < 10)
     c = '0' + i;
 else
     c = 'a' + i - 10;
 fprintf(fp, "\"%c\t%s\n", c, type);
 num_lines = y_regs[i].y_size;


 if (max_num_lines > 0 && num_lines > max_num_lines)
     num_lines = max_num_lines;
 for (j = 0; j < num_lines; j++)
 {
     
# 4125 "ops.c" 3 4
    _IO_putc (
# 4125 "ops.c"
    '\t'
# 4125 "ops.c" 3 4
    , 
# 4125 "ops.c"
    fp
# 4125 "ops.c" 3 4
    )
# 4125 "ops.c"
                  ;
     viminfo_writestring(fp, y_regs[i].y_array[j]);
 }
    }
}
# 4287 "ops.c"
    char_u *
get_reg_contents(regname)
    int regname;
{
    long i;
    char_u *retval;
    int allocated;
    long len;


    if (regname == '=')
 return 
# 4298 "ops.c" 3 4
       ((void *)0)
# 4298 "ops.c"
           ;

    if (regname == '@')
 regname = '"';


    if (regname != '\000' && !valid_yank_reg(regname, 0))
 return 
# 4305 "ops.c" 3 4
       ((void *)0)
# 4305 "ops.c"
           ;
# 4317 "ops.c"
    if (get_spec_reg(regname, &retval, &allocated, 0))
    {
 if (retval == 
# 4319 "ops.c" 3 4
              ((void *)0)
# 4319 "ops.c"
                  )
     return 
# 4320 "ops.c" 3 4
           ((void *)0)
# 4320 "ops.c"
               ;
 if (!allocated)
     retval = vim_strsave(retval);
 return retval;
    }

    get_yank_register(regname, 0);
    if (y_current->y_array == 
# 4327 "ops.c" 3 4
                             ((void *)0)
# 4327 "ops.c"
                                 )
 return 
# 4328 "ops.c" 3 4
       ((void *)0)
# 4328 "ops.c"
           ;




    len = 0;
    for (i = 0; i < y_current->y_size; ++i)
    {
 len += strlen((char *)(y_current->y_array[i]));




 if (y_current->y_type == 1 || i < y_current->y_size - 1)
     ++len;
    }

    retval = lalloc(len + 1, 1);




    if (retval != 
# 4350 "ops.c" 3 4
                 ((void *)0)
# 4350 "ops.c"
                     )
    {
 len = 0;
 for (i = 0; i < y_current->y_size; ++i)
 {
     strcpy((char *)(retval + len), (char *)(y_current->y_array[i]));
     len += strlen((char *)(retval + len));





     if (y_current->y_type == 1 || i < y_current->y_size - 1)
  retval[len++] = '\n';
 }
 retval[len] = '\000';
    }

    return retval;
}






    void
write_reg_contents(name, str)
    int name;
    char_u *str;
{
    struct yankreg *old_y_previous, *old_y_current;
    long len;


    if (name == '/')
    {
 set_last_search_pat(str, 0, 1, 1);
 return;
    }

    if (!valid_yank_reg(name, 1))
    {
 emsg2((char_u *)("Invalid register name: '%s'"), (char_u *)(transchar(name)));
 return;
    }

    if (name == '_')
 return;


    old_y_previous = y_previous;
    old_y_current = y_current;

    get_yank_register(name, 1);
    if (!y_append)
 free_yank_all();
    len = strlen((char *)(str));
    str_to_reg(y_current,
     (len > 0 && (str[len - 1] == '\n' || str[len -1] == '\r'))
      ? 1 : 0, str, len);
# 4423 "ops.c"
    y_previous = old_y_previous;
    y_current = old_y_current;
}







    static void
str_to_reg(y_ptr, type, str, len)
    struct yankreg *y_ptr;
    int type;
    char_u *str;
    long len;
{
    int lnum;
    long start;
    long i;
    int extra;
    int newlines;
    int extraline = 0;
    int append = 0;
    char_u *s;
    char_u **pp;

    if (y_ptr->y_array == 
# 4450 "ops.c" 3 4
                         ((void *)0)
# 4450 "ops.c"
                             )
 y_ptr->y_size = 0;




    newlines = 0;
    for (i = 0; i < len; i++)
 if (str[i] == '\n')
     ++newlines;
    if (type == 0 || len == 0 || str[len - 1] != '\n')
    {
 extraline = 1;
 ++newlines;
    }
    if (y_ptr->y_size > 0 && y_ptr->y_type == 0)
    {
 append = 1;
 --newlines;
    }





    pp = (char_u **)lalloc_clear((y_ptr->y_size + newlines)
          * sizeof(char_u *), 1);
    if (pp == 
# 4477 "ops.c" 3 4
             ((void *)0)
# 4477 "ops.c"
                 )
 return;
    for (lnum = 0; lnum < y_ptr->y_size; ++lnum)
 pp[lnum] = y_ptr->y_array[lnum];
    vim_free(y_ptr->y_array);
    y_ptr->y_array = pp;




    for (start = 0; start < len + extraline; start += i + 1)
    {
 for (i = start; i < len; ++i)
     if (str[i] == '\n')
  break;
 i -= start;
 if (append)
 {
     --lnum;
     extra = strlen((char *)(y_ptr->y_array[lnum]));
 }
 else
     extra = 0;
 s = alloc((unsigned)(i + extra + 1));
 if (s == 
# 4501 "ops.c" 3 4
         ((void *)0)
# 4501 "ops.c"
             )
     break;
 if (extra)
 {
     mch_memmove(s, y_ptr->y_array[lnum], (size_t)extra);
     vim_free(y_ptr->y_array[lnum]);
 }
 if (i)
     mch_memmove(s + extra, str + start, (size_t)i);
 extra += i;
 s[extra] = '\000';
 y_ptr->y_array[lnum++] = s;
 while (--extra >= 0)
 {
     if (*s == '\000')
  *s = '\n';
     ++s;
 }
 append = 0;
    }
    y_ptr->y_type = type;
    y_ptr->y_size = lnum;
}


    void
clear_oparg(oap)
    OPARG *oap;
{
    memset((oap), (0), (sizeof(OPARG)));
}
